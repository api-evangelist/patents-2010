---

title: Connecting module for connecting at least one sensor, actuator, or effector to a service-oriented-architecture network
abstract: The invention relates to a connecting module () for connecting at least one sensor (), effector, or actuator to a service-oriented-architecture, called SOA, network (), wherein a functionality of the at least one sensor () is mapped as a service in the SOA network (). In order to enable the integration of sensors () that are not SOA-capable in themselves into an SOA environment, the connecting module () has at least one first interface () for connecting the at least one sensor (), effector, or actuator, at least one second interface () for connecting the SOA network (), and a computing device () for executing a computer program, wherein a part () of the computer program to be executed is specified by default and another part () of the computer program is freely programmable by a manufacturer of the at least one sensor () in order to adapt firmware on the at least one sensor () to the SOA environment. The invention further relates to a module unit () of the connecting module () that prepares the service mapped in the SOA environment for transmission over a military radio network () having low bandwidth while maintaining the SOA functionality.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08751707&OS=08751707&RS=08751707
owner: Thales Defence Deutschland GmbH
number: 08751707
owner_city: 
owner_country: DE
publication_date: 20101218
---
The present application claims priority to German application 10 2010 005 658.8 filed Jan. 19 2010 which is incorporated herein in its entirety at least by reference.

The present invention is based on a service oriented architecture SOA network. SOA extends the concept of web services to an architecture for comprehensive and service based applications where existing systems and applications that are involved are speeded up by using new functionalities. The prior art discloses SOA for the widest variety of applications. SOA is an information technology IT architecture with flexible software units what are known as services as a central concept. When the SOA concept is used for business applications services implement or support business functions and are oriented thereto. They are independently and loosely coupled and usually exhibit a physical distribution for example cf. US 2009 0281861 A1 . The SOA concept is also known in the field of telemedicine for example cf. US 2009 0254362 A1 .

Finally the SOA concept is also increasingly being used in the field of security and defense engineering cf. EP 2 112 624 A1 . In this case sensors integrated in an SOA network may be in the form of cameras for capturing a defined physical region in the form of geophones for detecting tremors or in the form of any other sensors which provide information about a physical area that is to be monitored an emergency vehicle that is to be monitored or the like for example. Effectors integrated in an SOA network may be in the form of arbitrary weapons systems for example guns on a tank or else in the form of jamming transmitters smoke mortars or the like. Actuators integrated in an SOA network may be in the form of arbitrary elements which convert an input variable into an output variable of a different kind in order to bring about a desired action or an effect. In particular an actuator may be in the form of an electric motor an electromagnet or an arbitrary drive system. In order to be able to connect the sensors effectors or actuators to the SOA network and integrate them into the SOA concept they need to have SOA capability. The explanations which follow refer only to sensors for the sake of simplicity. However the explanations also apply accordingly to effectors actuators and any other participants in an SOA network.

The text below provides a more detailed discussion of the principle of what is known as networked operational management operational framework . The spectrum of tasks and the capability profile derived therefrom for the security agencies particularly national armed forces such as the Federal Armed Forces in Germany or multinational armed forces e.g. NATO are determined by the political security and defense guidelines and also the international obligations of the respective nation of the multinational coalition. In order to achieve a sustainable improvement in operational capability in the prescribed spectrum of tasks with consistent concentration on the core capabilities a transformation process is increasingly being introduced by means of which in light of the operations spanning sections of armed forces and multinational operations and the resultant interoperability demands visions and approaches are shifting ever closer to the focus of conceptual discussions under the heading of networked operational management NetOpF .

In specific terms NetOpF means that a comprehensive information complex management reconnaissance action including operational support needs to be provided which extends vertically over all management levels and horizontally over all functional task areas in order to supply all those involved ranging from individual soldiers through the military management levels the support instances to the political discussion levels with the important information in each case. Since the armed forces comprise a multiplicity of elements which need to be brought to bear in a joint operation synergistic effects can arise only if the elements or units involved act not as individuals but rather as part of a whole.

The improvement in the information quality and in the information exchange attributable to the capability of capturing evaluating compressing providing and protecting information in its entirety forms the basis for an effective and efficient management process.

A fundamental prerequisite for this effective information complex and the associated dominance in the information space is the consistent application of modern information technology. However still more compelling are the network capability of the individual elements and the interoperability among one another but also with the information systems of other sections of armed forces e.g. army air force navy with the systems of partnering nations and with the civil and military departments. A communication infrastructure which is free of media disruption and which provides the superordinate information services with adequate transport services in the widest variety of forms and qualities ensures realtime information exchange which combines the previously largely separate and differently structured information in one information complex.

The text below provides a more detailed discussion of the principle of service oriented architecture architectural framework . Interoperability is the key to commonality among armed forces multinationality and flexibility. It is a comprehensive bracket around all categories of capability. Within NATO and also nationally the use of the Architecture method is prescribed which is intended to ensure that the interoperability requirements regarding engineering process and methodology can be met. An advantage of the service oriented architecture principle SOA is the opportunity to reuse functionalities once implemented as what are known as services with little involvement and to provide them for other systems for use. A service oriented architecture is as the name already suggests a service based architecture for a software landscape ideally implemented using web services.

The SOA principle is explained in more detail below using the example of implementation in business processes. Instead of assigning a fixed monolithic IT Information Technology solution to a particular subprocess SOA works with smaller units. The individual reusable business services are loosely coupled and are configured according to the business process. One can imagine this as a normal purchase operation A particular business process service consumer purchases the combination it requires from a pool of individual services service providers and in this way obtains more or less bespoke IT support. A prerequisite is a precise definition of the individual business services service agreement .

The great advantage of the SOA concept is that in the event of changes in the business process it is not immediately necessary to invest in a new IT solution but rather only the combination of services needs to be customized. This makes companies more versatile and more flexible on a whole and in this way provides them with an edge over competitors. Users think it important precisely that they are able to react quickly to seasonal conditions such as peak demand or altered customer requirements as a result of the flexible handling of business processes and are also able to support their growth in the long term as a result of a future oriented architecture. When considered in their entirety flexibility and reusability and also the opportunity for orchestration i.e. the flexible combination of services are in the foreground.

However it must be conceded that the technological implementation in this regard is currently still in its infancy. The main issue however is that the business targets and IT strategy of a company shift closer together as a result of SOA. SOA helps provide users with continual optimization of their business processes with innovation and higher efficiency. In order to actually achieve this however it is essential that the relevant processes are defined precisely and that the reusability of the services is ensured.

The text below provides a more detailed discussion of the principle of networked operational management NetOpF in combination with SOA. In the civilian world of business service oriented architectures SOA as an infrastructure for business processes and the management thereof are critical for the economic success and competitiveness of companies. The focus of service oriented architectures is on process standardization automation and improvement on the one hand and flexibility attributable to the dynamics of the markets and of customer requirements on the other hand.

On the basis of the notional synonymity of the terms competitiveness and superiority of action and the analogy of the process factors and the flexibility attributable to the dynamics of operations it follows that a service oriented architecture SOA as an infrastructure for the mission based military processes and scenarios and the management thereof can be critical for the superiority of action and the success of the operation. In the case of this parallelization of the civilian and military worlds a quite crucial aspect needs to be considered however. The organizational and structural categorizations into static transferable and mobile realms are by a long way not as pronounced in the civilian world of business as in military operational scenarios and therefore need to have allowances made for them at the design stage.

For the conceptual and intellectual continuation of the SOA design however it should be taken into account that the technological parallelism has existed to date essentially only between the civilian world and the static realm.

In relation to the transmission of information powerful and above all interoperable communication systems are of crucial importance for the desired information complex. Whereas the transmission of information by large organizations needs to be based on a powerful wide area network which can sometimes extend as far as the battalion level on account of the spaciousness of the operational area the local subsystems of the mobile subscribers and vehicles on the lower hierarchy levels need to be involved in the information complex by means of mobile radio systems said radio systems usually being able to provide only a limited bandwidth in comparison with wide area networks. This aspect is covered in the architectural considerations by the domain concept which covers the homogeneity of the entire information complex but at the same time also allows autonomous operation of individual domains.

Interoperability demands exist not only in the realm of information transmission however. Particularly the demanded support for smaller multinational response forces produces interoperability demands with regard to information sharing use of the information by multiple participants and security.

These ambitious operational objectives can be achieved only by flexible adaptative and highly networked information and communication infrastructures as may be provided by consistent use of the service oriented paradigms.

Various known activities have been able to show over the entire range of military operations the potential which there is in the application of a service oriented architecture SOA which provides the technical and specialized services and functionalities in the form of loosely coupled services.

The preceding sections have already indicated that the basis for possible implementation of a system supporting SOA based operations could be solutions from the civilian realm which are already available today. The from today s point of view unproblematic integration of these solutions provides a homogenous infrastructural basis for implementing the elaborated design. One critical component in this environment is the tactical realm with its transferable and mobile components which plays a critical role particularly for the operational scenarios indicated above however in order to show the interactions between a service oriented architecture and the tactical process and to demonstrate the operational benefit of an SOA in relation to optimum behavior within the context of mission tactics.

The development strategy of NetOpF and NNEC NATO Network Enabled Capabilities is based on the necessary operational capabilities being obtained through the symbiosis of independent system capabilities. Individual systems capabilities which have arisen in successive development cycles need to be of modular design designed in modular fashion so that they can be merged without difficulty to form the NetOpF overall system capability. The consistent use of a service oriented approach supports the evolutionary development of NetOpF by virtue of this approach forcing the capabilities to be concentrated and hence being a solid concept for the development of NetOpF .

A quite essential aspect which must not be overshadowed in this consideration of the whole picture is the incorporation of the individual system capabilities provided by existing old systems subsequently called legacy systems . The aptitude for networked operational management on the basis of the service oriented paradigm presupposes that the system capabilities are available as web services and consequently web service compliant interfaces can also be used to access this. This property does not exist in principle in the case of legacy systems. Since the German Federal Armed Forces currently have a wide ranging variety of legacy systems from a wide variety of manufacturers in operational use however the introduction of SOA can be expedient only if these legacy systems are also extensively integrated.

Furthermore the infrastructure components have not yet reached the level of maturity which is required for use in a highly mobile operational environment. In this case the focus is particularly on the functionalities for optimizing the algorithms in operational scenarios in the tactical mobile and transferable realm with restricted and unstable network conditions. Fundamental mechanisms for the mobile realm in order to meet important military demands for example mobility or support for a local collaboration process between platforms for coordinated action need to be integrated into the infrastructure components.

In order to achieve the full scope of functions of a service oriented NetOpF aptitude the system capabilities of existing non service oriented systems need to be encapsulated independently of manufacturer such that access is possible externally by other systems using web service compliant interfaces. To use these system capabilities made available as a service in a highly mobile or from a highly mobile segment too the infrastructure also needs to be designed for the special characteristics.

The IEEE publication Service Oriented Sensor Data Interoperability for IEEE 1451 Smart Transducers by Song Eugene Y. published in May 2009 shows a way of integrating conventional sensors or actuators without SOA capability into an SOA environment by using a suitable connecting module. However a prerequisite is that the sensors or actuators are associated with a microcontroller and a network interface a transducer . The publication describes encapsulation of a sensor or actuator in two layers. In a lower layer a transducer forms an IEEE 1451.x interface. In an upper layer an IEEE 1451.x communication module which is capable of communicating with the transducer is integrated into an SOA web service.

The IEEE publication Open Sensor Web Architecture Core Services by Chu Xingchen Kobialka Tom Durnota Bohdan and Buyya Rajkumar from 2006 describes what is known as an NICTA Open Source Web Architecture NOSA which can integrate the conventional sensors or actuators without SOA capability into an SOA environment by using a suitable connecting module. In the case of NOSA however no direct connection to the connecting module is set up. NOSA is based on the Sensor Web Enablement SWE standard which was defined by the Open Geospatial Consortium OGC . SWE is a standard which comprises a requirements profile or specifications for interfaces protocols and encryptions which allow sensor and actuator data and also sensor processing services to be recognized accessed and obtained.

A common feature of both known methods for connecting systems without SOA capability to an SOA environment is that they make quite specific demands on the system that is to be incorporated that is to say they cannot flexibly incorporate any sensors or actuators into the SOA environment.

US 2007 0236346 A1 describes a method for connecting at least one appliance without service capability e.g. sensor effector or actuator to a service oriented network OSGI Open Services Gateway Initiative architecture . In this case for each appliance type the appliance manufacturer individually programs appropriate encapsulation in order to map the appliance in the service oriented environment. This requires the appliance manufacturer to have knowledge about the service oriented environment which it normally does not have and needs to be additionally purchased at great expense.

Furthermore the individual encapsulation of the appliances is very complex in terms of producing and servicing the encapsulation. Furthermore the flexibility of the individual encapsulation is very limited. A change to the service bus used e.g. ESB Enterprise Service Bus of Websphere type or of SOPERA type in the current version 3.3 or a more recent or successive version SOPERA Swordfish immediately necessitates fresh production or at least complex reprogramming of the encapsulation. A similar situation also applies when the encapsulated appliance or the appliance to be encapsulated changes. Finally the known method can result in incompatibilities arising when appliances which originate from different manufacturers and for which the encapsulation has been implemented by the different manufacturers are connected to a service oriented network. The reason is that by way of example an SOA is not a compulsory standard but rather is merely a recommendation. The result of this can be that although encapsulations implemented by different manufacturers are all SOA compliant they are not at all compatible with one another or are compatible only to a restricted degree.

Against the background of the prior art described the present invention is therefore based on the object of providing a way of allowing sensors which are originally without SOA capability to be integrated into an SOA network structure in as simple and inexpensive a manner as possible.

In order to achieve this object the present invention proposes the use of a connecting module for connecting at least one appliance to a service oriented architecture SOA network wherein a functionality of the at least one appliance is mapped as a service in the SOA network. The connecting module has at least one first interface for connecting the at least one appliance and at least one second interface for connecting the SOA network. Furthermore the connecting module has a computation appliance for executing a computer program wherein one portion of the computer program that is to be executed is prescribed and another portion of the computer program is freely programmable by a manufacturer of the at least one appliance in order to implement customization of a piece of firmware which is present on the at least one appliance to the SOA network.

The prescribed portion of the computer program is stored in a suitable memory for example in a ROM an EEPROM or a flash memory preferably by the manufacturer of the connecting module before the latter is even delivered to a customer that is to say preferably during or subsequent to the production at the end of the line. The memory may be integrated in the computation appliance internal memory or arranged outside the computation appliance external memory . Following delivery of the connecting module to the customer i.e. the manufacturer of the sensor the latter can then freely program another portion of the computer program and store it in an internal or external memory on the computation appliance. This may be the same memory in which the firmly prescribed portion of the computer program is already stored but preferably in another memory area or else it is a separate memory.

The connecting module is also called a Tactical Service Bus Interface TSBI . The TSBI operates as a connecting module which converts the firmware associated with the individual sensors into SOA compatible standards. The TSBI provides functionalities as services in compliance with the web service standards. Furthermore the TSBI provides most customary interfaces as hardware interfaces by means of which the TSBI is connected to the at least one sensor on the one hand and to the SOA network on the other. The interface to the SOA network may be in the form of a radio interface for example which is controlled by a digital signal processor DSP for example. This makes it possible to achieve largely delay free data transmission between the TSBI and the SOA network. Preferably the TSBI provides two types of interface an SOA interface to the Enterprise Service Bus ESB and a radio interface which is implemented by a separate Lightweight Service Bus Node LSBN module. The TSBI is therefore able to integrate particularly sensors from the realm of security and defense engineering what is known as legacy equipment into an SOA environment. The invention has the advantage that the development of completely new sensors with SOA capability is not necessary. On the contrary it is possible to use conventional sensors which inherently have no SOA capability these being provided with generic SOA capability as mentioned by means of the TSBI.

The present invention is thus based on the concept of easily and inexpensively conveying SOA capability to one or more sensors of arbitrary design which are inherently without SOA capability by using the largely standardized apart from that portion of the computer program which is to be programmed by the sensor manufacturer connecting module in order thus to be able to integrate the sensors into an SOA network structure. The integration of the sensors by means of the connecting module is significantly less expensive easier and faster than complete redevelopment of the entire sensor with integrated SOA capability. The invention distinctly increases acceptance and hence also the spread of networks with SOA capability in the realm of security military and defense engineering. This is of particular interest to all types of action forces such as police federal border protection fire brigade German Federal Agency of Technical Relief German Federal Armed Forces medical emergency care etc.

One important aspect of the present invention can be seen in that generic encapsulation of arbitrary appliances e.g. sensors actuators or effectors is provided that is to say that it becomes possible to map any appliances which are inherently without SOA capability in an SOA environment. Encapsulation is possible without the manufacturer of the appliance that is to be encapsulated having knowledge concerning the SOA environment and the SOAP Simple Object Access Protocol .

In particular the appliance manufacturer does not need to have information regarding what is known as statefulness of the appliances and statelessness of the services and the allowance therefor when consuming the services. Statefulness means that the appliance or the encapsulation stores information about its own state. Statelessness means that the service i.e. SOA webservice handles a plurality of requests essentially as mutually independent transactions no information is stored between queries. If the appliance to be encapsulated is a rotatable weapon for example it can be rotated into the desired position by means of a first command and fired by means of a second command. If the service corresponding to the second command were now to be dropped immediately after the first service this could in the event of incorrect processing result in the weapon being fired even before the desired position is reached. This situation is remedied by the TSBI connecting module for example by virtue of service requests being able to be stored and subjected to coordinated execution. If required the connecting module can even take account of priorities in SOAP requests and take account of them when executing the commands. To this end a web service interface what is known as a request response module of the connecting module produces threads from the SOAP requests and caters for the correct order of execution in accordance with the priorities.

The appliance manufacturer also does not need to have any knowledge about web services nor to have information or knowledge about the type of a service bus used e.g. an Enterprise Service Bus ESB of Websphere type of SOPBERA 3.3 type or of SOPERA Swordfish type or of another type or a Lightweight Service Bus LSB . The connecting module according to the invention autonomously provides a suitable WSDL Web Service Definition Language file which is loaded into the registry of the service bus upon request by the user depending on the type of service bus used.

One important aspect of the TSBI connecting module is the existence of a heartbeat function. Heartbeats allow knowledge at SOA level of whether an encapsulation is still active and is behaving correctly or is no longer active for example on account of an error. Heartbeat functions are automatically generated for every new encapsulation. These functions are called automatically from time to time. Every successful automatic call to a heartbeat function triggers a new notification publish which can be received at SOA level by subscription subscribe to what is known as the notification provider of the connecting module. The appliance manufacturer has the opportunity to implement the heartbeat function. In this case it ensures that the sensor effector which is encapsulated is also active and available and is behaving correctly. An inactive sensor effector or an inactive encapsulation results in the heartbeat message being absent. A watchdog timer listens for heartbeat messages. In the absence of heartbeat messages the watchdog timer triggers a restart for the responsible encapsulation software.

According to one advantageous development of the invention it is proposed that the connecting module comprise a first module unit which maps the connected sensor effector or actuator as a service in the SOA network and a second module unit which conditions the service mapped by the first module unit for transmission via a radio network with low bandwidth while retaining the SOA functionality. The first module unit is also called a Vendor Device Encapsulator VDE . The second module unit is also called a Lightweight Service Bus Node LSBN .

The VDE is used for encapsulating an arbitrary appliance without SOA capability as a web service which can be recognized and managed in connection with services reference is also made to orchestration of services by the existing service bus. The VDE generates a service which can be accessed by means of a request response module of the VDE e.g. in SOAP and by means of a publish subscribe module of the VDE e.g. in JMS Java Messaging Service format . The VDE hosts the service encapsulation in a self contained realm of the VDE the sandbox which prevents any malfunctions in the service or in the encapsulated appliance from impairing the host system the operating system of the connecting module or the VDE . The sandbox also ensures that the intellectual property of the appliance manufacturer is protected. This means that the user or a person with malicious intent has no opportunity to access the software and the source code which the manufacturer has installed in the TSBI. The VDE provides a large number of different interfaces to ports on appliances to be encapsulated for a service. The services produced by means of the VDE are stored in a service registry of the VDE. Depending on the properties and capabilities of the service bus the service registry provides various maps or manners of presentation representation of the service e.g. in WSDL with the representation of the service not necessarily needing to correspond to the WS I Web Services Interoperability Organization recommendations. This makes it theoretically possible for a generated service to be able to be referenced by any desired service bus.

The LSBN Lightweight Service Bus Node allows or improves the use of the connecting module in the military world. An LSB Lightweight Service Bus is a totally distributed service bus. The term LSB does not denote an appliance but rather denotes an abstraction of a plurality of LSBNs which are networked to one another. The LSB proposes a service bus which is customized to the requirements in the military world. By way of example these requirements include special security mechanisms low transmission rates via radio transmission links.

In contrast to the connecting module which is known from the IEEE publication Service Oriented Sensor Data Interoperability for IEEE 1451 Smart Transducers the TSBI or the VDE does not require the systems that are to be encapsulated to be transducers or to comprise transducers. The invention can provide an SOA interface for any type of system. The TSBI or the VDE does not require a particular type of protocol or technology in order to be able to communicate with the system. The TSBI or the VDE is a framework which allows the generation of a definition which is suitable for all operations provided by the system e.g. turnLeft getPicture etc. . A framework for the relevant program code is generated using a definition for the system that is to be incorporated. The manufacturer of the system that is to be encapsulated fills the framework with appropriate functions in the source code and interacts with the system in a manner which it desires. When the manufacturer has finished this step it compiles the source code into a binary code and imports the latter into the TSBI or into the VDE. The TSBI and the VDE will use the binary code in order to communicate with the encapsulated system and in order to automatically generate a web service interface for an arbitrary type of SOA environment bus client web service interface compliant or otherwise . The TSBI or the VDE allows an SOA interface to be generated for a sensor without the need for specific detailed knowledge about the SOA environment.

In contrast to the connecting module which is known from the IEEE publication Open Sensor Web Architecture Core Services the TSBI sets up a direct connection to the systems that are to be incorporated. The VDE or the TSBI requires no particular standard and no particular protocol in order to be able to interact with the system. The VDE is not an architecture but rather is a framework which allows the generation of an SOA interface for connecting arbitrary systems to the SOA environment regardless of what interface the systems have. That the VDE can also encapsulate heterogeneous systems the VDE is also called a generic encapsulation apparatus generic encapsulator . Unlike in the case of the known NICTA method the encapsulation of a system in the present invention does not require any knowledge about SOA or web services. The TSBI also provides extended functionalities which are not mentioned in the case of the known connecting module. By way of example these are what is known as a heartbeat function in order to ensure that the encapsulation software and the encapsulated appliance sensor or effector is still active and available what is known as traffic shaping in order to protect the network against an usually large volume of data that is sent by the sensor or what is known as sandboxing in order to prevent the TSBI from appearing to work normally and properly despite erroneous behavior by the system for example on account of a defective sensor a defective encapsulation in the VDE and or a defective configuration of the VDE.

The TSBI requires no model language for presenting the data it supports any type of XML presentation and encryption. The TSBI is particularly well prepared for use in a military environment. All components sensors actuators effectors are distributed e.g. each node has a dedicated registry so that a malfunction at a node does not result in a malfunction in the entire sensor network. The TSBI provides two interfaces in order to be able to interact with the encapsulated systems namely a request response interface and also a publish subscribe interface. For notification the TSBI preferably does not use user registrations for subscription but rather uses what are known as topics subjects identifications . In a military context all services are distributed.

Unlike the known NICTA connecting module the TSBI does not mix the sequence management orchestration of the services the service bus and the SOA system encapsulation. The VDE provides a static SOA encapsulation for a system and the military Lightweight Service Bus Node LSBN or another Enterprise Service Bus ESB provides the bus infrastructure and possibly also sequence management capabilities. A service consumer logic unit at the client end looks after the sequence management of the services. The TSBI also aims to be an interface between the system sensor actuator and or effector and a bus in arbitrary form. Since the SOA web service is not developed manually but rather is generated automatically by the framework the reference system it is possible to propose any type of WSDL presentation which is theoretically possible which can be presented in an arbitrary service bus even if said presentation does not meet the specifications of the web service interoperability presentation.

The present invention thus relates to the encapsulation of non service oriented systems in order to be able to access the functionalities or system capabilities via web service compliant interfaces. The TSBI is distinguished particularly

As an alternative to arranging the TSBI in a separate housing it is also possible for the TSBI to be configured as a pure software solution. In this case a piece of software which can be executed on an arbitrary computer e.g. a personal computer PC would be programmed such that it can implement an encapsulation of a system without SOA capability that is connected to the computer and the integration of the system into an SOA environment when it is executed on the computer or on a microprocessor in the computer.

The TSBI infrastructure optimizes the sequences concerning tactical operations for a simultaneously distinctly limited radio or network quality. This is achieved by virtue of particularly advanced data compression methods customizations for the data transmission protocol and a distinct reduction in terms of the data throughput.

The TSBI infrastructure meets extremely high mobility demands and ensures availability even if some sensors are faulty. Therefore there is virtually no possibility of the entire SOA system collapsing as a result of a single faulty sensor a fault in an encapsulation or in the configuration of the connecting module what is known as a single point of failure for example.

The TSBI is a high performance platform which is a fast simple and inexpensive implementation of an SOA infrastructure within already existing or used systems. The known systems without SOA capability can therefore be integrated into future SOA systems quickly and easily.

The use of the connecting module according to the invention provides the user with a distinct cost advantage since the costs for the connecting module and for programming the programmable portion of the computer program which the connection between the firmware of the sensor on the one hand and the firmly prescribed portion of the computer program are distinctly lower than the costs which a completely new sensor with SOA capability would generate. The TSBI is a standard connecting module what is known as an off the shelf SOA platform which extends conventional sensors which inherently have no SOA capability by an SOA capability.

In the computer program which can be freely programmed by the sensor manufacturer for the connecting module the sensor manufacturer has the opportunity to easily and inexpensively integrate algorithms and flows so that the firmware of the sensor is customized to the SOA environment. The SOA environment or the way in which SOA processes are handled may be prescribed by a superordinate organization for example by NATO North Atlantic Treaty Organization the IT office of the German Federal Armed Forces the Federal Ministry of Justice or the Federal Ministry of the Interior. In this case the sensor or the functionality thereof is mapped as a service in the SOA environment.

It is conceivable for a connecting module according to the invention TSBI to be associated not only with one sensor but rather with a multiplicity of sensors. It is likewise conceivable for a sensor to have not only one detector but rather a plurality of detectors. By way of example this allows a sensor to use a camera to capture a physical area that is to be monitored to use a geophone to detect tremors and to use a thermometer to capture a temperature. In such multisensor systems the individual detectors are connected to the first interface of the TSBI via a sensor node. Different sensors can also be connected directly to the connecting module.

By means of the SOA environment the information and data from different detectors and sensors can be interconnected and output to the user on a standard interface. Furthermore it is possible for the user to use the SOA network to obtain access to the sensors coupled to the SOA network via the TSBI in order to actuate said sensors or the detectors thereof. By way of example it is thus conceivable for the user to be able to use the SOA network to control the direction of view of a camera. It is possible for the information and data collected in an SOA environment to be presented to a plurality of users on different interfaces. However the actuation of the sensors via the SOA network can only ever be effected by one of the users.

In the exemplary embodiment described the sensors are in the form of cameras for capturing a physical area geophones for detecting tremors in the form of temperature sensors for capturing temperatures in the form of pressure sensors for capturing a pressure or in the form of any other sensors which provide information about a physical area that is to be monitored an emergency vehicle that is to be monitored or the like for example. The sensors are inherently without SOA capability.

The sensors are connected to connecting modules according to the invention which convey an SOA capability to the sensors . The connecting modules are also called a Tactical Service Bus Interface TSBI . In the exemplary embodiment a respective plurality of sensors are connected to a connecting module . However it is also conceivable for just one sensor to be connected to a connecting module . In the exemplary embodiment the connecting modules are denoted by TSBI and TSBIp where p is a natural number 1. The TSBIs are preferably arranged in proximity to the sensors . If the sensors are arranged on an emergency vehicle for example a TSBI would preferably likewise be arranged on the vehicle. The sensors are connected to the TSBIs preferably via first interfaces .. The first interfaces . are preferably in the form of RS232 and or LAN interfaces.

The connecting modules are for their part connected to a communication infrastructure . This may be in the form of an arbitrary bus structure which is used to transmit data messages on the basis of a particular bus protocol or the like. The bus structure is a CAN or TTCAN bus for example. The communication infrastructure may be implemented in line based or cordless form particularly by means of radio. The infrastructure may be in the form of an arbitrary data transmission link for example in the form of a radio link from the TSBIs to an exchange via which there is access to the Internet to an intranet. In this exemplary embodiment the infrastructure would thus be formed by the data transmission links and the Internet intranet. The communication infrastructure is connected to the TSBIs preferably via second interfaces .. These are preferably in the form of radio interfaces. The access to the Internet intranet allows sensor effector encapsulations located in a repository on a server to be accessed. These encapsulations can be downloaded and installed on the TSBI.

Finally the SOA network structure has users which are connected to the communication infrastructure . The users are denoted by U U . . . Uo where o is a natural number 1. By way of example the users are connected to the Internet via computers with internet capability. The computers preferably provide the users with an output device e.g. a screen a printer etc. for the output of information and an input device e.g. a keyboard a mouse a trackball etc. for the input of information and commands respectively.

The computer program stored in the memory is divided into at least two sections . and . which are stored in various memory areas . and . of the memory . In the exemplary embodiment described a third memory area . does not store a computer program this memory area . is thus free in this exemplary embodiment. It goes without saying that it may also store a section . and or . of the computer program. Furthermore it is also possible for the free memory area . to be dispensed with.

A first section . of the computer program comprises those portions of the computer program which relate to standard sequences. By way of example these may be sequences which relate to the actuation and manner of operation of the interfaces . and .. Furthermore the first section . of the computer program may relate to the specifications stipulated by NATO for example for how the individual SOA processes and services are handled in the SOA network structure . The first section . of the computer program is prescribed by the manufacturer of the TSBI and is programmed during or subsequent to the manufacture of the TSBI at the end of the line. Only then is the TSBI delivered to the customers i.e. to the manufacturers of the sensors .

The sensor manufacturers then develop and program another section . of the computer program and store it in the memory in the memory area . provided for this purpose. The software programmed by the sensor manufacturer sets up a connection between the normally proprietary sensor firmware and the prescribed and largely standardized SOA environment. During the programming the sensor manufacturer can build on that section . of the computer program which has already been developed by the manufacturer of the TSBI . In the programming and implementation phase the sensor manufacturer can be assisted by the manufacturer of the TSBI . In this way the sensors which are inherently without SOA capability can be integrated into the SOA environment easily and quickly. Both sections . and . together form the computer program which is executed on the computation appliance of the TSBI in order to integrate the connected sensors into the SOA network structure .

In one example of application when the Federal Armed Forces are deployed abroad it is a requirement for a particular grid square in the country to be monitored from 10 00 to 16 00 hours. The reconnaissance operation can be coordinated and evaluated by the users locally i.e. from Germany for example. To this end one of the users actuates the sensors in suitable fashion. This can be accomplished using a graphical user interface GUI for example which can be presented on the screens of the computers associated with the users and can be controlled using a keyboard mouse or the like.

At the start of the reconnaissance operation the user ascertains which sensors are actually available in the prescribed grid square. If appropriate a vehicle a drone or the like having at least one TSBI and additional sensors can be ordered into the grid square during the prescribed period. The SOA network structure would then be used to provide the user with information to the effect that additional sensors are available for the reconnaissance operation. The user can actuate the sensors in the required manner using its associated computer. This firstly comprises the activation and deactivation of the sensors . Secondly however it also comprises specific control of the sensors during operation thereof for example in order to be able to alter the capture range of a camera. It would also be conceivable to control the vehicle the drone or the like. Using the example of a sensor in the form of a radar appliance the actuation of the sensor comprises the selection of a sector of a monitored region control of a scan function scanning of the monitored region of a track function tracking of an object in the monitored region or of a tilt swivel head on which the radar sensor is mounted.

The actuation commands from the user for a sensor are first of all taken from the SOA environment by the firmly prescribed portion . of the computer program and converted into appropriate raw data which that portion . of the computer program which has been programmed by the sensor manufacturer then converts into appropriate actuation signals for the sensor . In the converse direction the measured values or measurement signals from the sensor are converted by the freely programmed software portion . into raw data which the firmly prescribed software portion . then introduces into the SOA environment.

Each of the sensors can be actuated only by one user via the SOA network structure . However the captured sensor measured values provided by means of the SOA network structure can be captured by a plurality of users . The users can then immediately start to evaluate the sensor measured values and thus to draw up plans for the further action in this grid square for example attack or defense plans.

The sensors and or the functionality thereof is are presented as services in the SOA environment. This substantially clarifies and simplifies the capture and evaluation of the sensor measured values and also the coordination and control of operations in the realm of security and or defense engineering. The basic concept underlying the present invention sets out from sensors which are inherently without SOA capability and which are intended to be incorporated into the SOA environment as easily quickly and inexpensively as possible. To this end the sensor manufacturers are provided with a programming and development environment which is as open as possible.

If all services in an SOA environment e.g. in the enterprise service bus are registered in a central registry with associated meta data the TSBI needs to undertake the registration for the non service oriented system which is connected to it. The configuration block undertakes this task. Alternatively it is conceivable for the TSBI not to undertake the registration for the connected SOA infrastructure but rather merely to provide a passive interface so that the SOA infrastructure can access meta data and service descriptions WSDL . In this case the TSBI contains a registry which stores all services which are known to it. The TSBI provides an interface in order to be able to retrieve these services. In this case the TSBI does not undertake the registration for the non service oriented system which is connected to it. However the system can retrieve the service lists from the TSBI and enter at least details from the content thereof into its own registry.

The device controller also called encapsulation software which does not have to be implemented for the respective non service oriented system which is to be connected forms the interface between the web service component and the legacy component.

Furthermore a development environment IDE is provided which is not shown in the figure. This is used to instantiate the device controller. This IDE may be part of the TSBI. Preferably the TSBI does not contain a development environment however but rather provides an interface for generating an SOA interface to the outside and a framework for implementing an encapsulation of the sensor. This encapsulation can then be implemented outside the TSBI by using a suitable development environment that is to say can be brought to life on the basis of the type of sensor that is to be encapsulated. The IDE is in a form such that any manufacturer of a system that is to be incorporated is able to produce the device controller from a prescribed framework. In ESB denotes an Enterprise Service Bus an LSB denotes a Lightweight Service Bus. WS denotes the Web Services WSDL denotes a Web Service Definition Language and XSD denotes an XML scheme file.

The TSBI is a physical device which hosts the two module units. The VDE is preferably implemented as a software system which allows an SOA interface to be generated for a sensor . The sandbox denotes a physically and functionally limited environment which contains all the sensor SOA encapsulations vendor device SOA encapsulation and software which the sensor requires in order to interact with the TSBI. Sensor SOA encapsulation denotes the functionality which is used to map the functionality of the sensor in the SOA environment. The sandbox is also used to protect the host system TSBI from possible attacks or software errors and ensures that the intellectual property of the appliance manufacturer in the form of the programmed encapsulations is protected. This means that the user or a person with malicious intent has no opportunity to access the software and the source code which the manufacturer has installed in the TSBI. The Vendor Device Encapsulation Container is used as a container for the sensor encapsulations which have been produced using the VDE. The Vendor Custom Software is a collection of software and data which are required by the sensor encapsulations in order to be able to interact with the sensor s .

Heartbeat denotes heartbeat messages which are sent when prompted by the sensor encapsulations in order to ensure that the sensor encapsulations are behaving correctly. A sensor encapsulation is behaving correctly when the sensor the bus and the SOA web service are behaving correctly. Watchdog timer denotes a module which ensures that all sensor encapsulations which the sandbox contains are kept ticking over. The watchdog timer receives heartbeat messages sent by the encapsulations of the sensor and evaluates them. If a sensor encapsulation does not send a heartbeat message during a defined period a malfunction is assumed and the watchdog timer starts the sensor encapsulation afresh in order to prevent the connecting module or the service encapsulation from being blocked for the longer term. The watchdog timer thus ensures that the service encapsulation is always running and that an error does not affect the entire connecting module and possibly stop it functioning. The concept of the heartbeat service makes it possible to ensure that the processing takes place in a direction from bottom to top sensor actuator effector service message bus web service interface pub sub interface without errors. To obtain heartbeat messages the ESB and or the LSBN need to subscribe to the heartbeat service via the pub sub module . The subscribed service buses ESB and or LSBN then receive the heartbeat messages from time to time via the module .

BUS denotes an internal bus system what is known as a message bus which connects the sensor encapsulations to the SOA web services interfaces request response interfaces and publish subscribe interfaces . The sensor encapsulation generator Vendor Device Encapsulation Generator allows the generation of SOA web services and source text source code projects which once they have been compiled result in sensor encapsulations Vendor Device SOA encapsulations . A configuration module Configuration Module allows the host system and the other modules of the VDE to be configured. Service registry denotes a module which lists all sensor encapsulations which are present on the TSBI . The service registry delivers heterogeneous WSDL files in order to allow platforms to use the sensor encapsulations even when the platforms are not compliant with the WS I Web Services Interoperability Organization recommendations. The WSDL files are individually tuned to the properties and functionality of the service bus e.g. ESB or LSBN . Request response messaging provider denotes an interface which allows the use of the sensor encapsulation web services by means of a request response message exchange pattern. Pub sub messaging provider denotes an interface which allows the use of the sensor encapsulation web services by means of a publish subscribe message exchange pattern.

The modules and thus contain practically all the knowledge about the SOA environment particularly about the SOAP and about the web services which is required for the encapsulation which means that this knowledge no longer needs to be held as previously by the appliance manufacturer which is implementing the encapsulation of the appliance . Said appliance manufacturer can thus encapsulate the appliance without knowledge or understanding about the SOA environment the SOAP and web services. The manufacturer merely needs to know the interface of the appliance that is to be encapsulated and the programming language of the development environment. This results in the possibility of particularly simple and appliance manufacturer friendly encapsulation of appliances and also a flexible encapsulation method which can be used for various appliances .

Lightweight Service Bus LSB denotes a distributed service bus which provides an SOA for tactical networks having limited bandwidth e.g. radio networks and particular security requirements. The LSB comprises one or more LSB units LSB nodes LSBNs . A request response module is an interface to the request response messaging provider of the VDE . It transmits incoming request messages to the VDE and receives response messages which leave the VDE . A publish subscribe module is an interface to the publish subscribe messaging provider of the VDE . It transmits incoming applications to the VDE and intercepts notification messages which leave the VDE .

A service discovery module indexes all the sensor encapsulation web services which are present on the VDE and stores the associated service descriptions e.g. WSDL . The service discovery module allows the service descriptions which are on the LSBN from other TSBIs cf. to be retrieved. Since the TSBI is intended for use in the tactical or military world e.g. limited bandwidth of the radio networks this synchronization with other LSBNs does not take place automatically. The synchronization of the TSBI retrieval of the service descriptions from other nodes LBSN takes place prior to use of the TSBI e.g. as part of mission preparation or during use as an exception and at the explicit request of a person authorized to do so. The ascertained service descriptions are stored in a data memory Service Registry . This service register is of fully distributed design Distributed Service Registry because in contrast to Enterprise Service Buses ESB there is no central service register in this case.

The knowledge of the LSBN about services comprises the totality of all service descriptions which are stored in the service register of each TSBI in the network.

Different modules such as Compression Encryption Traffic Shaping and Access Control are described in more detail below. These modules are each already known from the prior art separately and from other realms outside the SOA environment. To implement the TSBI according to the invention however the inherently known modules are used and interconnected in a particular manner in order to provide added value in the SOA environment in comparison with known SOA encapsulations.

A compression module compresses all messages which leave the LSBN in the direction of the radio network and decompresses all messages which enter the LSBN from outside the TSBI . An encryption module encrypts all messages which leave the LSBN in the direction of the radio network and decrypts all messages which enter the LSBN from outside the TSBI . A traffic shaping module monitors the available bandwidth of the limited network and ensures that malfunctions in the sensor encapsulation web services or defective configurations do not result in an abnormal number of messages which inundate the network. An access control module ensures that the SOA corresponds to a lightweight but secure security model which has been developed for military networks having low bandwidth.

A radio adapter is a module which converts the messages which leave the LSBN unit into data packets which are optimized for particular radios. The radio adapter takes account of special features of the different radios for example network protocols size of the data packets bandwidth physical interfaces and forwards the data packets to the radio. Furthermore the radio adapter intercepts data which arrive from the radio and converts them into messages which can be understood and processed by the LSBN .

Finally the TSBI has a user interface which is called an administration interface. The interface can be used to configure the VDE and the LSBN . This is preferably accomplished using an interactively operatable graphical user interface. The Enterprise Service Bus ESB processes web services which are available on the VDE via the VDE SOA interface .. The ESB registers web services from the VDE by installing WSDL files which are requested from the service registry module of the VDE . A client computer processes web services which are available on the VDE via the VDE SOA interface .. In this case web service proxies can be generated directly from the WSDL files which are requested from the service registry module of the VDE . Radio denotes a radio comprising a transmitter and or receiver. The subordinate radio network is denoted by .

The text below provides a more detailed explanation of the individual steps for generating a sensor SOA encapsulation Vendor Device SOA Encapsulation with reference to . The connecting module from corresponds to that shown in . additionally indicate a few more method steps by means of numbers in circles. The method steps are executed in rising order and essentially at the location at which they are shown.

In a first step not shown in a data transmission link is set up between a development computer and the TSBI preferably by virtue of the TSBI being connected to the computer by means of a cable. In addition a data transmission link is set up between the development computer and the sensor that is to be encapsulated preferably by virtue of the sensor being connected to the computer by means of a cable. The sensor may also be in the form of an arbitrary effector actuator or other unit the functionality of which is intended to be mapped in the SOA environment. The development computer may be in the form of a conventional personal computer PC in the form of a laptop a palmtop computer and possibly even in the form of a smartphone. The development computer is represented in by its user . Preferably the computer is connected to the TSBI via Ethernet. Next in a step likewise not shown the TSBI the development computer and the sensor are switched on that is to say are supplied with power and started up booted if necessary. In a step likewise not shown a connection is then set up from the development computer to the management location of the administration interface .

In a step a name space for a particular service is then generated in the vendor device encapsulation generator via the administration interface . To this end the name of the manufacturer or vendor of the sensor a name for the service and a version number need to be input. In a step the service operations are then likewise defined in the vendor device encapsulation generator likewise via the administration interface . To this end functions and notifications are input. Next in a step the framework of the program code for the project is downloaded in the vendor device encapsulation generator likewise via the administration interface . In a step the user then opens the downloaded project using a software development tool and the service logic and the communication with the sensor are implemented. Finally in a step the user produces and tests a binary file for the project using a builder.

In a step the project is then uploaded into the TSBI via the administration interface . The binary file is stored in the device encapsulation container . In a step what is known as remote logging remote desktop is then used to install the requisite software in the sandbox . To this end the sensor manufacturer logs onto the virtual computer the sandbox from a remote computer the development computer . This allows the manufacturer to load extra software into the sandbox and install it thereon. Finally in a step the sensor is detached from the development computer and connected to the TSBI . This completes the production of sensor encapsulation and the functions of the sensor are mapped in the SOA environment.

The text below provides a more detailed explanation of the individual steps of communication between the client computer from the SOA environment and the sensor via the sensor SOA encapsulation Request Response with reference to . The connecting module from corresponds to that shown in . additionally indicates a few more method steps by means of numbers in circles. The method steps are executed in rising order and essentially at the location at which they are shown. The method steps from are independent of the steps in and have nothing to do with them even though the individual steps have the same numbers in some cases.

In a first step in a request message in SOAP Simple Object Access Protocol format comes to the request response messaging provider of the TSBI from the client computer via the physical interface .. The message is transmitted via the bus in a step and finally enters the vendor device SOA encapsulation container in a step . A function is then called in a step which function ascertains the sensor function corresponding to the service addressed by the SOAP message by means of reflection allows it to retrieve information about classes or the instances thereof in the case of object oriented programming . In a step the sensor SOA encapsulation interacts with the sensor . The output or the response of the sensor is converted into a SOAP message in a step . The response message in SOAP format is transmitted to the request response messaging provider via the bus in a step . Finally in a step the SOAP response message leaves the request response messaging provider and is returned to the client .

When a client computer wishes to log onto the TSBI it sends a logon message to the publish subscribe messaging provider and is recorded there as a subscriber. Every notification comprises a topic subject reference and a body content . The topic is an identification parameter the body is a content description of the message which is sent out during notification. For the publish subscribe message exchange pattern the user consumer client needs to notify the provider TSBI of which notifications it is interested in communication of the topics . When a notification is triggered with the provider it sends it to all users which have subscribed for this topic.

The text below provides a more detailed explanation of the individual steps which are executed when participants in the SOA environment are informed about events in the sensor Publish with reference to . The connecting module from corresponds to that shown in . additionally indicates a few more method steps by means of numbers in circles. The method steps are executed in rising order and essentially at the location at which they are shown. The method steps from are independent of the steps in and have nothing to do with them even though the individual steps have the same numbers in some cases.

In a first step in a particular event occurs in the sensor e.g. a radar detects an object and delivers what is known as a track a motion sensor reports small changes in acceleration or the like . The sensor encapsulation is informed about this in a step and calls the associated notification function. The output of or by the notification function is converted into an SOA message in a step . The message is transmitted to the pub sub messaging provider via the bus in a step . The pub sub messaging provider then transmits the SOA message to all client computers registered with the TSBI as subscribers in the SOA environment in a step .

Without referring to any particular figure the text below explains the different method steps which are required in order to develop a web service client using a computer represented by the user in . In a first step a data link is set up between the computer and the TSBI for example by virtue of the computer being connected to the TSBI by means of a cable. In a subsequent step a suitable WSDL Web Services Description Language is requested from the service registry of the TSBI and is downloaded onto the computer . In a step the source code for the service proxy is then generated from the WSDL. Finally in a step the proxy is imported into the software development tool which is being executed on the computer and the web service client is developed.

Without referring to any particular figure the text below explains the different method steps which are required in order to achieve integration in an enterprise service bus ESB . In a first step a data link is set up between the TSBI and a subscriber on the service bus service bus node for example by virtue of the TSBI being connected to the system which hosts the ESB stub by means of a cable or when the ESB stub is installed on the TSBI . In a subsequent step a suitable WSDL Web Services Description Language is requested from the service registry of the TSBI and is installed in the service registry of the ESB .

Finally with reference to the use of the services in the SOA environment via a network which is used for military purposes and which is limited in terms of bandwidth such as the radio network is explained in more detail Service Consumption Request response over a constrained technical network . In this case the data transmission via the radio network can take place on the basis of an arbitrary protocol or standard. What is crucial is that the bandwidth of the radio network is significantly below the bandwidth of civilian communication networks Gigabit LAN for example in the region of just a few mBytes sec or even in the region of just a few kBytes sec particularly in the region of approximately 4 to 20 kBytes sec and in exceptional cases in a region up to no more than 60 kBytes sec.

In the course of the synchronization of the TSBIs the services respectively managed in the distributed TSBIs are stored in the service discovery modules of all TSBIs so that each LSBN knows both the services managed by the VDE of its own TSBI and all those managed by the VDEs of the other TSBIs in the network. Thus by way of example the service discovery of the TSBI B stores both information about services d to f from the TSBI B and information about services a to c from the other TSBI A in the network.

In a first step a client computer of the TSBI A sends a SOAP request message to the request response messaging provider of the TSBI A. In a subsequent step the TSBI A recognizes that the requested service is not localized on itself but rather on another TSBI B that is to say that the requested service is provided not by TSBI A but rather by TSBI B. The TSBI B is known to the network and particularly to the TSBI A since the TSBI B is listed in the distributed service registry of the LSBN . In a step the SOAP message is compressed unit and encrypted unit and transmitted to the radio adapter which forwards the message to the radio in a step .

In a step the message is transmitted from the radio of the TSBI A via the radio network to the radio of the TSBI B. In a step the message enters the radio adapter of the TSBI B. The message is then decrypted and extracted and transmitted to the request response messaging provider of the TSBI B in a step . The message is then transmitted via the bus in a step and arrives in the encapsulation of the sensor Vendor Device SOA Encapsulation . In a step reflection is used to call the suitable service function. In a step the encapsulation of the sensor interacts with the sensor . The output of or by the service function is then converted into a SOAP response message in a step . In a step the SOAP message is transmitted via the bus and the request response messaging provider of the VDE to the LSBN where the SOAP message is compressed encrypted and transmitted to the radio adapter in a step . In a step the radio adapter forwards the SOAP message to the radio of the TSBI B. The SOAP message is transmitted to the radio of the TSBI A via the radio network in a step . In a step the SOAP message arrives in the radio adapter of the TSBI A. The LSBN of the TSBI A then decompresses and decrypts the received SOAP message in a step and sends it to the request response messaging provider of the VDE . The SOAP response message leaves the request response messaging provider and is returned to the client .

The ports to have cables with suitable connectors connected to them which have at their other end the usual connector elements connectors or jacks for the relevant format for example a customary Ethernet connector for the ports and two conventional USB connectors for the ports an RS232 connector for the RS232 port audio and video jacks for the port and a VGA connector and also a CAN bus connector for the port .

During the encapsulation of a new sensor or for the purpose of managing the TSBI the port or can have a development computer connected to it for generating an encapsulation for the sensor vendor device SOA encapsulation as is described above with reference to . During the encapsulation of a new sensor or during the intended operation of the TSBI a sensor in the form of a camera may be connected to the port so that audio and or video signals can be transmitted from the sensor to the TSBI . The power supply is connected to the port .

In summary it can be stated that the TSBI is what is known as a convergence module which can convert arbitrary firmware of the sensors into an SOA compatible standard. The TSBI comprises both hardware components and software components. The aim of the TSBI is to provide simple and complex functionalities as services on the basis of web service standards. The main requirement for the development of the VDE is the encapsulation of appliances and systems any vendor s device e.g. a sensor which anyone can perform easily generically and safely. This renders the VDE able to integrate legacy systems which do not themselves provide a web service interface into a modern service oriented architecture. This encapsulation can be performed by the manufacturer vendor of the appliance that is to be encapsulated itself. The automatic mechanisms and tools of the VDE assist the manufacturer in this action. The VDE infrastructure adapts the SOA mechanisms to existing programming languages such that the manufacturer does not require any knowledge about web service interfaces WSDL for the encapsulation.

The present invention thus allows encapsulation of arbitrary appliances without know how about web services. The encapsulation of the functions of an appliance e.g. rotating zooming etc. for the services thereof does not require the manufacturer to have knowledge about web service interfaces. The VDE internally generates the WSDL suitable for the bus client and the interface suitable for the appliance . Furthermore the manufacturer is provided with a C template in which it can perform hardware specific customizations. For an encapsulation with the TSBI the sensor manufacturer vendor does not need to disclose its interface which can significantly improve the acceptance of the invention by the manufacturers.

What are known as the reflections with C pointer to operation allow information about classes or the instances thereof for example to be retrieved for object oriented programming. This may be inter alia the visibility of said classes or instances the data type of the return value or the type of the transfer parameters. The implementation of the query options is language specific. In C the associated memory address needs to be found at the correct time at runtime so that the function can be called. Readable C code is converted into pure memory addresses following compellation.

In order to be able to manage the manufacturer information and the services in different versions c.f. step the VDE has a repository which is used to store all service descriptions. Backward compatibility by versioning when new software versions are used needs to be ensured.

Every VDE brings along its own repository. There is no central node as an Achilles heel on which the data are situated and which could fail. The local distributed architecture means that a TSBI network can be shattered only with difficulty. A first TSBI A can access the functionality of a second TSBI B via a radio network cf. .

The appliances which are encapsulated by the VDE need to be triggered in order to perform an action or they need to know their last status. Web services which after they have been performed once are erased or forget their status again are therefore not suitable for direct communication with legacy appliances. Web service calls are usually received simultaneously i.e. in large numbers. An appliance processes calls sequentially however. As a result a fresh call during the execution of a call which has already been accepted would be lost. The VDE solves this problem by buffer storing the service calls received via the request response module at least until they can be executed. The module also ensures that the incoming calls are executed in the correct order. If the incoming service calls have associated priorities the module can likewise take these into account when stipulating the order of execution.

Errors which arise in the VDE are output by the VDE as SOAP errors error message . This applies particularly to the software components which are imported into the VDE by the manufacturers. This ensures that an error is recognized so that it is immediately possible to take appropriate countermeasures. This thus means that errors in the encapsulated appliance can appear as SOAP errors and be recognized. The sandbox isolates the appliances in the VDE completely. This increases security and at the same time availability since the isolated appliances can be attacked only with difficulty. In addition the watchdog timer is used to ensure that the appliances and also the sandbox itself are available. To this end the encapsulation of an appliance sends a heartbeat message to the watchdog at prescribed times preferably regularly. If there is a system crash the sandbox is automatically restarted. Freezing of the system is therefore ruled out. The VDE allows the user to easily connect to different service buses . The VDE cooperates with all standard service buses on the market without difficulty. In this case the TSBI learns what service bus is involved at the push of a button. It is thus a simple matter for the appliances to be coupled to various domains. The adaptive service bus interface ensures interoperability at the highest level.

The services generated by the connecting module and corresponding to one or more functions of the encapsulated appliance can be addressed by any other nodes in the SOA network. So that a node is able to call and consume a service it is not necessary unlike in the prior art for example US 2007 0236346 A1 for software to be transmitted from the connecting module to the calling node stored thereon and executed. The calling of the services and the communication of the nodes in the SOA environment with the connecting module take place only via the web service interface request response and via the pub sub interface subscribe publish . In US 2007 0236346 A1 service firmware is transmitted from one node to other nodes so that said nodes can communicate with one another.

However this does not rule out the connecting module according to the invention involving the possible transmission of an export file generated by the VDE to other connecting modules or other VDEs in order to encapsulate the same appliances thereon. It is thus possible for the encapsulation produced for an appliance to be transmitted to other VDEs so that appliances of the same type as the appliance can be encapsulated thereon with minimum complexity.

In one exemplary embodiment in which the TSBI is connected to an ESB the firmware of the TSBI does not transmit the service to the network automatically. On the contrary the service descriptions need to be installed in the service registry of the ESB . The ESB knows that a particular service is available by virtue of its receiving the heartbeat notifications of the service. The service itself is unlike in US 2007 0236346 A1 for example never transmitted between the nodes but rather is consumed remotely by means of SOAP.

If the TSBI is being used in a military environment it can use the LSBN . Unlike in US 2007 0236346 A1 there is no central platform or unit which observes or supervises the connection of new appliances. The LSB is a completely distributed service bus for military use which synchronizes itself to the other nodes. Neither drivers nor services are transmitted from one TSBI to another TSBI via the LSB. The LSBN merely installs service maps representations for example in the WSDL upon request and services are consumed by means of remote procedure calls SOAP .

The present invention will be explained in more detail with reference to . shows a TSBI an appliance to be encapsulated which is inherently without SOA capability and a client which wishes to access the appliance from the SOA environment. By way of example the appliance is a movable camera or a moveable weapons system. A first function Fct of the appliance corresponds to swiveling and a second function Fct corresponds to tilting of the camera or the weapon for example. In the case of a camera a third function Fct could be a function for confirming the swivel or tilt movement which has taken place for example. In the case of a weapon the third function Fct could be a function for firing the weapon for example.

It goes without saying that the appliance may also have more or fewer functions or functions other than the three functions Fct to Fct shown. These functions can be called by at least one physical interface and can be called using an API Application Programming Interface delivered by the manufacturer a software module delivered by the manufacturer or a protocol defined by the manufacturer. The design and manner of operation of the appliance specific software interfaces are known exclusively to the manufacturer of the appliance . The individual functions Fct to Fct are implemented by program code which is executed on a computation appliance for example a processor of the appliance . The program code is illustrated in by commands c c c . . . that are to be executed and is denoted in its entirety by the reference symbol . The program code is normally proprietary frequently programmed in the programming language C and known only to the manufacturer of the appliance .

During conventional unencapsulated operation of the appliance without SOA capability the appliance is actuated with commands for example from a computer or a joystick via the interface . This involves calls possibly with particular transfer parameters being sent to the interface of the function Fct to Fct that is to be performed. By way of example a call could be Swivel through 45 in which case the first function Fct is called and 45 is a transfer parameter for the function Fct. Depending on the function to be performed it returns a result or else not. By way of example the function Fct can return a result to report successful swiveling of the appliance . Alternatively it would also be conceivable for a separate function for example the function Fct to be provided in order to report successful swiveling and or tilting of the appliance . The function Fct is called after the function Fct for example without a transfer parameter. As a return parameter the function Fct can return a Boolean value 1 or 0 in order to signal that swiveling or tilting of the appliance has been successful or has taken place.

The TSBI comprises a frame structure which is generated automatically using specifications from the manufacturer of the appliance . By way of example the manufacturer specifies which function s from the functions Fct to Fct of the appliance it wishes to encapsulate and whether and if so which parameters input variables output variables are expected or returned by the functions that are to be encapsulated. If in the example in the first function Fct is intended to be encapsulated the manufacturer of the appliance prescribes the swivel function as an end parameter an angle size e.g. of integer type for movement of the appliance and as an output parameter a yes no statement e.g. of Boolean type as information about whether the swiveling was successful i.e. whether the desired end point has been reached. The manufacturer can prescribe corresponding parameters for the Tilt function Fct. For the function Fct in the case of a camera the manufacturer can prescribe Check movement as the function to be encapsulated no input parameters and as output parameter a yes no statement e.g. of Boolean type for whether the swiveling tilting was successful for example.

The functions and parameters prescribed by the manufacturer of the appliance are used to automatically generate the frame structure of the TSBI . The administration interface cf. of the TSBI is used for defining the framework or the frame structure . The frame structure is then generated by the vendor device encapsulation generator in the VDU . The frame structure also comprises inputs and outputs defined by the manufacturer for the input and output parameters of the encapsulated functions Fct to Fct. The inputs and outputs may be implemented by what is known as an Admin GUI Graphical User Interface for example.

In order to implement the encapsulation of one of the functions Fct to Fct of the appliance the program code of the relevant function needs to be stored in or incorporated into the frame structure at a prescribed location of the frame structure . By way of example the frame structure stores the program code c . . . of the second function Fct of the appliance for the function Fct. The program code stored in the frame structure corresponds to the vendor custom software block in the sandbox of the TSBI from . This protects the know how of the manufacturer in the form of the program code of the appliance against unauthorized access by third parties.

Instead of the actual program code the manufacturer of the appliance can also simply store or program references to the program code in the appliance in the frame structure at the prescribed location of the frame structure . By way of example the reference comprises a call and a program code for acceptance of a result . Such a call is shown as an example for the encapsulation of the first function Fct in the frame structure in . Similarly the program code is programmed for acceptance of a result for the first function Fct. The call to the program code of the first function Fct of the appliance is illustrated by an arrow shown with a solid line from the TSBI to the interface of the first function Fct of the appliance . Similarly the return of the result from the function Fct is illustrated by an arrow shown with a solid line from the interface of the first function Fct of the appliance to the TSBI .

If the function Fct of the appliance is such that it does not return a result the program code can also be dispensed with instead of the function Fct in the frame structure . Instead for example after the call to the first function Fct of the appliance another function of the appliance for example the function Fct could be called in order to check whether the swivel movement by the appliance performed as a result of execution of the program code of the first function Fct has been successfully concluded. As the result the function Fct returns a piece of information concerning whether the desired aim of the swivel movement has been achieved e.g. a Boolean value . The call to the third function Fct is illustrated in by an arrow shown with a dashed line from the TSBI to the API of the third function Fct of the appliance . Similarly the return of the result of the function Fct is illustrated by an arrow shown with a dashed line from the interface of the third function Fct of the appliance to the TSBI .

Finally it would also be conceivable for the TSBI to map not only functions Fct to Fct of the appliance but also other functions for example executed merely on a separate computer particularly a PC arranged outside the appliance in an SOA environment by means of the TSBI . In this case it is conceivable either for program code from the computer to be copied directly to the frame structure or programmed therein vendor custom software or merely for references to the program code of the computer to be stored in the frame structure . It is conceivable for the computer to be connected to the appliance by means of a data transmission link not shown so that execution of the program code on the computer can trigger an appropriate action or function of the appliance or process return values from the appliance . In this way it is also possible to encapsulate not only individual functions of the appliance or of external computers but also complex systems for implementing a plurality of functions.

When the functions Fct to Fct of the appliance have been encapsulated a client from the SOA environment can use SOA calls e.g. Request to access the encapsulated functions Fct to Fct or receive and process acknowledgements from the functions e.g. Response in the SOA environment. By way of example shows a request from the client to the encapsulated first function Fct. The request may comprise one or more transfer parameters for example an angle statement for the swivel movement in the case of the Swivel function. Similarly a response from the encapsulated first function Fct to the client is shown. The response may also comprise one or more return parameters for example a piece of information concerning whether the swivel movement was successful in the case of the Swivel function. If no parameters are transferred the relevant field of the SOA call is simply left blank.

The TSBI translates the SOA call into a format which is comprehensible to the appliance or compatible with the program code stored therein. This is accomplished by the algorithms prescribed by the manufacturer of the TSBI . The manufacturer of the appliance which carries out the appliance specific programming of the TSBI does not need to have any kind of knowledge about web services and the SOA world. Furthermore the execution of a plurality of SOA calls in the TSBI or in the appliance is coordinated by the TSBI . In particular any priorities associated with the SOA calls for the calls can be translated into the proprietary appliance specific environment and taken into account therein. Taking priorities into account is important because otherwise using the example of an appliance in the form of a camera the third function Fct delivers an incorrect result for the success of the swivel or tilt movement if the first or second function Fct or Fct is not executed completely first of all. Using the example of an appliance in the form of a weapon the third function would result in the weapon being triggered even though the final position of the swivel or tilt movement has not yet been reached.

