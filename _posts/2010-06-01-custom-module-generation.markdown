---

title: Custom module generation
abstract: Some embodiments of the present invention create a layout for a circuit design which includes one or more circuit modules. The system can receive a nominal implementation of a circuit module, and a user-defined module generator capable of generating one or more custom implementations of the circuit module from an existing implementation of the circuit module. Next, the system can create the layout for the circuit design by executing the user-defined module generator on at least one processor to generate one or more custom implementations of the circuit module from the nominal implementation. The system can then use the one or more custom implementations of the circuit module in the layout.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09195791&OS=09195791&RS=09195791
owner: SYNOPSYS, INC.
number: 09195791
owner_city: Mountain View
owner_country: US
publication_date: 20100601
---
This disclosure relates to electronic design automation EDA . More specifically this disclosure relates to methods and apparatuses for custom module generation.

Integrated circuit design involves using EDA tools to create and manipulate circuit designs. A designer may use an EDA tool to create a schematic of an integrated circuit. The schematic may then be used by other EDA tools to simulate the operation of the integrated circuit create a layout of the integrated circuit etc. Specifically a designer can use an EDA tool to perform placement and routing to create a layout for the integrated circuit.

Designers typically create design rules that a layout for a circuit design needs to satisfy to ensure that the circuit design manufactures and operates as desired. The design rules for analog RF Radio Frequency and custom circuit designs are complex and can vary from one module to the next. Therefore a designer often has to manually edit the layout to ensure that the layout complies with the design rules and achieves the designer s design intent. Unfortunately manual editing of the layout is tedious and error prone.

One embodiment of the present invention provides a system for creating a layout for a circuit design which includes one or more circuit modules. The system can receive a nominal implementation of a circuit module and receive a user defined module generator capable of generating one or more custom implementations of the circuit module from an existing implementation of the circuit module. Then the system creates the layout for the circuit design by executing the user defined module generator to generate one or more custom implementations of the circuit module from the nominal implementation. The system can then use the one or more custom implementations of the circuit module in the layout.

Specifically the system can generate a custom implementation by modifying the nominal implementation so that the custom implementation satisfies a set of constraints e.g. a set of design rules. Note that the system can generate multiple custom implementations each with different properties. For example the system can generate multiple custom implementations that have different areas and or leakage powers.

During placement and routing the system can select a custom implementation of the circuit module from the one or more custom implementations. The system can then instantiate the custom implementation of the circuit module in the layout. Specifically in some embodiments the global placement and routing engine determines where the circuit module is to be placed in the overall layout and the user defined module generator performs placement and routing within the circuit module.

The user defined module generator can also provide interactive features which enable a user to fine tune the design manually. For example the user defined module generator can present an options window to a user via a graphical user interface GUI . Next the system can receive module generator options from the user via the options window. The system can then provide the module generator options to the user defined module generator. Next the user defined module generator can modify the existing custom implementation in the layout in accordance with the module generator options that were provided by the user. The system can then display the modified custom implementation to the user via the GUI.

The following description is presented to enable any person skilled in the art to make and use the invention and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present invention. Thus the present invention is not limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

A design flow that uses EDA software is described below. Note that the design flow description is for illustration purposes only and is not intended to limit the present invention. For example an actual integrated circuit design may require a designer to perform the design flow steps in a different sequence than the sequence described below.

In the system design step the designers can describe the functionality to implement. They can also perform what if planning to refine the functionality and to check costs. Further hardware software architecture partitioning can occur at this step. In the logic design and functional verification step a Hardware Description Language HDL design can be created and checked for functional accuracy.

In the synthesis and design step the HDL code can be translated to a netlist which can be optimized for the target technology. Further in this step tests can be designed and implemented to check the finished chips. In the netlist verification step the netlist can be checked for compliance with timing constraints and for correspondence with the HDL code.

In the design planning step an overall floor plan for the chip can be constructed and analyzed for timing and top level routing. Next in the physical implementation step placement and routing can be performed.

In the analysis and extraction step the circuit functionality can be verified at a transistor level. In the physical verification step the design can be checked to ensure correctness for manufacturing electrical issues lithographic issues and circuitry.

In the resolution enhancement step geometric manipulations can be performed on the layout to improve manufacturability of the design. Finally in the mask data preparation step the design can be taped out for production of masks to produce finished chips.

During placement and routing the system can receive a schematic which specifies the logical connectivity between the different modules. Next the system can place modules and route wires to electrically couple the modules in accordance with the schematic. For example circuit layout includes a set of modules e.g. modules which have been electrically connected using wires as shown in . Specifically net electrically connects pins in modules and net electrically connects pins in modules .

Placement and routing can be performed using a bottom up approach. In this approach the system can first determine the layouts within circuit modules. Next the system can place and route the circuit module layouts in the chip in accordance with the schematic.

The layout of the entire circuit design can be determined using a hierarchical approach. Specifically once the layout within the circuit modules e.g. logic gates has been determined the system can create larger circuit blocks e.g. an 8 bit adder based on the circuit module layouts. The system can then use these larger circuit blocks to create even larger circuit blocks e.g. a processor until the entire circuit design layout has been determined.

As mentioned above designers typically create a set of constraints e.g. a set of design rules that need to be satisfied by a layout. In pure digital designs the process of detecting and correcting design rule violations has been largely automated. However design rules for analog RF Radio Frequency and custom circuit designs are complex and can vary from one circuit module to the next. Therefore in these designs a designer often has to manually edit the layout to ensure that the layout complies with the design rules and achieves the designer s design intent. Unfortunately manual editing of the layout is tedious and error prone.

Some embodiments of the present invention enable a user to provide a custom module generator which can manipulate an existing circuit module layout so that the modified circuit module layout satisfies a set of constraints e.g. a set of design rules. Specifically custom module generators can be used during a schematic driven layout SDL process to generate custom modules for a chip design. During operation a custom module generator can receive design constraints from a schematic design along with schematic design information that is critical for generating a custom module implementation. Then when used by a high level place and route system that generates a layout for a chip design the custom module generator can generate the custom layout for a module of the chip based in part on the design constraints and the schematic design information.

Some embodiments of the present invention provide a circuit layout system which enables a user to design a custom module generator that generates custom layouts for analog and or mixed signal modules of a chip design and enables the user to configure the custom module generator at runtime. A module generator can be derived from a logic representation of a functional module e.g. a NAND XOR differential pair or current mirror and can implement e.g. via circuit synthesis and or placement and routing the module in the target layout design so that it satisfies a set of constraints indicated by the schematic design and or directly from the user.

The circuit layout system can include a GUI which facilitates modifying the layout of a circuit design at runtime. The GUI enables the user to indicate module generator options for optimizing a custom module during a placement and routing process. The system can also provide a runtime rendering mechanism for presenting a generated circuit layout to a user thereby enabling the user to determine whether the layout is satisfactory.

If the user deems that the layout is not satisfactory the user can use the GUI system to indicate or modify options for the custom generator that guide the custom generator toward generating a satisfactory layout for the custom module. For example a user can provide additional design constraints that specify the user s design intent such as by requiring that a pair of transistors in a module have matching dimensions. In response to the modified set of constraints the module generator can produce a new custom module e.g. by resizing transistors in the custom module as necessary to satisfy the constraints . Then once the GUI system presents the user with a layout that the user deems is satisfactory the user can commit the layout to the target layout design.

The process can be performed by a computer system which stores instructions and executes these instructions using a processor. The system can begin by receiving a schematic and a set of constraints for a circuit design operation and receiving a set of user defined module generators capable of generating layouts for one or more modules of the circuit design operation . Next the system can create a layout for the circuit design using the schematic the set of constraints and the set of user defined module generators operation .

The system can begin by identifying an instance of the circuit module in the circuit design operation . Next the system can select a custom implementation of the circuit module from the one or more custom implementations operation . Specifically the system may select the custom implementation based on a variety of factors including but not limited to timing area power etc. Then the system can instantiate the custom implementation of the circuit module in the layout operation . Note that the process illustrated in may be performed during place and route.

The system can begin by receiving module generator options from a user via a graphical user interface GUI operation . Next the system can provide the module generator options to the user defined module generator operation . Then the user defined module generator can modify the custom implementation in accordance with the module generator options operation . The system can then display the modified custom implementation to the user via the GUI operation . The user can decide whether the module generator options need to be modified operation . If the user wants to use different options the system can return to operation to receive the new module generator options from the user. Otherwise if the user does not desire to modify the module generator options the system can commit the custom implementation in the circuit layout operation .

The system can create and manipulate a design using OpenAccess which defines a standardized data model and interface for representing and accessing the design. Specifically in some embodiments the system can include the following components an OpenAccess OA design a tool command language Tcl access application programming interface API a GUI and a runtime rendering mechanism.

Internally the system can store the design using a proprietary representation and provide a mechanism for converting the design from the internal representation to the OA design and vice versa. Since the system maintains the design in OA it enables third parties to provide user defined module generators that can operate on the OA design. For example a custom module generator can include an entry Tcl procedure that accepts an OA design representation and an Options object as input. Then the module generator can perform placement and routing to generate a circuit layout for the circuit module based on the options specified in the Options object. The module generator can also interact with the circuit layout system via a rich set of Tcl access APIs to access additional design constraints and design information for a circuit design. Once the module generator completes modifying the OA design representation the module generator can then pass the modified OA design representation back to the circuit layout system for further processing.

Circuit designers typically describe their design intent using design constraints. In some embodiments of the present invention the system provides two options for the user to access design constraints. The first option is to annotate the temporary OA design with design constraints by using standard OA constraint objects. However it may be difficult if not impossible to annotate some design constraints using this approach. Hence some embodiments provide a second option which involves using APIs e.g. Tcl APIs to access design constraints.

A custom module generator can use a plurality of user controls and options to generate a circuit layout that satisfies technology constraints as well as the user s design intent. In some embodiments the circuit layout system provides an intuitive and convenient GUI that enables a user to set or modify these controls and options at runtime.

Layout editor GUI can include a menu a runtime rendered view and a control option editor . During operation a user can use a mouse cursor to select a circuit module of a circuit design that the user desires to customize. In response to the user selecting module GUI may present the user with a module generator view which provides the user with a set of module generators that the user can select for generating a custom layout for module .

Next the user can select a module generator e.g. module generator from module generator view . In response to the user selecting module generator control option editor can provide the user with mechanisms for setting controls options for module generator . Alternatively the system may use the default controls options to generate the layout for the module and allow the user to change the default controls options via control option editor .

A user can provide instructions for creating a GUI object e.g. a Tcl procedure with a module generator. When the module generator is executed the system can use the GUI object to present controls options to the user.

Runtime rendered view can generate a circuit layout visualization as the user alters controls and options in control option editor so that the runtime rendered view illustrates the effects that the user s modifications have on the module s layout. Thus runtime rendered view can provide a near immediate feedback to the user to help the user adjust the controls options for module generator via control editor until the user is satisfied with the layout.

The circuit layout system can also include a generator managing mechanism which among other things registers and executes module generators. For example the generator manager may support the following Tcl API function to enable a user to register a module generator 

The function sdl registerGenerator takes one required argument and two optional arguments. The required argument shown as generatorTclProcName is the name of the module generator. This is the name that will be presented in module generator view . The first optional argument shown as optionSet can be used to provide a set of options to the module generator. The second optional argument shown as gui can be used to provide a Tcl procedure which when executed during runtime presents a control option window to the user.

The generator manager can also provide other functionality that is required for supporting third party module generators. For example the generator manager can be responsible for creating a temporary OA design from the internal representation executing the appropriate module generator on the temporary OA design converting the modified module generator back to the internal representation and freeing up any resources used by the temporary OA design once the module generation task is completed.

Computer system includes a processor a memory and a storage device . Furthermore computer system can be coupled to a display device a keyboard and a pointing device . Storage device can store operating system applications and data .

Applications can include instructions which when executed by computer system can cause computer system to perform methods and or processes described in this disclosure. Data can include any data that is required as input or that is generated as output by the methods and or processes described in this disclosure. Specifically data can store among other things the circuit design the module generators and the set of design constraints.

Apparatus can comprise a plurality of mechanisms which may communicate with one another via a wired or wireless communication channel. Apparatus may be realized using one or more integrated circuits and apparatus may include fewer or more mechanisms than those shown in . Further apparatus may be integrated in a computer system or it may be realized as a separate device which is capable of communicating with other computer systems and or devices. Specifically apparatus can comprise a receiving mechanism an option receiving mechanism a creating mechanism a providing mechanism and a display mechanism .

In some embodiments receiving mechanism may be configured to receive a nominal implementation of the circuit module and a user defined module generator capable of generating one or more custom implementations of the circuit module from an existing implementation of the circuit module. Moreover option receiving mechanism may be configured to receive module generator options from a user.

Creating mechanism may be configured to create the layout for the circuit design which involves using the user defined module generator to generate one or more custom implementations of the circuit module from the nominal implementation and using the one or more custom implementations of the circuit module in the layout. Providing mechanism may be configured to provide the module generator options to the user defined module generator so that the user defined module generator modifies a custom implementation in accordance with the module generator options. Display mechanism may be configured to display the modified custom implementation to the user.

The above description is presented to enable any person skilled in the art to make and use the embodiments. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein are applicable to other embodiments and applications without departing from the spirit and scope of the present disclosure. Thus the present invention is not limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

The data structures and code described in this disclosure can be partially or fully stored on a non transitory computer readable storage medium and or a hardware module and or hardware apparatus. A non transitory computer readable storage medium includes but is not limited to volatile memory non volatile memory magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs DVDs digital versatile discs or digital video discs or other media now known or later developed that are capable of storing code and or data. Hardware modules or apparatuses described in this disclosure include but are not limited to application specific integrated circuits ASICs field programmable gate arrays FPGAs dedicated or shared processors and or other hardware modules or apparatuses now known or later developed.

The methods and processes described in this disclosure can be partially or fully embodied as code and or data stored in a non transitory computer readable storage medium or device so that when a computer system reads and executes the code and or data the computer system performs the associated methods and processes. The methods and processes can also be partially or fully embodied in hardware modules or apparatuses so that when the hardware modules or apparatuses are activated they perform the associated methods and processes. Note that the methods and processes can be embodied using a combination of code data and hardware modules or apparatuses.

The foregoing descriptions of embodiments of the present invention have been presented only for purposes of illustration and description. They are not intended to be exhaustive or to limit the present invention to the forms disclosed. Accordingly many modifications and variations will be apparent to practitioners skilled in the art. Additionally the above disclosure is not intended to limit the present invention. The scope of the present invention is defined by the appended claims.

