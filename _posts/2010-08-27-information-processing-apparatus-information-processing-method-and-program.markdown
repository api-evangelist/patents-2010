---

title: Information processing apparatus, information processing method, and program
abstract: An apparatus includes a management unit configured to manage a device that provides a plurality of functions, and a utilization unit configured to utilize one function among the plurality of functions. In the apparatus, the management unit confirms whether a function different from the one function, among the plurality of functions, is available according to management and control data that includes information for constructing a management screen, which management screen being a screen configured to manage the device, and a setting unit sets an argument to an object indicating a link to the utilization unit according to a result of the confirmation. In the apparatus, the utilization unit is configured, if the object, which is displayed on the management screen, is designated, to set the device according to the argument.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09270845&OS=09270845&RS=09270845
owner: CANON KABUSHIKI KAISHA
number: 09270845
owner_city: Tokyo
owner_country: JP
publication_date: 20100827
---
The present invention relates to an information processing apparatus an information processing method and a program.

In recent years a system including an information processing apparatus and a peripheral apparatus connected thereto via an interface such as universal serial bus USB Ethernet or wireless local area network LAN in which the peripheral apparatus is controlled by the system has been widely and effectively used in environments such as home or offices. More specifically a printer a copying machine a facsimile apparatus a scanner or a digital camera and an apparatus having a combination of functions of the above described apparatuses and machines are used as a peripheral apparatus.

To Windows 7 of Microsoft Corporation anew function for managing a peripheral apparatus connected to an information processing apparatus such as a personal computer PC has been introduced. More specifically Device Stage function which includes a Devices and Printers folder which is a window for displaying an apparatus connected to the PC and a function for linking to an application or a service uniquely provided to each peripheral apparatus has been introduced to Windows 7.

A screen of the Devices and Printers folder which is illustrated in can be displayed by an operation from the start menu of Windows 7 . Furthermore a Device Stage screen which displays information about the status of each peripheral apparatus can be displayed by an operation via the Devices and Printers folder. The Device Stage screen can provide a visually useful screen. Via the Device Stage screen a user is allowed to readily utilize and access a function and a service related to the apparatus. If a scanner is used as a peripheral apparatus a link to an application capable of reading an image and an image of a document can be provided on the Device Stage screen. In this case by launching and utilizing the application capable of reading an image and an image of a document an image or a document image can be read by using the peripheral apparatus scanner .

Meanwhile with the widespread use of the Internet various types of online services have been provided which include an information processing apparatus and a peripheral apparatus connected to the Internet and execute data communication via the Internet. More specifically a conventional online service utilizes the Device Stage screen including a link to a customer support page of a web site of a manufacturer who provides the online service which is provided on the Internet. By utilizing the online service like this a user can easily access a web site provided related to the apparatus. In the following description the Device Stage screen may also be referred to as a device management screen .

A conventional system includes a multifunction printer peripheral MFP which has a plurality of functions such as a printer function a facsimile transmission function a scanner function and a storage function. Conventionally if a user desires to read an image or a document image by utilizing the scanner function of an MFP from an application the user generally executes the following operations. More specifically the user 

 1 2 selects a scanner driver which is an input device via a scanner selection portion provided to the application and

Suppose that a plurality of input devices such as an MFP or a scanner is connected to one PC and that drivers for the input devices have already been installed on the PC. In this case after image reading processing is executed at least once an input device that has been selected last is often selected as a default device to be used when the application is launched the next time. Japanese Patent Application Laid Open No. 85132 discusses the above described conventional method.

When an image of a document set on an MFP is read by using an application linked on the Device Stage screen processing executed therefor is different from that in a conventional method. To paraphrase this because the Device Stage screen is displayed via the Devices and Printers folder the following operations are to be executed. More specifically the user 

Suppose that a plurality of input devices such as an MFP or a scanner is connected to one PC and that drivers for the input devices have already been installed on the PC. In addition suppose that image reading processing has been executed at least once from the application by using a specific scanner. In this state the scanner is selected as a default device to be used when the application is launched the next time.

In this state by using an MFP different from the scanner and by executing the operations 2 1 through 2 5 suppose that processing is further executed for reading an image of a document set on the MFP. If the image reading processing is executed from the application in the operation 2 5 then the application executes document image reading processing by using the scanner that has been set as the default device in the application instead of using the MFP. As a result the image or the document image desired by the user cannot be read and the image reading processing may fail.

Suppose that an MFP is connected to one PC via a plurality of interfaces such as USB or an Ethernet network. In this case the driver of the MFP may vary i.e. the name of the driver of the MFP may vary according to the interface used for the connection. More specifically if a TWAIN driver connected via USB is used as illustrated in a driver name ABC Kmmn TWAIN is displayed in a scanner selection field of the application. On the other hand if a TWAIN driver connected via a network by using an independent hardware vendor IHV native protocol is used a driver name ABC Kmmn TWAIN Network is displayed in a scanner selection field of the application.

Furthermore suppose that an MFP is connected to one PC via two interfaces i.e. via USB and an Ethernet network. In this case the user selects a USB connected TWAIN driver ABC Kmmn TWAIN via a scanner selection field of the application by executing the operation 1 2 of the operation of a conventional method. Then the user performs the operation 2 3 to executing reading by the MFP from the application via USB connection. When the reading is completed in the application the USB connected TWAIN driver ABC Kmmn TWAIN is selected as a default device used when the application is launched the next time.

Moreover suppose in this state that a USB cable used for the USB connection is taken off from the MFP to cause the MFP to be connected to the PC via the Ethernet network only. Suppose further that an application linked with the Device Stage screen is launched in this state and that the user executes reading by the MFP via the Ethernet network by using a TWAIN driver ABC Kmmn TWAIN Network which is connected via a network by using an IHV native protocol. In this case if the reading is executed from the application by executing the operation 2 5 the application executes the following operations.

More specifically the application uses the TWAIN driver ABC Kmmn TWAIN which is connected via USB and set as the default device within the application to execute image reading document image reading processing. In other words the application does not use the TWAIN driver ABC Kmmn TWAIN Network connected via the network by using the IHV native protocol in this case.

More specifically the application performs not use the TWAIN driver ABC Kmmn TWAIN Network of the network the connection of the IHV native protocol.

As a result an image document image desired by the user to be read cannot be read because the MFP is connected to the PC not via USB. Accordingly in this case the image document image reading processing may fail.

According to an aspect of the present invention an apparatus includes a management unit configured to manage a device that provides a plurality of functions and a utilization unit configured to utilize one function among the plurality of functions. In the apparatus the management unit is configured to confirm whether a function different from the one function among the plurality of functions is available according to management and control data that includes information for constructing a management screen which manages the device and configured to set an argument to an object indicating a link to the utilization unit according to a result of the confirmation. In addition in the apparatus the utilization unit is configured if the object which is displayed on the management screen is designated to set the device according to the argument.

Further features and aspects of the present invention will become apparent from the following detailed description of exemplary embodiments with reference to the attached drawings.

Various exemplary embodiments features and aspects of the invention will be described in detail below with reference to the drawings.

The Windows 7 operating system OS mentioned here is well known and will not be described in detail here.

In addition in the following description a term USB refers to a universal serial bus. USB is well known and will not be described in detail here.

Furthermore a term WSD is an abbreviation of web service on devices . WSD is well known and will not be described in detail here.

In addition in the following description a term WIA is an abbreviation of Windows Image Acquisition . WIA is an application program interface API which is a standard interface for inputting an image on a Windows OS from an image scanner. Accordingly WIA will not be described in detail here.

Moreover a term TWAIN refers to an interface between a PC a scanner and a digital camera which are managed as a TWAIN Working Group apparatus. TWAIN is well known and will not be described in detail here.

A first exemplary embodiment of the present invention will now be described below. illustrates an exemplary system configuration of a peripheral apparatus control system including an information processing apparatus and a peripheral apparatus.

Referring to information processing apparatuses and are general purpose PCs. The PCs and includes hardware illustrated in . In the present invention it is supposed that an OS equivalent to Windows 7 has been installed on the PCs and .

In the example illustrated in the PC is connected to a network while the PC is connected to a network . Each of the networks and is an Ethernet network. A multifunction printer hereinafter may also be simply referred to as an MFP includes a color inkjet printer a color facsimile apparatus a color scanner and an external storage device for flash memory. The MFP is an example of a peripheral apparatus according to the present exemplary embodiment. The MFP is an MFP manufactured by ABC Corporation having a model name Kmmn . It is useful if a printer a copying machine a facsimile apparatus a scanner and a digital camera and an apparatus having a combination of functions of the above described apparatuses i.e. a multifunction apparatus are used as the peripheral apparatus of the present invention.

The MFP includes hardware that will be described in detail below with reference to . The MFP is connected with the PC via a USB interface and the network . Thus the MFP and the PC are in interactive communication with each other.

An application includes a file having a .exe format i.e. a file having an extension .exe of Windows. The application is an example of an application of the present invention. The application includes a function for displaying a device management screen illustrated in .

In addition the PC includes an application compliant with the TWAIN interface. The TWAIN application will be described in detail below with reference to . Furthermore the PC includes a TWAIN driver which will be described in detail below with reference to . The network is a home network for home consumer use which is constructed in a house of a user customer of the MFP . The MFP is an MFP commonly used among the family of the user which is connected to the PC via the network within the user s house.

The network is an office network constructed within ABC Corporation. The PC which is connected to the network includes a web server . The web server includes a function of a general web server. The web server provides a web site of ABC Corporation via the Internet.

A compact disc read only memory CD ROM can be mounted on the PC . The CD ROM stores software a program and an electronic file. The web server includes a file storage portion while the CD ROM includes a file storage portion . A device management and control file which will be described in detail below with reference to is stored in the file storage portions and of the web server and the CD ROM . The device management and control file is loaded and transmitted from the file storage portions and . The device management and control file is an example of device management and control data.

An analog telephone line is used by the PC for transmitting and receiving a facsimile document via MFP . A flash memory can be mounted into a flash memory insertion slot not illustrated of the MFP . The flash memory can be referred to from the PC as a storage device. An MFP is an MFP different from the MFP . The MFP is manufactured by XYZ Corporation having a model name Defg .

Referring to the PC includes a random access memory RAM unit hereinafter simply referred to as a RAM a hard disk drive HDD a keyboard KBD and a central processing unit CPU . In addition the PC includes a display a liquid crystal display LCD and a network board NB . Furthermore the PC includes a bus . The RAM the HDD the KBD the CPU the LCD and the NB are in communication with one another via the bus .

The HDD is an example of a storage unit. The KBD is an example of an input unit. The CPU is an example of a control unit. The LCD is an example of a display unit. The NB is an example of a communication control unit. A USB port of the USB interface use is included in the NB . It is also useful if a portable CD ROM or a built in read only memory ROM is used as the storage unit.

An application such as the device management application or the TWAIN application and each module software illustrated in and are stored on the HDD and are loaded and executed by the CPU on the RAM where necessary. Thus the CPU implements a function of the application such as the device management application or the TWAIN application and each module software illustrated in and . The TWAIN application is an example of a utilization unit. The MFP has the hardware configuration illustrated in .

In the example illustrated in a CPU includes a microprocessor. The CPU which functions as a central processing unit of the MFP controls a RAM a communication unit a recording unit an operation unit a display unit a reading unit a facsimile control unit and an external storage control unit according to a program stored on a ROM .

The ROM stores a program used by the MFP for executing recording printing and a program used by the MFP for executing processing for notifying information about the status of print processing to the PC under control of a printer driver . In addition the ROM stores a program used by the MFP for transmitting and receiving a facsimile document under control of a FAX driver not illustrated . Furthermore the ROM stores a program used by the MFP for notifying the status of transmission or reception of facsimile documents to the PC under control of the FAX driver not illustrated . Moreover the ROM stores a program used by the MFP for executing image reading processing under control of a WIA driver or the TWAIN driver . In addition the ROM stores a program used by the MFP for notifying the status of image reading operations to the PC under control of the WIA driver and the TWAIN driver .

The RAM temporarily and primarily stores print data which is transmitted from the PC and based on which an image is to be printed by the recording unit . In addition the RAM. temporarily stores various data such as image data read by the reading unit data to be transmitted by facsimile which has been transmitted from the PC and data received by facsimile control unit as facsimile data.

The communication unit includes the USB interface a connection port for connection via the network and a connection port for connection via the analog telephone line . The communication unit controls analog communication via facsimile. The recording unit includes a recording unit and an electric circuit. The recording unit of the recording unit includes an inkjet type recording head each color ink a carriage and a recording paper conveyance mechanism. The electric circuit of the recording unit includes an application specific integrated circuit ASIC which is used for generating a printing pulse at the recording head based on the print data.

By executing a printing operation by using an application capable of executing printing or by executing a facsimile transmission operation a content to be displayed image data of a file opened by the application is temporarily stored on the HDD of the PC as a spool file of the Enhanced Metafile EMF format. The spool file is then converted by the printer driver or the FAX driver into print data or into facsimile transmission data including a command for controlling the MFP . Furthermore the print data or the facsimile transmission data is then transmitted to the MFP via the USB interface or the network .

The print data received by the MFP is converted by the recording unit into a printing pulse and then is printed on a recording paper based on the printing pulse. On the other hand the facsimile transmission data received by the MFP is converted by facsimile control unit into a facsimile communication protocol and then is transmitted to a communication destination facsimile machine via the analog telephone line .

The operation unit includes various buttons such as a power button or a reset button. The user can execute a job by using the MFP by operating the operation unit . The display unit includes a touch panel which includes an LCD. The display unit can display the status of the MFP . Furthermore the user can execute various settings via the display unit . In addition the user can enter display and confirm various settings and the telephone number of a communication destination facsimile apparatus.

The reading unit includes a color image sensor and an electric circuit including an image processing ASIC. The reading unit controls the scanner function. Facsimile control unit includes a FAX modem and an analog communication circuit. Facsimile control unit controls transmission and receipt of a facsimile document according to the facsimile communication protocol.

The external storage control unit includes a flash memory mounting slot and an interface circuit for storage device. The external storage control unit controls a flash memory mounted on the MFP .

Meanwhile a standard function of Windows 7 OS Plug and Play Extensions PnP X has been presented as one of Plug and Play Extension functions for supporting network connected devices. However N PnP is used in the present exemplary embodiment as a function equivalent to PnP X.

Device drivers includes standard drivers which are included in the OS as standards and IHV manufactured drivers which are provided by IHVs. An application device driver interface DDI interface includes an application programming interface API and a DDI. A device management application is included in the OS as standard.

A print application is an application capable of executing printing which will be described in detail below with reference to . The TWAIN application complies with the TWAIN interface. A WIA application complies with the WIA interface which will be described in detail later below with reference to .

Applications includes the device management application and the applications and . The device management application is capable of managing executing and displaying a Device and Printers folder and a device management screen via the application DDI interface . In the following description the Device and Printers folder will be simply referred to as a folder .

A graphics device interface GDI constitute apart of the OS. A printer queue is included in the spooler as a part thereof. The printer queue queues a print job. A queued print job is displayed in a printer queue folder .

A print processor changes a print layout and executes special processing on an image to be printed. A graphics driver which is a core component of the printer driver for image processing executes image processing for printing according to a drawing command from the GDI and generates a print control command.

A user interface UI module provides and controls a UI of the printer driver. A language monitor is a data communication interface I F configured to control transmission and receipt of data. A status monitor displays information about a status of the MFP such as the ink remaining amount an issued warning and error events.

A port monitor transmits data received from the language monitor to an appropriate port. In addition the port monitor receives data transmitted from the MFP via a class driver . The class driver is a low level module provided closest to a port. In the present exemplary embodiment the class driver is equivalent to a WSD or IHV unique protocol printer class driver. The class driver controls a port in the present exemplary embodiment a USB port or a network port . The printer driver is manufactured by ABC Corporation which is the manufacturer of the MFP .

A default mark indicates a default device of the system. In the present exemplary embodiment the device has been set as the default device. In the folder a device icon of the device is illustrated with dotted lines. This indicates that the device is not currently available. On the other hand a device icon of the device is illustrated with solid lines. This indicates that the device is currently available.

Referring to when the device of the Devices and Printers folder is selected by the user the device management screen is launched and displayed. The MFP can be managed via the device management screen . In the upper field of the device management screen a device icon a device name and manufacturer information are displayed.

Data of the device icon is stored in apart area not illustrated of a device management and control file storage unit . The device name displays the device name of the device displayed in the folder . The manufacturer information displays a text string designated in an element .

On the other hand in the lower field of the device management screen a link to each function associated with the device is displayed. More specifically a printer queue button a print setting button an image reading WIA button and an image reading TWAIN button are displayed. In the following description the image reading WIA button will also be simply referred to as the reading WIA button while the image reading TWAIN button will also be simply referred to as the reading TWAIN button . The image reading TWAIN button is an example of an object.

In an element elements through each of which describing each corresponding button and function are described. For the image reading TWAIN button arguments are set when the TWAIN application is launched may vary according to the status of connection between the PC and the MFP .

A scanner selection field is a scanner for reading an image. The user can select a WIA driver installed on the PC via the scanner selection field . In the example illustrated in the WIA driver ABC Kmmn WIA has been selected. The user can select a scanner driver via a scanner selection dialog . The scanner selection dialog is displayed when the user presses a scanner change button .

In the present exemplary embodiment any of the scanners drivers ABC Kmmn WIA ABC Kmmn WSD WIA and XYZ Defg WIA can be selected. The scanner driver ABC Kmmn WIA is an alternative for the WIA driver which is allocated to the MFP when the IHV manufactured WIA driver which is manufactured by the manufacturer of the MFP in the present exemplary embodiment ABC Corporation is installed on the MFP if the MFP is connected to the PC via the USB interface .

The scanner driver ABC Kmmn WSD WIA is an alternative for the WIA driver which is allocated to the MFP when the WIA driver which is included in the OS as standard is installed on the MFP if the MFP is connected to the PC via the network by using WSD. On the other hand the scanner driver XYZ Defg WIA is an alternative for the WIA driver which is allocated to the MFP when the WIA driver which is included in the OS as standard is installed on the MFP if the MFP is connected to the PC via the network by using WSD. In the example illustrated in the scanner driver ABC Kmmn WIA has been selected.

In the example illustrated in the TWAIN application is a TWAIN application manufactured by ABC Corporation. More specifically the TWAIN application is software that operates in interlock with a TWAIN driver such as the TWAIN driver . Furthermore the TWAIN application is software capable of reading an image by using the scanner of the MFP .

Via a scanner selection field the user can select the TWAIN driver that has been installed on the PC as the scanner driver for reading an image. For the scanner for reading an image the user can select any from among the scanners ABC Kmmn TWAIN ABC Kmmn TWAIN WSD and ABC Kmmn TWAIN Network . The scanner driver ABC Kmmn TWAIN is an alternative for the TWAIN driver which is allocated to the MFP when the TWAIN driver which is manufactured by the manufacturer of the MFP in the present exemplary embodiment ABC Corporation is installed on the MFP if the MFP is connected to the PC via the USB interface .

The scanner driver ABC Kmmn TWAIN WSD is an alternative for the TWAIN driver which is allocated to the MFP when the TWAIN driver is installed on the MFP if the MFP is connected to the PC via the network by using WSD. On the other hand the scanner driver ABC Kmmn TWAIN Network is an alternative for the TWAIN driver which is allocated to the MFP when the TWAIN driver is installed on the MFP if the MFP is connected to the PC via the network by using the IHV native protocol. In the example illustrated in the scanner driver ABC Kmmn TWAIN has been selected.

The above described TWAIN drivers are the same as those described above in relation to the scanner selection field . In the example illustrated in the scanner ABC Kmmn TWAIN Network has been selected. When the user presses an OK button the TWAIN application is launched in a state where the TWAIN driver that has been selected via the scanner selection field is designated. If the name of the TWAIN driver which is a first argument for launching the TWAIN application has a value null i.e. if the device is an unknown device then the TWAIN application displays the scanner selection dialog .

The TWAIN application has a function for designating the default scanner driver and the application launching source which are selected when launching the application according to the following launching arguments 

In Case 1 the TWAIN application is launched from the device management screen and the MFP reads an image by using the TWAIN driver via USB connection.

In Case 2 the TWAIN application is launched from the device management screen and the MFP reads an image by using the TWAIN driver via network by WSD.

In Case 3 the TWAIN application is launched from the device management screen and the MFP reads an image by using the TWAIN driver via network connection by the IHV native protocol.

In Case 4 the TWAIN application is launched from a source other than the device management screen and the MFP reads an image by using the TWAIN driver via USB connection. The only difference point between Cases and is the second argument which describes the application launching source. By utilizing the second argument the TWAIN application can toggle the processing executed when and after the launch according to the application launching source. Therefore the present exemplary embodiment can improve the user operability. By launching the TWAIN application to which the first argument has been added the user can automatically designate the scanner driver for reading an image without executing any particular operation instead of selecting and designating a scanner driver via the scanner selection field .

In Case 5 after displaying the scanner selection dialog illustrated in on the device management screen and after the user has selected a TWAIN driver the TWAIN driver in the present exemplary embodiment the TWAIN application is launched and the MFP reads an image by using the TWAIN driver which has been selected by the user.

Referring to the WIA application is included in the OS as standard. The standard WIA driver is included in the OS as standard. The IHV WIA driver is a driver manufactured by ABC Corporation. A Still Image Architecture STI WIA service is included in the OS as standard. The STI WIA service is an interface between the WIA application and the WIA drivers and .

In the example illustrated in the name of the manufacturer of the device the MFP i.e. ABC Corporation is set to an element . The model name of the device the MFP i.e. Kmmn is set to an element . The above described information is utilized in installing the device management and control file . The device management and control file also includes information used to construct the device management screen .

On the device management screen which is launched and displayed when the MFP is connected to the PC in order to display the printer queue button the print setting button the image reading WIA button and the image reading TWAIN button elements through and through which describe each corresponding button and function are set in an element .

In an element Open Printer Queue included in the element a text string Open Printer Queue is set which is displayed on the printer queue button . In an element open Printer Queue a code open Printer Queue is set which describes a function program for displaying a printer queue folder. Although not illustrated in the drawing the printer queue folder includes a function for displaying the status of a print job.

In an element Printing Preferences included in the element a text string Printing Preferences is set which is displayed on the print setting button . In an element printing Preferences a code printing Preferences is set which describes a function program for displaying a print setting dialog. Although not illustrated in the drawing the print setting dialog refers to a print setting screen included in the UI module of the printer driver .

In an element Image Scan WIA included in the element a text string Image Scan WIA is set which is displayed on the reading WIA button . In an element information describing a condition for displaying the image reading WIA button is set.

An element scanner describes that the device connected to the PC via the USB interface or the network using WSD includes a scanner function that utilizes the WIA driver or the WIA driver . An element true describes that the scanner function that utilizes the WIA driver or the WIA driver is available on the device connected to the PC via the USB interface or the network using WSD. More specifically the condition described by the element corresponds to a case where an image can be read via network connection using USB or WSD by utilizing the WIA driver or .

In an element wiaScan a code wiaScan is set which describes a function program for launching the WIA application . In an element Image Scan TWAIN included in the element a text string Image Scan TWAIN is set which is displayed on the reading TWAIN button . In an element information describing a condition for displaying the reading TWAIN button is set.

An element storage describes that the device connected to the PC via the USB interface includes a storage function. An element true describes that the storage function of the device connected to the PC via the USB interface is available.

In determining whether the scanner function of the device the MFP connected to the PC is available the element is generally utilized. However in utilizing the element the Windows 7 OS cannot execute auto toggle control. More specifically the Windows 7 OS in the scanner function utilizing the TWAIN driver cannot execute auto toggle control by distinguishing between USB connection and WSD connection and by executing appropriate control according to the type of the connection.

Therefore an appropriate value compliant with each of the interfaces of the PC and the MFP cannot be set in the element as an argument used for launching the TWAIN application . Accordingly the present exemplary embodiment utilizes the state where the storage function is available which is a function different from and not related to the scanner function. The state where the storage function is available is described in the element .

In other words by determining the scanner function by identifying the interface between the PC and the device the MFP by utilizing the state where the storage function is available the present exemplary embodiment enables appropriate information to be set at the time of launching the TWAIN application as the argument. Thus the present exemplary embodiment can improve the user operability. As described above the condition described in the element corresponds to a case where an image can be read via USB connection by using the TWAIN driver.

In an element TWAINScan.exe ABC Kmmn TWAIN devmng a code TWAINScan.exe ABC Kmmn TWAIN devmng is set which describes a function program for launching the TWAIN application . Thus when the reading TWAIN button is pressed by the user the TWAIN application is launched in a state in which the scanner ABC Kmmn TWAIN which indicates the USB connected TWAIN driver has been set as the default scanner driver . Accordingly the present exemplary embodiment can achieve a high user operability.

In an element Image Scan TWAIN included in the element a text string Image Scan TWAIN Select Device is set which is displayed on the reading TWAIN button . Because the text string set to the element is used as the text string displayed on the reading TWAIN button the text string displayed on the reading TWAIN button may be different from the text string illustrated in . Information describing a condition for displaying the reading TWAIN button is set in an element . An element storage describes that the device connected to the PC via the USB interface includes the storage function.

An element false describes that the storage function of the device connected to the PC via the USB interface is not currently available.

In order to determine whether the scanner function of the device the MFP connected to the PC is not available the following elements are generally utilized 

More specifically the scanner function of the Windows 7 OS cannot execute auto toggle control for distinguishing between the USB network connection and the WSD network connection and for executing appropriate control according to each type of connection. Therefore an appropriate value compliant with each of the interfaces of the PC and the MFP cannot be set in the element as an argument used for launching the TWAIN application .

Accordingly the present exemplary embodiment utilizes the state where the storage function is available which is a function different from and not related to the scanner function. The state where the storage function is available is described in the element . In other words by determining the scanner function by identifying the interface between the PC and the device the MFP by utilizing the state where the storage function is not available the present exemplary embodiment enables appropriate information to be set at the time of launching the TWAIN application as the argument. Thus the present exemplary embodiment can improve the user operability.

As described above the condition described in the element corresponds to a case where an image cannot be read via USB connection by using the TWAIN driver. In other words the condition described in the element corresponds to a case where the PC and the MFP are not mutually connected via the USB interface or the network .

In this case it is useful if the TWAIN application is launched in a state where the TWAIN application at first displays the scanner selection dialog and the TWAIN driver selected by the user is set in the scanner selection field . Accordingly the present exemplary embodiment sets information for constructing the reading TWAIN button which is a trigger for displaying the scanner selection dialog .

In an element TWAINScan.exe devmng a code TWAINScan.exe ABC Kmmn TWAIN devmng is set which describes a function program for launching the TWAIN application . Accordingly if the reading TWAIN button is pressed by the user the TWAIN application is launched in the following manner.

More specifically the TWAIN application is launched in a state where the scanner selection dialog is displayed and the TWAIN driver selected by the user is set in the scanner selection field . By executing the above described processing the user is enabled to appropriately designate a scanner driver desired to be used even when the user has not yet prepared or set the scanner desired to be used. Accordingly the present exemplary embodiment can achieve a high user operability.

In an element Image Scan TWAIN included in the element a text string Image Scan TWAIN is set which is displayed on the reading TWAIN button . In an element information describing a condition for displaying the reading TWAIN button is set.

An element printer describes that the device connected to the PC includes the printer function. An element true describes that the printer function of the device connected to the PC is currently available. An element WSD describes that the port used for utilizing the printer function of the device is a WSD port. In the present exemplary embodiment a WSD port refers to a port for network connection that utilizes WSD. The element WSD is defined as a function included in the OS as standard.

In determining whether the scanner function of the device the MFP connected to the PC is available the element is generally utilized. However in utilizing the element the Windows 7 OS cannot execute auto toggle control. More specifically the Windows 7 OS in the scanner function utilizing the TWAIN driver cannot execute auto toggle control by distinguishing between USB connection and WSD connection and by executing appropriate control according to the type of the connection.

Therefore an appropriate value compliant with each of the interfaces of the PC and the MFP cannot be set in the element as an argument used for launching the TWAIN application . Accordingly the present exemplary embodiment utilizes the state where the printer function is available and the name of the port for the printer function which are functions different from and not related to the scanner function. The state where the printer function is available and the name of the port for the printer function are described in the element .

In other words by determining the scanner function by identifying the interface between the PC and the device the MFP by utilizing the state where the printer function is available and the name of the port for the printer function the present exemplary embodiment enables appropriate information to be set at the time of launching the TWAIN application as the argument. Thus the present exemplary embodiment can improve the user operability. As described above the condition described in the element corresponds to a case where an image can be read via WSD network connection by using the TWAIN driver.

An element TWAINScan.exe ABC Kmmn TWAIN WSD devmng a code TWAINScan.exe ABC Kmmn TWAIN WSD devmng is set which describes a function program for launching the TWAIN application .

Accordingly if the reading TWAIN button is pressed by the user the TWAIN application is launched in the following manner. More specifically the TWAIN application is launched in a state where the scanner ABC Kmmn TWAIN WSD which corresponds to the WSD network connected TWAIN driver is set as the default scanner driver . Accordingly the present exemplary embodiment can achieve a high user operability.

In the element in an element Image Scan TWAIN included therein a text string called Image Scan TWAIN is set which is displayed on the reading TWAIN button . Information describing a condition for displaying the reading TWAIN button is set in an element .

An element printer describes that the device connected to the PC includes the printer function. An element true describes that the printer function of the device connected to the PC is currently available. In the following description an attribute invert yes means that the logic is reversed.

An element LPT describes that the port used for utilizing the printer function of the device is not a local printer LPT parallel port. An element COM describes that the port to be used for utilizing the printer function of the device is not a component object model COM serial port.

An element FILE describes that the port to be used for utilizing the printer function of the device is not a FILE file export port.

An element IR describes that the port to be used for utilizing the printer function of the device is not an Infrared Data Association IrDA infrared ray port. An element XPS describes that the port to be used for utilizing the printer function of the device is not an eXtended Markup Language XML Paper Specification XPS an XPS file export port.

An element BTH describes that the port to be used for utilizing the printer function of the device is not a Bluetooth port. An element USB describes that the port to be used for utilizing the printer function of the device is not a USB port. An element WSD describes that the port to be used for utilizing the printer function of the device is not a WSD port.

In determining whether the scanner function of the device the MFP connected to the PC is available the element is generally utilized. However in utilizing the element the Windows 7 OS cannot detect a network connection by an IHV native protocol by using the scanner function that utilizes the TWAIN driver .

In the port name of the network by an IHV native protocol for the printer function a media access control MAC address ABC NET  for example which is variable information that is uniquely provided to each device is included. Accordingly the port is not included in the OS as standard. Therefore the port is not defined as a function standard to the OS.

Therefore it is difficult to distinguish and determine the network port of the IHV native protocol by utilizing the element . As described above in a state where the network connection by an IHV native protocol is utilized if the element or the element is utilized an appropriate value complying with each of the interfaces for the PC and the MFP cannot be set as the argument to be used at the time of launching the TWAIN application .

Accordingly the present exemplary embodiment utilizes the state where the printer function is available and the exclusive OR of the name of the port for the printer function which are functions different from and not related to the scanner function. The state where the printer function is available and the logically exclusive name of the port for the printer function are described in the element .

In other words by determining the scanner function by identifying the interface between the PC and the device the MFP by utilizing the state where the printer function is available and the name of the port for the printer function the present exemplary embodiment enables appropriate information to be set at the time of launching the TWAIN application as the argument. Thus the present exemplary embodiment can improve the user operability. As described above the condition described in the element corresponds to a case where an image can be read by using the TWAIN driver via the network connection that uses an IHV native protocol.

A code TWAINScan.exe ABC Kmmn TWAIN Network devmng is set in an element TWAINScan.exe ABC Kmmn TWAIN Network devmng which describes a function program for launching the TWAIN application . Accordingly if the reading TWAIN button is pressed by the user the TWAIN application is launched in the following manner.

More specifically the TWAIN application is launched in a state where the scanner ABC Kmmn TWAIN Network which corresponds to the TWAIN driver that is connected via the network using an IHV native protocol is set as the default scanner driver . Accordingly the present exemplary embodiment can achieve a high user operability.

The TWAIN application includes a launching source determination unit an application control unit a default device setting unit a reading control unit and a status acquisition unit . The reading control unit is a module configured to execute appropriate image processing on the image data read by the MFP and transmitted from the TWAIN driver . The display unit is a module configured to monitor the status of the MFP via the TWAIN driver and to acquire a control command that describes the status of the MFP .

The device management screen is launched and displayed if the MFP is connected to the PC via the USB interface or the network or if the user selects the device displayed in the folder . In the present exemplary embodiment the case will be primarily described where the MFP is connected to the PC via the USB interface or the network and the device management screen illustrated in is launched and displayed.

Referring to in step S the device the MFP is connected to the PC the PC via the USB interface or the network . In step S the PC acquires an identification ID of the connected device. In the present exemplary embodiment the device ID is described by using a text string such as MFG ABC MDL Kmmn CLS PRINTER CMD K4 DES ABC Kmmn . More specifically the device ID is a device ID of the printer function of the MFP which the PC can acquire from the MFP via the USB interface or the network . The device ID includes the following information 

In step S the device management application determines whether the driver the printer driver the FAX driver the WIA driver the WIA driver or the TWAIN driver has been installed on the PC . In the following description about the flow chart of the printer driver the FAX driver the WIA driver the WIA driver and the TWAIN driver are collectively referred to as a driver .

If it is determined that the driver has not been installed on the PC yet NO in step S then the processing advances to step S. In step S the OS installs the driver. In step S the OS loads the driver. If the driver is normally loaded the device the MFP is registered in the folder illustrated in .

In step S the device management application determines whether the device management and control file illustrated in has already been installed on the PC . More specifically in step S the device management application determines whether the already installed device management and control file is compliant with the driver based on the information about the manufacturer MFG and information about the model MDL which is included in the device ID.

If it is determined that the device management and control file has not been installed yet NO in step S then the processing advances to step S. In step S the device management application executes processing for installing the device management and control file . The processing for installing the device management and control file will be described in detail below with reference to .

In step S the device management application executes processing for launching a device management screen illustrated in . In step S the device management application ends the processing executed when the device is connected to the PC .

On the other hand if it is determined that the device management and control file has already been installed on the PC YES in step S then the processing advances to step S. On the other hand if it is determined that the driver has already been installed YES in step S then the processing advances to step S.

When the processing for installing a device management and control file in step S illustrated in is executed the processing in the flow chart of starts. Referring to in step S the device management application starts the processing for installing device management and control file.

In step S the device management application confirms the device ID of the device the MFP connected to the PC via the USB interface or the network . In step S the device management application searches for a device management and control file of the device the MFP connected to the PC based on the manufacturer MFG and the model MDL information included in the device ID.

More specifically the device management and control file illustrated in includes the manufacturer MFG ABC and the model MDL Kmmn which correspond to the device the MFP in the element and the element .

More specifically the device management application searches for a device management and control file for the device the MFP within the file storage portion of the web server or the file storage portion of the CD ROM inserted in the PC .

In step S the device management application determines whether a device management and control file has been extracted from the file storage portion or the file storage portion . If it is determined that a device management and control file has been extracted YES instep S then the processing advances to step S. In step S the device management application stores the device management and control file at a predetermined location within the HDD of the PC .

In step S the device management application installs the device management and control file . After the device management and control file is installed the processing advances to step S. In step S the processing for installing the device management and control file by the device management application ends. In the present exemplary embodiment it is supposed that the device management and control file compliant with the device the MFP has been extracted and installed.

If no device management and control file has been extracted NO in step S then the processing advances to step S. In step S the processing for installing the device management and control file by the device management application ends.

When the processing for launching a device management screen in step S illustrated in is executed the processing in the flow chart of starts. Referring to in step S the device management application starts processing for launching the device management screen. In addition when the user selects the device within the folder the device management application starts the processing for launching the device management screen.

In step S the device management control unit acquires the device name selected via the folder . More specifically in the present exemplary embodiment the device management control unit acquires the device name ABC Kmmn because the device has been selected.

In step S the device management and control file reading unit loads a device management and control file which has been stored in step S based on the acquired device name. In step S the device management control unit executes processing for constructing a content to be displayed on the device management screen based on a device management and control file . The processing for constructing a content to be displayed on the device management screen will be described in detail below with reference to .

In step S the device management control unit displays the device management screen via the display unit according to the content to be displayed on the device management screen which is constructed in step S. In step S the processing for launching the device management screen by the device management application ends.

When the processing for constructing a content to be displayed on the device management screen in step S illustrated in is executed the processing in the flow chart of starts. Referring to in step S the device management control unit starts the processing for constructing a content to be displayed on the device management screen.

In step S the device management control unit constructs a printer queue button according to the content of the element and the element . Instep S the device management control unit constructs a print setting button according to the content of the element and the element .

In step S the device management control unit confirms the status of connection of a scanner and the status of installation of the corresponding driver according to the content of the element and the element . In step S the device management control unit determines whether a scanner the MFP has been connected and the corresponding driver has been installed. If it is determined that the MFP has been connected to the PC via the USB interface and the IHV WIA driver manufactured by ABC Corporation has been installed YES in step S then the processing advances to step S. Furthermore if it is determined that the MFP has been connected to the PC via the network by using WSD and that the standard WIA driver which is included in the OS as standard has been installed YES in step S then the processing advances to step S. In none of the above cases NO in step S then the processing advances to step S.

In step S the device management control unit constructs a reading WIA button according to the content of the element and the element . The processing in step S is executed in the case where an image can be read by using the IHV WIA driver or the standard WIA driver via USB connection or via the network that uses WSD.

In step S the device management control unit confirms the status of connection of a storage function and the status of installation of the corresponding driver according to the content of the element and the element . Alternatively in step S the device management control unit confirms the status of connection of a storage function and the status of installation of the corresponding driver according to the content of the element and the element .

In step S the device management control unit determines whether a storage function has been connected and whether the corresponding driver has been installed. If it is determined that the MFP has been connected to the PC via the USB interface and that a storage class driver which is included in the OS as standard has been installed YES in step S then the processing advances to step S. On the other hand if it is determined that the MFP has been connected to the PC not via the USB interface and that no storage class driver has been installed NO in step S then the processing advances to step S.

In step S the device management control unit constructs a reading TWAIN button for USB connection according to the content of the element and the element . The processing in step S is executed in the case where an image can be read by the TWAIN driver via USB connection.

In step S the device management control unit constructs a reading TWAIN button for a connection method selected by the user via the scanner selection dialog according to the content of the element and the element . The processing in step S is executed in the case where an image cannot be read by the TWAIN driver via USB connection. More specifically in this case the connection between the PC and the MFP is implemented not via the USB interface or the network .

In this case it is useful if the TWAIN application is launched in a state where the TWAIN application has at first displayed the scanner selection dialog and where the TWAIN driver selected by the user is set in the scanner selection field . Accordingly the device management control unit constructs a reading TWAIN button which is a button for displaying the scanner selection dialog .

In step S the device management control unit confirms the status of connection of a printer and the status of installation of the corresponding driver according to the content of the element the element and the element . In step S the device management control unit determines whether a printer has been connected and whether the corresponding driver has been installed.

If it is determined that the MFP has been connected to the PC via the network by using WSD and that the printer driver has been installed YES in step S then the processing advances to step S. On the other hand if it is determined that the MFP has been connected to the PC not via the network by using WSD and that the printer driver has not been installed yet NO in step S then the processing advances to step S.

In step S the device management control unit constructs a reading TWAIN button for network connection that uses WSD according to the content of the element and the element . The processing in step S is executed if an image can be read by the TWAIN driver via the network connection that uses WSD.

In step S the device management control unit confirms the status of connection of a printer and the status of installation of the corresponding driver according to the content of the element the element and the elements through . In step S the device management control unit determines whether a printer has been connected and whether the corresponding driver has been installed.

If it is determined that the MFP has been connected to the PC via the network by using the IHV native protocol and that the printer driver has been installed YES in step S then the processing advances to step S. On the other hand if it is determined that the MFP has been connected to the PC not via the network by using the IHV native protocol and that the printer driver has not been installed yet NO in step S then the processing advances to step S. In step S the processing for constructing the content to be displayed on the device management screen ends.

In step S the device management control unit constructs a reading TWAIN button for network connection that uses the IHV native protocol according to the content of the element and the element . The processing in step S is executed if an image can be read by the TWAIN driver via the network connection that uses the IHV native protocol. Then the processing advances to step S. In step S the processing for constructing the content to be displayed on the device management screen ends.

When the user presses the reading TWAIN button via the device management screen i.e. when the user gives an instruction for starting image reading processing the processing according to the flow chart of starts. Referring to in step S the processing for launching the TWAIN application starts.

More specifically in step S the device management control unit which is included in the device management application illustrated in transmits the information described in the element or to the application control unit via the link execution unit . In step S the application control unit acquires device designation information which is described by using the name of the TWAIN driver that is a first argument. In step S to confirm the name of the TWAIN driver that is the first argument the application control unit determines whether device designation information exists i.e. whether a device has been designated . If it is determined that a device has been designated i.e. that device designation information exists YES in step S then the processing advances to step S. On the other hand if it is determined that no device has been designated i.e. that no device designation information exists NO in step S then the processing advances to step S.

In the present exemplary embodiment the device is designated by using the name of the TWAIN driver that is the first argument which is described in the element or . Accordingly in this case the processing advances from step S to step S. If the TWAIN application has been launched without setting a first argument then the processing advances from step S to step S.

In step S the application control unit determines whether the TWAIN driver name which is the first argument has a value null i.e. whether the device is an unknown device . If it is determined that the TWAIN driver name which is the first argument has a value null i.e. that the device is an unknown device YES in step S then the processing advances to step S. On the other hand if it is determined that the TWAIN driver name does not have a value null i.e. that the device is not an unknown device NO in step S then the processing advances to step S. In step S the application control unit displays the scanner selection dialog . When the user selects a TWAIN driver via the scanner selection field and presses the OK button the application control unit sets the scanner designated with the name of the selected TWAIN driver as the first argument. Then the processing advances to step S.

In step S the default device setting unit sets the designated device i.e. the scanner designated by using the TWAIN driver name as the default device for the TWAIN application . Then the processing advances to step S. In step S the application control unit transmits the information received from the device management control unit via the link execution unit in step S to the launching source determination unit . The information transmitted from the application control unit to the launching source determination unit in step S is the information described in the element or illustrated in . More specifically in step S the launching source determination unit acquires information about the launching source which is a second argument.

In step S the launching source determination unit determines whether the launching source is the device management screen. If it is determined that the launching source is the device management screen the device management screen in the present exemplary embodiment YES in step S then the processing advances to step S. On the other hand if it is determined that the launching source is a portion other than the device management screen NO in step S then the processing advances to step S.

In the present exemplary embodiment the device management screen is designated as the launching source according to the second argument devmnb which is described in the element or illustrated in . Accordingly in this case the processing advances from step S to step S. On the other hand if it is determined that the TWAIN application has been launched from a portion other than the device management screen NO in step S the processing advances from step S to step S because other has been designated as the second argument which corresponds to the launching source.

In step S the default device setting unit acquires information about a default device of the OS via the application DDI interface . In the present exemplary embodiment the default device refers to a device to which the default mark has been set in the folder illustrated in . More specifically in the present exemplary embodiment because the device XYZ Defg has been set as the default device the default device setting unit acquires the device name XYZ Defg in step S.

In step S the default device setting unit sets the device driver name as the default device of the TWAIN application according to the default device of the OS acquired in step S. Then the processing advances to step S. In step S if the default device setting unit cannot extract an appropriate device driver name from the default device of the OS acquired in step S then the default device setting unit sets the device driver name set in a previous launch of the TWAIN application as the default device.

In step S the application control unit displays the TWAIN application . In step S the processing for launching the TWAIN application ends. In this case the TWAIN application has been launched and displayed in the state in which the default device set in step S is selected. The information about the default device for the TWAIN application is stored on a memory of the RAM which is managed by the TWAIN application .

Now a second exemplary embodiment of the present invention will be described in detail below. illustrate an example of a device management screen and a manual therefor. In the example illustrated in components similar to those of the first exemplary embodiment described above with reference to are provided with the same reference numerals. Accordingly the description thereof will not be repeated here.

Referring to a device management screen is launched and displayed when the user selects the device via the Devices and Printers folder . The user can manage the MFP via the device management screen .

In the lower portion of the device management screen a link to the function associated with the device is displayed. More specifically a printer queue button a print setting button and a manual display button are displayed.

In an element elements and each of which describing each corresponding button and function are described. The manual display button is a button for displaying a manual which describes how to operate the MFP . When the user presses the manual display button the manual which has been previously installed at a predetermined location within the PC is launched and displayed.

Referring to the manual is a manual describing how to operate the MFP . The manual includes a Compiled Help Module CHM file Manual.chm . More specifically the manual which depends on the model of the MFP and the language used thereon is installed by a dedicated setup application at the following predetermined location. In addition the setup application describes a file path to the installation location of the manual as the following registry information text string Type REG SZ .

In launching the manual from another application the user generally acquires a full path to the manual based on the registry information and launches the manual by using the full path. In the present exemplary embodiment manuals of four language versions i.e. English Japanese Arabic and Russian versions are provided as the manual for the MFP .

Referring to information used for constructing the device management screen is described in the device management and control file . On the device management screen which is launched and displayed when the MFP is connected to the PC in order to display the buttons illustrated in i.e. the printer queue button the print setting button and the manual display button elements and each of which describing each corresponding button and function are described in the element .

In an element On screen Manual included in the element a text string On screen Manual which is displayed on the manual display button is set. In an element information about a condition for displaying the manual display button is set.

In the examples illustrated in HKLM is abbreviation for HKEY LOCAL MACHINE . The text string HKLM is converted into HKEY LOCAL MACHINE within the OS to be processed.

If the OS has been installed on the A drive and English is used as the default language of the OS and if an English version of the manual has been installed then a full path to the manual is set in an element . In an element On screen Manual included in the element a text string On screen Manual is set which is displayed on the manual display button .

Information about a condition for displaying the manual display button is set in an element . An element describes that the following information has been set as the registry information 

If the OS has been installed on the B drive and English is used as the default language of the OS and if an English version of the manual has been installed then a full path to the manual is set in an element . For an element in the case where the OS has been installed on any of C through X drives and English is set as the default language of the OS the information about the OS installation destination drive only is different from that in the case of the element and the element . Accordingly the cases will not be illustrated in the drawing.

In an element On screen Manual included in the element a text string On screen Manual is set which is displayed on to the manual display button . Information about a condition for displaying the manual display button is set in an element .

An element corresponds to the case where the following information has been set as the registry information 

If the OS has been installed on the B drive and English is used as the default language of the OS and if an English version of the manual has been installed then a full path to the manual is set in an element . In an element On screen Manual included in the element a text string On screen Manual is set which is displayed on the manual display button .

Information about a condition for displaying the manual display button is set in an element . The element describes that the following information has been set as the registry information 

If the OS has been installed on the Z drive and English is used as the default language of the OS and if an English version of the manual has been installed then a full path to the manual is set in an element .

The OS can be logically installed on any of A through Z drives. In the present exemplary embodiment the elements through described above are provided. Accordingly if the OS has been installed on an arbitrary drive among the A through Z drives the manual display button can be normally displayed. In addition when the user presses the manual display button the present exemplary embodiment can normally display the English manual . Accordingly the present exemplary embodiment can achieve a high user operability.

In the present exemplary embodiment it is supposed that English and Japanese versions are provided for the device management and control file . In the Japanese version of the device management and control file the text string English is substituted with another text string Japanese . More specifically focusing on the element the device management and control file includes the following content 

Accordingly if the default language of the OS is Japanese and if the OS has been installed on any arbitrary driver among the A through Z drives the present exemplary embodiment can normally display the manual display button . Therefore when the user presses the manual display button the present exemplary embodiment can normally display the Japanese version of the manual . Accordingly the present exemplary embodiment can achieve a high user operability.

If any language other than English and Japanese is used as the default language of the OS the device management and control file for the other language is not provided. Accordingly the English version of the device management and control file is installed and referred to by the user as the device management and control file for the default language.

Therefore if the default language of the OS is Arabic whose manual is available the manual display button for displaying the manual for Arabic or any languages other than English and Japanese cannot be displayed according to the elements through . In other words elements through are to be provided which are elements dedicated for languages whose manual has been provided but whose device management and control file has not been provided.

In an element On screen Manual included in the element a text string On screen Manual is set which is displayed on the manual display button . Information about a condition for displaying the manual display button is set in the element .

If the OS has been installed on the A drive and Arabic is used as the default language of the OS and if an Arabic version of the manual has been installed then a full path to the manual is set in the element . For an element in the case where the OS has been installed on any of B through Y drives and Arabic is set as the default language of the OS the information about the OS installation destination drive only is different from that in the case of the element . Accordingly the cases will not be illustrated in the drawing.

In an element On screen Manual included in the element a text string On screen Manual is set which is displayed on the manual display button . Information about a condition for displaying the manual display button is set in the element .

If the OS has been installed on the Z drive and Arabic is used as the default language of the OS and if an Arabic version of the manual has been installed then a full path to the manual is set in an element .

In an element On screen Manual included in the element a text string On screen Manual is set which is displayed on the manual display button . Information about a condition for displaying the manual display button is set in the element .

If the OS has been installed on the A drive and Russian is used as the default language of the OS and if a Russian version of the manual has been installed then a full path to the manual is set in the element . For an element in the case where the OS has been installed on any of B through Y drives and Russian is set as the default language of the OS the information about the OS installation destination drive only is different from that in the case of the element . Accordingly the cases will not be illustrated in the drawing.

In an element On screen Manual included in the element a text string On screen Manual is set which is displayed on the manual display button . Information about a condition for displaying the manual display button is set in an element .

If the OS has been installed on the Z drive and Russian is used as the default language of the OS and if a Russian version of the manual has been installed then a full path to the manual is set in an element .

As in the case where Arabic or Russian has been set as the default language in the present exemplary embodiment the present exemplary embodiment having the above described configuration particularly provides the elements through which are elements dedicated for languages whose manual has been provided but whose device management and control file has not been provided.

Accordingly if any arbitrarily selected language other than English and Japanese has been set as the default language of the OS the present exemplary embodiment can normally display the manual display button . Therefore when the user presses the manual display button the present exemplary embodiment can normally display the appropriate version of the manual corresponding to the language other than English and Japanese. Accordingly the present exemplary embodiment can achieve a high user operability.

For the languages other than English and Japanese the OS can be logically installed on any of A through Z drives. In the present exemplary embodiment the elements through and through described above are provided. Accordingly if the OS has been installed on an arbitrary drive among the A through Z drives the manual display button can be normally displayed. In addition when the user presses the manual display button the present exemplary embodiment can normally display the appropriate version of the manual corresponding to the default language of the OS. Accordingly the present exemplary embodiment can achieve a high user operability.

When the processing for constructing a content to be displayed on the device management screen in step S illustrated in is executed the processing in the flow chart of starts. Referring to in step S the device management control unit starts the processing for constructing a content to be displayed on the device management screen.

In step S the device management control unit constructs a printer queue button . In step S the device management control unit constructs a print setting button . In step S the device management control unit confirms the status of installation of a manual for a language that is the same as the default language set for the OS. In step S the device management control unit determines whether a manual for a language that is the same as the default language set for the OS has been installed. In the example illustrated in the element describes that the OS has been installed on the A drive.

If it is determined that a manual for a language that is the same as the default language set for the OS has been installed YES in step S then the processing advances to step S. On the other hand if it is determined that a manual for a language that is the same as the default language set for the OS has not been installed yet NO in step S then the processing advances to step S.

In step S the device management control unit constructs a manual display button for displaying the manual for the language that is the same as the default language of the OS according to the content of the element and the element . The element and the element illustrated in correspond to the case where the OS has been installed on the A drive.

In step S the device management control unit confirms the installation status of the Arabic version of the manual according to the content of the element . The content of the element corresponds to the case where the OS has been installed on the A drive. In step S the device management control unit determines whether the Arabic version of the manual has been installed. If it is determined that the Arabic version of the manual has been installed YES in step S then the processing advances to step S. On the other hand if it is determined that the Arabic version of the manual has not been installed NO in step S then the processing advances to step S.

In step S the device management control unit constructs a manual display button for displaying the Arabic version of the manual according to the content of the element and the element . The element and the element illustrated in correspond to the case where the OS has been installed on the A drive.

In step S the device management control unit confirms the installation status of the Russian version of the manual according to the content of the element . The element illustrated in corresponds to the case where the OS has been installed on the A drive. In step S the device management control unit determines whether the Russian version of the manual has been installed.

If it is determined that the Russian version of the manual has been installed YES in step S then the processing advances to step S. On the other hand if it is determined that the Russian version of the manual has not been installed NO in step S then the processing advances to step S. In step S the processing for constructing the content to be displayed on the device management screen ends.

In step S the device management control unit constructs a manual display button for displaying the Russian version of the manual according to the content of the element and the element . Then the processing advances to step S. In step S the processing for constructing the content to be displayed on the device management screen ends. The element and the element illustrated in correspond to the case where the OS has been installed on the A drive.

In the above described first exemplary embodiment the MFP which includes the functions of a color inkjet printer a color facsimile apparatus and a color scanner and an external storage device for a flash memory is used as an example of a peripheral apparatus. In addition the above described first exemplary embodiment provides a function of an appropriate device according to the environment of use by the user by utilizing statuses and port names described in the following items 1 through 4 

 1 A state in which the storage function which is different from and not related to the scanner function is available

 2 A state in which the storage function which is different from and not related to the scanner function is not available

 3 A state in which the storage function which is different from and not related to the scanner function is available and the port name of the port used for the printer function

 4 A state in which the storage function which is different from and not related to the scanner function is available and exclusive OR for the port name of the port used for the printer function

However if an MFP that does not include an external storage device but includes a printer and a scanner only an MFP that does not include a printer but includes a scanner a facsimile apparatus and an external storage device only or a single function color scanner which does not include functions of a printer and an external storage device is used as an example of the peripheral apparatus then the purpose of the present invention cannot be achieved by the above described first exemplary embodiment.

In a third exemplary embodiment of the present invention a peripheral apparatus control system including an arbitrary peripheral apparatus such as the above described MFP or a single function scanner that can implement the present invention will be described. In the third exemplary embodiment described below it is supposed that the MFP is a single function scanner that does not include a printer function or an external storage device.

In an element Image Scan TWAIN included IN an element a text string Image Scan TWAIN to be displayed on the reading TWAIN button is set. In an element information describing a condition for displaying the reading TWAIN button is set. In an element registry information is set as the above described condition. More specifically a code Equal which is designated as an option attribute means not matching . Accordingly if the registry information included in the element does not match the following Registry information then the reading TWAIN button is displayed 

In an elementTWAINScan.exe ABC Kmmn TWAIN devmng a code TWAINScan.exe ABCKmmn TWAIN devmng which describes the function program for launching the TWAIN application is set. Accordingly if the reading TWAIN button is pressed by the user the TWAIN application is launched in a state where the code ABC Kmmn TWAIN which denotes the TWAIN driver used via USB connection has been set as the default scanner driver . Accordingly the present exemplary embodiment can improve the user operability.

In an element Image Scan TWAIN Select Device included in an element a text string Image Scan TWAIN Select Device to be displayed on the reading TWAIN button is set. Because the text string set to the element is used as the text string displayed on the reading TWAIN button the text string displayed on the reading TWAIN button may be different from the text string illustrated in .

Information describing a condition for displaying the reading TWAIN button is set in an element . In an element 0 registry information is set as the above described condition. More specifically a code equal which is designated as an option attribute means matching . Accordingly if the registry information included in the element 0 matches the following registry information then the reading TWAIN button is displayed 

In an element TWAINScan.exe devmng the code TWAINScan.exe devmng which denotes the function program for launching the TWAIN application is set. Accordingly if the reading TWAIN button is pressed by the user the TWAIN application is launched in the following manner.

More specifically at first in a state where the scanner selection dialog is displayed and the TWAIN driver selected by the user is set in the scanner selection field the TWAIN application is launched. By executing the above described processing the user is enabled to appropriately designate a scanner driver desired to be used even when the user has not yet prepared or set the scanner desired to be used. Accordingly the present exemplary embodiment can achieve a high user operability.

In an element Image Scan TWAIN included in an element a text string Image Scan TWAIN is set to the reading TWAIN button . In an element information describing a condition for displaying the reading TWAIN button is set.

In an element 0 registry information is set as the above described condition. In addition a code greater which is designated as the option attribute means greater than . . . . Accordingly if a value greater than the value of the following registry information is set the reading TWAIN button is displayed 

In an element TWAINScan.exe ABC Kmmn TWAIN Network devmng a code TWAINScan.exe ABC Kmmn TWAIN Network devmng which describes the function program for launching the TWAIN application is set. Accordingly if the reading TWAIN button is pressed by the user the TWAIN application is launched in the following manner.

More specifically the TWAIN application is launched in a state where a code ABCKmmn TWAIN Network which denotes the TWAIN driver used via network connection by IHV native protocol is set as the default scanner driver . Accordingly the present exemplary embodiment can improve the user operability.

A short cut for launching the network utility is registered in a startup folder as one of programs started while booting the OS. When the OS is booted the network utility is launched and operates as a resident program. A device display field displays the device monitored by the network utility .

Each of device names and denotes a device name of the monitoring target device within the network . More specifically the device name of the MFP includes a MAC address of the MFP aabbcckmmn08 . The device name corresponds to an MFP having the same model name as that of the MFP and a serial number different from that of the MFP . The MFP has a MAC address aabbcckmmn14 . The device name corresponds to an MFP of ABC Corporation having the model name Opqr . The MFP has a MAC address aabbccopqr01 .

If any of monitoring target device check boxes and has been checked the network utility monitors the corresponding device. On the other hand the network utility does not monitor a device whose corresponding monitoring target device check box is not checked.

In the example illustrated in the network utility monitors the MFP which is displayed as having the device name ABC Kmmn aabbcckmmn08 only. Referring to FIG. when the user presses an OK button the network utility stores the setting of each of the monitoring target device check boxes and . Furthermore in this case the network utility closes its main window.

When the user presses a cancel button the main window of the network utility is closed. More specifically if the user presses the cancel button the network utility does not store the setting of each of the monitoring target device check box and . Even after the user has pressed the OK button or the cancel button and thus the main window is closed the network utility operates as a resident program operating on the PC and continues monitoring the device existing within the network .

When the OS is booted and the function of the shortcut for launching the network utility which is registered in the startup folder is executed the processing in the flow chart of starts. Referring to in step S the network utility is launched and starts the processing illustrated in .

In step S the network utility confirms the monitoring target device existing within the network according to the setting of each of the monitoring target device check boxes and . In step S the network utility determines whether a device i.e. the device displayed with the device name in the example illustrated in is a monitoring target device. If it is determined that the device is a monitoring target device YES in step S then the processing advances to step S. On the other hand if it is determined that the device is not a monitoring target device NO in step S then the processing advances to step S.

In step S the network utility launches a polling thread for the device which is used for monitoring the device . In step S the network utility determines whether a device i.e. a device displayed with the device name in the example illustrated in is a monitoring target device. If it is determined that the device is a monitoring target device YES in step S then the processing advances to step S. On the other hand if it is determined that the device is not a monitoring target device NO in step S then the processing advances to step S.

In step S the network utility launches a polling thread for the device which is used for monitoring the device . In step S the network utility determines whether a device N i.e. the device displayed with the device name in the example illustrated in when N 3 is a monitoring target device. If it is determined that the device N is a monitoring target device YES in step S then the processing advances to step S. On the other hand if it is determined that the device N is not a monitoring target device NO in step S then the processing advances to step S.

In step S the network utility launches a polling thread for the device N which is used for monitoring the device N. In step S the network utility determines whether a processing end message has been received from the OS. If it is determined that a processing end message has been received from the OS YES in step S then the processing advances to step S. In step S the network utility ends all the active polling threads for the active devices the devices through N and ends the processing illustrated in .

If it is determined that the network utility has not received a processing end message from the OS yet NO in step S then the processing returns to step S. When the network utility launches the polling thread for the device through N in steps S S and S if the device polling thread has already been launched and the device is currently monitored the network utility does not launch the device polling thread in an overlapped manner.

When the network utility has launched the polling thread for a device N N is an integer greater than 1 in steps S S and S illustrated in the processing illustrated in starts. Referring to in step S the network utility starts the polling for the device N. In step S the network utility confirms the status of the device N. In step S the network utility determines whether the device N is online. If it is determined that the device N is online YES in step S then the processing advances to step S. On the other hand if it is determined that the device N is not online i.e. if it is determined that the device N is offline NO in step S then the processing advances to step S.

In step S the network utility increments a value of the following registry information about the device N i.e. the value of the apparatus active by 1 and then the processing advances to step S 

In step S the network utility decrements the value of the registry information i.e. the value of the apparatus active by 1. Then the processing advances to step S. For the element the model name of the device N is assigned. More specifically the model name Kmmn is assigned to the element for the devices and . On the other hand the model name Opqr is assigned to the element for the device .

In step S after the network utility has waited for a predetermined time in the present exemplary embodiment the predetermined wait time of five seconds then the processing returns to step S.

As described above the information that describes the state of each of the devices through N as to whether the device is online or offline is assigned to the value of the registry information the value of the apparatus active . In the present exemplary embodiment as a characteristic point of the present invention the network utility launches a polling thread for each device and increments or decrements the value of the apparatus active by 1 in steps S and S.

More specifically if a plurality of devices having the same model name and different serial numbers exists within the network the network utility is enabled to flawlessly monitor the state of all the monitoring target devices existing within the network by assigning a device name including a MAC address such as Kmmn aabbcckmmn08 to the element included in the registry key of the registry information instead of simply assigning the model name.

On the other hand because the device management and control file includes previously generated static information as illustrated in it is difficult to describe registry information by using the model name to which a MAC address which is to be identified from among a vast amount of MAC addresses is added. In particular description of the registry information by using the model name including a MAC address becomes difficult when a plurality of devices having the same model name i.e. the device name such as the device names and displayed in the device display field and different serial numbers exists within the network .

In this case although not entirely flawlessly implemented the present invention enables substantially correct monitoring of the state of the devices existing within the network by causing the network utility to launch a polling thread for each independent device and increments and decrements the value of the apparatus active by 1 in steps S and S in each device polling thread.

Accordingly in the present exemplary embodiment the user is enabled to launch the TWAIN application in the state where the device desired to be used is selected as the default scanner driver in the scanner selection field . Accordingly the present exemplary embodiment can achieve a high user operability.

When the processing for constructing the content to be displayed on the device management screen is executed in step S the processing illustrated in the flow chart of starts. Referring to in step S the device management control unit starts the processing for constructing the content to be displayed on the device management screen. In step S the device management control unit constructs a printer queue button according to the content of the element and the element . In step S the device management control unit constructs a print setting button according to the content of the element and the element .

In step S the device management control unit confirms the status of connection of a scanner and the status of installation of the corresponding driver according to the content of the element and the element . If it is determined that the MFP has been connected to the PC via the USB interface and that the IHV WIA driver manufactured by the manufacturer of the device i.e. ABC Corporation has been installed YES in step S then the processing advances to step S. Alternatively if it is determined that the MFP has been connected to the PC via the network by using the WSD connection and that the Standard WIA driver which is included in the OS as a standard function has been installed YES in step S then the processing advances to step S. In a case different from those described above NO in step S then the processing advances to step S.

In step S the device management control unit constructs a reading WIA button according to the content of the element and the element . The processing in step S is executed in the case where an image can be read by using the IHV WIA driver or the standard WIA driver via USB connection or via the network that uses WSD.

In step S the device management control unit confirms the value of the registry information i.e. the value of the apparatus active according to the content of the element 

If it is determined that no value has been set to the apparatus active YES in step S then the processing advances to step S. On the other hand if it is determined that an arbitrary value such as 0 1 or 2 has been set NO in step S then the processing advances to step S.

In step S the device management control unit constructs the reading TWAIN button for USB connection according to the content of the element and the element . In step S the processing for constructing the content to be displayed on the device management screen ends. The processing in step S is executed in the case where an image can be read by using the TWAIN driver via USB connection.

In step S the device management control unit determines whether the value of active is 0 . If it is determined that the value of active is 0 YES in step S then the processing advances to step S. On the other hand if it is determined that the value of active is not 0 NO in step S then the processing advances to step S.

In step S the device management control unit displays the scanner selection dialog according to the content of the element and the element . Furthermore the device management control unit constructs the reading TWAIN button for the connection method selected by the user. Then the processing advances to step S. In step S the processing for constructing the content to be displayed on the device management screen ends.

The processing in step S is executed in the case where an image cannot be read by the TWAIN driver via USB connection. More specifically in this case the connection between the PC and the MFP is implemented not via the USB interface or the network .

In this case it is useful if the TWAIN application is launched in a state where the TWAIN application has at first displayed the scanner selection dialog and where the TWAIN driver selected by the user is set in the scanner selection field . Accordingly the device management control unit constructs the reading TWAIN button which is a button for displaying the scanner selection dialog .

In step S the device management control unit determines whether the value of active is greater than 0 . If it is determined that the value of active is greater than 0 YES in step S then the processing advances to step S. If it is determined that the value of active is not greater than 0 NO in step S then the processing advances to step S. In step S the processing for constructing the content to be displayed on the device management screen ends.

In step S the device management control unit constructs the reading TWAIN button for network connection by IHV native protocol according to the element and the element . Then the processing advances to step S. In step S the processing for constructing the content to be displayed on the device management screen ends. The processing instep S is executed in the case where an image can be read by the TWAIN driver via network connection by IHV native protocol.

With the above described configuration the present exemplary embodiment can implement a peripheral apparatus control system configured to provide the function of the device appropriate in the environment of use by the user by utilizing the registry information set by the network utility even if an MFP that does not include an external storage device and includes a printer and a scanner only an MFP that does not include a printer and includes a scanner a facsimile apparatus and an external storage device only or a single function color scanner that does not include functions of a printer and an external storage device is used as an example of the peripheral apparatus.

In the third exemplary embodiment described above an MFP that does not include an external storage device and includes a printer and a scanner only an MFP that does not include a printer and includes a scanner a facsimile apparatus and an external storage device only or a single function color scanner that does not include functions of a printer and an external storage device is used as an example of the peripheral apparatus. In addition the third exemplary embodiment is capable of providing the function of a device appropriate in the environment of use by the user by utilizing the registry information set by the network utility .

In a fourth exemplary embodiment of the present invention the above described purpose of the present invention is achieved by executing a method for automatically identifying a device desired to be used by the user.

More specifically in the present exemplary embodiment in a case where an image can be read by the TWAIN driver the following element is described in the device management and control file 

In the present exemplary embodiment the TWAIN application generates a list of TWAIN drivers scanners that includes a text string as the TWAIN driver name based on which the model name of the TWAIN driver scanner ABC Kmmn TWAIN which is the first argument can be identified from among all the installed TWAIN drivers scanners . In addition the TWAIN application selects an appropriate TWAIN driver scanner from among the TWAIN drivers scanners . Furthermore the TWAIN application sets the selected TWAIN driver scanner in the scanner selection field and launches the set TWAIN driver scanner .

For a method executed by the TWAIN application for selecting an appropriate TWAIN driver scanner from among the TWAIN drivers scanners included in the generated list it is useful if the TWAIN application executes a communication test on each TWAIN driver scanner and selects a TWAIN driver scanner available for normal communication. If no TWAIN driver scanner available for normal communication has been extracted the TWAIN application displays the scanner selection dialog to allow the user to select a TWAIN driver scanner .

If a plurality of TWAIN drivers scanners available for normal communication has been extracted it is useful if the TWAIN application prioritizes the communication speed generates the priority order in order of USB connection and network connection by IHV native protocol and selects a TWAIN driver scanner having a high priority order.

Processing according to the present exemplary embodiment will be described in detail below with reference to . is a flow chart illustrating an example of processing for launching a TWAIN application. A program of the processing illustrated in the flow chart of is implemented by the CPU by loading the program from the HDD on the RAM .

Referring to in step S when the user presses designates the reading TWAIN button via the device management screen the processing for launching the TWAIN application starts. More specifically in step S the device management and control unit included in the device management application transfers information included in the element TWAINScan.exe ABCKmmn TWAIN devmng to the application control unit via the link execution unit .

In step S the application control unit acquires device designation information which is described by using the TWAIN driver name that is the first argument from the information transferred in step S. In step S the application control unit determines whether a TWAIN driver name that is the first argument i.e. device designation information is present.

If it is determined that a device has been designated i.e. if it is determined that device designation information is present YES in step S then the processing advances to step S. On the other hand if it is determined that no device has been designated i.e. if it is determined that no device designation information is present NO in step S then the processing advances to step S.

In the present exemplary embodiment a device is designated based on the TWAIN driver name that is the first argument which is included in the element TWAINScan.exe ABCKmmn TWAIN devmng . Accordingly in this case the processing advances from step S to step S. On the other hand if the TWAIN application is launched without setting a first argument NO in step S then the processing advances from step S to step S.

In step S based on a text string according to which the model name of the TWAIN driver ABC Kmmn TWAIN or the scanner corresponding to the TWAIN driver that is the first argument can be identified the application control unit searches for a TWAIN driver having a TWAIN driver name including the above described text string from among all the installed TWAIN drivers. In addition in step S the application control unit generates a list of TWAIN drivers that satisfy the above described search condition.

If no TWAIN driver that satisfies the above described search condition is extracted the application control unit generates a list including no TWAIN driver i.e. a list including a null value . In step S the application control unit refers to the content of the list and determines whether any TWAIN driver has been extracted. If it is determined that any TWAIN driver has been extracted YES in step S then the processing advances to step S. On the other hand if it is determined that no TWAIN driver has been extracted NO in step S then the processing advances to step S.

In step S the application control unit transmits a predetermined message to each scanner corresponding to each TWAIN driver. Furthermore the application control unit executes a communication test based on the content of a reply transmitted from each TWAIN driver. Furthermore the application control unit selects a TWAIN driver available for normal communication.

If a plurality of scanners available for normal communication has been extracted then the application control unit sets a priority order in order of USB connection and a connection via network by IHV native protocol in descending order of communication speed. In addition the application control unit selects a scanner or a TWAIN driver corresponding to a scanner having a high priority order.

In step S the application control unit searches for a device scanner available for normal communication. If the device scanner available for normal communication has been selected the application control unit sets the scanner the TWAIN driver designated based on the TWAIN driver name for the selected device scanner as the first argument. Then the processing advances to step S.

On the other hand if no device scanner available for normal communication has been extracted and if no device scanner has been selected NO in step S then the processing advances to step S. In step S the application control unit displays the scanner selection dialog illustrated in . More specifically when the user selects a TWAIN driver via the scanner selection field and presses the OK button the application control unit sets the scanner TWAIN driver designated based on the selected TWAIN driver name as the first argument. Then the processing advances to step S. In step S the default device setting unit sets the designated device i.e. the scanner designated by using the TWAIN driver name as the default device for the TWAIN application . Then the processing advances to step S.

In step S the application control unit transfers the information received from the device management and control unit via the link execution unit in step S to the launching source determination unit . The information refers to the information described in the element TWAINScan.exe devmng for which no first argument has been set designated.

The launching source determination unit acquires a launching source that is a second argument. In step S the launching source determination unit determines whether the launching source is the device management screen or a source other than the device management screen. If it is determined that the launching source is the device management screen i.e. the device management screen in the present exemplary embodiment YES in step S then the processing advances to step S. On the other hand if it is determined that the launching source is a source other than the device management screen NO in step S then the processing advances to step S.

In the present exemplary embodiment based on the second argument devmng included in the element TWAINScan.exe devmng the device management screen is designated as the launching source. Accordingly in this case the processing advances from step S to step S. On the other hand if the TWAIN application has been launched from a source other than the device management screen NO in step S the second argument other has been designated as the launching source. Accordingly the processing advances from step S to step S.

In step S the default device setting unit acquires information about the default device for the OS via the application DDI interface . In the present exemplary embodiment a default device for the OS refers to a device to which a default mark has been assigned in the folder . Furthermore in the present exemplary embodiment because the device XYZ Defg has been set as the default device the default device setting unit acquires the device N XYZ Defg in step S.

In step S the default device setting unit sets the device driver name as the device name of the default device for the TWAIN application based on the default device for the OS acquired in step S. Then the processing advances to step S. If the default device setting unit does not extract an appropriate device driver name by referring to the default device for the OS acquired in step S then the default device setting unit executes the following processing. More specifically the default device setting unit sets the device driver name which has been set when the TWAIN application has been launched the last time as the default device.

In step S the application control unit displays the TWAIN application . In step S the processing for launching the TWAIN application ends. At this timing the launched TWAIN application is currently displayed in a state where the default device set in step S or S has been selected.

Furthermore in the present exemplary embodiment information about the default device for the TWAIN application is stored on a memory area of which is managed by the TWAIN application .

As described above in the present exemplary embodiment an element for launching the TWAIN application is described and included in the device management and control file by using a text string which enables specification of the model name of the TWAIN driver scanner as an argument. In addition in the present exemplary embodiment the TWAIN application selects and launches an appropriate TWAIN driver scanner based on the text string as described above. With the above described configuration the present exemplary embodiment can implement a peripheral apparatus control system configured to provide the function of a device appropriate in the environment of use by the user.

The present invention can also be implemented by executing processing according to a fifth exemplary embodiment of the present invention. More specifically the present invention can also be achieved by providing a system or an apparatus with a storage medium storing program code of software implementing the functions of the embodiments and by reading and executing the program code stored in the storage medium with a computer of the system or the apparatus a CPU or a micro processing unit MPU .

In each of the exemplary embodiments of the present invention described above the device management application illustrated in is used as an example of the application. However the present invention is not limited to this. More specifically an aspect of the present invention can be effectively implemented by an arbitrary application having a function similar to the function of each exemplary embodiment of the present invention.

In each exemplary embodiment of the present invention described above the TWAIN application illustrated in is used as an example of the application. However the present invention is not limited to this. More specifically the present invention can also be effectively implemented by an arbitrary application having a function similar to the function of the above described exemplary embodiment of the present invention such as an application for printing an image document image .

In addition in each of the exemplary embodiments of the present invention described above a PC is used as an example of the information processing apparatus. However the present invention is not limited to this. More specifically an arbitrarily selected information processing apparatus terminal which can be used in a manner similar to the manner described above such as a digital versatile disc DVD player a gaming machine a set top box or an Internet appliances can also effectively implement the present invention.

Furthermore in each of the exemplary embodiments of the present invention described above an MFP is used as an example of the peripheral apparatus. However the present invention is not limited to this. More specifically the present invention can be effectively implemented by using any of a copying machine a facsimile apparatus a scanner or a digital camera or an apparatus having a plurality of functions including a combination of the functions of the above described apparatuses as the peripheral apparatus.

Moreover in each exemplary embodiment of the present invention an OS equivalent to Windows 7 is used as an example of the OS. However the present invention is not limited to this. More specifically an arbitrary OS can be used to implement an aspect of the present invention.

In addition in each exemplary embodiment of the present invention Ethernet is used as an example of the configuration of the network . However the present invention is not limited to this. More specifically another arbitrary network having a different configuration can be employed to implement an aspect of the present invention.

Furthermore in each exemplary embodiment of the present invention Ethernet is used as an example of the interface between the PC and the MFPs and . However the present invention is not limited to this. More specifically it is also useful if a different other arbitrary interface is used to implement an aspect of the present invention such as a wireless LAN Institute of Electrical and Electronic Engineers IEEE 1394 Bluetooth or USB.

In addition in each of the exemplary embodiments of the present invention described above WSD is used as an example of the protocol used for the web service. However the present invention is not limited to this. More specifically a different other arbitrary protocol such as a protocol unique to an IHV can be used to effectively implement an aspect of the present invention.

Furthermore in each exemplary embodiment of the present invention when the user presses the reading TWAIN button via the device management screen the TWAIN application is launched in a state where an appropriate device driver has been set. However the present invention is not limited to this. More specifically it is also useful if an appropriate device driver name is designated and an arbitrary application is executed by launching the arbitrary application via the device management screen which includes a link to a specific web site to provide a service there.

With the above described configuration each exemplary embodiment of the present invention can provide a device management screen capable of providing an appropriate display and function according to the environment of use of the user. In addition according to each exemplary embodiment of the present invention having the above described configuration when the user launches an a plurality of to utilize a function provided by the peripheral apparatus the user is allowed to appropriately and securely utilize the function provided by the peripheral apparatus because the display and the function of the application is automatically caused to become optimum according to the environment of use of the user.

Therefore with the above described configuration each exemplary embodiment of the present invention can provide the user with an appropriate function of the device according to the environment of use of the user.

Furthermore the present invention is not limited to a specific exemplary embodiment described above. More specifically the present invention can be arbitrarily modified or altered within the scope of the present invention described in claims thereof.

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all modifications equivalent structures and functions.

This application claims priority from Japanese Patent Application No. 2009 201853 filed Sep. 1 2009 and No. 2009 285354 filed Dec. 16 2009 which are hereby incorporated by reference herein in their entirety.

