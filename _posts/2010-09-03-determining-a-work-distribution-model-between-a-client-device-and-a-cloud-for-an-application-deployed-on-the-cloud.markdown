---

title: Determining a work distribution model between a client device and a cloud for an application deployed on the cloud
abstract: A system is described to determine a work distribution model for a computing application deployed on a cloud. In one embodiment, the system comprises a launch request detector, a provisioning module, and a work distribution module. The launch request detector may be configured to detect a request from a client device to launch a computing application. The provisioning module may be configured to provision an application container on a virtual instance of a machine for executing the computing application. The work distribution module may be configured to generate a work distribution model for the computing application, the work distribution model indicating a first portion of the computing application to be executed on the client device and a second portion of the computing application to be executed on the virtual instance of a machine. The client device may be a desktop device or a client device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09311158&OS=09311158&RS=09311158
owner: Adobe Systems Incorporated
number: 09311158
owner_city: San Jose
owner_country: US
publication_date: 20100903
---
This disclosure relates generally to the technical fields of software and or hardware technology and in one example embodiment to system and method to determine a work distribution model for a computing application deployed on a cloud.

The approaches described in this section could be pursued but are not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated herein the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.

The phrase cloud computing refers to an architectural paradigm in which computation is moved from local servers to a remote service that provides computation as a commodity or utility. A cloud is typically a large collection of shared commodity computation resources that can be interchangeably provisioned in response to clients computation requests. Cloud computing is frequently used in software as a service SaaS application architectures and may be viewed as an implementation choice for application deployment that leverages shared resources and improved cost structure of the cloud.

A cloud computing approach may be used to implement a variety of computational paradigms such as virtual machines jobs remote procedure calls traditional servers etc. A computing application executing on a virtual instance of a machine running within a public virtualization space such as e.g. the virtualization space provided by Amazon Elastic Compute Cloud EC2 service may be referred to as running on a cloud.

The proliferation of mobile devices including super smart phones netbooks and tablets presents new challenges for software development. These devices have limited screen size limited processing and memory resources as well as limited power.

In the following detailed description numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances methods apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.

Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here and generally considered to be a self consistent sequence of operations or similar signal processing leading to a desired result. In this context operations or processing involve physical manipulation of physical quantities. Typically although not necessarily such quantities may take the form of electrical or magnetic signals capable of being stored transferred combined compared or otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to such signals as bits data values elements symbols characters terms numbers numerals or the like. It should be understood however that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout this specification discussions utilizing terms such as processing computing calculating determining or the like refer to actions or processes of a specific apparatus such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification therefore a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals typically represented as physical electronic or magnetic quantities within memories registers or other information storage devices transmission devices or display devices of the special purpose computer or similar special purpose electronic computing device.

Computationally expensive computing applications also referred to as merely applications may be very sensitive to processing power and memory constraints of mobile devices given that most mobile devices employ central processing unit CPU throttling in order to conserve power and increase battery longevity. A method and system are provided that utilize cloud based resources to operate even computationally expensive applications on mobile devices. In one embodiment a computing application executes on dynamically scalable cloud infrastructure while streaming an application interface to one or more client devices. The interface may be bidirectional involving the collection of interactive click and gesture streams from client devices while maintaining real time synchronization with the streaming interface. Multiple client devices may be permitted to concurrently view the application executing on a cloud and operate within a shared and synchronized environment. A small footprint native application may be provided on the client device and function as an application interface viewer. The streaming application interface protocol may include video audio and a signaling channel and may be optimized to minimize power consumption on the client device.

Method and system are described where for each client device requesting an application a separate instance of the requested application is started on a virtual instance of a machine also referred to as a virtual instance or simply an instance within a protected environment so that there s no interaction with other applications that might be running on the same virtual instance. Such protected environment termed an application container may be viewed as a constrained amount of CPU power memory and disc space that can be applied to an application that runs within a system. In one example embodiment this is achieved by configuring a virtual instance to host an application containers manager that partitions resources of the instance into application containers. When a client device requests to launch an application a control server operating at the application provider s site provisions an application container for executing the application on a cloud. The provisioning of an application container comprises either discovering an unused application container on one of the existing virtual instances or starting a new virtual instance that hosts an application containers manager that upon starting creates a plurality of application containers on the instance.

As mentioned above one of the challenges associated with some client devices mobile devices for example is that a client device may not have enough power to execute computationally expensive applications or tasks. In order to allow users to access various computationally expensive applications on their mobile devices it may be desirable to minimize power consumption on the device by selectively delegating at least some of the application processing to a cloud where CPU cycles are very cheap while there is certain network or latency cost to access those CPU cycles. In one embodiment a technique is provided for blending the consumption of CPU cycles across the client device and a virtual instance executing on a cloud in a way that is optimal for the particular application. A control server operating at the application provider s site may be configured to include a work distribution module that processes power consumption parameters values of the client device networking and latency costs of executing various portions of the application off the device and generates a work distribution model for the computing application.

The work distribution model is provided to the application executing on a virtual instance. The work distribution model is used by the application to guide it in determining which portions of the application are to be executed on the instance and which portions are to be executed on the client device. A work distribution model may be aimed at providing a user with the best application experience on the client device while allowing the device the maximum longevity and battery power that it can have. The work distribution model may be dynamically adjusted for a particular application based on the status of the instance and fluctuations in bandwidth and latency associated with the executing of the application.

Example computing applications that may be provided to user of client devices e.g. mobile devices utilizing the methods and systems described wherein include Adobe Acrobat and Flash applications offered by Adobe Systems Incorporated as well as multi player online gaming applications and general collaboration use cases for enterprise applications on mobile devices. While embodiments of the hosted service system are described with reference to Amazon EC2 service other virtualization services may be utilized.

An example architecture within which method and system to provision a computing application executing on a cloud to a client device may be implemented is described with reference to an architecture diagram illustrated in . Architecture shown in may include a client device and a hosted service system . In one example embodiment the hosted service system is to provision and manage computing applications utilizing a cloud based computing service as a virtualization infrastructure. Cloud based computing services are shown in as a virtualization service and a network storage service . In one embodiment a hosted service system utilizes Amazon EC2 as a virtualization service and Amazon Simple Storage Service Amazon S3 as a network storage service. The client device and the hosted service system may be in communication with each other via a communications network that may be a public network e.g. the Internet .

The virtualization service may load onto a cloud an instance of a virtual machine that hosts an application server termed an application containers manager utilizing a machine image stored by the network storage service . A machine image is a read only boot image that is used for launching an instance of a virtual machine running an application containers manager. A machine image representing a machine executing an application containers manager may be provided to a network storage system e.g. Amazon S3 by a control server also referred to as a controller .

The instance of a virtual machine may be accessible by the client device via an application interface viewer . The application interface viewer in one embodiment is a client application native to the client device . As mentioned above a user in control of the client device may send a request to the hosted service system to launch the computing application. The request may be initiated via a user interface provided by the hosted service system to the client device via the application interface viewer .

The user interface in one embodiment provides both an end user s and a system administrator s view of the instance of a virtual machine and also permits issuing control operations to the instance of a virtual machine and permits viewing the resulting changes in the state of the instance of a virtual machine . The user interface may also serve as a source of information for the hosted service system including documentation downloads and support. The user interface in one embodiment uses Adobe Flex software offered by Adobe Systems Incorporated as the user interface technology for the implementation of the user interface. The user interface in one embodiment uses an XML Extensible Markup Language based representational state transfer REST style secure communications protocol to synchronize its operations with a control server . A request to access the user interface may be authenticated using one of a variety of authentication techniques.

The request from the client device to launch the computing application is received at the control server which responds to the request by activating an access interface provided by the virtualization service and performs actions to provision an application container for executing the requested computing application within the virtualization service . As mentioned above an application container for executing the requested computing application may be provisioned by either discovering an unused application container on an existing virtual instance or by starting a new virtual instance hosting the application containers manager .

The control server in one example embodiment provides coordination between the components of the architecture provides administration and monitoring of the virtualization service and also may be configured to audit system usage and resource allocation with respect to the instance of a virtual machine . The control server includes a database to store information pertaining to various aspects of system usage. For example every new virtual instance is registered in the database and its parameters including availability of one or more application containers is recorded in the database. Also registered in the database are client devices that host respective application interface viewers and are permitted to request the launching of the application. The control server in one embodiment runs within a standard Hypertext Transfer Protocol Secure HTTPS compliant web server and may be deployed as a publically accessible web application that is available outside a firewall. The control server in one embodiment is implemented using Ruby on Rails technology.

The virtualization service accesses the storage of the network storage system to obtain machine images in order to load the associated instance of a virtual machine . The machine images can be uploaded to the network storage system by the control server utilizing an access interface provided with the network storage system . The storage may also store an application image that is accessed and used by the application containers manager to launch an application requested by the client device within an application container provided by the application containers manager on the instance .

The hosted service system further includes a secure networking client to provide a bidirectional encrypted compressed connection between a machine in the end user s secure network environment e.g. the client device and the instance of a virtual machine . The networking client manages various aspects of transmission control protocol TCP traffic forwarding encryption and network discovery such that the user can access the instance of a virtual machine as if it was running locally on the user s machine. In this mode the user s network security envelope is extended to surround the instance of a virtual machine using comparable levels of encryption and protection against network security threats.

The application interface viewer is a native client application installed on the client device configured to display the application stream received from the application running on a virtual instance and to return control events e.g. clicks and gestures to the application running on the virtual instance via the streaming protocol manager .

The architecture illustrated in may be utilized to run any application even one designed to run on a desktop computer on a mobile device. An environment created through cloud computing for the application to execute appears to a user on the mobile device just like the native environment for the application e.g. desktop environment . The display application interface is streamed to the mobile device from the instance of a virtual machine on which the application executes. The display may be resized or reformatted on the fly to fit the real estate of that mobile device. Any actions that occur on the mobile device e.g. clicks gestures movement are streamed back to the application executing on the virtual instance and translated in a way so that they will make sense to the application itself. For instance an application originally designed for executing on a desktop computer does not expect screen gestures. On a mobile device screen gestures might be the proper way to navigate the application interface and therefore a translation module may be provided on the virtual instance e.g. as part of the streaming protocol manager to perform translation between an operation on a client device and what that would mean for the application. The architecture may be viewed as a coordinated system where an application can be started provided to one or more client devices and stopped when no longer desired by a user.

The system may also include a work distribution module and an image module . The image module may be configured to store machine images and application images at a network storage system of . The image module may thus store at the network storage system a machine image comprising an application containers manager and an image of the computing application the image of the computing application to be used for launching the requested computing application within the application container. The modules illustrated in may be implemented as software hardware or a combination of both. Various operations performed by the system according to an example embodiment are discussed with reference to .

As shown in the method commences with operations and where a machine image comprising an application containers manager and an application image are stored at the network storage system . At operation the control server of detects of a request from the client device of to launch a computing application. At operation the control server provisions an application container on a virtual instance of a machine the application container to provide resources for executing the computing application. As mentioned above the control server provisions an application container either by discovering an available application container at an existing virtual instance or by launching a new virtual instance that hosts an application containers manager.

As shown in the method commences with operation where a request from the server computer to start a computing application is detected at a virtual instance of a machine e.g. a re quest from the control server of to start on the virtual instance of a computing application requested by the client device of . At operation in response to the request an application container provided by the application containers manager of is activated on the virtual instance . As explained above the application container is to provide resources for executing the requested computing application. At operation an image of the requested computing is retrieved from the network storage system of . At operation the activated application container launches the computing application within the application container utilizing the retrieved image of the computing application. At operation a connection is established between the application container and the application interface viewer provided at the client device . The streaming of the interfaces of the computing application to the application interface viewer provided at the client device is commenced at operation .

As shown in the method commences with operation where the launch request detector of detects a request from a client device to start a computing application. The container provisioning module of provisions on a virtual instance of a machine an application container for executing the requested computing application in response to the request from the client device. After the requested application is started on the virtual instance in the application container the work distribution module of generates work distribution model indicating which portion of the computing application if any is to be executed on the client device and which portion of the computing application is to be executed on the virtual instance of a machine.

As discussed above a client device that is a mobile device is typically configured to maximize the battery life of the device and for some applications it may be advantageous to perform nearly all computational operations associated with the execution of an application on a cloud and not on the mobile device. For some applications however such as e.g. interactive game applications the latency associated with transmitting data between the mobile device and the cloud in order to perform operations on the transmitted data may be prohibitive. For example a user may wish to edit a video file of 50 megabytes using the computing application. In order to make a change to the file and perform the change not on the mobile device but on the cloud the mobile device would be required to send 50 megabytes to the virtual instance running the application and then get it back over wireless routes which might take 30 seconds or a minute to occur. Thus for some application it may be advantageous to execute some portions of the application on the cloud and some portions on the device itself. The work distribution module utilizes various information such as the cost of client device CPU cycle application utilization of the CPU cycles available bandwidth for communications between the client device and the virtual instance latency constraints provided for the application etc. in order to determine the work distribution model for that particular client device accessing that particular computing application that is being launched on a virtual instance. These values used by the work distribution module may be obtained or accessed by the control server .

Returning to at operation the work distribution model is provided to the computing application executing on the virtual instance of a machine. As mentioned above the work distribution model may be adjusted dynamically based on monitored network parameters collected by the control server with respect to the computing application executing on the virtual instance of a machine.

The example computer system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a user interface UI cursor control device e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit includes a computer readable or machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media.

The software may further be transmitted or received over a network via the network interface device utilizing any one of a number of well known transfer protocols e.g. Hyper Text Transfer Protocol HTTP .

While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention or that is capable of storing or encoding data structures utilized by or associated with such a set of instructions. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media. Such medium may also include without limitation hard disks floppy disks flash memory cards digital video disks random access memory RAMs read only memory ROMs and the like.

Thus method and to determine a work distribution model for a computing application deployed on a cloud have been described. While some example approaches described herein may be used with ADOBE products the techniques described herein may be utilized beneficially with various other products.

The embodiments described herein may be implemented in an operating environment comprising software installed on a computer in hardware or in a combination of software and hardware. Although embodiments have been described with reference to specific example embodiments it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the invention. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

