---

title: Tessellation shader inter-thread coordination
abstract: One embodiment of the present invention sets forth a technique for performing a computer-implemented method for tessellating patches. An input block is received that defines a plurality of input patch attributes for each patch as well as instructions for processing each input patch. A plurality of threads is launched to execute the instructions to generate each vertex of a corresponding output patch based on the input patch. Reads of values written during instruction execution are synchronized so threads can read and further process the values of other threads. An output patch is then assembled from the outputs of each of the threads; and emitting the output patch for further processing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09024946&OS=09024946&RS=09024946
owner: NVIDIA Corporation
number: 09024946
owner_city: Santa Clara
owner_country: US
publication_date: 20100910
---
This application claims priority benefit to United States provisional patent application titled API EXTENSIONS FOR ADVANCED GRAPHICS PROCESSING UNITS filed on Sep. 11 2009 and having Ser. No. 61 241 847.

The present invention generally relates to GPU application programming interfaces and more specifically to tessellating a patch using one or more shaders.

In prior art for programmable tessellation interfaces such as DirectX 11 coordination amongst threads converting an input patch into a representation of the patch suitable for vertex evaluation over the patch s domain requires a high level shader structured as the execution of a sequence of distinct program entry points. Such conversion of the input patch is performed when the high level shader computes using one or more threads per vertex and per patch attributes for an output patch that is produced by the high level shader s execution. The plurality of threads that are associated with the high level shader execute independently and have no mechanism to communicate in order to coordination their computations. After all threads complete their execution of a program in the sequence the subsequent high level shader performs additional operations on the output patch to further compute attributes. Here this subsequent high level shader can read the outputs written by the prior shader execution described above but cannot write or otherwise modify those inputs it can only write its own per thread outputs.

Expressing communication between multiple threads during this patch conversion process in separate shaders is cumbersome and less efficient than allowing coordinated communication among threads during a single shader execution. However coordinated communication requires mechanisms not present in the prior art. Well known multi threaded communication hazards such as read modify write hazards complicate coordination of threads. Conventional techniques such as locking for mutual exclusion are unavailable and not sufficiently efficient given the fast rate of tessellated patch processing within a graphics processor.

Accordingly what is needed in the art is a technique for reliably synchronized coordination amongst threads when converting an input patch.

A method for an improved technique for tessellating patches. An input block is received that defines a plurality of input patch attributes for each patch as well as instructions for processing each input patch. A plurality of threads is launched to execute the instructions to generate each vertex of a corresponding output patch based on the input patch. Reads of values written during instruction execution are synchronized so threads can read and further process the values of other threads. An output patch is then assembled from the outputs of each of the threads and emitting the output patch for further processing.

A processor configured to tessellate a plurality of patches. The processor receives an input block that defines a plurality of input patches as well as instructions for processing each of the input patches and also receives an output block to which the plurality of output patches are written. For each of the vertices of the output patches a different thread is launched to generate each vertex of the corresponding output patch based on one or more of the input vertex attributes that correspond to the input patch and the instructions. The reads of values written during instruction execution are synchronized so threads can read and further process the values of other threads.

In the following description numerous specific details are set forth to provide a more thorough understanding of the present invention. However it will be apparent to one of skill in the art that the present invention may be practiced without one or more of these specific details. In other instances well known features have not been described in order to avoid obscuring the present invention.

In one embodiment the parallel processing subsystem incorporates circuitry optimized for graphics and video processing including for example video output circuitry and constitutes a graphics processing unit GPU . In another embodiment the parallel processing subsystem incorporates circuitry optimized for general purpose processing while preserving the underlying computational architecture described in greater detail herein. In yet another embodiment the parallel processing subsystem may be integrated with one or more other system elements such as the memory bridge CPU and I O bridge to form a system on chip SoC .

It will be appreciated that the system shown herein is illustrative and that variations and modifications are possible. The connection topology including the number and arrangement of bridges the number of CPUs and the number of parallel processing subsystems may be modified as desired. For instance in some embodiments system memory is connected to CPU directly rather than through a bridge and other devices communicate with system memory via memory bridge and CPU . In other alternative topologies parallel processing subsystem is connected to I O bridge or directly to CPU rather than to memory bridge . In still other embodiments I O bridge and memory bridge might be integrated into a single chip. Large embodiments may include two or more CPUs and two or more parallel processing systems . The particular components shown herein are optional for instance any number of add in cards or peripheral devices might be supported. In some embodiments switch is eliminated and network adapter and add in cards connect directly to I O bridge .

Referring again to in some embodiments some or all of PPUs in parallel processing subsystem are graphics processors with rendering pipelines that can be configured to perform various tasks related to generating pixel data from graphics data supplied by CPU and or system memory via memory bridge and bus interacting with local parallel processing memory which can be used as graphics memory including e.g. a conventional frame buffer to store and update pixel data delivering pixel data to display device and the like. In some embodiments parallel processing subsystem may include one or more PPUs that operate as graphics processors and one or more other PPUs that are used for general purpose computations. The PPUs may be identical or different and each PPU may have its own dedicated parallel processing memory device s or no dedicated parallel processing memory device s . One or more PPUs may output data to display device or each PPU may output data to one or more display devices .

In operation CPU is the master processor of computer system controlling and coordinating operations of other system components. In particular CPU issues commands that control the operation of PPUs . In some embodiments CPU writes a stream of commands for each PPU to a pushbuffer not explicitly shown in either or that may be located in system memory parallel processing memory or another storage location accessible to both CPU and PPU . PPU reads the command stream from the pushbuffer and then executes commands asynchronously relative to the operation of CPU .

Referring back now to each PPU includes an I O input output unit that communicates with the rest of computer system via communication path which connects to memory bridge or in one alternative embodiment directly to CPU . The connection of PPU to the rest of computer system may also be varied. In some embodiments parallel processing subsystem is implemented as an add in card that can be inserted into an expansion slot of computer system . In other embodiments a PPU can be integrated on a single chip with a bus bridge such as memory bridge or I O bridge . In still other embodiments some or all elements of PPU may be integrated on a single chip with CPU .

In one embodiment communication path is a PCI EXPRESS link in which dedicated lanes are allocated to each PPU as is known in the art. Other communication paths may also be used. An I O unit generates packets or other signals for transmission on communication path and also receives all incoming packets or other signals from communication path directing the incoming packets to appropriate components of PPU . For example commands related to processing tasks may be directed to a host interface while commands related to memory operations e.g. reading from or writing to parallel processing memory may be directed to a memory crossbar unit . Host interface reads each pushbuffer and outputs the work specified by the pushbuffer to a front end .

Each PPU advantageously implements a highly parallel processing architecture. As shown in detail PPU includes a processing cluster array that includes a number C of general processing clusters GPCs where C 1. Each GPC is capable of executing a large number e.g. hundreds or thousands of threads concurrently where each thread is an instance of a program. In various applications different GPCs may be allocated for processing different types of programs or for performing different types of computations. For example in a graphics application a first set of GPCs may be allocated to perform tessellation operations and to produce primitive topologies for patches and a second set of GPCs may be allocated to perform tessellation shading to evaluate patch parameters for the primitive topologies and to determine vertex positions and other per vertex attributes. The allocation of GPCs may vary dependent on the workload arising for each type of program or computation.

GPCs receive processing tasks to be executed via a work distribution unit which receives commands defining processing tasks from front end unit . Processing tasks include indices of data to be processed e.g. surface patch data primitive data vertex data and or pixel data as well as state parameters and commands defining how the data is to be processed e.g. what program is to be executed . Work distribution unit may be configured to fetch the indices corresponding to the tasks or work distribution unit may receive the indices from front end . Front end ensures that GPCs are configured to a valid state before the processing specified by the pushbuffers is initiated.

When PPU is used for graphics processing for example the processing workload for each patch is divided into approximately equal sized tasks to enable distribution of the tessellation processing to multiple GPCs . A work distribution unit may be configured to produce tasks at a frequency capable of providing tasks to multiple GPCs for processing. By contrast in conventional systems processing is typically performed by a single processing engine while the other processing engines remain idle waiting for the single processing engine to complete its tasks before beginning their processing tasks. In some embodiments of the present invention portions of GPCs are configured to perform different types of processing. For example a first portion may be configured to perform vertex shading and topology generation a second portion may be configured to perform tessellation and geometry shading and a third portion may be configured to perform pixel shading in screen space to produce a rendered image. Intermediate data produced by GPCs may be stored in buffers to allow the intermediate data to be transmitted between GPCs for further processing.

Memory interface includes a number D of partition units that are each directly coupled to a portion of parallel processing memory where D 1. As shown the number of partition units generally equals the number of DRAM . In other embodiments the number of partition units may not equal the number of memory devices. Persons skilled in the art will appreciate that DRAM may be replaced with other suitable storage devices and can be of generally conventional design. A detailed description is therefore omitted. Render targets such as frame buffers or texture maps may be stored across DRAMs allowing partition units to write portions of each render target in parallel to efficiently use the available bandwidth of parallel processing memory .

Any one of GPCs may process data to be written to any of the DRAMs within parallel processing memory . Crossbar unit is configured to route the output of each GPC to the input of any partition unit or to another GPC for further processing. GPCs communicate with memory interface through crossbar unit to read from or write to various external memory devices. In one embodiment crossbar unit has a connection to memory interface to communicate with I O unit as well as a connection to local parallel processing memory thereby enabling the processing cores within the different GPCs to communicate with system memory or other memory that is not local to PPU . In the embodiment shown in crossbar unit is directly connected with I O unit . Crossbar unit may use virtual channels to separate traffic streams between the GPCs and partition units .

Again GPCs can be programmed to execute processing tasks relating to a wide variety of applications including but not limited to linear and nonlinear data transforms filtering of video and or audio data modeling operations e.g. applying laws of physics to determine position velocity and other attributes of objects image rendering operations e.g. tessellation shader vertex shader geometry shader and or pixel shader programs and so on. PPUs may transfer data from system memory and or local parallel processing memories into internal on chip memory process the data and write result data back to system memory and or local parallel processing memories where such data can be accessed by other system components including CPU or another parallel processing subsystem .

A PPU may be provided with any amount of local parallel processing memory including no local memory and may use local memory and system memory in any combination. For instance a PPU can be a graphics processor in a unified memory architecture UMA embodiment. In such embodiments little or no dedicated graphics parallel processing memory would be provided and PPU would use system memory exclusively or almost exclusively. In UMA embodiments a PPU may be integrated into a bridge chip or processor chip or provided as a discrete chip with a high speed link e.g. PCI EXPRESS connecting the PPU to system memory via a bridge chip or other communication means.

As noted above any number of PPUs can be included in a parallel processing subsystem . For instance multiple PPUs can be provided on a single add in card or multiple add in cards can be connected to communication path or one or more of PPUs can be integrated into a bridge chip. PPUs in a multi PPU system may be identical to or different from one another. For instance different PPUs might have different numbers of processing cores different amounts of local parallel processing memory and so on. Where multiple PPUs are present those PPUs may be operated in parallel to process data at a higher throughput than is possible with a single PPU . Systems incorporating one or more PPUs may be implemented in a variety of configurations and form factors including desktop laptop or handheld personal computers servers workstations game consoles embedded systems and the like.

Operation of GPC is advantageously controlled via a pipeline manager that distributes processing tasks to streaming multiprocessors SPMs . Pipeline manager may also be configured to control a work distribution crossbar by specifying destinations for processed data output by SPMs .

In one embodiment each GPC includes a number M of SPMs where M 1 each SPM configured to process one or more thread groups. Also each SPM advantageously includes an identical set of functional execution units e.g. arithmetic logic units and load store units shown as Exec units and LSUs in that may be pipelined allowing a new instruction to be issued before a previous instruction has finished as is known in the art. Any combination of functional execution units may be provided. In one embodiment the functional units support a variety of operations including integer and floating point arithmetic e.g. addition and multiplication comparison operations Boolean operations AND OR XOR bit shifting and computation of various algebraic functions e.g. planar interpolation trigonometric exponential and logarithmic functions etc. and the same functional unit hardware can be leveraged to perform different operations.

The series of instructions transmitted to a particular GPC constitutes a thread as previously defined herein and the collection of a certain number of concurrently executing threads across the parallel processing engines not shown within an SPM is referred to herein as a warp or thread group. As used herein a thread group refers to a group of threads concurrently executing the same program on different input data with one thread of the group being assigned to a different processing engine within an SPM . A thread group may include fewer threads than the number of processing engines within the SPM in which case some processing engines will be idle during cycles when that thread group is being processed. A thread group may also include more threads than the number of processing engines within the SPM in which case processing will take place over consecutive clock cycles. Since each SPM can support up to G thread groups concurrently it follows that up to G M thread groups can be executing in GPC at any given time.

Additionally a plurality of related thread groups may be active in different phases of execution at the same time within an SPM . This collection of thread groups is referred to herein as a cooperative thread array CTA or thread array. The size of a particular CTA is equal to m k where k is the number of concurrently executing threads in a thread group and is typically an integer multiple of the number of parallel processing engines within the SPM and m is the number of thread groups simultaneously active within the SPM . The size of a CTA is generally determined by the programmer and the amount of hardware resources such as memory or registers available to the CTA.

Each SPM contains an L1 cache not shown or uses space in a corresponding L1 cache outside of the SPM that is used to perform load and store operations. Each SPM also has access to L2 caches within the partition units that are shared among all GPCs and may be used to transfer data between threads. Finally SPMs also have access to off chip global memory which can include e.g. parallel processing memory and or system memory . It is to be understood that any memory external to PPU may be used as global memory. Additionally an L1.5 cache may be included within the GPC configured to receive and hold data fetched from memory via memory interface requested by SPM including instructions uniform data and constant data and provide the requested data to SPM . Embodiments having multiple SPMs in GPC beneficially share common instructions and data cached in L1.5 cache .

Each GPC may include a memory management unit MMU that is configured to map virtual addresses into physical addresses. In other embodiments MMU s may reside within the memory interface . The MMU includes a set of page table entries PTEs used to map a virtual address to a physical address of a tile and optionally a cache line index. The MMU may include address translation lookaside buffers TLB or caches which may reside within multiprocessor SPM or the L1 cache or GPC . The physical address is processed to distribute surface data access locality to allow efficient request interleaving among partition units. The cache line index may be used to determine whether of not a request for a cache line is a hit or miss.

In graphics and computing applications a GPC may be configured such that each SPM is coupled to a texture unit for performing texture mapping operations e.g. determining texture sample positions reading texture data and filtering the texture data. Texture data is read from an internal texture L1 cache not shown or in some embodiments from the L1 cache within SPM and is fetched from an L2 cache parallel processing memory or system memory as needed. Each SPM outputs processed tasks to work distribution crossbar in order to provide the processed task to another GPC for further processing or to store the processed task in an L2 cache parallel processing memory or system memory via crossbar unit . A preROP pre raster operations is configured to receive data from SPM direct data to ROP units within partition units and perform optimizations for color blending organize pixel color data and perform address translations.

It will be appreciated that the core architecture described herein is illustrative and that variations and modifications are possible. Any number of processing units e.g. SPMs or texture units preROPs may be included within a GPC . Further while only one GPC is shown a PPU may include any number of GPCs that are advantageously functionally similar to one another so that execution behavior does not depend on which GPC receives a particular processing task. Further each GPC advantageously operates independently of other GPCs using separate and distinct processing units L1 caches and so on.

In graphics applications ROP is a processing unit that performs raster operations such as stencil z test blending and the like and outputs pixel data as processed graphics data for storage in graphics memory. In some embodiments of the present invention ROP is included within each GPC instead of partition unit and pixel read and write requests are transmitted over crossbar unit instead of pixel fragment data.

The processed graphics data may be displayed on display device or routed for further processing by CPU or by one of the processing entities within parallel processing subsystem . Each partition unit includes a ROP in order to distribute processing of the raster operations. In some embodiments ROP may be configured to compress z or color data that is written to memory and decompress z or color data that is read from memory.

Persons skilled in the art will understand that the architecture described in A and B in no way limits the scope of the present invention and that the techniques taught herein may be implemented on any properly configured processing unit including without limitation one or more CPUs one or more multi core CPUs one or more PPUs one or more GPCs one or more graphics or special purpose processing units or the like without departing the scope of the present invention.

In embodiments of the present invention it is desirable to use PPU or other processor s of a computing system to execute general purpose computations using thread arrays. Each thread in the thread array is assigned a unique thread identifier thread ID that is accessible to the thread during its execution. The thread ID which can be defined as a one dimensional or multi dimensional numerical value controls various aspects of the thread s processing behavior. For instance a thread ID may be used to determine which portion of the input data set a thread is to process and or to determine which portion of an output data set a thread is to produce or write.

A sequence of per thread instructions may include at least one instruction that defines a cooperative behavior between the representative thread and one or more other threads of the thread array. For example the sequence of per thread instructions might include an instruction to suspend execution of operations for the representative thread at a particular point in the sequence until such time as one or more of the other threads reach that particular point an instruction for the representative thread to store data in a shared memory to which one or more of the other threads have access an instruction for the representative thread to atomically read and update data stored in a shared memory to which one or more of the other threads have access based on their thread IDs or the like. The CTA program can also include an instruction to compute an address in the shared memory from which data is to be read with the address being a function of thread ID. By defining suitable functions and providing synchronization techniques data can be written to a given location in shared memory by one thread of a CTA and read from that location by a different thread of the same CTA in a predictable manner. Consequently any desired pattern of data sharing among threads can be supported and any thread in a CTA can share data with any other thread in the same CTA. The extent if any of data sharing among threads of a CTA is determined by the CTA program thus it is to be understood that in a particular application that uses CTAs the threads of a CTA might or might not actually share data with each other depending on the CTA program and the terms CIA and thread array are used synonymously herein.

SPM provides on chip internal data storage with different levels of accessibility. Special registers not shown are readable but not writeable by LSU and are used to store parameters defining each CTA thread s position. In one embodiment special registers include one register per CTA thread or per exec unit within SPM that stores a thread ID each thread ID register is accessible only by a respective one of the exec unit . Special registers may also include additional registers readable by all CTA threads or by all LSUs that store a CTA identifier the CTA dimensions the dimensions of a grid to which the CTA belongs and an identifier of a grid to which the CTA belongs. Special registers are written during initialization in response to commands received via front end from device driver and do not change during CTA execution.

A parameter memory not shown stores runtime parameters constants that can be read but not written by any CTA thread or any LSU . In one embodiment device driver provides parameters to the parameter memory before directing SPM to begin execution of a CTA that uses these parameters. Any CTA thread within any CTA or any exec unit within SPM can access global memory through a memory interface . Portions of global memory may be stored in the L1 cache .

Local register file is used by each CTA thread as scratch space each register is allocated for the exclusive use of one thread and data in any of local register file is accessible only to the CTA thread to which it is allocated. Local register file can be implemented as a register file that is physically or logically divided into P lanes each having some number of entries where each entry might store e.g. a 32 bit word . One lane is assigned to each of the N exec units and P load store units LSU and corresponding entries in different lanes can be populated with data for different threads executing the same program to facilitate SIMD execution. Different portions of the lanes can be allocated to different ones of the G concurrent thread groups so that a given entry in the local register file is accessible only to a particular thread. In one embodiment certain entries within the local register file are reserved for storing thread identifiers implementing one of the special registers.

Shared memory is accessible to all CTA threads within a single CTA any location in shared memory is accessible to any CTA thread within the same CTA or to any processing engine within SPM . Shared memory can be implemented as a shared register file or shared on chip cache memory with an interconnect that allows any processing engine to read from or write to any location in the shared memory. In other embodiments shared state space might map onto a per CTA region of off chip memory and be cached in L1 cache . The parameter memory can be implemented as a designated section within the same shared register file or shared cache memory that implements shared memory or as a separate shared register file or on chip cache memory to which the LSUs have read only access. In one embodiment the area that implements the parameter memory is also used to store the CTA ID and grid ID as well as CTA and grid dimensions implementing portions of the special registers. Each LSU in SPM is coupled to a unified address mapping unit that converts an address provided for load and store instructions that are specified in a unified memory space into an address in each distinct memory space. Consequently an instruction may be used to access any of the local shared or global memory spaces by specifying an address in the unified memory space.

The L1 Cache in each SPM can be used to cache private per thread local data and also per application global data. In some embodiments the per CTA shared data may be cached in the L1 cache . The LSUs are coupled to a uniform L1 cache the shared memory and the L1 cache via a memory and cache interconnect . The uniform L1 cache is configured to receive read only data and constants from memory via the L1.5 Cache .

Data assembler processing unit collects vertex data for high order surfaces primitives and the like and outputs the vertex data including the vertex attributes to vertex processing unit . Vertex processing unit is a programmable execution unit that is configured to execute vertex shader programs lighting and transforming vertex data as specified by the vertex shader programs. For example vertex processing unit may be programmed to transform the vertex data from an object based coordinate representation object space to an alternatively based coordinate system such as world space or normalized device coordinates NDC space. Vertex processing unit may read data that is stored in L1 cache parallel processing memory or system memory by data assembler for use in processing the vertex data.

Primitive assembler receives vertex attributes from vertex processing unit reading stored vertex attributes as needed and constructs graphics primitives for processing by tessellation control processing unit . Graphics primitives include triangles line segments points patches and the like.

The tessellation control processing unit treats the input vertices as control points for a geometric patch and transforms these control points from the patch s input representation often called the patch s basis into a representation suitable for efficient surface evaluation by the tessellation evaluation shader . The tessellation control processing unit also computes tessellation factors for edges of geometric patches. A tessellation factor applies to a single edge and quantifies a view dependent level of detail associated with the edge. A tessellation primitive generator is configured to receive the tessellation factors for edges of a patch and to tessellate the patch into multiple geometric primitives such as line triangle or quadrilateral primitives which are transmitted to a tessellation evaluation processing unit . The tessellation evaluation processing unit operates on parameterized coordinates of the subdivided patch to generate a surface representation and vertex attributes for each vertex associated with the geometric primitives.

Primitive assembler receives vertex attributes from tessellation evaluation processing unit reading stored vertex attributes as needed and constructs graphics primitived for processing by geometry processing unit . Geometry processing unit is a programmable execution unit that is configured to execute geometry shader programs transforming graphics primitives received from primitive assembler as specified by the geometry shader programs. For example geometry processing unit may be programmed to subdivide the graphics primitives into one or more new graphics primitives and calculate parameters such as plane equation coefficients that are used to rasterize the new graphics primitives.

In some embodiments geometry processing unit may also add or delete elements in the geometry stream. Geometry processing unit outputs the parameters and vertices specifying new graphics primitives to primitive assembler which receives the parameters and vertices from the geometry processing unit reading stored vertex attributes as needed and constructs graphics primitives for processing by a viewport scale cull and clip unit . Geometry processing unit may read data that is stored in parallel processing memory or system memory for use in processing the geometry data. Viewport scale cull and clip unit performs clipping culling and viewport scaling and outputs processed graphics primitives to a rasterizer .

Rasterizer scan converts the new graphics primitives and outputs fragments and coverage data to fragment processing unit . Additionally rasterizer may be configured to perform z culling and other z based optimizations.

Fragment processing unit is a programmable execution unit that is configured to execute fragment shader programs transforming fragments received from rasterizer as specified by the fragment shader programs. For example fragment processing unit may be programmed to perform operations such as perspective correction texture mapping shading blending and the like to produce shaded fragments that are output to raster operations unit . Fragment processing unit may read data that is stored in parallel processing memory or system memory for use in processing the fragment data. Fragments may be shaded at pixel sample or other granularity depending on the programmed sampling rate.

Raster operations unit is a processing unit that performs raster operations such as stencil z test blending and the like and outputs pixel data as processed graphics data for storage in graphics memory. The processed graphics data may be stored in graphics memory e.g. parallel processing memory and or system memory for display on display device or for further processing by CPU or parallel processing subsystem . In some embodiments of the present invention raster operations unit is configured to compress z or color data that is written to memory and decompress z or color data that is read from memory.

The present invention pertains to the three tessellation shader stages to the graphics processing pipeline two new shader types tessellation control processing unit and tessellation evaluation processing unit and a fixed function component tessellation primitive generator . These shader stages receive patches after the patches have been processed by a vertex shader or a by fixed function vertex processor where each patch consists of a fixed size collection of vertices per vertex attributes and a number of associated per patch attributes.

A tessellation control processing unit executes shader instructions that are specified within a shader program. The tessellation control processing unit consumes a variable sized input patch provided by primitive assembler and produces a fixed size output patch. The output patch comprises an array of vertices and a set of per patch attributes. Such per patch attributes include inner and outer tessellation levels that specify how finely the output patch should be subsequently tessellated. For each input patch that is processed by the tessellation control processing unit multiple threads within the tessellation control processing unit are created and executed. Each thread corresponds to an output patch vertex and writes the per vertex attributes of the corresponding output patch vertex. Each thread may read the output patch vertices of the other threads but can only write to its corresponding output patch vertex. The per patch attributes of the output patch are computed collectively by the plurality of tessellation control shader threads where any thread may write to any per patch attribute of the output patch. Though values that can be written and read between the tessellation control shader threads belong to the output patch one skilled in the art may also appreciate that generalized values may also be shared between the tessellation control shader threads such as intermediate values involved in computations.

Reads and writes to output patch vertices from the independently executing threads in a multi threaded system may be performed in an unspecified order and cause largely undefined results leading to potential data and processing corruptions within the graphics processing pipeline . To cure this deficiency a barrier operation is provided and forces synchronization points where the execution of commands within each thread is halted until all threads have completed the execution of all commands specified prior to the barrier command. The barrier command therefore prevents a thread from for example reading an output that is being concurrently written to by a neighboring thread which ensures well defined and coherent processing within the graphics processing pipeline .

Next the tessellation primitive generator receives the output patch from the tessellation control processing unit and decomposes the output patch into a new set of primitives based on the tessellation levels included in the per patch attributes. The tessellation primitive generator begins with either a triangle primitive or a quad primitive and splits each outer edge of the primitive into a number of segments approximately equal to an outer tessellation level defined by the per patch attributes. The interior of the primitive is tessellated according to the inner tessellation level included in the per patch attributes. The tessellation primitive generator operates in three modes TRIANGLES and QUADS which split a triangular or quad shaped patch into a set of triangles that cover the output patch and ISOLINES NV which splits a quad shaped patch into a set of line strips that span the output patch. Each vertex that is generated by the tessellation primitive generator is assigned a u v or u v w coordinate that indicates the relative location of the vertex in the subdivided triangle or quad.

Finally for each vertex produced by the tessellation primitive generator a tessellation evaluation processing unit is executed to compute the position and other attributes of the vertex using the u v or u v w coordinate of the vertex. Patches with a rectangular shape have u v coordinates while triangular patches have u v w coordinates. When computing the final vertex attributes the tessellation evaluation processing unit can also read the attributes of any of the vertices of the output patch previously written by the tessellation control processing unit . Tessellation evaluation processing unit invocations are completely independent although all invocations for a single patch share the same collection of input vertices and per patch attributes.

The primitives generated by these new stages are then transmitted to subsequent stages of the graphics processing pipeline where the primitives are used as standard inputs to geometry shaders transform feedback and or the rasterizer.

The tessellation control and evaluation shaders are both optional. If no tessellation control processing unit is present the input patch provided by the shader program is passed directly to the tessellation primitive generator and a set of application specified default tessellation level parameters is used to control primitive generation. If no tessellation evaluation processing unit is present the output patch produced by the tessellation control processing unit is passed as a patch to subsequent pipeline stages as described above.

The present invention enhances the OpenGL Application Programming Interface API by allowing applications to specify the per vertex and per patch outputs as blocks of data. For example the tessellation control processing unit shader might output 

where the outputs gl ThreadID .position pos code causes the corresponding gl ThreadID to output data to the appropriate output block index.

As shown above the input output blocks are connected by name between graphics processing pipeline stages. The input output blocks allow optional shaders such as the tessellation evaluation processing unit and the tessellation control processing unit to read an input block with a given name and write an output block with the same name which advantageously minimizes the number of API calls required to transfer data between the shaders.

Without such additions standard GLSL requires that all shaders be compiled and linked as a single unit. By contrast input output blocks serve as a common interface to allow for independent compilation so that the compiler can guarantee that shaders with matching input output blocks match.

The programming model for the tessellation control processing unit provides N independent threads where N is the fixed number of vertices in the output patch specified by the shader program. Each vertex in this patch has a collection of per vertex attributes. Full output patches also have a single collection of per patch attributes. Each thread can read the output patch vertices of any other thread either to assist in the computation of additional per vertex attributes by taking results from neighboring threads or to compute per patch attributes of the output patch. However each thread is only able to write to a corresponding output patch vertex. As described above such attributes include tessellation levels which are used to determine how finely the output patch is subsequently subdivided in the graphics processing pipeline . The tessellation levels are typically computed by analyzing the final position of groups of control points that are processed by the tessellation control processing unit . An example of a patch with control points is depicted in and described in detail below.

Persons skilled in the art will appreciate the present invention is not limited to bicubic patches. Other patch representations with differing numbers of control points and interpretations of the vertex attributes for those control points are expected. For example Bezier triangular patches use 10 control points.

Two separate tessellation programming models are provided for operating on patches and the control points included in patches one for assembly level implementations and another for high level shaders.

The assembly level implementation is a text based assembly programming model that allows application developers to write shader programs in a language that is closer to a hardware model. The assembly level implementation provides an assembly target that can be used for off line compilation of high level shader programs using compilers such as the compiler for NVIDIA Corporation s Cg programming language. When using off line compilation of high level shader programs it is not necessary to execute the high level shading language compiler each time the application program is executed thereby enhancing the overall performance.

For assembly level implementations of tessellation control shaders all N threads are guaranteed to run in lockstep where for a sequence of instructions all threads complete execution of the same instruction before proceeding to a following instruction. This configuration provides reliable organization to the ordering and execution of instructions included in the shader program. For example each thread can safely read any output patch vertex that was written to by a previous instruction. A set of rules are provided and specify an execution order on which applications can rely when executing more complex flow control constructs such as conditional execution or loops. In addition each thread may read the output patch vertices of other threads however each thread may only write to its corresponding output patch vertex. This advantageously allows each thread to share the output patch vertices and prevents corruption of the output patch vertices that could be caused for example by cross thread data writes.

The method begins at step where the GPC of receives an input patch exemplified by patch and a shader program that specifies a number of output patch vertices. As described above the number of output patch vertices is fixed by the shader program and a thread is created for each of the outputs as described below in step .

At step the GPC creates a thread for each of the outputs. Each thread is assigned an identification ID that is equivalent to one of the outputs. Thus each thread ID is unique within a tessellation control shader execution instance and may be used to index a data structure that is used to access the inputs or outputs such as an array.

At step the GPC sets a first instruction included in the program as a current instruction. At step the GPC configures each thread to execute the current instruction.

At step the GPC determines whether each thread has completed execution of the current instruction. In one embodiment the GPC manages a system of callbacks to determine whether each of the threads has completed the execution of the current instruction. If at step the GPC determines that each thread has not completed execution of the current instruction then the step is repeated. Thus each thread that has completed execution of the current instruction must wait for each and every thread to complete their execution of the assigned instruction.

When the GPC determines that each thread has completed execution of the current instruction the method proceeds to step . At step the GPC determines whether the current instruction is the last instruction included in the program. If at step the GPC determines that the current instruction is not the last instruction included in the program then the method proceeds to step where the GPC sets a next instruction included in the program as the current instruction. The method steps are repeated until and each and every instruction included in the shader program has been executed by each of the threads.

Referring back to step if the GPC determines that the current instruction is the last instruction included in the program then the method proceeds to step where the GPC performs any cleanup that is required before moving on to the next shader program. This cleanup includes forming an output patch from the output per vertex and per patch attributes and forwarding this patch to tessellation control shader .

As in the assembly level programming model for high level tessellation control shaders one thread is created for each output patch vertex. Each thread can write to its corresponding output patch vertex and read the output patch vertices corresponding to any other thread without requiring the lock step execution configuration of the assembly level programming model. A barrier instruction is provided to control the execution of instructions by each of the threads. When a thread reaches a barrier instruction that thread halts the execution of any subsequent instructions until all other threads reach the same barrier instruction. Therefore barriers guarantee that any instructions that are defined prior to a barrier have completed in execution before the barrier is marked as completed. A programming model with explicit barriers is particularly advantageous for hardware implementations of the tessellation control shader programming model without the ability to easily support the lockstep execution model of the assembly level programming model above.

At step the GPC receives an input patch and a shader program that specifies a number of output patch vertices. Similar to steps described above the number of output patch vertices is fixed and a thread is created for each of the outputs as described in step .

At step the GPC schedules for execution by each thread a plurality of instructions included in the program. At step the GPC assigns within each thread a first instruction included in the plurality of instructions as a current instruction. At step the GPC determines whether the current instruction specifies a barrier. If at step the GPC determines that the current instruction does not specify a barrier then the method proceeds to step where the current instruction is executed.

At step the GPC determines whether the current instruction is the last instruction included in the plurality of instructions. If at step the GPC determines that the current instruction is not the last instruction included in the plurality of instructions then the method proceeds to step .

At step the GPC sets a next instruction included in the plurality of instructions as the current instruction. The method steps are repeated until and each and every instruction included in the shader program has been executed by each of the threads.

Referring back to step if the GPC determines that the current instruction specifies a barrier then the method proceeds to step .

At step the GPC determines whether all other threads executed instructions prior to the barrier. If at step the GPC determines that not all threads have been executed prior to the barrier then the step is repeated until all of the threads reach the barrier instruction. Conversely if the GPC determines that all threads have been executed prior to the barrier then the method proceeds to step described above.

Referring back to step if the GPC determines that the current instruction is the last instruction included in the plurality of instructions then the method proceeds to step .

At step the GPC performs any cleanup that is required before moving on to the next shader program. This cleanup includes forming an output patch from the output per vertex and per patch attributes and forwarding this patch to tessellation control shader .

As described above both the tessellation control processing unit and the tessellation evaluation processing unit are optionally included in the graphics processing pipeline . If the tessellation control processing unit is omitted an input patch is tessellated at a fixed tessellation level. The fixed tessellation level can be defined through an OpenGL Application Programming Interface API function. If the tessellation evaluation processing unit is omitted a patch processed by the tessellation control processing unit is passed through and may be captured by a transform feedback mechanism or drawn as points.

Taken together these mechanisms allow for multi pass algorithms where a patch is first processed by the tessellation control processing unit and saved to a memory for later reuse. The process of saving a patch to memory involves configuring the tessellation primitive generator tessellation evaluation shader to pass the input patch attributes through the pipeline such that a later stage such as primitive assembler can write these attributes out to a memory such as system memory or PP memory . The processed patches are then read from memory and passed back into the graphics processing pipeline either once or multiple times and are tessellated without incurring the computational overhead of a tessellation control processing unit that would otherwise take place using a fixed tessellation level.

Advantageously embodiments of the invention such as the assembly level implementation provide an assembly target that can be used for off line compilation of tessellation shader programs and enhances overall application program performance. The high level tessellation programming model incorporates a barrier instruction that provides control over the execution shader programs without requiring the lockstep configuration of the assembly level implementation. Input output blocks each utilized by the both the assembly level and high level implementations are connected by name between graphics processing pipeline stages which advantageously minimizes the number of API calls required to transfer data between the shaders. Additionally patches may be captured and played back to reduce redundant tessellation operations thereby enhancing the performance of the graphics processing pipeline .

One embodiment of the invention may be implemented as a program product for use with a computer system. The program s of the program product define functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive flash memory ROM chips or any type of solid state non volatile semiconductor memory on which information is permanently stored and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive or any type of solid state random access semiconductor memory on which alterable information is stored.

The invention has been described above with reference to specific embodiments. Persons skilled in the art however will understand that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The foregoing description and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

