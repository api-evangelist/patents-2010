---

title: Methods and systems for implementing and enforcing security and resource policies for a vehicle
abstract: In one or more embodiments, a vehicle resource usage control system includes a vehicle computer having security policies that define usage rules for one or more vehicle resources. One or more devices communicating with the vehicle computer may have installed in memory software applications that use one or more vehicle resources for operation. Programmed instructions may be received that define which of the one or more vehicle resources the software applications use for operation. These programmed instructions may be associated with the one or more security policies. The security policy associated with the software applications may be determined based on the programmed instructions. Operation of the software applications may be permitted according to the security policy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09639688&OS=09639688&RS=09639688
owner: Ford Global Technologies, LLC
number: 09639688
owner_city: Dearborn
owner_country: US
publication_date: 20100527
---
Various embodiments relate to security controls associated with the use of a vehicle computing system. In some embodiments the security controls relate to regulating the use of vehicle resources when using applications installed on one or more devices via the vehicle computing system. The one or more devices may be remote from the vehicle computing system.

Various examples exist in the field of regulating the use of computer resources and implementing computer security policies. For example U.S. Pat. No. 7 207 041 to Elson et al. 041 Patent discloses an open platform architecture for shared resource access management. The 041 Patent discloses a redirection module in kernel space which receives requests for access to resources from applications in user space. The redirection module routes signals representative of the received requests to a device driver interface in user space. Components of the device driver interface include resource management modules and device drivers that correspond to available resources. The resource management modules generate queries to the device drivers regarding availability of the requested resources. Upon receipt of resource status information from the device drivers components of the device driver interface generate schedules for granting access to the requested resources. Further the device driver interface components control access to the resources in accordance with the generated schedules including issuing responses to the requesting applications and the device drivers of the requested resources.

U.S. Patent Publication No. 2007 0050854 to Cooperstein et al. 854 Publication discloses resource based dynamic security authorization. Access to a resource by sandboxed code is dynamically authorized by a client security system based on a resource based policy. A sandboxed application running on a client is granted access to a resource based on a resource based policy despite denial of the access based on a static policy associated with the client security system. The granting of access coincides with the determination that the threat to a user or the user s information is not increased should the access be granted.

U.S. Patent Publication No. 2008 0148374 to Spaur et al. discloses a telematics system that includes a security controller. The security controller is responsible for ensuring secure access to and controlled use of resources in the vehicle. The security measures relied on by the security controller can be based on digital certificates that grant rights to certificate holders e.g. application developers. In the case in which applications are to be used with vehicle resources procedures are implemented to make sure that certified applications do not jeopardize vehicle resources security and vehicle users safety. Relationships among interested entities are established to promote and support secure vehicle resource access and usage. The entities can include vehicle makers communication service providers communication apparatus vendors vehicle subsystem suppliers application developers as well as vehicle owners users. At least some of the entities can be members of a federation established to enhance and facilitate secure access and usage of vehicle resources.

One aspect includes a vehicle resource usage control system. The system may include a vehicle computer that has one or more security policies defining usage rules for one or more vehicle resources. The one or more security policies are may be default or specific policies. In some embodiments the vehicle computer may be a virtual machine computer embodied in a computer readable medium.

The vehicle computer may be configured to communicate with one or more devices having installed in memory one or more software applications that use one or more vehicle resources for operation. The computer may be further configured to receive programmed instructions defining which of the one or more vehicle resources the software application uses for operation. The programmed instructions may be associated with the one or more security policies. The vehicle computer may be further configured to determine the security policy associated with the one or more software applications based on the programmed instructions. Operation of the one or more software applications according to the security policy may be permitted.

In one embodiment the vehicle computer may include a resource usage timer. As such the security policy may define a time limit for executing the programmed instructions. Additionally the vehicle computer may be further configured to transmit an error message if execution of the programmed instructions exceeds the time limit. Additionally the vehicle computer may be further configured to terminate execution of the programmed instructions.

Another aspect may include a method for controlling usage of vehicle resources by one or more software applications installed on one or more devices communicating with a vehicle computer. The method may include assigning a vehicle resource access level for one or more vehicle resources. One or more security policies defining usage rules for one or more vehicle resources based on the vehicle resource access level may be established. The vehicle resource access level may define general access to vehicle resources or specific access to vehicle resources and may be based on a sensitivity of the functionality of the vehicle resources. A specific access level may include access to additional vehicle resources compared to the general access level.

The method may further include receiving programmed instructions defining which of the one or more vehicle resources the one or more software applications use for operation. A security policy may be associated with the one or more software applications based on the programmed instructions. Operation of the one or more software applications may be permitted according to the security policy.

In one embodiment the method may further include receiving an application programming interface for communicating with the one or more vehicle modules. The one or more security policies may be dynamic such that the one or more security policies are established based on receiving the application programming interface.

Another aspect may include a method that includes receiving instructions over a general protocol to use vehicle resources for operating on a vehicle computer an application installed on two or more devices having different communication protocols. The instructions may include a service or operation request for an application from the two or more devices. In one embodiment the instructions may be stored on the vehicle computer and after the instructions have been validated the instructions may be removed.

A usage security policy associated with the application may be determined based on an association between the application and the security policy. Data may be exchanged data over the general transport protocol for operating the application on the vehicle computer based on the security policy.

These and other aspects will be better understood in view of the attached drawings and following detailed description of the invention.

There are inherent risks in using untrusted applications on a computing device. For example untrusted applications may contain malicious code exhaust computing resources such as computer memory or otherwise disrupt proper operation of the computing device. In this context an untrusted application is an application that is stored remotely from the computing device and is downloaded to and or operated from the computing device such as a personal computer a vehicle computer a mobile device such as a cellphone PDS smartphone etc a personal media player and the like. For example software that is downloaded to a personal computer over the Internet may be an untrusted application.

Untrusted applications can be used in a variety of environments. One example is in and or with a vehicle computer such as the SYNC System from THE FORD MOTOR COMPANY. In this environment applications installed on a mobile device also called mobile applications may be operated by a user from the vehicle computer e.g. SYNC via voice commands and or button presses. The vehicle computer communicates with a number of vehicle modules such as the powertrain control module PCM the airbag control module ACM the engine control unit ECU and other like modules. As such untrusted applications that may be used in a vehicle environment must not have unfettered access to vehicle resources. Therefore untrusted applications should be identified and the use of vehicle resources by the untrusted applications regulated.

Detailed embodiments of the invention are disclosed herein. However it is to be understood that the disclosed embodiments are merely exemplary of an invention that may be embodied in various and alternative forms. Therefore specific functional details disclosed herein are not to be interpreted as limiting but merely as a representative basis for the claims and or as a representative basis for teaching one skilled in the art to variously employ the present invention.

It will be appreciated that while the various embodiments are described with respect to use of a computing system in an automobile there may be other environments in which untrusted applications may be utilized. Non limiting examples of such environments include a home an office a school an airplane a train a bus a library and other like environments.

In the illustrative embodiment shown in a processor controls at least some portion of the operation of the vehicle based computing system. Provided within the vehicle the processor allows onboard processing of commands and routines. Further the processor is connected to both non persistent and persistent storage . In this illustrative embodiment the non persistent storage is random access memory RAM and the persistent storage is a hard disk drive HDD or flash memory.

The processor is also provided with a number of different inputs allowing the user to interface with the processor. In this illustrative embodiment a microphone an auxiliary input for input a USB input a GPS input and a BLUETOOTH input are all provided. An input selector is also provided to allow a user to swap between various inputs. Input to both the microphone and the auxiliary connector is converted from analog to digital by a converter before being passed to the processor.

Outputs to the system can include but are not limited to a visual display and a speaker or stereo system output. The speaker is connected to an amplifier and receives its signal from the processor through a digital to analog converter . Output can also be made to a remote BLUETOOTH device such as PND or a USB device such as vehicle navigation device along the bi directional data streams shown at and respectively.

In one illustrative embodiment the system uses the BLUETOOTH transceiver to communicate with a user s nomadic device e.g. cell phone smart phone PDA etc. . The nomadic device can then be used to communicate with a network outside the vehicle through for example communication with a cellular tower . In some embodiments tower may be a WiFi access point.

Exemplary communication between the nomadic device and the BLUETOOTH Transceiver is represented by signal .

Pairing a nomadic device and the BLUETOOTH transceiver can be instructed through a button or similar input. Accordingly the CPU is instructed that the onboard BLUETOOTH transceiver will be paired with a BLUETOOTH transceiver in a nomadic device.

Data may be communicated between CPU and network utilizing for example a data plan data over voice or DTMF tones associated with nomadic device . Alternatively it may be desirable to include an onboard modem having antenna in order to communicate data between CPU and network over the voice band. The nomadic device can then be used to communicate with a network outside the vehicle through for example communication with a cellular tower . In some embodiments the modem may establish communication with the tower for communicating with network . As a non limiting example modem may be a USB cellular modem and communication may be cellular communication.

In one illustrative embodiment the processor is provided with an operating system including an API to communicate with modem application software. The modem application software may access an embedded module or firmware on the BLUETOOTH transceiver to complete wireless communication with a remote BLUETOOTH transceiver such as that found in a nomadic device .

In another embodiment nomadic device includes a modem for voice band or broadband data communication. In the data over voice embodiment a technique known as frequency division multiplexing may be implemented when the owner of the nomadic device can talk over the device while data is being transferred. At other times when the owner is not using the device the data transfer can use the whole bandwidth 300 Hz to 3.4 kHz in one example .

If the user has a data plan associated with the nomadic device it is possible that the data plan allows for broad band transmission and the system could use a much wider bandwidth speeding up data transfer . In still another embodiment nomadic device is replaced with a cellular communication device not shown that is installed to vehicle . In yet another embodiment the ND may be a wireless local area network LAN device capable of communication over for example and without limitation an 802.11g network i.e. WiFi or a WiMax network.

In one embodiment incoming data can be passed through the nomadic device via a data over voice or data plan through the onboard BLUETOOTH transceiver and into the vehicle s internal processor . In the case of certain temporary data for example the data can be stored on the HDD or other storage media until such time as the data is no longer needed.

Additional sources that may interface with the vehicle include a personal navigation device having for example a USB connection and or an antenna or a vehicle navigation device having a USB or other connection an onboard GPS device or remote navigation system not shown having connectivity to network .

Further the CPU could be in communication with a variety of other auxiliary devices . These devices can be connected through a wireless or wired connection. Also or alternatively the CPU could be connected to a vehicle based wireless router using for example a WiFi transceiver. This could allow the CPU to connect to remote networks in range of the local router .

It will be appreciated however that the architecture of and associated description is non limiting. For example and without limitation operation of the applications may additionally or alternatively occur through the devices . For example and without limitation the inputs outputs and commands may occur at the device 

It will be further appreciated the various embodiments described with respect to may be used additionally or alternatively for telematics support. As a non limiting example the various embodiments can be used when exchanging vehicle health report data. As another non limiting example the various embodiments can be used when exchanging licensing data for an application . As another non limiting example the various embodiments may be used for remote door unlock.

Referring now to there may be one or more devices that may interface with the VCS . However for purposes of illustration and clarity is shown with multiple devices . Non limiting examples of such devices may include cellular phones handheld diagnostic tools personal computers smartphones personal digital assistants PDA media devices e.g. and without limitation Mp3 players portable memory devices e.g. and without limitation USB thumbdrives memory cards sticks SLOTMUSIC cards and other suitable memory devices and or adapters for receiving these memory devices and other devices that may be now or hereafter known.

The applications installed on the devices may be factory installed on the device or installed by a user after purchase of the device . For example and without limitation the user may install the application from a computer readable medium e.g. a CD or thumbdrive or download the application over the Internet. In some embodiments the user may develop the application 

A user may include but is not limited to a consumer a vehicle dealership and individuals employed by the dealership or a service shop and individuals employed by the serve shop . Non limiting examples of applications that may be installed to the devices may include vehicle diagnostic applications communication applications e.g. and without limitation electronic mail VoIP and text messages entertainment applications e.g. and without limitation multi media streaming videos music games etc. social networking applications location based applications Internet applications personal advertisement based applications and others.

Each device may communicate data through one or more communication channels using one or more communication protocols . Non limiting examples of such communication protocols may include BLUETOOTH protocols 802.11 protocols TCP IP proprietary protocols such as without limitation APPLE CORPORATION s iAP protocol mass storage protocols e.g. USB protocols USB based networking protocols e.g. and without limitation USE Serial or USB RNDIS and other protocols now and hereafter known. It should be understood that devices may be capable of communicating data using multiple communication protocols e.g. and without limitation BLUETOOTH and 802.11 .

This relationship between the VCS and the devices may be referred to as a network. In some embodiments the relationship between the devices and the VCS may create an ad hoc network.

Referring back to with respect to BLUETOOTH ready devices each device may also include one or more BLUETOOTH profiles that define with which devices the BLUETOOTH ready device may communicate. Profile may be standard profiles such as A2DP HFP SDAP and HSP or customized profiles.

Devices may establish a connection with the VCS using a communication channel described above. In one embodiment the devices may listen for a connection request from the VCS . In other embodiments the VCS may listen for connection requests from the devices . When a connection is established a data transport manager which may or may not be implemented to CPU of the VCS as software may receive the messages data communicated from the one or more applications via device and process the messages data for further transmission.

In some embodiments the devices may be simultaneously connected to the VCS . In other embodiments the device may establish individual and separate i.e. not simultaneous connections.

The transport manager may transmit this data to the security manager . Accordingly the transport manager may facilitate the communication between the device and the security manager . Further details of the security manager will be described below. In some embodiments the transport manager may also communicate with a data manager not shown which may communicate the data to the security manager. The data manager may store system data available between applications in a database structure.

Non limiting examples of the duties of the transport manager may include abstracting i.e. standardizing the communication protocols and passing the following non limiting information data transportation state changes discovered applications and start requests. The transport manager may accomplish these duties as the interface for connecting to a device with a given name over a given communication channel . More specifically transport manager may send and or receive data over an existing session. A session may be a logical connection between an application on device and the VCS . Further the transport manager may maintain various connection mappings including a mapping between connections and all active sessions over a given connection and a mapping between connections and corresponding communication channels . A connection may be a connection between the transport layers of the devices and the VCS . Accordingly transport manager may facilitate the exchange of data between the applications and the VCS over any one of the communication protocols used to communicate data to from the device 

The transport manager may further receive incoming connections from the device . The transport manger may determine and manage the connection for each communication protocol . In some embodiments this may be performed by a data transport plug in. A plug in may exist for proprietary protocols BLUETOOTH protocols 802.11 protocols and the like. In some embodiments the plug in may be implemented as a dynamic link library DLL .

The connection established by the transport manager may permit data to be sent and or received over an existing connection as defined above . This interface may be independent of the underlying communication transport protocol . Accordingly capabilities for current and new communication channels may be provided.

The transport manager may further determine the type of service that is requested from the applications . A service may be a heartbeat HB a remote procedure call RPC or a bulk service. Other non limiting services may include media streaming use of application specific transport protocols e.g. applications may have specific domain protocols use of other protocols such as HTTP FTP IRC SOAP and IMAP and other suitable service types. More generally a service may indicate the type of action an application may be requesting. In some embodiments this service type determination may be performed by a separate protocol module which may be a part of the transport manager . In other embodiments the protocol module may not be a part of the transport manager but may be communicating with it.

The transport manager may facilitate data exchange between the application and the VCS through a general transport protocol stored in the transport manager . The protocol may be divided into two layers e.g. a higher layer and a lower layer . A higher layer may contain the function calls required to accomplish device communication and system control flow. A lower layer may provide the basic communication functions. This lower layer may be agnostic of the hardware and system details. Accordingly this data transport protocol may be transport agnostic. In this way the data transport protocol may be a dynamic protocol such that it may support expandability without significant or any changes to its architecture. Thus instructions i.e. data from the applications may be transported via the data transport protocol regardless of which of the communications protocols i.e. both present and future communication protocols the device uses for transporting data.

For example and without limitation one device may operate application using BLUETOOTH e.g. using the Radio Frequency Communication RFComm and Logical Link Control and Adaptation L2CAP protocols while another device may operate applications using a propriety protocol such as APPLE S iAP . The data transport protocol facilitates operation of the applications on the respective devices from VCS without regard to the data communication channel used by each device. From the perspective of a user the application on a device may be used seamlessly. From the perspective of a developer of the application the application does not need to be individually developed based on the differing communication protocols 

The security manager may receive data from the transport manager to ensure that application specific policies and or default security policies are being enforced. In this way applications may not obtain greater access to the resources of VCS than is required by the applications . Further based on the security policies of the security manager each application may be confined to operate within its allowance parameters. In one embodiment the security policy enforcement may be viewed as a sandbox environment.

By way of example if a user requests to operate a music program e.g. PANDORA from a device the security manager may determine the use constraints i.e. boundaries with respect to VCS resources of the music program based on the computer readable instructions e.g. application scripts from the application . More specifically the constraints may state that the music program desires access to graphics and audio. Accordingly the security manager may permit access to these resources but not others e.g. vehicle diagnostic resources . Accordingly the constraints may be based on the particular function of the application.

Accordingly the security manager may determine which resources are being requested by an application and block out access to other resources. Further it may assess the policies defined for each incoming request from an application to further restrict its access for the resource to which it has access.

In one embodiment access to the VCS resources e.g. vehicle controls and vehicle modules may be accomplished through application programming interfaces APIs installed on the VCS . As such the security manager may additionally define which APIs may be accessible and provide access control lists to restrict access to the APIs.

These APIs may be developed by the vehicle OEM. In one embodiment the API s may be programmed as DLL s and programmed in the C or C programming languages. The APIs may additionally or alternatively be written in a scripting language. In some embodiments the APIs may be written in the same language as the security manager . Furthermore each API may include its own set of security parameters so that each can enforce unique policy restrictions.

Non limiting examples of vehicle controls may include text to speech TTS functionality speech to text STT functionality voice controls button controls e.g. steering wheel button controls and or center stack button controls and touchscreen button controls. Operation on one or more vehicle modules may be accomplished in response to the use of the one or more vehicle controls . Data may be transmitted between the vehicle controls and the vehicle modules over communication link . In one embodiment communication link may be a vehicle network . Non limiting examples of vehicle modules include powertrain control modules PCM body control modules BCM ABS control modules infotainment modules and the like. In additional or alternative embodiments data may be transmitted to other vehicle modules for audible textual and or graphical output. These may include but are not limited to one or more displays including but not limited to display cluster screen displays not shown or rear entertainment displays not shown speakers or other like output modules in vehicle .

The APIs may be OEM developed APIs third party developed APIs and or open APIs. Non limiting examples of APIs and their non limiting functions that may be installed on the VCS are listed in Table 1 below.

Further details of the security manager will now be described. The security manager may be implemented in the VCS as software. In one embodiment the security manager may mimic the native environment of the VCS and as such serve as a virtual machine. In some embodiments however the security manager may have access limited to certain native functionalities. These certain native functionalities may be related to the one or more APIs in Table 1. Non limiting examples are as follows push to talk text to speech user interface language selection the VCS display including presenting information on the display writing to the display and reading information from the display speech grammar modules voice recognition modules the microphone via a sound capture API audio function including recording audio and transferring audio to an external device image upload modules and GPS.

The security manager may support an event model. In this context the security manager may support a subscriber publisher pattern of message transmission to provide for greater scalability. In some embodiments events may be subscribed to by an event manager not shown which may notify the subscriber of the event. The event manager may be built into the security manager . The security manager may additionally filter events or redefine system events already present. The security manager may also be given access to predetermined events of the VCS . Non limiting examples of predetermined events include power mode voice recognition text to speech media phone control USB insertion removal keyboard telematics WiFi network roaming audio state request button climate radio cluster GPS date time fuel level electric vehicle battery charge level temperature door status emergency information crash status parking aid seats personalization and data manager.

The security manager may additionally regulate resource consumption of vehicle resources. As will be described in further detail below this regulation may be enforced such that an application script which may define the vehicle resources to which an application can have access may be terminated if it violates resource consumption regulations enforced by the security manager . It will be appreciated that the security manager may regulate according to any other restriction that the security manager has in place.

The security manager may be programmed to limit access to vehicle resources by untrusted applications i.e. applications . Thus the security manager may be a shield against these untrusted applications that may otherwise affect the performance of the vehicle. In one embodiment the security manager may be programmed in a scripting language including but not limited to Java .NET Visual Basic C ActionScript JavaScript LUA Perl or Python. In some embodiments a script may be programmed which may or may not based on the scripting language of the security manager to the untrusted applications. This script or more generally code may define the resource constraints and other security parameters of the untrusted applications. In further embodiments the untrusted application may be fully programmed in the scripting language and the security script may be a portion of the application code.

As described in further detail below the security manager may include security policy files associated with the script. These policy files may define the scope of the application s access to the vehicle resources. These policy files may also be associated with digital certificates. The digital certificates may individually define additional policy file limits.

In additional or alternative embodiments security policies may be within the application . For example an application may be subdivided into separate libraries or components and each library or components may be associated with a policy. It will be appreciated that different policies may be enforced at the same time. As one non limiting example a default policy an application specific policy and a library specific policy may all be enforced by the security manager .

In one embodiment the security manager may be flexible and dynamic such that the system framework illustrated in may be extended and upgraded to add new base functionality. This feature may allow new libraries to be loaded and made available dynamically on the VCS at runtime rather than compile time. In one embodiment these libraries may be dynamic link libraries DLLs . In this way upgrades may be feasible without adversely affecting devices with existing support. Therefore through installation or download of the new libraries new remote procedure calls may be registered or new APIs available to the security manager . The general transport protocol may assist in this expandability by transporting content and command controls from the transport manager rather than the specific APIs.

The security manager may perform additional non limiting functions. As one example the security manager may receive and send data i.e. events from any one or more of the various communication protocols . As described above data exchange may be accomplished via the general transport protocol. As such the security manager may also be transport agnostic. 

The security manager may also have the ability to fail gracefully when errors with the script occur. For example in instances where the VCS comprises different generations or versions certain APIs or vehicle controls may not be available in earlier generations or versions. In such a scenario the applications may query the security manager for the existence of certain APIs. An error message may be transmitted to the applications if the API does not exist. Alternatively or additionally an exception may be triggered by the security manager . This exception may be caught and the application may recover from the error. Alternatively if the exception is uncaught the script may be terminated.

In certain embodiments the error message transmitted to the application may include information to perform application debugging. As a non limiting example a call stack trace may be provided in the error message to identify the location of the error. In certain embodiments the call stack trace may be a partial call stack trace. Other examples of error handling will be described below with respect to .

Referring now to a process for implementing a security policy against a script is illustrated and described. It will be appreciated that the disclosure and arrangement of may be modified or re arranged to best fit a particular implementation of the various embodiments of the invention.

As illustrated in block a command or instructions for executing an application may be transmitted from device . The command or instructions may be transmitted by the user via a GUI and or speech user interface or SUI of the VCS and include but is not limited to activation of applications entering inputs receiving outputs and terminating the application . The applications may receive the user instructions and transmit the command or instructions as a service or operation instruction block . The service or operation instructions may be transmitted via one or more service types described above. For purposes of illustration and description will be described in the context that the service or operation instruction is transmitted via a remote procedure call RPC .

The RPC may be mapped to callbacks registered in the security manager . These callbacks may be registered in a table in the security manager and mapped according the RPC instruction or function from the application . Based on a lookup of the callback table the callback may provide the script based functionality to perform the instruction on behalf of the application . As such the script may transmit and receive events. If the instruction did not exist an error may be transmitted to the application 

Callbacks may be based on the type of policy associated with a script received from the applications by the security manager . The security policies may be a default security policy i.e. a general policy or an application specific policy. The security policies may also be signed security policies. Further details of these policies will be described below. It will be appreciated that security policy refers to vehicle resource usage policies and includes but is not limited to policies relating to malicious code denial of service attacks memory consumption buffer overflow flash usage API restriction processor usage the use of watchdog timers and other like security breaches.

As illustrated in block the script from the application may be received by the security manager . As illustrated in block these scripts may be validated by determining whether a security policy is associated with the script. These policies are illustrated in as security policies SP 

In some embodiments when the script is received by the security manager the script may be temporarily copied to VCS memory for purposes of validating the script. When the script is run block the script may be deleted from the VCS . Thus scripts may be run without installation to the VCS .

The security manager may validate the script by determining if a policy file is associated with the script block . If there is no policy file a default security policy may be utilized block . Otherwise an application specific policy may be utilized. In some embodiments this determination block may relate to which policy file to use. That is a policy file may exist for all scripts received by the security manager but a determination may be made as to which policy file to assign. This may be based on the sensitivity of the VCS functionality that the application is requesting. For example and without limitation if the application requests use of vehicle resources that are of high sensitivity such as diagnostic resources the application may be required to have an application specific policy associated with it. It will be appreciated that this determination i.e. the sensitivity of a vehicle resource may be made in the embodiments described above and all other embodiments in which a policy file is associated with a script.

The security policy file may define which vehicle resource s the script may use. The script may be associated with an access level. For example a general or default security policy may define the resources that all applications may use. An application specific security policy may define the specific resources that a specific application may use. In some embodiments the access level may be based on a specificity value. In further embodiments the specificity value may be based on a hierarchy. These values may be numeric alphabetic alphanumeric and the like. For example as the specificity value increases access to a vehicle resource may be stricter. It should be understood that this example is for illustrative purposes and other systems may be implemented without departing from the scope and spirit of the various embodiments.

The specific resources may be in addition to the resources to which all application may have access under the default policy. The application specific policy file may also include a number of attributes that permit overriding default behavior. Non exhaustive non limiting examples of these attributes include the ability to run in the background when other scripts may have focus the ability to override normal resource constraints the ability to override driver distraction restrictions and the ability to override consumer validation of access to resources such as GPS and vehicle data.

The script may be examined by the security manager when received block and a determination made whether the script has a signed digital certificate associated with it block . If so the security manager may lookup the digital security certificate stored in a certificate store block . Otherwise a further determination may be made whether the script requires the use of a specific resource not generally available to all applications block . In certain embodiments the determination in block may made to determine if the certificate is unmodified. As such if the certificate has been modified a new digital certificate may need to be received. In further embodiments the determination in block may be made based on the validity of the digital certificate. Thus an invalid digital certificate may require that a new digital certificate be received.

If no specific resources are required the script may be associated with a default policy block . As such the vehicle resources available to all applications may be made available to this application block . In some embodiments to use these resources applications may not need a signed digital certificate. In other embodiments all policies include a digital certificate.

If no certificate exists a digital certificate may be received block signed for the application according to methods known in the art. The signed digital certificate may be mapped to a counterpart certificate issued by an OEM i.e. the vehicle manufacturer block and stored on the VCS block .

Referring back to where an application specific policy is used the signed digital certificate may be obtained by the security manager block . A determination may be made whether the digital certificate is valid block . If not the script may terminate and an error message may be transmitted to the application block . Further details of the error detection process and message transmission will be described below with respect to . In some embodiments an invalid digital certificate may trigger the operation illustrated in and as described above.

If the digital certificate is valid a further determination may be made whether it has been modified block . If the certificate has been modified the script may be terminated and an error message may be transmitted to the application block . In some embodiments a modified digital certificate may trigger the operation illustrated in and as described above. If the certificate is not modified the script may be allowed to run as illustrated in block .

In certain embodiments the security manager may also authenticate the script and ensure that it has not been modified. A secure hash may be associated with each script for this purpose. The secure hash may be included in the policy file.

Information regarding the policy type i.e. default or application specific may be obtained as described in by the security manager block . Based on the resources defined in the policy type the vehicle resources to which the application may have access is monitored block .

In one embodiment as illustrated in blocks the VCS may determine which processes may be running on the VCS block . This determination may be made for determining which processes have focus priority i.e. displayed to the user determining resource allocation strategy error detection and other like determination. For illustration shows a priority determination.

For example native processes may have priority over security manager processes with respect to focus and resource allocation. As such the security manager may not take screen focus away from a native process despite the fact that a script is running. As another non limiting example the security manager may not monopolize a display or HMI when a native process requires use of the display. As described herein native processes refer to processes native to the VCS i.e. processes not resulting from running one or more scripts .

As such a determination may be made whether a native process is running or requesting use of a vehicle resource block . If so the native process may be run block .

In one embodiment scripts may be permitted to run in the background when a native process is running and or when another script is running. Additionally or alternatively multiple scripts may be run at the same time. Each script may or may not have different access to the vehicle resources. Further each script may be given focus and may be able to determine when it is in focus. This may be determined when an application is shown on the display .

Referring now to block the status of the script s usage of a vehicle resource may be determined. As a non limiting example the use of the VCS memory may be determined. As described above the security manager may ensure that the script does not exhaust the VCS memory through excessive memory consumption. The policy for a script may define that a limit or quota of memory consumption for the script. If the script exceeds this quota the script may be terminated. In one embodiment a warning notification may be transmitted to the application at a predetermined threshold that the memory quota is about to be exceeded.

In certain embodiments while a script may not fully utilize its allocated limit of a resource other factors may exhaust such resources. Thus resource usage may be limited based on timers thread priority and the like. While illustrates the determination in the context of timers it will be appreciated that this example is non limiting and provided for illustration.

If the resource usage does not exceed some defined limit a further determination may be made whether the timer has passed block . This determination may ensure that the script does not enter into an infinite loop thereby exhausting VCS resources such as memory or CPU . It will be appreciated that this feature of the security manager may be suspended in certain instances e.g. during a text to speech event .

In some embodiments the security manager may further determine if the script has a syntax or programming error block . Such errors may generate exceptions and or errors which may or may not cause the script to terminate.

It will be appreciated that the service or operation of the application may be performed block after any all or some of the determinations as described above have been made.

The error detection and transmission process will now be described in further detail. As described above when a failure has occurred an exception may be generated block by the security manager and transmitted to the application block . If the exception is fatal e.g. when the memory usage has surpassed the predetermined limit block the script may be terminated block and the application notified of the termination block . The notification may be transmitted via the general transport protocol.

If the exception is not fatal block e.g. there is a programming or syntax error in the script a determination may be made whether the exception is caught block . If the exception is not caught the script may be terminated block and the application notified block .

If the exception is caught the service or operation from the application may be performed block unless another exception arises. In this case the same process may be followed as illustrated in blocks .

While exemplary embodiments are illustrated and described above it is not intended that these embodiments illustrate and describe all possibilities. Rather the words used in the specification are words of description rather than limitation and it is understood that various changes may be made without departing from the spirit and scope of the invention.

