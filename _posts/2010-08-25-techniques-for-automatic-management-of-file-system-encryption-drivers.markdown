---

title: Techniques for automatic management of file system encryption drivers
abstract: Techniques for automatic management of file system encryption drivers are disclosed. In one particular exemplary embodiment, the techniques may be realized as a method for automatic management of file system encryption drivers comprising receiving a data access request at a first level encryption driver, checking an encryption indicator to identify an encryption method corresponding to the data access request, determining, using at least one computer processor, whether the data access request is to be handled at the first level encryption driver based at least in part on the identified encryption method; allowing the data access request to proceed to the first level encryption driver in the event the data access request is to be handled by the first level encryption driver; redirecting the data access request to a second level encryption driver in the event the data access request is to be handled by a second level encryption driver, and returning a result to the data access request to a requestor while ensuring that returned data is handled by an appropriate level encryption driver on a return path.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08700896&OS=08700896&RS=08700896
owner: Symantec Corporation
number: 08700896
owner_city: Mountain View
owner_country: US
publication_date: 20100825
---
The present disclosure relates generally to encryption drivers and more particularly to techniques for automatic management of file system encryption drivers.

File system encryption may be performed using a plurality of algorithms. If file system encryption is to be performed using a new algorithm for a particular unit of storage e.g. a volume the unit of storage may need to be first unencrypted using the old algorithm and re encrypted using the new algorithm. The amount of storage used to make a transition from an old algorithm to a new algorithm may be large and such a transition between encryption algorithms can take significant time and system resources. Also such a transition may require making a volume inaccessible to users while unencrypting a unit of storage uninstalling old encryption software installing new encryption software and encrypting the unit of storage using the new encryption software. Additionally in some cases two types of encryption may be used e.g. file level encryption and disk level encryption . This may result in a portion of data such as for example a file being encrypted twice e.g. at a file level and as part of a disk level encryption . Double encryption of data may impact performance in writing and or reading the data.

In view of the foregoing it may be understood that there may be significant problems and shortcomings associated with current file system encryption driver management technologies.

Techniques for automatic management of file system encryption drivers are disclosed. In one particular exemplary embodiment the techniques may be realized as a method for automatic management of file system encryption drivers comprising receiving a data access request at a first level encryption driver checking an encryption indicator to identify an encryption method corresponding to the data access request determining using at least one computer processor whether the data access request is to be handled at the first level encryption driver based at least in part on the identified encryption method allowing the data access request to proceed to the first level encryption driver in the event the data access request is to be handled by the first level encryption driver redirecting the data access request to a second level encryption driver in the event the data access request is to be handled by a second level encryption driver and returning a result to the data access request to a requestor while ensuring that returned data is handled by an appropriate level encryption driver on a return path.

In accordance with other aspects of this particular exemplary embodiment the first level encryption driver may be positioned in a stack of file system drivers between an upper shim module and a lower shim module the upper shim module receiving a data access request traversing down the stack of file system drivers and the lower shim module receiving a result of a data access request returning up the stack of file system drivers.

In accordance with further aspects of this particular exemplary embodiment the upper shim module may determine whether a request is to be handled by the first level encryption driver allows a data access request to proceed to the first level encryption driver in the event the data access request is to be handled by the first level encryption driver and redirects a data access request to a second level encryption driver in the event the data access request to be handled at a second level encryption driver.

In accordance with additional aspects of this particular exemplary embodiment returning a result to a requestor while ensuring that returned data is handled by an appropriate level encryption driver on a return path may comprise determining using the lower shim module whether a result to a data access request is to be returned to the first level encryption driver or whether the first level encryption driver is to be bypassed by returning the result to the upper level shim module.

In accordance with additional aspects of this particular exemplary embodiment the second level encryption driver may be positioned in a stack of file system drivers between a second upper shim module and a second lower shim module both the second upper shim module and the second lower shim module positioned in the stack of file system drivers below the first level encryption driver the second upper shim module receiving a data access request traversing down the stack of file system drivers and the second lower shim module receiving a result of a data access request returning up the stack of file system drivers.

In accordance with additional aspects of this particular exemplary embodiment the first level encryption driver may contain code that determines whether a request is to be handled by the first level encryption driver allows a data access request to proceed to the first level encryption driver in the event the data access request is to be handled by the first level encryption driver and redirects a data access request to a second level encryption driver in the event the data access request to be handled at a second level encryption driver.

In accordance with additional aspects of this particular exemplary embodiment checking an encryption indicator to identify an encryption method corresponding to the data access request may be performed by at least one of a shim and an encryption driver.

In accordance with additional aspects of this particular exemplary embodiment checking an encryption indicator to identify an encryption method corresponding to the data access request may be performed by a control module in response to at least one of a shim and an encryption driver.

In accordance with additional aspects of this particular exemplary embodiment a result of the determination may be passed by a side channel communication to a module lower in the stack of file system drivers.

In accordance with additional aspects of this particular exemplary embodiment the techniques may further include checking an encryption indicator to identify an encryption method corresponding to the data access request by at least one of the second level encryption driver a shim directly above the second level encryption driver a control module in response to a request from the second level encryption driver and a control module in response to a request from a shim directly above the second level encryption driver determining whether the data access request is to be handled at the second level encryption driver allowing the data access request to proceed to the second level encryption driver in the event the data access request is to be handled by the second level encryption driver redirecting the data access request a stack of file system drivers in the event the data access request is to not be handled at the second level encryption driver.

In accordance with additional aspects of this particular exemplary embodiment the data access request may comprise a read request.

In accordance with additional aspects of this particular exemplary embodiment the data access request may comprise a write request.

In accordance with additional aspects of this particular exemplary embodiment the techniques may further include setting an indicator associated with the portion of storage targeted by the write request the indicator corresponding to an encryption driver to be used to encrypt data of the write request.

In accordance with additional aspects of this particular exemplary embodiment a volume bit map may be checked to determine which encryption driver to use for encryption of data of the write request.

In accordance with additional aspects of this particular exemplary embodiment the techniques may further include checking a volume bitmap against encryption bit maps of one or more portions of data of the volume to determine whether a specified portion of data of a volume has been migrated to use a new encryption driver and uninstalling an old encryption driver in the event the specified portion data of the volume has been migrated to use the new encryption driver.

In accordance with additional aspects of this particular exemplary embodiment the first level encryption driver may comprise a file level encryption driver and the second level encryption driver may comprise a volume level encryption driver and the file access requests may be redirected in a manner preventing double encryption of file.

In accordance with additional aspects of this particular exemplary embodiment checking an encryption indicator and redirecting data access requests around one or more encryption drivers may provide one or more of a non disruptive migration capability between a plurality of encryption drivers an upgrade capability between encryption drivers and operation of a plurality of encryption drivers on a single volume with an ability to specify one or more encryption drivers to be utilized for a portion of data on the volume.

In accordance with additional aspects of this particular exemplary embodiment the techniques may be realized as at least one non transitory processor readable storage medium for storing a computer program of instructions configured to be readable by at least one processor for instructing the at least one processor to execute a computer process for performing a method of automatic management of encryption drivers.

In another particular exemplary embodiment the techniques may be realized as an article of manufacture for automatic management of file system encryption drivers the article of manufacture may comprise at least one non transitory processor readable storage medium. Instructions may be stored on the at least one medium wherein the instructions may be configured to be readable from the at least one medium by at least one processor and thereby cause the at least one processor to operate so as to receive a data access request at a first level encryption driver check an encryption indicator to identify an encryption method corresponding to the data access request determine using a computer processor whether the data access request is to be handled at the first level encryption driver based at least in part on the identified encryption method allow the data access request to proceed to the first level encryption driver in the event the data access request is to be handled by the first level encryption driver redirect the data access request to a second level encryption driver in the event the data access request is to be handled by a second level encryption driver and return a result to the data access request to a requestor while ensuring that returned data is handled by an appropriate level encryption driver on a return path.

In yet another particular exemplary embodiment the techniques may be realized as a system for automatic management of file system encryption drivers comprising one or more processors communicatively coupled to a network wherein the one or more processors are configured to receive a data access request at a first level encryption driver check an encryption indicator to identify an encryption method corresponding to the data access request determine using a computer processor whether the data access request is to be handled at the first level encryption driver based at least in part on the identified encryption method allow the data access request to proceed to the first level encryption driver in the event the data access request is to be handled by the first level encryption driver redirect the data access request to a second level encryption driver in the event the data access request is to be handled by a second level encryption driver and return a result to the data access request to a requestor while ensuring that returned data is handled by an appropriate level encryption driver on a return path.

The present disclosure will now be described in more detail with reference to exemplary embodiments thereof as shown in the accompanying drawings. While the present disclosure is described below with reference to exemplary embodiments it should be understood that the present disclosure is not limited thereto. Those of ordinary skill in the art having access to the teachings herein will recognize additional implementations modifications and embodiments as well as other fields of use which are within the scope of the present disclosure as described herein and with respect to which the present disclosure may be of significant utility.

The description below describes network elements computers and or components of a system and method for automatic management of file system encryption drivers that may include one or more modules. As used herein the term module may be understood to refer to computing software firmware hardware and or various combinations thereof. Modules however are not to be interpreted as software which is not implemented on hardware firmware or recorded on a processor readable recordable storage medium i.e. modules are not software per se . It is noted that the modules are exemplary. The modules may be combined integrated separated and or duplicated to support various applications. Also a function described herein as being performed at a particular module may be performed at one or more other modules and or by one or more other devices instead of or in addition to the function performed at the particular module. Further the modules may be implemented across multiple devices and or other components local or remote to one another. Additionally the modules may be moved from one device and added to another device and or may be included in both devices.

Server A may be a platform containing encryption driver management module . Encryption driver management module may contain encryption control module one or more encryption redirection modules and encryption indicator module .

With reference to computer system of modem network interface or some other method may be used to provide connectivity from one or more of client system to network . Client system may be able to access information on server A or B using for example a web browser or other client software. Such a client may allow client system to access data hosted by server A or B or one of storage devices A N B N and or N .

Networks and may be local area networks LANs wide area networks WANs the Internet cellular networks satellite networks or other networks that permit communication between client servers and other devices communicatively coupled to networks and . Networks and may further include one or any number of the exemplary types of networks mentioned above operating as a stand alone network or in cooperation with each other. Networks and may utilize one or more protocols of one or more clients or servers to which they are communicatively coupled. Networks and may translate to or from other protocols to one or more protocols of network devices. Although networks and are each depicted as one network it should be appreciated that according to one or more embodiments networks and may each comprise a plurality of interconnected networks.

Storage devices A N B N and or N may be network accessible storage and may be local remote or a combination thereof to server A or B. Storage devices A N B N and or N may utilize a redundant array of inexpensive disks RAID magnetic tape disk a storage area network SAN an internet small computer systems interface iSCSI SAN a Fibre Channel SAN a common Internet File System CIFS network attached storage NAS a network file system NFS optical based storage or other computer accessible storage. Storage devices A N B N and or N may be used for backup or archival purposes.

According to some embodiments client may be a smartphone PDA desktop computer a laptop computer a server another computer or another device coupled via a wireless or wired connection to network . Client may receive data from user input a database a file a web service and or an application programming interface.

Servers A and B may be application servers archival platforms backup servers network storage devices media servers email servers document management platforms enterprise search servers or other devices communicatively coupled to network . Servers A and B may utilize one of storage devices A N B N and or N for the storage of application data backup data or other data. Servers A and B may be hosts such as an application server which may process data traveling between client and a backup platform a backup process and or storage. According to some embodiments servers A and B may be platforms used for backing up and or archiving data.

Encryption driver management module may allow the use of a plurality of encryption drivers on a same unit of storage e.g. a volume . For example encryption driver management module may provides one or more of a non disruptive migration capability between a plurality of encryption drivers an upgrade capability between encryption drivers and operation of a plurality of encryption drivers on a single volume with an ability to specify one or more encryption drivers to be utilized for a portion of data on the volume. Encryption driver management module may use one or more encryption redirection modules .

One or more encryption redirection modules may be used to wrap an encryption driver to determine whether or not a data access request e.g. a read or write request or response should be passed to that driver. In the event a data access request flowing down a stack should be passed to a wrapped encryption driver an encryption redirection module may let the request flow through to the driver. In the event a data access request is not to be handled by a driver the encryption redirection module may redirect the data access request around the driver. According to some embodiments an encryption redirection module may be a shim a small library an object or other executable or interpretable code that may intercept I O Input Output requests to an encryption driver. According to at least one embodiment encryption redirection modules may be placed in a stack above an encryption driver and below an encryption driver. This may intercept I O requests flowing down a stack before the request reaches the driver and may intercept a response to an I O request returning back up a stack.

According to some embodiments some encryption drivers may contain and or be integrated with redirection modules. In such embodiments encryption drivers may contain executable code to redirect I O requests around an encryption driver or allow I O requests to flow through to an encryption driver depending on whether the encryption driver should handle the I O request. In such embodiments where an encryption driver is capable of handling redirection as necessary shims or other code above and or below an encryption driver may not be necessary.

According to some embodiments encryption control module may identify one or more appropriate encryption drivers to handle an I O request. Encryption control module may use encryption indicator module to identify an appropriate encryption driver for data associated with an I O request. According to some embodiments encryption control module may not be necessary and encryption control logic may be implemented in one or more of an encryption driver and an encryption redirection module.

Encryption indicator module may be a bitmap flag or other indicator associated with one or more portions of data. For example a volume may contain a single bitmap indicating a desired encryption driver or provider for the volume. One or more additional bitmaps may correspond to blocks sectors runs of blocks i.e. a contiguous set of blocks runs of sectors or other portions of the volume. The one or more additional bitmaps may be used to indicate a current encryption driver or provider for a particular portion of data.

According to some embodiments an encryption redirection module may be positioned in a stack directly above each encryption driver. An encryption module may also be positioned in a stack directly below each encryption driver. This may manage I O requests flowing up and down a stack of encryption drivers. For example when a read request is received it may be first intercepted by a top level encryption redirection module sitting above a top level encryption driver in a stack of encryption drivers. The top level encryption redirection module may query encryption control module to determine how to handle the read request. Encryption control module may check encryption indicator module to determine an appropriate encryption driver for the read request. Encryption control module may pass data indicating an appropriate encryption driver or an appropriate action to encryption redirection module . If the appropriate encryption driver is the top level encryption driver encryption redirection module may allow the read request to flow through to the top level encryption driver. The top level encryption driver may receive the request and it may be passed on an encryption redirection module located directly beneath the top level encryption driver in the stack. If the appropriate driver is not the top level encryption driver the top encryption redirection module may pass the read request directly to an encryption redirection module below the top level encryption driver bypassing the top level encryption driver. 

In this example this second encryption redirection module may pass the read request down the stack to a second level encryption redirection module sitting directly above a second level encryption driver. The second level encryption redirection module a third encryption redirection module from the top of a stack in this example may determine whether the read request should proceed to the second level encryption driver or should be redirected around the second level encryption driver. According to some embodiments the second level encryption redirection module may receive data from an encryption redirection module higher in a stack or from an encryption driver higher in a stack indicating which encryption driver should handle the request or which action should be taken. For example a top level encryption redirection module may identify the appropriate encryption driver and may pass the information down a stack using side channel communication. This may allow lower level encryption redirection modules and or drivers to receive information indicating which driver should handle the request without the lower level encryption redirection modules performing an additional query to encryption control module . According to some embodiments a lower level encryption redirection module may repeat a query to encryption control module .

When a result to a read request is returned encryption redirection modules may ensure that read results not handled by a particular encryption driver are redirected around the driver. Encryption redirection modules may verify an appropriate driver by querying an encryption control module or by checking an encryption indicator module directly.

According to some embodiments when handling a write request an encryption redirection module may verify an appropriate encryption driver to handle the write request. This may be performed by logic stored in an encryption redirection module in a encryption control module or in another network accessible location. An appropriate encryption driver for a write request may be determined by verifying an encryption indicator for a volume partition disk or other level. For example a write request may be directed towards a block set of contiguous blocks sector and or a set of contiguous sectors. A bitmap for the storage associated with the write request may indicate that the storage is not currently encrypted and or uses encryption driver B. However a bitmap associated with a larger storage set including the storage of the write request e.g. set at the volume disk and or partition level may indicate that the larger storage set e.g. the volume is to be migrated to encryption driver A. The encryption redirection modules may ensure that the write request is performed using the new encryption algorithm encryption driver A. This may be performed by redirecting the write request through encryption driver A and around encryption driver B. An encryption redirection module e.g. a top level encryption redirection module in a stack may set a bitmap associated with storage of the write request to indicate that the storage is encrypted using encryption driver A. By using an indicator set at higher level of storage to indicate what encryption driver should be used for units of storage within that level e.g. sectors within a volume storage may be migrated gradually to a new encryption provider. A write request may not need to first unencrypt a portion of storage because the data is being replaced with new data. This may save additional processing and the migration may be distributed across a longer period of time which may reduce the impact to the system.

According to some embodiments a check may be performed to determine whether any units of storage that require migration remain e.g. any used blocks or sectors remaining using an encryption driver different from a current encryption driver indicated at a volume level . If all units of storage have been migrated from an old encryption driver the old encryption driver and or one or more corresponding shims or encryption redirection modules may be uninstalled. According to some embodiments a tool may be used to facilitate migration to a new encryption driver. For example a tool which unencrypts units of storage encrypted by an old encryption driver and encrypts them using a new encryption driver may be used. This tool may be used to transition a certain percentage of remaining units of storage e.g. 5 or 15 of storage of a volume still encrypted using an old encryption driver after a period of time . This tool may also be used during a period of low system utilization e.g. at night or during weekends to reduce an impact on users.

According to some embodiments encryption redirection modules and or an encryption control module may be used to allow a plurality of different forms of encryption. For example encryption redirection modules may be used to allow encryption at a file level or at disk level. For example configuration of a volume may be changed to use encryption at a disk or volume level however many files of the disk or volume may be encrypted previously at a file level. Encryption redirection modules and or an encryption control module may be used to prevent double encryption i.e. encryption both at the file level and at the disk level to maintain units of storage at a current level of encryption e.g. to prevent units of storage from being transitioned between file encryption and disk encryption and or to migrate between levels of encryption.

Although two levels of encryption drivers are discussed it may be appreciated that multiple levels of encryption drivers may be supported using the techniques discussed herein. It may also be appreciated that encryption drivers may be in any order in a stack and may be re arranged e.g. moved up or down a stack or taken out of or inserted into a stack . Logic may be used e.g. at a control module to track an order of encryption drivers in a stack to facilitate appropriate management of encryption drivers.

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM may be the main memory into which the operating system and application programs may be loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system may be stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit or other storage medium. For example encryption driver management module may be resident in system memory .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . Code to implement the present disclosure may be stored in computer readable storage media such as one or more of system memory fixed disk optical disk or floppy disk . Code to implement the present disclosure may also be received via one or more interfaces and stored in memory. The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 OS X UNIX Linux or another known operating system.

Power manager may monitor a power level of battery . Power manager may provide one or more APIs Application Programming Interfaces to allow determination of a power level of a time window remaining prior to shutdown of computer system a power consumption rate an indicator of whether computer system is on mains e.g. AC Power or battery power and other power related information. According to some embodiments APIs of power manager may be accessible remotely e.g. accessible to a remote backup management module via a network connection . According to some embodiments battery may be an Uninterruptable Power Supply UPS located either local to or remote from computer system . In such embodiments power manager may provide information about a power level of an UPS.

Referring to there is shown an encryption driver management module in accordance with an embodiment of the present disclosure. As illustrated the encryption driver management module may contain one or more components including encryption driver control module encryption driver redirection module s encryption indicator module and error logging and reporting module .

Encryption driver control module may identify one or more appropriate encryption drivers to handle an I O request. Encryption driver control module may use encryption indicator module to identify an appropriate encryption driver for data associated with an I O request. According to some embodiments encryption driver control module may not be necessary and encryption control logic may be implemented in one or more of an encryption driver and an encryption redirection module.

Encryption driver redirection module s may be used to wrap an encryption driver to determine whether or not a data access request e.g. a read or write request or response should be passed to that driver. In the event a data access request flowing down a stack should be passed to a wrapped encryption driver an encryption redirection module may let the request flow through to the driver. In the event a data access request is not to be handled by a driver the encryption redirection module may redirect the data access request around the driver. According to some embodiments an Encryption driver redirection module may be a shim a small library an object or other executable or interpretable code that may intercept I O Input Output requests to an encryption driver. According to at least one embodiment Encryption driver redirection module s may be placed in a stack above an encryption driver and below an encryption driver. This may intercept I O requests flowing down a stack before the request reaches the driver and may intercept a response to an I O request returning back up a stack.

According to some embodiments a single encryption driver redirection module may take the place of an encryption driver in a stack and may instantiate the encryption driver as necessary i.e. if I O is to be routed to that driver and or may pass a request along a stack.

According to some embodiments some encryption drivers may contain and or be integrated with redirection modules. In such embodiments encryption drivers may contain executable code to redirect I O requests around an encryption driver or allow I O requests to flow through to an encryption driver depending on whether the encryption driver should handle the I O request. In such embodiments where an encryption driver is capable of handling redirection as necessary shims or other code above and or below an encryption driver may not be necessary.

Encryption indicator module may be a bitmap flag or other indicator associated with one or more portions of data. For example a volume may contain a single bitmap indicating a desired encryption driver or provider for the volume. One or more additional bitmaps may correspond to blocks sectors runs of blocks i.e. a contiguous set of blocks runs of sectors or other portions of the volume. The one or more additional bitmaps may be used to indicate a current encryption driver or provider for a particular portion of data.

Error logging and reporting module may produce logs reports or other information associated with automatic management of file system encryption drivers.

Referring to there is depicted a method for automatic management of file system encryption drivers for a read request in accordance with an embodiment of the present disclosure. At block the method may begin.

At block one or more encryption drivers may be wrapped with code e.g. shims libraries and or code integrated with or implemented into an encryption driver allowing evaluation of and redirection of I O requests. For example if a new encryption driver is to be installed e.g. an upgrade or a different vendor a shim or library may be installed above and below an old encryption driver in a stack of drivers. The new encryption driver may be installed and may contain code permitting redirection of I O requests and verification of an appropriate encryption driver. Alternatively the new encryption driver in this example may be installed with a shim or encryption redirection module above it and below it in a stack of drivers.

At block a read request may be received at an encryption driver at a top of a stack of encryption drivers. In embodiments in which a top level encryption driver is wrapped using a shim or redirection module the read request may be received by a redirection module.

At block it may be determined whether a read request is for a top level encryption driver. According to some embodiments the top level encryption driver or a shim or encryption redirection module above the top level encryption driver may query to determine an appropriate encryption driver for the read request. A query may be sent to a control module which may verify an indicator to determine an appropriate encryption driver for the read request e.g. a bitmap set at the unit of storage associated with the read request . According to some embodiments the encryption driver or encryption redirection driver may contain control logic e.g. logic for indicating a current level of a driver in a stack in relation to other drivers and or logic for checking an encryption indicator and may query an indicator directly. If the indicator set at the unit of storage associated with the read request e.g. the sector of the read request the block of the read request the run of blocks of the read request etc. indicates that the data is encrypted with the top level encryption driver the method may continue at block . If the indicator is set to another encryption driver or is not set the method may continue at block thereby skipping the top level encryption driver.

At block a read request for data encrypted by the top level driver may be received by the top level encryption driver. The top level encryption driver may send the request down the stack.

At block the read request may be received by a second level driver or according to some embodiments by a shim or encryption redirection module sitting below the top level encryption driver. According to some embodiments between two encryption drivers in a stack there may be two shims or encryption redirection modules e.g. each encryption driver may be between a lower shim and an upper shim so that between two encryption drivers there is a lower shim for the top encryption driver and an upper shim for the bottom encryption driver . A number of shims and or encryption redirection modules may depend on whether such logic is implemented in an encryption driver. Thus a read request handled by a shim above a top level encryption driver or by the top level encryption driver itself may be passed to a lower shim for the top level encryption driver an upper shim of the second level driver the third shim from the top in a stack in this example or the encryption driver itself. The read request may be handled for step at any level above the second level encryption driver or in the second level encryption driver itself if identification and redirection logic has been implemented there.

According to some embodiments a top level encryption driver or a shim or encryption redirection module above a top level driver may pass data to a next level to indicate an appropriate action or an appropriate encryption driver to handle a request. According to some embodiments a lower level encryption driver or a shim or encryption redirection module above a lower level encryption driver may query a control module or encryption indicator to determine an appropriate encryption driver.

At block it may be determined if the read request is for the second level driver. If the read request is for the second level driver the method may continue at block . If the read request is not for the second level driver the read request may continue at block .

At block the read request may be sent to the second level driver. The second level driver may pass the read request down the stack to a shim below the second level driver or to a block level device driver for processing.

At block results may be passed up a stack of drivers to be returned to a requestor. Results may be returned following a reverse path up a stack of encryption drivers which may bypass inappropriate encryption drivers and may allow the results to reach one or more appropriate encryption drivers.

Referring to there is depicted a method for automatic management of file system encryption drivers for a write request in accordance with an embodiment of the present disclosure. At block the method may begin.

At block one or more encryption drivers may be wrapped with code e.g. shims libraries and or code integrated with or implemented into an encryption driver allowing evaluation of and redirection of I O requests. For example if a new encryption driver is to be installed e.g. an upgrade or a different vendor a shim or library may be installed above and below an old encryption driver in a stack of drivers. The new encryption driver may be installed and may contain code permitting redirection of I O requests and verification of an appropriate encryption driver. Alternatively the new encryption driver in this example may be installed with a shim or encryption redirection module above it and below it in a stack of drivers.

At block a write request may be received at an encryption driver at a top of a stack of encryption drivers. In embodiments in which a top level encryption driver is wrapped using a shim or redirection module the write request may be received by a redirection module. The appropriate encryption to be used may be determined by checking a control module or an indicator set at a high level e.g. a bitmap set a volume level or disk level which may indicate a desired encryption driver. This indicator may be separate from an indicator flag or bitmap associated with the unit s of storage to be used by the write request e.g. blocks or sectors . For example a write request may be received for a sector currently encrypted with an old encryption driver as indicated by a sector level bitmap. However a volume or disk level bitmap may indicate a new encryption driver.

At block an encryption bit flag or other indicator may be set to indicate the encryption used for the write request e.g. the encryption driver indicated at a high level or the new encryption driver in this example .

At block if the write request is for the top level driver the method may continue at block . If the write request should be handled by a next level driver the method may continue at block .

At block a write request for data to be encrypted by the top level driver may be received by the top level encryption driver. The top level encryption driver encrypt the data and may send the request down the stack.

At block the write request may be received by a second level driver or according to some embodiments by a shim or encryption redirection module sitting below the top level encryption driver. As discussed above logic may be implemented at a shim level or in the encryption driver itself. The sequence up or down a stack may depend on the number of shims in a stack.

At block it may be determined whether the write request is to be handled by the second level driver or whether the second level driver is to be bypassed. If the write request is to be handled by the second level driver the method may continue at block . If the second level driver is to be bypassed the method may continue at block .

At block results of the write request may be returned. Results may be returned following a reverse path up a stack of encryption drivers which may bypass inappropriate encryption drivers and may allow the results to reach one or more appropriate encryption drivers.

It may be appreciated that encryption drivers may be stacked in any order and the order may change e.g. an old encryption driver on a top of the stack or a new encryption driver on top of the stack . Logic may be implemented at one or more levels or external to a stack tracking an order of the stack and determining redirection necessary so that I O bypasses inappropriate encryption drivers and passes to appropriate encryption drivers.

Also illustrated is optional control module . As discussed above control logic may be implemented in one or more of the shims and or the encryption drivers. Dashed arrows indicate that control module may be accessed from one or more levels and may even be optional. As discussed above results of an initial check of a encryption driver by a top level shim e.g. upper shim A may be passed by side channel communication down a stack or by other communication interfaces e.g. to lower shim A so that further checks may not be necessary.

Although shims are illustrated as discussed above in some embodiments logic of some shims may be combined and or incorporated into an encryption driver. Additionally in some embodiments a single shim may replace an encryption driver in a stack and may instantiate the encryption driver as necessary. According to some embodiments a single shim may replace multiple drivers in a stack and may instantiate an appropriate encryption driver or encryption drivers as necessary.

As illustrated the read request of is for data encrypted with Encryption Driver B . Thus the read request passes through Encryption Driver B on both the request left side arrows and the results return paths right side arrows . Encryption Driver A is bypassed on both the request and return paths down and up the stack.

As illustrated in the data is to be encrypted by Encryption Driver A . Thus the write request passes through Encryption Driver A on both the request left side arrows and the results return paths right side arrows . Encryption Driver B is bypassed on both the request and return paths down and up the stack. Encryption indicator may be a volume disk or other high level storage indicator mapping an appropriate encryption driver for the entire volume or disk. This may be an indicator showing a desired encryption driver to transition to. Encryption indicator may be a current encryption driver used by a portion of storage e.g. a sector or consecutive blocks . Upper Shim A may check encryption indicator to determine which driver to use for the write request encryption driver A in this example and may set encryption indicator to indicate the encryption driver used encryption driver A in this example .

According to some embodiments all drivers in a stack may be managed and a driver inserted in a stack may be bypassed if not known.

At this point it should be noted that automatic management of file system encryption drivers in accordance with the present disclosure as described above typically involves the processing of input data and the generation of output data to some extent. This input data processing and output data generation may be implemented in hardware or software. For example specific electronic components may be employed in an encryption driver management module or similar or related circuitry for implementing the functions associated with automatic management of file system encryption drivers in accordance with the present disclosure as described above. Alternatively one or more processors operating in accordance with instructions may implement the functions associated with automatic management of file system encryption drivers in accordance with the present disclosure as described above. If such is the case it is within the scope of the present disclosure that such instructions may be stored on one or more processor readable storage media e.g. a magnetic disk or other storage medium or transmitted to one or more processors via one or more signals embodied in one or more carrier waves.

The present disclosure is not to be limited in scope by the specific embodiments described herein. Indeed other various embodiments of and modifications to the present disclosure in addition to those described herein will be apparent to those of ordinary skill in the art from the foregoing description and accompanying drawings. Thus such other embodiments and modifications are intended to fall within the scope of the present disclosure. Further although the present disclosure has been described herein in the context of a particular implementation in a particular environment for a particular purpose those of ordinary skill in the art will recognize that its usefulness is not limited thereto and that the present disclosure may be beneficially implemented in any number of environments for any number of purposes. Accordingly the claims set forth below should be construed in view of the full breadth and spirit of the present disclosure as described herein.

