---

title: Collection of performance information for search queries executed in a tiered architecture
abstract: An execute request is sent to a search component. The execute request specifies a search query. Subsequently, an execute response is received from the search component. The execute response comprising latency data and one or more properties of query results. The latency data specifies an amount of time consumed by the search component to process the execute request. The query results are content items that satisfy the search query. A record object model latency request is sent to the search component. The record object model latency request specifies search performance information based on the latency data. A record interface latency request is sent to the search component. The record interface latency request specifies interface performance information based on an amount of time consumed by the first component to process the search request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08239374&OS=08239374&RS=08239374
owner: Microsoft Corporation
number: 08239374
owner_city: Redmond
owner_country: US
publication_date: 20100118
---
People are generating an ever increasing number of documents. As the number of documents grows it has become increasing difficult for people to find a relevant document amid the plethora of available documents. Consequently search systems that identify relevant documents have been increasingly important. However it is insufficient for a search system to merely identify relevant documents the search system should identify relevant documents in a timely manner. To improve the efficiency of a search system the search system needs to collect information regarding the performance of the search system.

This summary is provided to introduce a selection of concepts. These concepts are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is this summary intended as an aid in determining the scope of the claimed subject matter.

In one aspect a method of collecting performance information for search queries comprises receiving by a first component a search request. The search request specifies a search query. The first component is provided by a first computing system. The method also comprises after receiving the search request sending by the first component an execute request to a second component. The execute request is a web services request to invoke an execute method of a web Application Programming Interface API provided by the second component. The execute request specifies the search query. In addition the method comprises after sending the execute request receiving by the first component an execute response from the second component. The execute response is a web services response that is responsive to the execute request. The execute response comprises latency data and data regarding query results. The latency data specifies an amount of time consumed by the second component to process the execute request. The query results are content items that satisfy the search query. The method also comprises after receiving the execute response generating by the first component user interface data. The user interface data represents a user interface element having contents that depend on the query results. In addition the method comprises sending by the first component a record object model latency request to the second component. The record object model latency request is a web services request to invoke a record object model latency method of the web API. The record object model latency request specifies search performance information based on the latency data. The method also comprises sending by the first component a record interface latency request to the second component. The record interface latency request is a web services request to invoke a record interface latency method of the web API. The record interface latency request specifies interface performance information based on an amount of time consumed by the first component to process the search request.

In another aspect a computing device comprises a processing system and a data storage system storing software instructions that when executed by the processing system cause the computing device to receive an execute request from a front end component. The execute request is a web services request to invoke an execute method of a web API provided by the computing device. The execute request specifies a search query. After receiving the execute request the software instructions cause the computing device to send an execute response to the front end component. The execute response is a web services response that is responsive to the execute request. The execute response comprises latency data and one or more properties of query results. The latency data specifies an amount of time consumed by the computing device to process the execute request. The query results are content items that satisfy the search query. The software instructions also cause the computing device to receive a record object model latency request from the front end component. The record object model latency request is a web services request to invoke a record object model latency method of the web API. The record object model latency request specifies search performance information based on the latency data. The software instructions also cause the computing device to receive a record interface latency request from the front end component. The record interface latency request is a web services request to invoke a record interface latency method of the web API. The record interface latency request specifies interface performance information based on an amount of time consumed by the front end component to process a search request that specifies the search query.

In yet another aspect a computer readable data storage medium comprises software instructions that when executed cause a computing device to provide a collection of one or more websites to client computing systems. The software instructions when executed also cause the computing device to receive a search request through a web page in one of the websites. The search request specifies a search query. After receiving the search request the software instructions when executed cause the computing device to send an execute request to a search component provided by another computing device. The execute request is a web services request to invoke an execute method of a web API provided by the search component. The execute request specifies the search query. The software instructions when executed also cause the computing device to send a query suggestions request to the search component. The query suggestions request is a web services request to invoke a query suggestions method of the web API. The query suggestions request specifies one or more properties describing the search query. The software instructions when executed also cause the computing device to receive a query suggestions response from the search component. The query suggestions response is a web services response that is responsive to the query suggestions request. The query suggestions response specifies a set of one or more query suggestions. Each query suggestion in the set of query suggestions is a search query related to the search query. After sending the execute request the software instructions when executed cause the computing device to receive an execute response from the search component. The execute response is a web services response that is responsive to the execute request. The execute response comprises latency data and one or more properties of query results. The latency data specifies an amount of time consumed by the search component to process the execute request an amount of time consumed by intermediate processing of the search query at the search component and an amount of time consumed to execute database operations for retrieving the query results. The query results are content items that satisfy the search query. After receiving the execute response the software instructions when executed cause the computing device to generate a search results page containing at least one of the properties of a given content item. The given content item is one of the query results. The software instructions when executed also cause the computing device to send a record object model latency request to the search component. The record object model latency request is a web services request to invoke a record object model latency method of the web API. The record object model latency request specifies search performance information based on the latency data and based on latency data specified in execute responses for other search requests received within a given time period. The software instructions when executed also cause the computing device to receive a record object model latency response from the search component. The record object model latency response is a web services response that is responsive to the record object model latency request. The record object model latency response specifies whether verbose query monitoring is turned on at the search component. The software instructions when executed also cause the computing device to send a record interface latency request to the search component. The record interface latency request is a web services request to invoke a record interface latency method of the web API. The record interface latency request specifies interface performance information based on amounts of time consumed by the computing device to process the search request and other search requests received in the given time period. The software instructions when executed also cause the computing device to receive a record interface latency response from the search component. The record interface latency response is a web services response that is responsive to the record interface latency request. The record interface latency response specifies whether verbose query monitoring is turned on at the search component.

The system includes a client computing system . As used herein a computing system is a system comprising one or more computing devices. A computing device is a physical device that computes information. In various embodiments the client computing system can comprise various types of computing devices. For example the client computing system can comprise a desktop computer a laptop computer a handheld computer a mobile telephone a television set top box a computing device integrated into a vehicle a game console a standalone server device a server blade device a mainframe computing device or another type of computing device.

Furthermore the system includes a network . The network is a collection of computing devices and links that facilitate communication among the computing devices. The client computing system is able to communicate with at least some of the computing devices in the network . In various embodiments the network includes various types of computing devices. For example the network can include routers switches mobile access points bridges hubs intrusion detection devices storage devices standalone server devices blade server devices sensors desktop computers laptop computers handheld computers mobile telephones and other types of computing devices. In various embodiments the network includes various types of links For example the network can include wired and or wireless links Furthermore in various embodiments the network is implemented at various scales. For example the network can be implemented as one or more local area networks LANs metropolitan area networks subnets wide area networks such as the Internet or can be implemented at another scale.

The network includes computing devices A N collectively computing devices . In various embodiments the computing devices can be one or more types of computing devices. For example one or more of the computing devices can be standalone server devices blade server devices personal computers mainframe computers and or other types of computing devices. In some embodiments the computing devices are operated by a single entity such as a corporation. In other embodiments the computing devices are operated by multiple entities. Furthermore in some embodiments the computing devices are physically co located. For example in some embodiments the computing devices are physically located at a server farm or a data center. In other embodiments at least some of the computing devices are geographically dispersed.

The computing devices operate to provide a set of components. As used herein a component is a functional element of a system. In various embodiments the computing devices operate to provide various components. For example in the embodiment illustrated in the example the set of components includes a data source component a search component and a front end component . In other embodiments the computing devices operate to provide components other than those illustrated in the example of .

In various embodiments various ones of the components can be provided by various ones of the computing devices . For example in some embodiments each of the computing devices provides one of the components. In other embodiments a single one of the computing devices provides two or more of the components.

Furthermore in various embodiments the computing devices operate in various ways to provide the components. For example in some embodiments the computing devices comprise a data storage system. The data storage system comprises one or more computer readable data storage media. As used herein a computer readable data storage medium is a device or article of manufacture that stores data. The data storage system stores software instructions that when executed by processing systems in the computing devices cause the computing devices to provide the components. In other embodiments one or more of the computing devices comprise application specific integrated circuits ASICs that cause the computing devices to provide the components.

The components form a tiered architecture. A first tier includes one or more front end components. A second tier includes one or more search components. A third tier includes one or more data source components. Each of the data source components maintains one or more databases containing content items. The search components interact with the data source components to generate indexes over the content items in the databases. Client computing systems such as the client computing system send search requests to the front end components. The search requests specify search queries. In response to the search requests the front end components use web services requests to instruct the search components to execute the search queries.

In response to the web services requests the search components use the indexes to identify query results. The query results are content items that are in the databases and that satisfy the search queries. The search components can then interact with the data source components to retrieve data regarding the query results. For example the search components can interact with the data source components to retrieve one or more properties of query results. The search components send web services responses back to the front end components. The web services responses contain data regarding the query results. For example the web services responses can contain Uniform Resource Identifier URIs of the query results.

The front end components use the data in the web services responses to generate user interface data. The user interface data represent user interface elements having contents that are dependent on the query results. For example a front end component can generate user interface data that represents a user interface element that contains one or more properties of the query results. In another example a front end component can generate user interface data that represents a user interface element that indicates how many content items satisfy the search queries. The front end components then send the user interface data to the client computing systems. As used herein a user interface elements is a portion of a user interface or a complete user interface.

In addition to including data regarding the query results the web services responses contain latency data. The latency data indicate amounts of time consumed by the search components to execute the search queries. In some embodiments the web services responses also include additional timing information. The additional timing information can include information about how much time was consumed to perform database operations during execution of the search queries and information about how much time was consumed performing intermediate operations during execution of the search queries. The front end components collect the latency data. The front end components periodically send additional web services requests to the search components to record search performance information based on the latency data. In embodiments where the web services responses include additional timing information the additional web services requests are further based on the additional timing information.

The front end components also send web services requests to the search components to record interface performance information. The interface performance information is based on data indicating amounts of time consumed by the front end components to process the search requests. The search performance information and the interface performance information can be used to evaluate and improve the efficiency of search requests.

The tiered architecture includes a data source component a search component and a front end component . In various embodiments the data source component the search component the front end component and the performance evaluation component are provided by various ones of the computing devices illustrated in the example of .

The data source component manages a database . The database stores content items. A content item is an individually identifiable set of data. The content items belong to one or more types. For example in some embodiments the database stores e mail messages task list items calendar appointments contacts customer relations management data documents and or other types of data. In various embodiments the database is implemented in various ways. For example in some embodiments the database is implemented as a general purpose relational database. In other embodiments the database is implemented as an Online Analytics Processing OLAP cube. In other embodiments the data source component maintains a plurality of databases that contain content items.

Furthermore the data source component provides a set of services that enable storage and retrieval of content items in the database . In various embodiments the data source component provides various services. For example in some embodiments the data source component provides an e mail service. The e mail service listens for incoming e mail messages and stores the incoming e mail messages into the database . In this example the e mail service also processes requests from client applications to retrieve e mail messages stored in the database . In another example the data source component provides a document management service. The document management service stores documents in the database and allows components such as the search component to check out and check in the documents. In yet another example the data source component is a FAST data source provided by MICROSOFT Corporation.

The search component provides a web Application Programming Interface API . A web API is an API that is accessible over a network and is executed on a computing system that hosts services. The web API includes a set of methods. In various embodiments the web API includes various methods. For example in some embodiments the web API includes a get search service application information method a record query error event method a get properties method a highlight string value method an execute method a get top query strings for URL method a record user interface UI query done event method a get scopes method a record object model OM query done event method a record click method a query suggestions method a get click frequencies method and a get search terms method. These methods and others are described herein. In other embodiments the web API includes more or fewer methods.

The search component also includes an index . The index comprises a set of entries. Each entry maps a term to one or more content items to which the term is applicable. In other words the index is an inverted index. For example an entry in the index can map the term blizzard to content items that contain the term blizzard. In another example an entry in the index can map the term 2009 to content items created in the year 2009. In this other example the content items created in the year 2009 do not necessarily include the term 2009. In some embodiments the search component stores the index in a file system.

In addition the search component includes a search application . The search application generates the index . To generate the index the search application communicates with the data source component to retrieve content items stored in the database . When the search application retrieves a content item the search application identifies terms that are applicable to the content item. In various embodiments the search application identifies terms that are applicable to the content item in various ways. For example the search application can identify each term contained in the content item and or use metadata retrieved with the content item to identify terms applicable to the content item. The search application then updates the index such that the index contains entries that map the identified terms to the content item.

The search application also receives requests from the web API to process search queries. To process a search query the search application identifies entries in the index that are associated with terms in the search query. The set of query results for the search query is the intersection set of the content items identified by the identified entries. For example the search query can include the terms Jones Middle and School. In this example one entry in the index maps the term Jones to content items A B and C another entry in the index maps the term Middle to content items B C and D and yet another entry in the index maps the term School to content items B C and E. In this example the content items B and C are the query results for the search query.

After identifying the query results for the search query the search application sorts the query results. In various embodiments the search application sorts the query results in various ways. For example in some embodiments the search application sorts the query results based on relevance to the search query. In other embodiments the search application sorts the query results based on date of creation. After sorting the query results the search application returns the sorted query results to the web API .

The front end component provides a collection of one or more websites to client computing systems such as the client computing system . A website is a collection of network accessible resources. The network accessible resources can include web pages scripts AJAX resources documents and other types of resources. A client computing system accesses a resource in the collection of websites by sending requests for the resources to the front end component. When the front end component receives a request for a resource from a client computing system the front end component processes the request and provides a response to the client computing system.

The front end component processes requests for different resources in different ways. For example the front end component can receive a request for a static web page. In this example the front end component retrieves an HTML document representing the static web page and sends a response containing the HTML document. In another example the front end component receives a request for a dynamically generated web page. In this example the front end component processes a script or other set of instructions to generate the web page. As part of processing the script the front end component can send a web services request to the web API and receive a web services response from the web API . A web services request is a message instructing a computing system to remotely invoke a method of a web accessible API. A web services response is a message containing data representing the results of invoking a method of a web accessible API.

The front end component receives search requests from client computing systems through web pages in the websites provided by the front end component . In various embodiments the web pages receive search requests in various ways. For example in some embodiments the web pages include conventional HTML forms that receive search requests. In other embodiments the web pages include search related web parts that facilitate receiving search requests. A web part is a reusable component that contains or generates Web based content such as XML HTML and scripting code. A web part has a standard property schema that displays that content in a cohesive unit on a Web page.

The search requests specify one or more search queries. In various embodiments search requests are formatted in various ways. For example in some embodiments a search request is an HTTP request that specifies a search query in a URL of a requested resource. In another example a search request is an HTTP POST or PUT request that contains a search query. In yet another example a search request is a SOAP request containing a search query.

When the front end component receives a search request the front end component sends an execute request to the web API . The execute request is a web services request to invoke an execute method of the web API . The execute request specifies the search query. When invoked the execute method of the web API causes the search application to identify query results for the search query and to retrieve or generate data regarding the query results from the data source component . The web API then sends an execute response to the front end component . The execute response is a web services response that is responsive to the execute request. The execute response contains the data regarding query results for the search query. For example the execute response can contain one or more properties such as unique identifiers of query results for the search query.

In addition to the data regarding the query results the execute response contains latency data. The latency data specifies the amount of time consumed by the search component to process the execute request. In other words the latency data specifies the amount of time between the time when the search component received the execute request and the time when the search component sent the corresponding execute response. For example the execute response can specify that the search component consumed 99 milliseconds to process the execute request.

Furthermore after the front end component receives the execute response the front end component sends a record object model OM latency request to the web API . The record OM latency request is a web services request to invoke a record OM latency method of the web API . The record OM latency request includes search performance information based on the latency data specified in the execute response. In various instances the latency data is aggregated with latency data from one or more other execute responses to form the search performance information. In other instances the search performance information individually includes the latency data. When the web API receives the record OM latency request the web API records the search performance information. The record OM latency request includes the term OM because the Web API is an object model i.e. an object oriented interface to some service or system .

After the front end component receives the execute response the front end component generates user interface data and sends the user interface data to the client computing system that sent the search request e.g. the client computing system . The user interface data represents a user interface element having contents that depend on the query results. For example the user interface data can represent a user interface element that contains at least one returned property for at least a given content item. The given content item is one of the query results.

In various embodiments the user interface data represents various types of user interface elements in various ways. For example in some embodiments the user interface data is a HTML document representing a search results page. The search results page can include one or more search related web parts. In another example the user interface data is an XML document. In this other example a client computing system provides the XML document to a search related web part in a web page through which the search request was submitted. The search related web part processes the XML document to display data regarding query results on the web page.

In addition after the front end component sends the user interface data to the client computing system the front end component sends a record user interface UI latency request to the web API . The record UI latency request is a web services request to invoke a record UI latency method of the web API . The record UI latency request specifies an amount of time consumed by the front end component to process the search request from the client computing system. The amount of time consumed by the front end component to process the search request is the amount of time between the time that the front end component receives the search request from the client computing system and the time that the front end component sends the user interface data to the client computing system. When the web API receives the record UI latency request the web API records the amount of time consumed by the front end component to process the search request.

In addition the front end component provides resources that allow users of client computing systems to evaluate the performance of the system in processing search requests. For example the front end component can provide resources that allow a user to view aggregate or detailed response times for search requests. Furthermore the front end component provides resources that allow users of client computing systems to evaluate how the system is being used. For example the front end component provides a resource that allows a user to view frequencies with which particular content items are selected.

As mentioned above the web API in some embodiments includes a get search service application information method a record query error event method a get properties method a highlight string value method an execute method a get top query strings for URL method a record UI query done event method a get scopes method a record OM query done event method a record web part query done event method a record click method a query suggestions method a get click frequencies method and a get search terms method. The front end component can perform a wide variety of operations using web services requests to invoke these methods of the web API . One example operation is illustrated in the example of . Each of these methods of the web API is now discussed in detail.

The web API includes a get search service application information method. The search component invokes the get search service application information method when the search component receives a get search service application information request from the front end component . The get search service application information request is a web services request to invoke the get search service application information method. The front end component uses the get search service application information request to get information about the search application .

In various embodiments the get search service application information request is formatted in various ways. For example in some embodiments the get search service application information request is a SOAP request comprising XML elements. In some embodiments the XML elements conform to the following schema 

When the search component invokes the get search service application information method the web API generates a get search service application information response. The get search service application information response is a web services response that is responsive to the get search service application information request. The get search service application information response contains properties configured for the search application .

In various embodiments the get search service application information response contains various properties configured for the search application . For example in some embodiments the get search service application information response includes a query suggestions enabled property a query logging enabled property and a property bag property. The query suggestions enabled property specifies whether query suggestions are turned on for the search application . The query logging enabled property specifies whether query logging is enabled for the search application . The property bag property contains configuration settings applicable when the data source component is a FAST data source. The configuration settings include a FASTSearchContextProperties setting a FASTSearchAdminServiceAuthenticationUser setting a FASTSearchAdminServiceLocation setting a FASTSearchResourceStoreLocation setting a FASTSearchQueryServiceLocations setting a FASTSearchContextCacheTimeout setting and a FASTSearchDisableUserContext setting. The FASTSearchContextProperties setting is a comma separated string of user specific properties that the search component uses when allowing a site administrator to define a context to associate with featured content best bets promotions and demotions. Featured content is an indexed content item that a site administrator assigns to a keyword to promote that content item in query results. A best bet is a URL that a site collection administrator assigns to a keyword as being relevant for the keyword. The FASTSearchAdminServiceAuthenticationUser setting is a user name that the search component uses for authentication and authorization of operations on the site administration and central administration services. The FASTSearchAdminServiceLocation setting is a host name and port number which the search component uses to access the FAST data source for SHAREPOINT administrative services except the resource store service. The FASTSearchResourceStoreLocation is a host name and port number that the search component uses to access the FAST data source for the SHAREPOINT resource store service. The FASTSearchQueryServiceLocations setting is a location of one or more query services the search component accesses to get query results. The FASTSearchContextCacheTimeout setting is a timeout period the front end component uses to cache values read in the FASTSearchContextProperties setting. The FASTSearchDisableUserContext setting indicates whether the front end component submits values for the FASTSearchContextProperties setting in UserContextData when querying.

In various embodiments the get search service application information response is formatted in various ways. For example in some embodiments the get search service application information response is formatted as a SOAP response comprising XML elements. In some embodiments the XML elements conform to the following schema 

The web API also includes a record query error event method. The search component invokes the record query error event method when the search component receives a record query error event request. The record query error event is a web services request to invoke the record query error method. The front end component uses the record query error event request to inform the search component of errors that occurred during the processing of search queries in the front end component within a given time period. In various embodiments the record query error event request specifies information regarding errors occurring within time periods having various lengths. For example in some embodiments the record query error event request specifies information regarding errors occurring within a sixty second time period. In other embodiments the record request error event request specifies information regarding errors occurring within a thirty second time period.

In various embodiments the record query error event request is formatted in various ways. For example in some embodiments the record query error event request is formatted as a SOAP request comprising XML elements. The XML elements conform to the following schema 

The buffer element belongs to the QueryErrorDataBuffer type. Elements belonging to the QueryErrorDataBuffer type conform to the following schema 

Elements conforming to the QueryErrorDataBuffer type include a VerboseQueryTimings element. The VerboseQueryTimings element specifies a list of information for errors that occurred during processing of search queries at the front end component within the given time period.

The VerboseQueryTimings element belongs to the ArrayOfVerboseQueryErrorDataBuffer type. Elements belonging to the ArrayOfVerboseQueryErrorDataBuffer type conform to the following schema 

The VerboseQueryErrorDataBuffer elements belong to the VerboseQueryErrorDataBuffer type. Elements belonging to the VerboseQueryErrorDataBuffer type conform to the following XML schema 

When the search component invokes the record query error event method in response to receiving a record query error event request the web API generates a record query error event response. The record query error event response is a web services response that is responsive to the record query error event request. The record query error event response indicates whether verbose query monitoring is turned on for the search application . When verbose query monitoring is turned on the search application the search application stores more performance information regarding search queries than when verbose query monitoring is turned off on the search application .

In various embodiments the record query error event response is formatted in various ways. For example in some embodiments the record query error event response is formatted as a SOAP response comprising XML elements. The XML elements conform to the following schema 

The web API also includes a get properties method. The search component invokes the get properties method when the search component receives a get properties request. The get properties request is a web services request to invoke the get properties method. The front end component uses the get properties request to retrieve information about managed properties of the search application . A managed property is a specific property that is part of a metadata schema. A managed property can be exposed for use in search queries. The managed properties of the search application are properties of content items that can be returned in search queries sent to the search application .

In various embodiments the search application has various managed properties. For example a default set of managed properties includes workId rank title author size path description write site name collapsing status hit highlighted summary hit highlighted properties content class picture thumbnail URL and isDocument. In this example the hit highlighted summary is a string containing a set of excerpts from a content item that is relevant to a search query.

In various embodiments the get properties request is formatted in various ways. For example in some embodiments the get properties request is formatted as a SOAP request comprising XML elements. The XML elements conform to the following schema 

When the search component invokes the get properties method in response to receiving a get properties request the web API generates a get properties response. The get properties response is a web services response that is responsive to the get properties request. The get properties response contains information about managed properties of the search application .

In various embodiments the get properties response is formatted in various ways. For example in some embodiments the get properties response is formatted as a SOAP response comprising XML elements. The XML elements conform to the following schema 

The GetPropertiesResult element belongs to the ArrayOfPropertyInformation type. Elements belonging to the ArrayOfPropertyInformation type conform to the following schema 

The PropertyInformation elements belong to a PropertyInformation type. Elements belonging to the PropertyInformation type conform to the following schema 

The web API also includes a highlight string value method. The search component invokes the highlight string value method when the search component receives a highlight string value request. The highlight string value request is a web services request to invoke a highlight string value method. The front end component uses the highlight string value request to highlight each occurrence of specified query terms in a specified string value. In various embodiments the specified query terms can be highlighted in various ways. For example in some embodiments the specified query terms can be highlighted by enclosing the specified query terms in an open and close tag to make the specified query terms bold.

In various embodiments the highlight string value request is formatted in various ways. For example in some embodiments the highlight string value request is formatted as a SOAP request comprising XML elements. The XML elements conform to the following schema 

When the search component invokes the highlight string value method in response to receiving a highlight string value request the web API generates a highlight string value response. The highlight string value response is a web services response that is responsive to the highlight string value request. The highlight string value response contains the string specified in the highlight string value request but with the query terms highlighted. In some embodiments the search component uses one or more word breaker systems to identify the query terms and the tokens in the specified string.

In various embodiments the highlight string value response is formatted in various ways. For example in some embodiments the highlight string value response is formatted as a SOAP response comprising XML elements. The XML elements conform to the following schema 

The web API also includes an execute method. The search component invokes the execute method when the search component receives an execute request. The execute request is a web services request to invoke the execute method. The front end component uses the execute method to execute a search query. The execute request specifies the search query as a set of properties. The properties can specify query terms how to sort the query results which properties of the query results to return a search scope and or other properties.

In various embodiments the execute request is formatted in various ways. For example in some embodiments the execute request is formatted as a SOAP request comprising XML elements. In some embodiments the XML elements conform to the following schema 

The properties element belongs to a KeywordQueryProperties type or a FullTextSqlQueryProperties type. The KeywordQueryProperties type and the FullTextSqlQueryProperties type extend the QueryProperties type. When the properties element belongs to the KeywordQueryProperties type the properties element contains information about a keyword query search query. When the properties element belongs to the FullTextSqlQueryProperties type the properties element contains information about a full text Structured Query Language SQL search query.

The AlertInfo element specifies a type of search alert that the search component is to provide to the front end component when a content item responsive to the search query is discovered modified or otherwise changed. The AuthenticationInfo element specifies a type of search security descriptor used for security trimming. The CorrelationId elements specifies a globally unique identifier GUID used to log information for a search query. The EnableNicknames element specifies whether exact tokens in the query string are used to find crawled content items or if nicknames of the tokens are considered. The EnablePhonetic element specifies whether phonetic forms of tokens in the query string are to be used to locate crawled content items. The EnableStemming element specifies whether inflectional forms of tokens in the query string are to be used to locate crawled content items. The HighlightedSentenceCount element specifies in multiples of sixty five characters the maximum length of the HitHighlightedSummary property of query results. The Hint property specifies whether the search component is to use a metadata index or a full text index catalog when processing the search query. A metadata index is a data structure on the data source component that stores properties that are associated with each content item and attributes of those properties. A full text index catalog is a collection of full text index components and other files that are organized in a specific directory structure and contain the data that is needed to perform search queries e.g. the index . The HitHighlightedProperties element specifies a list of properties that the search component includes in the hit highlighted properties for each query result. The IgnoreAllNoiseQuery element specifies how the search component is to respond to the search query when the search query contains only noise words. A noise word is a language specific token that is not indexed and is ignored in a query. The Locale element specifies a language of the query string as a locale identifier LCID . The PagingCookie element specifies a client side state cookie. The PartitionId element specifies a GUID of a search partition used for the search query. The PersonalizationData element specifies a unique identifier for the current user on whose behalf the search query is executed. The QueryText element specifies the query string for the search query. The query string contains one or more tokens i.e. query terms . The ResultTypes element specifies a type of query results to be returned for the search query. The ResultsProvider element specifies a data source component used for the search query. The RowLimit element specifies the number of query results that the front end component wants to receive starting at the index specified in the StartRow element. The Sid element specifies a security descriptor for the user on whose behalf the search query is executed. The SiteId element specifies a site identifier of a site used by the search component to identify the context of the search query. The StartRow element specifies a zero based index of the first query result in the list of query results to be returned by the search component . The Timeout element specifies a maximum time in milliseconds that the search component spends in executing the search query. The TotalRowsExactMinimum element specifies a total number of query results starting at the index specified in the StartRow element up until the search component returns the exact count in the TotalRows element in the ResultTable element. The TrimDuplicates element specifies whether duplicate query results are removed by the search component before sorting selecting and sending the query results. The UrlZone element specifies a zone used for alternate access mapping for the search query.

In this example the KeywordQueryProperties type extends the QueryProperties type. In addition to the elements defined in the QueryProperties type elements belonging to the KeywordQueryProperties type are allowed to include a CollapseNum element a CollapseOn element a ContextGroupID element an EnableFQL element an EnableRefinement element an EnableSpellCheck element an EnableUrlSmashing element a Filter element a HiddenConstraintsElement element a MaxShallowRefinementHits element a RefinementFilters element a RefinementTokens element a Refiners element a Resubmit Flags element a ResultView element a SelectProperties element a SimilarTo element a SimilarType element a SortBy element a SortList element a SortSimilar element a TimeZone element and a UserContextData element. Each of these elements aside from the EnableUrlSmashing element the HiddenConstraints element the SelectProperties element the SortList element and the TimeZone element are only applicable when the data source component is a FAST data source. The EnableFQL element the EnableRefinement element the Filter element the RefinementTokens element the ResultView element and the SortBy element are reserved. The ContextGroupID element specifies an identifier used to group keywords used for matching best bets and featured content to the search query. The EnableSpellCheck element specifies how the search component suggests a different spelling of the search query. The EnableUrlSmashing element specifies whether the search component combines the tokens of the query string to form a query result with a URL formed by combining the tokens. The HiddenConstraints element specifies additional query terms that the search component appends to the query text element. The MaxShallowRefinementHits element specifies a number of results to be used to calculate refinement results. The MaxShallowRefinementHits element is only applied to refiners that are specified to have shallow refinement. The RefinementFilters element specifies a list of refinement tokens for drilldown into query results. The Refiners element specifies refiners. A refiner is a configuration that is used for query refinement and is associated with one managed property. The ResubmitFlags element specifies how the search component behaves if no query results are returned for the search query. The SelectProperties element specifies a list of managed properties that the search component returns for each query result. The SimilarTo element specifies a document vector used for similarity comparison. The document vector indicates the most important terms in a query result and a corresponding weight. The SimilarType element specifies how the search component transforms the search query when the SimilarTo element is set. The SortList element specifies a list of properties to sort the query results by. The SortSimilar element specifies sorting of query results based on similarity of the query results. The TimeZone element specifies a time zone of a current process. The UserContextData element specifies user context data.

When the search component invokes the execute method in response to receiving an execute request the web API generates an execute response. The execute response is a web services response that is responsive to the execute request. The execute response contains the requested properties of the query results for the search query. The requested properties of the query results are sorted according to the order specified in the execute request. In addition the execute response specifies an amount of time consumed by the search component to process the execute request.

In various embodiments the execute response includes various additional properties. For example in some embodiments the execute response includes a database time property a definition property an elapsed time property an ignored noise words property a keyword information property a query machine property a query modification property an intermediate processing time property a query terms property a spelling suggestion property and an array of result tables. The database time property indicates an amount of time consumed to execute database operations for retrieving the query results. The database operations are operations performed by the search component to retrieve properties of query results from the data source component . The definition property indicates an array of extracted definitions for the search query. An extracted definition is a definition that is obtained by an index server during a crawl to identify if any sentences in the content items match a pattern defining a term. The elapsed time property indicates an amount of time consumed to process the execute request. In other words the elapse time property indicates the latency data. The ignored noise words property indicates an array of noise words in the search query. The search component stores a list of authored definitions for certain tokens. The keyword information property indicates a token and associated definition in the list of authored definitions. The query machine property indicates a name of a computer that is running the search service that executed the execute request. The query modification property is applicable only when the data source component is a FAST data source. The query modification property is a modified search query. The search component modifies the search query to the modified search query if spell check mode is on. The intermediate processing time property indicates an amount of time consumed by intermediate processing of the search query on the search component . Intermediate processing is processing by the search component aside from database operations. The query terms property indicates an array of tokens extracted from the search query in an order in which the tokens occur. The spelling suggestion property indicates a spelling suggestion for the search query. The result tables contain query results for the search query.

In various embodiments the execute response is formatted in various ways. For example in some embodiments the execute response is formatted as a SOAP response comprising XML elements. The XML elements conform to the following schema 

Furthermore in this example the ExecuteResult element belongs to the ResultTableCollection type. Elements belonging to the ResultTableCollection type conform to the following schema 

In this example the m ResultTables element belongs to the ArrayOfKeyValueOfResultTypeResultTableUTLV0zE5 type. Elements belonging to the ArrayOfKeyValueOfResultTypeResultTableUTLV0zE5 type contain lists of zero or more key elements and value elements. Each pair of key elements and value elements represents a set of query results of a specific type. Elements belonging to the ArrayOfKeyValueOfResultTypeResultTableUTLV0zE5 type conform to the following schema 

Elements belonging to the ResultTable type contain lists of query results. Elements belonging to the ResultTable type conform to the following schema 

A RelevantResults table contains actual query results. A SpecialTermResults table contains best bets that apply to the search query. A HighConfidenceResults table contains high confidence results that apply to the search query. High confidence results are query results that are considered to be highly relevant because of a precise match between a high confidence property value and the tokens in the query text. A high confidence property is a managed property from a metadata index that an administrator identifies as a good indicator of a highly relevant content item. The FeaturedContentResults table contains featured content that apply to the search query. The FeatureContentResults table is used only when data source component is a FAST data source. The RefinementResults table contains refinement results that apply to the search query. The RefinementResults table is used only when the database is a FAST data source.

The web API also includes a get top query strings for URL method. The search component invokes the get top query strings for URL method when the search component receives a get top query strings for URL request. The get top query strings for URL request is a web services request to invoke the get top query string for URL method. The get top query strings for URL request specifies a URL. The front end component uses the get top query strings for URL request to obtain a list of the top query strings for which the URL was returned. For example the URL may be returned in responses to 2000 search queries. At least some of the 2000 search queries are the same. A response to the get top query string for URL request contains search queries occurring most frequently among the 2000 search queries.

In various embodiments the get top query strings for URL request is formatted in various ways. For example in some embodiments the get top query strings for URL request is formatted as a SOAP request comprising XML elements. The XML elements conform to the following schema 

When the search component invokes the get top query strings for URL method in response to receiving a get top query strings for URL request the web API generates a get top query strings for URL response. The get top query strings for URL response specifies a list of most frequently occurring search queries corresponding to the given URL.

In various embodiments the get top query strings for URL response is formatted in various ways. For example in some embodiments the get top query strings for URL response is formatted as a SOAP response comprising XML elements. The XML elements conform to the following schema 

The web API also includes a record UI query done event method. The search component invokes the record UI query done event method when the search component receives a record interface latency request. The record interface latency request is a web services request to invoke the record UI query done event method. The record UI query done event method is also referred to herein as the record interface latency method.

The front end component can receive one or more search requests in a given time period. The front end component uses the record interface latency request to inform the search component about the search query latency for the search queries received by the front end component within the given time period. In various embodiments the given time period has various lengths. For example in some embodiments the given time period has a length of sixty seconds. In other embodiments the given time period has a length of 120 seconds.

In various embodiments the record interface latency request specifies various data. For example in some embodiments the record interface latency request contains aggregated latency information and or verbose latency information. The aggregated latency information contains aggregated information about amounts of time consumed by the front end component in processing search requests during the given time period. The verbose latency information contains separate information about an amount of time consumed by the front end component in processing individual search requests during the given time period.

In various embodiments the record UI latency request is formatted in various ways. For example in some embodiments the record interface latency request is formatted as a SOAP request comprising XML elements. The XML elements conform to the following schema 

The AggregatedQueryTimings element belongs to the ArrayOfAggregatedUIQueryLatencyDataBuffer type. Elements belonging to the ArrayOfAggregatedUIQueryLatencyDataBuffer type contain a list of elements conforming to an AggregatedUIQueryLatencyDataBuffer type. Each of the elements conforming to the AggregatedUIQueryLatencyDataBuffer type contains aggregated latency information for a search results page. A search results page is a web page containing data regarding query results for a search query. Elements conforming to the AggregatedUIQueryLatencyDataBuffer type conform to the following schema 

The VerboseQueryTimings element belongs to an ArrayOfVerboseUIQueryLatencyDataBuffer type. Elements belonging to the ArrayOfVerboseUIQueryLatencyDataBuffer type conform to the following schema 

When the search component invokes the record UI query done event method in response to receiving a record interface latency request the web API generates a record interface latency response. The record interface latency response is a web services response that is responsive to the record interface latency request. The record interface latency response specifies whether verbose query monitoring is turned on for the search application .

In various embodiments the record interface latency response is formatted in various ways. For example in some embodiments the record interface latency response is formatted as a SOAP response comprising XML elements. The XML elements conform to the following schema 

The web API also includes a get scopes method. The search component invokes the get scopes method when the search component receives a get scopes request. The get scopes request is a web services request to invoke the get scopes method. The get scopes request includes data that identifies a search scope consumer. The search scope consumer is a website through which the search request is received. The front end component uses the get scopes request to obtain a list of search scopes available to the search scope consumer.

In various embodiments the get scopes request is formatted in various ways. For example in some embodiments the get scopes request is a SOAP request comprising XML elements. The XML elements conform to the following schema 

When the search component invokes the get scopes method in response to receiving a get scopes response the web API generates a get scopes response. The get scopes response is a web services response that is responsive to the get scopes request. The get scopes response contains information about a set of available search scopes. The set of available search scopes comprises search scopes that are available to the search component for the search scope consumer.

A search scope is a pre defined list of attributes that defines a collection of content items. For example a people search scope is a list of attributes that define a collection of content items regarding people. In this example the list of attributes can include first name surname telephone number email address and other attributes. Each of the search scopes has a name a unique identifier and a description. Each attribute in the list of attributes of a search scope is referred to herein as a search scope rule.

In various embodiments the get scopes response includes various types of information about search scopes. For example in some embodiments the get scopes response includes a description an identifier a name and a state for each search scope. The description of a search scope describes the search scope. The identifier of a search scope specifies a unique identifier of the search scope. The name of a search scope specifies a name of the search scope. The state of the search scope specifies a compilation state of the search scope.

Search scope compilation is a process of updating a full text index catalog e.g. the index to reflect unincorporated changes to a definition of a search scope. The compilation state of a search scope is the state of search scope compilation for the search scope. Example compilation states for a search scope include empty invalid query expanded needs compilation compiled and needs recompilation. When the compilation state of a search scope is empty the search scope contains no content items. When the compilation state of a search scope is invalid the search scope is invalid. When the compilation state of a search scope is query expanded the search scope is expanded at query time. When the compilation state of a search scope is needs compilation the full text index catalog has not yet been updated to reflect changes to the definition of the search scope. When the compilation state of a search scope is compiled the full text index catalog has been updated to reflect a current definition of the search scope. When the compilation state of a search scope is need recompilation the full text index catalog needs to be updated to reflect a current definition of the search scope.

In various embodiments the get scopes response is formatted in various ways. For example in some embodiments the get scopes response is formatted as a SOAP response comprising XML elements. In some embodiments the XML elements conform to the following schema 

The web API also includes a record OM query done event method. The search component invokes the record OM query done event method when the search component receives a record OM latency request. The record OM latency request is a web services request to invoke the record OM query done event method. The record OM query done event method is also referred to herein as the record object model latency method.

The front end component uses the record OM latency request to provide query performance information to the search component . The query performance information is based on latency data for search queries executed on the search component . The latency data is reported by the search component in execute responses received from the search component . For example the front end component can send a plurality of execute requests to the search component in a given time period and receive a plurality of execute responses from the search component . The record OM latency request includes search performance information based on each of the execute responses. In various embodiments the given time period has various lengths. For example in some embodiments the given time period has a length of sixty seconds. In other embodiments the given time period has a length of ninety seconds.

In various embodiments the record OM latency request is formatted in various ways. For example in some embodiments the record OM latency request is formatted as a SOAP request comprising XML elements. The XML elements conform to the following schema 

The AggregatedQueryTimings element belongs to the ArrayOfAggregatedOMQueryLatencyDataBuffer type. Elements belonging to the ArrayOfAggregatedOMQueryLatencyDataBuffer type conform to the following schema 

The VerboseQueryTimings element of the OMQueryLatencyDataBuffer element belongs to the ArrayOfVerboseOMQueryLatencyDataBuffer type. Elements belonging to the ArrayOfVerboseOMQueryLatencyDataBuffer type conform to the following schema 

When the search component invokes the record OM query done event method in response to receiving a record OM latency request the web API generates a record OM latency response. The record OM latency response is a web services response that is responsive to the record OM latency request. The record OM latency response specifies whether verbose query monitoring is turned on for the search application .

In various embodiments the record OM latency response is formatted in various ways. For example in some embodiments the record OM latency response is formatted as a SOAP response comprising XML elements. The XML elements conform to the following schema 

The web API also includes a web part query done event method. The search component invokes the web part query done event method when the search component receives a web part latency request. The web part latency request is a web services request to invoke the record web part query done event method. The front end component uses the web part latency request to inform the search component about search query latencies of web parts in the search results page during a given time period. The search query latency of a web part is an amount of time consumed by a web part to process a search query. A web part processes a search query by preparing an execute request for the search query and or in generating user interface data based on query results for the search query. In various embodiments the given time period can be various lengths of time. For example in some embodiments the given time period is sixty seconds. In other embodiments the given time period is ninety seconds.

In various embodiments the web part latency request is formatted in various ways. For example in some embodiments the web part latency request is formatted as a SOAP request comprising XML elements. The XML elements conform to the following schema 

When the search component invokes the record web part latency method in response to receiving a record web part latency request the web API generates a record web part latency response. The record web part latency response is a web services response that is responsive to the record web part latency request. The record web part latency response specifies whether verbose query monitoring is turned on for the search application .

In various embodiments the record web part latency response is formatted in various ways. For example in some embodiments the record web part latency response is formatted as a SOAP response comprising XML elements. The XML elements conform to the following schema 

The web API also includes a record click method. The search component invokes the record click method when the search component receives a record click request. The record click request is a web services request to invoke the record click method. The front end component uses the record click request to inform the search component that a clickthrough has occurred on a given query result or that the user has navigated away from the search results page. The record click request includes information describing the clickthrough.

In various embodiments the record click request is formatted in various ways. For example in some embodiments the record click request is formatted as a SOAP request comprising XML elements. The XML elements conform to the following schema 

When the search component invokes the record click method in response to receiving a record click request the web API generates a record click response. The record click response is a web services response that is responsive to the record click request. The record click response acknowledges the record click request. In various embodiments the record click response is formatted in various ways. For example in some embodiments the record click response is formatted as a SOAP response comprising XML elements. The XML elements conform to the following schema 

The web API also includes a query suggestions method. The search component invokes the query suggestions method when the search component receives a query suggestions request. The query suggestions request is a web services request to invoke the query suggestions method. The front end component uses the query suggestions request to retrieve a list of query suggestions that match a search query.

In various embodiments the query suggestion request specifies various pieces of data. For example in some embodiments the query suggestion request specifies a set of query properties that describe the search query. Furthermore in some embodiments the query suggestion request further specifies a number of query suggestions to retrieve. Furthermore in some embodiments the query suggestion request further specifies whether to retrieve pre query suggestions or post query suggestions. A pre query suggestion is a search query that is related to a search query that a user is typing into a search box. A pre query suggestion is provided prior to execution of the search query. A post query suggestion is an alternate search query that is related to a search query that was executed. A post query suggestion is provided after execution of a search query. Furthermore in some embodiments the query suggestion request further specifies whether to highlight terms in the pre query suggestions that correspond to terms in a search query that a user is typing or terms in post query suggestions that correspond to terms in an executed search query. Furthermore in some embodiments the query suggestion request further specifies whether to capitalize the first letters of words in the query suggestions.

In various embodiments the query suggestion request is formatted in various ways. For example in some embodiments the query suggestion request is formatted as a SOAP request comprising XML elements. In some embodiments the XML elements conform to the following schema 

When the search component invokes the query suggestions method in response to receiving a query suggestions request the web API generates a query suggestion response. The query suggestion response is a web services response that is responsive to the query suggestion request. The query suggestion response specifies a collection of query suggestions for the search query.

In various embodiments the query suggestion response is formatted in various ways. For example in some embodiments the query suggestion response is formatted as a SOAP response comprising XML elements. In some embodiments the XML elements conform to the following schema 

The web API also includes a get click frequencies method. The search component invokes the get click frequencies method when the search component receives a get click frequencies request. The get click frequencies request is a web services request to invoke the get click frequencies method. The front end component uses the get click frequencies request to obtain click frequencies for a given URI for a given time period following a given reference date. In various embodiments the front end component is able to use the get click frequencies request to obtain click frequencies for the given URI for time periods of various lengths. For example the front end component can use the get click frequencies request to obtain click frequencies for the given URI for the past week or month after the given reference date e.g. Dec. 23 2009 .

In various embodiments the get click frequencies request is formatted in various ways. For example in some embodiments the get click frequencies request is formatted as a SOAP request comprising XML elements. The XML elements conform to the following schema 

When the search component invokes the get click frequencies method in response to receiving a get click frequencies request the web API generates a get click frequencies response. The get click frequencies response is a web services response that is responsive to the get click frequencies request. The get click frequencies response contains click frequencies for the URI specified in the get click frequencies request.

In various embodiments the get click frequencies response is formatted in various ways. For example in some embodiments the get click frequencies response is formatted as a SOAP response comprising XML elements. The XML elements conform to the following XML schema 

The web API also includes a get search terms method. The search component invokes the get search terms method when the search component receives a get search terms request. The get search terms request is a web services request to invoke the get search terms method. The front end component uses the get search terms request to retrieve a text restriction of a keyword query as interpreted by the search application . A keyword query is a search query expressed as a set of keywords.

In various embodiments the get search terms request is formatted in various ways. For example in some embodiments the get search terms request is formatted as a SOAP request comprising XML elements. The XML elements conform to the following schema 

When the search component invokes the get search terms method in response to receiving a get search terms request the web API generates a get search terms response. The get search terms response is a web services response that is responsive to the get search terms request. The get search terms response contains a text restriction of the query text of the search query specified by the get search terms request.

In various embodiments the get search terms response is formatted in various ways. For example in some embodiments the get search terms response is formatted as a SOAP response comprising XML elements. The XML elements conform to the following schema 

As illustrated in the example of the operation starts when the front end component receives a search request from the client computing system . The search request specifies one or more search queries. In the example of the front end component receives the search request via a web part in a web page in a website.

The front end component sends a get scopes request to the search component . The get scopes request includes data that identifies a search scope consumer. The search scope consumer is the web site through which the search request was received. After the front end component sends the get scopes request the front end component receives a get scopes response . The get scopes response contains information about search scopes that are available to the search component for the search scope consumer.

Next the front end component sends a query suggestions request to the search component . The front end component uses the query suggestions request to retrieve a list of query suggestions that match the search query. After sending the query suggestion request the front end component receives a query suggestion response . The query suggestion response specifies a collection of query suggestions for the search query. The front end component then provides the query suggestions to the client computing system . The client computing system displays the query suggestions to a user of the client computing system . The query suggestions can help the user select an appropriate search query.

The front end component then sends an execute request to the search component . The front end component uses the execute method to execute the search query. The execute request specifies the search query as a set of properties. The properties of the search query define a query condition. In some instances the query condition limits the query results to content items within one of the scopes indicated in the get scopes response.

Subsequently the front end component receives an execute response from the search component . The execute response contains data regarding query results for the search query. The query results are content items in the database that satisfy the query condition. In addition to the query results the execute response specifies an amount of time consumed by the search component to process the execute request.

After receiving the execute response the front end component generates user interface data . The user interface data represents a user interface element having contents that depend on the query results. The user interface element can be all or part of a search results page. In various embodiments the front end component generates the user interface data in various ways. For example in some embodiments the front end component generates a HTML document that represents the user interface. In other example embodiments the front end component generates XML data that a client computing system uses to modify an existing web page.

The front end component sends a record OM latency request to the search component . The front end component uses the record OM latency request to inform the search component about the latencies for processing search queries on the search component within a given time period as reported by the search component in execute responses received from the search component . After the front end component sends the record OM latency request the front end component receives a record object model latency response . The record object model latency response specifies whether verbose query monitoring is turned on for the search application .

In addition the front end component sends a record interface latency request to the search component . The front end component uses the record interface latency request to inform the search component about the search query latency for search queries received by the front end component within a given time period. After sending the record interface latency request the front end component receives a record interface latency response from the search component . The record interface latency response specifies whether verbose query monitoring is turned on for the search application .

Furthermore the front end component sends a record click request to the search component . The front end component uses the record click request to inform the search component that a clickthrough has happened or that the user has navigated away from the user interface. Subsequently the front end component receives a record click response from the web API . The record click response acknowledges the record click request.

In different embodiments computing devices are implemented in different ways. For instance in the example of the computing device comprises a memory a processing system a secondary storage device a network interface card a video interface a display device an external component interface an external storage device an input device a printer and a communication medium . In other embodiments computing devices are implemented using more or fewer hardware components. For instance in another example embodiment a computing device does not include a video interface a display device an external storage device or an input device.

The memory includes one or more computer readable data storage media capable of storing data and or instructions. In different embodiments the memory is implemented in different ways. For instance in various embodiments the memory is implemented using various types of computer readable data storage media. Example types of computer readable data storage media include but are not limited to dynamic random access memory DRAM double data rate synchronous dynamic random access memory DDR SDRAM reduced latency DRAM DDR2 SDRAM DDR3 SDRAM Rambus RAM solid state memory flash memory read only memory ROM electrically erasable programmable ROM and other types of devices and or articles of manufacture that store data.

The processing system includes one or more physical integrated circuits that selectively execute software instructions. In various embodiments the processing system is implemented in various ways. For instance in one example embodiment the processing system is implemented as one or more processing cores. For instance in this example embodiment the processing system may be implemented as one or more Intel Core 2 microprocessors. In another example embodiment the processing system is implemented as one or more separate microprocessors. In yet another example embodiment the processing system is implemented as an ASIC that provides specific functionality. In yet another example embodiment the processing system provides specific functionality by using an ASIC and by executing software instructions.

In different embodiments the processing system executes software instructions in different instruction sets. For instance in various embodiments the processing system executes software instructions in instruction sets such as the x86 instruction set the POWER instruction set a RISC instruction set the SPARC instruction set the IA 64 instruction set the MIPS instruction set and or other instruction sets.

The secondary storage device includes one or more computer readable data storage media. The secondary storage device stores data and software instructions not directly accessible by the processing system . In other words the processing system performs an I O operation to retrieve data and or software instructions from the secondary storage device . In various embodiments the secondary storage device is implemented by various types of computer readable data storage media. For instance the secondary storage device may be implemented by one or more magnetic disks magnetic tape drives CD ROM discs DVD ROM discs Blu Ray discs solid state memory devices Bernoulli cartridges and or other types of computer readable data storage media.

The network interface card enables the computing device to send data to and receive data from a computer communication network. In different embodiments the network interface card is implemented in different ways. For example in various embodiments the network interface card is implemented as an Ethernet interface a token ring network interface a fiber optic network interface a wireless network interface e.g. WiFi WiMax etc. or another type of network interface.

The video interface enables the computing device to output video information to the display device . In different embodiments the video interface is implemented in different ways. For instance in one example embodiment the video interface is integrated into a motherboard of the computing device . In another example embodiment the video interface is a video expansion card. Example types of video expansion cards include Radeon graphics cards manufactured by ATI Technologies Inc. of Markham Ontario Geforce graphics cards manufactured by Nvidia Corporation of Santa Clara Calif. and other types of graphics cards.

In various embodiments the display device is implemented as various types of display devices. Example types of display devices include but are not limited to cathode ray tube displays LCD display panels plasma screen display panels touch sensitive display panels LED screens projectors and other types of display devices. In various embodiments the video interface communicates with the display device in various ways. For instance in various embodiments the video interface communicates with the display device via a Universal Serial Bus USB connector a VGA connector a digital visual interface DVI connector an S Video connector a High Definition Multimedia Interface HDMI interface a DisplayPort connector or other types of connectors.

The external component interface enables the computing device to communicate with external devices. In various embodiments the external component interface is implemented in different ways. For instance in one example embodiment the external component interface is a USB interface. In other example embodiments the computing device is a FireWire interface a serial port interface a parallel port interface a PS 2 interface and or another type of interface that enables the computing device to communicate with external components.

In different embodiments the external component interface enables the computing device to communicate with different external components. For instance in the example of the external component interface enables the computing device to communicate with the external storage device the input device and the printer . In other embodiments the external component interface enables the computing device to communicate with more or fewer external components. Other example types of external components include but are not limited to speakers phone charging jacks modems media player docks other computing devices scanners digital cameras a fingerprint reader and other devices that can be connected to the computing device .

The external storage device is an external component comprising one or more computer readable data storage media. Different implementations of the computing device interface with different types of external storage devices. Example types of external storage devices include but are not limited to magnetic tape drives flash memory modules magnetic disk drives optical disc drives flash memory units zip disk drives optical jukeboxes and other types of devices comprising one or more computer readable data storage media. The input device is an external component that provides user input to the computing device . Different implementations of the computing device interface with different types of input devices. Example types of input devices include but are not limited to keyboards mice trackballs stylus input devices key pads microphones joysticks touch sensitive display screens and other types of devices that provide user input to the computing device . The printer is an external device that prints data to paper. Different implementations of the computing device interface with different types of printers. Example types of printers include but are not limited to laser printers ink jet printers photo printers copy machines fax machines receipt printers dot matrix printers or other types of devices that print data to paper.

The communications medium facilitates communication among the hardware components of the computing device . In different embodiments the communications medium facilitates communication among different components of the computing device . For instance in the example of the communications medium facilitates communication among the memory the processing system the secondary storage device the network interface card the video interface and the external component interface . In different implementations of the computing device the communications medium is implemented in different ways. For instance in different implementations of the computing device the communications medium may be implemented as a PCI bus a PCI Express bus an accelerated graphics port AGP bus an Infiniband interconnect a serial Advanced Technology Attachment ATA interconnect a parallel ATA interconnect a Fiber Channel interconnect a USB bus a Small Computing system Interface SCSI interface or another type of communications medium.

The memory stores various types of data and or software instructions. For instance in the example of the memory stores a Basic Input Output System BIOS an operating system application software and program data . The BIOS includes a set of software instructions that when executed by the processing system cause the computing device to boot up. The operating system includes a set of software instructions that when executed by the processing system cause the computing device to provide an operating system that coordinates the activities and sharing of resources of the computing device . Example types of operating systems include but are not limited to Microsoft Windows Linux Unix Apple OS X Apple OS X iPhone Palm webOS Palm OS Google Chrome OS Google Android OS and so on. The application software includes a set of software instructions that when executed by the processing system cause the computing device to provide applications to a user of the computing device . The program data is data generated and or used by the application software .

The various embodiments described above are provided by way of illustration only and should not be construed as limiting. Those skilled in the art will readily recognize various modifications and changes that may be made without following the example embodiments and applications illustrated and described herein.

