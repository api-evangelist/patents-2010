---

title: Methods and apparatus for modifying a backup data stream including logical partitions of data blocks to be provided to a fixed position delta reduction backup application
abstract: In accordance with one embodiment, a backup data stream is modified to be provided to a fixed position delta reduction backup method. When a data stream is received, the data stream may be parsed into a plurality of logical components, where each of the logical components includes one or more data blocks. Missing data blocks may also be detected in the data stream, and therefore may be detected in each of the plurality of logical components. For instance, each of the logical components may be separated into a separate data stream for which missing data blocks may be detected. A temporary data block is then inserted where each missing data block is detected (e.g., in each of the plurality of logical components). In this manner, inefficiencies introduced into a fixed position delta reduction backup process as a result of new or deleted data in a system implementing a plurality of data blocks which may be stored in the form of logical components are eliminated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08078930&OS=08078930&RS=08078930
owner: i365 Inc.
number: 08078930
owner_city: Santa Clara
owner_country: US
publication_date: 20100719
---
This application is continuation and claims priority of U.S. patent application Ser. No. 11 280 545 entitled METHODS AND APPARATUS FOR MODIFYING A BACKUP DATA STREAM INCLUDING LOGICAL PARTITIONS OF DATA BLOCKS TO BE PROVIDED TO A FIXED POSITION DELTA REDUCTION BACKUP APPLICATION by Boldt et al filed on Nov. 15 2005 which is incorporated herein by reference for all purposes.

The present invention relates to modifying a backup data stream to be processed by a fixed position delta reduction backup process. More particularly the present invention relates to modifying a backup data stream to be processed by a fixed position delta reduction backup method where the backup data stream includes concatenated logical partitions of data blocks.

In order to backup data data backups are often performed via what is commonly referred to as a backup application. In order to backup the data the backup application sends the data to be stored either to a local storage medium or via a network interface for remote transmission. The amount of data that is stored by the backup application varies with the method implemented by the backup application. For instance some backup applications backup all data in the specified directory database or file while other applications attempt to increase the efficiency of the backup process by storing only the data that has been modified since the last backup. One commonly used method is the fixed position delta reduction method which determines which fixed position segments of data have been modified since the last backup and stores the data reflecting those changes. In other words the fixed position delta reduction method determines which segments of data have been modified by comparing one segment of data at a fixed position in a file or data stream received during a current backup with the segment of data previously at that same fixed position in the file or data stream during the last backup for that particular file.

The process via which a backup application implementing a fixed position delta reduction method executes and the effectiveness of that process varies with the format in which data is stored. Specifically data associated with a particular file or database may be retrieved in the form of separate physical organized streams or in a single stream including a plurality of data segments i.e. blocks which may be formed by concatenated logical partitions of data blocks. In other words each logical partition includes one or more data blocks. Unfortunately there are a number of problems that are introduced into a backup application implementing a fixed position delta reduction backup method when data is added to or deleted from a system implementing a backup data stream including a plurality of data blocks which may be formed by concatenating logical partitions of data blocks.

In order to illustrate the effectiveness of a fixed position delta reduction backup application for a system implementing a backup data stream including a plurality of data blocks the operation of the fixed position delta reduction backup application will be described with reference to . is a diagram illustrating an exemplary data stream including a plurality of blocks of data. As shown in backup data is typically sent to the backup application as a data stream. In this example a database transmits the data stream to a fixed position delta reduction backup application for storing to a storage medium . As shown the data stream includes data blocks .

New data added to a file or database implementing a plurality of data blocks typically requires that a new data block be allocated. This new data block will appear as an insertion of a data block in the data stream provided to the fixed position delta reduction backup application resulting an a shift in all subsequent data blocks in the data stream. As shown in the insertion of data block Inserted block between data blocks and results in a shift of the subsequent data blocks and from their position in the original data stream creating a modified data stream . As a result when each data block in the modified data stream is compared to the corresponding data block of the original data stream represented by corresponding arrows the data blocks subsequent to the inserted data block appear to have been modified or to be new data. Specifically in this example the blocks and of the modified data stream are compared to the corresponding data blocks and a non existent data block in the original data stream respectively resulting in the storing of the data blocks and as well as the inserted block . In other words the shifting causes a backup application implementing a fixed position delta reduction method to recognize all subsequent data following the inserted data block as new or modified data. Thus for data streams including a plurality of concatenated logical components data in the logical components following the inserted data block will be perceived as new or modified data. As a result the detection of this new data requires that all of the new data be written to a local storage medium or transmitted via a network interface for storing to a remote storage medium in order to perform a complete backup. Accordingly this new data is stored unnecessarily resulting in an inefficient processing of backup data provided to the fixed position delta reduction backup application.

Similarly when data is deleted from a file or database implementing a plurality of data blocks a data block is either deleted or de allocated e.g. marked as unused . When this data block is removed from the data stream this causes a shift in the data blocks in the data stream in the opposite direction shown in . As shown in the removal of data block indicated at of the modified data stream results in a shift of data blocks from their position in the original data stream as shown. As a result this shifting causes a fixed position delta reduction backup application to recognize all data following the deleted data block to be new data. In this example blocks and follow the deleted data block and are therefore recognized as new data since the last backup . Thus for data streams including a plurality of concatenated logical components data in the logical components following the deleted data block will be perceived as new or modified data. This new data is then unnecessarily written or transmitted to local or remote storage respectively introducing inefficiencies into the fixed position delta reduction backup process.

The inefficiencies introduced into the fixed position delta reduction backup process for systems implementing a backup data stream including a plurality of data blocks may go unnoticed for a single file that has been edited resulting in the storing or re transmission of a larger portion of the file than necessary. However for a database application backing up a large number of files in the database the amount of data that is stored or re transmitted by a fixed position delta reduction backup application could be significant. As a result these undesirable insertion and deletion characteristics could have a significant impact on the time in which a fixed position delta reduction backup application completes for a single data backup session in a system implementing data transmitted in the form of a stream including a plurality of data blocks as well as a system implementing data transmitted in the form of a stream including logical partitions of data blocks. Since many common database programs such as Microsoft s SQL Server provide data during data backup in the form of a stream including a plurality of data blocks as well as in the form of a stream including concatenated logical partitions this is particularly problematic.

A number of fixed position delta reduction methods have been developed for use in backup applications. Those fixed position delta reduction methods that have been developed for use with systems implementing fixed length data blocks include those described in U.S. Pat. No. 5 990 810 entitled Method for partitioning a block of data into subblocks and for storing and communicating such subblocks issued Nov. 23 1999 to Ross Williams and in U.S. Pat. No. 5 745 906 entitled Method and apparatus for merging delta streams to reconstruct a computer file issued Apr. 28 1998 to Mark Squibb both of which are incorporated herein by reference. However none of the existing methods are effective in reducing the inefficiencies resulting from the insertion and deletion characteristics set forth above.

In view of the above it would be beneficial if the inefficiencies introduced into a fixed position delta reduction backup process as a result of new or deleted data in a system implementing a backup data stream including a plurality of data blocks and or concatenated logical partitions of data blocks could be eliminated.

The disclosed embodiments eliminate the inefficiencies introduced into a fixed position delta reduction backup process as a result of new or deleted data in a system implementing data blocks and or logical partitions of data blocks. This is accomplished in part by modifying a stream of backup data prior to processing the backup data stream via a fixed position delta reduction backup method. By modifying the stream of backup data the amount of data that is detected by the fixed position delta reduction backup method as new or changed is minimized. Accordingly the amount of data that is stored by the fixed position delta reduction backup method to complete a data backup is substantially reduced.

In the following description the disclosed embodiments are described with reference to a fixed position delta reduction backup application. More specifically a backup data stream is modified prior to providing one or more modified backup data streams to the fixed position delta reduction backup application. However it is important to note that the disclosed embodiments may also be implemented by the fixed position delta reduction backup application. In other words since the disclosed embodiments and the fixed position delta reduction backup process may be implemented by a single application the modified data stream may be processed by the corresponding fixed position delta reduction backup method without requiring that the modified data stream s be provided to a separate application. Accordingly the terms fixed position delta reduction backup application and fixed position delta reduction backup method may be used interchangeably.

In order to minimize the data that is detected by a fixed position delta reduction backup application as new or modified data a delta method modifies a stream of backup data to be provided to a fixed position delta reduction backup application. In accordance with one embodiment the delta method may perform one or both of two different operations on the stream of backup data. These two operations include 1 the separation of logical components in the stream of backup data and 2 the insertion of temporary data blocks for detected missing data blocks in the stream of backup data. A data block that is missing from a data stream is a data block that has been assigned a sequential identifier for a file or database but is not present in the current data stream transmitted during the current data backup. For instance the data block may be a data block that has been previously recorded for the associated file or database during a prior data backup but is not present in the current data stream transmitted during the current data backup. Both of these operations may be performed on the backup data sequentially to generate at least one modified data stream. Alternatively each of these operations may be performed individually on the backup data.

In accordance one aspect of the invention a backup data stream is separated into logical components. Specifically a backup data stream is parsed into a plurality of logical components. A logical component may be a logically distinct portion of a file or database. Each logical component includes one or more data blocks. In accordance with one embodiment each of the data blocks is a fixed length data block. In other words the length of a fixed length data block is a specific predetermined length. The length may be fixed with respect to position e.g. with respect to other data blocks as well as with respect to time. Stated another way the length is fixed with respect to position when each of the fixed length data blocks includes a predetermined identical number of bytes of data. The length is fixed with respect to time when the length of a data block remains the same across time and therefore across multiple data backups. Since a logical component may include any number of data blocks fixed length or otherwise the length of a logical component is variable.

In accordance with one embodiment when a backup data stream is parsed into logical components the data stream is parsed into a plurality of data streams where each of the data streams corresponds to a different logical component thereby modifying the original backup data stream. These separate data streams may then be provided separately to a fixed position delta reduction backup application. In certain embodiments each of these separate data streams may be processed to insert temporary data blocks where missing data blocks are detected in the data stream prior to providing the separate data streams to the fixed position delta reduction backup application. Since the logical components in the backup data stream are separated there will be no shift of logical components and therefore the data blocks included in those logical components that would otherwise be processed subsequent to the logical component in which a data block has been inserted. In other words the fixed position delta reduction process treats each logical component as a new data stream rather than a concatenated group of logical components. As a result the data change detected by a fixed position delta reduction backup application is reduced resulting in a reduction in the amount of data that is stored by the fixed position delta reduction backup application to complete a data backup.

In accordance with another aspect of the invention temporary data blocks are inserted where missing data blocks have been detected in a data stream. This may be accomplished by detecting missing data blocks for each of the logical components in the data stream. A temporary data block is then inserted for each missing data block that has been detected in each of the logical components thereby generating one or more modified data streams. These modified data streams may then be provided to a fixed position delta reduction backup application. In this manner data is properly aligned prior to providing the data to the fixed position delta reduction backup application. Since the detectable data change since the last data backup performed for that file or database is minimized the data that is stored by the fixed position delta reduction backup application to complete the data backup is also minimized.

In accordance with one embodiment a temporary data block is a data block that includes a header indicating that the temporary data block may be removed upon restore of a file that has been stored by a fixed position delta reduction backup application. Where the data blocks in the data stream are fixed length data blocks the temporary data block may also be the same length as the other fixed length data blocks in the data stream. The temporary data block may include null bytes or other content.

In accordance with another embodiment missing data blocks may be detected by identifying the data blocks in the data stream and determining which data blocks are missing from the identified data blocks. For instance each data block may include a sequential indicator that may be used to identify the data block as well as ascertain its order within the set of data blocks for that logical component. By identifying the sequential indicators that are present in the data stream it is possible to conclude that those sequential indicators that are missing from the sequence identify those data blocks that are missing. It is also possible to compare the identified data blocks with those data blocks that were previously encountered for that same logical component during a previous data backup. In this manner it is possible to identify those data blocks that were assigned a sequential indicator but are now missing from that logical component.

In accordance with one embodiment each of the data blocks is a fixed length with respect to the position of the data block as well as with respect to time across multiple backups. However it is important to note that the data blocks may be fixed length only with respect to position or with respect to time. Moreover the data blocks may also be of variable length with respect to position and or with respect to time.

In accordance with yet another embodiment the delta method is applied to a backup data stream received from a SQL Server database which is made up of one or more files. Each file includes one or more logical components each of which includes one or more fixed length data blocks termed extents. Each extent includes a group of eight continuous pages. Since each page in a SQL Server holds 8K each extent is 64K in size. Each page of an extent includes a page number that may be used as a sequential indicator for use in detecting missing extents.

In accordance with another aspect of the invention the invention pertains to a system operable to perform and or initiate any of the disclosed methods. The system includes one or more processors and one or more memories. At least one of the memories and processors are adapted to provide at least some of the above described method operations. In yet a further embodiment the invention pertains to a computer program product for performing the disclosed methods. The computer program product has at least one tangible computer readable medium and computer program instructions associated with at least one of the computer readable product configured to perform at least some of the above described method operations.

These and other features and advantages of the present invention will be presented in more detail in the following specification of the invention and the accompanying figures which illustrate by way of example the principles of the invention.

Reference will now be made in detail to a specific embodiment of the invention. An example of this embodiment is illustrated in the accompanying drawings. While the invention will be described in conjunction with this specific embodiment it will be understood that it is not intended to limit the invention to one embodiment. On the contrary it is intended to cover alternatives modifications and equivalents as may be included within the spirit and scope of the invention as defined by the appended claims. In the following description numerous specific details are set forth in order to provide a thorough understanding of the present invention. The present invention may be practiced without some or all of these specific details. In other instances well known process operations have not been described in detail in order not to unnecessarily obscure the present invention.

The disclosed embodiments enable a backup data stream that is received from a system implementing fixed length data blocks to be efficiently processed by a fixed position delta reduction backup method. This is accomplished in part by modifying the backup data stream prior to passing it to the fixed position delta reduction backup method. By modifying the backup data stream the amount of data that is perceived by the fixed position delta reduction backup method to be new or changed is minimized. In this manner inefficiencies typically introduced into the fixed position delta reduction backup process when a data block is inserted into or removed from the backup data stream are eliminated.

The backup data stream may be modified in one or both of two different ways. First the data stream may be modified to separate the data stream into logical components and therefore separate data streams. Second a temporary data block may be inserted within a data stream where each missing data block is detected. Each of these operations may be performed individually on a backup data stream. Alternatively both of these operations may be performed in combination on the same backup data stream.

Data associated with a particular file or database may be stored in variable length data blocks or fixed length data blocks. The length of a data block may vary or be fixed with respect to position e.g. with respect to other data blocks and or time e.g. over time .

A variable length data block for which the length varies with respect to time may be any length which varies with the content of the data block. In other words the length of a variable length data block for which the length varies over time may increase or decrease over time. When data is stored in variable length data blocks where the length varies with respect to position each of the variable length data blocks may include any number of bytes of data. In other words each data block may include a different number of bytes of data and therefore the length of the data blocks need not be the same. A variable length data block for which the length varies with respect to position need not vary with respect to time and vice versa.

The length of a fixed length data block is a specific predetermined length. The length is fixed with respect to other data blocks when each of the fixed length data blocks includes a predetermined identical number of bytes of data. The length is fixed with respect to time when the length of a data block remains the same across time and therefore across multiple data backups. A fixed length data block for which the length is fixed with respect to position need not be fixed with respect to time and vice versa. Many common database programs such as Microsoft s SQL Server divide databases into fixed length data blocks where the length is fixed with respect to both position and time.

In the following description a data block refers to a data block that is a fixed length and therefore includes a predetermined number of bytes that is fixed across both position and time. One system that implements fixed length data blocks is the Microsoft SQL Server More particularly the fixed length data block that is stored by the SQL Server is referred to as an extent which includes a group of eight continuous pages. Since each page in a SQL Server holds 8K an extent is 64K in size. While the extent is one example of a fixed length data block the disclosed embodiments may be applied to any system in which fixed length data blocks are implemented.

It is important to note that while the description refers to fixed length data blocks where the length of the data blocks is fixed with respect to position and time the disclosed embodiments may be implemented with systems storing data in the form of variable length data blocks. In such systems the length may vary with respect to position e.g. with respect to other data blocks and or time e.g. across multiple data backups . Moreover the disclosed embodiments may also be implemented with systems storing data in the form of fixed length data blocks where the length is fixed with respect to only position or time.

In some embodiments the backup data stream includes one or more logical components. In accordance with one embodiment the backup data stream is received from a SQL Server database which is made up of one or more files. Each file includes one or more logical components each of which includes one or more fixed length data blocks termed extents. 

The data that is provided to or obtained by a fixed position delta reduction backup application may be obtained from a database or file. In accordance with one embodiment the data is obtained from a SQL Server database. Specifically a SQL Server database is comprised of one or more files. Thus when data from a SQL Server is transmitted or provided to a fixed position delta reduction backup application the data is retrieved from a database and therefore is retrieved from one or more files. Data from a SQL Server database is generally provided during a data backup via a dump in which the individual data files are provided one after the other.

Data associated with a file or database may be received by a backup application as one contiguous stream of data. For instance the backup application may call an application programming interface API offered by a database engine to request backup data. In response the database API will send the backup data as a stream to the requesting application.

Each file or database and therefore each stream of backup data associated with a file or database includes a plurality of logical components. A logical component may be defined as a logically distinct segment within a file or database such as a backed up file within a backup dump file or a database file tablespace within a database dump stream. Each logical component includes one or more data blocks. As described above the length of each of the data blocks is a fixed length. Since a logical component may include any number of fixed length data blocks the logical components may vary in length.

By parsing the data stream into logical components it is possible to limit the number of logical components that are recognized as new or modified data by a fixed position delta reduction backup application. As shown at the data stream may be parsed to separate the logical components of the data stream. In other words the data stream is scanned to delineate the logical components in the data stream. For instance the data stream may be parsed into separate data streams corresponding to the logical components identified in the data stream. Each separate logical component stream may then be provided separately to the fixed position delta reduction backup application which treats it as a new stream unaffected by other logical component streams obtained from the database or other data source during the backup session.

One method for parsing the data stream into logical components will be described in further detail below with reference to . Since an inserted data block only affects a single logical component of a file or database the insertion will only affect the associated data stream. Thus other logical components and associated alternate data streams will not be shifted as a result of an insertion of a data block in a single logical component. Accordingly the negative impact resulting from the shifting of subsequent data blocks of a data stream following an inserted data block is reduced.

A data stream may also be padded where a data block has been deleted or de allocated eliminating the deletion problem described above. This padding may be performed for each logical component and therefore each corresponding data stream. Specifically as shown at missing data blocks in each of the logical components e.g. data streams corresponding to the logical components are identified and a temporary data block is inserted where a missing data block is detected. One method for inserting padding for each missing data block will be described in further detail below with reference to . The modified data stream s generated at step and or step is then provided at to a fixed position delta reduction backup application.

When the fixed position delta reduction backup application receives a modified data stream the fixed position delta reduction backup application determines which data blocks to store to remote or local storage. For instance the fixed position delta reduction backup application may determine which data blocks have been modified e.g. changed added or deleted by calculating signatures associated with the data blocks in the current modified data stream and comparing the calculated signatures to previously stored signatures associated with a previous backup of the same file or database. The fixed position delta reduction backup application also replaces the previously stored signatures with the newly calculated signatures enabling the fixed position delta reduction backup application to detect changes made to the file or database since the most recent backup. A signature may be calculated for example by calculating a cyclic redundancy check CRC or checksum.

Once the fixed position delta reduction backup application determines which data has been modified since the last data backup the fixed position delta reduction backup application stores the modified data. This data may be sent to a local data storage medium or may be sent via a network interface for transmission to a remote storage medium.

As described above with reference to block of a data stream may be parsed to separate the logical components of the data stream. The parsing of a data stream into logical components will be described in further detail below with reference to .

In order to illustrate a method of parsing a data stream corresponding to one or more files into logical components an exemplary file will be described with reference to . This exemplary file represents a file retrieved from a SQL Server . As shown in the file includes a header and one or more logical components . An exemplary header will be described in further detail below with reference to . The file may include any number of logical components. For instance the file may include or be considered a single logical component. Alternatively the file may also include multiple separate logical components within the file . In this example the file includes three logical components L1 L2 and L3 . The logical components may be separated by analyzing the file data. For instance by searching the pages of the file for page numbers it is possible to identify those page numbers that are equal to a particular number e.g. zero . More particularly a page number equal to zero may indicate the start of a new logical component.

In other embodiments each logical component may have an associated header indicating the start and end bytes of the logical component. For instance the header may indicate the start of the logical component e.g. implicitly or explicitly and the length of the associated logical component which may be used to calculate the end point for the logical component. Thus each logical component header may be used to identify a demarcation point for use in separating the logical components.

A file header such as that shown in may include a variety of fields. For instance is a diagram illustrating an exemplary header . In this example the file header includes an information type field and a metadata segment . The metadata segment may include information such as a file name length of the file data in bytes etc. It is important to note that in the example set forth below with reference to the term logical component refers to each file segment that includes data blocks of the file. However the term logical component may also be used to refer to each segment of a file where the segment may include metadata or other information about the data. For instance a metadata segment of the file may be identified as a logical component that is separate from the file or data that follows the metadata segment.

Once a data stream is split into separate data streams corresponding to logical components each separate data stream may be provided to a fixed position delta reduction backup application or may be further processed as described below with reference to to insert padding blocks before being provided to a fixed position delta reduction backup application. Since an inserted data block will only affect a single logical component only a single data stream associated with a single logical component is affected. As a result logical components in the backup data stream that are subsequent to the affected logical component will be processed separately by the fixed position delta reduction backup application and therefore these logical components will not be shifted as a result of an inserted block in a previously processed logical component. Thus while all subsequent logical components following a logical component including an inserted data block would in a conventional approach be detected as new data by a fixed position delta reduction application only the affected logical component will be treated as new data by the fixed position delta reduction backup application.

As described above a temporary padding block may be inserted where a missing data block is found in a data stream which may correspond to a particular logical component if the data stream has been generated by a split of a larger backup stream into multiple data streams corresponding to logical components. As described above with reference to block of the insertion of such temporary data blocks will be described with reference to .

In accordance with one embodiment the delta method identifies sequential information for data blocks present in the data stream . This sequential information indicates the sequential order and placement of the data blocks within the data stream or corresponding logical component . For instance the sequential information may include a sequential indicator retrieved from the content of each of the data blocks that indicates the specific placement of the corresponding data block within the data stream . A file page number is one example of sequential information that may be used for purposes of this invention.

From the sequential information for data blocks present in the data stream it is possible to identify those data blocks that are missing from the data stream . More particularly it is possible to ascertain from the entire explicit or implied sequence of sequential indicators which sequential indicators from the sequence have not been identified in the data stream . Alternatively it is also possible to compare the sequential information with previously stored sequential information for data blocks received in a previous data stream of backup data e.g. corresponding to the same file or database .

Assuming that a larger backup data stream has been split into logical components sequential information for data blocks present in each logical component may be analyzed to ascertain those data blocks that are missing from the logical component. In accordance with one embodiment data blocks are counted from a specific identifier e.g. block zero . For instance if data blocks and are identified as present it becomes apparent that data blocks and are missing. It is irrelevant whether the last block s is missing since padding need not be performed. Alternatively the sequential information for data blocks identified in the present data stream may be compared to previously stored sequential information for data blocks present in the same logical component in a backup data stream previously received for the same file or database e.g. the same logical components . Sequential information may be stored in a table such as that described below with reference to which may be used to identify a sequential indicator for each of the data blocks encountered during the current backup or alternatively the last backup performed for each logical component. In this manner the sequential information may be tracked e.g. during the current backup .

As shown in this example the data stream includes data blocks identified by sequential indicators and . When this sequential information is compared to the previously stored sequential information associated with a previous backup identifying data blocks missing data blocks and are detected.

For each missing data block a temporary padding data block T is inserted in place of the missing data block. An exemplary temporary padding block will be described in further detail with reference to . After a temporary data block T has been inserted in the same location as the detected missing data blocks and the modified data stream may be provided to a fixed position delta reduction backup application. Since temporary data blocks have been inserted where missing data blocks have been detected there will be no shift in data. Accordingly the fixed position delta reduction backup application will be able to correctly compare signatures of each of the fixed length data blocks with those signatures that have previously been stored by the fixed position delta reduction backup application for that particular file or logical component .

Once the data blocks in the data stream have been identified the identified data blocks may be compared with the consecutive sequence of sequential indicators to identify those data blocks that are missing. Alternatively the identified data blocks may be compared with those that have been previously identified for the logical component using the corresponding sequential indicators at . Specifically the sequential indicators for the data blocks e.g. extents may be compared with those previously encountered for the logical component during a previous backup e.g. the last backup performed for the logical component . This comparison may be achieved by accessing the sequential indicators that were recorded for the logical component e.g. stored or updated during the previous backup. An exemplary table that may be used to record the sequential indicators for data blocks that have been identified in each of the logical components during the most recent backup will be described in further detail below with reference to . A temporary e.g. null data block is then inserted for each data block that has been previously identified in a prior backup that is not identified in the data stream at resulting in a padded data stream. More specifically the temporary data block is inserted in the location in the data stream in which the missing data block has been detected. An exemplary temporary data block will be described in further detail below with reference to .

As set forth above the identities of the data blocks that have been detected for each logical component during the current data backup may be temporarily recorded for use during the current backup e.g. for comparison with a proper sequence of sequential indicators . Alternatively the identities of the data blocks that have been detected for each logical component during the current data backup may be recorded for use in a subsequent data backup. Specifically the sequential indicator for each data block that is present in the data stream may be recorded for each of the logical components at . This recording process may be performed as each data block is processed. Recording may be accomplished by modifying or entirely replacing the sequential information that has been previously recorded for each logical component. The sequential indicators associated with each logical component may be stored or updated in a table such as that described below with reference to .

As described above each data block in a data stream that is encountered may be identified and recorded. The identifying information may not only identify a data block within a particular data stream but may also indicate a sequential order and placement of the data block within the data stream or corresponding logical component . The sequential information indicating the order and placement of data blocks encountered during a backup for a particular data stream may be stored in a data structure such as a table.

If the data blocks are variable length data blocks rather than fixed length data blocks it is desirable to record the length of each of the data blocks. Thus the table may be modified accordingly. For instance if the length of the data blocks varies with respect to position e.g. the length of the data blocks is not identical the length of each data block may be stored in the table or other suitable data structure. In this manner the length of the data blocks may be used to ascertain whether a data block is missing at a particular position in the data stream. More specifically the length of two or more consecutive data blocks in the backup data stream may be added to identify a particular location at which a particular data block should be found. For variable length data blocks for which the length varies over time e.g. across data backups it may be possible to identify the length of each data block during the current data backup from a header associated with each data block.

A temporary data block that is inserted where a missing data block has been detected may be implemented in a variety of formats. is a diagram illustrating an exemplary temporary data block. Specifically the temporary data block includes a header indicating that the data block is temporary. In this manner the header denotes that the temporary data block is to be removed upon restore of the backup data. The payload of the temporary data block may include null empty bytes. For instance the payload may include all zeros. While it is possible to store temporary data other than null bytes in the payload the null bytes compress more efficiently by a backup application. The temporary data block may be the same fixed length as the other data blocks. In other words the temporary data block includes a number of bytes equal in length to the missing data block. Thus in accordance with one embodiment the total bytes in the header and payload combined is the same length as the other fixed length data blocks.

As described above once a data stream has been provided to a fixed position delta reduction backup application the data stream is processed by the fixed position delta reduction backup application and the data that has been modified since the last backup is stored by the fixed position delta reduction backup application to local or remote storage. In some instances it is necessary or desirable to restore the backup data that has previously been stored by the fixed position delta reduction backup application. When the fixed position delta reduction backup application retrieves the stored data it is necessary to reverse the delta method that was previously performed to modify the backup data stream that was provided to the fixed position delta reduction backup application.

Each file is restored in the format in which it was originally stored. In accordance with one embodiment files are stored in a Microsoft Tape Format MTF . However files may be stored in a variety of formats. Moreover databases will be restored in the format in which they have been maintained. For instance files within a database will be restored in the file groups in which they were originally stored.

It is important to note that the file restore process operates to reverse the delta method previously performed to modify the backup data stream. As described above with reference to two different processes may be performed on a backup data stream which may be performed separately or in combination with one another. These two processes include the separation of logical components and the insertion of temporary data blocks for detected missing data blocks. The process illustrated in corresponds to a system in which both of these processes have been performed to modify a backup data stream. However the file restore process may also be performed to restore data for which only one of these processes has been performed to modify the backup data stream.

Generally the techniques of the present invention may be implemented on software and or hardware. In a specific embodiment of this invention the technique of the present invention is implemented in software. Thus the present invention relates to machine readable media that include program instructions state information e.g. tables etc. for performing various operations described herein. Examples of machine readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROM disks magneto optical media such as floptical disks and hardware devices that are specially configured to store and perform program instructions such as read only memory devices ROM and random access memory RAM . The invention may also be embodied in or associated with a tangible computer readable medium in which a carrier wave travels over an appropriate medium such as airwaves optical lines electric lines etc. Examples of program instructions include both machine code such as produced by a compiler and files containing higher level code that may be executed by a computer using an interpreter.

The present invention may be implemented on any suitable computer system. illustrates a typical general purpose computer system suitable for implementing the present invention. The computer system may take any suitable form.

The computer system includes any number of processors also referred to as central processing units or CPUs that may be coupled to memory devices including primary storage device typically a read only memory or ROM and primary storage device typically a random access memory or RAM . As is well known in the art ROM acts to transfer data and instructions uni directionally to the CPUs while RAM is used typically to transfer data and instructions in a bi directional manner. Both the primary storage devices may include any suitable computer readable media.

A secondary storage medium which is typically a mass memory device may also be coupled bi directionally to CPUs and provides additional data storage capacity. The mass memory device is a computer readable medium that may be used to store programs including computer code data and the like. Typically the mass memory device is a storage medium such as a hard disk which is generally slower than primary storage devices . Alternatively the mass memory device may be a storage device such as a SCSI storage device.

The CPUs optionally may be coupled to a computer or telecommunications network e.g. an internet network or an intranet network using a network connection as shown generally at . With such a network connection it is contemplated that the CPUs might receive information from the network e.g. data associated with a restore process or might output information to the network e.g. data that has been processed by a fixed position delta reduction backup process or data that has been modified prior to being processed by a fixed position delta reduction backup application in the course of performing the above described method steps. Thus backup data may be transmitted over a network to be processed or to be stored to or retrieved from a remote storage device. For instance the network may be a storage area network SAN such as a fibre channel SAN. Accordingly the invention may be installed for use across a network such as the Internet thereby enabling data retrieval from and backup to disparate sources.

Although the foregoing invention has been described in some detail for purposes of clarity of understanding it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. For instance although the description refers to fixed length data blocks the disclosed embodiments may be implemented in systems storing data in the form of variable length data blocks where the length varies across position and or time. Therefore the described embodiments should be taken as illustrative and not restrictive and the invention should not be limited to the details given herein but should be defined by the following claims and their full scope of equivalents.

