---

title: Locking metadata associated with catalog items
abstract: Disclosed are various embodiments for locking metadata associated with catalog items. An identifier of an item in the item catalog and update metadata associated with the item are received. Responsive to the receipt, it is determined whether a lock against modification is associated with the identified item. Responsive at least in part to the determination that the identified item is associated with a lock, the identified item is left unmodified in the item catalog rather than modifying the identified item in accordance with the update metadata.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09430514&OS=09430514&RS=09430514
owner: Amazon Technologies, Inc.
number: 09430514
owner_city: Seattle
owner_country: US
publication_date: 20100924
---
Electronic commerce systems provide items for sale through item catalogs. Sometimes operators of the electronic commerce system allow third party vendors to access the item catalog so that the vendors can provide updates to item information such as price. Although the electronic commence operator retains some degree of control over these updates a mistake in the update data can nonetheless cause trouble for the electronic commerce operator.

The present disclosure relates to locking metadata associated with catalog items. Third party vendors provide update feeds for catalog items. These update feeds are ingested and processed by a system operated by the owner of the catalog which may be an electronic commerce operator. In processing the update feed the system determines whether an item in the update is currently locked against modification. If the item is currently locked the system leaves the item in the catalog as is instead of applying the metadata in update to the item in the catalog. The vendor providing the update feed may be notified that the update has not been applied.

If the item is locked the update may be queued for a later time. If the lock is no longer applicable at the later time e.g. expired disabled removed etc. the update may be removed from the queue and modified in accordance with metadata in the stored update. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing device that is in data communication with one or more administrator clients by way of a network . The computing device is also in data communication with one or more computing devices by way of a network . In various embodiments the network and the network may be the same network or a different network. The networks include for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing device may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience the computing device is referred to herein in the singular. Even though the computing device is referred to in the singular it is understood that a plurality of computing devices may be employed in various arrangements as described herein.

Various applications and or other functionality may be executed in the computing device according to various embodiments. Various data is stored in a data store that is accessible to the computing device . The data store may be representative of a plurality of data stores as can be appreciated.

The components executed on the computing device for example include an update manager and may also include other applications services processes systems engines or functionality not discussed in detail herein. The update manager is executed to apply updates to an item catalog .

The data stored in the data store includes for example an item catalog lock data and potentially other data which is associated with the operation of the update manager . In some embodiments the items in the item catalog are products offered for sale and in such embodiments the computing device may also include an electronic commerce application not shown .

Turning now from the computing device to the administrator client the administrator client is representative of a plurality of client devices that may be coupled to the network . The administrator client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer a personal digital assistant a cellular telephone a set top box a music player a web pad a tablet computer system a game console or other devices with like capability.

The administrator client may be configured to execute various applications such as a browser and or other applications. The browser may be executed in an administrator client for example to access and render network pages such as web pages or other network content served up by the computing device and or other servers. The administrator client may be configured to execute applications beyond browser such as for example email applications instant message applications and or other applications. The administrator client may utilize web services or other types of services to interact with the update manager . These web services for example may be implemented via a variety of middleware frameworks such as remote procedure calls service oriented architecture SOA representational state transfer REST and other frameworks.

Turning now from the administrator client to the computing device the computing device may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience the computing device is referred to herein in the singular. Even though the computing device is referred to in the singular it is understood that a plurality of computing devices may be employed in various arrangements as described above.

Various applications and or other functionality may be executed in the computing device according to various embodiments. The components executed on the computing device for example include an update feed publisher . The update feed publisher is executed to provide updates for the item catalog stored in the computing device . The components executed on the computing device may also include other applications services processes systems engines or functionality not discussed in detail herein.

Next a general description of the operation of the various components of the networked environment is provided. To begin the update manager receives an update for the item catalog from the update feed publisher . The update feed publisher maybe operated by an third party vendor which is external with respect to the electronic commerce operator. Modification to items in the item catalog is controlled by a data structure referred to herein as a lock. The update manager uses the lock data to determine whether a particular item within the item catalog is locked against updates. If the item is locked then the update manager may ignore the update or may queue the update for later processing. If the item is not locked the update manager applies the data contained within the received update to the item catalog .

The update manager provides an interface for operators to configure the locks. Using this interface an operator can for example create a lock for a particular item identifier enable and disable the lock for a particular item identifier set the time and or duration of a lock and take other actions some of which are described in more detail below.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the update manager according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the update manager as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the update manager receives an update for the item catalog from the update feed publisher . The received update may be in the form of an extensible markup language XML feed. The received update includes an item identifier which uniquely identifies an item within the item catalog . The received update also includes metadata for the identified item. Metadata may be in the form of attributes and values. Examples of metadata attributes for a music media item include title artist release date price etc. Examples of metadata attributes for a video media item include title release date price etc. If the item is digital media one of the metadata attributes may be content. For example metadata for a movie may include the movie itself as well as information about the movie.

In box the update manager accesses the lock data to determine whether the received update will be applied to the referenced item in the item catalog . In this regard the update manager looks for a lock which has the same item identifier as the received update. In some embodiments the locks in the lock data are indexed by item identifier.

If no matching lock is found in box then the item is not locked and the update manager moves to box in order to apply the update. In some embodiments if a matching lock is found box performs a further check to determine if the lock is currently disabled. If the lock is present but disabled the update manager moves to box to apply the update. In some embodiments a lock may be enabled for a specific period e.g. time range date range etc. 

If in box the update manager determines that the received update will not be applied then the update manager skips the update operation in box and instead moves to box . The result is that the item referenced in the received update remains unmodified. In box the update manager queues the update for later application. The update manager removes the queued update from the queue at a future time. If the lock has been disabled expired removed etc. then the update to the item in the item catalog is applied to the item catalog . The removal from the queue may be triggered by a timer or may be triggered by a change in lock status.

After queuing the update in box the update manager reports that no update has occurred. The components that are notified through this report may include for example a third party vendor associated with the update feed publisher an internal system operator associated with the item catalog etc. Various forms of notifications may be used for example an email message to one or more addresses a simple messaging service SMS text message and any other suitable form of notification. After this notification the process ends.

If in box the update manager determines that the update will be applied in box the update manager modifies the item in the item catalog in accordance with the received update. Such action may involve parsing the update to extract particular attributes to be modified along with particular values to be written to the item catalog . After the update in box the process ends.

It is not necessary that the update in box be applied in real time only that the update is committed. In contrast the queuing of the update in box does not commit to an update but rather provides another opportunity to check again later for a change in lock conditions e.g. has the lock been disabled expired removed etc. 

The process shown in is described in terms of an update which refers to a single item. However the process can be modified to handle more than one item in an update as will be appreciated. Also although the example embodiment of includes queuing in box and notification in box other embodiments omit one or both of these operations.

With reference to shown is a flowchart that provides another example of the operation of a portion of the update manager according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the update manager as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the update manager receives an update for the item catalog from the update feed publisher . The update may be in the form of an extensible markup language XML feed. The received update includes an item identifier which uniquely identifies an item within the item catalog . The received update also includes metadata for the identified item. Examples of metadata attributes for a music media item include title artist release data price etc. Examples of metadata attributes for a video media item include title release data price etc. If the item is digital media one of the metadata attributes may be content. For example metadata for a movie may include the movie itself as well as information about the movie.

In box the update manager accesses the lock data to determine whether the received update will be applied to particular metadata attributes of the item. Where the lock used in the embodiment of controls access to the item as a whole the lock used in the embodiment of controls access on a per attribute level. That is each item in the item catalog has a set of possible metadata attributes and individual attributes within the metadata can be locked against modification. In some embodiments the lock for an item is associated with a bitmap with one bit for each possible attribute of the item.

In this regard in box the update manager looks for a lock which has the same item identifier as the received update. If no matching lock is found by the update manager in box then the item is not locked and the update manager moves to box . In box the update manager applies the update to the item catalog using all the attributes contained in the received update. Having applied the update the update manager completes its process.

If in box the update manager does find a matching lock the update manager moves to box . In box the update manager begins an iteration loop to process the individual metadata attributes contained in the update. Starting with the first attribute in the update the update manager moves to box . In box the update manager parses the update to extract the current attribute. The update manager retrieves attribute specific information for the matching lock from the lock data and compares the lock attributes with the current attribute. If the comparison in box indicates that the current attribute is not locked the update manager moves to box . If in box the update manager determines that the current attribute is locked the update manager moves to box .

In box having determined that the current attribute is not locked the update manager applies the update of the current attribute to the item catalog . The update manager then continues the iteration loop at box with the next attribute contained in the update.

In box having determined that the current attribute is locked the update manager skips the update operation box and instead queues the update for the current attribute. A queued attribute update may be removed from the queue and applied at a future time for example when the attribute specific lock is disabled expired removed etc. The update manager then moves to box which sets up the iteration loop for the next attribute which is then processed starting at box . When all attributes in the received update have been processed the update manager completes.

Some embodiments of process shown in also notify one or more components when no update is performed due to a lock. The notification may be accomplished by a notification for each locked attribute a notification for a group of locked attributes a notification for the locked item or other variations thereof. The notified components may include for example a third party vendor an internal system operator etc. Various forms of notifications may be used for example an email message to one or more addresses a simple messaging service SMS text message and any other suitable form of notification.

Moving on to shown is a schematic block diagram of the computing device according to an embodiment of the present disclosure. The computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor is an update manager and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java Javascript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the update manager and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of and show the functionality and operation of an implementation of portions of the update manager . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of and show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in the flowchart of or may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in or may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including update manager that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

