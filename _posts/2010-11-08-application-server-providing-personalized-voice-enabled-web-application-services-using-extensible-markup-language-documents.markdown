---

title: Application server providing personalized voice enabled web application services using extensible markup language documents
abstract: A unified web-based voice messaging system provides voice application control between a web browser and an application server via an hypertext transport protocol (HTTP) connection on an Internet Protocol (IP) network. The application server, configured for executing a voice application defined by XML documents, selects an XML document for execution of a corresponding voice application operation based on a determined presence of a user-specific XML document that specifies the corresponding voice application operation. The application server, upon receiving a voice application operation request from a browser serving a user, determines whether a personalized, user specific XML document exists for the user and for the corresponding voice application operation. If the application server determines the presence of the personalized XML document for a user-specific execution of the corresponding voice application operation, the application server dynamically generates a personalized HTML page having media content and control tags for personalized execution of the voice application operation; however if the application server determines an absence of the personalized XML document for the user-specific execution of the corresponding voice application operation, the application server dynamically generates a generic HTML page for generic execution of the voice application operation. Hence, a user can personalize any number of voice application operations, enabling a web-based voice application to be completely customized or merely partially customized.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08099283&OS=08099283&RS=08099283
owner: Cisco Technology, Inc.
number: 08099283
owner_city: San Jose
owner_country: US
publication_date: 20101108
---
This application is a continuation of U.S. application Ser. No. 11 108 119 filed Apr. 18 2005 which is a continuation of U.S. application Ser. No. 09 567 223 filed May 9 2000 and issued on May 31 2005 as U.S. Pat. No. 6 901 431 which claims priority from provisional U.S. application No. 60 152 316 filed Sep. 3 1999 the disclosure of which is incorporated in its entirety herein by reference.

The present invention relates to generating and executing voice enabled web applications within a hypertext markup language HTML and hypertext transport protocol HTTP framework.

The evolution of the public switched telephone network has resulted in a variety of voice applications and services that can be provided to individual subscribers and business subscribers. Such services include voice messaging systems that enable landline or wireless subscribers to record playback and forward voice mail messages. However the ability to provide enhanced services to subscribers of the public switched telephone network is directly affected by the limitations of the public switched telephone network. In particular the public switched telephone network operates according to a protocol that is specifically designed for the transport of voice signals hence any modifications necessary to provide enhanced services can only be done by switch vendors that have sufficient know how of the existing public switched telephone network infrastructure.

An open standards based Internet protocol IP network such as the World Wide Web the Internet or a corporate intranet provides client server type application services for clients by enabling the clients to request application services from remote servers using standardized protocols for example hypertext transport protocol HTTP . The web server application environment can include web server software such as Apache implemented on a computer system attached to the IP network. Web based applications are composed of HTML pages logic and database functions. In addition the web server may provide logging and monitoring capabilities.

In contrast to the public switched telephone network the open standards based IP network has enabled the proliferation of web based applications written by web application developers using ever increasing web development tools. Hence the ever increasing popularity of web applications and web development tools provides substantial resources for application developers to develop robust web applications in a relatively short time and an economical manner. However one important distinction between telephony based applications and web based applications is that telephony based applications are state aware whereas web based applications are stateless.

In particular telephony applications are state aware to ensure that prescribed operations between the telephony application servers and the user telephony devices occur in a prescribed sequence. For example operations such as call processing operations voicemail operations call forwarding etc. require that specific actions occur in a specific sequence to enable the multiple components of the public switched telephone network to complete the prescribed operations.

The web based applications running in the IP network however are state less and transient in nature and do not maintain application state because application state requires an interactive communication between the browser and back end database servers accessed by the browsers via a HTTP based web server. However an HTTP server provides asynchronous execution of HTML applications where the web applications in response to reception of a specific request in the form of a URL from a client instantiate a program configured for execution of the specific request send an HTML web page back to the client and terminate the program instance that executed the specific request. Storage of application state information in the form of a cookie is not practical because some users prefer not to enable cookies on their browser and because the passing of a large amount of state information as would normally be required for voice type applications between the browser and the web application would substantially reduce the bandwidth available for the client.

Commonly assigned copending application Ser. No. 09 480 485 filed Jan. 11 2000 entitled Application Server Configured for Dynamically Generating Web Pages for Voice Enabled Web Applications discloses an application server that executes a voice enabled web application by runtime execution of extensible markup language XML documents that define the voice enabled web application to be executed. The application server includes a runtime environment that establishes an efficient high speed connection to a web server. The application server in response to receiving a user request from a user accesses a selected XML page that defines at least a part of the voice application to be executed for the user. The XML page may describe any one of a user interface such as dynamic generation of a menu of options or a prompt for a password an application logic operation or a function capability such as generating a function call to an external resource. The application server then parses the XML page and executes the operation described by the XML page for example dynamically generating an HTML page having voice application control content or fetching another XML page to continue application processing. In addition the application server may access an XML page that stores application state information enabling the application server to be state aware relative to the user interaction. Hence the XML page which can be written using a conventional editor or word processor defines the application to be executed by the application server within the runtime environment enabling voice enabled web applications to be generated and executed without the necessity of programming language environments.

Hence web programmers can write voice enabled web applications using the teachings of application Ser. No. 09 480 485 by writing XML pages that specify respective voice application operations to be performed. The XML documents have a distinct feature of having tags that allow a web browser or other software to identify information as being a specific kind or type of information. In particular commonly assigned copending application Ser. No. 09 501 516 filed Feb. 1 2000 entitled Arrangement for Defining and Processing Voice Enabled Web Applications Using Extensible Markup Language Documents discloses an arrangement for defining a voice enabled web application using extensible markup language XML documents that define the voice application operations to be performed within the voice application. Each voice application operation can be defined as any one of a user interface operation a logic operation or a function operation. Each XML document includes XML tags that specify the user interface operation the logic operation and or the function operation to be performed within a corresponding voice application operation the XML tags being based on prescribed rule sets that specify the executable functions to be performed by the application runtime environment. Each XML document may also reference another XML document to be executed based on the relative position of the XML document within the sequence of voice application operations to be performed. The XML documents are stored for execution of the voice application by an application server in an application runtime environment.

Hence the XML document described in the application Ser. No. 09 501 516 which can be written using a conventional editor or word processor defines the application to be executed by the application server within the runtime environment enabling voice enabled web applications to be generated and executed without the necessity of programming language environments.

Web based service providers have offered personalized web pages to attract users to their web sites. In particular web applications today are written using a combination of HTML user interface pages and common gateway interface CGI programs enabling the user interface to be customized through HTML without disrupting the application logic and associated functions contained in the CGI program. Two classes of customization typically are found in personalized web pages the first being interaction by a user with a web application that provides a presence for the user the second class of customization involves a user interacting with an application that provides assistance for the user. An example of the first class of customization is when the web home page provides a customized presence for the user that others who may not have any applications of their own can interact with and select options from. An example of the second class of customization are pages such as My Yahoo or My Netscape that provide a customized presence for the user to interact with the web application that is specific to the user s needs.

The personalized web pages however require a client side data record i.e. a cookie to be sent between the browser and the web server. In particular cookies are needed to enable a web server to track a user s status as the user moves from one web page to another as the user navigates through different web page the web server updates the user s cookie eliminating the necessity for the user to identify himself or herself by user name and password for each web page access.

As described above however the use of cookies is not practical in voice enabled web applications due to security concerns and the large amount of data that would be needed for the voice enabled web applications. Moreover there has to date been no proposed arrangement that enables a user to personalize a unified messaging system application such as a voice messaging application as conventional telephony type voicemail systems are strictly limited to the parameters specified by the central programming in the voicemail system.

There is a need for an arrangement that enables a user to personalize his or her voice enabled web applications especially without the necessity of client side data records such as cookies.

These and other needs are attained by the present invention where an application server configured for executing a voice application defined by XML documents selects an XML document for execution of a corresponding voice application operation based on a determined presence of a user specific XML document that specifies the corresponding voice application operation. The application server upon receiving a voice application operation request from a browser serving a user determines whether a personalized user specific XML document exists for the user and for the corresponding voice application operation. If the application server determines the presence of the personalized XML document for a user specific execution of the corresponding voice application operation the application server dynamically generates a personalized HTML page having media content and control tags for personalized execution of the voice application operation however if the application server determines an absence of the personalized XML document for the user specific execution of the corresponding voice application operation the application server dynamically generates a generic HTML page based on a generic XML page for generic execution of the voice application operation. Hence a user can personalize any number of voice application operations enabling a web based voice application to be completely customized or merely partially customized.

One aspect of the present invention provides a method in an application server for executing a voice application. The method includes receiving an HTTP request requesting a prescribed voice application operation from a user. The method also includes selectively executing one of a generic XML document that specifies the prescribed voice application operation and a user specific XML document that specifies the prescribed voice application operation personalized for the identified user based on a determined presence of the user specific XML document for generation of an HTML page having media content corresponding to the prescribed voice application operation. The selected execution of either a generic XML document or a user specific XML document enables a user to personalized his or her voice application as desired. Hence a user can personalize selected XML pages in order to provide a personalized interface as well as personalized voice application logic and voice application functions such as procedure calls to external databases. Hence a user can create a voice home page to greet callers with customized options and or a customized interface for accessing and retrieval of messages from the user s mailbox.

Another aspect of the present invention provides a system configured for configured for executing a voice application. The application server includes a hypertext transport protocol HTTP interface for receiving an HTTP request specifying execution of a prescribed voice application operation for an identified user. The application runtime environment is configured for dynamically generating in response to the HTTP request a first hypertext markup language HTML document having media content for execution of the voice application operation for the identified user based on execution of a selected XML document the application runtime environment selecting one of a generic XML document that specifies the prescribed voice application operation and a user specific XML document that specifies the prescribed voice application operation personalized for the identified user based on a determined presence of the user specific XML document. Hence the application server generates an HTML page for execution of the voice application operation by a browser based on the determined presence of a user specific XML document enabling a user to personalize their application interface and or voice application functions.

Additional advantages and novel features of the invention will be set forth in part in the description which follows and in part will become apparent to those skilled in the art upon examination of the following or may be learned by practice of the invention. The advantages of the present invention may be realized and attained by means of instrumentalities and combinations particularly pointed out in the appended claims.

As shown in each of the clients tiny clients skinny clients thin clients and fat clients are able to communicate via a single unified architecture that enables voice communications services between different clients regardless of whether the client actually has browser capabilities. Hence the fat client and the thin client are able to execute voice enabled web applications without any hardware modification or any modification to the actual browser rather the browsers in the clients and merely are provided with an executable voice resource configured for providing browser audio control described below.

The user devices and illustrated as a cordless telephone a fax machine having an attached telephone and an analog telephone are referred to herein as skinny clients defined as devices that are able to interface with a user to provide voice and or data services e.g. via a modem but cannot perform any control of the associated access subnetwork.

The wireless user devices and illustrated as a cellular telephone e.g. AMPS TDMA or CDMA a handheld computing device e.g. a 3 Com Palm Computing or Windows CE based handheld device and a pager are referred to as tiny clients. Tiny clients are distinguishable from skinny clients in that the tiny clients tend to have even less functionality in providing input and output interaction with a user rely exclusively on the executable application in an access subnetwork to initiate communications in addition tiny clients may not be able to send or receive audio signals such as voice signals at all. p Hence the skinny clients and and the tiny clients and access the unified voice messaging services in the unified network via a proxy browser configured for providing an IP and HTTP interface for the skinny clients and the tiny clients. In particular browsers operate by interpreting tags within a web page supplied via an HTTP connection and presenting to a user media content information e.g. text graphics streaming video sound etc. based on the browser capabilities if a browser is unable to interpret a tag for example because the browser does not have the appropriate executable plug in resource then the browser typically will ignore the unknown tag. Hence the proxy browser can provide to each of the skinny clients and tiny clients the appropriate media content based on the capabilities of the corresponding client such that the cordless telephone and telephone would receive analog audio signals played by the proxy browser and no text information unless a display is available the fax machine and pager would only receive data text information and the cellular telephone and the handheld computing device would receive both voice and data information. Hence the proxy browser interfaces between the IP network and the respective local access devices for the skinny clients and the tiny clients to provide access to the unified messaging network .

The proxy browser and the web browsers within the fat client and the thin client execute voice enabled web applications by sending data and requests to a web server and receiving hypertext markup language HTML web pages from the web server according to hypertext transport protocol HTTP . The web server serves as an interface between the browsers and an application server that provides an executable runtime environment for XML voice applications . For example the web server may access the application server across a common gateway interface CGI by issuing a function call across an application programming interface API or by requesting a published XML document or an audio file requested by one of the browsers or . The application server in response to receiving a request from the web server may either supply the requested information in the form of an HTML page having XML tags for audio control by a voice resource within the browser or may perform processing and return a calculated value to enable the browser or to perform additional processing.

The application server accesses selected stored XML application pages i.e. pages that define an application and in response generate new HTML pages having XML tags during runtime and supply the generated HTML pages having XML tags to the web server . Since multiple transactions may need to occur between the browser or and the application server the application server is configured for storing for each existing user session a data record referred to as a brownie that identifies the state of the existing user session hence the application server can instantiate a procedure return the necessary data and terminate the procedure without the necessity of maintaining the instance running throughout the entire user session.

Hence the application server executes voice application operations from a stored XML document based on a transient application state where the application server terminates the application instance after outputting the generated XML media information to the browser or .

According to the disclosed embodiment users are able to create personalized voice applications where a user may create a voice homepage to greet callers with customized options. Alternatively a user may create a customized interface for accessing their mailbox and retrieving their messages. In particular commonly assigned copending application Ser. No. 09 559 637 filed Apr. 28 2000 entitled Browser Based Arrangement for Developing Voice Enabled Web Applications Using Extensible Markup Language Documents and having issued as U.S. Pat. No. 6 578 000 discloses in detail an arrangement for the forms based methodology for defining voice enabled web applications using XML documents. A browser based executable voice application defined by XML documents can be created or modified by users lacking expertise in application development or XML syntax by use of the forms based representation of the application defining XML documents. In particular the application server is configured for providing an HTML forms representation of the application defining XML documents. The application server is configured for parsing an existing XML document that defines a voice application operation inserting selected XML tag data that specify application parameters into entry fields of an HTML based form and outputting the HTML based form to the browser . The browser upon receiving the HTML document having the form specifying entry fields for application parameters for the XML document displays the form in a manner that enables a user of the voice application to create or modify voice application operations. After the user has input new application parameters or modified existing application parameters in the entry fields the user submits the form to a prescribed URL that is recognized by the application server . The application server upon receiving the form from the corresponding web browser can then create or modify the XML document by inserting the input application parameters as XML tag data in accordance with XML syntax. The application server can then store the XML document for later execution for the user.

According to the disclosed embodiment the forms based arrangement for defining voice enabled web applications is extended to enable users to personalize application defining XML documents. Once the user has created personalized XML documents the application server can provide a personalized voice application based on detecting a user specific XML document that specifies the prescribed voice application operation personalized for the identified user. If the application server detects an absence of any user specific XML document for the corresponding voice application operation the application server executes a generic XML document for execution of the prescribed was application operation.

Hence a user can develop a personalized voice application by accessing forms generated by the application server followed by execution of selected XML documents by the application server in order to provide a user specific voice homepage to greet the callers with customized options or alternately a user customized interface for accessing the user s mailbox. A brief description will first be provided from the application Ser. No. 09 559 637 of defining voice applications to illustrate how a user can personalize a voice application followed by a description of the methodology for selectively executing a personalized voice application according to an embodiment of the present invention.

Four types of XML documents are used by the application server to execute web applications menu documents activity documents decision documents and brownies . The menu documents activity documents and decision documents are XML documents stored in the document database or the user specific directories that define user interface and boolean type application logic for a web application hence are considered executable by the application server . The brownie document stored in a separate registry in is an XML data record used to specify application state and user attribute information for a given XML application during a user session. Hence the XML documents define user interface logistics and tie services and application server events together in a meaningful way forming a coherent application or sets of applications. Additional details regarding the definition of executable voice applications using XML documents are described in the application Ser. No. 09 501 516.

Certain development tools having direct access to the application server can be used to establish context information used by the application runtime environment within the application server for execution application operations based on parsing of XML documents. In particular development tools such as a graphic based development system a forms based development system an editor based development system or an outline based development system may be used to define XML tags and procedure calls for the application runtime environment. The development tools may be used to establish an application and resource database to define low level operations for prescribed XML tags for example dynamically generating an XML menu page using executable functions specified by a menu rule set in response to detecting a menu tag performing a logical operation using executable functions specified by a logic rule set in response to a decision tag or fetching an audio .wav file in response to detecting a sound tag.

The development tools may be used to establish an application programming interface API library e.g. a SQL interface for the application runtime environment enabling the application server to issue prescribed function calls to established services such as IMAP LDAP or SMTP. The library may be implemented as dynamically linked libraries DLLs or application programming interface API libraries. If desired the development tools may also be used to generate an XML application as a stored text file without the use of the forms generated by the application server described below.

A user of the browser typically sends a request to the application server via the web server for a voice application operation for example using an interface executable by a browser or for accessing new voice mail messages new facsimile messages new e mail messages and the like. A user of the browser also can send a request to the application server for creating or modifying an XML document defining a voice application operation via a development tool common gateway interface CGI . In particular the web browser posts a user input for an application operation i.e. an HTTP request to a first URL for the voice application operation. In contrast the web browser posts to another URL for accessing the development tool CGI. Accessing the application server via the CGI enables the application server to access a selected XML document for example the XML document illustrated in in order to dynamically generate a form illustrated in that specifies selected application parameters of the XML document . Hence accessing the application server by posting the user input according to a first URL causes execution of the XML document whereas accessing the application server via the CGI causes the application server to generate a form that specifies the contents of the XML document .

Hence accessing the application server via the CGI enables the web browser to perform different operations on the selected XML document described in further detail in the application Ser. No. 09 559 637.

The application server also parses the XML option tags for insertion of menu application parameters into the respective menu entry fields . For example the application server inserts the menu application parameters and into the respective menu entry fields and and inserts the menu application parameters and into the respective menu entry fields and generated by the HTML document in step .

The application server also specifies an entry field that enables the browser user to specify the filename of the XML document i.e. the designation used by the application server when referring to the current state . In addition the application server specifies an addition button that enables users to add menu options to an XML document hence if the user enters a new file name within the entry field and presses the addition button the browser posts to a prescribed URL to cause the application server to generate a new XML document having a name specified in the field and to generate another HTML form having an additional menu entry field for the new prompt.

The application server also specifies within the HTML form prescribed URLs associated with command hyperlinks such that posting the form by the browser to a corresponding one of the URLs results in a corresponding operation performed by the application server .

Hence the HTML entry form generated by the application server provides all the fields and command functions necessary for a user to create or modify a new or existing XML document regardless of whether the XML document is a menu based XML document or a non menu XML document.

The above described arrangement enables a user lacking programming skills or knowledge of XML syntax to personalize his or her voice enabled web applications defined in XML documents by accessing default XML documents modifying the default documents using the form and posting the form back to the application server via the CGI for storage as a personalized XML document. As described below the application server stores the personalized document separately from the generic XML application documents stored in the XML document database .

The application server also includes a runtime environment for execution of the parsed XML documents. As described above the runtime environment may selectively execute any one of user interface operation a logic operation or a procedure call as specified by the parsed XML document by executing a corresponding set of executable functions based on the rule set for the corresponding operation. In particular the application runtime environment includes a tag implementation module that implements the XML tags parsed by the XML parser . The tag implementation module performs relatively low level operations for example dynamically generating an XML menu page using executable functions specified by a menu rule set in response to detecting a menu tag performing a logical operation using executable functions specified by a logic rule set in response to a decision tag or fetching an audio .wav file in response to detecting a sound tag. Hence the tag implementation module implements the tag operations that are specified within the XML framework of the stored XML documents.

The application server also includes a set of libraries that may be implemented as dynamically linked libraries DLLs or application programming interface API libraries. The libraries enable the runtime environment to implement the procedures as specified by the appropriate XML document. For example the application server may issue a function call to one of a plurality of IP protocol compliant remote resources or according to IMAP protocol LDAP Protocol or SMTP protocol respectively described below. For example the PHP hypertext processor includes executable routines capable of accessing the IMAP or LDAP services. Note that the mechanisms for accessing the services or should be established within the application server before use of XML documents that reference those services. Once the services or are established the application runtime environment can perform a function operation by using executable functions specified by a function call rule set.

The arrangement for executing a personalized voice enabled web application will now be described. As described above with respect to and a user is able to personalize his or her voice application by sending an HTTP request to the application server for example via a CGI interface for generation of an HTML document that specifies the form for modifying application parameters of a prescribed XML document. The application server responds to the HTTP request by accessing application document database for retrieval of the selected generic XML document and by generating the HTML document having the form with the selected application parameters. Once the user modifies i.e. personalizes the application parameters within the form and posts the completed form to a prescribed URL via the CGI interface the application server generates a new user specific XML document that specifies the voice application operations as personalized by the corresponding user and stores the user specific XML document in a user specific database.

Hence the use of user specific XML documents enables a user to override pre existing generic XML documents for certain application operations. Hence a subscriber can create a personalized unified voice e mail and fax messaging system for other users attempting to access the subscriber as well as a personalized user interface for a subscriber accessing his or her mailbox for retrieval of messages.

As shown in the application server stores in step the personalized XML document generated based on the posted form in the corresponding user directory of an external database such as the IMAP data store or the LDAP directory . The application server will later receive an HTTP request in step that specifies a user identity and a voice application operation. For example the HTTP request may specify initiation of a unified voice messaging routine to enable a calling party to leave a message for the user alternatively the HTTP request may specify initiation of a message retrieval routine by the user specified by the user identity.

The application server then checks in step whether the user having generated the HTTP request is already logged into an existing application session for example by determining whether the URL in the HTTP request specifies a pre existing valid session identifier for a brownie within the registry .

If the application server determines that the user is not logged in the application server retrieves in step from the external database e.g. the IMAP message storage or the LDAP directory an index that specifies all the user specific XML documents available for the corresponding user. In particular the index eliminates unnecessary function calls by providing the application server with information necessary to determine whether the user has a corresponding user specific XML document personalized for the corresponding voice application operation the application server generates a new brownie having a valid session identifier and user ID and stores in step the index within the brownie. Hence the index within the brownie enables the application server to determine the presence of a user specific XML document for the corresponding voice application operation without the necessity of repeated access of the IMAP or LDAP external databases.

If in step the application server detects a valid session identifier within the URL the application server uses the session identifier to obtain the corresponding brownie based on the user identity from the registry in step . The application server then parses the XML tags within the brownie to determine in step whether the brownie includes an index that specifies a personalized XML document for the requested voice application operation. If in step the application server detects the presence of the user specific XML document from the index the application server accesses in step the personalized XML document from the external database e.g. the IMAP message storage or the LDAP directory based on the user identifier specified in the brownie and based on the requested application operation. If in step the application server detects an absence of any personalized XML document for the requested voice application operation the application server accesses in step the generic XML document from the XML document database .

The application server then executes in step the accessed XML document e.g. the personalized XML document or the generic XML document and dynamically generates an HTML page having XML control tags for media control of text audio files e.g. .wav files etc. The HTML page is output by the web server to the web browser or for execution of the voice application operation.

XML document by posting an HTTP put command in step to the custom XML server . In particular the application server generates a URL that specifies the host name of the custom XML server the user ID of the user having generated the personalized XML document as a folder within the database and the name of the XML document. It should be noted that the name of the personalized XML document and the generic XML document typically are identical enabling the personalized XML document to simply be substituted for the generic XML document during execution by the application runtime environment .

The application server will later receive an HTTP request in step similar to step in . If the application server determines in step that the user is logged in the application server accesses the brownie in step otherwise the application server creates a new brownie for the new user session in step .

The application server then parses the brownie to determine the application state for example the name of the next XML document to be executed. The application server outputs in step an HTTP get request to the custom XML server based on the user identifier specified in the brownie and the application operation name. For example the application server generates a URL that specifies the host name the folder for the corresponding user and the name of the application operation or the XML document name to be retrieved for execution.

The custom XML server accesses the database in response to the HTTP get request and generates an HTTP response based on whether the requested XML document was found for the corresponding user. For example the custom XML server outputs an HTTP response that includes the user specific XML document in response to detecting a match between the user identity for the folder and the user identifier specified within the HTTP get request and a match between the voice application operation specified in the HTTP get request and a function identifier i.e. the name of the stored XML document . However if the custom XML server is not detect a match in either the identified user or the requested was application operation the XML server outputs an HTTP response indicating an unavailability of the requested user specific XML document.

The application server determines in step whether the HTTP response from the custom XML server includes the requested XML document. If the HTTP response includes the XML document the application server accesses the personalized XML document from the HTTP response in step and dynamically generates the HTML page in step similar to step . However if the application server determines that the HTTP response specifies that the requested XML document is not available the application server accesses in step the generic XML document from the document database and dynamically generates the corresponding HTML page by parsing the generic XML document in step .

According to the disclosed embodiment personalized XML documents are stored and retrieved by an application server configured for execution of voice enabled web applications defined by XML documents. Hence users can create a voice homepage to greet callers with customized options as well as a customized interface for accessing their mailbox for retrieval of messages without any modification to existing document used to define a predetermined sequence of voice application operations.

While this invention has been described in connection with what is presently considered to be the most practical and preferred embodiment it is to be understood that the invention is not limited to the disclosed embodiments but on the contrary is intended to cover various modifications and equivalent arrangements included within the spirit and scope of the appended claims.

