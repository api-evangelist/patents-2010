---

title: Graphical user interface architecture for namespace and storage management
abstract: A graphical user interface (GUI) architecture is configured to enable efficient management of resources in a storage system environment. The GUI architecture is embodied within a namespace and storage management (NSM) application as a GUI toolkit configured to produce reusable GUI components, such as a navigation frame, a wizard and a dialog box. In particular, the reusable wizard allows users to make intelligent choices toward successful completions of desired actions by, e.g., only requesting information needed to accomplish those actions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08065346&OS=08065346&RS=08065346
owner: NetApp, Inc.
number: 08065346
owner_city: Sunnyvale
owner_country: US
publication_date: 20100226
---
The present application is a continuation of commonly assigned U.S. patent application Ser. No. 11 413 883 which was filed on Apr. 28 2006 now U.S. Pat. No. 7 698 351 by Jeffrey Hing et al. for a GUI Architecture for Use in Namespace and Storage Management and is hereby incorporated by reference.

The present invention is related to the following commonly assigned U.S. patent application Ser. No. 11 414 593 titled Namespace and Storage Management Application Infrastructure for Use in Management of Resources in a Storage System Environment filed herewith and Ser. No. 11 384 804 titled System and Method for Integrating Namespace Management and Storage Management in a Storage System Environment filed Mar. 20 2006 which applications are hereby incorporated by reference.

The present invention relates to storage systems and more specifically to a graphical user interface for use in management of resources in a storage system environment.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes an operating system that functionally organizes the system is by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system generally provides its storage services through the execution of software modules such as processes. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

The storage system may be further configured to operate according to a client server model of information delivery to thereby allow many clients to access information stored on the system. In this model the storage system may be embodied as file server executing an operating system such as the Microsoft Windows operating system hereinafter Windows operating system . Furthermore the client may comprise an application executing on an operating system of a computer that connects to the server over a computer network such as a point to point link shared local area network wide area network or virtual private network implemented over a public network such as the Internet. Each client may request the services of the server by issuing storage access protocol messages in the form of packets to the server over the network. By supporting a plurality of storage e.g. file based access protocols such as the conventional Common Internet File System CIFS and the Network File System NFS protocols the utility of the server is enhanced.

To facilitate client access to the information stored on the server the Windows operating system typically exports units of storage e.g. CIFS shares. As used herein a share is equivalent to a mount point or shared storage resource such as a folder or directory that stores information about files or other directories served by the file server. A Windows client may access information in the directory by mounting the share and issuing a CIFS protocol access request that specifies a uniform naming convention UNC path to the share. The UNC path or pathname is an aspect of a Windows networking environment that defines a way for a client to refer to a unit of storage on a server. The UNC pathname is prefixed with the string to indicate resource names on a network. For example a UNC pathname may comprise a server name a share directory name and a path descriptor that collectively reference a unit of storage or share. Thus in order to access the share the client typically requires knowledge of the specific physical location i.e. the identity of the server exporting the share.

Instead of requiring the client to provide the specific identity of the file server exporting the share it is desirable to only require a logical pathname to the share. That is it is desirable to provide the client with a globally unique pathname to the share without reference to the file server. The conventional Distributed File System DFS namespace service provides such a solution in a Windows environment through the creation of a namespace that removes the specificity of server identity. DFS is well known and described in DCE 1.2.2 1997 which is hereby incorporated by reference. As used herein a namespace is a view of shared storage resources such as shares from the perspective of a client. The DFS namespace service is generally implemented using one or more DFS servers and distributed components in a network.

Using the DFS service it is possible to create a unique pathname in the form of a UNC pathname for a storage resource that a DFS server translates to an actual location of the resource share in the network. However in addition to the DFS namespace provided by the Windows operating system there are many other namespace services provided by various operating system platforms including the NFS namespace provided by the conventional Unix operating system. Each service constructs a namespace to facilitate management of information using a layer of indirection between a file server and client accessing a shared storage resource share on the server. For example a share may be connected or linked to a link point link in DFS terminology or a mount point in NFS terminology to hide the machine specific reference to the share. By referencing the link point the client can automatically access information on the storage resource of the specific machine. This allows an administrator user to store the information on any server in the network by merely providing a reference to the information or share . However these namespaces are typically services created on heterogeneous server platforms which leads to incompatibility and non interoperability with respect to management of the namespaces by the user. For example the DFS namespace service is generally limited to Windows based operating system platforms whereas the NFS namespace service is generally limited to Unix based operating system platforms.

The Virtual File Manager VFM developed by NuView Inc. and available from Network Appliance Inc. NetApp provides a namespace service that supports various protocols operating on various file server platforms such as NetApp filers and DFS servers. The VFM namespace service is well known and described in 4.0 2001 2003 and 4.0 2001 2003.

A large scale storage system environment may include many e.g. hundreds of storage systems hosting resources embodied as e.g. storage and namespace objects. As used herein namespace objects include namespaces link points and shares whereas storage objects include servers files and disks. In order to perform namespace and storage management in such a large scale storage system environment it is desirable to provide a graphical user interface GUI of a management console that enables users to is manage multiple storage system resources efficiently e.g. as one or more groups of managed objects.

In addition it is desirable to provide a GUI having an architecture that produces GUI components such as dialog boxes dialogs and wizards which can be reused with various applications executing on the management console. As used herein a dialog is a movable window that appears on a computer screen of the NSM console and that provides status as well as available options for an application executing on the console. A wizard is an interactive utility that may be implemented as a sequence of dialogs adapted to guide a user through an operation flow inputting information as required by the flow.

A simple operation flow as embodied in a wizard typically comprises a fixed number of pre defined steps organized in a serial or linear manner. However such a linear flow of operations is inflexible and may increase the number of steps the user must follow to initiate a task or action. As a result it is further desirable to identify dependencies in the operation flow and exploit those dependencies to provide an optimized flow of operations that limits the number of steps that the user need follow. Moreover it is desirable to provide a wizard that allows a user to make intelligent choices towards successful completion of a desired action using the optimized operation flow.

The disadvantages of the prior art are overcome by providing a graphical user interface GUI architecture configured to enable efficient management of resources in a storage system environment. The GUI architecture is embodied within a namespace and storage management NSM application as a GUI toolkit configured to produce reusable GUI components. The NSM application executes on a NSM console and interacts with an NSM server to integrate namespace management and storage management in the storage system environment. The NSM server in turn interacts with one or more remote agents installed on host machines in the environment to convey application programming interface API function calls hereinafter APIs that enable remote management of the resources.

According to an aspect of the invention the GUI toolkit includes an infrastructure adapted to produce GUI components such as a navigation frame a wizard and a dialog box dialog . The GUI toolkit illustratively comprises a GUI thread that cooperates with a GUI library to provide user interface constructs used to generate layouts for these GUI components. For example the layout of the dialog may be embodied in a plurality of forms each having an OK button and a CANCEL button with one form also having an APPLY button. The layout of the wizard may also be embodied in a plurality of forms each having a BACK button a NEXT button and a CANCEL button. The wizard layout further includes various panels that provide a flexible template for inserting images and content.

The layout of the navigation frame includes a forward backward utility having a FORWARD button and a BACK button that enables a user to switch forward and back respectively between navigation panels of the frame. Notably the navigation panels are simultaneously displayed within the frame and include a hierarchy panel an operations panel a view panel and a display panel the latter adapted to display managed objects. The managed objects may comprise namespace objects e.g. link points shares as well as data management objects e.g. servers files disks that may be displayed on the display panel in either iconic or report format.

According to another aspect of the invention the reusable wizard allows users to make intelligent choices toward successful completions of desired actions by e.g. only requesting information needed to accomplish those actions. This aspect of the invention involves cooperation between the GUI library and GUI thread to create wizard templates that enable an optimized operation flow for each action depending upon inputs by the user.

Each client may comprise an application executing on an operating system of a general purpose computer that interacts with the file servers in accordance with a client server model of information delivery. That is the client may request the services of a server and the server may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets including storage e.g. file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of e.g. files and directories.

To facilitate client access to the information stored on the server a file server executing e.g. the Windows operating system typically exports units of storage e.g. CIFS shares. A client may access information of the share by mounting the share and issuing a CIFS protocol access request that specifies a uniform naming convention UNC path to the share. Although the illustrative embodiment is directed to a Windows file server that is accessed using the CIFS protocol the invention described herein is not so limited and may also apply to other servers such as Unix file servers and NetApp filers that are accessible using other file access protocols such as the NFS protocol. The client connects to file server when accessing the share typically by specifying the IP address or identity of the file server.

However instead of requiring that the client know the specific identity of the server in order to access the share a namespace server such as the conventional Distributed File System DFS server provides a namespace service that removes the specificity of server identity. Using the DFS service a unique pathname in the form of a UNC pathname is created for the share that the DFS server translates to an actual location of the share in the network. For example assume a client application issues a CIFS request to access information of a share stored on a file server in the environment . The request is passed through various layers of the client s operating system including e.g. a CIFS redirector. Before issuing a CIFS packet directed to a UNC pathname specified by the client application the redirector contacts the DFS server to determine whether there is a different actual pathname needed to access the information. If so the DFS server returns that actual pathname to the redirector which then uses that pathname to create the CIFS packet for transmission over the network. The DFS namespace service thus provides a level of indirection to a share that resides on a file server in the environment .

Although the illustrative embodiment is directed to a DFS namespace service provided by the Windows operating system executing on a DFS server the invention described herein is not limited and may also apply to other namespace services such as the NFS namespace provided by the Unix operating system executing on a conventional Name Information Service NIS server. Each service constructs a namespace to facilitate management of information using a layer of indirection between a file server and client accessing a shared storage resource share on the server. However these namespace services are created on heterogeneous server platforms which lead to incompatibility and non interoperability with respect to management of different namespaces by e.g. an administrator user .

In the illustrative embodiment a namespace and storage management NSM server is provided that integrates namespace management and storage management in storage system environment . The NSM server includes an integrated management framework that provides an underlying infrastructure that supports various heterogeneous storage access protocols within a single logical namespace service. To that end the NSM server cooperates with a NSM console and a remote agent to create the integrated management framework. The integrated management framework in turn allows the NSM server to interact with any namespace server such as a DFS server configured to handle CIFS protocol requests or a NIS server configured to handle NFS protocol requests directed to namespace services.

An operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the server by inter alia invoking operations in support of storage services implemented by the server. In the illustrative embodiment the operating system is preferably the Windows operating system although it is expressly contemplated that any appropriate operating system such as the Unix operating system may be enhanced for use in accordance with the inventive is principles described herein. The operations invoked by the operating system are illustratively namespace and storage operations in support of an integrated management framework provided by the server. It will be apparent to those skilled in the art that other processor and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The NSM server generally provides its storage services through the execution of software modules such as processes. These services are illustratively implemented as separately scheduled processes and or daemons that execute in user space of operating system to provide the integrated management framework . As used herein a process refers to an instance of a program being executed by e.g. the processor and a thread is an instance of a sequence of the process s program code. is a schematic block diagram of the integrated management framework that may be advantageously used with the present invention. The integrated management framework provides a logical namespace service that is based on extensions to underlying storage management technology and other technological components. Notably these extensions are embodied as library functionality.

In the illustrative embodiment the underlying storage management technology is embodied as DataFabric Manager DFM technology available from Network Appliance Inc. Sunnyvale Calif. and described in 3.2 1994 2004 which is hereby incorporated by reference. Broadly stated the DFM technology comprises a set of coordinating processes including an application programming interface API server a scheduler an Event daemon a Monitor including a Discovery daemon and a database interface DBI configured to interact with an embedded database . The capabilities of these processes are extended to create the integrated namespace and storage management framework through the addition of NSM library functionality . The NSM library is illustratively implemented as various library modules each of which provides namespace and storage management actions embodied as APIs.

The integrated management framework exposes a set of interfaces e.g. an API interface that is used by the NSM console and a command line interface CLI used by a communication protocol. Illustratively the communication protocol is embodied as an XML over HTTP mechanism for APIs primarily because of its ability to describe data conveyed over the network as well as the transport without describing the actual storage access protocol. An example of a communication protocol that may be advantageously used with the present invention is the ZAPI protocol available from Network Appliance Inc. Such a protocol is also easily extensible and flexibly agnostic to binary formats of specific servers and clients to thereby operate efficiently in a heterogeneous environment.

In the illustrative embodiment the integrated management framework facilitates configuration and management of pathnames in the logical namespace. That is the underlying infrastructure of the framework allows a user to manage various pathnames exported by heterogeneous namespace service and protocol implementations within the logical namespace. This aspect of the framework involves creation of a layer of abstraction that presents to a client a notion of the logical namespace that is accessible via a particular storage access protocol. As noted the various heterogeneous namespace services are not interoperable with respect to user management the integrated framework extracts logical views e.g. pathnames from the namespaces exported by the heterogeneous services stores those pathnames in database and then configures the pathnames so that they are accessible in the logical namespace via the storage access protocol.

In storage and networking environments some operations can only be executed if a user such as a system administrator is logged into a server on which the operations are to be performed e.g. the NSM server. In other words a remote operation that is to be invoked on the server can only be performed if the user is logged into the server. The NSM console and remote agent of the integrated management framework address this problem. Illustratively the NSM console is a component of the is framework that executes an NSM application having a JAVA based interface and the remote agent is a software module installed on a host machine such as a server which manages a particular namespace e.g. a DFS server. Using the communication protocol the NSM console issues APIs to the NSM server which in turn issues APIs that are invoked on the remote agent to perform actions requested by the user.

Essentially the remote agent is a thin web server that includes programmatic glue to enable installation of plug in modules plug ins . An example of a plug in is a namespace management module that allows remote access and management of data e.g. pathnames by the NSM server . Notwithstanding the particular namespace the integrated management framework involves installation of a remote agent on a server that manages the particular namespace and interacts with the NSM server via APIs expose by the remote agent.

Illustratively the remote agent is installed on a machine that hosts a DFS server of a Windows DFS environment. The namespace management plug in module may in turn be installed on the remote agent to enable communication with the NSM server when accessing namespace information stored on the DFS server. Specifically the NSM server issues APIs in connection with the communication protocol to instruct the remote agent to perform certain actions. For example in order to construct or change pathnames in the logical namespace a user interacts with the NSM console to access that namespace by in effect invoking a set of APIs on the NSM server which in turn invokes a set of APIs on the remote agent . Once the NSM server has cooperated with the DFS server to construct the pathnames those servers are no longer involved in client data accesses.

It should be noted that the underlying directory data structures used in the logical namespace reside on the namespace server providing the particular namespace service such as a DFS server. That is the namespace server implements the basic namespace the NSM server provides a service for configuring that namespace. To that end the NSM server cooperates with the remote agent to acquire a copy of the namespace directory structures from the namespace server and stores the copy on the embedded database . The NSM server then cooperates with the NSM console to allow a user to manipulate configure the copy. Once configuration is complete the server cooperates with the remote agent to push store the manipulated copy of directory structures back to the namespace server .

The Monitor is illustratively embodied as a multi threaded process having a collection of individual monitor threads each of which is scheduled by the scheduler . The Monitor cooperates with the remote agent to communicate with one or more machines devices in the storage system environment using SNMP RSH etc to collect any type of storage or data namespace object information e.g. volume and or qtree information as well as information about namespace servers available in the environment and to that end functions as a data collector. Illustratively each monitor thread is configured to collect information about a particular object in the environment. Extensions to the Monitor described herein are directed to namespace and agent management each of which is illustratively embodied as an individual monitor thread.

As data is collected the Monitor determines whether it needs to notify any processes of some resulting condition. For example an individual monitor thread may detect a threshold and the occurrence of some type of event. As used herein an event is a synchronous notification with a severity attribute. By configuring thresholds the NSM server can determine when an event occurs. If a threshold is exceeded the Monitor communicates with the Event daemon to notify it of that event. Thus the Monitor is configured to detect certain events and in response generate event notifications to the Event daemon . The Event daemon then determines what if any further action is needed e.g. send an SMTP alert an email an SNMP trap and records the event in the embedded database .

The embedded database is illustratively implemented as a Sybase relational database that exports a set of Structured Query Language SQL function calls that enable storage retrieval of data such as namespace objects to from the database. A schema of the database is configured to efficiently capture characteristics of a namespace independent of the storage access protocol such as NFS or CIFS. The database is illustratively organized as a plurality of tables each of which can be accessed by processes within the NSM server. The DBI is illustratively embodied as a SQL interface to the database and its associated tables although it will be understood to those skilled in the art that the DBI may be embodied as any other type of database protocol interface depending on the actual implementation of the database e.g. an Oracle database.

The API server is illustratively embodied as a multi threaded process that is configured to implement the APIs used by the NSM console to access the database and manipulate information stored thereon. The API server also implements the communication protocol APIs used to interact with the remote agent . Accordingly extensions to the API server are primarily directed to those APIs required to manipulate the database and the remote agent. For example APIs are invoked by a user via the NSM console to manipulate modify update the embedded database . The API server updates the database with respect to user configuration requests and the Monitor periodically queries polls the database for any state information change. Depending upon the change the API server may cooperate with the Monitor to instruct data collection from the remote agent . After receiving the collected information from the remote agent the Monitor updates the database and the Event daemon .

In the illustrative embodiment the NSM application executes on the NSM console and interacts with the NSM server to integrate namespace management and storage management in storage system environment . The NSM server in turn interacts with one or more remote agents installed on host machines in the environment to convey API function calls hereinafter APIs that enable remote management of the resources. In an alternate embodiment however the NSM application can interact directly with machines hosting the remote agents. As noted the NSM application and NSM console cooperates with the NSM server and remote agent to create the integrated management framework that provides an underlying infrastructure that supports various heterogeneous storage access protocols within a single logical namespace service.

The NSM application is illustratively a lightweight JAVA based client application executing on the NSM console which is embodied as a computer having e.g. a Windows Linux or Solaris operating system platform. The NSM application is illustratively a single process that as a JAVA based application is characterized by a plurality of threads that can be easily ported to multi platform instantiations. However the NSM application is lightweight in that it does not require a persistent database and substantially all operations involve APIs executed on other host machines and servers.

The present invention is directed to a GUI architecture configured to enable efficient management of resources in a storage system environment. The GUI architecture is embodied within the NSM application as GUI toolkit that according to an aspect of the invention includes an infrastructure adapted to produce GUI components such as a dialog box dialog a wizard e.g. a policy creation wizard a task creation wizard and a navigation frame . The GUI toolkit illustratively comprises a GUI thread that cooperates with a GUI library to provide user interface constructs used to generate layouts for these GUI components. The layouts are essentially reusable templates that do not contain content text i.e. the GUI components may be reused within the NSM application as well as by applications other than the NSM application.

Broadly stated the NSM application spawns the GUI thread that is used by the client presentation layer and GUI toolkit to provide GUI components that enable a user to input e.g. commands for managing selected objects on various servers . The client presentation layer translates the command to an operation and provides the operation an operation failure handler and a group of managed objects to the API toolkit . The API toolkit processes the operation to generate a plurality of APIs and spawns a plurality of threads worker threads to manage the APIs directed to the managed objects of the group. As used herein the term API denotes a collection of methods functions routines exposed by e.g. processes of the integrated management framework to which other processes issue calls. When a problem failure arises the API toolkit calls the operation API handler which may result in the presentation of a GUI component e.g. a dialog by the client presentation layer . Notably the behavior of the API in light of a failure is specified by the client presentation layer as such the API toolkit handles API failures according to functionality provided by the client presentation layer .

A wizard is an interactive utility that guides the user through an operation flow such as installation of typical desk top software. The wizard may be implemented as a sequence of dialogs among which the user can move forward and backward inputting information as required by the flow. are schematic diagrams of a reusable wizard component of the GUI toolkit in accordance with the present invention. The layout of the wizard may be illustratively embodied in a plurality of forms each having a BACK button a NEXT button and a CANCEL button . The wizard layout further includes various panels that provide a flexible template for inserting images and content. For example the user can display an image of its choice on either a left panel of wizard or a top panel of wizard . The remaining panel of each wizard is available for the user to populate with content.

According to another aspect of the invention the reusable wizard allows users to make intelligent choices toward successful completions of desired actions by e.g. only requesting information steps needed to accomplish those actions such as creating a share on a particular machine. This aspect of the invention involves cooperation between the GUI library and GUI thread to create wizard templates e.g. page layouts that enable an optimized operation flow for each action depending upon inputs by the user. is diagram illustrating an optimized operation flow that reflects an arbitrary chain of steps that may be advantageously used with the present invention. An example of such a flow is an installation of typical desk top software using e.g. an install shield tool that queries the user to choose either a simple or advanced installation procedure. Based on the user response the operation flow follows one of two different paths e.g. path comprising steps or path comprising steps through the remainder of the installation procedure. This example cannot be accommodated by the simple operation flow previously described because that is flow requires pre defined knowledge in advance of the steps that the user may follow. However the arbitrary chain of steps operation flow is captured in the reusable wizard of the present invention.

According to the invention the GUI toolkit creates one or more wizard pages adapted to collect a name of the machine server a type of machine e.g. filer F or host H a share name of the share to be created a directory where the share resides and if the particular machine is host H an agent. If the type of machine is a filer F then the latter step i.e. the agent is skipped thereby optimizing the operation flow. In the illustrative embodiment a reusable host object is provided to resolve the type of machine query elicited by a wizard page. Depending on the user input the GUI thread calls an API to the host object. Once the machine type is resolved the GUI thread calls decision logic of the GUI library to optimize the flow.

As noted the GUI toolkit utilizes a single main GUI thread to process user input events directed to the GUI components. An example of such an input event is to a user clicking on the NEXT button of wizard e.g. with a mouse to essentially call a routine provided by that button. The GUI thread processes the input event which in another example may invoke an API on a host machine or server. While processing that event the GUI thread is typically locked stalled and thus cannot process other input events subsequently initiated by the user. To alleviate this situation the NSM application implements an asynchronous button callback technique that spawns additional GUI threads to process any of these subsequently initiated user input events. Illustratively each time a button is clicked a GUI thread is spawned to handle that event. As a result the callback technique enables any button to be clicked while the main GUI thread is stalled and obviate any GUI hang up experience for the user.

Upon launching the NSM application an initial screen appears on the screen of the NSM console that prompts a user for its credentials e.g. user name and password . In response to the user entering its credentials a top level client navigation tool browser appears on the NSM console. illustrates the reusable navigation tool browser of the GUI toolkit in accordance with the present invention. The layout of the tool browser allows a user to select from available tools represented as a namespaces icon and a migration icon displayed on the screen . Depending on the type of server license i.e. privileges as manifested by credentials granted to the user the namespace and or migration icons appearing on the tool browser may be inaccessible. That is if the user s credentials are insufficient to allow access to one or more of the tools the corresponding icon is grayed out and thus in accessible to the user. An example of an authentication procedure that may be advantageously used to determine whether a user s credentials are sufficient to enable access to the tools is disclosed in U.S. patent application Ser. No. 11 384 795 titled System and Method for Administering Security in a Logical Namespace of a Storage System Environment which application is hereby incorporated by reference.

A user selects a tool by e.g. clicking on the associated icon and in response a navigation frame appears on the screen. The navigation frame is a GUI component comprising a GUI layout that may be reused for such purposes as namespace and storage management including policy management. is a schematic diagram of the reusable navigation frame of the GUI toolkit in accordance with the present invention. The layout of the navigation frame includes a conventional menu toolbar is with inter alia file edit and help menus. The navigation frame also includes a browser like forward backward utility having a forward button and a back button that enables a user to switch forward and back respectively between a plurality of navigation panels of the frame. Notably the navigation panels are simultaneously displayed within the frame and include a hierarchy H panel an operations O panel a view V panel and a display D panel the latter adapted to display managed objects. The managed objects may comprise namespace objects e.g. link points shares as well as data management objects e.g. servers files disks that may be displayed on panel in either iconic or report format. A title portion of the frame displays a title of e.g. the iconic managed objects or report.

Specifically the hierarchy panel displays a navigation hierarchy of managed objects such as namespaces files etc. in the form of e.g. a tree structure. The operations panel displays user executable operations typically in a list that are dynamically configured for objects selected from the hierarchy. That is the user may select operations from panel to be performed on the selected objects assuming the user has the appropriate rights permission to execute such operations. The view panel displays a view configuration that provides various options by which to view or sort the selected objects including various configuration formats such as e.g. a list of icons or a detailed report. The display panel displays the selected objects in a view configuration format e.g. icons or reports which is chosen from the view configuration of panel .

Assume there is a plurality of volumes distributed across a set of filers. This configuration may be displayed on the navigation frame in accordance with a storage management feature. The navigation hierarchy panel representation is arbitrary and the content displayed may be filtered according to the context in which the panel is launched as well as the rights capabilities of the user administrator . For example the hierarchy displayed on panel may be a list of all namespaces namespace policies and namespace reports. However assume that the navigation hierarchy panel displays many filers e.g. as a tree and the view panel displays volumes. A rubber banding technique can be used in the GUI to select many managed objects e.g. volumes at once and then an operation can be selected from panel that is specific to the volume managed objects e.g. online.

Another top level node that appears on the hierarchy panel is a namespace policy NS policy icon. In response to a user clicking on the NS policy icon a list of policies created by the user appears on the panel. An example of a policy that may be created using e.g. a policy wizard in accordance with the present invention is disclosed in previously incorporated U.S. patent application Ser. No. 11 384 711 titled System and Method for Integrating Namespace Management and Storage Management in a Storage System Environment. Yet another top level node on the panel is a storage resource management SRM icon that lists various SRM paths used for e.g. data mining of a file system archiving etc and reporting statistics.

Operations tasks may be linked into each of these top level node hierarchies via the operations panel while each hierarchy may have multiple view configurations via the view panel . For example in response to the user clicking on an NS root icon and then selecting an icon view configuration iconic representations of shares within the root appear as managed objects on the display panel . Alternately selection of a report view configuration results in the display on panel of a report illustrating e.g. characteristics of the root such as name of the root the host machine on which it resides the number of links for the root etc. There may be a list of different view configurations in panel and the appearance of the managed objects may change by clicking on view configuration items in different columns. These items may be black or gray depending upon whether they are enabled or disabled according to the selected object type. In addition some reports may apply for certain objects and not for others.

For example by clicking on namespace roots one of the views that can be selected is to show all the links. This recursively displays all of the links that are contained in all of the namespaces. In response to clicking on a particular root the links for just that namespace group appear. Likewise the operations that are enabled or disabled apply according to the selected object. For example by selecting a path that creates namespace root a wizard may appear to identify the server and the name for the namespace root. Thus an administrator could use the CLI on the NSM server to create manage the logical namespace or the user could use the GUI to manage e.g. create delete add links etc the namespace.

The foregoing description has been directed to specific embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. For instance it is expressly contemplated that the procedures processes is layers and or modules described herein may be implemented in hardware software embodied as a computer readable medium having executable program instructions firmware or a combination thereof. Accordingly this description is to be taken only by way of example and not to otherwise limit the scope of the invention. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

