---

title: Method and apparatus for autonomic discovery of sensitive content
abstract: A data loss prevention (DLP) system provides a policy-based mechanism for managing how data is discovered and classified on an endpoint workstation, file server or other device within an enterprise. The technique described herein works in an automated manner by analyzing file system activity as one or more endpoint applications interact with a file system to build a statistical model of which areas of the file system are (or will be deemed to be) active or highly active. Using this information, scanning to those areas by the DLP software is then prioritized appropriately to focus compute resources on scanning and classifying preferably only those files and folders that are necessary to be scanned, i.e., the file system portions in which the user is applying the majority of his or her activity. As a result, the technique limits scanning to only those areas that have meaningful activity (thereby conserving compute resources with respect to files or folders that have not changed), improving scanning efficiency.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09569449&OS=09569449&RS=09569449
owner: International Business Machines Corporation
number: 09569449
owner_city: Armonk
owner_country: US
publication_date: 20101118
---
This disclosure relates generally to identifying and managing user operations with respect to sensitive information e.g. intellectual property personally identifiable information and the like .

Data Loss Prevention DLP systems are well known in the prior art and operate generally to identify monitor use of and to control user operations on sensitive information within an enterprise computing environment. Typically DLP systems provide a policy based mechanism for managing how data is discovered and classified on a user s workstation or file server also known as an endpoint. Policies must be distributed to and enforced on each endpoint. In an organization comprising a large number of endpoints the task of creating and managing policies can be onerous. This is particularly true when there are a variety of endpoint configurations which is the situation that arises due to differing file system layouts from endpoint to endpoint based on operating system and software differences and or differences that result from the behaviors and actions of the end users. Creating a single policy or even multiple such policies that accurately and efficiently identifies which areas of the file system sensitive information tends to be discovered requires significant input from and on going maintenance by system administrators.

Existing DLP systems typically provide simplistic approaches to solving the issue of how to determine which areas of an endpoint file system should be examined. One brute force approach is to simply scan the entire file system. This approach suffers from large compute resource requirements and long scan times and it may not be feasible for file systems that contain large amounts of data. For example a full system scan over a file server with a large amount of data will occupy system resources over a long time period. Users of that file server necessarily will be affected by any impaired performance while the scan is on going. This problem is even more acute when the scan is carried out over the entire file system but where a large percentage of the data is not actively being accessed and thus need not be checked .

An alternative approach is to have an administrator attempt to identify a set of known safe directories in the file system that can be then excluded from the DLP policy and thus the scan . This approach is disadvantageous in that it often requires significant overhead for administrators in managing effectively policies. In addition this approach naively assumes that each endpoint corresponds to the known configuration which provides a weakness that can be easily exploited.

While these approaches are valid in some cases and can produce workable systems they impose significant constraints on the efficiency of the DLP solution.

It is desired to provide enhanced techniques for discovery of sensitive content that addresses the above described deficiencies.

A data loss prevention DLP system provides a policy based mechanism for managing how data is discovered and classified on an endpoint workstation file server or other device within an enterprise. Preferably the technique described herein works in an automated manner by analyzing compute resource access activity as one or more endpoint applications interact with the resource e.g. a file system to build a model e.g. a statistical model of which areas of the resource are or will be deemed to be active or highly active. Using this information scanning to those areas by the DLP software is then prioritized appropriately to focus compute resources on scanning and classifying preferably only those files and folders that are necessary to be scanned i.e. the file system portions in which the user is applying the majority of his or her activity. As a result the technique limits scanning to only those areas that have meaningful activity thereby conserving compute resources with respect to files or folders that have not changed improving overall scanning efficiency.

In one embodiment a method is operative at or in association with an endpoint in a DLP system. In a first step information identifying an identity of a resource being accessed such as a file or folder in a file system is obtained preferably as each resource access is carried out. A statistical model is built that identifies how frequently individual files and folders are accessed. The statistical model is continually updated based on the access information. Then at an appropriate time e.g. periodically or upon initiation of a scan for sensitive content the resources are prioritized such that a resource with a higher level of access activity is designated for scanning ahead of a resource with a lower level of access activity. Resources are prioritized according to a scoring algorithm. By prioritizing resources in this manner scanning and content classification are more efficient as these functions are then applied to those portions of the compute resource that have activity as opposed to those that do not.

In an alternative embodiment the above described method is performed in a DLP apparatus. The apparatus comprises a processor and computer memory that holds computer program instructions executed by the processor to carry out the method.

In another alternative embodiment the above described method is performed by a computer program product in a computer readable medium for use in a data processing system in association with a DLP solution. The computer program product holds computer program instructions which when executed by the data processing system perform the method.

The foregoing has outlined some of the more pertinent features of the invention. These features should be construed to be merely illustrative. Many other beneficial results can be attained by applying the disclosed invention in a different manner or by modifying the invention as will be described.

With reference now to the drawings and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments of the disclosure may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the disclosed subject matter may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

With reference now to the drawings depicts a pictorial representation of an exemplary distributed data processing system in which aspects of the illustrative embodiments may be implemented. Distributed data processing system may include a network of computers in which aspects of the illustrative embodiments may be implemented. The distributed data processing system contains at least one network which is the medium used to provide communication links between various devices and computers connected together within distributed data processing system . The network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server are connected to network along with storage unit . In addition clients and are also connected to network . These clients and may be for example personal computers network computers or the like. In the depicted example server provides data such as boot files operating system images and applications to the clients and . Clients and are clients to server in the depicted example. Distributed data processing system may include additional servers clients and other devices not shown.

In the depicted example distributed data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course the distributed data processing system may also be implemented to include a number of different types of networks such as for example an intranet a local area network LAN a wide area network WAN or the like. As stated above is intended as an example not as an architectural limitation for different embodiments of the disclosed subject matter and therefore the particular elements shown in should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices. A storage device is any piece of hardware that is capable of storing information either on a temporary basis and or a permanent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer recordable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code. The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. As one example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the disclosed subject matter.

As will be seen the techniques described herein may operate in conjunction within the standard client server paradigm such as illustrated in in which client machines communicate with an Internet accessible Web based portal executing on a set of one or more machines. End users operate Internet connectable devices e.g. desktop computers notebook computers Internet enabled mobile devices or the like that are capable of accessing and interacting with the portal. Typically each client or server machine is a data processing system such as illustrated in comprising hardware and software and these entities communicate with one another over a network such as the Internet an intranet an extranet a private network or any other communications medium or link. A data processing system typically includes one or more processors an operating system one or more applications and one or more utilities. The applications on the data processing system provide native support for Web services including without limitation support for HTTP SOAP XML WSDL UDDI and WSFL among others. Information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP and XML is available from Internet Engineering Task Force IETF . Familiarity with these standards is presumed.

Although not meant to be limiting a representative data processing system in which the techniques of this disclosure are implemented is an appliance based data loss prevention DLP solution. DLP systems are well known and work to reduce the risk of sensitive data loss primarily at the network layer. As seen in a representative DLP solution comprises a set of distributed components typically arranged in a tiered architecture. Multiple policy sensors are placed around the network typically as rack based appliances software applications or the like and are designed to detect and or prevent data loss. Generally in an appliance based implementation an appliance may comprise a data processing system such as described in . The appliance includes a policy engine that works generally by capturing packets from the network reassembling the packets into sessions analyzing the information flow extracting content for analysis and performing content analysis to identify sensitive information. The appliance may use system defined or user defined policies where a policy represents a group of one or more rules. A rule typically is a logical combination of one or more triggers that are content based location based and or flow based. Sessions with policy violations are detected by the sensors and forwarded a central management console that distributes policies and collects and organizes alerts. A data store is used to store data and policies typically in a database. The central management console includes a web based graphical user interface GUI for management administration and reporting. As used herein the type of sensitive information protected by such a DLP solution may be quite varied. Typically such information includes without limitation intellectual property e.g. code designs documentation other proprietary information identity information e.g. personally identifiable information PII credit card information such as PCI related data health care information such as HIPAA related data finance information such as GLBA related data and the like.

As also seen in and as will be described in more detail below according to the teachings herein portions of the DLP solution are implemented across one or more endpoints .

DLP functionality may also be built into other enterprise systems such as an intrusion detection system IDS an intrusion protection system IPS or the like. Thus for example an IPS can monitor and detect attack traffic and DLP support can be added to perform outbound DLP protection and associated blocking of the transfer of sensitive content.

Thus in general a DLP system in which the subject matter herein is implemented provides a policy based mechanism for managing how data is discovered and classified on an endpoint workstation file server or other device within an enterprise. According to the subject matter of this disclosure which is now described an endpoint with an enterprise including without limitation a user machine a file server or some other defined computing entity includes DLP or equivalent software that is extended with the capability to identify key high risk areas for classification of sensitive files associated with the endpoint. As used herein in general an endpoint is a data processing system such as described above in and that has an associated file system or equivalent data store . The file system may or may not be part of the endpoint. The endpoint executes DLP software. One or more applications executing on the endpoint interact with the associated file system e.g. by reading data from files and by writing data to files in the usual manner. Other file management operations may be implemented as well. Generally the technique described herein works by analyzing file system activity as those endpoint applications interact with the file system to build a statistical model of which areas of the file system are or will be deemed to be active or highly active. Using this information scanning to those areas by the DLP software is then prioritized appropriately to focus compute resources on scanning and classifying only those files and folders that are necessary to be scanned i.e. the file system portions in which the user is applying the majority of his or her activity. As a result the technique limits scanning to only those areas that have meaningful activity thereby conserving compute resources with respect to files or folders that have not changed it enables an increase in the frequency to which routine scanning is applied which results in enhanced accuracy of the DLP system and it enables better scheduling of time frame s during which scanning is performed yet still ensuring that important files and folders are scanned.

Referring now to an embodiment of the inventive technique as implemented in an endpoint or equivalent is disclosed. As noted a representative endpoint is a data processing system such as shown in . It includes a DLP application that executes as software i.e. as a set of program instructions executed from computer memory by a processor . The DLP application is configurable according to a policy where the policy is created and managed in a central management console such as shown in . This is not a limitation however as a particular DLP policy may be implemented locally at the endpoint itself . As noted above the endpoint includes or has associated therewith a conventional file system in which data are organized in folders directories and files in a well known manner. One or more applications interact with the file system in a variety of known ways e.g. by reading data from the file system by writing data to the file system or the like. According to this disclosure a DLP solution is enhanced by instrumenting one or more applications with application programming interface API hook code which code operates to intercept system API calls and examine those calls for file open and file write calls. The API hook code executing in each application updates a statistical model that is maintained in endpoint memory or on an associated disk store . The statistical model captures how frequently individual files and folders are accessed by the applications that are instrumented with the hook code. In particular and as illustrated the statistical model builds up a data representation of files and folders associated with the type of access along with a counter that represents the number of accesses read or write preferably since a scan was last performed on the file. A portion of the representation is shown for several identified files together with their associated write count and read count . The table may be maintained in any convenient manner e.g. as a set of relational tables as a linked list as a data array or the like. The DLP solution also includes a discovery scanner which preferably is implemented in software a set of program instructions executed by a processor . Advantageously the discovery scanner prioritizes its scanning resources on those files and folders where there is a high level of activity as evidenced by the data collected in the statistical model .

In particular and with reference now to the process flow in an example use case is described. An application e.g. Open Office executing on the endpoint has been provisioned in the manner described namely to include the API hook code. The process begins at step when the application starts. At step the application uses a system API to open a file such as a document on disk. At step the API hook code intercepts the system API call and executes code to update the statistical model with the read event. At step the user has interacted with the document and saves his or her changes. This generates a write event. At step the API hook code intercepts the system API call and updates the statistical model to record the write event. In a similar manner the API hook code executing on each application provides similar data and the statistical model is built up accordingly.

Although not meant to be limiting the hook code works generally as follows. The code includes a dynamic link library DLL or equivalent code that replaces a target function to be intercepted here the system API calls to read or write . In operation the hook code intercepts the function call and injects the DLL to the target process. Upon attaching to the target process the DLL hooks itself to the target function.

Alternative approaches to capturing data to build the statistical model may be implemented as well. Thus for example if the file system already logs access and modification data it may be extended to include a counter of access. That data can then be fetched by the discovery scanner as is described below. Another approach is for the file system to perform an analysis over an entire file to identify where file access and modification times have changes since a prior pass and then recording that data in the statistical model. Any other technique for capturing file and or folder access or more generally file system access or use information may be used as well.

The statistical model may be maintained for file system access activity for one more applications associated with an endpoint or for one or more endpoints. Likewise a particular DLP scan policy may be applied to a given endpoint or across one or more endpoints.

The completion milestone is configurable according to policy and may be one or more of the following. A scan may continue until all files from the statistical model have been processed. The scan may continue for an allocated time period e.g. one hour per day week . The scan may cover only a predetermined number of files e.g. limit of 500 per day week . The scan may cover only files whose access count exceeds a predetermined value e.g. only files with over 10 accesses . Of course the above examples are merely illustrative as any completion milestone may be implemented depending on compute resources and their availability. Using a policy manager an administrator can configure the completion milestone to control the impact DLP has on the end user in terms of occupying resources on their endpoint.

Thus according to the technique described herein resources are prioritized for scanning to search for sensitive content based on the statistical model. In general a resource with a higher level of access activity as evidenced by the model is designated for scanning ahead of a resource with a lower level of access activity. Preferably resource scanning priorities are based on a scoring algorithm that uses the resource access count data accumulated in the model. One or more weights may be applied to a resource access count. Calculating a score for a given resource may be as simple as a function WriteCount ReadCount . A more sophisticated approach can be utilized to guard against false positives and negatives for example by applying one or more weights against one or both of the WriteCount and ReadCount fields and or considering the classification history of the resource e.g. whether the resource has been previously classified as sensitive . Thus in one non limiting embodiment the following scoring algorithm may be used 

If resource has no prior classification score Weight1 ReadCount Weight2 WriteCount Else If resource classified sensitive

Else score Weight5 ReadCount Weight6 WriteCount The algorithm set forth in the pseudo code first determines whether classification of the file in terms of its content sensitivity has been attempted previously by the DLP solution. If not then the algorithm sets the score equal to a function weight1 Read Count weight2 Write Count . The next result is then obtained using these values. If in this embodiment the file has been classified in terms of sensitivity the algorithm determines if the file has been classified as sensitive. If so and if Write Count is 0 the score is set equal to 0 meaning the file is not important to scan otherwise the score is set equal to a function weight3 Read Count weight4 Write Count . If however the file has been classified in terms of sensitivity but classified as not sensitive the algorithm continues as follows. If Write Count is 0 the score is once again set equal to 0 otherwise the score is set equal to a function weight5 Read Count weight6 Write Count . This approach enables the weights 1 2 5 and 6 to be set appropriately to ameliorate risk associated with false negatives while weights 3 and 4 can be set appropriately to guard against risk of false positives.

The usefulness of the weighted approach to scoring can be seen by example. Suppose there are two files both of which have been scanned one file has been determined to be sensitive while the other has been determined to be non sensitive. It is further assumed that both files have seen the same amount of user activity e.g. 1 write and 5 reads since a last discovery scan. Without a weighted scoring algorithm both files would have a same score value thus the resulting scan order would be non deterministic. Now assume as a matter of policy that a business decides that the impact from files remaining classified as sensitive after having had sensitive data removed is more detrimental than the impact from having files remain unclassified after they have had sensitive data added to them. In this example scenario a user can set weighting 3 and or 4 to a higher value than weighting 5 and 6. So if weighting 3 is set to a value e.g. 10 and weightings 4 5 and 6 are set to another value e.g. 1 then the score for the file classified as sensitive is now 15 while the score for the file classified as non sensitive is now 6. As a consequence the sensitive classified file is scanned ahead of the non sensitive classified file fulfilling the business objective.

Thus by having separate weightings for reading and writing values can be tuned e.g. manually or programmatically to reflect risk. As another example while a business may consider the detrimental impact of false positives to be greater than that of false negatives it may also believe that false negatives are more detrimental the more widely they are spread. To reflect this risk profile the user may increase the value of weighting 6 e.g. from 1 to 2 . As a consequence at a certain number of read accesses the false negative has a higher score than the false positive assuming the number of write accesses are constant .

Of course the above examples should not be taken to limit the invention. Any suitable scoring algorithm may be used such as merely selecting the highest value of the ReadCount or the highest value of the Write Count or the like. Moreover where weights are used in the scoring algorithm any appropriate weighting scheme may be used to adjust risk deemed appropriate to meet a business objective.

The above described technique prioritizes scanning to those files and folders which exhibit a high level of access activity as captured by the statistical model . By prioritizing which files and folders or more generally which portions of the file system are to be scanned based on the file access information the technique reduces the scanning time and overhead thereby improving the performance of the DLP content classification. Using the described approach a much more targeted scanning strategy is developed and implemented effectively targeting those files or folders that have the highest amount of activity. Preferably the file system activity information is captured independently for each application or a set of applications on the endpoint to create the statistical model. By providing a prioritized list of files or folders to scan the described technique enables the DLP system to restrict discovery and classification to known high priority files e.g. based on count limit time windows or other criteria associated with a given schedule.

The subject matter described herein has many advantages. As described the subject matter provides for an automated approach to identify key high risk areas for classification of sensitive files in a system such as a DLP system. The above described algorithm utilizes file system metrics to focus compute resources on scanning and classifying only those files or more generally file system portions in which a user is applying the majority or some other given percentage of his or her activity. This provides for more efficient use of compute resources it minimizes those areas of the file system requiring a scan resulting in reduced scan time provides an opportunity and ability to limit scanning based on configurable time windows while still capturing key files effectively increases classification accuracy on files especially those that undergo frequent modification requires no training or on going administration or policy management and is autonomic.

The functionality described above may be implemented as a standalone approach e.g. a software based function executed by a processor or it may be available as a managed service including as a web service via a SOAP XML interface . The particular hardware and software implementation details described herein are merely for illustrative purposes are not meant to limit the scope of the described subject matter.

More generally computing devices within the context of the disclosed invention are each a data processing system such as shown in comprising hardware and software and these entities communicate with one another over a network such as the Internet an intranet an extranet a private network or any other communications medium or link. The applications on the data processing system provide native support for Web and other known services and protocols including without limitation support for HTTP FTP SMTP SOAP XML WSDL UDDI and WSFL among others. Information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP FTP SMTP and XML is available from Internet Engineering Task Force IETF . Familiarity with these known standards and protocols is presumed.

The scheme described herein may be implemented in or in conjunction with various server side architectures including simple n tier architectures web portals federated systems and the like. The techniques herein may be practiced in a loosely coupled server including a cloud based environment.

Still more generally the subject matter described herein can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the function is implemented in software which includes but is not limited to firmware resident software microcode and the like. Furthermore as noted above the DLP functionality can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain or store the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or a semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD. The computer readable medium is a tangible item.

The computer program product may be a product having program instructions or program code to implement one or more of the described functions. Those instructions or code may be stored in a computer readable storage medium in a data processing system after being downloaded over a network from a remote data processing system. Or those instructions or code may be stored in a computer readable storage medium in a server data processing system and adapted to be downloaded over a network to a remote data processing system for use in a computer readable storage medium within the remote system.

In a representative embodiment the hook code and discovery scanner components are implemented in a special purpose computer preferably in software executed by one or more processors. The software is maintained in one or more data stores or memories associated with the one or more processors and the software may be implemented as one or more computer programs. Collectively this special purpose hardware and software comprises or supplements an existing DLP solution.

The described functionality may be implemented as an adjunct or extension to an existing DLP solution.

While the above describes a particular order of operations performed by certain embodiments of the invention it should be understood that such order is exemplary as alternative embodiments may perform the operations in a different order combine certain operations overlap certain operations or the like. References in the specification to a given embodiment indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic.

Finally while given components of the system have been described separately one of ordinary skill will appreciate that some of the functions may be combined or shared in given instructions program sequences code portions and the like.

Any application or functionality described herein may be implemented as native code by providing hooks into another application by facilitating use of the mechanism as a plug in by linking to the mechanism and the like.

The techniques disclosed herein are not limited to a middleware DLP appliance that monitors network traffic such as has been described but this will be a typical implementation. As noted the above described analysis and scanning function may be used in any system device portal site or the like wherein it is desired to analyze data for inclusion of sensitive information.

Moreover although the technique for building the statistical model has been described within the context of file system access this is not a limitation either. The statistical model may be built on other compute resource attributes such as availability load latency network distance or other attributes. The compute resource from which the statistical model is built may be any system s device s program s or process es .

