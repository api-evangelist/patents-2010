---

title: Enterprise model for provisioning fine-grained access control
abstract: Access control rules can be defined for target applications of an enterprise system independent of a runtime of the target applications. The access control rules can then normalized into decision tables. These decision tables can then be used to reconcile authorization information with the target applications via user provisioning. This process can enable comprehensive reporting and analysis of enterprise access control rules without requiring direct integration of the target applications at runtime.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08789132&OS=08789132&RS=08789132
owner: Oracle International Corporation
number: 08789132
owner_city: Redwood Shores
owner_country: US
publication_date: 20100607
---
One embodiment is directed to a computer system for access control and more particularly to a computer system for access control policy administration.

Access control involves enabling an authority to control access to application resources in a computer system. Access control includes authentication authorization and auditing. Authentication involves determining whether a user can log in to a computer system. Authorization involves determining which application resources a user can access once logged in to a computer system and what is the user s level of access for each application resource. Auditing involves recording important events for future analysis.

In general computer systems involve many different applications. Each application has its own entitlements i.e. sets of privileges that govern what a user is authorized to access . Thus a key component of authorization is managing security for each application. With respect to authorization there is a wide range of authorization levels ranging from coarse grained authorization to fine grained authorization. Coarse grained authorization is a simple mechanism to manage whether a user has the necessary permission to access a particular application such as whether the user is a member of a particular group. In contrast fine grained authorization is a more precise mechanism to manage whether a user has the necessary permission to perform a certain action on a resource of an application. Because fine grained authorization is more precise than coarse grained authorization fine grained authorization has more context than coarse grained authorization. Context is defined as attributes of a subject resource action or environment that can be relevant in making a fine grained authorization decision. With the increased complexity of today s computer systems fine grained authorization is generally becoming the norm in enterprise applications.

In general a user accesses an application s presentation tier via a web server. Behind the web server generally is an application server which manages the application. While web based authorization policies are typically configured outside of the application server many application based authorization policies are hard coded into the application logic itself. An approach where application logic makes authorization decisions generally means that the authorization decisions are not centrally managed governed or controlled by a security team that is separate from the application. Furthermore runtime authorization decisions are rarely audited by the application. In today s enterprise application environment this approach is no longer feasible. Laws like Sarbanes Oxley mandate documented controls on who can access information systems that affect the finances of publicly held companies. Healthcare and privacy laws have also placed stricter requirements on access to application resources and auditing of that access. A rapid rise in the outsourcing of application development had led to a result where authorization logic hard coded in the application is no longer directly controlled by the enterprise. Thus changes in the regulatory and development environments has mandated a change in how application level authorization is managed.

One embodiment of the invention is directed to a computer readable medium having instructions stored thereon that when executed by a processor cause the processor to perform a method. The instructions include modeling an authorization policy set and storing the authorization policy set in a policy store. The instructions further include applying the stored authorization policy set to an input of an application to generate an authorization decision set independent of a runtime of the application and storing the authorization decision set in a decision table. The instructions further include propagating the stored authorization decision set to the application using a user provisioning system.

According to one embodiment of the invention authorization decisions for target applications of an enterprise system can be defined independent of whether target applications are currently running. The authorization decisions are then normalized into decision tables and can then be used to reconcile authorization information with the target applications via user provisioning. Thus target applications do not need to be modified to be integrated with a central fine grained authorization management system so that the target applications call the central fine grained authorization management system at runtime.

One approach to changing how application level authorization is managed is providing a central fine grained authorization management system which is configured to replace application specific authorization management with a centralized authorization management. This centralized authorization management can provide consistent policy management across applications of an enterprise system and can remove the task of policy management from developers of the applications. An example of a central fine grained authorization management system is Oracle Entitlements Server. The central fine grained authorization management system can then be integrated with one or more applications of an enterprise system. However in order to integrate the central fine grained authorization management system with existing applications generally each application needs to be recoded to use an application programming interface API of the central fine grained authorization management system. If an enterprise system includes many existing applications it may be expensive or impractical to recode all existing applications of the enterprise system to use the API of the central fine grained authorization management system. Thus it may not be reasonable from a cost perspective for an enterprise system manager to integrate the central fine grained authorization management system with existing applications even to leverage the fine grained authorization model. According to an embodiment authorization decisions can be propagated to target applications independent of a runtime so that the target applications do not need to be modified to be integrated with a central fine grained authorization management system so that the target applications call the central fine grained authorization management system at runtime as will be discussed below in more detail.

A computer readable medium may be any available medium that can be accessed by processor . A computer readable medium may include both a volatile and nonvolatile medium a removable and non removable medium a communication medium and a storage medium. A communication medium may include computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and may include any other form of information delivery medium known in the art. A storage medium may include RAM flash memory ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM registers hard disk a removable disk a compact disk read only memory CD ROM or any other form of storage medium known in the art.

Processor can also be operatively coupled via bus to a display such as a Liquid Crystal Display LCD . Display can display information to the user. A keyboard and a cursor control device such as a computer mouse can also be operatively coupled to bus to enable the user to interface with system .

According to one embodiment memory can store software modules that may provide functionality when executed by processor . The modules can include an operating system an authorization module as well as other functional modules . Operating system can provide an operating system functionality for system . Authorization module can provide functionality for defining access control rules and normalizing the results into decision tables as will be described in more detail below. System can also be part of a larger system. Thus system can include one or more additional functional modules to include the additional functionality. For example functional modules may include modules that are part of the Oracle Entitlements Server product from Oracle Corporation. As another example functional modules may also include modules that part of the Oracle Identity Manager product from Oracle Corporation.

Processor can also be operatively coupled via bus to a database . Database can store data in an integrated collection of logically related records or files. Database can be an operational database an analytical database a data warehouse a distributed database an end user database an external database a navigational database an in memory database a document oriented database a real time database a relational database an object oriented database or any other database known in the art.

According to the embodiment the enterprise system includes authorization module . In one embodiment authorization module of corresponds to authorization module of . Authorization module is a software module when run on a processor not shown that is configured to provide functionality for defining access control rules and normalizing the results into decision tables as will be described in more detail below.

According to the embodiment authorization module is composed of at least two sub modules policy administration point and policy decision point . Policy administration point is configured to model an authorization policy i.e. policy . An authorization policy is a rule or set of rules that governs access to a resource or set of resources of a target application. An authorization policy can be set up for a set of subjects i.e. users groups or roles . A user is a user of the target application. A group is a collection of users where the users are grouped based on identity. For example a group can be defined as including five users e.g. User User User User and User . A role is also a collection of users but rather than being grouped by identity the collection is grouped by business function. For example a role can be an administrative role and can be assigned to one or more users who are assigned to an administrative business function. An example of an authorization policy is 

This policy can be read as granting the GET action for the resource AccountReports to all users in the group of BankManagers. An authorization policy can be modeled using an expressive policy language such as eXtensible Access Control Markup Language XACML . An example of an authorization policy is discussed in further detail in relation to .

Policy decision point is configured to apply an authorization policy to an input and generate an authorization decision i.e. decision . An authorization decision is a result of applying an authorization policy to an input and determining whether a subject can perform an action on a resource. An authorization decision can be represented as a YES or NO with a YES signifying that the subject can perform the action on the resource and with a NO signifying that the subject cannot perform the action on the resource. An input can include a subject i.e. user group or role or a set of subjects a resource or a set of resources an action or set of actions an environment and context. Environment is defined as a set of characteristic attributes independent of a particular subject resource or action. Context is defined as a set of characteristic attributes of the subject resource or action. Environment and context can be used to more finely refine the applicable policy to generate the authorization decision.

In the illustrated embodiment authorization module includes sub modules policy administration point and policy decision point in the illustrated embodiment. However in an alternate embodiment authorization module performs the functionality of sub module policy administration point and sub module policy decision point itself. Furthermore in the illustrated embodiment authorization module is located independent of user provisioning system and applications and . However in alternative embodiments authorization module can be co located with user provisioning system application or application . According to the embodiment authorization module can be configured to obtain an input from either application application or both applications through one or more logical connections. However in an alternative embodiment authorization module can be configured to obtain an input from a central user repository such as a lightweight directory access protocol LDAP not shown through one or more logical connections.

Policy store is a persistent storage configured to store modeled authorization policies. Policy store can be any type of persistent storage known in the art. For example policy store can be a database a linked list a lookup table or a computer file. In an embodiment where policy store is a database policy store can be an operational database an analytical database a data warehouse a distributed database an end user database an external database a navigational database an in memory database a document oriented database a real time database a relational database an object oriented database or any other database known in the art.

Decision table is a persistent storage configured to store generated authorization decisions. Decision table can be any type of persistent storage known in the art. For example decision table can be a database a linked list a lookup table or a computer file. In an embodiment where decision table is a database decision table can be a an operational database an analytical database a data warehouse a distributed database an end user database an external database a navigational database an in memory database a document oriented database a real time database a relational database an object oriented database or any other database known in the art. An example of a decision table is discussed in further detail in relation to .

User provisioning system is a system or application or service configured to automatically manage user entitlements relative to related applications. An example of the management of user entitlements by a user provisioning system is the management of an employee that is hired by a company. Once the employee is hired a user provisioning system can be configured to set up a user record in various related applications such as an employee directory an e mail list and a facility access list . When the employee s role at the company changes such as a promotion or demotion the user provisioning system can be configured to give the employee additional entitlements or remove entitlements from the employee. When the employee quits or is terminated the user provisioning system can be configured to remove all entitlements from the employee and optionally remove all records of the employee from the system. As one of ordinary skill in the art would readily appreciate this is merely an example of the management of user entitlements and user provisioning system can manage any kind of user entitlements.

User provisioning system can receive a set of provisioning requests from a client and can execute one or more provisioning actions against target applications or resources. A provisioning request can be expressed using a provisioning language such as Service Provisioning Markup Language SPML . In executing a provisioning action against a target application user provisioning system can propagate an authorization decision from a persistent storage to a directory or some other external source where the authorization decision can be read by an application such as applications and .

Applications and are software applications that are part of the enterprise system. Applications and can be any software application known in the art that is configured to perform a singular task or multiple tasks. Applications and can each have a set of users groups roles resources and actions associated with the respective application. According to the embodiment the authorization decisions for applications and can be determined by authorization module . The authorization decisions can be determined by authorization module without applications and having to call an API of authorization module as will be discussed in more detail.

The subject value resource value action value and context value represent a subject resource action and context respectively that serve as an input for an applicable authorization policy. The decision value represents the decision that results from the application of the applicable authorization policy to the input. While in the illustrated embodiment each authorization decision is represented as a tuple one of ordinary skill in the art would readily appreciate that this is merely an example representation of an access control list which is a list of users and their respective entitlements determined by applying an applicable authorization policy. One of ordinary skill in the art would readily appreciate that an authorization decision can be represented in any form that indicates a decision that results from the applicable authorization policy and that can be understood by related applications in an enterprise system and still be within the scope of the invention.

In the illustrated embodiment decision table includes authorization decisions and . Authorization decision indicates that when the applicable authorization policy is applied to User on Resource for the Read action with the context WEEKDAY YES the resulting decision is YES. In contrast authorization decision indicates that when the applicable authorization policy is applied to User on Resource for the Read action with the context WEEKDAY NO the resulting decision is NO. Thus in combination authorization decisions and indicate that from Monday through Friday User can perform the Read action on Resource but on Saturday or Sunday User cannot perform the Read action on Resource . These authorization decisions can be generated independent of a runtime of the application and thus can be generated before User attempt to access Resource and thus before an enterprise system can determine what day it is when the user attempts to access the resource.

According to the embodiment authorization decision indicates that when the applicable authorization policy is applied to User on Resource for the Write action with the context ADMIN USER YES the resulting decision is YES. Likewise authorization decision indicates that when the applicable authorization policy is applied to User on Resource for the Execute action with the context SUPERUSER USER YES the resulting decision is also YES. Thus authorization decision indicates that when User is assigned the role of ADMIN User can perform the write action on Resource . Likewise authorization decision indicates that when User is assigned the role of SUPERUSER User can perform the execute action on Resource . Finally authorization decision indicates that when the applicable authorization policy is applied to User on Resource for the Delete action with any context the resulting decision is NO. Thus User cannot perform the Delete action on Resource under any circumstances.

At authorization module models a policy set. A policy set can include one or more authorization policies. As previously described an authorization policy is a rule or set of rules that governs access to a resource or set of resources of a target application and an authorization policy can be modeled using an expressive policy language such as XACML. According to the embodiment the authorization policy can be modeled as if the authorization policy will be enforced at runtime even though as previously described an authorization decision is generated independent of a runtime of the target application. In an embodiment of the invention the modeling of the policy set is performed by sub module policy administration point of authorization module . According to the embodiment of the invention the modeling of the policy set includes storing the policy set in policy store .

At authorization module retrieves the policy set stored at policy store . In an embodiment of the invention the retrieval of the stored policy set is performed by sub module policy decision point of authorization module .

At authorization module applies the policy set to generate a decision set for all subjects of each target application of an enterprise system. A decision set can include one or more authorization decisions. As previously described an authorization decision is a result of applying an applicable authorization policy to an input and determining whether a subject can perform an action on a resource. As also previously described an input can include a subject i.e. user group or role or a set of subjects a resource or a set of resources an action or set of actions an environment and context. According to the embodiment authorization module can establish a logical connection to decision table as well as applications and . A logical connection represents a connection where data can be transferred from a first enterprise system entity to a second system entity. In the embodiment authorization module can utilize a logical connection to applications and in order to retrieve one or more inputs that is applicable to each application. As described above an input is used by authorization module to generate an authorization decision based on an applicable authorization policy. However according to alternate embodiments authorization module can retrieve the one or more inputs from locations other than applications and . For example in an alternate embodiment authorization module can utilize a logical connection to a central user repository not shown in order to retrieve the one or more inputs applicable to each application.

According to the embodiment of the invention because the sequence illustrated in is an initial sequence and because in the embodiment authorization module has not previously generated any authorization decisions each authorization policy of the policy set is applied to each and every subject of each target application. This is identified as bootstrapping each target application so that at least one authorization decision is generated for each subject of each application. In an embodiment of the invention the generating of the decision set is performed by sub module policy decision point of authorization module .

At authorization module stores the decision set in decision table . In an embodiment of the invention the storage of the decision set is performed by sub module policy decision point of authorization module .

At user provisioning system retrieves the stored decision set from decision table . According to the embodiment user provisioning system can establish a logical connection to decision table as well as applications and . As previously described a logical connection represents a connection where data can be transferred from a first enterprise system entity to a second system entity.

At user provisioning system propagates the decision set retrieved from decision table to application . According to the embodiment of the invention the decision set is propagated over a logical connection that is configured to transfer data between user provisioning system and application . Thus the decision set is propagated to application without the requirement of recoding application to call the API of authorization module . In an embodiment the propagation of the decision set to application can include propagating the actual authorization decisions to application . In another embodiment if application is only capable of externalizing roles and privileges for each subject but is not capable of externalizing the reasoning for the assignment of roles and privileges to each subject the propagation of the decision set to application can include propagating the roles and privileges for each subject. Furthermore in another embodiment if application is only capable of externalizing roles for each subject but is not capable of externalizing the privileges assigned to the roles the propagation of the decision set to application can include propagating the roles for each subject. Once the decision set is propagated to application application can integrate the decision set with its existing authorization information. Such integration is described in more detail in relation to .

At user provisioning system propagates the decision set retrieved from decision table to application . This is identical to but instead of the target application being application the target application is application . In alternative embodiments user provisioning system can propagate the decision set to any number of related applications that are a part of the enterprise system.

At authorization module modifies a policy set stored at policy store . According to the embodiment the modifying a policy set includes modifying one or more authorization policies. For example an existing authorization policy that grants all users a certain set of privileges as long as their age is greater than or equal to 18 years can be modified to only grant users the set of privileges if their age is greater than or equal to 21 years. Any user whose age is 18 years 19 years or 20 years will be affected by this modification in authorization policy as the set of privileges they previously enjoyed will be revoked. Also according to the embodiment the modifying the policy set includes storing the modified policy set at policy store . In an embodiment of the invention the modifying of the policy set is performed by sub module policy administration point of authorization module .

At authorization module retrieves the modified policy set stored at policy store . In an embodiment of the invention the retrieval of the modified policy set is performed by sub module policy decision point of authorization module .

At authorization module determines a set of subjects that are affected by the modifications to the policy set and applies the modified policy set to regenerate authorization decisions for the affected subjects. Authorization module can determine a set of affected subjects using one of a number of techniques. According to one embodiment of the invention authorization module simply regenerates the authorization decisions for each and every user of the related application similar to the illustrated embodiment in . If the generated authorization decision is the same as the previous authorization decision then the previous authorization decision is not modified and the regenerated authorization decision is discarded. If the generated authorization decision is not the same as the previous authorization decision then the previous authorization decision is modified. This technique is identified as the brute force technique.

However in an alternative embodiment of the invention authorization module examines the context of the modifications to the authorization policies in order to determine which subjects are affected by the modifications. For example referring to the previous example where the authorization policy grants all users a certain set of privileges as long as their age is greater than or equal to 18 years is changed to only grant users the set of privileges if their age is greater than or equal to 21 years authorization module can determine that only subjects whose age is between 18 years and 20 years will be affected by the modification to the authorization policy. Thus according to the embodiment authorization module only regenerates the authorization decisions for subjects who age is between 18 years and 20 years. This technique is identified as the targeted technique. According to an embodiment of the invention whether the brute force technique is used or the targeted technique is used the regeneration of authorization decisions is performed by sub module policy decision point of authorization module .

At authorization module uses the regenerated authorization decisions of to modify the decision set stored in decision table . According to the embodiment this can include comparing the regenerated decisions to the decision set stored in decision table and adding new authorization decisions that are found in the regenerated authorization decisions but not found in the decision set stored in decision table . This can also include comparing the regenerated decisions to the decision set stored in decision table and modifying existing authorization decisions that are found in the decision set stored in decision table but have been modified in the regenerated authorization decisions. This can also include comparing the regenerated decisions to the decision set stored in decision table and deleting existing authorization decisions that are found in the decision set stored in decision table but not found in the regenerated authorization decisions. According to an embodiment of the invention the modification of the decision set stored in decision table is performed by sub module policy decision point of authorization module .

At user provisioning system retrieves the modified decision set from decision table . According to the embodiment user provisioning system can establish a logical connection to decision table as well as applications and . As previously described a logical connection represents a connection where data can be transferred from a first enterprise system entity to a second system entity.

At user provisioning system determines if the modified decision set affects application and if the modified decision set does affect application then user provisioning system propagates the modified decision set retrieved from decision table to application . According to the embodiment if at least one modified authorization decision of the modified decision set involves a subject of application then the modified decision set affects application .

At user provisioning system determines if the modified decision set affects application and if the modified decision set does affect application then user provisioning system propagates the modified decision set retrieved from decision table to application . This is identical to but instead of the target application being application the target application is application . In alternative embodiments user provisioning system can propagate the modified decision set to any number of related applications that are a part of the enterprise system and are affected by the modified decision set.

According to the embodiment integration of a decision set generated by authorization module and authorization information of application can occur during an initial propagation of authorization decisions. More specifically during an initial propagation a decision set is generated by authorization module . Ideally the decision set matches the authorization information of application and the authorization information can be replaced by the decision set. However discrepancies between the decision set generated by authorization module and authorization information of application may exist. The cause of a discrepancy can be one of the following reasons. An authorization decision of the decision set generated by authorization module may be incorrect. The authorization information of application may contain a flaw and application may need to be modified to comply with the applicable authorization policy of the decision set. Finally the authorization information of application may be incorrect but the discrepancy can be ignored. According to the embodiment the decision set generated by authorization module and authorization information of application can be integrated in an iterative fashion until all discrepancies have either been eliminated or marked as an acceptable exception.

Integration of a decision set generated by authorization module and authorization information of application includes comparing the two and identifying any discrepancy between the two that resides in application . Any identified discrepancy can be addressed in a number of ways. For example the applicable authorization policy of authorization module can be changed the authorization decisions can be regenerated and the decision set can be modified. This process can be repeated until the discrepancy is eliminated. As another example application can be modified to comply with the applicable authorization decision of the decision set. As yet another example the discrepancy can be recorded as an acceptable exception so that the exception is ignored in subsequent iterations of discrepancy detection. Each technique used to integrate a decision set generated by authorization module and authorization information of application is discussed below in greater detail. Furthermore as one of ordinary skill in the art would readily appreciate while only a single application i.e. application is shown for purposes of clarity each sequence illustrated in and respectively can be performed for any number of target applications.

At user provisioning system converts the authorization information from application into a normalized form such that it can be compared with the authorization decisions of the decision set of authorization module . As previously described authorization information of application can take any form such as authorization rules defined by source code of application or authorization rules defined by a set of lookup tables. Thus in order to perform any meaningful comparison user provisioning system first converts the authorization information into a normalized form.

At user provisioning system compares the decision set of authorization module with the normalized application information of application . By comparing the decision set with the normalized application information user provisioning system determines whether the existing authorization rules of application comply with the authorization decisions of the decision set of authorization module . If no discrepancy is found between the decision set and the normalized application information the sequence ends at . Otherwise the sequence continues on to .

At if a discrepancy is found user provisioning system reports the discrepancy to authorization module . After the discrepancy is reported to authorization module it is determined that one or more authorization policies need to be modified in light of the discrepancy.

At authorization module modifies the policy set stored in policy store . According to the embodiment the modification of the policy set includes modifying one or more authorization policies to be consistent with the authorization information of application . For example if the policy set includes an authorization policy granting the GET action for the resource AccountReports to all users in the group of BankManagers as discussed in a previous example but the authorization information of application indicates that all users in the group of BankTellers also have access to the GET action for the resource AccountReports then the authorization policy can be modified to grant the GET action to all users in the group of BankTellers as well as BankMangers for the resource AccountReports. In an embodiment of the invention the modifying of the policy set is performed by sub module policy administration point of authorization module .

At authorization module retrieves the policy set stored at policy store . In an embodiment of the invention the retrieval of the stored policy set is performed by sub module policy decision point of authorization module .

At authorization module applies the modified policy set to regenerate the decision set. As previously described an authorization decision is a result of applying an applicable authorization policy to an input and determining whether a subject can perform an action on a resource. Because the one or more applicable authorization policies are modified at authorization module regenerates the corresponding authorization decisions in order to update the decision set. In an embodiment of the invention the generating of the decision set is performed by sub module policy decision point of authorization module .

At authorization module stores the modified decision set in decision table . In an embodiment of the invention the storage of the decision set is performed by sub module policy decision point of authorization module . Thus according to the embodiment the decision set is modified to be more consistent with the authorization information of application .

Subsequently the comparison of is repeated. If the modification to the decision set does not remove the discrepancy then and are repeated until the discrepancy is removed. The sequence illustrated in is repeated for each discrepancy found by user provisioning system . Once the discrepancy is removed the externalized authorization policies represent the authorization policies inside of application . According to an embodiment of the invention with the models synchronized management of subjects and their entitlements can now be done from outside of application with confidence that the resulting authorization decisions will be the same as if managed from inside the application. This can allow for the decommissioning of application specific management tools such as management screens and can allow for centralized enforcement of the authorization policy which can result in better operational efficiency and cost savings.

At user provisioning system modifies application such that the authorization information of application complies with the decision set of authorization module thus eliminating the discrepancy. For example user provisioning system recodes application to comply with the decision set of authorization module . In another example user provisioning system modifies a set of lookup tables which contain authorization information of application to comply with the decision set of authorization module . The sequence illustrated in is repeated for each discrepancy found by user provisioning system .

At user provisioning system records the discrepancy as an acceptable exception. Thus while neither modifying the decision set of authorization module nor changing application user provisioning system will make a record so that when the decision set and authorization information are compared again during integration the discrepancy will not be identified and reported to authorization module . The sequence illustrated in is repeated for each discrepancy found by user provisioning system .

At an authorization policy set is modeled. At the authorization policy set is stored in a policy store. At the stored authorization policy set is applied to an input to generate an authorization decision set independent of a runtime of an application. At the authorization decision set is stored in a decision table. At the stored authorization decision set is propagated to the application using a user provisioning system.

Thus according to an embodiment of the invention authorization decisions can be automatically calculated using an authorization module and stored in a decision table where the authorization decisions can be propagated to related applications. Rather than recoding the related application to call an API of the authorization module the authorization module can generate an authorization decision set asynchronously and propagate the authorization decision set to the related application even if the related application is offline. According to the embodiment the modeling of authorization policies and the generation of authorization decisions using the authorization module can result in a central administration of authorization policies and decisions where the policies and decisions for all related applications are generated in a single place. Thus the consistency of the authorization policies and decisions can be increased.

Furthermore an embodiment of the invention can enable the application of a richer authorization model to a related application that cannot externalize authorization at runtime. In other words according to the embodiment an authorization policy can be generated based on a body of reasoning as to why a user has certain roles and privileges even if the related application is only capable of externalize that the user has the roles and privileges. Thus it is easier to audit why a user has certain roles and privileges.

The features structures or characteristics of the invention described throughout this specification may be combined in any suitable manner in one or more embodiments. For example the usage of one embodiment some embodiments certain embodiment certain embodiments or other similar language throughout this specification refers to the fact that a particular feature structure or characteristic described in connection with the embodiment may be included in at least one embodiment of the present invention. Thus appearances of the phrases one embodiment some embodiments a certain embodiment certain embodiments or other similar language throughout this specification do not necessarily all refer to the same group of embodiments and the described features structures or characteristics may be combined in any suitable manner in one or more embodiments.

One having ordinary skill in the art will readily understand that the invention as discussed above may be practiced with steps in a different order and or with elements in configurations which are different than those which are disclosed. Therefore although the invention has been described based upon these preferred embodiments it would be apparent to those of skill in the art that certain modifications variations and alternative constructions would be apparent while remaining within the spirit and scope of the invention. In order to determine the metes and bounds of the invention therefore reference should be made to the appended claims.

