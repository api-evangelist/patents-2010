---

title: Resource monitoring using a JMX message bridge
abstract: A system, method, and computer program product for monitoring managed resources by subscribing to broadcast notifications relayed by a Java Management Extensions (JMX) message bridge between JMX managed beans (JMX MBeans) and a client application with user interface (UI) components. In an embodiment, ADOBE™ FLEX™ user UI components subscribe to JMX broadcast notifications. The method generates messages destined for UI components using a JMX broadcaster. JMX MBeans are created in a JMX server and are subscribed to JMX broadcasts. The JMX MBeans are created with filter values identifying destination UI components. A JMX managed object name is passed to the UI during the creation of the UI components. The UI components become consumers of a message topic. A JMX message adapter dedicated to the communication with the JMX MBeans receives JMX broadcast notifications. Messages generated by the JMX broadcaster are relayed to the destination UI components through the JMX MBeans.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08539566&OS=08539566&RS=08539566
owner: Sybase, Inc.
number: 08539566
owner_city: Dublin
owner_country: US
publication_date: 20100414
---
Computer Program Listing Appendix under Sec. 1.52 This patent application includes a transmittal under 37 C.F.R. Sec. 1.52 of a Computer Program Listing Appendix. The Appendix which comprises a Word file that is IBM PC machine and Microsoft Windows Operating System compatible includes the below listed file. All of the material disclosed in the Computer Program Listing Appendix can be found at the U.S. Patent and Trademark Office archives and is hereby incorporated by reference into the present application.

The present invention is generally directed to monitoring managed resources and more particularly directed to a system and methodology for relaying broadcast notifications between the management server and a resource management client using a Java Management Extensions JMX message bridge.

Conventional resource monitoring and management tools use notifications to indicate when resource errors occur but lack an architecture that allows user interface UI elements to subscribe to broadcast notifications that users are interested in. SYBASE Control Center SCC is an example of a currently available resource monitoring and management solution with a notification component. SCC consists of a server with a web browser based monitoring and administration tool and a user interface UI . SCC is a web based management tool which provides an integrated set of management monitoring and configuration capabilities across multiple products. SCC can be used to monitor SYBASE products through a standard Internet web browser with the ADOBE Flash player plug in.

The ADOBE Flash player the ADOBE FLEX software development kit and and BlazeDS server based Java web messaging components provide significant advances in client server technology. However using these components with a JMX server requires an ability to relate JMX managed beans JMX MBeans with their counterparts as presented within a client application running in a web browser.

Data processing systems typically employ multiple geographically distributed resources that must be monitored and managed remotely. These managed resources can include servers running multiple disparate platforms and operating systems OSs which in turn host multiple processes and enterprise applications. System administrators database administrators DBAs and other users need to be alerted or notified of events occurring on managed resources without having to poll or manually check each resource being monitored. System administrators and other users also need to be notified of events occurring on managed resources when they are away from the office and not co located with the managed resources. For example users need to be able to monitor managed resources off hours from mobile computing devices home computers pagers and other remote computing devices.

Accordingly what is desired is a means of monitoring managed resources by broadcasting notifications triggered by events occurring on managed resources to users who do not have direct access to the managed resources. What is further desired are methods systems and computer program products for enabling a user using a client application such as but not limited to Flash in a web browser and Flash ADOBE Integrated Runtime AIR to subscribe to and receive notifications related to message topics associated with managed resources they wish to monitor. What is further needed is a means for relaying messages related to notifications to a client application configured to run Flash or Flash Lite.

Data push techniques are often employed for communications within enterprise style Rich Internet Applications RIAs . In Internet based communication using data push techniques a request for a given transaction is initiated by a publisher or central server. As data push techniques route data from servers to clients this communication technique can be inefficient in cases where a client does not require data being pushed from the central server. With data push techniques servers send updates as they occur and not when they are requested or required by clients. However using a push technology to communicate the status of managed resources to resource management clients can unnecessarily burden the managed resources and increase their load by requiring them to continually push communications to resource management clients. Conversely if a pull communication technique is used by resource management clients to pull the current status from managed resources the clients may not be aware of status changes for managed resources unless the clients periodically initiate communications.

Accordingly what is further needed are methods systems and computer program products for resource monitoring which provide a message bridge between notifications triggered by events on managed resources wherein the notifications are pushed from an intermediate messaging server such as but not limited to a BlazeDS message service and wherein the message bridge also employs push technology that engages resource management clients to selectively receive data updates in the form of broadcast notifications and then pushes updated data to a resource management client based on subscriptions established by the client. In this way the message bridge reduces the load on managed resources while simultaneously providing resource management clients with updated status of managed resources being monitored at the client.

The invention includes systems methods and computer program product embodiments for monitoring managed resources by relating broadcast notifications from a JMX server to message topics of managed objects representing managed resources. Briefly stated embodiments of the invention establish a JMX message bridge to enable communication of broadcast notifications between a management server and resource management client applications. According to embodiments of the invention methods systems and computer program products form a message bridge between a central JMX broadcaster and a destination user interface UI component within an ADOBE Flash player running in a web browser ADOBE Flash AIR running on a desktop or ADOBE Flash Lite running on a mobile device.

In an embodiment JMX Managed beans JMX MBeans are used to represent managed objects in a system and a user running a client application in the system. In an embodiment an alert system is built into a central management application such as but not limited to the SYBASE Control Center SCC . The managed objects are logical representations of managed resources. According to an embodiment of the present invention real time alerts can be sent to client applications running on computing devices such as but not limited to computer workstations and mobile devices to provide real time alert notification regarding managed resources any time anywhere. Alert thresholds can be customized to meet specific user and organization requirements.

An embodiment of the invention relates broadcast notifications of a JMX server with one or more message topics and sub topics of an ADOBE FLEX application. In an embodiment standard JMX notifications in concert with specialized JMX MBeans a customized JMX message adapter and a BlazeDS service relay notifications between managed resources and a client application used to monitor the managed resources. In an embodiment the client application includes user interface UI components that run within an ADOBE flash player. The UI components allow users using the client application to subscribe to broadcasts that are of interest. For example users can subscribe to broadcast notifications corresponding to managed resources they wish to monitor.

Embodiments of the present invention include methods systems and computer program products for relating broadcast notifications of a JMX server with message topics of an ADOBE FLEX application.

The present invention will now be described with reference to the accompanying drawings. In the drawings generally like reference numbers indicate identical or functionally similar elements. Additionally generally the left most digit s of a reference number identifies the drawing in which the reference number first appears.

The present invention relates to system method computer program product embodiments and combinations and sub combinations thereof for establishing a message bridge between user interface UI elements of a client application and server broadcast notifications. In an embodiment a central JMX broadcaster is employed to generate messages related to notifications destined for the UI. JMX broadcaster MBeans are created in the JMX server for broadcasting notifications from managed resources to a BlazeDS message service. The BlazeDS message service is customized to relay messages to UI components elements of a client application to enable a user interacting with the UI to monitor managed resources in a system.

An embodiment of the invention includes a centralized management server and zero or more distributed management agents. In an embodiment the agent is a Java process running on a host server where a managed resource may or may not reside e.g. Agent vs. Agentless deployment . In accordance with an embodiment of the invention the management agent and management server provides a container for agent plug ins to run services for runtime support of agent plug ins and communication protocols for interaction with the agent services and plug ins.

The following definitions are offered for purposes of illustration not limitation in order to assist with understanding the discussion that follows.

As used herein in an embodiment the term managed resource encompasses back end servers processes and hardware resources such as routers and printers. A managed resource is any hardware or software object that a user wishes to monitor. In an embodiment such monitoring is achieved by subscribing to broadcast notifications sent a message bridge through a JMX message adapter which is described in more detail below. In accordance with a Control Center embodiment a resource is a unique product component or subcomponent with a server being the most common managed resource. Managed resources comprise many components including servers databases devices and processes. According to an embodiment of the invention a managed resource is a product component or subcomponent that the Control Center application allows a user to monitor and manage. A description of the Control Center application is provided below.

As used herein in an embodiment a Control Center is a server application that uses a ADOBE Flash Player based resource management client application to deliver an integrated solution for monitoring and managing resources. An exemplary embodiment of a Control Center is the SYBASE Control Center. The Control Center provides a single comprehensive web administration console for real time performance status and availability monitoring of managed resources such as back end enterprise servers. In an embodiment the Control Center combines the JMX architecture illustrated in a rich client administrative console graphical user interface GUI depicted in and agents depicted in common services of architecture illustrated in and tools for managing and monitoring managed resources. In accordance with embodiments of the invention the Control Center application includes historical monitoring threshold based alerts and notifications alert based script execution and intelligent tools for identifying events performance status and usage trends for managed resources. According to an embodiment of the invention alerts and notifications related to managed resources are delivered via MBean broadcast notifications via a JMX message adapter to a resource management client ADOBE FLEX management client. In this exemplary embodiment the client application runs within an ADOBE flash player and flash player Lite.

As used herein in an embodiment a managed object is a logical representation of a managed resource. In accordance with an embodiment of the invention each managed resource is represented as a managed object which in turn has a managed object name and a JMX notification broadcaster MBean associated with it. According to the Control Center embodiment a resource explorer UI lists managed objects for each managed resource that a user has registered with the Control Center application. In an embodiment of the invention registering a server application or agent also makes the Control Center application aware of any subcomponents. A user using a resource management client application can register resources as individual managed objects or in batch mode to import multiple managed resources as managed objects. Once server and agent resources are registered their availability and performance can be monitored by monitoring their corresponding managed objects in a client application UI.

As used herein in an embodiment the term server encompasses computing devices that are designed to function as one or more of JMX servers MBean servers BlazeDS message services resource management clients and managed resources such as but not limited to enterprise applications processes network links web servers replication servers database servers firewall servers and other back end enterprise servers such as email servers file servers and application servers. A server may be comprised of one or more server machines. A server may be implemented as collection of servers such as a server farm or server cluster. For example a database server may be a commercially available server machine with one or more central processing units CPUs . Alternatively a database server may comprise multiple computing devices and or computing functionality hosted on multiple server machines i.e. a server farm .

As used herein in an embodiment an event is a condition on a managed resource that triggers a notification. For example a shutdown restart or reboot of a managed resource are events that can trigger notifications. Events may also trigger notifications when operational values associated with performance of a managed resource exceed one or more predefined tunable thresholds. For example an event may be defined for when CPU utilization on a managed resource exceeds a certain percentage threshold. Events can also be defined when storage utilization or disk access latency exceed predefined thresholds. Events can also be defined in relation to processes applications and application performance. For example the shutdown of a relational database presence of database corruption i.e. a database being marked as suspect replication failures available database storage exceeding a percentage threshold and database query times exceeding a threshold are other events that can trigger notifications. When a server or application has an unknown or undetermined state these events can also trigger notifications i.e. to indicate that a server or process is non responsive or a requests to the server process have timed out . State changes including but not limited to the entry of a server or application into single user mode are also events that can trigger notifications.

As used herein in an embodiment a notification is an indication of the occurrence of an event. Notifications are triggered by events and are broadcast to a plurality of subscribers who have expressed interest in receiving notifications associated with certain events occurring within managed resources. The purpose of a notification is to trigger a broadcast to one or more subscribers. An event triggered notification may in turn trigger another event which causes a message to be sent to a recipient. According to an embodiment of the invention notifications are broadcasted by the JMX notification broadcaster depicted in . The functionality of the JMX notification broadcaster is described in greater detail below with reference to the resource monitoring system embodiment depicted in .

As used herein in an embodiment a message comprises information to be communicated to a specific user or destination. Messages may be created as a result of an event triggered notification. Messages may be emails alerts short message service SMS messages or other communications to be delivered to a targeted destination. An event triggered broadcast notification can result in a subsequent creation of a message sent to a subscriber of a message topic related to the notification.

As used herein in an embodiment a JMX MBean is a unit of work that can be representative of an object within a system. JMX MBeans are Java classes that meet naming and inheritance standards dictated by the JMX standards. Objects within a system can be a resource a particular operation within a large process. JMX MBeans can be used to manage resources and processes. In accordance with the exemplary embodiments depicted in A and B specialized JMX MBeans receive JMX broadcast notifications from JMX notification broadcaster so that messages generated by JMX notification broadcaster are relayed by the JMX MBeans to UI components elements within the client application. In accordance with embodiments of the invention JMX MBeans can be created on a per user per browser session a per server and per application basis. JMX MBeans can also be created based on a type of user interface UI component. JMX MBeans are described in greater detail below with reference to A and B.

As used herein in an embodiment a JMX server is a server dedicated to the management of system resources. JMX MBeans within a JMX server are used to manage backend components of a system. Backend components can be but are not limited to enterprise applications processes network links database servers routers application servers replication servers and other enterprise servers. In accordance with an embodiment of the invention an MBean is created to represent a managed object for a user as in the client application. JMX MBeans are also created for each representation of the backend components of a system being managed. In an embodiment the backend components comprising a system being managed may be logically grouped into a list of perspective resources. According to the exemplary embodiments depicted in B and JMX server hosts an agent comprising agent layer having common services which communicate with a client application via calls to protocol connector . The functionality of the JMX server is described below with reference to B and .

As used herein in an embodiment a BlazeDS server is a server based Java remoting and web messaging technology that enables developers to connect to back end distributed data and push data in real time to ADOBE FLEX and ADOBE AIR applications for more responsive RIA experiences. Java remoting and web messaging server that allows a client monitoring application to receive distributed data from back end managed resources. For example a BlazeDS server can push data in real time to ADOBE FLEX client applications running within an ADOBE flash or flahs Lite player in a web browser client. As would be appreciated by one of skill in the relevant arts a BlazeDS server can be implemented as hardware software or a combination of hardware and software and is not precluded from being used with other client platforms such as but not limited to JavaScript Ajax.

Unless specifically stated differently in an embodiment a user is interchangeably used herein to identify a human user a software agent or a group of users and or software agents. Besides a human user who needs to monitor managed resources a software application or agent sometimes needs to monitor managed resources. Accordingly unless specifically stated the term user as used herein does not necessarily pertain to a human being. A user may be represented by an MBean. A user may also be represented by a client application. Users can have login credentials associated with them. Login credentials can include but are not limited to a user name and a password.

According to embodiments of the invention broadcast notifications between managed resources and client applications used to monitor the managed resources are relayed by a JMX bridge.

The next section describes a system for monitoring managed resources such as enterprise applications processes network links database servers application servers web servers and firewall servers. Subsequent sections describe architectures and methods for monitoring managed resources. The systems architectures and methods include subscriptions to event triggered broadcast notifications at a resource management client having UI components associated with the managed resources.

In the exemplary embodiment depicted in client application is an ADOBE Flash application written using the ADOBE FLEX software development kit. While this embodiment is described chiefly in terms of a connection between an ADOBE Flash client application and central JMX notification broadcaster it is applicable to other client applications with user interface UI components.

Client application can be used to create or update UI components that need JMX notifications. The need for notifications is based upon subscriptions to one or more JMX message JMX MBeans . In an embodiment client application is a resource management client used to monitor a plurality of managed resources.

After UI components are created or updated client application makes a standard remote call through BlazeDS message service to ask JMX notification broadcaster to request a message JMX MBean corresponding to the JMX UI component.

In embodiments of the invention use of server based web messaging technology resident on BlazeDS message services provide at least two data push techniques for sending messages from JMX message JMX MBeans to the ADOBE FLEX client application asynchronously. One technique is messaging services which send messages to and receive messages from server side destinations. Another technique is a Java Message Service JMS Adapter which integrates ADOBE FLEX messaging with JMS destinations. These two techniques are described below with reference to the components of resource monitoring system .

According to an embodiment of the invention the BlazeDS message service employs a server push technique and uses a specialized adapter to the messaging services. An exemplary Extensible Markup Language XML implementation of this embodiment is discussed below. The following code is an embodiment for an exemplary XML implementation. In this embodiment XML scripting language is used to implement a specialized message adapter for the messaging services. As would be appreciated by one of skill in the relevant arts other programming languages and technologies can be used to implement specialized message adapter in the programming language code samples below.

In a messaging configuration XML file messaging e.g. config.xml a message adapter is defined as follows 

In the ADOBE FLEX client application for example a consumer with a subscription is defined for the above destination thus enabling the consumer in client application to receive messages from BlazeDS message service .

On the Java side the context of JMX UI components corresponding the web client application can be code within message JMX MBeans that performs the following steps 

According to the above described embodiment of the invention the specialized JMX message adapter performs the key functionality of addressing the issue of listening for JMX MBean notifications originating from JMX notification broadcaster translating the notifications into messages and relaying messages to the ADOBE FLEX client application via BlazeDS message service .

Message JMX MBeans register themselves with JMX notification broadcaster by passing a subject name and filters corresponding to a subscription. The message JMX MBeans then wait for notifications from JMX notification broadcaster and subscriptions from JMX message adapter .

In another alternative embodiment of the present invention a JMS adapter not shown is used instead of the messaging services embodiment described above. In accordance with this embodiment the JMS adapter may be defined as follows .

According to this embodiment the JMS adapter integrates ADOBE FLEX messaging with JMS destinations so that either client application or the JMX server can post to produce and or listen to consume a JMS message topic or queue. This approach also can be used in combination with message JMX MBeans when a message JMX MBean can post a notification to a message bus. When a message JMX MBean posts a notification the JMS adapter listens at an endpoint of the message bus and transmits a corresponding message to client application . This embodiment is flexible enough to be used as a basis for building loosely coupled enterprise applications. Although the JMS adapter can be used in resource monitoring system for monitoring availability of managed resources the JMS adapter can result in change latency for UI components of client application .

In an embodiment a return JMX notification broadcaster to application JMX MBeans on BlazeDS messaging server is created in a JMX server element in . According to an embodiment of the invention application JMX MBeans register themselves with JMX notification broadcaster via calls . Calls supply a filter that limits subsequent notification broadcasts to BlazeDS messaging server relayed via JMX message adapter . A status is returned through BlazeDS message service back to client application as to the outcome of the creation of the subscription.

In accordance with an embodiment when a user initiates the UI on client application a call is initiated from the BlazeDS message service to JMX notification broadcaster . Call indicates all of the components needed to support the UI. These needed components include the JMX UI components and message JMX MBeans are created on an MBean server. The MBean server is described in further detail below with reference to the instrumentation layer depicted in . Each of the JMX UI components and message JMX MBeans register themselves to receive notifications from JMX notification broadcaster .

The creation of a UI component within client application triggers the client application to initiate a subscription to a message JMX MBean corresponding to the JMX UI. A subscription is created for the corresponding message topic defined on the BlazeDS message service which results in the creation of a subscription to a notification in message JMX MBeans through the JMX message adapter .

According to an embodiment of the invention messages are pushed from BlazeDS message service to client application . In this way the UI of client application does not need to poll pull or ask for status data from managed resources thus reducing the load on the managed resources. As messages are pushed from the BlazeDS message service the UI of client application does not change unless an event triggering a broadcast notification has occurred on a managed resource.

A message service resident on BlazeDS message service provides a complete publish subscribe infrastructure that allows the ADOBE FLEX client application and the BlazeDS message service to exchange messages in real time. Remoting allows an ADOBE FLEX client application to directly invoke methods of Java objects deployed in a JMX server.

In accordance with an embodiment of the invention managed resources may be represented as icons within the UI of client application wherein the appearance of the icon changes when the status of the corresponding managed resource has changed. For example an icon representing a back end database server may be red when the server is down or in an unknown state yellow when the server is starting or in single user mode and green when the server is up and running. Similarly an icon representing an enterprise application or process may be red when the application or process is down unresponsive or in an unknown state yellow when the application or process is starting up and green when the application or process is up and running. An exemplary embodiment of a UI of client application representing managed resources as icons is provided in which are described below with reference to a description of a graphical user interface GUI embodiment of the invention.

According to an embodiment of the invention a managed object is created or instantiated in the UI of client application for each managed resource to be monitored within the UI. Each managed object has an object name which is passed to the JMX message adapter by Blaze DS message server .

In an embodiment in order to receive messages pushed from the BlazeDS message service client application subscribes to one or more message topics on the BlazeDS message service . A subscription to a message topic is established by the client application by passing a managed object name to BlazeDS message service which then relays the object name to JMX message adapter .

JMX message adapter ties subscriptions requested by client application to corresponding message JMX MBeans . For each UI component on client application there is a corresponding subscription to a JMX Mbean representing a managed resource. A UI component JMX MBean can also be created to track the UI subscriptions. In an embodiment a UI component JMX MBean removes a UI subscription from the JMX server such as JMX server depicted in after a predefined tunable time period has passed or after a predefined tunable delay has occurred.

When events occur on managed resources corresponding to a JMX MBean subscribed to by client application a notification is broadcast by JMX notification broadcaster .

A JMX notification can be sent to any UI component in client application by setting the appropriate filter and broadcasting the notification to JMX notification broadcaster .

According to an embodiment of the invention BlazeDS message service JMX message adapter message JMX MBeans and JMX Notification broadcaster all reside on a single JMX server. Alternatively these components may be distributed across multiple servers.

In an embodiment of the invention client application can be implemented on a workstation computer. Alternatively client application can be implemented on a mobile client with a web browser with support for the ADOBE flash player Lite. For example client application can be deployed to mobile clients such as but not limited to a personal digital assistant PDA a device operating according to the MICROSOFT Pocket PC specification with the MICROSOFT Windows CE operating system OS a device running the Symbian OS a device running the Andriod OS a device running the PALM OS a mobile phone a device running the iPhone OS a BLACKBERRY device a smart phone a hand held computer a palmtop computer a tablet computer a laptop computer and an ultra mobile PC.

Besides the above described techniques that employ a BlazeDS message service the message JMX MBeans can interact with notifications and send messages to UI components within client application using other data services. For example alternative embodiments of the invention can use the ADOBE LiveCycle Data Service LCDS the open source Granite Data Services GraniteDS or WebORB. These alternatives to the BlazeDS based embodiments are briefly discussed below.

LCDS represents a superset of BlazeDS functionality resident on BlazeDS message service . LCDS provides the same remoting and messaging capabilities as BlazeDS. LCDS also includes the Java to ADOBE integration needed for JMX MBeans to relay messages to an ADOBE FLEX client application . Thus LCDS is a full featured framework for developing enterprise RIA solutions and can be used in place of BlazeDS message service .

GraniteDS supports data push feature based on a producer consumer architecture and is an open source alternative to LCDS. GraniteDS is integrated with Java Platform Enterprise Edition J2EE technologies including J2EE persistence systems. As GraniteDS includes some of the functionality of LCDS and BlazeDS so the above described embodiments can be implemented with GraniteDS instead of the BlazeDS message service .

WebORB messaging includes a subsystem for exchanging messages between ADOBE FLEX client application and a Java application. WebORB supports four modes of integration client to client client to server server to client and server to server. WebORB supports ADOBE Flash applications and ADOBE FLEX clients. Like BlazeDS WebORB provides remoting services data management and real time messaging for exchanging messages with ADOBE FLEX client application . As the WebORB architecture is similar to BlazeDS the above described embodiments of the invention can be adapted to use WebORB instead of the BlazeDS message service .

The code that is contained in APPENDIX I is an example embodiment for a JMX message adapter . In this embodiment the Java programming language is used to implement message adapters. As would be appreciated by one of skill in the relevant arts other programming languages and technologies can be used to implement JMX message adapters in the programming language code sample provided in APPENDIX I.

An exemplary JMX architecture is illustrated in . are described with continued reference to the embodiments illustrated in . However are not limited to those embodiments.

As shown in JMX architecture includes client application and JMX server . JMX server includes several subcomponents which are described below with reference to .

According to the embodiment depicted in JMX architecture includes three layers. These are distributed layer agent layer and instrumentation layer . In the exemplary embodiment shown in instrumentation layer resides on an MBean server.

Distributed layer makes JMX MBeans visible via protocols such as but not limited to Hypertext Transfer Protocol HTTP or Simple Network Management Protocol SNMP and it uses calls to protocol connector to expose the agents application programming interfaces APIs to other distributed technologies such as the Java Remote Method Invocation RMI API. For example an agent within agent layer may provide an RMI connection for a client application running in a location remote from JMX server or another application running in a remote location.

Agent layer contains the adapters and connectors needed to initiate calls to distributed layer . According to an embodiment agent layer can use JMX agents to contain a JMX MBean . Alternatively a developer can write a new agent to contain a JMX MBean . JMX agents such as timer service and monitoring service provide MBean services including timing and monitoring of managed resources respectively by dynamically loading JMX MBeans onto JMX server and defining relationships between managed resources .

According to an embodiment of the invention agent layer is a Java process running on a server machine where one or more managed resources reside. Agent layer provides a container for agent plug ins to run in services for runtime support of the agent plug ins and communication protocols for interaction with the agent services and plug ins via protocol connector in distributed layer .

Agent layer further comprises an MBean server within instrumentation layer comprising a message JMX MBean corresponding to each managed resource being monitored by JMX server .

In accordance with an embodiment agent layer also contains the runtime environment or the MBean server within agent layer . According to an embodiment JMX MBeans must register their presence with the MBean server so that the management framework of agent layer can detect them. The MBean server also handles management messages that are sent among registered JMX MBeans .

Instrumentation layer contains JMX MBeans and their managed resources . From this layer a JMX MBean can be used to encapsulate a managed resource and expose the managed resource for management and monitoring via client application . As an exemplary embodiment of how managed resources in instrumentation layer function a client application that uses a JMX MBean to direct an enterprise application i.e. a managed resource to look up business information from a database table. According to this embodiment the JMX MBean corresponding to the enterprise application receives this information and passes it to client application . As shown in the information is passed to client application via calls from agent layer to distributed layer which cause messages to be relayed to client application .

In an embodiment a Control Center application extends JMX to provide additional protocol support and services using a SYBASE Control Center management agent or server. An exemplary SCC Management Agent Server is illustrated in within the context of JMX architecture .

In the exemplary embodiment of managed resources include a SYBASE ADAPTIVE SERVER Enterprise ASE database server a SYBASE IQ analytics server and a replication server. As will be appreciated by persons skilled in the relevant art s other managed resources could be managed by client application . For example other enterprise database servers could be managed resources .

As shown in according to one embodiment of the invention client application can be an SCC web application running on a mobile device or a Command Line Interface CLI .

According to an embodiment agent layer comprises a plurality of JMX services that communicate with protocol connector in distributed layer via calls . As discussed above with reference to JMX services can include timer service monitoring service and relationship service .

In the embodiment depicted in agent layer further comprises SCC management agent server value added services . Value added services can include but are not limited to security services session services file transfer services remote shell services discovery services and messaging services.

According to an embodiment of the present invention UA framework provides a plurality of services which can be leveraged by agent plug ins in agent layer on JMX server . In one embodiment some of the plurality of services are mandatory and others are optional. The optional services may be disabled to conserve memory and CPU capacity of a JMX server or a server hosting client application . In accordance with this exemplary embodiment the mandatory services include bootstrap agent session environment configuration and security services. The optional services may include one or more of discovery file transfer plug in registration Java Remote Method Invocation RMI remote shell messaging alert management Tabular Data Stream TDS Simple Network Management Protocol SNMP SYBASE Control Center SCC and other services.

Agent layer includes an MBean server having instrumentation layer . In the embodiment provided in there are JMX MBeans corresponding to each of the managed resources . For example ASEAgent JMX MBean communicates messages between the ADAPTIVE SERVER and instrumentation layer . Similarly an IQAgent JMX MBean communicates messages between the managed SYBASE IQ server and instrumentation layer and RSAgent JMX MBean communicates messages between the replication server and instrumentation layer . In this way the respective JMX MBeans for each managed resource receive information via messages and are able to pass this information to SCC client applications .

As described above with reference to information received in messages from JMX MBeans is passed via calls between agent layer and distributed layer . Distributed layer communicates with client application by sending messages via protocol connector . Distributed layer also includes specialized protocol adapters . In an embodiment of the present invention specialized protocol adapters include adapters for Java RMI HyperText Markup Language HTTP and Simple Object Access Protocol SOAP . Distributed layer also includes discovery services . According to an embodiment of the invention discovery services include services for the Jini network architecture User Datagram Protocol UDP and Lightweight Directory Access Protocol LDAP . Discovery services and specialized protocol adapters are configured to send messages to SCC web client application .

According to an embodiment of the invention a management agent may be placed deployed on each host JMX server within system . In an embodiment a networked client application communicates via calls with managed objects representing managed resources that are available for management. According to an embodiment of the invention client application deploys a management agent to the agent layer of each JMX server hosting a managed object being monitored at client application . This deployment occurs during the creation of a UI component in client application associated with managed objects hosted on JMX servers .

In an alternative embodiment of the invention agentless monitoring can be performed in system . For example a JMX server without an agent layer not shown communicates directly with an ASE server or replication server . According to this embodiment of the invention an agentless architecture the agent resides in a central location and can communicate with managed resource . For example an agent hosted on a central server can communicate with managed resources via JDBC calls or calls to other APIs.

As shown in the exemplary embodiment of the hosts are JMX servers which each have an agent layer . An agent layer on each JMX server is configured to communicate with resource management client application in order to receive via calls from agent layer information regarding management agents being deployed within system . As described above with reference to messages are communicated directly between resource management client application and a distributed layer within each host JMX server hosting a managed object representing a managed resource within system . For clarity messages distributed layers and managed resources are not depicted in .

In accordance with an embodiment of the invention hosts JMX servers comprise managed objects representing different managed resources residing on the hosts JMX servers . Managed objects are logical representations of their corresponding managed resources . According to an embodiment each managed resource is represented as one managed object that in turn has a JMX notification broadcaster JMX MBean associated with it on its host JMX server .

In the exemplary embodiment depicted in managed objects are logical representations of SYBASE ADAPTIVE SERVER Enterprise ASE servers a replication server and a SYBASE ADAPTIVE SERVER IQ ASIQ server. In an embodiment a managed object is instantiated on JMX server for a replication server having database replication software that moves and synchronizes data across an enterprise. For example the database replication server can perform bi directional replication across the two ASE database servers depicted in which can be in multiple geographical locations. Database replication software running on the replication server represented as managed object comprises instructions to achieve a host of enterprise application needs including guaranteed data delivery real time business intelligence and zero operational downtime for the ASE databases residing on a plurality of hosts.

More particularly flowchart illustrates the steps by which a managed resource is registered in client application and by which a user is authenticated to monitor the managed resource according to an embodiment of the present invention.

The method begins at step when a JMX server is started. In the exemplary embodiment illustrated in JMX server is an SCC server. provides an example display depicting the status of the startup of the SCC server started in step .

In step a web browser is launched within a user interface of client application . In embodiments of the invention the web browser launched in this step can be a commercially available or open source Internet web browser including but not limited to MICROSOFT Internet Explorer Mozilla Firefox GOOGLE Chrome APPLE Safari and OPERA . After the web browser is launched the method proceeds to step .

In step a Uniform Resource Locator URL for an SCC application is received when the URL is entered within the browser session initiated in step . provides an example interface depicting a web browser interface on a client application after an SCC URL e.g. https cheetah 8283 scc has been received. After the URL for an SCC application is received the method proceeds to step .

In step a user is logged into the SCC server. In this step credentials for a login to the SCC server are received. Interface depicts an example login dialog interface wherein a user name and password can be entered. After the login credentials are received and the login is completed the method proceeds to step .

In step managed resources are selected and registered. depict an example interface for selecting and registering one or more managed resources . After managed resources are selected and registered the method proceeds to step .

In step the managed resources selected and registered in step are authenticated. depicts an example interface with an authentication dialog interface where authentication credentials can be entered. As shown in a user can authenticate to a managed resource using the user login credentials received in step . Alternatively a user can authenticate to a managed resource using different credential received within authentication dialog interface . depicts a display displaying an authentication log showing the results of authenticating to a managed resource . As shown in interface when a user is successfully authenticated to a managed resource in step the state of a corresponding managed object is available from a JMX MBean mo.JmxManagedObjectMBean . After the managed resources are authenticated the method proceeds to step and the method ends.

Although in the exemplary embodiments depicted in and the GUI is shown as using an SCC application it is understood that the GUI can be readily adapted to monitor managed resources using other resource management platforms.

Throughout and displays are shown with various icons command regions dialog interfaces buttons menus links and data entry fields which are used to initiate action invoke routines launch displays enter data view data or invoke other functionality. The initiated actions include but are not limited to logging in to an SCC application selecting SCC tasks displaying managed resources selecting managed resources registering managed resources and authenticating to managed resources . For brevity only the differences occurring within the figures as compared to previous or subsequent ones of the figures are described below.

Various aspects of the present invention can be implemented by software firmware hardware or a combination thereof. illustrates an example computer system in which the present invention or portions thereof can be implemented as computer readable code. For example the method illustrated by the flowchart of can be implemented in system . Resource monitoring systems and of can also be implemented in system . Also JMX architecture of can be implemented in system . Various embodiments of the invention are described in terms of this example computer system . After reading this description it will become apparent to a person skilled in the relevant art how to implement the invention using other computer systems and or computer architectures.

Computer system includes one or more processors such as processor . Processor can be a special purpose or a general purpose processor. Processor is connected to a communication infrastructure for example a bus or network .

Computer system also includes a main memory preferably random access memory RAM and may also include a secondary memory . Secondary memory may include for example a hard disk drive a removable storage drive flash memory a memory stick and or any similar non volatile storage mechanism. Removable storage drive may comprise a floppy disk drive a magnetic tape drive an optical disk drive a flash memory or the like. The removable storage drive reads from and or writes to a removable storage unit in a well known manner. Removable storage unit may comprise a floppy disk magnetic tape optical disk etc. which is read by and written to by removable storage drive . As will be appreciated by persons skilled in the relevant art s removable storage unit includes a computer usable storage medium having stored therein computer software and or data.

In alternative implementations secondary memory may include other similar means for allowing computer programs or other instructions to be loaded into computer system . Such means may include for example a removable storage unit and an interface . Examples of such means may include a program cartridge and cartridge interface such as that found in video game devices a removable memory chip such as an EPROM or PROM and associated socket and other removable storage units and interfaces which allow software and data to be transferred from the removable storage unit to computer system .

Computer system may also include a communications interface . Communications interface allows software and data to be transferred between computer system and external devices. Communications interface may include a modem a network interface such as an Ethernet card a communications port a PCMCIA slot and card or the like. Software and data transferred via communications interface are in the form of signals which may be electronic electromagnetic optical or other signals capable of being received by communications interface . These signals are provided to communications interface via a communications path . Communications path carries signals and may be implemented using wire or cable fiber optics a phone line a cellular phone link an RF link or other communications channels.

Computer system may additionally include computer display . According to an embodiment computer display in conjunction with display interface can be used to display UI on operator console . Computer display may also be used to display the GUI interfaces depicted in .

In this document the terms computer program medium and computer usable medium are used to generally refer to media such as removable storage unit removable storage unit and a hard disk installed in hard disk drive . Signals carried over communications path can also embody the logic described herein. Computer program medium and computer usable medium can also refer to memories such as main memory and secondary memory which can be memory semiconductors e.g. DRAMs etc. . These computer program products are means for providing software to computer system .

Computer programs also called computer control logic are stored in main memory and or secondary memory . Computer programs may also be received via communications interface . Such computer programs when executed enable computer system to implement the present invention as discussed herein. In particular the computer programs when executed enable processor to implement the processes of the present invention such as the steps in the methods illustrated by flowchart of and systems and of discussed above. Accordingly such computer programs represent controllers of the computer system . Where the invention is implemented using software the software may be stored in a computer program product and loaded into computer system using removable storage drive interface hard drive or communications interface .

The invention is also directed to computer program products comprising software stored on any computer useable medium. Such software when executed in one or more data processing device causes a data processing device s to operate as described herein. Embodiments of the invention employ any computer useable or readable medium known now or in the future. Examples of computer useable mediums include but are not limited to primary storage devices e.g. any type of random access memory secondary storage devices e.g. hard drives floppy disks CD ROMS ZIP disks tapes magnetic storage devices optical storage devices MEMS nanotechnological storage device etc. and communication mediums e.g. wired and wireless communications networks local area networks wide area networks intranets etc. .

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example only and not limitation. It will be understood by those skilled in the relevant art s that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined in the appended claims. It should be understood that the invention is not limited to these examples. The invention is applicable to any elements operating as described herein. Accordingly the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

