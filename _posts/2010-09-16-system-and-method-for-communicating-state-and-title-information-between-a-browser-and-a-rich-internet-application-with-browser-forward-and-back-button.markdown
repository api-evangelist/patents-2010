---

title: System and method for communicating state and title information between a browser and a rich internet application with browser forward and back button support
abstract: A system and method communicates address and state information from a browser to a rich Internet application to allow the Rich Internet Application to start at a location, or preload variables, corresponding to the state information. The system and method communicates address and state information from the Rich Internet Application to the browser to allow such information to be displayed by the browser for use or retrieval. The system and method allows the user to navigate within the Rich Internet Application using the browser's forward and back buttons.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08234657&OS=08234657&RS=08234657
owner: Adobe Systems Incorporated
number: 08234657
owner_city: San Jose
owner_country: US
publication_date: 20100916
---
This application is a continuation of U.S. patent application Ser. No. 11 280 023 filed Nov. 15 2005 entitled System And Method For Communicating State And Title Information Between A Browser And A Rich Internet Application With Browser Forward And Back Button Support which issued as U.S. Pat. No. 7 802 262 and claims priority to U.S. provisional patent application Ser. No. 60 736 978 entitled Method and Apparatus for Communicating State and Title Information Between a Browser and a Rich Internet Application filed on Nov. 14 2005 and which is a continuation in part of U.S. patent application Ser. No. 10 794 173 issued as U.S. Pat. No. 7 536 672 entitled Management of User Interaction History with Software Applications filed on Mar. 5 2004 and is related to U.S. patent application Ser. No. 11 280 714 filed Nov. 15 2005 entitled System And Method For Communicating State And Title Information Between A Browser And A Rich Internet Application which issued as U.S. Pat. No. 8 001 458 and each is hereby incorporated by reference in its entirety.

The present invention is related to computer software and more specifically to computer software for the Internet.

Many internet addresses employ representational state transfer information known as REST information to specify the contents of a web page. The REST information is used by the server to retrieve and provide the web page. For example selecting a book at the Web Site of Amazon.com takes you to a link amazon.com exec obidos tg detail 0321213432 qid 1107977455 sr 1 8 ref sr18 104 2847832 6485547 v glance s books. Everything after the domain name may be REST information the http www has been omitted from the link above .

REST information is not only useful to the server it can also be useful for the user. A browser will record the entire link including the REST information to allow a user to use the back button on a browser and get back to a prior viewed page or a user can bookmark the link. The user can also cut the link from the browser s address box and provide it in an e mail message for example. In either case the link can be used to navigate directly to the page desired bypassing the site navigation tools that would otherwise be required to get there if one had only the domain name.

The representational state transfer information may contain information that can be useful for other purposes. For example John Udell s Library Lookup Bookmarklets scrapes the ISBN from the REST information used in popular book retailer s web sites to show a user whether one or more specified libraries carries the book being viewed on the retailer s web site.

Another form of information that the user of a web page can use is a title of a web page. The title of a web page is displayed in certain locations notably across the title bar of the browser window. If the title describes the information in the web page being displayed the user can use the title to identify the information contained in the web page being displayed. The title may also be captured with a bookmark and used as the title of the bookmark simplifying the bookmarking process. Additionally the title can be used as the title of the window and the title may be displayed in a status area of the operating system indicating all windows active to assist the user in selecting among the various windows.

The REST information and the title can change as described above for every web page displayed. This allows the exact location of a web page to be freely available and the title information to remain current. However when the information being displayed in a browser contains a Rich Internet Application known as RIA such as a Flash movie the title and REST information will not change from the web page used to download the RIA. Thus the title can become out of sync with the content of the RIA and the REST information only indicates the web page used to navigate to the start of the RIA. This REST information cannot be used to mark a specific point in the RIA for the purposes described above or be used to directly navigate to a point past the starting point of the RIA.

Some web sites have read in REST information in the URI that was either entered by a user or part of a link to allow a user to jump to a specific web page but such information was never updated in the address box of the browser as the RIA progressed.

Users also find it helpful to use a browser s forward and back buttons to move to web pages they have visited before. However because an RIA may appear as a single web page to the browser the user is unable to use the browser s forward and back buttons to navigate within an RIA.

What is needed is a system and method that can allow the browser to display REST information that corresponds to various points in a RIA can utilize the RIA information provided to navigate to a point in the RIA after the start of the RIA and can update the browser title to correspond to the information being displayed in the RIA and can allow the user to revisit various points in the RIA the user has already visited using the browser s forward and back buttons.

A system and method allows REST information to be retrieved from the address box of the browser and used by a rich Internet application RIA to navigate to the point to which the REST or other information corresponds preload variables or both. As the RIA operates at various points in the RIA the system and method inserts an address and REST information into the address box of a browser and or a title to the title bar of the browser to identify the state of the Rich Internet Application at each of those points. The user can capture the address and REST information from the address box to refer to the identified point at a later time.

To implement the operations described above in one embodiment the system and method adds a visual basic script and certain JavaScript functions described below to the web page that references the RIA the referring page . One of the JavaScript functions identifies the type of the browser for example whether the browser is Internet Explorer or another type of browser and provides the initial address and REST information used to load the page to the RIA via an HTML object and embed tag. The RIA can then parse the REST information in the information it receives and determine how to start in a manner that corresponds to the REST information. If no REST information is received the RIA can start at a usual beginning point.

As the RIA operates it can provide to the browser an address and REST information and title information that corresponds to the approximate location of the program as certain reference points in the program are reached or as other events occur. This may be accomplished for non IE browsers by the RIA communicating to JavaScript functions in the referring web page that then provide this information to the browser. For Flash based RIAs communication with JavaScript is accomplished using the getURL instruction in Flash Actionscript. The RIA communicates with IE using VBScript functions in the referring web page that then provide the address and REST information and the title to the Browser. For Flash based RIAs communication with VBScript is accomplished using the fscommand in Flash Actionscript. The name of the VBScript function on the referring page will start with same name as the Flash application s ID used in the Object tag e.g. flashapp . Other characters can finish the name of the VBScript function.

To allow the user to navigate the RIA using the browser s forward and back buttons the referring page may contain a conventional iframe which designates a frame that will not be displayed. Each time the regular RIA provides additional REST information as described above it directs the browser to reload the iframe using a URL that references a utility referring page and also includes the same REST information that was provided to the browser for display in the address bar as described above. The browser will load or reload the utility referring page into the iframe. The utility referring page directs the browser to instantiate a utility application and make available to the utility application the address and REST information from the URL provided by the RIA. The utility application retrieves the address and REST information and provides the REST information it receives to the RIA. The RIA receives the REST information and determines the time elapsed since it provided the instruction to the browser to load or reload the iframe. If the amount of time is below a threshold the RIA will ignore the REST information it receives and otherwise it will jump to the location preload variables or both as indicated by the REST information. As a result when the RIA directs the browser to reload the iframe the REST information the RIA receives from the utility application will have no effect. However each time the browser loads or reloads the iframe the browser will record the address and REST information in its history enabling the use of the forward and back buttons of the browser. If the user uses one of those buttons the browser will reload the iframe with the REST information that is stored in the browser s history. The utility application will be reinstantiated and will again provide the REST information to the RIA. The RIA will determine the amount of time elapsed since the browser was instructed to load or reload the iframe. Because this amount of time will typically exceed the threshold the RIA will jump to the location preload variables or both as indicated by the REST information it receives and continue operating from that point. In another embodiment the RIA will jump to the location preload variables or both in response to the state information received from the utility application being different from the state information it provided to the browser to load or reload the iframe instead of the time exceeding the threshold. In either case the forward and back buttons of the browser will navigate the RIA among the locations corresponding to the new REST information provided by the RIA that the user has previously visited.

The present invention may be implemented as computer software on a conventional computer system. Referring now to a conventional computer system for practicing the present invention is shown. Processor retrieves and executes software instructions stored in storage such as memory which may be Random Access Memory RAM and may control other components to perform the present invention. Storage may be used to store program instructions or data or both. Storage such as a computer disk drive or other nonvolatile storage may provide storage of data or program instructions. In one embodiment storage provides longer term storage of instructions and data with storage providing storage for data or instructions that may only be required for a shorter time than that of storage . Input device such as a computer keyboard or mouse or both allows user input to the system . Output such as a display or printer allows the system to provide information such as instructions data or other information to the user of the system . Storage input device such as a conventional floppy disk drive or CD ROM drive accepts via input computer program products such as a conventional floppy disk or CD ROM or other nonvolatile storage media that may be used to transport computer instructions or data to the system . Computer program product has encoded thereon computer readable program code devices such as magnetic charges in the case of a floppy disk or optical encoding in the case of a CD ROM which are encoded as program instructions data or both to configure the computer system to operate as described below.

In one embodiment each computer system is a conventional SUN MICROSYSTEMS ULTRA 10 workstation running the SOLARIS operating system commercially available from SUN MICROSYSTEMS Inc. of Mountain View Calif. a PENTIUM compatible personal computer system such as are available from DELL COMPUTER CORPORATION of Round Rock Tex. running a version of the WINDOWS operating system such as 95 98 Me XP NT or 2000 commercially available from MICROSOFT Corporation of Redmond Wash. or a Macintosh computer system running the MACOS or OPENSTEP operating system commercially available from APPLE COMPUTER CORPORATION of Cupertino Calif. and the NETSCAPE browser commercially available from NETSCAPE COMMUNICATIONS CORPORATION of Mountain View Calif. or INTERNET EXPLORER browser commercially available from MICROSOFT above although other systems may be used.

In one embodiment an author adds the following code to the referring page the web page that refers to the RIA the operation of which is described in more detail further below 

In one embodiment the REST information that may be received with the address may contain location references variable information or both. The browser displays the title of the referring page in the title bar of the browser and displays the address of the referring page in the address bar of the browser.

The name of an RIA is supplied by the referring page in instruction 10 of the code above and the function showFlash is called with the name of an RIA as shown below 

The browser type is obtained from the browser by the referring page. In one embodiment the function navigator.appName.indexOf is used by the referring page with an argument of Microsoft as shown above in instruction 2 and the value true or false is stored in the variable isMSIE . In the above example if the function returns any response other than 1 then the referring page obtains Internet Explorer as the browser type and isMSIE is set to true otherwise isMSIE is set to false.

The setup of the RIA is arranged by the referring page. To arrange such setup in one embodiment the referring page constructs strings which can be later carried out as commands that assign values to parameters used by the browser to instantiate the RIA. For example in line 7 above the string var 11 is a command stored at this point as a string to set the values of the variables object classid codebase width height id and align to the values shown above in instruction 3. In the above example instructions 4 through 8 are similarly used to arrange the setup of an RIA that runs under the Flash player commercially available from Macromedia Inc. of San Francisco Calif. at the web site macromedia.com.

The address and REST information is obtained by the referring page from the browser. In one embodiment the referring page obtains the address and REST information from the browser using document.location as shown in instructions 7 and 8 above which retrieves any REST information supplied with the address used to load the referring page.

The name of the RIA the address and REST information and the browser type are provided by the referring page to the browser. In one embodiment the referring page uses the various strings it has arranged in step with the document.write in instruction 9 to provide the browser with the RIA name address and REST information and browser type. The example above uses document.write with the argument 11 12 13 14 15 16 which strings together variables 11 through 16 all of which are commands arranged by the referring page as described above. For example instruction 7 of the code above shows var 15 which is part of the argument used by the referring page with document.write to be a string which commands the browser to set FlashVars initialURL to the address and REST information of the page referring to the Flash application and to set isMSIE to be true if the browser is Microsoft Internet Explorer. FlashVars are used to pass parameters to a Flash RIA and are described in more detail at the web page macromedia.com cfusion knowledgebase index.cfm id tn16417. When document.write executes var 15 will execute as a command providing the REST information supplied with the address of the referring page and the browser type to the browser which will make them available to the browser. Using var 15 with document.write along with variables 11 12 13 14 and 16 the RIA name address and REST information and browser type are provided to the browser by the referring page and the browser is commanded to instantiate the RIA and Flash.

At step the RIA is instantiated by the browser and the address and REST information and browser type are provided or otherwise made available to the RIA by the browser as well. In one embodiment as noted above the Flash application and Flash are instantiated by the browser as a result of the document.write in instruction 9. The REST information and browser type are obtained from the browser by a Flash application having been made available via the FlashVars parameter set up as shown in instruction 7. As an example initialURL which is set to the whole URL of the page referring to the Flash application including any REST information and isMSIE which is set to true if the browser is Microsoft Internet Explorer are provided or otherwise made available to the RIA as arranged in instructions 7 and 8.

At step the communication capability between the RIA and the browser is optionally instantiated and the REST information and browser type are received at the RIA. In one embodiment to instantiate communications a Flash RIA imports a BrowserStateManager class using import BrowserStateManager and then creates a new instance of it using var browserstate new BrowserStateManager . The BrowserStateManager class is available at the web site www.klynch.com apps flashlinking flashlinking.zip.

If REST information has not been received at the RIA then the RIA starts operating at the default starting point for example the beginning of a movie. In one embodiment to determine whether REST information has been received the RIA parses the URL it receives for any REST information that corresponds to starting point information. The RIA may also parse the URL for initial variable information. Variables used by the program are initialized to their default values if no REST information corresponding to the variable information is present.

If REST information has been received at the RIA then the RIA starts operating at the location in the RIA corresponding to the REST information preloads certain variables or both . The method continues at step of .

In step the RIA determines whether a new title should be displayed by the browser and if so it identifies the new title for the browser to display. In one embodiment if no new title is to be displayed then the method continues at . In one embodiment the RIA determines whether the browser is Microsoft Internet Explorer or a non Microsoft Internet Explorer browser such as Firefox a Mozilla based internet browser. In one embodiment this determination is made based on the value of the isMSIE Flashvar received or retrieved by the RIA as part of step .

If the browser is Microsoft IE then the RIA provides the new title to the referring page by calling a VBScript function and passing the title as a parameter to this function. In one embodiment an FSCommand Flash ActionScript instruction is used to provide the new title to the VBScript function added to the referring page by the author of the referring page. In one embodiment the function is added as follows 

Fscommand is described at the web page macromedia.com support flash action scripts actionscript dictionary actionscript dictionary372.html

The name of the VBScript function on the referring page starts with same name as the Flash application s ID used in the Object tag e.g. flashapp . Other characters can finish the name of the VBScript function.

In step the new title is provided to the browser by a VBScript function by the referring page and the title display on the browser is updated accordingly. In one embodiment the title information is provided by the VBScript function on the referring page by setting the value of document.title and the window title of the browser is updated by the browser in response. The method continues at step .

If the browser is not Microsoft Internet Explorer then the RIA provides the title information to the referring page using a JavaScript function. In one embodiment the title information can be provided by the Flash RIA to a JavaScript function on the referring page by calling the getURL function in ActionScript and using the javascript prefix to indicate that there is an external JavaScript to be run. In one embodiment receiving JavaScript functions are defined in the referring page as

The getURL function is described at the Web page macromedia.com support flash action scripts actionscript dictionary actionscript dictionary377.html

The referring page provides the title information to the browser which updates the display using document.title . In the JavaScript functions above 

If the RIA determines that the address and new REST information should be displayed by the browser it identifies the new REST information to be displayed and the method continues at step . In one embodiment the address is the same address received by the RIA as described above. In one embodiment if no new REST information is to be displayed then the method continues at step . At step the RIA determines whether the browser is Microsoft Internet Explorer or a non Microsoft Internet Explorer browser such as Firefox a Mozilla based internet browser as described above.

In a manner similar to the way the title is provided to Internet Explorer as described above if the browser is Microsoft IE then the RIA provides the REST information to the referring page using a VBScript function. The address may be the one received by the RIA as described above. In one embodiment FSCommand Flash ActionScript is used as shown above to provide the address and REST information to the referring page. In one embodiment the REST information is provided to the referring page using a Flash ActionScript FSCommand function as follows 

Although only the REST information is provided in another embodiment the REST information and address received as described above are provided by the RIA to the referring page.

In step the address and REST information are provided to the browser by the referring page and the URL display on the browser is updated to display the address and REST information. In one embodiment to provide the address and REST information to the browser the VBScript function sets the value of location.href as shown in the example above. In this embodiment the referring page appends the address to the REST information received from the RIA though in other embodiments the address and REST information are received from the RIA and provided to the browser as received.

The browser will display a URL that includes a web address as well as location and or variable information. This information may be used as described above with reference to steps to return the RIA to the same location.

If the browser is not Microsoft Internet Explorer then the RIA provides the address and REST information to the referring page using a JavaScript function. In one embodiment the address and REST information can be provided by the RIA to a JavaScript function on the referring page by calling getURL in ActionScript and using the javascript prefix to indicate that there is script to be run. For example 

is one way of providing the REST information to the referring page via a JavaScript function if the browser is a non Internet Explorer browser. In one embodiment the REST information is provided to the referring page by the RIA and the referring page appends it to the address as described below. In another embodiment the RIA provides the address and REST information to the referring page using the address received as described above.

The referring page then provides the address and REST information to the browser . In one embodiment to provide the REST information to the browser the JavaScript function sets a new value to location.href as shown in line below 

As noted the referring page may append the address information to the REST information received from the RIA and provide the address and REST information to the browser. In another embodiment the RIA provides both the address and REST information and the referring page receives it and provides it to the browser as received.

The Rich Internet Application runs in a conventional fashion. The RIA may run using any conventional technique of any conventional program. In one embodiment if the RIA is a Flash movie then the movie is displayed as an animation. At any time the RIA may determine that a new title or new REST information may apply . If the RIA determines that a new title applies then the method continues at step . If the RIA determines that new REST information applies then the method continues at step .

It can be helpful for the URL provided by the referring page to the browser as described above to be URL encoded as described at the web page blooberry.com indexdot html topics urlencoding.htm. Alternatively the RIA can avoid the use of non permitted characters such as in the REST information.

To enable the user to use the forward and back buttons to navigate between the previously visited points of the RIA identified with different REST information in one embodiment the referring page defines an invisible iframe that has a name that can be referenced as described below. An invisible iframe is a frame that will not be displayed by the browser but acts like part of a web page for all other purposes. For example the referring page contains 

Following steps and but before step the RIA sets in process a series of instructions that will cause the browser to load information that includes the rest information into the browser history so that the REST information is included in the addresses loaded in response to a user using the browser s forward and back buttons. As described above if forward and back button support is not desired step follows steps and as illustrated by the dashed lines in the Figure.

In one embodiment the utility referring page contains therein instructions that are at least similar or identical to those in the referring page for example in the code above except that the name of the utility application is provided in place of the name of the RIA and the height and width of the RIA may be specified as a smaller value or zero. Operation of the utility referring page is similar or identical to that of the referring page described above as will now be briefly described.

The utility referring page supplies the name of the utility application for example by the function call in the line in the utility referring page that is similar to instruction 10 described above. The utility referring page need not obtain the browser type from the browser as is performed in step and so the code performing that function on the referring page need not be duplicated on the utility referring page. The utility referring page arranges for the setup of the utility application in a manner similar to that described above except that the utility application will have a URL different from that of the RIA. In one embodiment the utility application is an application that runs under the Flash Player but is different from the RIA described above. In one embodiment the utility application performs the operations described below.

The utility referring page obtains the address and REST information from the browser in the manner described above. The utility referring page provides the name of the utility application supplied in step and the address and REST information obtained as described above to the browser in a manner similar to that described above except that the browser type is not provided to the browser as part of the Flashvars and as noted the utility application will have a different name and or location from that of the RIA.

The browser instantiates the utility application and provides or makes available the REST information in the same manner as was described above.

The utility application receives the address and any REST information from the browser that had been provided by the RIA via the referring page as described above. The utility application parses any REST information from the address and any REST information it receives and if REST information is not present the method continues at step .

If REST information is present the utility application sets up a communication channel with the RIA and provides the REST information via the communication channel and the method continues at step . In one embodiment to set up communications between two Flash applications one being at least a part of the utility application and the other being at least a part of the RIA the conventional Flash LocalConnection capability is Used described at the Web site of Macromedia.com including http www.macromedia.com support flash action scripts local connection objects local connection object05.html although other means of communications such as sockets and the like may be employed for other types of applications. The present invention may be used with RIAs and utility applications that are not Flash applications.

Steps may be performed by the RIA. At step if REST information was not received by the RIA from the utility application over the communication instantiated by the RIA in step as described above the method continues at step . If REST information was received by the RIA from the utility application over the communication instantiated by the RIA in step as described above the RIA obtains the current date and time for example from the system clock and compares the current date and time to the date and time if any most recently stored as part of step . In the case in which the RIA has provided the REST information to the utility application the difference will not exceed a threshold. If the difference does not exceed the threshold the RIA will not jump to another location or preload variables as a result of the REST information .

In another embodiment at step instead of obtaining the current date and time and comparing to the date and time retrieved in step the REST information received in step is compared with the REST information most recently provided in step . In this embodiment step may include storing the REST information provided. If the REST information from these two sources is similar or the same the method continues at step and otherwise the method continues at step . The two pieces of REST information will be the same or similar if the REST information received by the RIA is in response to the RIA loading or reloading the iframe and thus the RIA will take no action in response.

Referring now to on the same sheet as at any time a user may use the browser s forward or back buttons . If the utility referring page has been loaded or reloaded as described above The browser will retrieve the address of the utility referring page and REST information and the name of the iframe . The method will continues at step of . This time at step the difference between the date and time stored in a previous iteration of step and the date and time obtained in the most recent iteration of step will exceed the threshold. If the difference between the date and time stored and the current date and time exceeds a threshold the RIA jumps to location in the program corresponding to the REST information preloads variables corresponding to the REST information or both and the method continues at step . The RIA will operate from that location using those variables or both.

In the embodiment in which REST information is compared as described above when the RIA has advanced past the REST information to a point at which new REST information is available for example the RIA will jump or load variables in response to the rest information.

When RIA name supplier receives the signal from browser it supplies the name of the RIA to name REST type provider as described above.

When browser type obtainer receives the signal from browser browser type obtainer obtains the browser type from browser as described above and provides it to name REST type provider .

When RIA setup manager receives the signal from browser RIA setup manager arranges the setup of the RIA in the manner described above and sends the setup information to name REST type provider .

When REST info obtainer receives the signal from browser REST info obtainer obtains the address and REST information from browser as described above and sends the REST information to name REST type provider .

When name REST type provider receives the RIA name browser type address and REST information and RIA setup information from the different sources described above it sends the information as a bundle to browser in the manner described above.

When browser receives the RIA name browser type address and REST information and the RIA setup information from name REST type provider browser uses the RIA name and RIA setup information to identify the RIA and passes REST the information and browser type to instantiator receiver of the RIA .

When instantiator receiver receives the address and REST information and browser type from the browser it stores the browser type information in browser type storage and signals and provides any address and REST information to starting point identifier executor . When so signaled starting point identifier executor determines whether REST information is indeed present. If REST information has not been provided then starting point identifier executor begins executing RIA operation code at the default starting point for example the beginning. RIA operation code is a conventional rich internet application that executes using a browser such as an application that runs under a plugin to a browser such as the conventional Flash Player. If REST information has been provided starting point identifier executor identifies the corresponding location in the RIA code as described above it makes available the address and any REST information to RIA operation code and it begins execution of the RIA operation code at the location it identifies. The RIA may use the REST information to preload the value of variables used by the RIA.

At any time during the operation of RIA operation code the RIA code may identify a new title address and REST information or both to be displayed by the browser. When RIA code identifies a new title or new address and REST information it sends the new title information to title manager and sends the new address and REST information to REST info manager . In one embodiment the address is the same one received by RIA operation code as described above.

When title manager receives new title information it determines the browser type specified in browser type storage and sends the title information to either IE referring page title provider or non IE referring page title provider as described below. If title manager determines that the browser type in browser type storage indicates that the browser is Microsoft Internet Explorer then title manager sends the title information to IE referring page title provider however if the browser type in browser type storage indicates that the browser is not Microsoft Internet Explorer then title manager sends the title information to non IE referring page title provider .

When IE referring page title provider receives title information from title manager it sends the title information to IE browser title provider in the manner described above. In one embodiment IE browser title provider is part of the VBScript function on the referring page as described above and communication between IE referring page title provider and IE browser title provider is performed in the manner described above.

When IE browser title provider receives title information from IE referring page title provider it provides the title information to browser in the manner described above and browser displays the title information in the window title.

When non IE referring page title provider receives title information from title manager it sends the title information to non IE browser title provider in the manner described above. In one embodiment non IE browser title provider is part of the JavaScript function on the referring page as described above and communication between non IE referring page title provider and non IE browser title provider is performed in the manner described above.

When non IE browser title provider receives the title information from non IE referring page title provider it provides the title information to browser in the manner described above and browser displays the title information in the window title.

In a similar fashion when RIA operation code identifies new address and REST information it sends the new address and REST information to REST info manager .

When REST information manager receives new address and REST info from RIA operation code it determines the browser type in browser type storage and sends the address and REST information to either IE referring page REST information provider or non IE referring page REST information provider as described below. As noted above REST information manager may receive only the REST information from the RIA and the referring page REST information provider or will prepend the address to the REST information. If the browser type in browser type storage indicates that the browser is Microsoft Internet Explorer then REST information manager sends the REST information to IE referring page REST information provider otherwise REST information manager sends the REST information to non IE referring page REST information provider .

When IE referring page REST information provider receives the address and REST information from REST information manager it sends the REST information to IE browser REST information provider in the manner described above. In one embodiment IE browser REST information provider is part of the VBScript function on the referring page as described above and communication between IE referring page REST info provider and IE browser REST information provider is performed in the manner described above.

When IE browser REST information provider receives the address and REST information from IE referring page REST information provider it provides the address and REST information to browser in the manner described above and browser displays the address and REST information in the address box of the browser.

When non IE referring page REST info provider receives the address and REST information from REST information manager it sends the address and REST information to non IE browser REST information provider in the manner described above. In one embodiment non IE browser REST information provider is part of the JavaScript function on the referring page as described above and communication between non IE referring page REST information provider and non IE browser REST information provider is performed in the manner described above.

When non IE browser REST info provider receives the address and REST information from non IE referring page REST info provider it provides the address REST information to browser in the manner described above and browser displays the REST information in the address bar of the browser.

Starting point identifier executor continues executing RIA operation code which may update the title and or REST information on the browser any number of times as described above. In one embodiment when starting point identifier executor completes executing the RIA operation code it terminates operation in a conventional manner.

Referring now to in the embodiment in which the forward and back button may be used to operate the RIA when REST information manager receives new address and REST info from RIA operation code it additionally signals date time recorder and RIA communication manager and provides the REST information it receives to iframe URL manager . When it receives the REST information iframe URL manager directs the browser to run the utility referring page the iframe named as described above. Iframe URL manager is part of RIA which includes the RIA portion from FIG. as well as components as described herein. When signaled date time recorder retrieves the date and time from the system clock not shown of the operating system or elsewhere and internally stores the date and time it receives.

When signaled RIA communication manager arranges with communication intermediary a communication channel that will allow utility application to send to RIA REST information for Example using a Flash local connection as described herein.

When directed as described above browser signals utility application setup manager utility RIA name supplier and rest information obtainer of utility referring page . When so signaled REST information obtainer obtains the REST information from the browser in a similar manner described above with respect to REST information obtainer and provides the REST information to name REST provider . When so signaled utility application name supplier supplies the name of the utility application to utility RIA setup manager in a similar manner described above with respect to RIA name supplier . When it receives the name of the utility application utility application setup manager incorporates it into the utility application setup information that is similar to the RIA setup information as described above to produce the utility application setup information as described above and provides such setup information to name REST provider .

When name REST provider receives the REST information and RIA setup information it provides it to browser in a similar manner as described above with respect to name REST type provider . In response browser signals address REST information receiver of utility application and provides or makes available to address REST information receiver the address of the utility referring page and any REST information it received.

When so signaled address REST information receiver provides the address and any REST information it receives to REST information identifier which identifies if any REST information has been received as described above. If so it provides the REST information to utility application communication manager which arranges communications with and provides the REST information to RIA communication manager . In one embodiment utility application communication manager and RIA communication manager communicate via a communication intermediary such as the operating system or the Flash player plug in to commercially available browsers the Flash player being commercially available from Macromedia Inc. of San Francisco Calif. or both. Communication intermediary provides the communications from utility application communication manager to RIA communication manager as described herein.

When it receives the REST information RIA communication manager provides it to REST information receiver . When it receives the REST information REST information receiver signals compare manager .

When signaled in one embodiment compare manager retrieves from the system clock not shown or elsewhere the current date and time. Additionally compare manager retrieves from date time recorder the last recorded date and time. Compare manager subtracts the last recorded date and time from the current date and time and compares the result to a threshold. The threshold is selected to be slightly higher than the estimated amount of time it takes between recording the time by date time recorder and retrieving the time by compare manager when both are performed in response to one new REST information being available. A threshold of approximately 0.5 seconds may be used in one embodiment though other thresholds may be used in other embodiments. If compare manager retrieves the current date and time after the user has used the forward or back buttons the threshold should ordinarily be exceeded.

If compare manager determines that the difference does not exceed the threshold it will not take any further action that would cause the RIA operation code to operate differently in response to the REST information received for example by jumping to a different location that would cause the screen to be displayed differently or variables to be loaded each in response to the REST information received by REST receiver . If the difference does exceed the threshold compare manager signals REST receiver .

In another embodiment compare manager does not operate as described above. Instead when REST information receiver receives the REST information REST information receiver signals compare manager with the REST information it receives.

When signaled compare manager retrieves from iframe URL manager the REST information that iframe URL manager most recently provided and iframe URL manager provides the REST information it most recently received as described above. If the REST information retrieved from iframe URL manager is the same or similar as the REST information received from received from REST information receiver compare manager will not take any further action that would cause the RIA operation code to operate differently in response to the REST information received for example by jumping to a different location that would cause the screen to be displayed differently or variables to be loaded each in response to the REST information received by REST receiver . If the REST information received from each of the two sources is different or significantly different compare manager signals REST receiver .

When signaled REST receiver provides the REST information to starting point identifier executor . When it receives the REST information starting point identifier executor identifies the location in the RIA operation code corresponding to the REST information and causes the RIA operation code to begin operating at that location if different from the current location from which the RIA is operating. Starting point identifier executor then provides or makes available to the RIA operation code any variables corresponding to the REST information it receives. The RIA will then operate from that point using any such variables.

Although the iframe is described herein as being loaded after the browser is provided the state information in one embodiment the browser is provided the state information after the iframe is loaded. In such embodiment the steps of and or B may be inserted between steps and for example and step follows steps and and REST information manager signals date time recorder and RIA communication manager and provides the REST information it receives to iframe URL manager before providing the address and REST information it receives to either referring page REST information provider or as opposed to the opposite order.

Any of the REST information provided by itself as described herein may be provided with the address in other embodiments of the present invention.

