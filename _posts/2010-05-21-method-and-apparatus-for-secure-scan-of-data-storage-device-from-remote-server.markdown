---

title: Method and apparatus for secure scan of data storage device from remote server
abstract: A method and device for providing a secure scan of a data storage device from a remote server are disclosed. In some embodiments, a computing device may include an in-band processor configured to execute an operating system and at least one host driver, communication circuitry configured to communicate with a remote server, and an out-of-band (OOB) processor capable of communicating with the remote server using the communication circuitry irrespective of the state of the operating system. The OOB processor may be configured to receive a block read request from the remote server, instruct the at least one host driver to send a storage command to a data storage device, receive data retrieved from the data storage device and authentication metadata generated by the data storage device, and transmit the data and the authentication metadata to the remote server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856534&OS=08856534&RS=08856534
owner: Intel Corporation
number: 08856534
owner_city: Santa Clara
owner_country: US
publication_date: 20100521
---
The data residing on data storage devices such as hard disk drives and solid state drives by way of example is subject to corruption and attack by malicious software malware . Anti virus and manageability software packages have been developed by independent software vendors ISVs to scan data storage devices to detect corrupted data or malware and or to provide back up copies of data. Some storage security and manageability ISVs implement services such as anti virus scans removal of malware system repair and system reimaging for example over the Internet. These Internet based services still typically rely on local software agents running on the local computing device.

These software solutions however are themselves subject to attack by rootkits spyware and other types of malware that operate on the premise of hiding themselves from detection. For instance malware that has disguised itself in the storage stack as a filter driver may be able to provide non authentic data to the anti virus or manageability software when a scan of the data storage device is requested thereby hiding the actual corrupted data from the software . In other words the data that is scanned by the anti virus or manageability software may not be the data that actually resides on the data storage device. Furthermore once a rootkit is able to hide itself on the platform e.g. in the master boot record the rootkit can then observe all user activity capture user data perform circumvention of user actions and other malicious activities. An increasing number of incidents of rootkits spyware and other malware have been discovered hiding themselves from users and executing in the background of computing systems collecting sensitive information and slowing down the systems considerably.

While the concepts of the present disclosure are susceptible to various modifications and alternative forms specific exemplary embodiments thereof have been shown by way of example in the drawings and will herein be described in detail. It should be understood however that there is no intent to limit the concepts of the present disclosure to the particular forms disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims.

In the following description numerous specific details such as logic implementations opcodes means to specify operands resource partitioning sharing duplication implementations types and interrelationships of system components and logic partitioning integration choices may be set forth in order to provide a more thorough understanding of the present disclosure. It will be appreciated however by one skilled in the art that embodiments of the disclosure may be practiced without such specific details. In other instances control structures gate level circuits and full software instruction sequences may have not been shown in detail in order not to obscure the disclosure. Those of ordinary skill in the art with the included descriptions will be able to implement appropriate functionality without undue experimentation.

References in the specification to one embodiment an embodiment an illustrative embodiment etcetera indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the art to effect such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Some embodiments of the disclosure may be implemented in hardware firmware software or any combination thereof. Embodiments of the disclosure implemented in a computing device may include one or more bus based interconnects between components and or one or more point to point interconnects between components. Embodiments of the invention may also be implemented as instructions stored one or more tangible machine readable media which may be read and executed by one or more processors. A tangible machine readable medium may include any tangible mechanism for storing or transmitting information in a form readable by a machine e.g. a computing device . For example a tangible machine readable medium may include read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices and other tangible media.

The present disclosure generally relates to methods and apparatus that provide a secure scan of a data storage device from a remote server. These methods and apparatus ensure that the scanned data is actually retrieved from the data storage device and not falsely provided by some piece of malware e.g. a rootkit hiding on the computing device . According to the present disclosure an out of band OOB agent is used to implement a block read write interface between the remote server and the data storage device. The OOB agent in conjunction with a host driver of the computing system retrieves data from the data storage device in a trusted fashion and provides this data to the remote server. As the OOB agent is tamper resistant the remote server may be assured that the data is not being forged by some piece of malware. In some embodiments the OOB agent may also retrieve authentication metadata generated by an encryption engine of the data storage device. This authentication metadata may be used by either the OOB agent or the remote server to verify that the data was actually retrieved from the data storage device. Initially various hardware components of a system are described below with reference to . Next one embodiment of possible software firmware environments of the system and an associated method for providing the secure scan are described below with reference to . Finally another embodiment of possible software firmware environments of the system and an associated method for providing the secure scan are described below with reference to .

Referring now to the illustrative system configured to provide a secure scan of a data storage device from a remote server includes a computing device the remote server and a network that communicatively couples the computing device to the remote server . Although only one computing device one remote server and one network are illustratively shown in the system may include any number of computing devices remote servers and networks of similar or dissimilar architecture. For instance the computing device may communicate over one or more networks with multiple remote servers and each remote server may communicate over one or more networks with multiple computing devices .

The computing device may be embodied as any type of electronic device capable of performing the functions described herein. By way of example the computing device may be embodied as a personal computer a workstation a laptop computer a handheld computer a mobile internet device a cellular phone a personal data assistant a telephony device a network appliance a virtualization device a storage controller or other computer based device. In the illustrative embodiment shown in the computing device includes an in band processor a chipset a system memory communication circuitry one or more input output devices and a data storage device . In some embodiments several of the foregoing components may be incorporated on a motherboard of the computing device while other components may be communicatively coupled to the motherboard via for example a peripheral port. Furthermore it should be appreciated that the computing device may include other components sub components and devices commonly found in a computer and or computing device which are not illustrated in for clarity of the description.

The in band processor of the computing device may be any type of processor capable of executing software firmware such as a microprocessor digital signal processor microcontroller or the like. The in band processor is illustratively embodied as a single core processor having a processor core . However in other embodiments the in band processor may be embodied as a multi core processor having multiple processor cores . Additionally the computing device may include additional in band processors having one or more processor cores . The in band processor is generally responsible for executing a software stack which may include an operating system and various applications programs libraries and drivers resident on the computing device as shown in and described below .

The chipset of the computing device may include a memory controller hub MCH or northbridge an input output controller hub ICH or southbridge and a firmware device. The firmware device of the chipset may be embodied as a memory device for storing Basic Input Output System BIOS data and or instructions and or other information e.g. a BIOS driver used during booting of the computing device . In other embodiments chipsets having other configurations may be used. For example in some embodiments the chipset may be embodied as a platform controller hub PCH . In such embodiments the memory controller hub MCH may be incorporated in or otherwise associated with the in band processor and the in band processor may communicate directly with the system memory as shown by the hashed line in . In any of these configurations the chipset also includes an out of band OOB processor which will be described in more detail below.

The in band processor is communicatively coupled to the chipset via a number of signal paths. These signal paths and other signal paths illustrated in may be embodied as any type of signal paths capable of facilitating communication between the components of the computing device . For example the signal paths may be embodied as any number of wires cables light guides printed circuit board traces via bus intervening devices and or the like.

The system memory of the computing device is also communicatively coupled to the chipset via a number of signal paths. The system memory may be embodied as one or more memory devices or data storage locations including for example dynamic random access memory devices DRAM synchronous dynamic random access memory devices SDRAM double data rate synchronous dynamic random access memory device DDR SDRAM flash memory devices and or other volatile memory devices. Additionally although only a single system memory device is illustrated in in other embodiments the computing device may include additional system memory devices. The operating system applications programs libraries and drivers that make up the software stack executed by the in band processor may reside in system memory during execution. Furthermore software and data stored in system memory may be swapped between system memory and the data storage device as part of memory management operations.

The communication circuitry of the computing device may be embodied as any number of devices and circuitry for enabling communications between the computing device and the remote server over the network . The network may be embodied as any type of wired and or wireless network such as a local area network a wide area network a publicly available global network e.g. the Internet or any combination thereof. Furthermore the network may include any number of additional devices to facilitate communication between the computing device and the remote server such as routers switches intervening computers and or the like. The communication circuitry may include one or more wired and or wireless network interfaces to facilitate communications over the wired and or wireless portions of the network . Communication circuitry is also communicatively coupled to the chipset via a number of signal paths allowing both the in band processor and the OOB processor to independently access the network .

The input output device s of computing device may include any number of peripheral or interface devices. By way of illustrative example the input output device s may include a display a mouse a keyboard and or one or more external speakers of the computing device . The particular devices included in the input output device s may depend upon for example the intended use of the computing device . The input output device s are communicatively coupled to the chipset via a number of signal paths allowing the chipset and or in band processor to receive inputs from and send outputs to the input output device s in some embodiments.

The computing device also includes a data storage device DSD which may be illustratively embodied as any type of device configured for the short term or long term storage of data such as for example memory devices and circuits memory cards hard disk drives solid state drives or other data storage devices. In some embodiments the DSD may include non volatile memory capable of retaining stored data even when the DSD is not powered. Additionally although only a single DSD is illustrated in in other embodiments the computing device may include additional data storage devices. The DSD is also communicatively coupled the chipset via a number of signal paths. In some embodiments the DSD may be coupled to the chipset via a high speed serial link such as a Peripheral Component Interconnect Express PCIe interface or a Serial AT Attachment SATA interface. It will be appreciated that other types of interfaces between the DSD and the chipset e.g. parallel signal paths are contemplated. In the illustrative embodiment of the DSD includes encryption circuitry providing the DSD with a hardware based encryption engine as shown in . As further described below the encryption circuitry and encryption engine implemented therewith allows the DSD to locally generate authentication metadata for data retrieved from the DSD .

The chipset includes an out of band OOB processor which is distinct from and generally operates independently of the in band processor . The OOB processor may be embodied as any type of processor capable of executing software firmware such as a microprocessor digital signal processor microcontroller or the like including one or more processors having one or more processor cores not shown . Although the OOB processor is illustrated in as being integrated into the chipset in other embodiments the OOB processor may be embodied as one or more separate integrated circuits disposed on an expansion board that is communicatively coupled to the chipset via a number of signal paths. In some embodiments the OOB processor may be independently communicatively coupled to various components of the computing device e.g. the system memory and the communication circuitry via a number of signal paths. Alternatively or additionally the OOB processor may include built in components with similar functionality such as a dedicated memory and or dedicated communication circuitry not shown .

The OOB processor is configured for managing particular functions of the computing device irrespective of the operational state of the in band processor or of the operating system of the computing device . To facilitate such independent operation the OOB processor may be provided with an independent connection to the power circuitry not shown of the computing device allowing the OOB processor to retain power even when other components of the computing device are powered down or turned off. Furthermore the OOB processor may be provided with one or more independent network interfaces via communication circuitry which is also provided with an independent connection to the power circuitry not shown allowing out of band communications over the network . In other words the OOB processor is able to communicate directly with devices on the network e.g. remote server outside of the operating system executing on in band processor . In fact this communication may take place without a user s knowledge. The OOB processor is also capable of causing the computing device to return to a full power operational state including booting the operating system . In summary the OOB processor may operate intelligently based on incoming requests commands and communicate across the network whether the in band processor is turned off running on standby being initialized or in regular operation and whether the operating system is booting running crashed or otherwise.

In some illustrative embodiments the OOB processor may be implemented using Intel Active Management Technology Intel AMT using a portion of Intel AMT or using an Intel Management Engine Intel ME all available from Intel Corporation of Santa Clara Calif. and or within chipsets sold by Intel Corporation. Intel AMT embedded platform technology enables out of band access to hardware and software information stored in non volatile memory on each endpoint device eliminating the need for a functioning operating system and many of the software agents found in other management tools.

The remote server may be embodied as any type of computing device separate from the computing device . By way of example the remote server may be embodied as a personal computer a workstation a laptop computer a handheld computer a mobile internet device a cellular phone a personal data assistant a telephony device a network appliance a virtualization device a storage controller or other computer based devices configured to communicate with the computing device over the network . In the illustrative embodiment shown in the remote server includes a processor a chipset a system memory communication circuitry and one or more mass storage devices which may each be similar in configuration and operation to the in band processor the chipset the system memory the communication circuitry and the data storage device respectively of computing device . It is contemplated that the remote server may have other configurations and or include other components not shown in e.g. one or more input output devices .

Referring now to one illustrative embodiment of the software firmware environments running on the computing device and the remote server of the system is shown as a simplified block diagram. The software stack of the computing device includes an operating system OS an advanced host controller interface AHCI driver and a file system and other filter drivers each of which may be executed by the in band processor and or stored in the system memory or on the DSD . The OS resides in the userspace Ring and hosts the higher level applications with which a user of the computing device typically interacts. The OS calls on the file system and filter drivers including the AHCI driver which reside in the kernel Ring to access the hardware components of the computing device e.g. DSD . It will be appreciated that any of these software modules including the OS and or drivers may also be implemented partially or fully in firmware or hardware in some embodiments.

The AHCI driver is shown separately from the file system and other filter drivers in as the AHCI driver is configured to interact with an interface module of the DSD to perform various read write operations. Specifically the AHCI driver includes a library of storage commands that may be sent by the AHCI driver to the DSD interface module . These storage commands in library are requests and or instructions to the DSD to perform some action s . For instance where the DSD is a NAND flash memory device connected via a PCIe interface the AHCI driver may contain a NAND command library of storage commands that cause the DSD to perform various read write operations. As another example where the DSD is a solid state drive connected via a SATA interface the AHCI driver may contain an ATA command library of storage commands that cause the DSD to perform various read write operations. Thus when the AHCI driver is requested e.g. by the OS to retrieve the data at a certain logical block address LBA in the DSD the AHCI driver selects the appropriate storage command from the library and sends this storage command to the DSD . Although the illustrative embodiment shown in uses the AHCI driver to implement an interface to the DSD interface module it is contemplated that any host driver s of the computing device having access to the DSD i.e. having the appropriate storage command library may be used additionally or alternatively to the AHCI driver . In some embodiments an Intel Rapid Storage Technology Intel RST driver available from Intel Corporation of Santa Clara Calif. may be used for example.

The computing device of also includes several firmware modules such as the DSD interface module which may be executed on the DSD and the OOB agent which may be executed on the OOB processor . Although shown as residing in the DSD firmware and the chipset firmware respectively it will be appreciated that the DSD interface module and the OOB agent may each additionally or alternatively be embodied as one or more hardware and or software modules. The DSD interface module is generally configured to receive storage commands from the AHCI driver or other host driver as described above and to control the DSD to perform various actions e.g. read write operations .

The DSD interface module includes a hardware based encryption engine which may include firmware or software that is executed by the encryption circuitry of the DSD . In some embodiments the DSD interface module may be configured to employ the encryption engine to generate authentication metadata for data retrieved from the DSD in response to a particular storage command from the AHCI driver or a particular class or category of storage commands . In other embodiments the encryption engine may generate authentication metadata for data retrieved from the DSD in response to any storage command received by the DSD interface module . By way of illustrative example the encryption engine may be embodied in firmware which conforms to the Opal Security Subsystem Class standard promulgated by the Trusted Computing Group .

The authentication metadata generated by the encryption engine of the DSD may take any form that may be used to verify the authenticity of the associated data. In some embodiments the encryption engine may generate a message authentication code MAC to be included in the authentication metadata by applying a keyed hash function that uses a shared secret key to the data retrieved from the DSD . Any other component device or user also possessing the shared secret key may then reapply the keyed hash function to the data and compare the output to the MAC included in the authentication metadata. Additionally or alternatively the encryption engine may generate a counter value such as a time stamp or other token indicating the time that the data was retrieved from the DSD to be included in the authentication metadata. Any other component device or user may then compare the time the data was expected to be retrieved from the DSD to protect against replay attacks involving stale data . In other embodiments the encryption engine may generate a digital signature to be included in the authentication metadata by applying a signing algorithm that uses a private key to the data retrieved from the DSD . Any other component device or user possessing the public key corresponding to the private key may then apply a signature verifying algorithm using the authentication metadata. In still other embodiments the encryption engine may employ any number of cryptographic hash functions to generate authentication metadata.

The OOB agent which provides the remote server with access to the DSD via a host driver is illustrated as a firmware module that is executed on the OOB processor in the embodiment of though the OOB agent may be embodied in hardware firmware software or any combination thereof in other embodiments . The OOB agent is generally always available to the remote server and tamper resistant to malware due to the properties of the OOB processor described above. The OOB agent includes a remote block read write module an OOB communication module and in some embodiments a verification module . The OOB communication module allows the OOB agent to control various portions of the communication circuitry of the computing device to send and receive various network messages to and from the remote server over the network . The remote block read write module provides an interface for the remote server to request the data at a particular LBA on the DSD . When a request to read data from the DSD is received via the OOB communication module the remote block read write module forwards the request to the AHCI driver executing on the in band processor . This message between the remote block read write module and the AHCI driver may be sent using a Host Embedded Controller Interface HECI or any other memory channel shared between the OOB agent and the OS . The AHCI driver may also include an application programming interface API configured to receive such messages from the OOB agent and instruct the AHCI to select and send the appropriate storage command from the library . The verification module included in some embodiments of the OOB agent will be described in more detail below.

The software stack of the remote server includes an OS not shown one or more ISV applications a remote block read write driver and a file system and other filter drivers each of which may be executed by the processor and or stored in the system memory or on the mass storage device . As illustrated in the remote server also includes one or more disk images of the DSD stored on the mass storage device . Similar to the computing device the OS of the remote server which resides in the userspace hosts higher level applications such as the ISV application s for example. The one or more ISV applications may be embodied as storage security and or manageability applications that require secure scans of the DSD . The one or more ISV applications via the OS may call on the file system and filter drivers which reside in the kernel to access the hardware components of the remote server e.g. mass storage device . For instance the ISV application s may access the disk image s stored on the mass storage device via the file system and other filter drivers . It will be appreciated that any of these software modules including the OS the ISV application s and or the drivers may also be implemented partially or fully in firmware or hardware in some embodiments.

The remote block read write driver allows the remote server to remotely mount the DSD of the computing device . In other words the remote block read write driver in conjunction with the OOB agent executing on the computing device allows the remote server to map and subsequently access the DSD as if it were a local memory device of the remote server . Once the DSD is mounted by the remote server the remote block read write driver may send a request to read the data at a particular LBA on the DSD to the OOB agent which is then forwarded to the AHCI driver as described above . Once the requested data has been returned the OOB agent may transmit this data along with any associated authentication metadata using the OOB communication module to the remote block read write driver of the remote server . The remote block read write driver may then provide the requested data to the ISV application s or store this data as a portion of a disk image .

The remote block read write driver also includes a verification module for verifying the authenticity of data retrieved from the DSD using the associated authentication metadata. As described above where the authentication metadata includes a MAC the verification module may reapply the hash function to the data assuming the verification module possesses the shared secret key used by the encryption engine and compare the output to the MAC included in the authentication metadata. Additionally or alternatively the verification module may compare a counter value in the authentication metadata to the time the data was expected to be retrieved from the DSD to protect against replay attacks. Where the authentication metadata includes a digital signature the verification module may apply a signature verifying algorithm using the authentication metadata assuming the verification module possesses a public key corresponding to the private key used by the encryption engine . The verification module which may be included in the OOB agent in some embodiments may operate in substantially the same manner to verify the authenticity of data retrieved from the DSD prior to transmitting the data to the remote server . In embodiments using the verification module the verification module may be omitted from the remote block read write driver and the OOB agent may forgo transmitting the authentication metadata to the remote server as the authenticity of the data has already been verified .

Several of the features of the OOB agent running on the OOB processor and of the encryption engine running on the DSD allow the system to provide a secure scan of the DSD of the computing device from the remote server . To do so as illustrated in the computing device may be configured to perform the method for providing a secure scan over the network . In general the method involves the retrieval of authentication metadata from the DSD that may be used by the OOB agent or the remote block read write driver of the remote server to verify the authenticity of data retrieved from the DSD . The method may be executed by for example the OOB processor the in band processor and the hardware of the DSD in conjunction with other components of the computing device which may interact with other components of the system . The method may allow a secure scan of the DSD from the remote server for any purpose including but not limited to anti virus scans removal of malware system repair system reimaging and secure file folder access.

The method begins with block in which the OOB agent establishes a remote mount of the DSD by the remote server . The remote mount of the DSD may be initiated by either the computing device or the remote server . One process for remotely mounting a data storage device using a remote server which may be employed in block of the method is disclosed in currently pending U.S. patent application Ser. No. 12 475 216 filed May 29 2009 and assigned to the assignee of the present application. As described therein the remote block read write driver may request and the OOB agent may transmit the master boot record MBR one or more boot sectors and or one or more master file tables MFTs of the DSD . This data which may be stored as part of disk image s on the mass storage device may allow the remote block read write driver to map the DSD . Whenever data from the DSD is requested by one or more ISV applications the remote block read write driver may then determine the LBA to request from OOB agent using the MBR the boot sector s and or the MFT s of the DSD .

In block of the method the OOB agent receives a block read request from the remote block read write driver over the network . The OOB agent receives this request using the OOB communication module . It should be appreciated that the OOB agent due to the persistent power and the out of band communication channel maintained by the OOB processor and the communication circuitry is available to receive a such a request from the remote server even when the in band processor of the computing device is not executing the OS or is in a reduced power state or turned off. While the illustrative embodiment describes direct communications between the remote server and the OOB processor via the communication circuitry it is also contemplated that the remote server may communicate with the OOB processor via one or more host based channels e.g. also involving the in band processor and OS .

In block the OOB agent will forward the received block read request using the remote block read write module to the appropriate host driver executing on the in band processor of the computing device . When the in band processor is executing the OS i.e. the OS is already booted the OOB agent may forward the block read request to the AHCI driver as described above. When the in band processor is in a reduced power state or turned off or the OS has not yet been booted however the remote block read write module may instead direct the block read request to a BIOS driver of the computing device the computing device may be powered on by the OOB processor if necessary to give access to the BIOS driver . In such an embodiment the OOB agent may provide the remote server with access to the DSD irrespective of the state of the OS of the computing device .

In block the AHCI driver or other host driver sends an authentication storage command to the DSD interface module . When it receives the forwarded block read request from the OOB agent the AHCI driver selects the appropriate IOTCL message from the library . In the illustrative embodiment of whenever the AHCI driver receives a read request via the OOB API it selects and sends a storage command that will result in the DSD generating authentication metadata as well as retrieving the requested data. Thus all requests originating from the remote block read write driver will result in authentication metadata which may be used to verify the authenticity of the data retrieved from the DSD .

In block the DSD interface module retrieves the requested data from the DSD and generates authentication metadata using the encryption engine in response to receiving the authentication storage command from the AHCI . The authentication metadata may include any of the types described above such as a MAC a counter value a digital signature a cryptographic hash value and or the like. In block the DSD interface module returns the data retrieved from the DSD and the authentication metadata generated by the DSD to the AHCI . In block the AHCI forwards the data and the authentication metadata to the remote block read write module of the OOB agent .

In embodiments employing the verification module the method proceeds to optional block in which the OOB agent verifies the data retrieved from the DSD using the authentication metadata generated by the DSD . This verification of the authenticity of the data retrieved from the DSD may be performed using any of the methods described above. After optional block or after block in embodiments lacking the verification module the method proceeds to block in which the OOB agent transmits the data and the authentication metadata to the remote block read write driver over the network using the OOB communication module .

In block the remote block read write driver may employ verification module to verify the data using the authentication metadata though block may be skipped in embodiments using optional block . This verification of the authenticity of the data retrieved from the DSD may be performed using any of the methods described above. Once the data has been verified the remote block read write driver may provide the requested data to the ISV application s and or store this data as a portion of a disk image . The method may return to block when the remote block read write driver transmits another block read request over the network to the OOB agent the block need not be repeated during each cycle .

Referring now to another illustrative embodiment of the software firmware environments running on the computing device and the remote server of the system is shown as a simplified block diagram. The embodiment of includes many similar components and modules to which are labeled using like reference numerals. Except as explained below the operation of these components and modules may be substantially similar to that described above with reference to . For instance the operation of the DSD interface module the OOB agent and the software stack of the remote server including the OS the one or more ISV applications the remote block read write driver and the file system and other filter drivers is substantially similar except that these modules do not include the encryption engine the verification module or the verification module . In this illustrative embodiment the authenticity of the data retrieved from the DSD may be ensured without the need for authentication metadata.

As shown in the software stack of the computing device includes an OS an AHCI driver and a file system and other filter drivers each of which may be executed by the in band processor and or stored in the system memory or on the DSD . In addition the software stack also includes a secure container executing on the in band processor . The secure container may be embodied as a secure memory and or execution space that is maintained separately from the OS and associated drivers and is not directly accessible to these software modules thereby maintaining the security of the secure container . In the illustrative embodiment of a host driver executing in the secure container rather than the AHCI driver is directly responsible for accessing the DSD . The OS still accesses the DSD indirectly through the AHCI driver but the AHCI driver relies on one or more firmware hooks in the chipset firmware to pass requests to the driver executing in the secure container .

The driver executing in the secure container includes a storage command library and an OOB API similar to those of the AHCI driver in the illustrative embodiment of . In this embodiment the OOB agent provides the remote server with access to the DSD via the host driver executing in the secure container . The remote block read write module and the OOB communication module function substantially as described above except that the remote block read write module forwards a block read request to the OOB API of the driver executing in the secure container rather than the AHCI . The OOB API is configured to receive messages from the OOB agent and instruct the driver to select and send the appropriate storage command from the library . The data retrieved from the DSD is then returned to the driver and forwarded directly to the OOB agent . As the OS and associated drivers may be avoided during this data transfer this security concern is eliminated and authentication metadata need not be generated by the DSD .

Several of the features of the secure container running on the in band processor and the OOB agent running on the OOB processor allow the system to provide a secure scan of the computing device from the remote server . To do so as illustrated in the computing device may be configured to perform the method for providing a secure scan over the network . In general the method involves the OOB agent interacting with a host driver executing in the secure container to ensure the authenticity of data retrieved from the DSD . The method may be executed by for example the OOB processor the in band processor and the hardware of the DSD in conjunction with other components of the computing device which may interact with other components of the system . The method may also allow a secure scan of the DSD from the remote server for any purpose including but not limited to anti virus scans removal of malware system repair system reimaging and secure file folder access.

The method begins with block in which the OOB agent establishes a remote mount of the DSD by the remote server . In block the OOB agent receives a block read request from the remote block read write driver over the network . Establishing the remote mount of the DSD and receiving the block read request may be performed substantially as described above with reference to blocks and of .

In block the OOB agent will forward the received block read request using the remote block read write module to the host driver executing in the secure container on the in band processor of the computing device . In block the driver executing in the secure container sends a storage command to the DSD interface module . When it receives the forwarded block read request from the OOB agent the driver executing in the secure container selects an appropriate IOTCL message from the library .

In block the DSD interface module retrieves the requested data from the DSD in response to receiving the storage command from the driver executing in the secure container . In block the DSD interface module returns the data retrieved from the DSD to the driver. In block the driver executing in the secure container forwards the data and the authentication metadata to the remote block read write module of the OOB agent . The method concludes with block in which the OOB agent transmits the data to the remote block read write driver over the network using the OOB communication module . The method may return to block when the remote block read write driver transmits another block read request over the network to the OOB agent the block need not be repeated during each cycle .

While the disclosure has been illustrated and described in detail in the drawings and foregoing description such an illustration and description is to be considered as exemplary and not restrictive in character it being understood that only illustrative embodiments have been shown and described and that all changes and modifications that come within the spirit of the disclosure and the appended claims are desired to be protected.

