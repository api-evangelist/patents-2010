---

title: Method for accessing files of a file system according to metadata and device implementing the method
abstract: The invention relates to the field of accessing data stored in a file system and more particularly, to the optimization of accessing data of a file system. To this effect, the invention proposes a method of accessing files of a data file system according metadata related to the files, and a device for implementing the method.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09104680&OS=09104680&RS=09104680
owner: Thomson Licensing
number: 09104680
owner_city: Boulogne, Billancourt
owner_country: FR
publication_date: 20100623
---
This application claims the benefit under 35 U.S.C. 365 of International Application PCT EP2010 058871 filed Jun. 23 2010 which was published in accordance with PCT Article 21 2 on Jan. 6 2011 in English and which claims the benefit of European patent application No. 09447028.3 filed Jul. 1 2009.

The invention relates to the field of accessing data stored in a file system and more particularly to the optimization accessing of data in a file system.

According to prior art data files comprise audio video audio and video still images text interactive programs etc. These data files are stored in hierarchically organized data file systems organizing the data files in directories and subdirectories. In large data file systems comprising thousands of files a huge number of files exist containing a vast amount of data and a large data file system quickly becomes difficult to manage. A way of managing the huge amount of files and data in large data file systems is by means of metadata. Metadata is data about data. Examples of metadata are file name file type file length creation date but also author keywords in a text document album name of an image etc. Metadata thus gives information on one or more file s stored in the data file system. In such metadata can help user s or application s to find their way in a data file system and to access it. When metadata is used for accessing files of a data file system metadata is extracted and index data is created that relates extracted metadata to files of the data file system. This index data is then stored for later use. The index data allows fast lookup of files based on metadata. The process of creation of index data is also called indexing of a data file system. Indexing thus is the process of scanning a data file system in order to extract metadata and the relation of the metadata with the files of the data file system and to store the metadata and the relation of the metadata to the files of the data file system for use by a user and or application. From a large data file system important amounts of metadata and file relational data are extracted. Extracting metadata and creation of index data is not sufficient for easing the management of a large data file system. Current tendency to interconnect devices with each a separate data file system in a network adds to the complexity of the management of the files stored on these devices. Shared network storage devices then offer the advantage of allowing centralized storage of content shared between devices connected into a network for example organized in a LAN Local Area Network .

According to prior art devices of such a network each have their own indexing system. This implicates that each client does its own data file system scanning and its own metadata and index storing. Then index data and metadata can not be shared among clients of such a network. This is a waste of resources in terms of storage and processing needs.

According to prior art the creation of user and or application defined metadata is limited to metadata proposed by applications managing the metadata thereby limiting the power of the management of the data file system for users and or applications.

According to prior art metadata is accessed via a dedicated API Application Programming Interface thereby restricting access to metadata and thus the access to files of the data file system according to metadata to applications implementing the dedicated API.

According to prior art there is no way to organize the layout of a data file system according to related metadata.

Thus the prior art does not allow an optimized access to files of a file system according to metadata.

More precisely the invention allows optimized access to files in a file system according to metadata through a so called MVFS Metadata View File System that allows accessing files of a file system according to metadata related to these files.

In order to optimize the access to files in a file system hereafter referred to as data file system the invention internally stores index data and metadata for private access by the MVFS in a database and presents the internally stored metadata publicly to users and or applications as a metadata file system hereafter referred to as metadata file system . To help users and or applications to browse their way through huge amounts of metadata the structure of the metadata file system reflects the structure of the file system to which it relates. In addition the metadata file system and the metadata itself can be accessed by users and or applications using normal file system access methods. In order to further optimize the access to files in a data file system users and or applications can organize the data in the data file system by specific metadata via so called views. An example of a view is a view based on metadata attribute type of file and further refined on metadata attribute value type of file music file . The example view thus allows a user or an application to list all music files in the data file system. In order to save storage space and also for reasons of coherence a view does not directly contain the files that correspond to the view but the view merely comprises pointers to these files. These pointers can be implemented with symbolic links. Using pointers to files no file copy is needed and in addition a same file can be pointed to by multiple views without file duplication. The contents of a view that is the list of pointers to files of the data file system can be specified in a view configuration by a user and or application according to metadata selection criteria. As is the case for metadata which is presented to users and or applications as being part of the metadata file system views and view configurations are presented to users and or applications in a view file system hereafter also referred to as view file system thereby giving users and or applications access to the views and view configurations through normal file system access methods. As for the metadata view configurations are stored internally in a database by the MVFS for private use and for each internally stored view configuration a public version exists that can be modified by users and or applications.

In order to optimize access to files of a file system according to metadata the invention proposes a method of accessing files of a data file system according metadata related to the files the method being implemented by a file management device the method being characterized in that the metadata is represented to at least one client device as being stored in a metadata file system where the metadata file system is organized according to a structure of the data file system 

at least one first file in the data file system being represented as at least one first directory in the metadata file system and

at least one metadata attribute related to the at least one first file in the data file system being represented as at least one second file in the metadata file system and

at least one value of the at least one metadata attribute being represented as being stored in the at least one second file and

a view file system organizing files of the data file system according to metadata related to the files in at least one second directory which directory comprises as content at least one pointer to at least one of the first file in the data file system the content being determined according to at least one metadata selection criterion 

the method further comprising a step of accessing the files of the data file system using the metadata and the view file system the metadata file system and the view file system as well as the metadata being accessed with access methods used for accessing the data file system and the data file system the metadata file system and the view file system being mounted on a same root file system level.

According to a variant of the method of accessing files of a data file system according metadata related to these files the metadata file system and the view file system are accessible to the at least one client device using a same set of file system access methods as those needed to access the data file system.

According to a variant of the method of accessing files of a data file system according metadata related to these files the at least one metadata selection criterion is comprised in at least one configuration file that is accessible to the at least one client device in the view file system in a subdirectory of which the name identifies the at least one metadata selection criterion.

According to a variant of the method of accessing files of a data file system according metadata related to these files the at least one configuration file comprises a metadata selection criterion that is represented by a metadata attribute and a metadata attribute value.

According to a variant of the method of accessing files of a data file system according metadata related to these files the at least one configuration file comprises a metadata sorting criterion that is represented by a metadata attribute.

The invention also proposes a device for accessing files of a data file system according to metadata related to the files the device being characterized in that it represents the metadata to at least one client device as being stored in a metadata file system where the metadata file system is organized according to a structure of the data file system the device comprising 

at least one first file in the data file system is represented as at least one first directory in the metadata file system and where

at least one metadata attribute related to the at least one first file in the data file system is represented as at least one second file in the metadata file system and where

at least one value of the at least one metadata attribute is represented as being stored in the at least one second file and

means for giving access to the files of the data file system via a view file system organizing files of the data file system according to metadata related to the files in at least one second directory which directory comprises as content at least one pointer to at least one of the first file in the data file system the content being determined according to at least one metadata selection criterion

the metadata file system and the view file system as well as the metadata being accessed with access methods used for accessing the data file system and the data file system the metadata file system and the view file system being mounted on a same root file system level.

According to a variant of the device for accessing files of a data file system according to metadata related to the files the device further comprises a database comprising data used by the means for giving access to the metadata and used by the means for giving access to the files of the view file system.

The devices as well as storage server are connected to the LAN via respectively bidirectional connections and . Storage server is connected to storage device via bidirectional connection . Storage device comprises data organized in a data file system and extracted metadata index data on metadata and . Bidirectional dotted arrows and indicate data and control flows respectively from device to extracted metadata index data on metadata and vice versa and from device to index data and vice versa.

Device and device each have their own extracted metadata and index data on storage space on storage device . Extraction of metadata and generation of index data is done by device over data and is stored in storage space . Extraction of metadata and generation of index data is done by device over data and is stored in storage space . None of the devices and share extracted metadata and index data which is particular inefficient in terms of storage space because a large part of information is duplicated which also reduces the storage space available for data . It is also particularly inefficient in terms of processing needs. This is because each device has to do its own extraction of metadata and generation of index data. Then when a change is made to the data this change is to be reflected in each metadata index data. This results in addition in synchronization problems of how a change can quickly be reflected in each metadata index data. In addition a single change creates several read write accesses to storage device to update each of the metadata index data. In addition the metadata index data not being shared between devices and each of the devices and can not benefit from an extraction of metadata and generation of index data being already done by one of the other devices or .

The above discussed prior art implementation is an example prior art implementation. Other prior art implementations are possible such as a single device integrated with a storage device on which a data file system and an index and metadata are stored.

The devices as well as gateway are connected to the LAN via respectively bidirectional connections and . Device is connected to storage device via bidirectional connection . Storage device comprises data and extracted metadata generated index data generated views indicated by MVFS data . Bidirectional dotted arrows and indicate data and control flows respectively from client device to extracted metadata index data generated views and vice versa and from client device to the same extracted metadata generated index data generated views and vice versa. Device is further connected to external network via bidirectional link which gives client devices and access to additional services and or storage provided by devices not shown connected to the external network .

The extraction of metadata the generation of index data from data presentation of metadata file system and view file system is done by file management device which has the advantage of being an always on device that can do the extraction of metadata and generation of index data at any time when its resources are available for example during nighttime when there is no or little activity of client devices and .

According to a variant embodiment of the invention the extraction of metadata and generation of index data is indifferently done by one of the devices or according to availability of resources of these devices. This variant embodiment has the advantage to distribute the resources necessary to extract metadata and to generate index data according to the availability of the resources of each device or and thus reduces the processing needs of each of these devices.

The client devices and share extracted metadata and generated index data which is particular efficient in terms of storage space no information is duplicated for each client device and thus more space is available on storage device for data when compared to prior art and which is also efficient in terms of processing needs when a change is made to data this change is to be reflected in only one metadata index data storage which avoids synchronization problems and which limits the number of read write accesses needed to update the metadata index data stored on storage device . In addition the metadata index data being shared between client devices and the client devices and can benefit of an extraction of metadata generation of index data being already done by the file management device or according to a variant embodiment of the invention by one of the client devices and .

According to a particular embodiment of the invention the client devices and are digital Set Top Box receivers for reception of digital television and radio programs.

According to a particular embodiment of the invention the client devices and are devices that render digital video and or audio content such as devices with MP3 audio player or H.264 video player capacity.

According to a particular embodiment of the invention the client devices and are wireless devices connected to file management device via a wireless connection.

Vertical bar represents the root of the data file system . The metadata file system is constructed by the MVFS from internally stored index data and metadata and is presented to users and or applications as a file system that is mounted on the root. The data file system can for example be stored on storage device of and is managed by device of .

Data file system is organized in a hierarchical manner with a directory a directly under the file system root and a subdirectory b of directory a and a file x.txt in the subdirectory b . File x.txt is further illustrated by and comprises textual content abcd .

The metadata file system has a directory meta directly under the file systems root . Directory meta has a subdirectory a and subdirectory a has a subdirectory b which in turn has a subdirectory x.txt .

Metadata file system is thus organized according to the structure of data file system whereby each file in data file system is represented by a directory in the metadata file system where the name of that directory identifies the file.

Directory a of the metadata file system corresponds to directory a of the data file system . Subdirectory b of the metadata file system corresponds to subdirectory b of data file system . Subdirectory x.txt of meta data file system corresponds to file x.txt of data file system .

In this metadata file system a metadata attribute related to a file in the data file system is represented as one or more files in directories of the metadata file system. For example file x.txt of the data file system has related metadata filetype which metadata is thus represented by file filetype in directory x.txt of the metadata file system . Thus a file in the metadata file system represents a metadata attribute.

In this metadata file system a metadata attribute value related to a file in the data file system is represented as a value in a metadata file. For example the metadata value of metadata attribute filetype for file x.txt is textfile . Thus the metadata value of metadata attribute filetype is represented as textual content textfile of file filetype under directory x.txt of the metadata file system illustrated by in .

This way the metadata file system is represented to a user and or application as a standard hierarchical file system and accessing the metadata file system for a user and or application requires no other access methods than access methods to access data file system such as changing of directory listing the contents of a directory and reading the content of files.

According to a particular embodiment of the invention users and or applications are given unrestricted read write access to the metadata file system . This allows users and or applications a maximum level of power of expression with regard to the metadata file system .

According to yet another variant embodiment the read write access of users and or applications is restricted per user and or application thereby allowing differentiation of access rights for example an administrator of the metadata file systems can have unrestricted access rights whereas a common user has access restricted to addition of metadata related to data in the data file system that is owned by him.

Data file system from is illustrated at the top of . Mounted on the file system root is view file system that is constructed by the MVFS from internally stored view data.

This way the view file system is represented to a user and or application as a standard hierarchical file system and accessing the view file system for a user and or application requires no other access methods than access methods to access data file system such as changing of directory listing the contents of a directory and reading the content of files.

The base directory of the view file system is directory view . Under directory view is a directory config with two subdirectories namely directory files by type and directory lextfiles . Both of these directories have files cond.ini and group.ini respectively and for directory files by type and respectively and for directory textfiles .

Directly under directory view is also a directory files by type with subdirectory textfile . Subdirectory type text comprises symbolic link a b x.txt that points to file x.txt of data file system which is illustrated by dotted arrow .

Also directly under directory view is furthermore a directory textfiles which comprises link a b x.txt that also points to file x.txt of file system which is illustrated by dotted arrow .

The view file system comprises a configuration part and a view part. The configuration part allows users and or applications to specify the contents of a view and the configuration part is readable and writeable by a user and or application. The view part is read only for a user and or application.

In this particular embodiment the configuration part is illustrated by directory .config and its subdirectories respectively and files respectively . The view file system further comprises a view part that is illustrated by directory files by type with subdirectory textfile and link a b x.txt respectively by directory textfiles and link a b x.txt .

When a user and or application wants a view of the files in the data file system in which the files are organized according to metadata selection criterion metadata attribute file type the user and or application creates a directory in the view file system view config files by type . Upon creation of this directory the MVFS will create view configuration files in this directory such as cond.ini and group.ini . The contents of view configuration files and are writeable for a user and or an application but these files can not be deleted by a user and or an application. The file cond.ini allows a user and or an application to specify a metadata selection criterion that is to be satisfied in order for any file links to appear in the view. If the file cond.ini is left empty no file links will appear in the view. The file group.ini allows a user and or an application to specify a grouping criterion for the links that appear in the view according to which the links will be organized in subdirectories of the view. If left empty no grouping will be done. After having created the view config files by type directory the user and or application writes a metadata selection criterion file type to file cond.ini meaning that any types of files of data file system are to be presented in the view. In addition if the user and or application wants to organize the files presented in the view according to their file type the user and or application writes textual value type to file group.ini . The actions of the user and or application will have as a result that the MVFS will create user and or application readable directory files by type with a subdirectory per type of file present in the data file system . According to the example given here there is only one type of file present in the data file system namely of type textfile . The MVFS thus creates a subdirectory textfile . In each particular subdirectory per type of file the MVFS then creates links to all the files that correspond to the specific file type. According to the example given here there is only one file in the data file system that corresponds to file type textfile namely file x.txt . The MVFS thus creates link a b x.txt in subdirectory textfile .

Now how does the MVFS find the files in the data file system that correspond to a metadata search criterion Using the above example the MVFS thus needs to find all the files in data file system that have a metadata attribute filetype and organize them according to metadata attribute value. To do so the MVFS uses internally stored meta and index data to find the files in the data file system that correspond to the metadata search criterion. Thus the MVFS searches the meta and index data for all metadata attributes filetype . Each different file type found is then represented by subdirectories in the view file system. It then searches the meta and index data for all specific file types found and creates a pointer to that file in the view file system in the subdirectory corresponding to the specific file type such as subdirectory textfile . Then it creates a pointer to each file that is indexed in the meta and index database that has the specific file type metadata attribute value having a specific value the pointer being created from the path information that is stored in the meta and index data.

As a second example suppose that a user and or application wants to create a view of the data file system of all files in the data file system that have metadata attribute filetype with value textfile . For this purpose the user and or application creates a directory view config textfiles in view file system upon which the MVFS automatically creates files cond.ini and group.ini . Then the user and or application writes metadata search criterion file type textfile to the automatically created cond.ini file . This results in automatic creation by the MVFS of directory textfiles of link a b x.txt pointing to file x.txt .

According to a particular embodiment of the invention additional view configuration files are created by the MVFS upon creation of a view by a user and or application such as a view configuration file to specify an ordering criterion such as ascending or descending alphabetical order or ordering based on metadata attribute or metadata attribute value such as file creation date or a specific value of a file creation date or a specific range of file creation date.

The reader of the present document will understand that file system names file directory names and file names have been chosen for illustrative purposes and that other file system names file directory names and file names are compatible with the invention.

Other types of syntax for specification of metadata selection criteria are possible and compatible with the invention. According to a particular embodiment a version of XML Extended Markup Language is used to specify metadata search criteria. According to a particular embodiment the XPath XML Path query language is used to specify metadata selection criteria.

According to a particular embodiment an intermediate hard or software module is provided for user and or applications which simplifies the operations for a user and or application to create views. Such a module further has the advantage to hide the implementation specificities of the view file system. The module interfaces a user and or application with the view file system and uses the standard file system access methods to access the view file system while hiding any complexity of the creation and management of views from to the user and or application.

According to a particular embodiment of the invention the internally stored metadata and or view configuration data is stored in a relational database.

According to a variant embodiment the internally stored meta and index data and or view configuration data is stored in hash tables. A hash table is a data structure that uses a so called hash function to efficiently map data identifiers keys to data values. The hash function is used to transform the key to an index of an array element where data values are stored. Hash tables provide the advantage that a data lookup is independent of the number of elements stored in the table.

According to a particular embodiment of the invention the MVFS keeps track of modifications made by users and or applications to the data file system. It updates internally stored meta and indexing data its external representations being the metadata file system and the view file system accordingly to keep the external presentation of the data presented via the metadata and view file systems coherent with the internally stored data. Likewise the MVFS keeps track of modifications by users and or applications to the metadata file system and if needed updates indexing data and or the view file system which is for example needed when a user and or application adds new metadata.

The metadata and or the view file system are presented as a file system only when accessed by a user and or an application. Thus the metadata file system and or the view file system are said to be virtual. This virtualization has the advantage to allow avoiding data duplication and thus avoids data incoherency. The metadata and or view file systems are thus mere virtual presentations created from the internally stored data. All previously described operations done by a user and or application on the metadata and or view file system are then translated by the MVFS into read write operations on the internally stored index data and metadata.

MVFS manager is connected to view file system builder via bidirectional connection to metadata file system builder via bidirectional connection to index data extractor via bidirectional connection and to metadata extractor via bidirectional connection allowing it to send data and commands to the mentioned elements and and to receive data and command acknowledgements from to the mentioned elements and . MVFS manager is further connected to DBMS via bidirectional connection allowing it to store and retrieve data. DBMS is connected to external device interface via bidirectional connection allowing it to save data from the database on external storage device in storage space and to retrieve it. MVFS manager is also connected to LAN network interface via bidirectional connection allowing it to exchange data commands and command acknowledgements with the devices and connected to LAN .

View file system builder metadata file system builder index data extractor and metadata extractor are all connected to DBMS via respectively bidirectional connections and allowing these elements to store and retrieve data.

View file system builder and metadata file system builder are further connected to LAN network interface via respectively bidirectional connection and allowing these elements to exchange data with the devices and connected to the LAN .

Index data extractor and metadata extractor are connected to external device interface via respectively connections and allowing them to access the data stored in the data file system which is stored on external storage device . Metadata extractor and Index data extractor are interconnected via bidirectional connection allowing them to communicate in the process of extracting meta and index data.

Users and or applications have read write access to the data file system that is stored on external storage device via LAN network interface and External device interface that are interconnected via bidirectional connection .

As device is also a router for routing packets between devices and or connected to LAN between devices in the external network and in LAN the device comprises a router element that interconnects LAN network interface with external network interface via respectively bidirectional connections and .

Finally device is connected to LAN via bidirectional connection to external network via bidirectional connection and to external storage device via bidirectional connection .

These elements work together as follows to implement the invention. Metadata extractor and index data extractor extract metadata and index data from a data file system stored on external device that they access via external device interface and connections respectively . The data that they extract is stored in DBMS and the data to be stored is transferred from metadata extractor and index data extractor via connections respectively to DBMS . DBMS stores new data or updates existing data in its internal database according to the commands and data that it receives from metadata extractor and from index data extractor . DBMS manages the storage of the database on storage device and so ensures that the data in the database is protected from accidental erasure for example caused by a power surge. Once the metadata and index data are stored by the DBMS the metadata data extractor and the index extractor inform MVFS manager of the completion via respectively connections and . The MVFS manager then instructs metadata file system builder via connection to build the metadata file system based on the information stored in the database. For this purpose the metadata file system builder reads the data stored in the database by the DBMS via connection . When the metadata file system builder has finished building the metadata file system which comprises storing of data of the metadata file system as it is built in the database managed by the DBMS the metadata file system builder communicates to the MVFS manager via connection that the metadata file system has been built and is ready to be used. The device is now ready to receive instructions and requests related to accessing of data in the data file system according to related metadata from devices and or connected to LAN . Devices and or directly access the metadata file system via metadata file system builder through LAN network interface via connection .

Modifications on metadata and on data of the data file system for example done by devices and or of LAN are monitored by metadata and index data extractors and that communicate with the DBMS to update its database accordingly.

When device and or send instructions to MVFS manager related to the configuration and accessing of views the MVFS manager instructs the view file system builder to configure and present a view according to the received instructions. View file system builder stores view configurations in the database by accessing the DBMS via connection . Once a view is configured view file system builder directly interfaces with devices and or to reply to read requests on the view via connection that connects view file system builder to LAN interface .

The functioning as described above is from scratch that is no metadata and index data is extracted yet the database is not filled yet and the metadata file system is not built. The reader will understand that once these actions are performed they need not to be repeated upon each powering on of the device because the DBMS stores the information that is needed to allow a quick startup by filling the database with already stored data saved on external storage device . For a nominal functioning i.e. when the database managed by DBMS is already filled the MVFS manager only needs to update existing data and send the right instructions to the elements to execute that task. Time consuming functions such as extracting meta and index data can be given a low priority so that the execution of these functions do not perturb the other functions of device . These low priority tasks can then be executed in process background for example during idle time or can programmed to be executed over nighttime or in a standby state or only when data is modified that concerns meta and index data or only when a certain amount of data is modified.

Of course the embodiment of is an example embodiment illustrating a particular embodiment of the invention. The reader of this document will understand that the invention can be implemented in various different embodiments. For example device is not necessarily a gateway implementing a router and interfacing devices and or with an external network but a centralized server in a LAN that implements the method of the invention. Likewise the invention can be implemented in any device of a LAN having the needed processing power to implement the method of the invention as an algorithm executed on a processor or equipped with the necessary dedicated hardware to implement the invention such as some or all of the elements described in . The reader will also understand that the invention can be implemented as described by a device connected to a wired network such as LAN but also on any type of wireless networks. The reader will further understand that the device implementing the invention is needs not necessary to be equipped with an external disk such as depicted in and that other variant embodiments are compatible with the invention such as diskless implementations with non volatile types of memory or integrated disk storage in device or external networked storage disk directly connected to network LAN .

According to a particular embodiment the invention is entirely implemented in hardware for example as a dedicated component for example as an ASIC FPGA or VLSI respectively Application Specific Integrated Circuit Field Programmable Gate Array and Very Large Scale Integration or as distinct electronic components integrated in a device or in a form of a mix of hardware and software.

According to a particular embodiment a device implementing the method of the invention is a personal computer equipped or not with dedicated hardware.

According to a particular embodiment the elements that are needed for the implementation of the functions according to the invention such as the elements of the particular embodiment of are distributed over several devices connected in a network such as multiple set top boxes boxes or multiple gateways or a mix of these each of these devices communicating with each other over the network in order to implement the invention as one virtual device. Such an embodiment of the invention can be useful for example to avoid using a centralized server or a gateway through using processing capabilities of existing equipment.

The algorithm starts with a step of initialization of variables needed for its execution. Then in a step metadata is extracted from the data file system for example using metadata extractor of and stored in a database for example database . In step index data is extracted from the data file system for example using index data extractor and is stored in a database for example in database . In a test step it is verified if an access to the metadata file system is requested by a user and or an application. If access is requested step is executed where access to the metadata file system is given using for example metadata file system builder . Then the algorithm iterates test step illustrated by arrow . If no access to the metadata file system is requested test step is executed where it is verified if an access to the view file system is requested by a user and or application. If access is requested step is executed where access to the view file system is given using for example view file system builder . Then the algorithm reiterates test step illustrated by arrow . If no access to view file system is requested the algorithm again returns to test step illustrated by arrow .

According to a particular embodiment of the invention steps of testing and giving access to metadata file system and steps of testing and giving access to view file system are executed in a parallel manner giving simultaneous access to the metadata file system and to the view file system. According to a particular embodiment step of extraction of metadata is executed when metadata is modified in step of giving access to metadata file system so that the metadata stored in database is kept updated.

