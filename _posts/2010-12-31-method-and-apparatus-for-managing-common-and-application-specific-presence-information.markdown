---

title: Method and apparatus for managing common and application specific presence information
abstract: A method and apparatus for managing common and application specific presence information, wherein the apparatus programs a computer to perform the method, which includes: receiving a publication message comprising presence information from a presentity; partitioning the presence information into common presence information and application specific presence information; storing the common presence information in a common presence information database, wherein authorization for access to the common presence information database is controlled by the presence server; and forwarding the application specific presence information to an external application, wherein the external application controls storage of the application specification presence information and authorization for access to the application specific presence information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08990381&OS=08990381&RS=08990381
owner: Motorola Solutions, Inc.
number: 08990381
owner_city: Schaumburg
owner_country: US
publication_date: 20101231
---
The present disclosure relates generally to presence information management and in particular to a method and apparatus for managing common and application specific presence information.

In computer and telecommunications networks presence information is defined as a status indicator that conveys status data such as availability activities and physical location of a presentity. A presentity is defined as an entity described by presence information. A presentity usually refers to a human a user but can also refer to a group of users. A presentity provides presence information to a presence service that runs on a presence server. The presence service stores the presence information in a presence information database also interchangeably referred to herein as a store .

The process wherein the presence service collects presence information is termed aggregation. In addition the presence service distributes presence information to entities called watchers wherein a watcher is defined as an entity a user that requests information about a presentity from a presence service. A watcher can subscribe to presence information from a presence service by requesting notification from the presence service and in such a case the watcher is referred to as a subscriber. Alternatively a watcher may fetch presence information from a presence service by simply requesting the current value of a presentity s presence information and in such a case the watcher is referred to as a fetcher. Oftentimes a presence server is a centralized server running a presence service which authorizes a presentity and stores or saves the presentity s presence information in a centralized database. Moreover the presence service authorizes a watcher and retrieves or gets presence information from the centralized database before forwarding the presence information to the watcher. However in deployments where the presence server aggregates presence information of a user across a varied set of applications some part of the user s presence information may comprise information that is relevant and common to all contributing applications which thus defines common presence information while the other may be viewed as application specific which thus defines application specification presence information .

For example a police officer s availability and physical location is relevant to all applications that are running on a dispatcher s computer and the police officer s computer or device and can thus be deemed as common presence information. To the contrary the application specific presence information is only relevant to a specific application. For instance for a job ticketing application a user s completion status for a particular job ticket or an enumeration of the various job tickets that a user is currently working on may be viewed as application specific presence information.

Accordingly there is a need for a method and apparatus to partition presence information into common and application specific presence information and to store and manage access to this presence information.

Skilled artisans will appreciate that elements in the figures are illustrated for simplicity and clarity and have not necessarily been drawn to scale. For example the dimensions of some of the elements in the figures may be exaggerated relative other elements to help improve understanding of various embodiments. In addition the description and drawings do not necessarily require the order illustrated. It will be further appreciated that certain actions and or steps may be described or depicted in a particular order of occurrence while those skilled in the art will understand that such specificity with respect to sequence is not actually required.

Apparatus and method components have been represented where appropriate by conventional symbols in the drawings showing only those specific details that are pertinent to understanding the various embodiments so as not to obscure the disclosure with details that will be readily apparent to those of ordinary skill in the art having the benefit of the description herein. Thus it will be appreciated that for simplicity and clarity of illustration common and well understood elements that are useful or necessary in a commercially feasible embodiment may not be depicted in order to facilitate a less obstructed view of these various embodiments.

Generally speaking pursuant to the various embodiments the present disclosure provides a method and apparatus for managing common and application specific presence information. In accordance with the present teachings a method performed by a presence server includes receiving a publish message also interchangeably referred to as publication message from a presentity. The publish message comprises presence information of the presentity. The method further includes partitioning the presence information into common presence information and application specific presence information. The presence server authorizes the presentity for access to a common presence information database that is controlled by the presence server. Moreover the presence server stores the common presence information in the common presence information database. In addition the method includes forwarding the application specific presence information to an external application wherein the external application controls storage also interchangeably referred to as a store or a database of the application specification presence information. Moreover the external application authenticates and authorizes the presentity for access to the application specific presence information storage before saving the application specific presence information in the application specific presence information storage.

Referring now to the drawings and in particular an illustrative system implementing embodiments in accordance with the present teachings is shown and indicated generally at . System comprises a presence server . In general the presence server is implemented using one or more memory devices including a common presence store hardware network interfaces not shown software interfaces and processing devices not shown that are operatively coupled and which when programmed form the means for these system elements to implement their desired functionality. The hardware network interfaces are a point of interaction between hardware components such as between the presence server and a communication device that implements a watcher and are used for passing signaling also referred to herein as messaging e.g. messages packets datagrams frames superframes and the like between hardware elements over a communication network. The implementation of the hardware network interface in any particular element depends on the particular type of network i.e. wired and or wireless to which the element is connected.

Where the network supports wireless communications the hardware interfaces comprise elements including processing modulating and transceiver elements that are operable in accordance with any one or more standard or proprietary wireless over the air interfaces wherein some of the functionality of the processing modulating and transceiver elements may be performed by means of the processing device through programmed logic such as software applications or firmware stored on the memory device of the system element or through hardware.

As used herein a software interface means a point of interaction between software components or modules. A software component often encapsulates a set of related functions or data . For example a class in object oriented computer languages is a software component. The interface of a software component is often kept separate from the implementation i.e. actual code of the component. For example in object oriented computer languages the term interface defines an abstract type that contains no data but exposes behaviors defined as methods. An interface often exposes more than one method. A class that implements all the methods of an interface is said to implement that interface. Moreover a class can implement more than one interface. A program can use a method in an interface by invoking or calling the method. To call a method the calling program has to pass to the method parameters required by the method.

The processing device utilized by the presence server software plug ins and external applications may be programmed with software or firmware logic or code for performing functionality described by reference to to and or the processing device may be implemented in hardware for example as a state machine or ASIC application specific integrated circuit to perform such functionality. The memory implemented by these system elements can include short term and or long term storage such as disks and databases for example of various information needed for the functioning of the respective elements. The memory may further store common and application specific presence information and software or firmware for programming the processing device with the logic or code needed to perform its functionality.

A presence service running on the presence server performs a presence aggregation function and a presence distribution function . The presence aggregation function implements a software interface IPublish through which a presentity provides presence information to the presence service. The presence aggregation function receives presence information from a presentity and partitions the presence information into common presence information and application specific presence information. In addition the presence aggregation function stores the common presence information in a common presence store if the presentity is authenticated and authorized to access to the store .

The presence distribution function provides presence information to watchers through a subscriber software interface ISubscribe and a notify us software interface INotify . A watcher requests from the presence server for presence information by calling the subscriber interface ISuscribe . Alternatively a watcher requests notification from the presence server of future changes in one or more presentities presence information by calling the subscriber interface ISuscribe . When the requested presence information is available the presence distribution function forwards the presence information to the watcher through the notify interface INotify .

To manage the application specific presence information the presence server uses a plugin also interchangeably referred to as plug in or Application Programming Interface API client architecture. A plugin is defined as a software component that runs in one application or system and communicates with a second application or system i.e. an external application to the presence server using knowledge or protocols that are private to the plugin and the second application or system wherein the functions and of the presence server which processes the common presence information has no knowledge of the protocols used between the plug in and the second or external application. Within the plugin architecture of the presence server a plugin is used to communicate with a specific application to manage presence information that is specific to the application. For example a plugin communicates with an application to manage presence information that is specific to application . The plugin runs on the presence server while the application runs on a different system which may be in a geographically different location from that of the presence server . The plugin implements an application Presence Information Data Format PIDF store software interface IStoreAppPresence which the presence aggregation function calls to store presence information that is specific to the application . The presence information that is specific to the application is stored in an application PIDF store which is controlled by the application .

Moreover the plugin implements an application PIDF retrieve software interface IRetrieveAppPresence which the presence distribution function calls to retrieve presence information that is specific to the application . The requested presence information is retrieved from the application PIDF store that is controlled by the application . Responsive to a call by the presence service to the interface IStoreAppPresence or IRetrieveAppPresence the plugin communicates with the application to store or retrieve presence information respectively. In addition the plugin performs authentication and authorization for access to the application PIDF store . For example the presence aggregation function calls the application PIDF store interface IStoreAppPresence with authorization credentials of a presentity as a parameter. The authorization credentials of the presentity usually include the identity of the presentity and a trust assertion from the presence server . The trust assertion may be a password passphrase a X.509 certificate a Security Assertion Markup Language SAML token or the like. Likewise the authorization credentials of a watcher usually include the identity of the watcher and a trust assertion from the presence server . The presence distribution function calls the application PIDF retrieve interface IRetrieveAppPresence with authorization credentials of a watcher as a parameter.

The plugin may request the application to authenticate and authorize the presentity for accessing the application PIDF store . In alternate embodiment of the present teachings the plugin may authenticate and authorize the presentity for accessing the application PIDF store without communicating with the application. The application PIDF store is not accessed when the presentity fails authorization. Alternatively the plugin may access the application PIDF store directly without communicating with the application . Furthermore in an alternate embodiment in accordance with the present teachings the plugin may authenticate and authorize a presentity or watcher first and does not authorize the presentity or watcher again in response to subsequent calls to the interfaces IStoreAppPresence or IRetrieveAppPresence .

Under the plugin architecture the presence server supports more than one plugin simultaneously. For example plugins and correspond to applications and respectively. Applications and control application PIDF stores and respectively. In addition both plugins and implement the software interfaces IStoreAppPresence and IRetrieveAppPresence .

Turning now to a logical flowchart illustrating a method performed by a presence service running on a presence server in accordance with some embodiments of the present teachings is shown. At the presence service receives a publish message. The publish message comprises presence information of the presentity and the presence information includes both common presence information and application specific presence information. In accordance with the present teachings the publish message is represented in Multipurpose Internet Mail Extensions MIME format and comprises two types of content. The first type of content comprises common presence information while the other type of content comprises application specific presence information. Both common and application specific presence information is in PIDF. In one illustrative implementation the publish message is a SIP message having a structure as described in Internet Engineering Task Force IETF Request for Comments RFC 3261 published June 2002 in any subsequent revisions and related RFCs which is modified to include the common and application specific presence information in him MIME format

At the presence service partitions the presence information into common presence information and application specific presence information. Moreover the presence service authenticates and authorizes the presentity for access to a common presence information database at . If the presentity is authorized to access to the common presence information database the presence service saves the common presence information in the common presence information database at . At the presence service provides the application specific presence information and authorization credentials of the presentity to an external application such as the application in . The external application authenticates and authorizes the presentity for access to the external application s database such as the application PIDF store in . If the presentity is authorized to access the external application s database the external application saves the application specific presence information in the external application s database and returns a reference to the stored application specific presence information to the presence service. At the presence service saves the reference in the common presence information database that is controlled by the presence server.

Referring to a message sequence diagram illustrating a method in accordance with some embodiments of the present disclosures is shown. Method comprises a presence server running a presence service Unified Presence Service. The presence server comprises two plugins App1 Plugin and App2 Plugin communicating with two applications App1 and App 2 respectively. It should be noted that the present teachings support more applications along with corresponding plugins. Moreover the method comprises a presentity running two different applications Presentity1 App1 and Presentity1 App2 publishing or providing presence information to the presence server . However more presentities and applications may communicate with the presence server to publish presence information. At the presentity provides presence information including both common presence information and application specific presence information to the presence service using a publish message such as a modified SIP PUBLISH message. The publish message is represented in MIME format and comprises two types of content. The first type of content comprises common presence information while the other type of content comprises application specific presence information. At the presence service receives the publish message and partitions the presence information contained in the publish message into common presence information and application specific presence information. In addition the presence service authenticates and authorizes the presentity for access to a common presence information store at . If the presentity is successfully authorized the presence service saves the common presence information in the common presence information store at .

At the presence service forwards the application specific presence information and authorization credentials of the presentity to the plugin by calling an application PIDF store interface of the plugin . At the plugin requests the application to authenticate and authorize the presentity for access to an application specific presence information store that is controlled by the application . If the application grants the access the plugin requests the application to save the application specific presence information in the application specific presence information store. Alternatively the application immediately saves the application specific presence information in the application specific presence information store after the presentity is authorized to access the application specific presence information store. The plugin a reference to the saved application specific presence information from the application and returns the reference to the presence service at . Accordingly the presence service saves the reference in a local store such as the common presence information store at .

Similarly the presentity provides presence information to the presence service at . At the presence service receives the presence information and partitions the presence information into common presence information and application specific presence information. In addition the presence service authorizes the presentity for access to a common presence information store at . If the presentity is authorized for such access the presence service saves the common presence information in the common presence information store at .

At the presence service forwards the application specific presence information and authorization credentials of the presentity of to the plugin by calling an application PIDF store interface of the plugin . At the plugin requests the application to authenticate and authorize the presentity for access to an application specific presence information store that is controlled by the application . If the application grants the access the plugin requests the application to save the application specific presence information in the application specific presence information store. Alternatively the application immediately saves the application specific presence information in the application specific presence information store after the presentity is authorized to access the application specific presence information store. The plugin receives a reference to the saved application specific presence information from the application and returns the reference to the presence service at . The presence service then saves the reference in a local store such as the common presence information store at .

Turning now to a message sequence diagram illustrating a method in accordance with some embodiments of the present disclosures is shown. Method comprises a presence server running a presence service Unified Presence Service. The presence server further comprises two plugins App1 Plugin and App2 Plugin communicating with two applications App1 and App2 respectively. It should be noted that the present teachings support more applications along with corresponding plugins. Moreover the method comprises a watcher Watcher . However more watchers may communicate with the presence server to request presence information. At the watcher requests for presence information from the presence server by calling a subscriber interface implemented by the presence service. The requested presence information comprises common presence information and application specific presence information. The presence service calls an application PIDF retrieve interface implemented by the plugin with authorization credentials of the watcher to retrieve presence information that is specific to the application at . The plugin receives the request with authorization credentials of the watcher at and communicates with the application to request the application specific presence information at .

At the application performs authentication and authorization to determine whether the watcher can access the requested application specific presence information. If the watcher is permitted to access the requested information the application retrieves the requested application specific presence information at and returns the information to the application plugin at . After the plugin receives the requested application specific presence information at it returns the requested application specific presence information to the presence service at .

At the presence service calls an application PIDF retrieve interface implemented by the plugin with authorization credentials of the watcher to retrieve presence information that is specific to the application at . The plugin receives the request with authorization credentials of the watcher at and communicates with the application to request the application specific presence information at .

At the application performs authentication and authorization to determine whether the watcher can access the requested application specific presence information. If the watcher is permitted to access the requested information the application retrieves the requested application specific presence information at and returns the information to the application plugin at . After the plugin receives the requested application specific presence information at it returns the requested application specific presence information to the presence service at .

At the presence service performs authorization to determine whether the watcher can access the common presence information that the watcher is requesting. If the watcher is allowed to access the common presence information the presence service retrieves the requested common presence information from a common presence information store such as the store in . Alternatively the presence service authorizes the watcher and retrieves the requested common presence information before requesting for the application specific presence information at . At the presence service aggregates the common presence information the presence information that is specific to the application and the presence information that is specific to the application . The presence service sends the aggregated presence information to the watcher by a notify interface at . It should be noted that the watcher may define the exact presence information that the watcher subscribes at . For example the watcher may subscribe only App1 specific presence information not App2 specific presence information. Moreover the watcher may subscribe certain common presence information not other common presence information.

Each of teaches a presence server using a plugin to manage application specific presence information. Alternatively a presence server may use an Application Programming Interface API to manage application specific presence information. Referring now to an illustrative system implementing embodiments in accordance with the present teachings is shown. System comprises a presence server . In general the presence server is implemented using one or more memory devices although not shown network interfaces not shown and processing devices not shown that are operatively coupled and which when programmed form the means for these system elements to implement their desired functionality. Those skilled in the art however will recognize and appreciate that the specifics of this illustrative example are not specifics of the disclosure itself and that the teachings set forth herein are applicable in a variety of alternative settings.

A presence service running on the presence server performs a presence aggregation function and a presence distribution function . The presence aggregation function implements a publish software interface IPublish through which a presentity provides presence information to the presence service. The presence aggregation function receives presence information from a presentity and partitions the presence information into common presence information and application specific presence information. In addition the presence aggregation function stores the common presence information in a common presence store if the presence service authorizes the presentity to access to the store .

The presence distribution function provides presence information to watchers through a subscriber software interface ISubscribe and a notify software interface INotify . A watcher requests from the presence server for presence information by calling the subscriber interface ISubscribe . Alternatively a watcher requests notification from the presence server of future changes in one or more presentities presence information by calling the subscriber interface ISubscribe . When the requested presence information is available the presence distribution function forwards the presence information to the watcher through the notify interface INotify .

System further comprises a plurality of applications and . Alternate embodiments of the present teachings may comprise a different number of applications. Each of the applications and implements an application PIDF store software interface and an application PIDF retrieve software interface. For example application implements an application PIDF store interface IStoreAppPresence and an application PIDF retrieve interface IRetrieveAppPresence . To store presence information that is specific to the application the presence aggregation function calls the application PIDF store interface IStoreAppPresence to store the application specific presence information in a application specific presence information database that is controlled by the application . Similarly the presence distribution function calls the application PIDF retrieve interface IRetrieveAppPresence to retrieve presence information that is specific to application . The application PIDF retrieve interface IRetrieveAppPresence retrieves the application specific presence information from the store . It should be noted that for both storing and retrieving presence information the application performs authentication and authorization of a presentity or watcher against the authorization credentials of the presentity or watcher respectively. The authorization credentials of a presentity usually include the identity of the presentity and a trust assertion from the presence server while the authorization credentials of a watcher usually include the identity of the watcher and a trust assertion from the presence server .

Similarly application implements an application PIDF store interface IStoreAppPresence and an application PIDF retrieve interface IRetrieveAppPresence and controls an application specific presence information database . Application implements an application PIDF store interface IStoreAppPresence and an application PIDF retrieve interface IRetrieveAppPresence and controls an application specific presence information database . Each of the applications and registers its application PIDF store interface and application PIDF retrieve interface with the presence server by calling a register callback software interface IRegisterCallbacks implemented by the presence server . The register callback interface IRegisterCallbacks is further illustrated by reference to .

Turning now to a message sequence diagram illustrating a method for registering callbacks in accordance with some embodiments of the present disclosures is shown. Method comprises a presence server running a presence service Unified Presence Service. The presence service implements a register callback interface. An application calls the register callback interface to publish the application s application PIDF store interface and application PIDF retrieve interface. For example an application App1 calls the register callback interface at to publish an application PIDF store interface and an application PIDF retrieve interface of the application . After a successful publication of the two interfaces of application the presence server becomes knowledgeable of the application PIDF store interface and the application PIDF retrieve interface of application . When necessary the presence server then calls the application PIDF store interface to store presence information that is specific to application and calls the application PIDF retrieve interface to retrieve presence information that is specific to application . Similarly application App2 and AppX call the register callback interface at and respectively to publish their application PIDF store interfaces and an application PIDF retrieve interfaces.

Each of the shows a message sequence diagram illustrating a method in accordance with some embodiments of the . Turning first to a method comprises a presence server running a presence service Unified Presence Service. Method also comprises a presentity running two different applications Presentity1 App1 and Presentity1 App1 communicating with the presence server to provide or publish presence information. In addition method comprises two applications App1 and App2 . However method may support more presentities and applications. At the presentity provides presence information including both common presence information and application specific presence information to the presence server using a publish message such as a modified SIP PUBLISH message. The publish message is represented in MIME format and comprises two types of content. The first type of content comprises common presence information while the other type of content comprises application specific presence information. At the presence service receives the publish message and partitions the presence information contained in the publish message into common presence information and application specific presence information. In addition the presence service authenticates and authorizes the presentity for access to a common presence information store at . If the presentity is authorized for such access the presence service saves the common presence information in the common presence information store at .

At the presence service forwards the application specific presence information and authorization credentials of the presentity to the application by calling an application PIDF store interface of the application . At the application authenticates and authorizes the presentity for access to an application specific presence information store that is controlled by the application . If the application grants the access the application saves the application specific presence information in the application specific presence information store. The application returns a reference to the saved application specific presence information to the presence service at . The presence service then saves the reference in a local store such as the common presence information store at .

Similarly the presentity provides presence information to the presence service at . At the presence service receives the presence information and partitions the presence information into common presence information and application specific presence information. In addition the presence service authorizes the presentity for access to a common presence information store at . If the presentity is authorized for such access the presence service saves the common presence information in the common presence information store at .

At the presence service forwards the application specific presence information and authorization credentials of the presentity to the application . At the application authorizes the presentity for access to an application specific presence information store that is controlled by the application . If the application grants the access the application saves the application specific presence information in the application specific presence information store. The application returns a reference to the saved application specific presence information to the presence service at . The presence service then saves the reference in a local store such as the common presence information store at .

Turning now to a method comprises a presence server running a presence service. Method also comprises a watcher communicating with the presence server to request for presence information. In addition method comprises two applications and . However the present teachings support more watchers and applications. At the watcher requests for presence information from the presence server by calling a subscriber interface implemented by the presence service. The requested presence information comprises common presence information and application specific presence information. The presence service calls an application PIDF retrieve interface implemented by the application with authorization credentials of the watcher to retrieve presence information that is specific to the application at . At the application performs authentication and authorization to determine whether the watcher has the requisite credentials to access the requested application specific presence information. If the watcher is permitted to access the requested information the application retrieves the requested application specific presence information at and returns the information to the presence service at .

At the presence service calls an application PIDF retrieve interface implemented by the application with authorization credentials of the watcher to retrieve presence information that is specific to the application . At the application performs authentication and authorization to determine whether the watcher can access the requested application specific presence information. If the watcher is permitted to access the requested information the application retrieves the requested application specific presence information at and returns the retrieved information to the presence service at .

At the presence service performs authorization to determine whether the watcher can access the common presence information that the watcher is requesting. If the watcher is allowed to access the common presence information the presence service retrieves the requested common presence information from a common presence information store such as the store in . Alternatively the presence service authorizes the watcher and retrieves the requested common presence information before requesting for the application specific presence information at . At the presence service aggregates the common presence information the presence information that is specific to the application and the presence information that is specific to the application . Thereafter the presence service sends the aggregated presence information to the watcher by a notify interface at .

Persons of skill in the art will understand that this disclosure may be extended to other embodiments than those specifically disclosed herein. In the foregoing specification specific embodiments have been described. However one of ordinary skill in the art appreciates that various modifications and changes can be made without departing from the scope of the disclosure as set forth in the claims below. Accordingly the specification and figures are to be regarded in an illustrative rather than a restrictive sense and all such modifications are intended to be included within the scope of present teachings.

The benefits advantages solutions to problems and any element s that may cause any benefit advantage or solution to occur or become more pronounced are not to be construed as a critical required or essential features or elements of any or all the claims. The disclosure is defined solely by the appended claims including any amendments made during the pendency of this application and all equivalents of those claims as issued.

Moreover in this document relational terms such as first and second and the like may be used solely to distinguish one entity or action from another entity or action without necessarily requiring or implying any actual such relationship or order between such entities or actions. The terms comprises comprising has having includes including contains containing or any other variation thereof are intended to cover a non exclusive inclusion such that a process method article or apparatus that comprises has includes contains a list of elements does not include only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. An element proceeded by comprises . . . a has . . . a include . . . a contains . . . a does not without more constraints preclude the existence of additional identical elements in the process method article or apparatus that comprises has includes contains the element. The terms a and an are defined as one or more unless explicitly stated otherwise herein. A device or structure that is configured in a certain way is configured in at least that way but may also be configured in ways that are not listed. Also the sequence of steps in a flow diagram or elements in the claims even when preceded by a letter does not imply or require that sequence.

It will be appreciated that some embodiments may be comprised of one or more generic or specialized processors or processing devices such as microprocessors digital signal processors customized processors and field programmable gate arrays FPGAs and unique stored program instructions including both software and firmware that control the one or more processors to implement in conjunction with certain non processor circuits some most or all of the functions of the method and apparatus described herein. The non processor circuits may include but are not limited to a radio receiver a radio transmitter signal drivers clock circuits power source circuits and user input devices. As such these functions may be interpreted as steps of a method described herein. Alternatively some or all functions could be implemented by a state machine that has no stored program instructions or in one or more application specific integrated circuits ASICs in which each function or some combinations of certain of the functions are implemented as custom logic. Of course a combination of the two approaches could be used. Both the state machine and ASIC are considered herein as a processing device for purposes of the foregoing discussion and claim language.

Moreover an embodiment can be implemented as a computer readable storage medium having computer readable code stored thereon for programming a computer e.g. comprising a processor to perform a method as described and claimed herein. Examples of such computer readable storage medium include but are not limited to a hard disk a CD ROM an optical storage device a magnetic storage device a ROM Read Only Memory a PROM Programmable Read Only Memory an EPROM Erasable Programmable Read Only Memory an EEPROM Electrically Erasable Programmable Read Only Memory and a Flash memory. Further it is expected that one of ordinary skill notwithstanding possibly significant effort and many design choices motivated by for example available time current technology and economic considerations when guided by the concepts and principles disclosed herein will be readily capable of generating such software instructions and programs and ICs with minimal experimentation.

The Abstract of Disclosure is provided to allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in various embodiments for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separately claimed subject matter.

