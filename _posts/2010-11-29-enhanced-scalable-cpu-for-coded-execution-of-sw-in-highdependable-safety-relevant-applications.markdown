---

title: Enhanced scalable CPU for coded execution of SW in high-dependable safety relevant applications
abstract: Some embodiments of the invention relate to a single processor configured to comprise configurable hardware extensions, disposed within a data path configured to selectively provide either encoded data or original data, that allow for two modes of operation. In a high performance mode, the hardware extensions allow for increased processing bandwidth by using the hardware extensions for processing extended data (i.e., additional original data). In a safety integrity mode the hardware extensions allow for parallel processing of encoded data concurrent with the processor executing a SBST by processing a self-test program and self-test data. Therefore, the single channel processor provides a single core system that can selectively achieve either high safety integrity levels (e.g., SIL3) for safety relevant applications or high performance for non-safety relevant applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08621273&OS=08621273&RS=08621273
owner: Infineon Technologies AG
number: 08621273
owner_city: Neubiberg
owner_country: DE
publication_date: 20101129
---
Computer systems are increasingly being used in applications where they are entrusted with functions upon which human life can depend. Such safety relevant computer systems may be implemented into medical devices anti lock braking systems in automobiles shut down systems at nuclear power plants etc. Safety relevant computer systems may be coupled with sensors configured to sense operations of the systems and to react to possible dangerous situations with a speed and dependability that is unmatched by human capabilities. Accordingly in safety relevant computer systems hardware based failure is unacceptable and the timely detection of any such failure is important.

The International Electrotechnical Commission IEC regulates the integrity of safety relevant computer systems. The integrity of a computer system processor may be measured according to safety integrity levels SIL . In general there are four different safety integrity levels as defined by IEC 61508. The safety integrity levels range from a minimum of SIL1 to a maximum of SIL4. Devices having various safety importances are required to meet the standards set forth in a corresponding SIL. For example airplanes nuclear reactors and the like have a high safety importance and therefore are required to use computer systems meeting the most stringent safety standard SIL4.

To achieve a given SIL a device must meet targets for the maximum probability of dangerous failure and a minimum safe failure fraction. For example a SIL3 device e.g. used for automobiles has probability of dangerous failure per hour of 1e 7 to 1e 8 and must detect more than 99 of all possible dangerous failures.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details.

As provided herein the following terms are intended to have specific meaning as set forth below. The term data refers to data. The term code refers to program code comprising a collection of instructions. The term instruction refers to a single instruction i.e. an atomic instance of program code . The term encoded data refers to the union of M N bits of original data and redundant data. The terms original data or information bits refers to M bits of actual un encoded data.

The detection of processor faults is important in safety relevant applications to ensure a computer system s functions are performed consistently. Processor fault detection can be performed by various techniques e.g. hardware based techniques software based self test etc. . For example hardware based techniques such as spatial redundancy may employ multiple redundant processing cores e.g. lock step CPUs to execute multiple instances of the same software program code synchronously in parallel on the multiple cores. The results of the redundant processing cores are compared and divergence between the results indicates an error in the processor.

Such diagnostic coverage techniques available for processor fault detection are able to guarantee a certain processor integrity however often to reach a high integrity level significant resources are used e.g. chip area power consumption development costs etc. .

The inventors have appreciated that coded processing fault detection techniques mainly detect faults in data storage processing and addressing while software based self test SBST fault detection techniques are well suited to detect faults in decoding and program flow control. Therefore the two processor fault detection techniques detect faults in complementary areas of processor operation. Based upon this appreciation the inventors have realized that through use of both a software based self test SBST and coded processing the overall fault detection of a single channel processor can be improved while scaling back the complexity and cost e.g. implementation cost development cost etc. of implementing each individual method.

Accordingly a single channel processor having one core that is configured to achieve a high safety integrity level using configurable hardware extensions for coded processing and a software based self test SBST is provided herein. The single channel processor further provides a single core system that can selectively achieve either high safety integrity levels e.g. SIL3 for safety relevant applications or high performance for non safety relevant applications.

In particular the single channel processor is configured to comprise configurable hardware extensions disposed within a data path configured to selectively provide either encoded data e.g. comprising redundant data bits or extended original data which allow for two modes of operation. In a high performance mode the hardware extensions allow for increased processing bandwidth by using the hardware extensions for processing of extended data bits i.e. additional information bits . In a safety integrity mode the hardware extensions allow for parallel processing of both original data bits and redundant data bits i.e. redundant data provided for integrity purposes interleaved with the processor executing a software based self test program SBST . Therefore the single channel processor allows for a multi use processor core that can offer a high level of safety integrity or a high level of performance at a relatively low cost increase.

When operating in a safety integrity operation mode the program code is provided to the single channel processor core in the normal course of processing to act upon an encoded data word. The encoded data word may comprise M N encoded data bits e.g. 40 bits wherein M bits e.g. 32 bits comprise original data and N bits e.g. 8 bits comprise redundant bits. The encoded data word may be generated by an encoding formula that forms a specific predetermined relationship between the original data bits and the redundant data bits.

As the single channel processor core performs a safety related function it will execute one or more instructions from the program memory associated with that function to read process or write encoded data in the data memory to perform the function. The single channel processor core processes the encoded data word using both the CPU core and hardware extensions. In one embodiment the single channel processor core may process the original data bits using the CPU core and the redundant data bits using the hardware extensions of the CPU core. After processing the output resulting from the processed original data bits and redundant data bits are examined to determine if processor faults are present in the single channel processor core . If the specific predetermined relationship between the original data bits and the redundant data bits is still present then no errors are present in the processor core .

Interleaved with performing the safety related function the processor may execute a SBST program by providing a self test program to the single channel processor core . The self test program may be provided to the single channel processor core at regular intervals in time at predetermined times or in response to an event. The processor core initiates the self test program to act upon self test data stored in the data memory . The self test program runs as a background task for the single channel processor core thereby operating concurrently with the normal course of processing e.g. with processing of encoded data to generate a self test program response which may be used to determine if processor faults are present in the single channel processor core.

Therefore in a safety integrity mode the single channel processor core is configured to perform two complimentary processor fault detection techniques that overlap in time. The single channel processor is configured to process encoded data words e.g. comprising original data bits and redundant data bits with an inherent check for mismatches between the original data bits and the redundant data bits to identify faults present in the processor during the normal course of processing and to interleave with the processing execution of a SBST program in the background of the CPU s normal processing. The combination of these two methods respectively addressing complementary safety risks provides a diagnostic coverage that cannot be reasonably achieved by either single method. The combination of the two methods compensates for lacks of fault robustness of each single method and therefore improves the overall safety integrity of a system e.g. reduces the probability of dangerous failures and maximizes the safe failure fraction .

When operating in a high performance operation mode the CPU processor core s hardware extensions are accessible for processing of extended original data bits i.e. additional information bits . Therefore in the high performance mode a CPU processor core s ability to process information bits is increased due to the hardware extensions. For example in one embodiment the single channel processor core is configured to process a first portion of a data word e.g. comprising original data bits and the hardware extensions are configured to parallel process a remaining portion of the data word e.g. comprising extended original data bits . Furthermore in the high performance mode the SBST can be skipped i.e. not performed thereby reducing the computational load on the single channel processor core .

The single channel processor core comprises a CPU core and hardware extensions wherein the original data path extends to the CPU core and the data path extension extends to the hardware extensions . The hardware extensions are coupled to the CPU core and are configured to comprise hardware components e.g. transistors that may perform both coded processing of an encoded data word natively in hardware e.g. not in software and processing of extended or multiple original data bits. The size of the hardware extensions may vary depending on how many redundant data bits are present in the encoded data word i.e. the safety integrity level desired . For example for a 32 bit core processor an encoded data word having 32 bits of original data and 8 bits of redundant data would have hardware extensions that is approximately 25 of the size of the CPU core . In other embodiments larger hardware extensions e.g. 16 bit 32 bit may be used to ensure greater safety integrity levels through the inclusion of more redundant bits within the encoded data word.

Although small hardware extensions e.g. 8 bits are generally insufficient to by themselves provide the required level of safety integrity e.g. SIL3 the minimal hardware extensions provided herein can provide a high level of safety integrity since the scope of the coded processing of an encoded data word may be scaled down because the coded processing is performed in conjunction with a SBST. In other words minimal hardware extension may be used since the coded processing does not have to achieve of the full diagnostic fault detection coverage e.g. SIL3 by itself. Therefore the hardware extensions may provide for the processing of encoded data with minimal hardware extensions e.g. 25 the size of the CPU core . This is also in contrast to multi core processing techniques having architectures that do not have data paths configured to handle the format of the encoded data and or do not provide the native hardware operations to process the encoded data.

Referring again to during operation a data word comprising original data bits e.g. a 32 bit data word may be provided to an encoding block . The encoding block will perform an encoding operation on the data word to generate an encoded data word having original data bits and redundant data bits. In particular the encoding operation may comprise the execution of an encoding algorithm on the original data bits e.g. 32 bits of original data to form redundant data bits e.g. 8 bits of redundant data wherein the redundant data bits are formed to have a relationship with the original data bits that is defined by the encoding algorithm. The relationship between the redundant data bits and the original data bits at the input and output of the single channel processor core may be used to recognize processor faults.

A program code is provided to the single channel processor core causing the CPU core and hardware extensions to perform processing on the encoded data word. For example a 40 bit encoded data word having 32 bits of original data and 8 bits of redundant data which is provided to the CPU core and hardware extensions may result in an output comprising a 40 bit word having 32 bits of original data and 8 bits of redundant data.

In one embodiment an encoded data word may comprise M bits of original data embedded in the encoded data word without any modifications and N bits of encrypted redundant data embedded in the encoded data word. In such an embodiment the CPU core may be configured to process the M bits of original data comprised within the encoded data word and the hardware extensions may be configured to process the N bits of encrypted redundant data comprised within the encoded data word natively in hardware thereby allowing parallel processing of the original data and the redundant data. In such an embodiment the original data undergoes a first processing by CPU core while the redundant data concurrently undergoes a second sometimes more complex processing by hardware extensions due to the encoding algorithm that generates the redundant data having a specific relationship with the original data. For example the original data may undergo a straightforward multiplication while the redundant data may undergo a processing operation that is not a straightforward multiplication.

In the encoded data word output from the single channel processor core redundant data bits retaining the relationship with the original data bits indicate that no processor faults are present. For example if the encoded data word output from the single channel processor core has redundant data bits and original data bits having the same relationship as redundant and original data bits in the encoded data word input to the single channel processor core the single channel processor core does not have faults. In contrast if the encoded data word output from the single channel processor core has redundant data bits and original data bits that do not retain the same relationship as the redundant and original data bits in the input encoded data word then faults are present in the single channel processor core .

Therefore as shown in the single channel processor core is comprised within an extended data path that allows for direct processing of an encoded data word i.e. processing of redundant data in parallel with processing of original data . In one embodiment the CPU core and the hardware extensions are differentiated from each other in that the hardware extensions are within a data path that selectively provides either extended original data or redundant data of an encoded data word to the hardware extensions while the CPU core is within a data path that provides original data bits or original data bits of an encoded data word.

It will be appreciated that the hardware extensions described herein may result in various data path extensions. For example a hardware extension to a CPU core may also have associated bus extensions memory extensions etc. Furthermore in various embodiments the CPU core may comprise a microprocessor core or a microcontroller core.

As shown in a program memory is configured to comprise a self test program and a program code . When operating in a safety integrity mode the program code encoded data words e.g. generated from data word via encoder decoder the self test code and the self test data are provided to the single channel processor via processor bus to run a SBST as a background task to coded processing of the encoded data words. When operating in a high performance mode the data words are provided to the single channel processor via bus and the SBST is not performed.

More particularly in a safety integrity mode the program code is provided to the CPU . The program code comprises a single set of instructions that are used to process the encoded word. Therefore the program code comprises a single set of instructions e.g. a single instruction that work with a single encoded data word containing information bits and redundant data to perform coded processing of the encoded data word.

Interleaved with the coded processing a software based self test SBST is performed. To operate a SBST a data memory is configured to store self test data and program memory is configured to store self test program . A test circuit e.g. a CPU is configured to access the processor bus and to initiate the transfer of self test data and self test program from the data memory and program memory to a CPU processor respectively. The self test program causes the processors to operate upon the self test data to perform the SBST. In various embodiments the test circuit may comprise a number of mechanisms e.g. an external tester a CPU etc. that may be used to transfer self test program and data to a CPU processor for execution.

The self test program may be developed in a test code generation step that is performed during a development stage and may comprise a sequence of binary instructions that tests a subset of the gates in the CPU e.g. 90 of the gates . In one embodiment the self test program may be generated taking into account the structural architecture of the system to comprise a software program comprising a sequence of instructions that tests a subset of the gates in the CPU e.g. 90 of the gates .

The SBST is configured to run in the background of normal computer processing. In one embodiment the SBST may be run on a time slicing method for a couple of microseconds every few milliseconds. Upon receiving the self test program e.g. a sequence of instructions the single channel processor executes the self test program . The sequence of binary instructions comprising the self test code may be processed by logic functions implemented in the single channel processor to result in a self test response comprising a processed sequence of binary data. The processor core s responses to the executed self test program are returned to the data memory through bus where they are stored self test response s . In one embodiment a checksum algorithm e.g. a cyclic redundancy check CRC is configured to operate on the self test responses to generate a result value from the responses. The result value is compared to a predefined value generated from the self test data . Unexpected variations between the result value and the predefined values indicate that a fault is present in the single channel processor .

In general the number of gates tested by a SBST is inversely proportionate to the cost e.g. effort time etc. of developing and executing the self test program. This typically results in a high development cost for SBST code since program code attempts to test as many gates as possible. Further CPU loading is high due to the long execution time of a SBST that is to achieve a high level of diagnostic fault detection. However the present invention allows for a reduction in the cost of the test software program since the program does not have to be developed to address a maximum number of gates. In other words self test program that exercises a subset of the CPU gates may be used since coded processing is also used to achieve a high level of diagnostic fault detection e.g. SIL3 .

As stated above the hardware extensions of the core processor allow for the core processor to operate in two modes of operation a safety integrity mode and a high performance mode. illustrate data paths respectively associated with each of the safety integrity mode and the high performance mode . The hardware extensions provided herein allow for an implementation of an extended data path such that in a safety integrity mode the processing of an encoded data word is accomplished whereas in the high performance mode the processing of wider data or single instruction multiple data SIMD operations or multiple instruction multiple data MIMD operations are supported for performance improvement. It will be appreciated that although label redundant processing hardware extensions and extra processing hardware extensions differently that such labels are not limiting and that the hardware extensions and may comprise the same hardware components in one embodiment.

Referring to in the safety integrity mode shown in the redundant processing hardware extensions of the CPU core are configured to process an encoded data word. During operation original data bits are mapped into N redundant data bits e.g. by an encoder circuit using modified AN or ANB codes . An encoded data word comprising an expanded data format having M normal binary data bits and N redundant data bits i.e. data bits that are intentionally duplicated for the safety relevant purposes with a specific predetermined relationship is formed. Therefore the encoded data word preserves the original M data bits and an additional N redundant data bits within for fault detection purposes.

The encoded data word is provided to a core processor for processing. In one embodiment the encoded data word is processed using an expanded data path having an extension for direct processing the redundant data bits of the encoded data word. As shown in a first part of the encoded data word having M original data bits is provided to the CPU core for processing while an extension of the data path is configured to provide the N redundant data bits to the redundant processing hardware extension for coded processing that is performed natively in hardware.

For example the single channel processor may be configured to receive a 24 bit encoded data word having a binary sequence of 0xA5A53F . The encoded data word comprises an original data part the first 16 data bits and a redundant data part the last 8 data bits . The CPU core may operate on the first 16 bits 0xA5A5 and the hardware extensions may operate on the last 8 bits 0x3F to provide an output encoded data word. If the output coded word contains processed original data and processed redundant data having the specific predetermined relationship therebetween no faults are present in the processor. However if the output encoded data word contains processed original data and processed redundant data not having the specific predetermined relationship therebetween faults are present in the processor.

In a high performance mode shown in the extra processing hardware extensions are accessible for processing of extended original data bits. Therefore in the high performance mode a single channel processor s ability to process data is increased due to the extra processing hardware extensions . As shown in in a high performance mode a data word having M N bits of original binary data may be provided to the single channel processor. M bits of original data may be provided to the CPU core while N bits of extended original data may be provided to the extra processing hardware extensions . Since the number of data bits being provided to the CPU core is increased e.g. by N additional bits in comparison to the processing load of the CPU core alone the performance of the single channel processor is improved. Furthermore in a high performance mode the SBST can be skipped thereby reducing the computation load on the CPU core.

For example the CPU core may be configured to receive a 24 bit data word having a binary sequence of 0x3A57F1 comprising original data bits. The CPU core may operate on the first 16 original data bits and the hardware extensions may operate on the last 8 extended original data bits to provide a 24 bit output.

Switching between safety integrity mode and high performance mode may be supported by a configurable data path design implementation. As stated above original data undergoes a first processing while the encoded data word undergoes a different processing due to encoding that forms a specific predefined relationship between the original binary data bits and the redundant data bits. Therefore to accommodate a data path that selectively provides either extended original data bits or encoded data to the hardware extensions the hardware extensions are configured to perform either a simple processing similar to the CPU core or a different processing that natively performs coded processing of redundant bits.

Although is described in relation to a segregated encoded word wherein M bits of original data are not encrypted and N bits of redundant data are encrypted it will be appreciated that the invention provided herein may also apply to encoded words wherein the M bits of original data are scrambled together with the N bits of redundant data to form a completely encrypted M N bit wide encoded data word. In such an embodiment software may be used in the CPU core to process encrypted data for example.

In one embodiment the hardware extensions may comprise hardware that is operable to perform either processing of original data bits or encoded data without physical changes in the computation logic of the hardware extensions. However the complexity of a coded processing may prevent such an embodiment from being realized and therefore in an alternative embodiment shown in the hardware extensions may comprise configurable sub units and which may be selectively operated based upon the data e.g. encoded data extended original data which is provided to the hardware extensions . In other words in a safety integrity mode a sub unit may perform processing in the hardware extensions while in a high performance mode a subunit may perform processing in the hardware extensions.

As shown in an encoder provides an encoded data word to hardware extensions comprising one or more switching units that may be configured to selectively couple logic sub units to either sub unit or sub unit to change the configuration of the hardware extensions. The switching unit may comprise a logic that is configured to switch between function elements e.g. AND gates OR gates etc. based upon the functionality that is desired in the hardware extensions in one embodiment.

It will be appreciated that the sub units comprise a small portion of the hardware extensions and that the majority of the gates in the hardware extensions are used for processing of both extended original data and encoded data. Reusing the majority of the gates for processing the redundant data and the extended original data allows for a minimal increase in chip area. For example the extended original data bits may undergo a straightforward multiplication using a multiplier while the encoded data bits may undergo a processing operation that is similar to multiplication but not a straightforward multiplication.

Therefore the hardware extensions provided herein are configured to natively execute coded processing i.e. perform coded processing of coded redundant bits using hardware that is specifically configured to process the coded words .

At an operating mode is determined for a processing core. The operating mode may comprise a safety relevant operating mode wherein coded processing is performed natively in hardware extensions interleaved with the execution of a SBST or a high performance operating mode wherein hardware extensions are used for expanded processing of extended original data.

At a data path is selectively operated based upon an operating mode. For a safety relevant operating mode encoded data is provided to hardware extensions of a single channel core processor. In a high performance operating mode extended original data is provided to hardware extensions of a single channel core processor.

At data is processed. In a safety integrity mode processing of encoded data may be performed natively in hardware e.g. redundant data bits comprised within an encoded data word may be processed in parallel with original data bits comprised within the encoded data word . In a high performance mode processing of original data bits in the core processor may be performed in parallel with the processing of extended original data bits in hardware extensions of the core processor.

While method is illustrated and described below as a series of acts or events it will be appreciated that the illustrated ordering of such acts or events are not to be interpreted in a limiting sense. For example some acts may occur in different orders and or concurrently with other acts or events apart from those illustrated and or described herein. In addition not all illustrated acts may be required to implement one or more aspects or embodiments of the disclosure herein. Also one or more of the acts depicted herein may be carried out in one or more separate acts and or phases.

At an operating mode is determined and a data path is selected based thereupon. Based upon the operating mode decision box selects a data path that provides either encoded data or extended original binary data bits to hardware extensions of a core process. Cumulatively steps and allow for the method to encompass two modes of operation a safety integrity mode wherein safety integrity is the main goal of the processor and a high performance mode wherein performance is the main goal of the processor.

In one embodiment the data path may comprise hardware extensions to a CPU core having one or more configurable sub units wherein the one or more sub units may be selectively activated to enable either the safety integrity mode e.g. perform coded processing of the encoded data or the high performance mode e.g. perform processing of extended or multiple original data .

If a high performance mode is chosen the method proceeds to where a software based self test is skipped.

At a data word is provided to a single channel processor core. The data word may be provided to the single channel processor core via an expanded data path. The expanded data path allows for different parts of the data word to be provided to different parts of a single channel processor core e.g. CPU core hardware extensions configured to process data in parallel.

The single channel processor core is configured to process the data word at . In one embodiment the single channel processor core processes the different parts of the data word in parallel e.g. original data and extended original data for performance improvement. In alternative embodiments single instruction multiple data SIMD or multiple instruction multiple data MIMD operations are supported for performance improvement. Therefore either extended or multiple original binary data may be processed in the hardware extension in parallel with processing original data bits in the CPU core in the high performance mode.

If a safety integrity mode is being implemented the method proceeds to wherein encoded data words are processed with hardware extensions while a software based self test SBST is executed in parallel. illustrates a more detailed embodiment of a method for achieving a high safety relevant integrity level using configurable hardware extensions for coded processing and a software based self test SBST 

Method comprises two processes which may operate parallel in time. A coded processing of an encoded data word is performed in a first process . The coded processing comprises processing encoded data words during the normal course of processing and therefore may be performed whenever a system performs processing. A SBST program is executed in a concurrent process . The SBST is performed in the background and may be done periodically in time to test for faults in a processor core.

At an encoded data word is generated. The encoded data word is comprised of an original data portion and a redundant data portion. The encoded data word may be generated by an encoding formula that forms a specific predetermined relationship between the original data and the redundant data.

At the encoded data word is provided to a single channel processor core comprising a CPU core and hardware extensions.

The encoded data word is processed at . In one embodiment the original data portion of the encoded data word is processed by CPU core while the hardware extensions process the redundant data portion of the encoded data word natively in hardware e.g. the processing is done based upon hardware components not relying upon software code .

At the results of the processing are evaluated. The redundant and original data portions of the encoded data word output from the processor are compared to determine if processor faults are present in the CPU core. In one embodiment if the encoded data word output from the single channel processor core has a redundant data portion and an original data portion having the same relationship as the encoded data word input into the single channel processor core the single channel processor core does not have faults. In contrast if the encoded data word output from the single channel processor core has a redundant data portion that does not retain the same relationship with the original data portion as the input encoded data word then faults are present in the single channel processor core.

A self test program is generated at . Development of a test program may be performed during a development stage. The self test program may be developed to take into account the structural architecture of the system to generate a self test program comprising a sequence of instructions that tests a subset of the gates in the single channel processing core.

At the self test program is processed by the single channel processing core. The sequence of instructions is processed by logic functions implemented by the subset of gates to result in a self test response comprising a processed sequence of binary data.

The responses of the self test program are collected at . The CPU core s responses to the executed self test program are returned to a data memory through bus where they are stored.

The results of the test program responses are evaluated at . In one embodiment a checksum algorithm e.g. a cyclic redundancy check CRC is configured to operate on the self test responses to generate a predefined value from the responses. The predefined value is compared to a predefined value generated from the self test data. Unexpected variations between the two predefined values indicate that a fault is present in the processor.

Although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements and or resources the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. In addition the articles a and an as used in this application and the appended claims are to be construed to mean one or more .

Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

