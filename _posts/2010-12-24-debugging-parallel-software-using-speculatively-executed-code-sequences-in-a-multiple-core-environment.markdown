---

title: Debugging parallel software using speculatively executed code sequences in a multiple core environment
abstract: Methods and apparatus relating to debugging parallel software using speculatively executed code sequences in a multiple core environment are described. In an embodiment, occurrence of a speculative code debug event is detected and a speculative code execution debug module is executed in response to occurrence of the event. Other embodiments are also disclosed and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08881106&OS=08881106&RS=08881106
owner: Intel Corporation
number: 08881106
owner_city: Santa Clara
owner_country: US
publication_date: 20101224
---
The present application relates to and claims priority from U.S. Provisional Patent Application No. 61 290 193 filed on Dec. 26 2009 entitled DEBUGGING PARALLEL SOFTWARE USING SPECULATIVELY EXECUTED CODE SEQUENCES IN A MULTIPLE CORE ENVIRONMENT which is hereby incorporated herein by reference in its entirety and for all purposes.

The present disclosure generally relates to the field of computing. More particularly an embodiment of the invention generally relates to techniques for debugging parallel software using speculatively executed code sequences in a multiple core environment.

To improve performance some processors include multiple cores. To utilize the benefits of the multiple cores however software needs to be written to utilize these additional resources. Moreover enabling the development of parallel software which scales well with an increasing number of processing units is one of the key challenges for the success of multi core based processor technologies. Accordingly reliable debugging methods are an important factor for allowing software developers to deploy applications exploiting these hardware capabilities with an expected level of quality and under reasonable time and cost budgets.

In the following description numerous specific details are set forth in order to provide a thorough understanding of various embodiments. However various embodiments of the invention may be practiced without the specific details. In other instances well known methods procedures components and circuits have not been described in detail so as not to obscure the particular embodiments of the invention. Further various aspects of embodiments of the invention may be performed using various means such as integrated semiconductor circuits hardware also referred to as HW computer readable instructions organized into one or more programs software also referred to as SW or some combination of hardware and software. For the purposes of this disclosure reference to logic shall mean either hardware software including for example micro code that controls the operations of a processor or some combination thereof.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment may be included in at least an implementation. The appearances of the phrase in one embodiment in various places in the specification may or may not be all referring to the same embodiment.

Also in the description and claims the terms coupled and connected along with their derivatives may be used. In some embodiments of the invention connected may be used to indicate that two or more elements are in direct physical or electrical contact with each other. Coupled may mean that two or more elements are in direct physical or electrical contact. However coupled may also mean that two or more elements may not be in direct contact with each other but may still cooperate or interact with each other.

Some implementations may avoid physical allocation of a synchronization element also know as a lock and execute a code path speculatively instead. Only in case of conflicts all speculatively created results are discarded and execution falls back to the traditional lock based model. If no conflict occurs the effect of the speculative execution is made visible to the system at once and execution continues as usual. A side effect of this approach is that there may be code paths which would only be executed in this speculative mode. This causes a problem for debugging as the individual instructions and their effect s inside such a code path cannot be observed from the outside for example not by application e.g. ring 3 software debuggers such as like Visual Studio . To this end some embodiments enable debugging of such code paths.

More particularly some of the embodiments discussed herein may provide techniques for debugging parallel software using speculatively executed code sequences in a multiple core environment. In an embodiment occurrence of a speculative code debug event during speculative execution of an application is detected e.g. by a logic within in a processor . In response to occurrence of the speculative code debug event a speculative code execution debug module e.g. by a portion of debugger is executed e.g. to transfer debug control to the speculative code execution debug module.

An Operating System OS and several applications only one is shown are executed on the processor . Any of the applications might have code which use the logic . In case of debugging an application a debugger may control the execution of an application . As shown application may include a speculative code region . If debugging the speculatively executed code path is encountered referred to herein as a speculative code debug event or more generally as a speculative debug event the debugger may use a Speculative Code Execution Debug Module SCE DM .

In an embodiment logic allows a debugger to obtain control over the application if there is a debug event encountered during speculative execution. In one embodiment this debug specific functionality is to be enabled by a debugger explicitly. Furthermore in case of entering a speculative code path under debug the module may be in charge of isolating this code execution from other threads processes of the application . The module may also abort or cause aborting of speculative execution to maintain correctness. This for example includes specifically the creation of an undo log in some embodiments which may allow the restoration to a point prior to occurrence of conflicts. In various embodiments the undo log may be collected by software e.g. in the SCE DM and or by hardware e.g. logic within the processor . In some embodiments Begin SCE may be jumped over since this code path may be executed now non speculatively. Furthermore execution may be moved forward by the debugger until a monitored debug event like a BP is hit again via single step through code while manually building an undo log.

As shown in a user sets a breakpoint BP addr X inside thd scepA speculative code execution path A at item where thd refers to thread . At item thd enters speculative execution while thd is executing any non speculative code. At item BP hits in speculative mode in thd. At item SCE hardware aborts speculative execution due to enable DBinSCE 1 reset RIP to Begin SCE and delivers DB.inSCE to debugger. At item OS delivers a debug exception to the attached debugger. At item Debugger stops all threads of the application and thd leaves speculative execution. At item Thd is stopped. At item Debugger resumes execution only for thd.

At item BP hit occurs in non speculative mode and debug exception is sent to the debugger. At item the flow reaches the end of SCE. At item the debugger resumes thd and thd. As shown the debugger resumes thd after End SCE instruction and discards undo log. No commit of speculative state is necessary as the code was executed non speculatively and therefore the effects of the instructions are already visible.

Referring to at an operation SCE hardware is enabled e.g. via an enable DBinSCE bit stored in a register or a memory device such as those discussed with reference to or including a cache etc. . At an operation one or more instructions are executed. Upon occurrence of a speculative debug event e.g. indicating presence of a speculative code region such as region logic may cause the roll back of the speculative execution path to start of SCE Begin SCE point and may further cause issuance of a regular non speculative debug event e.g. via the OS to the debugger e.g. debugger e.g. instead of aborting the speculative execution and resuming at the abort handler illustrated as Internal Handler Int Handler in .

At an operation the debugger stops the execution of all threads processes of the application being debugged and resumes the execution of only the particular thread corresponding to the operation . If the speculative code path reaches its end the debugger switches back all threads to normal execution . If the speculative code path does not end normally however the debugger rolls back until Begin SCE transfers control to the abort handler and resumes normal execution .

Accordingly some embodiments allow for debugging of arbitrary speculative code sequences for functional correctness. In an embodiment a strict pay as you go model may be used e.g. only actively debugging hit a breakpoint single stepping through it a speculative code path has impact on the runtime behaviour of the application. Further there may not be any special debug builds required and application execution may be unaffected as long as no debug event such as breakpoints or similar events are intercepted by a debugger. Also debug tools do not need to know which code paths are potentially executed speculatively. No debug specific compiler tools enabling may be needed. Moreover at least some embodiments allow for debugging in a live code image environment. Furthermore entering into and exiting out of debugger interaction may be provided without the need to inject system state back and forth between real hardware and any emulation or simulation software. Moreover code may be always executed on real hardware hence there is no need for code instrumentation emulation or simulation.

Additionally switching back to normal execution may be allowed if debugging left speculative code path. Debugging may take place inside a live context. No offline trace or simulation based debugging may be required. At least some embodiments are backward compatible for existing legacy debuggers. Although those non enabled debuggers would not see the speculative code portions at all nor would receiving any debug events issued inside speculative execution this may still allow debugging other code as usual. This may be important since such code path might be buried inside a runtime library. Debugging of speculative code path is transparent to OS and OS debug APIs Application Programming Interfaces . Further no issues may be introduced through provision of some embodiments with OS scheduling of threads or thread migration. Also hardware debug features e.g. as data access breakpoints may remain functional inside speculative regions.

Moreover the computing system may include one or more central processing unit s CPUs or processors that communicate via an interconnection network or bus . The processors may include a general purpose processor a network processor that processes data communicated over a computer network or other types of a processor including a reduced instruction set computer RISC processor or a complex instruction set computer CISC . Moreover the processors may have a single or multiple core design. The processors with a multiple core design may integrate different types of processor cores on the same integrated circuit IC die. Also the processors with a multiple core design may be implemented as symmetrical or asymmetrical multiprocessors. Additionally the processors may utilize an SIMD Single Instruction Multiple Data architecture.

A chipset may also communicate with the interconnection network . The chipset may include a memory control hub MCH . The MCH may include a memory controller that communicates with a memory which may store one or more of the items of . The memory may store data including sequences of instructions that are executed by the processor or any other device included in the computing system . In one embodiment of the invention the memory may include one or more volatile storage or memory devices such as random access memory RAM dynamic RAM DRAM synchronous DRAM SDRAM static RAM SRAM or other types of storage devices. Nonvolatile memory may also be utilized such as a hard disk. Additional devices may communicate via the interconnection network such as multiple CPUs and or multiple system memories.

The MCH may also include a graphics interface that communicates with a display . The display may be used to show a user results of operations associated with the fast division inversion discussed herein. In one embodiment of the invention the graphics interface may communicate with the display via an accelerated graphics port AGP . In an embodiment of the invention the display may be a flat panel display that communicates with the graphics interface through for example a signal converter that translates a digital representation of an image stored in a storage device such as video memory or system memory into display signals that are interpreted and displayed by the display . The display signals produced by the interface may pass through various control devices before being interpreted by and subsequently displayed on the display .

A hub interface may allow the MCH and an input output control hub ICH to communicate. The ICH may provide an interface to I O devices that communicate with the computing system . The ICH may communicate with a bus through a peripheral bridge or controller such as a peripheral component interconnect PCI bridge a universal serial bus USB controller or other types of peripheral bridges or controllers. The bridge may provide a data path between the CPU and peripheral devices. Other types of topologies may be utilized. Also multiple buses may communicate with the ICH e.g. through multiple bridges or controllers. Moreover other peripherals in communication with the ICH may include in various embodiments of the invention integrated drive electronics IDE or small computer system interface SCSI hard drive s USB port s a keyboard a mouse parallel port s serial port s floppy disk drive s digital output support e.g. digital video interface DVI or other devices.

The bus may communicate with an audio device one or more disk drive s and a network interface device which may be in communication with the computer network . In an embodiment the device may be a NIC capable of wireless communication. Other devices may communicate via the bus . Also various components such as the network interface device may communicate with the MCH in some embodiments of the invention. In addition the processor and the MCH may be combined to form a single chip. Furthermore the graphics interface may be included within the MCH in other embodiments of the invention.

Furthermore the computing system may include volatile and or nonvolatile memory or storage . For example nonvolatile memory may include one or more of the following read only memory ROM programmable ROM PROM erasable PROM EPROM electrically EPROM EEPROM a disk drive e.g. a floppy disk a compact disk ROM CD ROM a digital versatile disk DVD flash memory a magneto optical disk or other types of nonvolatile machine readable media that are capable of storing electronic data e.g. including instructions . In an embodiment components of the system may be arranged in a point to point PtP configuration such as discussed with reference to . For example processors memory and or input output devices may be interconnected by a number of point to point interfaces.

As illustrated in the system may include several processors of which only two processors and are shown for clarity. The processors and may each include a local memory controller hub MCH and to couple with memories and . The memories and or may store various data such as those discussed with reference to the memory of such as one or more of the items of .

The processors and may be any suitable processor such as those discussed with reference to the processors of . The processors and may exchange data via a point to point PtP interface using PtP interface circuits and respectively. The processors and may each exchange data with a chipset via individual PtP interfaces and using point to point interface circuits and . The chipset may also exchange data with a high performance graphics circuit via a high performance graphics interface using a PtP interface circuit .

At least one embodiment of the invention may be provided by utilizing the processors and . For example the processors and or may perform one or more of the operations of . Other embodiments of the invention however may exist in other circuits logic units or devices within the system of . Furthermore other embodiments of the invention may be distributed throughout several circuits logic units or devices illustrated in .

The chipset may be coupled to a bus using a PtP interface circuit . The bus may have one or more devices coupled to it such as a bus bridge and I O devices . Via a bus the bus bridge may be coupled to other devices such as a keyboard mouse the network interface device discussed with reference to such as modems network interface cards NICs or the like that may be coupled to the computer network audio I O device and or a data storage device . The data storage device may store code that may be executed by the processors and or .

In various embodiments of the invention the operations discussed herein e.g. with reference to may be implemented as hardware e.g. logic circuitry software including for example micro code that controls the operations of a processor such as the processors discussed with reference to firmware or combinations thereof which may be provided as a computer program product e.g. including a tangible machine readable or computer readable medium having stored thereon instructions or software procedures used to program a computer e.g. a processor or other logic of a computing device to perform an operation discussed herein. The machine readable medium may include a storage device such as those discussed herein.

Additionally such tangible computer readable media may be downloaded as a computer program product wherein the program may be transferred from a remote computer e.g. a server to a requesting computer e.g. a client by way of data signals embodied in tangible propagation medium via a communication link e.g. a bus a modem or a network connection .

Thus although embodiments of the invention have been described in language specific to structural features and or methodological acts it is to be understood that claimed subject matter may not be limited to the specific features or acts described. Rather the specific features and acts are disclosed as sample forms of implementing the claimed subject matter.

