---

title: System and method for generating a point-in-time copy of a subset of a collectively-managed set of data items
abstract: Various systems and methods selectively generate a point-in-time copy of less than all of the data items within a collectively-managed set of data items. One method involves detecting a modification to a first unit of data within a collectively managed set, subsequent to generation of a selective snapshot of the collectively managed set, and then accesses a first tag associated with the first unit of data. Based on a value of the first tag, the method determines whether the first unit of data is included in a subset of the collectively managed set. The subset includes at least two of the units of data and fewer than all of the units of data in the collectively managed set. Based upon whether the unit of data is included in the subset, the method selects whether to preserve an original value of the first unit of data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09111015&OS=09111015&RS=09111015
owner: Symantec Corporation
number: 09111015
owner_city: Mountain View
owner_country: US
publication_date: 20100929
---
This invention relates to the creation of point in time copies of data and more particularly to creating point in time copies of less than all of the available data within a collectively managed set of data.

A point in time copy of data which can also be referred to as a snapshot is a copy of a particular set of data as that set of data existed at a discrete point in time. A point in time copy can be created in a manner that requires reduced downtime of the data being copied. For example a point in time copy can initially just refer e.g. using logical structures such as pointers bitmaps and the like to the set of data being copied. As that set of data is subsequently modified the pre modification values can be copied to the point in time copy prior to being overwritten. Since such point in time copies can be created relatively quickly point in time copies can be used as the source of operations such as backups indexing and virus scanning in order to reduce the amount of time to which access to the original set of data needs to be restricted.

Most techniques for generating point in time copies operate on an entire logical data set such as a volume or file system. Accordingly these techniques do not allow point in time copies to be made of less than the entire data set.

Various systems and methods for selectively generating a point in time copy of less than all of the data items within a collectively managed set of data items are disclosed. One such method involves detecting a modification to a first unit of data within a collectively managed set of data subsequent to generation of a selective snapshot of the collectively managed set of data. The method then accesses a first tag associated with the first unit of data. The first tag identifies one or more of several subsets of the collectively managed set of data. Based on a value of the first tag the method determines whether the first unit of data is included in a subset of the collectively managed set of data. The subset includes at least two of the units of data and fewer than all of the units of data in the collectively managed set of data. Based upon whether the unit of data is included in the subset the method selects whether to preserve an original value of the first unit of data. The original value is a value of the first unit of data at a point in time at which the selective snapshot was generated. The act of selecting is performed by a computing device implementing a selective snapshot module.

In some embodiments the collectively managed set of data is an object storage device and the first unit of data is an object. In other embodiments the collectively managed set of data is a file system and the first unit of data is a file.

In one embodiment the method also detects that a new file is being added to a directory within the file system and associates the new file with a tag. The directory is associated with the tag prior to detection that the new file is being added.

If it is determined that the first unit of data is not included in the subset the act of selecting can involve selecting to not preserve the original value of the first unit of data. If it is determined that the first unit of data is included in the subset the act of selecting can involve selecting to preserve the original value of the first unit of data.

In some embodiments the act of determining can involve comparing a value of the first tag to a value of a second tag. The second tag is associated with the selective snapshot.

An example of a system can include one or more processors and memory coupled to the processors. The memory stores program instructions executable to perform a method like the one described above. Similarly such program instructions can be stored upon a computer readable storage medium.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail consequently those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects inventive features and advantages of the present invention as defined solely by the claims will become apparent in the non limiting detailed description set forth below.

While the invention is susceptible to various modifications and alternative forms specific embodiments of the invention are provided as examples in the drawings and detailed description. It should be understood that the drawings and detailed description are not intended to limit the invention to the particular form disclosed. Instead the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims.

In this example computing device implements several applications and . Each application can be any of a variety of different types of software programs including programs that act as servers e.g. database management systems file servers email servers and the like and programs that act as clients e.g. email clients web browsers backup clients and the like . Application can alternatively be a stand alone user level program e.g. a document processing application a graphics editing program a media player or the like . Applications and can access files in order to display edit execute or otherwise process those files.

Computing device also implements a file system . File system is a software program that organizes and controls access to files which are stored on a block device e.g. a volume such as storage device . File system can maintain metadata that identifies each file including directories which are special files that can act as containers for one or more other files as well as each file s location on a storage device each file s size and other information such as the file s creation time most recent access time and the like. Such information is maintained in an inode structure for certain types of files systems.

The term file system can refer to both the application which itself can be part of an operating system that organizes the files and the collection of files that are organized by that application. Files can be organized hierarchically with directories collecting groups of files and or other directories.

In this example files include several files which are organized into four directories Directory A Directory B Directory C and Directory D. Directory A includes two files File A and File B. Directory B includes one file File C. Directory C includes one file File D. Directory D includes one file File E. It is noted that this is a simplified example and that other embodiments can include far more complex organizational schemes with a greater number of files and or directories than are shown here.

Computing device implements a snapshot module . Snapshot module is configured to generate snapshots of data stored on storage device . Each snapshot is generated using a space efficient technique such as copy on write COW or redirect or divert on write ROW . Such techniques allow snapshots to be generated quickly without needing to initially make copies of all of the data represented in the snapshot as described in more detail below.

To generate a snapshot snapshot module initially freezes access to files organized by file system by locking access to the files . Once all of the outstanding accesses to the files have completed and new access is blocked the file system is said to be frozen. At this point in time snapshot module generates a space efficient snapshot. Initially at the time of creation this snapshot only stores metadata that maps the data in the snapshot to the original data stored on storage device . Such a snapshot is space efficient in that less space is required to store the snapshot than is required to store the data represented by the snapshot.

Once the snapshot has been generated snapshot module unfreezes access to the file system. To maintain the snapshot as a point in time copy of files at the time that the snapshot was generated snapshot module detects all subsequent requests to modify files e.g. as generated by applications and or and before those modifications are applied to files preserves the original value being modified in the snapshot. For example snapshot module can detect a request to write to a portion of one of files . Prior to allowing the write to be performed snapshot module can perform a copy on write action to copy the original value of the portion of the file being modified to the snapshot thus preserving the original value in the snapshot. Alternatively snapshot module can perform a redirect write action to redirect the write to another location such that the original value is preserved in its original location.

In some embodiments whenever a snapshot is created the snapshot includes a snapshot inode for each file included in the snapshot. Initially these snapshot inodes simply refer to the corresponding inode for the appropriate file. If a file is subsequently modified and COW techniques are used to generate the snapshot the original value of the file can be moved to the snapshot inode for that file. When a user reads from a snapshot the read will either be redirected to files e.g. if the snapshot inode still simply refers to the corresponding inode indicating that the file has not been modified since the snapshot was generated or will retrieve the value stored in the snapshot inode e.g. if the file has been modified since the file was generated .

Snapshot module includes a selective snapshot module which is configured to generate a snapshot of less than all of the units of data e.g. files in a collectively managed set of data such as the file system that includes files . To do this selective snapshot module uses tags associated with each file as well as one or more tags associated with a request to generate a snapshot. By comparing these two sets of tags the tag s in the request and the tag s associated with the files selective snapshot module determines whether upon being modified subsequent to generation of the requested snapshot the original value of a portion of a value will be preserved or not. Accordingly selective snapshot module can include some but not all of the files within the snapshot by selecting which files are preserved in the snapshot. In general a selective snapshot preserves more than file but fewer than all files within a file system.

In the example of certain files are associated with certain tags. Directory A File File Directory D and File E are associated with Tag . Directory B File C Directory D and File E are associated with Tag . Some files like Directory C and File D are not associated with any tags. Other files like Directory D and File E are associated with multiple tags. Each tag can be a set of one or more bits or a more complex data structure such as a text string or set of alphanumeric characters. Each tag identifies one or more subsets of data.

The tags can be generated by a user including a human user such as an administrator or an application. These tags can be specified by interacting with an interface e.g. a command line interface application programming interface graphical user interface or the like provided by file system or selective snapshot module . The tags can be stored by file system as part of the metadata associated with files . For example the tag s assigned to a particular file can be stored as part of the inode corresponding to that file.

The tags can be assigned using a variety of different criteria. For example in some embodiments tags can be assigned to differentiate among files processed by different applications. Thus all of the files processed by application could be assigned Tag and all of the files processed by application could be assigned Tag . In some embodiments tags are assigned to identify files that are used by different users or groups of users. For example within a corporation Tag could identify a sales group while Tag identifies a finance group. A variety of different criteria e.g. relating to permissions or ownership creation time application users and the like can even be used within the same embodiment. In some embodiments once a user has assigned a tag to one file related files e.g. files within the same directory as the tagged file the directory including the tagged file and so on can also be assigned the same tag automatically by file system and or selective snapshot module .

In some embodiments once an initial set of tag assignments has been made selective snapshot module can maintain the tags as new files are added to the file system. Thus if a new file is added to a directory selective snapshot module can automatically assign the tag s associated with the directory to the new file.

Whenever a request for a snapshot is received selective snapshot module can parse the request to see if any tags are associated with the request. The inclusion of a tag with the request indicates that a selective snapshot as opposed to a conventional full snapshot is being requested. The tag s associated with the request can indicate which files must be included within the selective snapshot and or which files must be excluded from the selective snapshot.

By only preserving certain files selective snapshot module preserves only those files that a user desires to include in the snapshot and does not waste storage space or processing cycles preserving unwanted values. In at least some embodiments that use inodes the selective snapshot can include snapshot inodes for only those files being preserved in the selective snapshot.

For example the request can indicate that all files associated with Tag and no Files associated with Tag should be included in the selective snapshot. In that situation selective snapshot module would preserve the original values at the time that the snapshot is generated of Directory A and Files A and B within the snapshot e.g. using COW or ROW techniques but would not preserve any other values.

As another example the request could specify that all files not associated with Tag should be included in the selective snapshot. In this situation selective snapshot module would preserve the original values at the time that the snapshot is generated of Directories A and C and Files A B and D but would not preserve any other values.

As shown in a set of three snapshots and have been generated of files and stored on storage device . The first snapshot was generated at time T and was not a selective snapshot. Accordingly snapshot will preserve the original values at T of all of files .

The second snapshot was generated at time T and includes all files associated with Tag . Accordingly files that are not associated with Tag will not be preserved in this snapshot.

The third snapshot was generated at time T and includes all files associated with Tag or Tag . This snapshot will preserve the original values at T of all files other than Directory C and File D since all of the other files are associated with at least one of Tag or Tag .

In alternative embodiments instead of having various different values of the tags the tags can be implemented as simple flags. One value of the flag indicates that the associated file should be preserved in selective snapshots while the other value of the flag indicates that the associated file should not be preserved in selective snapshots. The request to generate a snapshot can similarly include a simple flag indicating whether the snapshot being requested is a selective snapshot.

A user e.g. such a backup application can access a snapshot by mounting that snapshot and then reading and writing to that snapshot. In the case of a selective snapshot not all files are preserved within the snapshot. If a user attempts to read a file that was not preserved from the selective snapshot selective snapshot module can return an error message and or the current non snapshot value of that file.

In general a selective snapshot module such as that shown in can be used to generate selective snapshots of some but not all of the units of data e.g. files logical objects and the like in a collectively managed set of data such as a file system. For example such a selective snapshot module can be used to generate selective snapshots of some but not all of the files in a file system as illustrated in . As another example a selective snapshot module can be used to generate selective snapshots of some but not all of the objects as identified by object identifiers or OIDs in an object storage device. When used with object storage devices the tag s assigned to a given object can be linked to that object s OID.

The method begins at when a request to generate a snapshot of a collectively managed set of units of data such as a file system or object storage device is received. This request can be received from another application e.g. a backup application and or from an administrator. If the request is a request for a selective snapshot the request will include one or more tags as detected at .

If the request does not include any tags and thus simply requests a conventional snapshot of all of the units of data in the collectively managed set of data the snapshot module will generate a conventional snapshot as shown at . This snapshot will preserve the values of all of the units of data at the time that the snapshot was generated.

If the request does include one or more tags and thus requests a selective snapshot the snapshot module will create a space efficient snapshot of at least the units of data indicated as being desired in the request as shown at . The desired units of data can be identified based upon the tag s associated with the request the tag s associated with the units of data and in some embodiments based upon how the request is specified. For example the request can specify a rule such as preserve all files with Tag X or preserve all files with Tag X but not Tag Y or preserve all files except those with Tag Y. Alternatively a rule e.g. must preserve or must not preserve can be predefined for all requests and the request can simply specify the tag s to input to that rule.

After the snapshot is generated at the snapshot module will selectively preserve only the values of those units of data indicated as being desired in the request. Thus when a modification to a unit of data within the collectively managed set of data is detected the snapshot module will determine based upon the tag s associated with the request and the tag s if any associated with the unit of data being modified whether to preserve the pre modification value of that unit of data in the selective snapshot.

Thus at the snapshot module detects a modification to a unit of data. The snapshot module then compares the tag s if any associated with that unit of data to the tag s included in the request. Based upon the rule being used and the outcome of the comparison the snapshot module determines whether that unit of data is being preserved in the selective snapshot or not as indicated at . If the unit of data is being preserved the snapshot module will preserve the pre modification value of that unit of data i.e. the value of that unit of data at the time that the snapshot was generated before allowing the modification to be performed as indicated at . Otherwise the snapshot module will simply allow the modification to be performed and will not preserve the original value of that unit of data as indicated at . Operations and or can be repeated until the selective snapshot is deleted.

The method begins at when user input e.g. from an administrator and or application is received. The user input specifies the initial tag assignments for one or more units of data within the collectively managed set of data. These assignments indicate the tag s if any to be assigned to each unit of data.

Information associating each tag with one or more units of data to which that tag has been assigned is then stored. For example each tag assigned to a particular file can be stored in that file s inode. Alternatively each tag assigned to a logical object can be linked to that logical object s OID.

After the initial assignments have been made new units of data may be added to the collectively managed set of data as detected at . In response to detecting that a new unit of data has been created the tag s if any associated with one or more related units of data can be automatically assigned to the new unit of data as indicated at . For example if a new file is created in a directory in a file system that new file can be assigned the same tags that are assigned to the directory that contains the file. Likewise a new file can be assigned the same tags as other files within the same directory. A new unit of data can also be assigned a tag automatically based upon which application and or user created the unit of data.

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the embodiments described and or illustrated herein. For example processor may perform and or be a means for performing all or some of the operations described herein. Processor may also perform and or be a means for performing any other operations methods or processes described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation random access memory RAM read only memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device and or L2 cache as described in detail below . In one example program instructions implementing a selective snapshot module may be loaded into system memory .

In certain embodiments computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure . In certain embodiments memory controller may perform and or be a means for performing either alone or in combination with other elements one or more of the operations or features described and or illustrated herein.

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Serial Advanced Technology Attachment SATA Serial Attached SCSI SAS and external SATA eSATA host adapters Advanced Technology Attachment ATA and Parallel ATA PATA host adapters Fibre Channel interface adapters Ethernet adapters or the like.

Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may each include a magnetic disk drive e.g. a so called hard drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system . A storage device like primary storage device can store information such as files of or snapshots of as described above.

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in .

Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable storage medium. Examples of computer readable storage media include magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. CD or DVD ROMs electronic storage media e.g. solid state drives and flash media and the like. Such computer programs can also be transferred to computing system for storage in memory via a network such as the Internet or upon a carrier medium.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the embodiments described and or illustrated herein. Additionally or alternatively one or more of the embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an application specific integrated circuit ASIC adapted to implement one or more of the embodiments disclosed herein.

Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a wide area network WAN a local area network LAN a personal area network PAN or the Internet. In one example client systems and or and or servers and or may include a selective snapshot module as shown in .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent network attached storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers and may also be connected to a storage area network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between multiple storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

In some examples all or a portion of the computing devices in and may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In addition one or more of the components described herein may transform data physical devices and or representations of physical devices from one form to another. For example a selective snapshot module in may transform behavior of a computing device in order to cause the computing device to generate snapshots of more than two but fewer than all of the units of data included within a collectively managed set of data.

Although the present invention has been described in connection with several embodiments the invention is not intended to be limited to the specific forms set forth herein. On the contrary it is intended to cover such alternatives modifications and equivalents as can be reasonably included within the scope of the invention as defined by the appended claims.

