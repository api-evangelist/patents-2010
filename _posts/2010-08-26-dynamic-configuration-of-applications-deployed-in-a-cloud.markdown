---

title: Dynamic configuration of applications deployed in a cloud
abstract: A system is provided to deploy a computing application in a cloud using a service provider interface. The system comprises a configuration request detector, a configuration object retriever, and a configuration installer. The configuration request detector receives, at a computer system provided within a virtualization service, a configuration request. The configuration object retriever retrieves a configuration object in response to the configuration request. The configuration installer uses the configuration object, to automatically install a configuration associated with the configuration object to produce a second version of the computing application. The second version of the computing application provides additional features or services according to the definition of the configuration object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08676939&OS=08676939&RS=08676939
owner: Adobe Systems Incorporated
number: 08676939
owner_city: San Jose
owner_country: US
publication_date: 20100826
---
This disclosure relates generally to the technical fields of software and or hardware technology and in one example embodiment to system and method to dynamically configure a computing application deployed in a cloud.

The approaches described in this section could be pursued but are not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated herein the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.

The phrase cloud computing refers to an architectural paradigm in which computation is moved from local servers to a remote service that provides computation as a commodity or utility. A cloud is typically a large collection of shared commodity computation resources that can be interchangeably provisioned in response to clients computation requests. Cloud computing is frequently used in software as a service SaaS application architectures and may be viewed as an implementation choice for application deployment that leverages shared resources and improved cost structure of the cloud. A cloud computing approach may be used to implement a variety of computational paradigms such as virtual machines jobs remote procedure calls traditional servers etc.

In the following detailed description numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances methods apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.

Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here and generally considered to be a self consistent sequence of operations or similar signal processing leading to a desired result. In this context operations or processing involve physical manipulation of physical quantities. Typically although not necessarily such quantities may take the form of electrical or magnetic signals capable of being stored transferred combined compared or otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to such signals as bits data values elements symbols characters terms numbers numerals or the like. It should be understood however that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout this specification discussions utilizing terms such as processing computing calculating determining or the like refer to actions or processes of a specific apparatus such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification therefore a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals typically represented as physical electronic or magnetic quantities within memories registers or other information storage devices transmission devices or display devices of the special purpose computer or similar special purpose electronic computing device.

A computing application also referred to as merely an application may be made available to users by deploying the application on one or more virtual instances of a machine running in a cloud i.e. within a public or a private virtualization space. A virtualization space also referred to as a cloud may be provided by different providers. A computing application may be launched in a cloud by instructing the cloud provider to access one or more machine images containing the application description and load the one or more machine images onto the physical machines provided by the cloud provider and make it accessible to the user via a network. A machine image is a read only boot image that is used for launching an instance of a virtual machine running one or more components of the requested computing application. One or more machine images representing a computing application may be provided to a network storage system e.g. Amazon S3 by a control server also referred to as a controller .

A system that provisions and manages a computing application hosted on one or more virtual instances of a machine may be referred to as a hosted service system. A hosted service system may be configured to provide automated administration of a computing application replacing the administration tasks that would otherwise be performed by the customer when running in an on premise production deployment. The technology within an example hosted service system may hide the behavior of the underlying virtualization service and provide instances of a computing application that are substantially indistinguishable e.g. in terms of reliability security and performance from local on premise deployments of the computing application. For example a hosted service system may provision and manage computing applications such as a generic content server Adobe LiveCycle Enterprise Suite ES and Adobe ConnectPro offered by Adobe Systems Incorporated etc. While embodiments of the smart scheduler are described with reference to Amazon EC2 service other virtualization services may be utilized.

In operation a user can access a provider s web site and request to launch a computing application that can be deployed remotely on a plurality of virtual instances of a machine in a cloud such that the user no longer is required to deploy the computing application locally within their own data center on their own hardware. A request may be triggered by a user e.g. by activating a visual control such as a Start button presented on a web page.

A generic or basic version of a computing application may be packaged as a machine image and stored at a network storage system. In a cloud environment it may be desirable to allow dynamic configurability of a computing application such that a great number of servers running the computing application can be started and stopped without additional pre configuration or re configuration. In one embodiment a configuration file also referred to as a configuration object that contains configuration instructions may be handled by a cloud based computing application e.g. a cloud based content server in the same manner as any other content. For example a content server deployed in a cloud may store a configuration file and then can permit a user to request that this configuration is installed to enhance the basic version of the content server with additional features. A configuration file or configuration object may comprise executable code and descriptive metadata configuration metadata . The configuration metadata could specify the hardware requirements needed the additional services required for the configuration to operate or could provide other initialization information required for the code that is being loaded.

When a new instance of a content server is started in a cloud it can be pointed at an existing configuration object to be used that defines the set of services that the new content server will provide both services for external clients and background services .

In one example embodiment a computing application e.g. a content server may be generated such that the generic portion of the application is distinct from a service provider interface layer and yet may be provided together with the service provider interface layer. The service provider interface layer may include interfaces for different implementations of a virtualization service. Based on the particular implementation that is being used for launching the computing application in a cloud the appropriate interface from the service provider interface layer is accessed and launched in order to permit interfacing between the computing application and cloud specific services. A particular implementation of a virtualization service may include a particular implementation of a database service a particular implementation of a file system service and a particular implementation of a queue service. The interface for a particular virtualization service provider may thus include an interface for that database service an interface for that file system service and an interface for that queue service. This approach may be utilized beneficially with a configuration mechanism where a generic version of a content server deployed in a cloud can obtain and install another configuration that may provide users with additional features or services. A diagrammatic representation of a computing application configured to access cloud specific services via a service provider interface SPI is shown in .

As shown in interfaces that permit a generic content server to access a cloud specific database a cloud specific file system and a cloud specific job queue comprise a metadata SPI a content store SPI and a job queue SPI . The metadata SPI permits access to a database the content store SPI permits access to a file system and the job queue SPI permits access to a job queue . The generic content server is shown to be in communication with a client library computer system . Each of the database the file system and the job queue may be provided on the same cloud as the generic content server and its associated SPIs or off the cloud at a third party computer system. Also shown in is a configuration manager that may be configured to receive and process requests related to storing installing updating or deleting a configuration object.

An example architecture within which method and system to provision in a cloud a computing application and an associated service provider interface may be implemented is described with reference to an architecture diagram illustrated in . The architecture may include a client computer system and a hosted service system . In one example embodiment the hosted service system is to provision and manage an enterprise SaaS product utilizing a cloud based computing service as a virtualization infrastructure. Cloud based computing services as shown in are provided by a virtualization service host and a network storage service . In one embodiment a hosted service system utilizes Amazon Elastic Compute Cloud EC2 service as a virtualization service and Amazon Simple Storage Service Amazon S3 as a network storage service. In some embodiments the hosted service system may utilize more than one virtualization service host e.g. one host being Amazon EC2 and another host provided by Adobe Systems Incorporated. The client computer system and the hosted service system may be in communication with each other via a communications network that may be a public network e.g. the Internet .

The virtualization service host may load a server computer system onto a cloud. The server computer system may be accessed by the client via a browser application . As mentioned above a user in control of the client computer system may send a request to the hosted service system to load the server computer system . The request may be initiated via a user interface provided by the hosted service system to the client computer system via the browser application .

The user interface in one embodiment provides both an end user s and a system administrator s view of the server computer system and also permits issuing control operations to the server computer system and permits viewing the resulting changes in the state of the server computer system . For example where a computing application provided by the server computer system is a content server an end user may manipulate various electronic forms. The user interface may also serve as a source of information for the hosted service system including documentation downloads and support. The user interface in one embodiment uses Adobe Flex software offered by Adobe Systems Incorporated as the user interface technology for the implementation of the user interface. The user interface in one embodiment uses an XML Extensible Markup Language based representational state transfer REST style secure communications protocol to synchronize its operations with a control server . A request to access the user interface may be authenticated using one of a variety of authentication techniques.

The request from the client computer system to load the server computer system is received at the control server which responds to the request by activating an access interface provided by the virtualization service host . The control server in one example embodiment provides coordination between the components of the architecture provides administration and monitoring of the virtualization service host and also may be configured to audit system usage and resource allocation with respect to the server computer system . The control server includes a database to store information pertaining to various aspects of system usage. The control server in one embodiment runs within a standard Hypertext Transfer Protocol Secure HTTPS compliant web server and may be deployed as a publically accessible web application that is available outside a firewall. The control server in one embodiment is implemented using Ruby on Rails technology.

The virtualization service host accesses the storage of the network storage system to obtain one or more machine images in order to load the associated server computer system . The machine images can be uploaded to the network storage system by the control server utilizing an access interface provided with the network storage system . The hosted service system further includes a secure networking client to provide a bidirectional encrypted compressed connection between a machine in the end user s secure network environment e.g. the client computer system and one or more instances of a virtual machine running within the virtualization infrastructure the server computer system . The networking client manages various aspects of transmission control protocol TCP traffic forwarding encryption and network discovery such that the user can access the server computer system as if it was running locally on the user s machine. In this mode the user s network security envelope is extended to surround the server computer system using comparable levels of encryption and protection against network security threats.

In one example embodiment the server computer system hosts a computing application e.g. a content server that is equipped with a configuration manager . The configuration manager may be used to receive requests to store or access configuration objects as well as perform other configuration related tasks as is described further below with reference to and . A configuration module may be provided at the control server and may be used to generate and maintain configuration objects. Some components of the server computer system that may be launched in a cloud are described with reference to .

As shown in the method commences with operation where the configuration request detector of receives a configuration request the computer system executing a first version of a computing application. At operation the configuration object retriever of retrieves a configuration object in response to the configuration request. The configuration object may comprise executable code and metadata. At operation the configuration installer of automatically using the configuration object installs a configuration associated with the configuration object to produce a second version of the computing application. The second version of the computing application running within the virtualization service may provide additional features or services according to the definition of the configuration object.

The example computer system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a user interface UI cursor control device e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit includes a computer readable or machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media.

The software may further be transmitted or received over a network via the network interface device utilizing any one of a number of well known transfer protocols e.g. Hyper Text Transfer Protocol HTTP .

While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention or that is capable of storing or encoding data structures utilized by or associated with such a set of instructions. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media. Such medium may also include without limitation hard disks floppy disks flash memory cards digital video disks random access memory RAMs read only memory ROMs and the like.

Thus method and system to install a configuration for a computing application deployed in a cloud have been described. Example approaches described herein may be utilized beneficially with a variety of computing applications such as. e.g. content servers and cloud management systems.

The embodiments described herein may be implemented in an operating environment comprising software installed on a computer in hardware or in a combination of software and hardware. Although embodiments have been described with reference to specific example embodiments it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the invention. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

