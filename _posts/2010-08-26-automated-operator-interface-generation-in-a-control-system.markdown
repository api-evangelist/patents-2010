---

title: Automated operator interface generation in a control system
abstract: System(s), device(s), and method(s) provide automated configuration of operator interface(s) in an industrial control system, the automated configuration is based at least on control logic that regulates a process and associated equipment in an industrial environment. A terminal that renders control data can acquire the control logic and associate a set of control data structures therein to one or more display objects, which can be retained in a set of libraries stored in the terminal. Based at least on the association, the terminal automatically generates a rendering project that can render an operator interface that conveys control data according to the control logic. A mapping enables association amongst a control data structure and a display object; the mapping can include relationships amongst display objects for numerous domains of industrial control. The operator interface can be refined autonomously or through external data received at the terminal and associated with predetermined event(s).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09182755&OS=09182755&RS=09182755
owner: ROCKWELL AUTOMATION TECHNOLOGIES, INC.
number: 09182755
owner_city: Mayfield Heights
owner_country: US
publication_date: 20100826
---
The subject disclosure relates to automation control and more specifically to automated configuration of operator interface s in an industrial control system the automated configuration is based at least on control logic.

Industrial control systems regulate operation of equipment in an industrial environment where operation of the equipment includes process es typically directed to accomplishment of a complex task or a streamlined automated task such as large scale manufacturing. Regulation of operation of the equipment and related process es typically exploits and produce substantive amounts of control data which include configuration data such as controller code human machine interface HMI data process recipe s and report definitions or the like. In addition operation of industrial control systems also produces both real time and historical data about the status of regulated equipment and related process es the data including alarms process values and audit error logs. To operate industrial control systems various HMIs in the industrial environment render control data real time or last known and historical data through operator interfaces which convey process overviews or equipment detail. Multiple operator interfaces are created to provide rich information related to the various control processes implemented in the industrial control system so that the operator can switch between them to monitor various aspects of the equipment and related process es under control. Various factors contribute to the time and human resources necessary to configure operator interface s employed to render control data in an industrial environment such factors include complexity of the equipment and related process es that are regulated through one or more controllers amount of control data collected as part of controlling the equipment and the related process es and security protocols and associated data necessary to ensure operational integrity of the equipment. Yet in conventional industrial control systems development of an operator interface to consume control data through a dedicated human machine interface HMI is a highly manual process that generally occurs after control design or equipment configuration and contributes significantly to the development cost.

The following presents a simplified summary in order to provide a basic understanding of some aspects of the subject disclosure. This summary is not an extensive overview and it is not intended to identify key critical elements of the subject disclosure or to delineate any scope. The sole purpose of this summary is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

One or more embodiments in the subject disclosure provide automated configuration of operator interface s in an industrial control system. The automated configuration is based at least on control logic that regulates a process and associated equipment in an industrial environment. A terminal that renders control data can acquire the control logic and associate a set of control data structures therein to one or more display objects which can be retained in a set of libraries stored in the terminal. Based at least on the association the terminal automatically generates a rendering project that can render an operator interface that conveys control data according to the control logic. A predetermined mapping enables association amongst a control data structure and a display object the mapping can include relationships amongst display objects for numerous domains of industrial control. The operator interface can be refined autonomously or through external data received at the terminal.

By leveraging control data structures available to represent control logic the one or more embodiments of the subject disclosure provide various efficiencies with respect to conventional control systems In particular though not exclusively visualization development is simplified and likelihood of error due to human intervention is significantly mitigated costs associated with visualization development can be reduced substantially. It should be appreciated that while various aspects or features of the subject disclosure are described in connection with a terminal e.g. a workstation a desktop computer a mobile computer a smartphone that embodies a human machine interface HMI and can render control data such aspects or features described herein also can be implemented or accomplished in control systems in which dedicated human machine interfaces HMIs are employed to render control data. In addition certain embodiments in the subject disclosure enable implementation of various aspects or features in legacy HMIs or HMIs of limited complexity.

To the accomplishment of the foregoing and related ends certain illustrative aspects of the disclosed innovation are described herein in connection with the following description and the annexed drawings. These aspects are indicative however of but a few of the various ways in which the principles disclosed herein can be employed and is intended to include all such aspects and their equivalents. Other advantages and novel features will become apparent from the following detailed description when considered in conjunction with the drawings.

The subject disclosure is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding thereof. It may be evident however that the subject disclosure can be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate a description thereof.

As used in this application the terms component system platform layer controller terminal station node interface are intended to refer to a computer related entity or an entity related to or that is part of an operational apparatus with one or more specific functionalities wherein such entities can be either hardware a combination of hardware and software software or software in execution. For example a component can be but is not limited to being a process running on a processor a processor a hard disk drive multiple storage drives of optical or magnetic storage medium including affixed e.g. screwed or bolted or removably affixed solid state storage drives an object an executable a thread of execution a computer executable program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and or thread of execution and a component can be localized on one computer and or distributed between two or more computers. Also components as described herein can execute from various computer readable storage media having various data structures stored thereon. The components may communicate via local and or remote processes such as in accordance with a signal having one or more data packets e.g. data from one component interacting with another component in a local system distributed system and or across a network such as the Internet with other systems via the signal . As another example a component can be an apparatus with specific functionality provided by mechanical parts operated by electric or electronic circuitry which is operated by a software or a firmware application executed by a processor wherein the processor can be internal or external to the apparatus and executes at least a part of the software or firmware application. As yet another example a component can be an apparatus that provides specific functionality through electronic components without mechanical parts the electronic components can include a processor therein to execute software or firmware that provides at least in part the functionality of the electronic components. As further yet another example interface s can include input output I O components as well as associated processor application or Application Programming Interface API components. While the foregoing examples are directed to aspects of a component the exemplified aspects or features also apply to a system platform interface layer controller terminal and the like.

As used herein the terms to infer and inference refer generally to the process of reasoning about or inferring states of the system environment and or user from a set of observations as captured via events and or data. Inference can be employed to identify a specific context or action or can generate a probability distribution over states for example. The inference can be probabilistic that is the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher level events from a set of events and or data. Such inference results in the construction of new events or actions from a set of observed events and or stored event data whether or not the events are correlated in close temporal proximity and whether the events and data come from one or several event and data sources.

In addition the term or is intended to mean an inclusive or rather than an exclusive or. That is unless specified otherwise or clear from the context the phrase X employs A or B is intended to mean any of the natural inclusive permutations. That is the phrase X employs A or B is satisfied by any of the following instances X employs A X employs B or X employs both A and B. In addition the articles a and an as used in this application and the appended claims should generally be construed to mean one or more unless specified otherwise or clear from the context to be directed to a singular form.

Furthermore the term set as employed herein excludes the empty set e.g. the set with no elements therein. Thus a set in the subject disclosure includes one or more elements or entities. As an illustration a set of controllers includes one or more controllers a set of data resources includes one or more data resources etc. Likewise the term group as utilized herein refers to a collection of one or more entities e.g. a group of nodes refers to one or more nodes.

Various aspects or features will be presented in terms of systems that may include a number of devices components modules and the like. It is to be understood and appreciated that the various systems may include additional devices components modules etc. and or may not include all of the devices components modules etc. discussed in connection with the figures. A combination of these approaches also can be used.

Based on control logic in the control environment automated configuration block automatically e.g. without manual intervention provisions one or more operator interfaces in the rendering environment . Automatic provisioning can be effected in response to a predetermined event or input e.g. data received from an operator. The one or more operator interfaces enable at least in part rendering of information associated with equipment and associated process es regulated through the control logic e.g. automation control logic. To provision an operator interface automated configuration block extracts at least a portion of a control data structure associated with control code that represents control logic and associates at least the portion of the control data structure to one or more graphical data objects. The one or more graphical data objects can be included in a rendering project that when implemented produces the operator interface. Such association amongst a control data structure or a portion thereof with a graphical display object also can be effected with any or most any rendering content other than the graphical data object for instance the control data structure can be associated with a gesture data object. Implementation of the rendering project can be accomplished through execution of the rendering project. It should be appreciated that the automated configuration block can associate a control data structure or a portion thereof to a graphical data object for each instance of the control data structure in control code that represents control logic e.g. automation control logic. In an aspect for example a graphical data object can include e.g. via encapsulation an icon an animated image a sound file or other aural indicia a screen or display a faceplate a navigation panel or the like.

In an aspect of the subject disclosure automated configuration block can supply an operator interface in response to generation of control logic or modification of extant control logic. In another aspect automated configuration block can provide an operator interface in response to occurrence of a predetermined event for instance a predetermined event can be elapsing a timer attaining a specific time in a schedule configuring equipment repairing or maintaining equipment or repairing or maintaining one or more of a controller in control environment a device in control environment or an interface in control environment . In an illustrative scenario if maintenance is effected in the control environment or in equipment regulated therefrom the automated configuration block can produce one or more operator interfaces that are based on extant control logic and specific maintenance or repairs that are performed.

Automated configuration block can couple control environment and rendering environment in accordance with various scenarios. The coupling can be homogeneous wherein automation configuration block couples a design in control environment and design in rendering environment or b runtime in control environment to runtime in rendering environment . The coupling also can be heterogeneous wherein automation configuration block couples A runtime in control environment and design in rendering environment or B design in control environment and runtime in rendering environment . Based on the coupling a bottom up environment for development of control environment and rendering environment is afforded by the automated configuration block as described herein As control environment is developed e.g. one or more controllers are installed device s such as sensors are deployed or control code is generated or updated the rendering environment can be developed either separately and then adjusted to suit the control environment or in response to development of the control environment at design or runtime.

In contrast to conventional systems automated configuration block can provision the one or more operator interfaces without manual intervention and irrespective of complexity of the control logic. Accordingly at least one advantage of the subject disclosure is reduction of time and cost of development of operator interface s for specific control logic e.g. automation control logic.

Service network s can comprise network s for communication of data that includes various data structures related to management data graphic data or control data control logic or metadata related to one or more variables. In an aspect metadata can be part of control data structures for example. In another aspect metadata also can be included within a rendering project to dictate at least in part various features of an operator interface that is rendered in response to execution of the rendering project. As an example metadata in a rendering project can dictate location or placement of a specific graphical data object. As another example metadata also can dictate usage or selection of graphical data objects based on visualization requirements of or visualization resources available to a terminal e.g. that renders an operator interface through execution of a rendering project that includes such metadata. As yet another example metadata in a rendering project also can dictate at least in part usage of a graphical data object based on a security clearance or security configuration of terminal that renders an operator interface through execution of the rendering project.

Control network s primarily administer control data and data transactions related to a control environment e.g. . Distinction amongst service network s and control network s can enable improved integration of various functional elements within the control environment For example different parts of the control environment can be linked through custom or legacy control network s while exchange of information amongst the control environment and other network elements such as a server in an enterprise network e.g. back end system can be implemented through non proprietary service network s such as an Ethernet network. It should be appreciated that in one or more embodiments the service network s and the control network s are both embodied in the same physical network.

Controller is part of a control environment e.g. within the control system and includes a control platform that enables the controller to regulate equipment e.g. and associated process es in accordance with control code retained in control logic storage also referred to as control logic . Control data related to regulation of the associated process es can be retained in data storage other data also can be retained in data storage . The control code is based on one or more control data structures that are part of a set of control data structures available to program the controller . The set of control data structures is extensible and specific to controlled equipment and related process es . In an aspect a control data structure comprises a control instruction a data type and a memory tag. In an aspect a memory tag or tag is a composite data structure that includes a metadata e.g. tag metadata that defines the data related to the memory tag and b a data value s . Control data structure s storage retains control data structure s . The control instruction can be an add on instruction which is defined for a specific control action. In addition or in the alternative the control instruction can be predefined control instruction that is part of a control program product wherein the control program product can be provisioned when the controller is manufactured. The data type includes at least one of various common types employed in control systems such as numerical data real data integer data complex data etc. and logical data character data in addition to user defined data types such as array vectors matrices etc. data types or composite data types e.g. a data type with a logical variable and an array data type. The memory tag characterizes the instruction and related data type of control data that is bound to a control screen or graphical display object s therein. As an example for a control instruction related to temperature regulation tag metadata not shown can convey a temperature value or a range of temperature values e.g. minimum maximum or specific engineering units e.g. Kelvin K degree Celsius C. or degree Fahrenheit F. . The set of control data structures is stored in a control data structure s storage within memory . As illustrated in diagram in memory element retains one or more data control data structures each comprising an instruction a data type and memory tag s also referred to as tag s . As indicated supra memory tag s include metadata e.g. tag metadata associated with a control data structure or a portion thereof. Through storage of such metadata e.g. tag metadata in a controller duplication of visualization settings or control settings is largely reduced when compared to conventional control systems that retain such metadata in an HMI.

Controller also includes input output I O interface s that enable generation of the control code. I O interface s also allows communication amongst the controller and terminal and the controller and device s such as sensor s not shown such communication effected in part through access network s . In an aspect at least one I O interface of I O interface s is associated with a group of I O module s that can be retained in memory as one or more sets of computer executable code instructions not shown . The group of I O module s enables the at least one I O interface and thus controller to communicate and control I O functionality which can be defined in the group of I O modules . In certain embodiments the group of I O modules is configured after or substantially upon controller is configured e.g. programmed to communicate and control I O functions. Data structure s that define at least in part an I O module can be exploited to produce at least a portion of an operator interface in a manner similar to that described hereinafter in connection with generation of an operator interface based on control data structure s . At least the portion of the operator interface can convey a representation e.g. visual representation or aural representation of device s equipment interface s that enable I O functionality in a control environment that includes or is functionally coupled to controller

In addition controller includes processor s memory and other circuitry that enables implementation of control process es e.g. execution of control logic or control code instructions related to a specific equipment e.g. . In one or more embodiments of the subject disclosure controller is an industrial controller or an industrial automation controller. Generally industrial controllers or industrial automation controllers are purpose specific processing devices employed to regulate automated or semi automated entities such as industrial processes machines manufacturing equipment plants or the like. A typical industrial controller or automation controller executes through a processor s for example control logic to measure one or more variables or inputs representative of a status of a controlled entity or effectuate outputs associated with control of the entity. Such inputs and outputs can be digital or analog inputs and outputs are not shown in for the sake of simplicity.

In example system terminal includes an acquisition component that extracts a set of control data structures in control code retained in the controller . As described supra the control code embodies specific control logic e.g. automation control logic that the controller can execute to regulate equipment e.g. and associated process es . Acquisition component can retain a local copy of the set of control data structures in control logic storage also referred to as control logic the local copy can be accessed by association component which can link one or more instances of each control data structure in the set of control data structures to a graphical display object to generate at least in part a rendering project not shown based on the control logic represented by the control code that encompasses the set of control data structures. One or more display objects are retained in display object s storage in an aspect as illustrated in diagram in the one or more display objects can be grouped and stored in a set of one or more libraries . In an aspect management component can administer the set of one or more libraries For instance management component can retrieve a current version of a library from a server not shown which can be part of a back end platform in the control system that includes and utilizes terminal . In alternative or additional embodiments the set of one or more libraries can be retained in a dedicated memory element register table database file etc. not shown within memory rather than as part of display object s in an aspect the dedicated memory element can be an application project file that is part of a library file.

Association component links an instance of a control data structure in the set of control data structures to a display object or graphical data object in accordance with at least a first mapping the linkage or association selects the display object based on the control data structure. In addition or in the alternative based on at least a second mapping association component can link an instance of a data structure that defines an I O module not shown in controller to a display object. Moreover or as another alternative based at least on a third mapping association component can link an instance of a control data structure within control logic to a graphical data object based on the location e.g. a logical block such as a subroutine a program module etc. of the instance of the control data structure within the control logic. In an aspect the first mapping the second mapping or the third mapping can be included as part of an HMI design or an HMI runtime product at least the first mapping or the second mapping can be defined by the HMI vendor or by an end user control designer operator etc. . Association component can record the display object in memory e.g. as part of mapping s storage and can create a collection of display objects based in part on the control logic acquired from controller . Such collection can be retained in memory as part of display object s storage .

In an aspect a mapping described herein can be generated one time e.g. at a time terminal is manufactured or provisioned and it can be utilized at runtime control runtime rendering runtime or both to create a variety of collections of display objects based on control logic as describe hereinbefore the mapping can be retained in mapping s storage within memory . In certain embodiments management component can administer mappings available to terminal . As indicate above a control data structure can be defined by at least one of a control instruction a data type and a memory tag. In an aspect the mapping associates a display object e.g. an icon an animated image a screen or display a faceplate navigation panel to the control instruction. In another aspect the mapping associates a display object to the data type. In yet another aspect the mapping associates a display object to the memory tag. To increase robustness and improve plug and play performance e.g. in response to deployment of a terminal or addition of a sensor to a control environment a mapping stored in a terminal e.g. can include relationships amongst set s of display objects and set s of control data structures for numerous control domains e.g. manufacturing packaging testing or markets food and beverage pharmaceutical vehicular oil and gas mineral electric telecommunications etc. .

An available collection of display objects for a specific control logic in a controller e.g. controller can be acquired received retrieved etc. by display component wherein the display component can generate a rendering project based at least on such collection. Display component can execute the rendering project to produce an operator interface in an illustrative aspect display component can exploit processor s to execute the rendering project. The operator interface so generated is thus based at least on the control logic executed by controller . In addition display component can enable data entry from an end user e.g. an HMI designer a control engineer or operator for example display component can receive data input through various user interface interaction modalities speech gestures motion gestures touch gestures etc. and conduits for example keyboards keypads touch screens microphones cameras or the like. In addition display component can create the rendering project at control runtime when a control project is executed and in response to alterations performed to the control project at control runtime. Accordingly in an aspect an end user e.g. an HMI designer a control engineer or operator can be presented with an alternative or additional operator interface to incorporate changes performed to a control project at control runtime. For instance such alternative or additional operator interface can include a rendition of data trend s e.g. a set of data values within a predetermined time scale and a specific update rate an abridged rendition of specific data sets e.g. groups of values of predetermined e.g. autonomously selected variables or customized screen content comprising pre configured display objects. In contrast conventional HMIs or terminals that render control data in conventional control systems remain static or unchanged during control runtime. Thus the conventional HMIs or terminals generally force the end user to utilize a separate computer or apparatus to collect a current configuration if such configuration is not available make changes to a rendering project and redeploy the rendering project. It should be appreciated that such end user intervention can be a tedious endeavor to manage since as running or locally stored data cannot or should not be lost through this closed loop collect modify deploy modification process in order for the modification process to be effective or successful.

One or more operator interfaces generated as described herein enable terminal to render control data associated with various control processes regulated through controller based on specific control code. The display component in terminal can render the one or more operator interfaces through visual or aural indicia. The one or more operator interfaces can be associated with one or more sets of control screens and rendered in accordance with at least one of graphical display object s or gesture rendering object s that compose the control screen s in the one or more sets of control screens. Various schemes can be employed to render the one or more operator interface s or other content s such as window based schemes e.g. iconic representation pop up representation of indicia or text based representation with scroll down or scroll sideways delivery or static rendering. In addition the one or more operator interfaces or other content s can be organized in various configurations within a rendering area e.g. display screen that can be a part of display component .

In addition to features described supra management component also enables requesting scanning of a control layer either runtime environment or design environment based at least on asynchronous data received by terminal . In a scenario such data can originate from an operator that consumed control data via terminal . In another scenario such data can originate from a controller such as controller and can be part of payload data in an indication e.g. an instruction a data packet a light payload file e.g. a cookie an email communication an instant message a set of bits . . . that control logic in the controller has changed or a change in state condition has occurred changes in state condition can include attachment of a sensor to the controller malfunction of a sensor attached to the controller or equipment regulated through the controller departure from target key performance indicator s in process es regulated by the controller or the like.

A management component in terminal can receive and convey data and signaling to support automated generation of an operator interface as disclosed herein. In an aspect management component can retrieve a set of display objects from a server not shown to enable automatic generation of a rendering project based on control code e.g. control data structure s extracted from a controller e.g. . In an illustrative scenario an acquisition component in terminal can deliver a request to download the set of display objects to management component the request can be delivered after a determination is made that display object s store does not contain one or more elements necessary to be produce an operator interface based on the control code acquired from a controller. The illustrative scenario can occur when control logic in the controller is updated e.g. the controller replaces an older controller or new control code is supplied to the controller or the terminal is installed in a new location in which it can be beneficial to render an extant operator interface in a specific natural language. The new location can be conveyed by a logical address e.g. an internet protocol IP address or a URL Universal Resource Locator assigned to one or more controllers operationally coupled to the terminal . In another aspect management component can retrieve a group of control data structures or portion s thereof from a controller e.g. and supply at least a part of the group to display component for rendering. Moreover management component can collect metadata associated with a control data structure from the controller . Moreover management component can receive data that directs management component to query a controller e.g. for specific control data structure s or control code. In response to a query management component can receive relevant data from the controller and convey such data to display component for rendering. Such functionality of management component can be exploited at runtime control runtime or rendering runtime or both which improves operator ability to locate particular information in a control environment with respect to conventional control systems. In addition the described functionality of management component increases operator efficiency and thus can reduce costs and error.

In terminal at least a portion of I O interface s enables functional coupling e.g. communicative coupling of terminal with access network s the functional coupling allows communication e.g. exchange of data and signaling of terminal with other controller s e.g. controller other terminal s such as terminal and terminal device s such as device and server s not shown . In an aspect device is functionally coupled to access network via interface s and includes at least one control data structure retained in memory element . In addition to control data structure s device also includes data storage not shown . In an embodiment device can be an intelligent device such as a variable speed drive for a motor or an intelligent valve. In another embodiment device can be an I O device such as various sensors a scanner a key pad a touch pad or the like. In one or more embodiments device can include at least one data structure other than a control data structure that can be exploited to automatically generate an operator interface in accordance with aspects described herein. Device can be part of equipment .

The portion of I O interface s that enables communication of terminal with other terminal s controller s or server s via access network s can include network adaptor s port s reference link s or the like. I O interface s also can functionally couple e.g. communicatively couple the terminal with peripheral devices e.g. device and with an electric grid that can supply power for operation of the terminal . To at least that end I O interface s can include a set of connectors and suitable circuitry transformers power amplifiers etc. .

In an aspect I O interface s can be distributed and deployed in part within display component to enable acquisition of data in response to conveyance of control data through one or more operator interfaces. The portion of I O interface s that is part of display component can be embodied in data entry components e.g. keypad touch detection components and related circuitry that enables functional coupling of the portion of I O interface s with one or more components or functional elements e.g. processor s memory bus of terminal .

In example system terminal also includes processor s which can be configured to execute or can execute computer executable code instructions not shown stored in memory to implement or provide at least part of the described functionality of terminal . Such computer executable code instructions can include program modules or software or firmware applications that implement specific tasks which can be accomplished for example through one or more of the methods described in the subject specification and that are associated at least in part with functionality or operation of example system . Moreover in one or more embodiments acquisition component association component and one or more components in display component or functionally coupled thereto can be can be implemented as software or firmware that can be retained in memory as one or more sets of computer executable code instructions that when executed by processor s implement such components and their associated functionality as described herein in various aspects. To provide such functionality in one aspect processor s can exploit bus to exchange data or any other information amongst functional elements within terminal and memory or elements therein. Bus can be embodied in at least one of a memory bus a system bus an address bus a message bus or any other conduit protocol or mechanism for data or information exchange among components that execute a process or are part of execution of a process. Bus also can include a power bus. The exchanged information can include at least one of computer executable code instruction s computer executable code structure s data structures or the like.

Memory also can retain data resource s retrieved or received at least from controller or other controller s not shown data storage can contain such data resource s . Data resources comprise files control screens control projects instructions data structures such as graphical data objects and control data objects memory tags memory addresses or the like. In addition to or as part of stored data resources memory also can retain state information e.g. alarm condition s associated to a terminal a controller a device or other equipment. In an aspect memory can include various graphical data objects or gesture data objects in display object s storage . Graphical data objects or gesture data objects define a display object gesture data objects can define display objects and related data that enable interaction of an operator with a terminal or dedicated HMI through one or more gestures such as motion speech or touch and combinations thereof. At least one of the graphical data objects or gesture data objects can be part of one or more display objects included in operator interface s associated with control process es and associated equipment regulated through controller or other controllers not shown .

Additionally in example system processor s in controller can be configured to execute or can execute computer executable code instructions stored in memory to implement or provide at least part of the described functionality of controller . Such computer executable code instructions can include program modules or software or firmware applications that implement specific tasks which can be accomplished for example through one or more of the methods described in the subject specification and that are associated at least in part with functionality or operation of example system . Moreover in one or more embodiments control platform or a portion thereof and I O interface s or a portion thereof can be implemented as software or firmware that can be retained in memory as one or more sets of computer executable code instructions that when executed by processor s implement such functional elements and their associated functionality as described herein in various aspects. To provide such functionality in one aspect processor s can exploit bus to exchange data or any other information amongst functional elements within controller and memory or elements therein. Bus can be embodied in at least one of a memory bus a system bus an address bus a message bus or any other conduit protocol or mechanism for data or information exchange among components that execute a process or are part of execution of a process. Bus also can include a power bus. The exchanged information can include at least one of computer executable code instruction s computer executable code structure s data structures or the like.

Functionality of a display component in accordance with aspects described herein can be enabled through various components. illustrates an example embodiment of a display component that can be part of a rendering terminal in accordance with one or more aspects disclosed herein. In the example embodiment display component includes a rendering constructor component also referred to as rendering constructor in the subject disclosure and a display . Rendering constructor can acquire retrieve receive etc. a collection of display objects based on control logic and related control data structure s as described supra the collection of display objects can be generated automatically through a mapping between a set of display objects and a set of control data structures that are part of control code that represents the control logic. In an aspect the control logic can be acquired from a controller e.g. from a device e.g. or from a design node e.g. a server or computer not shown in . Based on at least such collection and thus based at least on the control logic rendering constructor can configure e.g. compose and commit to a memory a rendering project that when executed by a component or a processor renders an operator interface.

In an aspect to configure a rendering project rendering constructor can generate a full rendering project based on acquired control logic. In addition or in the alternative to configure a rendering project rendering constructor can modify an extant rendering project in response to change s in control logic. To modify an extant rendering project rendering constructor can merge the extant rendering project with one or more alternative rendering projects or portions thereof. In a scenario rendering constructor can merge a portion of a first rendering project e.g. a newly created rendering project with a second rendering project e.g. the extant rendering project . In certain embodiments to merge the portion of the first rendering project with the second rendering project rendering constructor can insert a first set of rendering instructions associated with the first rendering project into a second set of rendering instructions associated with the second rendering project. One or more of such sets of rendering instructions can include pre specified rendering instruction s in addition to rendering instructions composed in response to acquired control logic. Pre specified rendering instruction s can include rendering instructions that are predetermined as part of a graphics product which can be hardware software or firmware retained within a terminal that renders an operator interface associated with a rendering project. In the alternative pre specified rendering instruction s can be supplied as part of data received at such terminal the data can be input by an end user human agent or machine based intelligent agent . Utilization of pre specified rendering instructions allows rendering constructor to retain specific features of a display object based on one or more factors. At least one advantage of merging two or more rendering projects to configure a rendering project is that such merging enables preservation of one or more custom settings present in an extant rendering project prior to configuration of a related rendering project in response to acquired control logic.

In another aspect to configure a rendering project rendering constructor can exploit the location of at least one instance of a control data structure tag instance instruction instance etc. within the control logic. In an aspect the control logic can be partitioned into one or more logical blocks such as a programming routine s program module s or the like. Location within the control logic can be a logical block of the one or more logical blocks within the control logic. As an example the location of the control data structure can enable rendering constructor to establish the position of a display object within a rendering project and related operator interface. As another example the location of the control data structure within the control logic can enable rendering constructor to provide navigation functionality within an operator interface e.g. navigate from a first screen to second screen. Such navigation can include production of a pop up window emission of sound rendition of data e.g. temporal trend of a selected control variable or the like . In another aspect rendering constructor can exploit metadata related to the control data structure and that defines location of the control structure within the control logic.

Rendering constructor can execute the rendering project and thus render the associated operator interface via display which includes circuitry that enables conveying an operator interface the circuitry includes backlighting circuitry pixel circuitry sound rendering circuitry and associated functional elements such as speakers microphones or the like etc. In an aspect the display can be embodied in a monitor such as a cathode ray tube CRT monitor a Liquid Crystal Display LCD monitor a plasma monitor a light emitting diode LED monitor an electrochromic monitor or the like.

Rendering constructor can modify a rendering project in response to data received from an end user via a data entry component e.g. a keypad a touch screen not shown in an HMI that includes the rendering constructor for example. In one or more embodiments portion s of a rendering project automatically generated in response to changes in control logic in a controller e.g. can be available for modification For instance a portion of the rendering project can be configured as temporary or tentative and display object s related to the portion can be rendered in temporary or tentative locations in a display area tentatively or temporarily rendered display object s can be vetted by a designer to determine a permanent location in the display area for the display object s . Likewise portion s of a rendering project can be configured as perennial or right and thus the rendering of display object s associated with such portion s is not submitted to vetting. In a scenario rendering constructor can execute a first rendering project and prompt an end user to accept or modify the resulting operator interface rendered through display . In response to the prompt rendering constructor receives data that conveys either acceptance of the operator interface or a modification to the operator interface. For an accepted operator interface rendering constructor logically commits the rendering project whereas for a modified operator interface rendering constructor alters the rendering project in accordance with the data that conveys the modification.

In addition based at least on an acquired collection of display objects for a specific control logic rendering constructor can generate a plurality of rendering projects and select a particular rendering project to execute and therefore a particular operator interface to render based on factors extrinsic to the control logic. Selection can be dictated by an adequacy score evaluated from a function of at least such factors rendering constructor can compute the adequacy score of the plurality of rendering projects and select a rendering project for which the adequacy score is above a predetermined threshold. The factor extrinsic to the control logic can include rendering resources of a terminal or device that can render the operator interface e.g. display real estate of the device display resolution of the device or the like security privilege of an operator who can consume control data through the operator interface.

Rendering constructor also can supply an operator interface to an external display which can be part of a device functionally coupled to terminal through access network s . External display can operate in substantially the same manner as display however specific rendering resources available to display can be dictated by the device e.g. a mobile device . Rendering constructor can autonomously customize the operator interface rendered in the external display in accordance with aspects described below.

To make an inference e.g. to reason and draw a conclusion based on a set of metrics formal arguments or known mathematical outcomes in controlled scenarios intelligent component can exploit artificial intelligence AI techniques which can be formalized in a methodology that is retained method s storage . Intelligent component supplies an inference to rendering constructor component . Artificial intelligence techniques typically apply advanced mathematical algorithms or methods to a data set such algorithms or methods are part of the methodology and can include decision trees neural networks regression analysis principal component analysis PCA for feature and pattern extraction cluster analysis genetic algorithm or reinforced learning. In particular intelligent component or one or more components therein can employ at least one of numerous methods for learning from the data set and then drawing inferences from models formally represented by employed method. As an example the numerous methods for learning can include Hidden Markov Models HMMs and related prototypical dependency models can be employed. General probabilistic graphical models such as Dempster Shafer networks and Bayesian networks like those created by structure search using a Bayesian model score or approximation can also be employed. In addition linear classifiers such as support vector machines SVMs non linear classifiers like methods referred to as neural network methodologies fuzzy logic methodologies can also be employed. Moreover game theoretic models e.g. game trees game matrices pure and mixed strategies utility algorithms Nash equilibria evolutionary game theory etc. and other approaches that perform data fusion etc. can be exploited by intelligent component .

In addition or in the alternative for control logic rendering constructor component can exploit intelligent component to infer a satisfactory e.g. optimal or nearly optimal operator interface based on factors extrinsic to the control logic with such factors including those indicated supra. As an example intelligent component can identify a set of rendering resources available to a terminal e.g. or a device e.g. a mobile device a back office computer that can render control data and can customize an operator interface based at least on one or more of the control logic and the set of rendering resources. Intelligent component can exploit AI techniques to optimize or to achieve a satisfactory utility trade off between cost of rendering the customized operator interface and the benefit of consuming control data through the customized operator interface. In an aspect intelligent component also can utilize various formalisms to automatically search for the satisfactory operator interface. A search can be driven at least by evaluation of a metric that assesses suitability of a candidate operator interface if the metric fulfills at least one suitability criterion then rendering constructor can select the candidate operator interface as a satisfactory metric. The various formalisms can have disparate degrees of complexity and can include steepest descent algorithm Monte Carlo simulations Tabu search or genetic algorithm. The various formalisms can be retained as a suitable methodology in method s storage .

Visualization layer includes a set of Q terminals with Q a natural number greater than or equal to unity. Terminal with 1 2 . . . Q renders control data and can operate in the same or substantially the same manner as terminal terminal can be embodied in a dedicated HMI or in a computer such as a desktop computer a mobile computer a smartphone that can render control data. In an aspect visualization layer can be homogeneous and composed of networked workstations. In another aspect visualization layer can be heterogeneous with terminals comprising a group of desktop computers a group of workstations and a group of dedicated HMIs where HMIs in the group can have disparate functionality and can include legacy HMIs. As indicated supra visualization layer and control layer are functionally connected e.g. communicatively coupled through access network s . Control layer includes P controllers with P a natural number greater than or equal to unity. Communication of information data signaling etc within each layer in control system is accomplished through access network s and interfaces and .

In one or more embodiments controllers can be industrial controllers or industrial automation controllers as described supra. As described supra each of the controllers includes processor s not shown volatile and non volatile memory not shown and other circuitry not shown that enables implementation of control process es e.g. execution of control logic or control code instructions related to a specific control environment e.g. not shown in . Linkage amongst controllers and terminals can be a one one to many relationship or a one to one relationship. Terminals and controllers can be distributed in disparate geographic locations. Accordingly disparate functional elements of access network s enable communication and related exchange of data or information amongst two or more terminals located in disparate geographic regions. In addition such functional elements of access network s can enable communication and related exchange of data or information amongst two or more controllers that reside in disparate geographical locations.

In an aspect for communication purposes and related exchange of data each layer operates as a single logical unit. Thus communication amongst disparate layers is carried out in the same or substantially the same manner irrespective of geographical location of the functional elements e.g. terminal and controller P that exchange data. In addition a management component in a local terminal e.g. can access data available in the local terminal in the same or substantially the same manner as data available in a remote terminal e.g. . Similarly data available in one or more controllers in control layer appears logically the same to local terminal s and remote terminal s within visualization layer . While each layer in example control system operates as a single logical unit for data exchange purposes each layer can include one or more elements associated with disparate control environments and thus disparate portions of a single logical unit can operate under disparate requirement s or specification s .

In additional or alternative embodiments a device layer not shown comprising at least R devices also can be deployed e.g. installed configured tested and accepted and functionally coupled e.g. communicatively coupled to visualization layer . Here R is natural number greater or equal than unity. At least one device in the device layer not shown can include a set of one or more data structures that can be employed in substantially the same manner as control data structure s to produce e.g. create or modify at least one operator interface automatically. One or more terminals in visualization layer can produce create or modify the at least one operator interface.

In certain embodiments visualization layer or control layer can include a device that can perform control functions e.g. execute control logic and render control data through graphical data objects in an operator interface. As an example such device can be a terminal of the set of terminals wherein the terminal has been embedded e.g. programmed with control functionality that can be enabled by a processor within the terminal. As another example such device can be a controller of the set of controllers which has been embedded e.g. programmed with graphical data rendering functionality that can be enabled by a processor within the controller the graphical rendering functionality can include rendering of control data to an external display e.g. functionally coupled to the controller.

Couplings B and C functionally connect the design environment and the runtime environment . Through coupling B the rendering project can be loaded or installed in one or more terminal s which can render control data generated at least in part in controller s . In addition or in the alternative through coupling B a rendering project or a portion thereof or other data can be collected from terminal s and loaded into design environment . Likewise through coupling C the control project can be loaded or installed in one or more controller s to execute control in runtime environment . In addition or in the alternative through coupling C a control project or a portion thereof or other data can be collected from controller s and loaded into design environment . As discussed supra the rendering project installed in the one or more terminal s is designed to render control data generated in accordance with the control project the one or more terminal s render the control data through an operator interface originated in the rendering project . As part of coupling D the one or more controller s supply the one or more terminal s control data. In addition in contrast to conventional runtime environments the one or more terminal s can i collect or receive control logic e.g. a plurality of control data structures from the one or more controller s in the runtime environment and ii automatically update the operator interface based on the control logic. It should be noted that such automatic update can be effected within the runtime environment in response to a change in the control logic in at least one of the one or more controller s . An updated operator interface can be refined through external data received by the one or more terminal s . Accordingly visualization development costs e.g. time related wages . . . of a rendering interface can be reduced with respect to conventional control systems.

In one or more embodiments design environment and runtime environment can be functionally coupled during runtime or dynamically. Coupling E allows a terminal in the design environment to collect real time or latest known control data to develop a suitable rendering project . At least one advantage of developing the rendering project is that various rendering features conveyance of alarms presentation of trends availability of navigation tools etc. can be evaluated with actual control data. Coupling F enables control logic in the control project in the design environment to be collected by the one or more terminal s in the runtime environment and be represented therein as an operator interface. Therefore a plurality of potential changes to control logic can be evaluated in the runtime environment with minimal or without down time for the one or more terminal s and without reconfiguration of the control logic in the one or more controller s .

As described supra based on the couplings A F enabled by one or more embodiments of the subject disclosure a bottom up environment for development of control environment and visualization environment is provided. Control project can be developed separately from rendering project and such projects can be harmonized or integrated through the couplings A F in response to the control project or implementation thereof at runtime. Accordingly the various embodiments disclosed herein allow the design environment and the runtime environment to remain isolated while affording various levels of integration that enable automated visualization development or design.

It is noted that in certain embodiments the various couplings described supra amongst design environment and runtime environment also can be implemented amongst a device not shown in runtime environment and rendering project or control project . The device at runtime also can be coupled to terminal s or controller s .

Mapping constructor component also referred to as mapping constructor generates a mapping amongst a display object and a control data structure. The mapping can associate a set of control data structures with a set of display objects through a one to one relationship a one to many relationship or a many to many relationship. As described supra the control data structure can be defined by at least one of a control instruction a data type and a memory tag and the mapping can associate a display object to one or more parts of the control data structure. Mapping can be supplied as a stand alone object or can be linked to a library of display objects. As an example mapping can be supplied to a terminal such as terminal and retained in mapping s storage within memory . As another example the library can include a logical connection between a control data structure or a portion thereof and a display object thus the library can define the mapping.

Mapping is specific to a control domain e.g. manufacturing packaging testing or markets food and beverage pharmaceutical vehicular oil and gas electric telecommunications etc. . In addition Mapping can be included as part of an HMI design or an HMI runtime product the mapping can be defined by the HMI vendor or by an end user control designer operator etc. . In an aspect the mapping can be based at least in part on at least one or more of a security clearance a location of a terminal or HMI that exploits the mapping operational importance state information e.g. alarm conditions or location of an instance of control data structure e.g. a tag instance or an instruction instance within a control project. For each of the latter factors related to mapping mapping establishes a relationship amongst a specific set of display objects and a specific set of control data structures. For example different security clearance levels can result in disparate operator interfaces for specific control logic higher security clearance level can be provided richer more functional operator interfaces. As described hereinbefore the relationship can be a one to one relationship a one to many relationship or a many to many relationship. Thus the mapping can be structured to include different associations amongst a control data structure and a display object.

Code generator and mapping constructor can exchange data via bus which also enables code generator and mapping constructor to retrieve and store data in control data structure s storage and display object s store . Bus can allow external data to be conveyed to code generator and mapping constructor .

Server s can be part of a design environment in control layer or a design environment in a rendering layer. Server can configure at least one controller e.g. controller to regulate control process es associated with equipment e.g. . In an aspect server s can generate and supply control project s to controller to configure control features. Server can retain data resource s associated with configured control process es and controller s e.g. control . As part of a design environment in a visualization layer server s can enable generation of a rendering project which configure one or more terminals e.g. terminal to render control data in accordance with control process es and related controller s that regulate equipment. The rendering project is based in part on a control project and can be generated automatically according to aspects described herein.

In an aspect of example control system a remote device within device s can configure one or more of a controller e.g. or a terminal e.g. through server . In contrast to and as advantage with respect of conventional operation of HMIs in typical control environment terminal s in example control system can access and be accessed by the remote device which can be an enterprise device a back end computer a workstation a printer etc. . Terminal s or controller s in example control system can acquire receive retrieve etc. data and signaling from server s and device s .

In example system automated generation of a rendering project based at least on control logic is accomplished in server and thus such automated generation does not consume computational resources of terminal . As described supra the control logic can be collected from a control project in a design environment or from a controller e.g. in a runtime environment. Accordingly automated generation of an operator interface at a server can be advantageously exploited in control systems that include legacy terminal s for rendering control data associated with controlled equipment and related process es since the legacy terminal s may lack the computational resource s to automatically generate the operator interface.

In certain embodiments server can be part of a network that is external to access network s see e.g. . In an illustrative scenario a supplier of terminal can operate server and provide automated generation of an operator interface based on control logic as a service to a party that utilizes terminal within a control system. In such scenario a network node not shown that is part of access network s can ensure that server securely access controller and terminal .

In server processor s can be configured to execute or can execute computer executable code instructions not shown stored in memory to implement or provide at least part of the described functionality of server which can embody one or more servers disclosed herein. Such computer executable code instructions can include program modules or software or firmware applications that implement specific tasks which can be accomplished for example through one or more of the methods described in the subject specification and that are associated at least in part with functionality or operation of example control system . Moreover in some embodiments the various components of server can be implemented as software or firmware applications that can reside in memory as one or more sets of computer executable code instructions that when executed by processor s implement such various components and the functionality thereof as described herein in various aspects. I O interfaces can enable exchange of information e.g. data resources and can be part of interface s .

In an aspect to provide at least part of functionality of server processor s can exploit bus to exchange data or any other information amongst functional elements e.g. components within server and memory or elements therein. Bus can be embodied in at least one of a memory bus a system bus an address bus a message bus or any other conduit protocol or mechanism for data or information exchange among components that execute a process or are part of execution of a process. Bus also can include a power bus. The exchanged information can include at least one of computer executable code instructions code structure s data structures or the like.

In view of the example systems described above example methods that can be implemented in accordance with the disclosed subject matter can be better appreciated with reference to flowcharts in . For purposes of simplicity of explanation various methods disclosed herein are presented and described as a series of acts however it is to be understood and appreciated that the subject disclosure is not limited by the order of acts as some acts may occur in different order and or concurrently with other acts from that shown and described herein. It is noted that not all illustrated acts may be required to implement a described method in accordance with the subject specification. In addition for example one or more methods disclosed herein could alternatively be represented as a series of interrelated states or events such as in a state diagram. Moreover interaction diagram s or call flow s represent several of the example methods disclosed herein in accordance with the described subject matter particularly in instances when disparate entities or functional elements enact disparate portions of one or more of the several methods. Furthermore two or more of the disclosed example methods can be implemented in combination to accomplish one or more features or advantages described in the subject disclosure.

At act an operator interface is configured based at least on the association amongst the control data structure in the automation control logic and the display object. The configuring is automatic. Configuring the operator interface can include generating a full rendering project that in response to execution by a component or a processor renders the operator interface. In addition or in the alternative configuring the operator interface can include merging a portion of a first rendering project e.g. a newly created rendering project with a second rendering project e.g. an extant rendering project . In an aspect the merging includes inserting a first set of rendering instructions associated with the first rendering project into a second set of rendering instructions associated with the second rendering project. The merging described herein enables preservation of one or more custom settings present in one or more of the first rendering project or the second rendering project. Accordingly the operator interface that is configured through the merging can maintain at least one custom setting created prior to the merging.

At act the operator interface is rendered. As indicated supra rendering the operator interface includes executing a rendering project that defines the operator interface.

It is noted that the subject example method or at least a portion thereof can implemented without reliance on automation control logic as a source of control data structure s . As described supra control data structure s can be acquired from a device that does not include automation control logic.

Regarding example method at act a notification service is subscribed to at least one apparatus that retains automation control logic and associated control data structures can provide the notification service. The functional element that performs at least part of example method can subscribe to the notification service. At act as part of the notification service an indication of a change in the automation control logic is received from the at least one apparatus in response to at least the change in the automation control logic. In an aspect receiving the indication can include collecting payload data conveyed by the indication and decoding such payload data. As indicated supra a change in the automation control logic can include one or more of addition of a control data structure related to the automation control logic removal of a control data structure related to the control logic or modification of a control data structure related to the control logic. In an embodiment the at least one apparatus is at least one controller e.g. . In another embodiment the at least one apparatus is at least one device e.g. .

At act for at least one operator interface in the set of operator interfaces a metric that determines suitability of the at least one operator interface is computed. The metric can be a function of at least one of the control logic e.g. automation control logic and factors extrinsic to the control logic as described hereinbefore. At act it is probed if the at least one operator interface fulfills at least one suitability criterion. In the negative case flow is directed to act whereas in the affirmative case at act the at least one operator interface is selected as a second operator interface that conveys control data according to the control logic e.g. automation control logic .

Method s disclosed throughout the subject specification and annexed drawings are capable of being stored on an article of manufacture to facilitate transporting and transferring such method s to computers or chipsets with processing capability ies for execution and thus implementation by a processor or for storage in a memory. In an aspect one or more processors that enact method s described herein can be employed to execute computer executable code instructions retained in a memory or any computer readable or machine readable medium to implement method s described herein the code instructions when executed by the one or more processor implement or carry out the various acts in the method s described herein. The computer executable code instructions provide a computer executable or machine executable framework to enact or implement the method s described herein.

Referring now to there is illustrated a block diagram of a computer operable to execute the disclosed architecture. In order to provide additional context for various aspects thereof and the following discussion are intended to provide a brief general description of a suitable computing environment in which the various aspects of the innovation can be implemented. While the description above is in the general context of computer executable instructions that may run on one or more computers those skilled in the art will recognize that the innovation also can be implemented in combination with other program modules and or as a combination of hardware and software.

Generally program modules include routines programs components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the inventive methods can be practiced with other computer system configurations including single processor or multiprocessor computer systems minicomputers mainframe computers as well as personal computers hand held computing devices microprocessor based or programmable consumer electronics and the like each of which can be operatively coupled to one or more associated devices.

The illustrated aspects of the innovation may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules can be located in both local and remote memory storage devices.

A computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and non volatile media removable and non removable media. By way of example and not limitation computer readable media can comprise computer storage media and communication media. Computer storage media includes both volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital video disk DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer.

A computer and computing devices in general typically include a variety of media which can include computer readable storage media and or communications media which two terms are used herein differently from one another as follows. Computer readable storage media can be any available storage media that can be accessed by the computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable storage media can be implemented in connection with any method or technology for storage of information such as computer readable instructions program modules structured data or unstructured data. Computer readable storage media can include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other tangible and or non transitory media which can be used to store desired information. Computer readable storage media can be accessed by one or more local or remote computing devices e.g. via access requests queries or other data retrieval protocols for a variety of operations with respect to the information stored by the medium.

Communications media typically embody computer readable instructions data structures program modules or other structured or unstructured data in a data signal such as a modulated data signal e.g. a carrier wave or other transport mechanism and includes any information delivery or transport media. The term modulated data signal or signals refers to a signal that has one or more of its characteristics set or changed in such a manner as to encode information in one or more signals. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

With reference again to the example environment for implementing various aspects includes a computer the computer including a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various commercially available processors. Dual microprocessors and other multi processor architectures may also be employed as the processing unit .

The system bus can be any of several types of bus structure that may further interconnect to a memory bus with or without a memory controller a peripheral bus and a local bus using any of a variety of commercially available bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS is stored in a non volatile memory such as ROM EPROM EEPROM which BIOS contains the basic routines that help to transfer information between elements within the computer such as during start up. The RAM can also include a high speed RAM such as static RAM for caching data.

The computer further includes an internal hard disk drive HDD e.g. EIDE SATA which internal hard disk drive may also be configured for external use in a suitable chassis not shown a magnetic floppy disk drive FDD e.g. to read from or write to a removable diskette and an optical disk drive e.g. reading a CD ROM disk or to read from or write to other high capacity optical media such as the DVD . The hard disk drive magnetic disk drive and optical disk drive can be connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The interface for external drive implementations includes at least one or both of Universal Serial Bus USB and IEEE 1394 interface technologies. Interface enables functional coupling of computer to a removable memory such as a USB memory device or a SD memory card. Other external drive connection technologies are within contemplation of the subject innovation.

The drives and their associated computer readable media provide nonvolatile storage of data data structures computer executable instructions and so forth. For the computer the drives and media accommodate the storage of any data in a suitable digital format. Although the description of computer readable media above refers to a HDD a removable magnetic diskette and a removable optical media such as a CD or DVD it should be appreciated by those skilled in the art that other types of media which are readable by a computer such as zip drives magnetic cassettes flash memory cards cartridges and the like may also be used in the example operating environment and further that any such media may contain computer executable instructions for performing the methods of the disclosed innovation.

A number of program modules can be stored in the drives and RAM including an operating system one or more application programs other program modules and program data . All or portions of the operating system applications modules and or data can also be cached in the RAM . It is to be appreciated that the innovation can be implemented with various commercially available operating systems or combinations of operating systems.

A user can enter commands and information into the computer through one or more wired wireless input devices e.g. a keyboard and a pointing device such as a mouse . Other input devices not shown may include a microphone an IR remote control a joystick a game pad a stylus pen touch screen or the like. These and other input devices are often connected to the processing unit through an input device interface that is coupled to the system bus but can be connected by other interfaces such as a parallel port an IEEE 1394 serial port a game port a USB port an IR interface etc.

A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor a computer typically includes other peripheral output devices not shown such as speakers printers etc.

The computer may operate in a networked environment using logical connections via wired and or wireless communications to one or more remote computers such as a remote computer s . The remote computer s can be a workstation a server computer a router a personal computer portable computer microprocessor based entertainment appliance a peer device or other common network node and typically includes many or all of the elements described relative to the computer although for purposes of brevity only a memory storage device is illustrated. The logical connections depicted include wired wireless connectivity to a local area network LAN and or larger networks e.g. a wide area network WAN . Such LAN and WAN networking environments are commonplace in offices and companies and facilitate enterprise wide computer networks such as intranets all of which may connect to a global communications network e.g. the Internet.

When used in a LAN networking environment the computer is connected to the local network through a wired and or wireless communication network interface or adapter . The adaptor may facilitate wired or wireless communication to the LAN which may also include a wireless access point disposed thereon for communicating with the wireless adaptor .

When used in a WAN networking environment the computer can include a modem or is connected to a communications server on the WAN or has other means for establishing communications over the WAN such as by way of the Internet. The modem which can be internal or external and a wired or wireless device is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof can be stored in the remote memory storage device . It will be appreciated that the network connections shown are illustrative and other means of establishing a communications link between the computers can be used.

The computer is operable to communicate with any wireless devices or entities operatively disposed in wireless communication e.g. a printer scanner desktop and or portable computer portable data assistant communications satellite any piece of equipment or location associated with a wirelessly detectable tag e.g. a kiosk news stand restroom and telephone. This includes at least Wi Fi and Bluetooth wireless technologies. Thus the communication can be a predefined structure as with a conventional network or simply an ad hoc communication between at least two devices.

Wi Fi or Wireless Fidelity allows connection to the Internet from a couch at home a bed in a hotel room or a conference room at work without wires. Wi Fi is a wireless technology similar to that used in a cell phone that enables such devices e.g. computers to send and receive data indoors and out anywhere within the range of a base station. Wi Fi networks use radio technologies called IEEE 802.11 a b g etc. to provide secure reliable fast wireless connectivity. A Wi Fi network can be used to connect computers to each other to the Internet and to wired networks which use IEEE 802.3 or Ethernet . Wi Fi networks operate in the unlicensed 2.4 and 5 GHz radio bands at an 11 Mbps 802.11a or 54 Mbps 802.11b data rate for example or with products that contain both bands dual band so the networks can provide real world performance similar to the basic 10BaseT wired Ethernet networks used in many offices.

Referring now to there is illustrated a schematic block diagram of an example computing environment in accordance with another aspect. The system includes one or more client s . The client s can be hardware and or software e.g. threads processes computing devices . The client s can house cookie s and or associated contextual information by employing the subject innovation for example.

The system also includes one or more server s . The server s can also be hardware and or software e.g. threads processes computing devices . The servers can house threads to perform transformations by employing the invention for example. One possible communication between a client and a server can be in the form of a data packet adapted to be transmitted between two or more computer processes. The data packet may include a cookie and or associated contextual information for example. The system includes a communication framework e.g. a global communication network such as the Internet that can be employed to facilitate communications between the client s and the server s .

Communications can be facilitated via a wired including optical fiber and or wireless technology. The client s are operatively connected to one or more client data store s that can be employed to store information local to the client s e.g. cookie s or associated contextual information . Similarly the server s are operatively connected to one or more server data store s that can be employed to store information local to the servers .

In the subject specification and annexed drawings terms such as repository store data store data storage and substantially any term s that convey other information storage component s relevant to operation and functionality of a functional element or component described herein refer to memory components or entities embodied in a memory or components comprising the memory. The memory components described herein can be either volatile memory or nonvolatile memory or can include both volatile and nonvolatile memory. In addition the memory components described herein can be statically affixed screwed bolted soldered etc. or removably affixed. Further the memory components can include computer readable or machine readable storage media.

By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable ROM EEPROM or flash memory. Volatile memory can include random access memory RAM which acts as external cache memory. By way of further illustration and not limitation RAM can be available in many forms such as synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM and direct Rambus RAM DRRAM . Additionally the disclosed memory components of systems or methods herein are intended to comprise without being limited to comprising these and any other suitable types of memory.

The various illustrative logics logical blocks modules and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device e.g. a PAC discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration. Additionally at least one processor may comprise one or more modules operable to perform one or more of the steps and or actions described above.

Further the steps or acts of a method or algorithm described in connection with the aspects disclosed herein may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers a hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An example storage medium may be coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. Further in some aspects the processor and the storage medium may reside in an ASIC. Additionally the ASIC may reside in a user terminal. In the alternative the processor and the storage medium may reside as discrete components in a user terminal. Additionally in some aspects the steps and or actions of a method or algorithm may reside as one or any combination or set of codes and or instructions on a machine readable medium and or computer readable medium which may be incorporated into a computer program product.

In one or more aspects the functions described may be implemented in hardware software firmware or any combination thereof. If implemented in software the functions may be stored or transmitted as one or more instructions or code on a computer readable medium. Computer readable media includes both computer storage media and communication media including any medium that facilitates transfer of a computer program from one place to another. A storage medium may be any available media that can be accessed by a computer. By way of example and not limitation such computer readable media can comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also any connection may be termed a computer readable medium. For example if software is transmitted from a website server or other remote source using a coaxial cable fiber optic cable twisted pair digital subscriber line DSL or wireless technologies such as infrared radio and microwave then the coaxial cable fiber optic cable twisted pair DSL or wireless technologies such as infrared radio and microwave are included in the definition of medium. Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and blu ray disc where disks usually reproduce data magnetically while discs usually reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer readable media.

What has been described above includes examples of the disclosed innovation. It is of course not possible to describe every conceivable combination of components and or methodologies but one of ordinary skill in the art may recognize that many further combinations and permutations are possible. Accordingly the innovation is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

