---

title: Dynamic query services and methods
abstract: A system has a network and a data source communicatively coupled to the network. Further, the system has logic configured to discover the data source available on the network and store metadata indicative of the discovered data source in memory, the logic further configured to generate a release parcel, in response to a user input, for performing operations on the data source, the logic further configured to deploy the release parcel to a dynamic query service computing device wherein operations on the data source can be performed through the release parcel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08725857&OS=08725857&RS=08725857
owner: Rolta International, Inc.
number: 08725857
owner_city: Alpharetta
owner_country: US
publication_date: 20101027
---
Nonprovisional Patent Application Under 35 U.S.C. 111 a and 37 C.F.R. 1.53 b In the United States Patent and Trademark Office

The disclosure relates generally to communication with data sources. More particularly the disclosure relates to techniques for providing access to a variety of data sources by utilizing a tool that deploys a release of dynamic query services DQS to a computing device based upon a DQS selected by a user.

Oftentimes a company will have a variety of different data sources connected to a network. Typically each of the data sources can be accessed through the network. However access to each of the data sources may be constrained to a particular protocol. Thus a user of the data source will oftentimes have to be versed in the each of the protocols of each of the data sources in order to access each of the data sources.

The present disclosure relates to dynamic query service DQS systems and methods for accessing a plurality of data sources over a network. In this regard a DQS system of the present disclosure provides a mechanism whereby regardless of the type of data sources and the different protocols that may be necessary to access such data sources the DQS system allows access to the plurality of data sources through centralized functionality using a standard protocol. Notably each of the plurality of data sources is accessible through the DQS system using the standard protocol and in order to access the plurality of data sources each of the protocols that may be necessary for each of the data sources need not be used. Instead the centralized access provides for access of the plurality of data sources using the standard protocol.

The DQS system of the present disclosure discovers one or more data sources available on a network. Metadata describing each of the discovered data sources is stored locally. Then based upon a user input the system generates one or more DQS s for performing action on retrieving from or otherwise accessing the one or more data sources. The DQS may then be executed such that access to the data sources is provided using a common standard protocol.

Note that two data source computing devices and are shown in for exemplary purposes. Additional or fewer data source computing devices may be used in other embodiments of the present disclosure. Further note that one application computing device is shown in for exemplary purposes. Additional application computing devices may be used in other embodiments of the present disclosure. Further note that only one client computing device is shown in for exemplary purposes. However additional client computing devices may be used in other embodiments of the present disclosure.

The data source computing devices and comprise data sources and respectively that are external to the client computing device application computing device and DQS computing device . The data sources and are stored in memory and respectively and are resident on the data source computing devices and . The data sources and can be for example databases Web services systems software applications or other information or code of interest to a user.

Note that the term Web services systems can refer to various types of systems. In one embodiment a Web services system refers to logic that defines one or more services in a Web Services Definition Language WSDL file and the services are defined by an identifier and respective description of the service e.g. its inputs and outputs. The term services can broadly refer to services and or objects contained in the data sources and to which a user may desire to deploy to the DQS computing device . For example services can include database tables database functions database procedures database packages or database views.

Further note that in other embodiments the Web services system can create DQSs that use different message standards that follow a variety of information exchange protocols. For example the Web service system may create DQSs that use Extensible Markup Language XML that follow the Simple Object Access Protocol SOAP standard i.e. a standard for communicating with Web services identified in a Uniform Description Discovery and Integration UDDI file and which are described in a WSDL file. In yet another embodiment a Web service system can create RESTful DQSs which do not have WSDLs but simply use HTTP protocol wherein all the parameters and data are included in the HTTP request. Other protocols may be used in other embodiments of the present disclosure.

In one embodiment of a Web services system the WSDL file created identifies a Web Service and describes what the particular Web Services does. In addition the Web services system may use different communication protocols in performing its message negotiation and transmission e.g. Remote Procedure Call RPC or Hypertext Transfer Protocol HTTP .

When the data source or is a database the data source or may comprise data components and or programmatic components. Data components may include database tables and views as described hereinabove. Programmatic components may include database packages procedures and functions as described hereinabove. The data source or may be a database that houses data indicative of employees within an organization for example. Such an exemplary data source may include objects such as tables or views storing employee s names telephone numbers and birthdates. These described tables or views are data components.

In addition the data source or may include objects such as procedures or functions for modifying data in the tables or views. For example there may be a function for retrieving an employee record corresponding to an identified employee from a table e.g. an object gettable. In such an example the function for retrieving the record is a programmatic component and the function has as an input defined by data indicative of a name of an employee. In addition the function has an output defined by the identified employee s record e.g. the employee s telephone number and birth date. This function is a programmatic component. Note that a function may be different from a procedure described herein in that the function may have inputs and or outputs. Whereas a procedure may not have inputs or outputs.

When the data source or is a database it may be an Oracle application database and implemented with a database management system DBMS . Note that the DBMS comprises logic that allows a user or an application program to view extract modify and add data to the application database. For example the DBMS may enable a function that when called allows a user not shown to add a new employee to a particular table in the external data source e.g. addEmployee. 

The data source or may be accessed by the application computing device via a number of different types of devices. Such devices include but are not limited to Java Database Connectivity JDBC drivers. The Web services may be accessed using other distinct data source protocols known in the art or future developed.

When the data source or is a software program it may use a defined application program interface API not shown . An API is a set of logic including for example functions procedures and protocols that the software program uses in order to operate on a particular operating system library or service.

Regardless of the type of data source and application logic on the application computing device discovers and retrieves descriptive information over the network indicative of the many different data sources and . Such data discovered and retrieved includes the location of the data sources and and its services and or objects that are included in the data sources and . Such data is hereinafter referred to as metadata. 

The metadata identifying and describing the data sources and and their objects includes for example the name of the object the number and type of inputs for the object the number and type of outputs for the object and or a Unique Resource Locator URL or a Uniform Resource Identifier URI . The application logic creates a repository of such metadata. Note that the URL is a compact string representation of an information resource on the network .

The manner in which the application logic retrieves the data indicative of the data sources and and its services and or objects is based upon the type of data source and . For example if the data source or is a Web services system as described hereinabove the application logic may retrieve service and or object identifiers and corresponding descriptions from a Uniform Description Discovery and Integration UDDI stored on the data source computing device or respectively. A UDDI is an XML based registry that includes information about where particular Web services are located on the internet.

Once the metadata indicative of the services and or objects and their corresponding descriptions are retrieved from the data sources and the application logic generates a release parcel based upon user input which is described further herein. Such release parcel includes data and software for accessing one or more of the services and or objects of the data sources and which is in one embodiment selected by a user of the application computing device .

Note that one release parcel is shown depicted in . One release parcel is shown for exemplary purposes only and the application computing logic may generate additional release parcels in other embodiments. For brevity only one release parcel will be discussed herein as the DQS system is described. Notably when there are additional release parcels such release parcels may be generated simultaneously or may be generated independent of any other release parcel and the services and or objects and corresponding descriptions are included in each release parcel separately based upon a user input as described further herein.

In this regard the client computing device comprises Web browser logic . The user of the client computing device enters a URL in the Web browser logic which contacts the application logic . The application logic then transmits data indicative of user interfaces to the client computing device which the Web browser logic displays to the user. Such graphical user interfaces are for receiving information for generating the release parcel and such interfaces are described further herein.

In the present disclosure the release parcel comprises data identifying a dynamic query service DQS . To generate the release parcel the DQS computing device receives from the user not shown via Web browser logic on the client computing device data indicative of a DQS to be included in the release parcel . In one embodiment the user may desire to include a DQS in a release parcel so that the data source associated with the DQS can be accessed remote from the data source.

The user need not identify the data source computing device or and the corresponding data source or respectively. If the user does not identify the data source computing device or and the corresponding data source or respectively the application computing device creates a service that has a variable parameter entry field for identifying the data source computing device or and the corresponding data source or respectively.

However in some embodiments of the present disclosure the user does identify the data source computing device or and the corresponding data source or respectively. In such an embodiment the application computing device creates a DQS for the identified DQS that specifically connects to the data source identified.

In one embodiment the release parcel or is a Web services system. In such an embodiment the DQS computing device generates components not shown that define a Web services system including for example a WSDL file and wrapper logic not shown for communicating with e.g. transmitting messages to from the data sources and . Each of these components is described further with reference to .

When a particular release parcel is completed the application computing device deploys the release parcel to the DQS computing device based upon a user input. In this regard the user may designate that release parcel be generated and deployed to the DQS computing device . In one embodiment the application logic may display a list of computing devices to the user and the user selects from the list the computing device to which the user desires to deploy release parcel e.g. the DQS computing device .

As described hereinabove the client computing device comprises Web browser logic . The Web browser logic may be any type of logic for retrieving presenting and navigating throughout information resources identified by a URL over the network . The URL may identify an information resource that may be a Web page image video file or other piece of content. Such Web browser logic may be used to access the application logic of the application computing device and any services contained in the release parcel . Exemplary Web browsers include Netscape Internet Explorer or Mozilla Firefox . Such Web browser logic is described further herein.

Once the release parcel is deployed to the DQS computing device then services contained in the release parcel are ready for consumption. In order to consume the services contained in the release parcel Web services consuming software stored on Web services consuming software computing device can be used. In one embodiment the Web services consuming software is SOAPui. SOAPui which stands for Simple Object Access Protocol User Interface is a tool for testing and debugging Web services.

During operation the user would enter an operation to be performed on one of the data sources and . For example the user may enter an structured query language SQL statement for retrieving data from a table on the data source or . The Web services consuming software wraps the SQL statement in a SOAP request. The release parcel would then receive the data indicative of the operation and execute the operation on the data source. When data is received from the execution of the operation such data is then displayed to the user through the Web services consuming software .

In addition the DQS system further comprises a security computing device . The security computing device comprises security logic and authentication data . As described hereinabove during execution of the release parcel a user submits an operation that is to be performed on the data source or through the Web services consuming software to the release parcel . Such request in addition to comprising data indicative of the operation to be performed on the data source or would also include authentication data such as a username and password. Upon receipt of the username and password the release parcel requests authentication of the username and password from the security computing device . In operation the release parcel transmits a request comprising the authentication data to the security computing device . The security logic receives the request and compares the received authentication data with the authentication data stored in the security computing device . If a match is found the security logic transmits a response back to the release parcel indicating successful authentication.

In one embodiment in addition to containing authentication information such as valid usernames and corresponding passwords the authentication data further comprises a role associated with the username and password. In such an embodiment the security logic would transmit a response indicating that the provided username and password are valid and the response would further comprise data indicating the role associated with the username and password. Such username password and role association can be configured during the generation of the release parcel .

In such an embodiment the release parcel receives the response indicating that the username and password is valid and data indicative of the role associated with the username and password. The release parcel would then determine whether the user is authorized to execute the request sent from the Web services consuming software based upon the role contained in the response from the security computing device. In this regard when the release parcel is generated different roles may be associated with the release parcel and the different roles may define what services and or objects that the user having a particular role is allowed to access. Thus based upon the role the release parcel may limit the actions that the user can take through the Web services consuming software with respect to a particular data source and . Such process is described further herein.

The application computing device further comprises the application logic . The application logic can be software firmware hardware or any combination thereof. In the exemplary application computing device the application logic is shown as software stored in memory . In addition memory stores data indicative of the release parcel . Note that the present disclosure describes the generation of only the release parcel for brevity. Further note that other release parcels can be generated in a same or similar manner as the release parcel .

The application logic generates the release parcel . The release parcel comprises those components needed to execute a DQS. Such components include but are not limited to wrapper software WSDL software security interceptor logic authentication data and data source library data . WSDL is used for exemplary purposes only and other protocols may be used in other embodiments of the present disclosure.

The processing unit may be a digital processor or other type of circuitry configured to run the application logic by processing and executing the instructions of the application logic . The processing unit communicates to and drives the other elements within the application computing device via a local interface which can include one or more buses.

When stored in memory the application logic can be stored and transported on any computer readable medium for use by or in connection with an instruction execution system apparatus or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions. In the context of this document a computer readable medium can be any means that can contain or store the program for use by or in connection with the instruction execution system apparatus or device. The computer readable medium can be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium.

During operation the application logic discovers services and or objects available on the data source computing devices and corresponding data sources on the network . In one embodiment a user of the client computing device provides the application logic connection information corresponding to the data sources and . Such connection information includes the host name the port number and the database name. In another embodiment the application logic transmits a message over the network that is communicated to each internet protocol IP address on the network. In such an instance the message is a request for a response from data sources e.g. data sources and . The data sources on the network in response transmits a message to the application logic providing certain connection information e.g. information related to the host name the server name the port number on which the data source is running and the data source name.

In one embodiment the application logic comprises a Java Database Connectivity JDBC driver. In such an embodiment each of the data sources and further comprises a JDBC driver. The JDBC driver connects to the data source and implements the protocol for transferring a query and a result between the application logic and the data source and regardless of the type of data source. In order to discover services and or objects contained in the data source and a JDBC call may be made to the data source and and the data source and would return in response to the call all the services and or objects available in the data source and . The application logic stores such data identifying the discovered data sources and and available services and or objects as metadata .

In this regard the metadata comprises the connection information for the data source and . In addition for each data source and the metadata comprises data indicative of all the services and or objects available by the data source and . With respect to the services and or objects available by the data source and if the metadata defines functions and or procedures related to the data source the metadata further comprises inputs and or output of the functions and or procedures. In addition the metadata may further comprise credentials usernames and passwords related to the data source and .

Once the metadata has been obtained and stored on the application computing device the application logic then generates a release parcel based upon user input which is now described in detail. In this regard the application logic receives from a user of the client computing device data indicating that the user desires to create a DQS.

As indicated hereinabove the metadata comprises data indicative of the connection information e.g. host name port number and data source name for each of the data sources and . Thus once a user indicates that the user desires to create a DQS the application logic displays a list of the available data sources and to the user which the application logic retrieves from the metadata . The user then selects which data source and for which the user desires to create a DQS.

Once the user selects the data source and for which the user desires to create the DQS and the database user credentials the user then selects to generate the release parcel . Notably the user may elect to generate the release parcel or generate and deploy the release parcel which is described further herein.

In one embodiment the user enters data identifying the data source computing device or and data source or respectively for which the user desires to generate the DQS as described hereinabove. However if desired the user need not enter data identifying the data source computing device or and data source or . Instead the data source for the particular DQS being created can be a parameter that is entered when the DQS is executed through the Web services consuming software as described further herein.

Once the user elects to generate the release parcel the application logic generates the software and data including the WSDL software the wrapper software the data source library data the security interceptor software and the authentication data that make up the release parcel . Note that there is only one WSDL software wrapper logic data source library data and security interceptor software which would be the software needed to execute a single DQS. The release parcel may comprises additional WSDL software wrapper software data source library data and security interceptor software for executing additional DQS s in other embodiments. For brevity and simplicity the description of the software generation for the release parcel is described further herein to include the software needed for executing a single DQS.

The application logic generates the data source library data by placing in the data source library data the connection information for the data source and or that was selected by the user. If the user did not select a particular data source and the application logic stores as the data source library data the connection information for all the data sources and available as indicated in the metadata .

The application logic also generates the WSDL software for the DQS for the selected data source and and its services and or objects described in the metadata . In this regard the application logic customizes predefined WSDL software with parameters taken from the metadata . As an example the predefined WSDL software may be XML software for defining a Web service. The application logic generates the WSDL software by using the predefined software and inserting specific data related to the services and or objects contained in the metadata for the particular data source. In this regard the WSDL software describes the actual functions that are available for the data source and . The WSDL software created is XML based software that provides a model for describing each of the Web services created for the data source and and the services and or objects included for the data source and in the metadata . In this regard the WSDL software generated is XML based software for the data source and selected that provides the model for describing the services and or objects available by the data source and . The WSDL software comprises data indicative of each of the services and or objects available the methods available for the services including the input and output parameters for the methods and the return format for data that is received and all such information is obtained from the metadata to generate the XML based software in the WSDL software . Thus upon execution of the release parcel the WSDL software will inform the Web services consuming software e.g. SOAPui that is executing the release parcel how to talk with the various services contained in the release parcel. For example the WSDL software tells the Web services consuming software the operations that can be performed on the data source and how to connect to the data source and and what to expect back after the operation is performed. Note that SOAPui is an open source tool for testing and debugging Web services.

The application logic further generates the wrapper software . In this regard the application logic customizes predefined wrapper software with parameters taken from the metadata . As an example the predefined wrapper software may be Java software for translating an SQL statement into a JDBC call. The application logic generates the wrapper software by using the predefined software and inserting specific data related to the services and or objects contained in the metadata for the particular data source. The wrapper software allows the Web services consuming software e.g. SOAPui to execute a Web service defined in the WSDL data . In this regard the Web services consuming software analyzes the WSDL data in order to know how to interact with the wrapper software. The Web services consuming software submits a request to the wrapper software in accordance with the WSDL data and the wrapper software and then generates a call to the data source and for the request received from the Web services consuming software . In the example where SOAPui is the end application the user during execution would submit a request in the SOAP language which contains a user supplied structured query language SQL statement. The wrapper software would receive such request and convert such request into a JDBC call which can be understood by the data source and . Once the wrapper logic receives a request from the end application the wrapper logic obtains from the data source library data the connection information for the request received from the end application.

As an example assume that the data source or is an Oracle database. The SOAPui would receive from the user a SQL statement. For example the SQL statement may be select from tablename. The SOAPui passes the SQL statement in as a parameter to the wrapper software . The wrapper software then facilitates connecting to the database based upon the connection information contained in the data source library data .

Once it knows the connection information for the data source and that it is to connect to for the request the wrapper software transmits a request containing data indicating the operation to be performed on the data source or the username and password supplied to the Web services consuming software and the connection information. The security interceptor software then determines whether the user that is making the call has the credentials to make such call.

The security interceptor software is software that is also generated by the application logic . In this regard the security interceptor logic contains predefined software for authenticating authorizing and executing a JDBC call that is transmitted to the security interceptor software by the wrapper logic . Specific data for connecting to the data source and is inserted into the predefined software when the security interceptor software is generated. Notably the security interceptor logic authenticates the username and password with the security computing device . In this regard the security interceptor software generates a request that contains the username and password and transmits the request to the security computing device . The security logic receives the request and verifies that the username and password are valid in the username password data . As described hereinabove the username password data may further associate with the username and password received a particular role. The security logic transmits a response back to the security interceptor software that contains data indicating whether the username and password are authenticated and data indicative of the role associated with the user name and password.

The security interceptor software receives the response from the security logic . The authentication data comprises data identifying one or more roles for the release parcel . Associated with each role is data identifying the permissions that the particular role has with respect to the release parcel . Thus once the security interceptor software receives the response the security interceptor software determines based upon the role indicated in the response whether the user associated with the username and password and corresponding role is authorized to perform the operation contained in the request sent from the wrapper software . If the user does have the credentials the security interceptor software then connects to the data source and so that the operation can be executed on the data source and .

As described above in order for DQS computing device to use DQS s in a release parcel the release parcel is exposed to the DQS computing device . To expose the release parcel to the DQS computing device the release parcel is deployed to the DQS computing device . In this regard the release parcel is transmitted to the DQS computing device over the network and stored for consumption by the Web services consuming software described further with reference to . Note that the release parcel may be in the form of a .war file Web Archive file or a .ear Enterprise Archive file .

The processing unit behaves substantially identical to the processing unit described with reference to . In this regard the processing unit communicates to and drives the other elements within the DQS computing device via a local interface which can include one or more buses.

During operation the user runs the Web services consuming software on the Web services consuming software computing device . Note that the Web services consuming software may be any logic that is capable of executing i.e. running Web services. The user would then point to the WSDL software and the Web services consuming software would parse the WSDL software to determine how to interact with the Web service.

The Web services consuming software displays data indicative of the DQS related to the identifier entered. In this regard the Web services consuming software computing device may display the service identifier and its associated methods i.e. functions that can be performed on an external data source or . The user may select one of the functions for example one of the functions may receive as input an identifier identifying an data source or and receive a structured query language SQL statement for performing on the identified data source or .

Once the external data source identifier and the SQL statement are entered the Web services consuming software transmits the identifier and the SQL statement entered to the wrapper software . The wrapper software retrieves the connection information for the identified Web service from the data source library data and transmits a JDBC call indicative of the SQL statement to the security interceptor software which ensures that the user has access to the data source for the particular Web service that is being consumed as described hereinabove.

The security interceptor software then transmits the SQL statement to the identified data source or . The data source computing device or runs the SQL statement on the identified external data source or and returns data responsive to the SQL statement to the wrapper software . The wrapper software transmits the data responsive to the SQL statement to the Web services consuming software and the Web services consuming software displays the responsive data to the display device .

In order to create a DQS a user not shown selects the Add New Dynamic Query Service link . In response the application logic displays the Build a Dynamic Query Service GUI depicted in which is described further herein.

The Service Manager Workbench GUI further comprises a Releases tag corresponding to a check box . When the check box is selected releases that have already been generated in the DQS system appear in the list e.g. ReleaseA and ReleaseB which correspond to check boxes and respectively.

In the exemplary GUI depicted in the check box has been selected. When the check box has been selected a list of all the DQS services that have been added to the ReleaseB are listed e.g. ServiceA and ServiceB which correspond to check boxes and respectively. In order to add a DQS to a release the user would select the box corresponding to the DQS in the Objects list select the box corresponding to the release in which the user desires the DQS to be included and select the arrow button . The DQS selected would then be added to the release. In this regard the application logic would generate metadata that associates the selected DQS with the selected release. In order to remove a DQS from a release the user would select the box corresponding to the DQS in the Releases list and select the arrow button which would remove the service from the release. In this regard the application logic would disassociate the selected DQS from the release in the metadata .

As indicated hereinabove in order to create a DQS the user selects the Add New Dynamic Query Service link . In response the application logic displays the Build a Dynamic Query Service GUI depicted in . GUI comprises a text field and the user can enter data indicative of a DQS Identifier identifying a Service Name to be associated with the DQS being created. In addition the user can enter data in text field indicative of the Service Description. In one embodiment entry of Service Description data is optional.

The GUI further comprises a pull down menu for selecting data related to the Database Gateway that the user desires to be associated with the DQS being created. When the pull down menu is selected the application logic displays a Allow User to Provide Gateway selection and further displays a list of all existing databases that have been configured in the application logic which were discovered in the discovery process described hereinabove. For example GUI lists DatabaseA or DatabaseB. Thus the user can select one of the listed databases to associate with the DQS that is being created. Two databases e.g. DatabaseA or DatabaseB are shown for exemplary purposes. Any number of databases may be listed in the pull down menu depending upon the number of data sources that have been discovered in the discovery process described further hereinabove.

If the user selects Allow User to Provide Gateway the application logic generates a DQS where no particular external data source is specified. Instead a user can enter an identifier into a parameter when using the Web services consuming software for identifying an data source when the DQS is executed. Thus when the Web services consuming software displays data related to a function of the particular DQS there is a modifiable parameter in which the user can specify the data source or for which the user desires to run the function.

The user can select one of the listed databases to use for the DQS that is being created. If the user selects one of the listed databases when the release parcel is generated the connection information for the selected database is included in the data source library data . The wrapper software then uses the connection information for the database selected when the wrapper software receives a request to perform an operation on the database to generate the request that is transmitted to the security interceptor software .

If the user specifies Allow User to Provide Gateway when the release parcel is generated that includes the DQS connection information for all of the data sources and that are found in the discovery process are included in the data source library data . Thus when the wrapper software receives a request from the Web services consuming software to perform an operation on a database which is specified in the request the wrapper software can locate the connection information for the particular database specified in the request in the data source library data . The wrapper logic can then use the connection information to generate the request that is then transmitted to the security interceptor software .

Once the user has entered the information into the GUI the user selects the Create Save Service button . When the button is selected the application logic creates the information in the metadata related to the DQS that is created that is then used when a release parcel is generated that includes the DQS that is created.

Further once the DQS has been created and saved by selection of the Create Save Service button when the user returns to the Service Manager Workbench GUI depicted in the DQS created now appears in the Objects list.

In addition from the Service Manager Workbench GUI the user can select one of the releases for example ReleaseB link . When selected the application logic displays the Release Information GUI depicted in . The Release Information GUI allows the user to set up security on the release level. In this regard the Release Identifier is depicted in text field . The user can then select radio button or to select whether security will be applied and to what role security will be applied e.g. Administrator corresponding to check box or Read Only Access corresponding to check box .

Note that the roles available e.g. Administrator and Read Only Access have been pre configured in the DQS system . While only two roles are shown the DQS system may have any number of different roles and the user can identify security policies for each role. As described hereinabove if security is applied to a release the username and password will be supplied when the release parcel is executed by the Web services consumption software . Thus when the user of the release parcel requests an operation on a database through the DQS that is included in the release parcel the user will supply the username and password. The wrapper software will generate the call to the security interceptor software which includes for example the SQL statement provided in the Web services consumption software . In addition the call to the security interceptor software will include the username and password and the connection information obtained from the data source library data .

In addition security can be configured for a DQS in addition to configuring security for an entire release. In this regard from the Service Manager Workbench GUI the user can select a particular DQS link for example Dynamic Query Service A link . When the user selects the link the application logic displays the Service Information GUI depicted in .

The Security Information GUI comprises a Release Identifier e.g. ReleaseB that identifies the release that the DQS is in. In addition the GUI comprises a Service Identifier text field that identifies the DQS. In addition the GUI comprises a Permissions for Role pull down menu and an Execute All Methods selection box and MethodA and MethodB selection boxes and respectively. Note that two method selection boxes and are shown for exemplary purposes. The number of method boxes and that will be displayed by the application logic in the list will be the number of methods that are contained in the metadata associated with the DQS that is identified in text field .

The user can then select the pull down menu . The pull down menu comprises a listing of all the roles that have been configured using the application logic . The user can then select for the role selected those methods that the role has access to. Such role method data is stored as authorization data .

As described hereinabove a user is associated with a username and password which is then associated with a role. When the username and password are authenticated with the security computing device the security logic transmits data indicating whether authentication has passed or failed and data indicative of the role associated with the username and password. Thus once the security interceptor software receives the authentication from the security computing device the security interceptor logic can look up the role in the authorization data to determine if the operation that the user desires to perform as indicated in the request from the wrapper software is allowed based upon the role assigned to the username and password. Such role assignment to the username and password is preconfigured in the application logic .

Once the user has selected all the DQSs that the user desires to be included in the release parcel then user then generates and deploys the release parcel . In this regard the application logic displays GUI depicted in . GUI enables the user to generate a release parcel and or deploy a release parcel to a particular DQS computing device . In this regard GUI comprises check boxes and for selecting ReleaseA and or ReleaseB. The user can then select the action that is to be performed for the selected release. In this regard the GUI comprises selectable buttons so that the user can indicate whether to Generate Deploy or Generate and Deploy respectively. The user then selects the Generate Deploy pushbutton .

If the user selects the Generate Deploy pushbutton the application logic generates the selected release parcel i.e. ReleaseA or ReleaseB. Once the release parcel is generated the application logic then deploys the release parcel selected to the DQS computing device . Further if the deploy button is selected the application logic deploys the selected release parcel i.e. ReleaseA or ReleaseB. In this regard the application logic deploys the selected release parcel i.e. ReleaseA or ReleaseB to the DQS computing device .

Note that the application logic generates the release parcel that includes the data source library data the wrapper software the security interceptor software the authorization data and the WSDL software for the DQS. Further note as described hereinabove the WSDL software is written in a WSDL format although other formats are possible in other embodiments. The WSDL software comprises an identifier of the DQS and all methods associated with the DQS e.g. getFullSet as described hereinabove.

As an example a company may have a plurality of data sources and connected to the network . The databases may be for example an employee database that comprises employee names and corresponding identification information related to each of the employees. Another database may be a client database that comprises client names and corresponding identification information related to each of the clients. The employee database and the client database may be different types of databases that are accessed with differing protocols. The application logic would contact both the employee database and the client database and store the connection information for each database.

The application logic receives from a user not shown data identifying a DQS to generate in step . In this regard the user may desire to generate a DQS that is associated with a particular data source and . Thus the application logic further receives from the user data identifying one of the data sources and discovered in the discovery process in step . Such DQS when generated included in a release parcel and deployed allows the user access to the data source and through the release parcel by use of the Web services consuming software .

In the example provided the user may desire to create a DQS for the employee database. In this regard the user would identify the employee database with a DQS identifier.

In response to a user selection the application logic then adds the DQS to a release parcel in step . In this regard the metadata simply associates the generated DQS with the release parcel .

In the example provided the user may desire to add to a release parcel the DQS associated with the employee database. The user would so indicate in the graphical user interfaces and the application logic would associate the DQSs with the selected release parcel in the metadata .

In response to a user selection the application logic then generates the release parcel in step . In this regard the application logic generates the software that is included in the release parcel that allows the user access to the selected data source and from the Web services consuming software . In one embodiment the software generated includes the WSDL software the wrapper software the data source library data the security interceptor software and the authorization data .

In the example provided the application logic generates WSDL software that defines a particular set of methods for the identified service. Such WSDL software would define the method including the inputs and outputs. In addition the application logic generates the data source library data that contains the connection information for the employee database. Additionally the application logic generates the wrapper software for translating an SQL statement into a JDBC call for the data source selected. Further the application logic generates security interceptor software for authenticating and authorizing the operation and for executing the JDBC on the selected data source.

The application logic then receives data indicative of one or more DQS computing devices to which to deploy the generated release parcel in step . Notably the release parcel can be deployed to a plurality of DQS computing devices . However for simplicity only one DQS computing device is shown in .

The application logic then deploys the release parcel to the identified DQS computing device in step . In this regard the application logic transmits the release parcel over the network to the DQS computing device .

Once the user enters the SQL statement into the Web services consuming software the Web services consuming software passes the SQL statement and any other arguments e.g. a data source identifier to the wrapper logic in step . The wrapper logic then looks up the connection information for the SQL statement for the data source either the single data source or the identified data source in the data source library data in step .

The wrapper logic then generates a JDBC call for the SQL statement in step . In the JDBC call generated the connection information obtained from the data source library data is included in the JDBC call.

The wrapper logic then passes the JDBC call including the connection information to the security interceptor software in step . As described hereinabove the security interceptor logic then authenticates the user in step . In this regard the security interceptor software may transmit an authentication request to the security computing device and the security computing device response to the request indicates whether the username and password are validated and indicates a role associated with the username and password.

In step the security interceptor software authorizes the operation on the data source and based upon the role submitted in the response from the security computing device . In this regard the authorization data comprises data that identifies the plurality of available roles and corresponding to each role is a plurality of services and or objects that the user is authorized to access on the data source and . If the services and or object contained in the SQL statement is authorized for the role the security interceptor software runs the query on the data source and in step . In step the data source and on which the query is run returns the results of the query. In step the Web services consuming software displays the results of the query to the user.

