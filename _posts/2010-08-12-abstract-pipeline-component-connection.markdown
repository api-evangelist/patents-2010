---

title: Abstract pipeline component connection
abstract: The subject disclosure pertains to systems and methods for connecting pipeline components such as data flow pipeline components. Pipeline components are wrapped in metadata components that include the component as well as abstracted metadata in the form of input and output metadata descriptors. A connector can arbitrate metadata differences between pipeline components based on the metadata descriptors, thereby preventing upstream modifications from invalidating or breaking components downstream. Native or plug-in heuristic and/or related components can provide the functionality necessary to resolve metadata differences.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08103684&OS=08103684&RS=08103684
owner: Microsoft Corporation
number: 08103684
owner_city: Redmond
owner_country: US
publication_date: 20100812
---
This application is a continuation of application Ser. No. 11 330 842 filed Jan. 12 2006 and entitled ABSTRACT PIPELINE COMPONENT CONNECTION. The foregoing is incorporated herein by reference in its entirety.

Data integration technologies facilitate providing and managing meaningful information to obtain a competitive business advantage for example by harnessing historical data to aid future decisions. At the core integration technologies are systems and methods to extract transform and load ETL data. Data can be provided from myriad sources including enterprise resource planning ERP and customer relation management CRM applications as well as flat files and spreadsheets among others. Extraction mechanisms can retrieve data from several different sources. After data is extracted it can be transformed into a consistent format associated with a target repository. Some data may only need to be reformatted during the transformation process. However other data may need to be cleansed for instance of duplicates. Subsequently data can be loaded into a data warehouse data mart or the like where the data can be mined and otherwise analyzed to retrieve beneficial information.

More than half of an extract transform and load process typically needs to be custom programmed for an organization. In one conventional implementation packages are central to such a program and represent a unit of work that can be independently retrieved executed and or saved. Furthermore the package serves as a container for all other elements broadly characterized as control flow or data flow.

Control flow elements dictate processing sequence in a package and can include one or more containers to define package structure tasks that define package functionality or work and precedent constraints that link executables containers and tasks and specify the order of execution of the linked objects. Control flow elements prepare or copy data interact with other processes or implement repeating workflow.

Data flow elements including source adapters transformations and destination adapters as the name suggests define the flow of data in a package that extracts transforms and loads data. Source adapters make data available to a data flow. Transformations perform modifications to data such as aggregation average sum merging of multiple input data sets distribution to different outputs and data type conversion. Destination adapters load output of the data flow into target repositories such as flat files databases or memory.

A data flow pipeline employs multiple elements or components tied together via collections of metadata. A data flow pipeline or diagram thereof can include components and paths that define how the data moves through or with respect to a task. For example if a task corresponds to reading a text file that has rows and columns of information for an employee there could be a file full of row information such as first name last name social security number and the like. Here each column has metadata associated with it such as name is a string and age is a number for example. This metadata is important to the data flow because it tells an engine that is moving the data and components that are acting on the data what types of operations can be performed successfully on that data. As per the aforementioned example it is appreciated that different operations can be executed on numbers and strings. If the metadata changes then actions down stream will break. For instance assume one starts with a column age that is a number and down stream a component uses the age to compute an average age. If the column data is amended subsequently to be a string the data flow will break as the average operation cannot compute the average of a string. To remedy this situation a user will conventionally fix the components manually to account for the metadata change.

The following presents a simplified summary in order to provide a basic understanding of some aspects of the claimed subject matter. This summary is not an extensive overview. It is not intended to identify key critical elements or to delineate the scope of the claimed subject matter. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

Briefly described the subject innovation pertains to pipeline components and connections amongst such components. According to an aspect of the innovation conventional pipeline components are isolated from a pipeline by wrapping them in a metadata component. Each metadata component can then include two metadata descriptor components one for input and for output. Hence metadata is abstracted or withdrawn from pipeline components and made available.

In accordance with another aspect of the subject innovation a connector component is disclosed that can reside between metadata components. The connector provides a link between metadata components. Moreover the connector can serve as an arbitrating element utilizing metadata descriptors for instance when upstream metadata changes.

In accordance with yet another aspect of the subject innovation the connector component can employ various heuristics or heuristic components for resolving mismatches in metadata caused by upstream changes. For example heuristics including pass through connect like names connect like types and connect like names and types can be applied with respect to metadata descriptors to attempt to reconnect or arbitrate differences.

According to still another aspect of the subject innovation extensibility is supported. In particular systems and methods are provided to facilitate design and customization of heuristic and or related components. Additionally or alternatively the subject innovation can support and consume plug in or third party heuristics and or related components.

To the accomplishment of the foregoing and related ends certain illustrative aspects of the claimed subject matter are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the subject matter may be practiced all of which are intended to be within the scope of the claimed subject matter. Other advantages and novel features may become apparent from the following detailed description when considered in conjunction with the drawings.

The various aspects of the subject innovation are now described with reference to the annexed drawings wherein like numerals refer to like or corresponding elements throughout. It should be understood however that the drawings and detailed description relating thereto are not intended to limit the claimed subject matter to the particular form disclosed. Rather the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the claimed subject matter.

As used in this application the terms component and system and the like are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an instance an executable a thread of execution a program and or a computer. By way of illustration both an application running on a computer and the computer can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

The word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs. Furthermore examples are provided solely for purposes of clarity and understanding and are not meant to limit the subject innovation or portion thereof in any manner. It is to be appreciated that a myriad of additional or alternate examples could have been presented but have been omitted for purposes of brevity.

It should be noted that use of the word pipeline or variations in form thereof is not necessarily limited to a serial approach. The term is meant to broadly refer to any dataflow arrangement unless otherwise noted.

Artificial intelligence based systems e.g. explicitly and or implicitly trained classifiers can be employed in connection with performing inference and or probabilistic determinations and or statistical based determinations as in accordance with one or more aspects of the subject innovation as described hereinafter. As used herein the term inference or infer refers generally to the process of reasoning about or inferring states of the system environment and or user from a set of observations as captured via events and or data. Inference can be employed to identify a specific context or action or can generate a probability distribution over states for example. The inference can be probabilistic that is the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher level events from a set of events and or data. Such inference results in the construction of new events or actions from a set of observed events and or stored event data whether or not the events are correlated in close temporal proximity and whether the events and data come from one or several event and data sources. Various classification schemes and or systems e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines . . . can be employed in connection with performing automatic and or inferred action in connection with the subject innovation.

Furthermore all or portions of the subject innovation may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed innovation. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media.

For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick key drive . . . . Additionally it should be appreciated that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN . Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Turning initially to a pipeline system is illustrated in accordance with an aspect of the subject innovation. The pipeline system can be but is not limited to a data flow pipeline system for moving data from a source to a destination and manipulating data along the way. The system includes at least two metadata components and a connector component . The metadata components are special pipeline components such as data flow components including but not limited to source adapters transformations and destination adapters. The connector component connects or links metadata components together. In other words connector component facilitates communication between metadata components . Additionally connector component can arbitrate metadata differences between metadata components. Data types forms or other metadata can be manipulated into other metadata on the fly without user intervention. Accordingly metadata can be altered in such a way that changes to one component up stream will not cause a break with respect to down stream components. The change is effectively hidden from down stream components.

By way of example and not limitation consider a data flow where columns have metadata last name first name and age. Subsequently there is a change in the upstream data for example a different table is employed that has the same types of fields but in a different order such as age first name and last name. Conventionally everything downstream would break because the components expect first name a string initially but instead receive age an integer. There is a metadata disconnect. In this instance the connector component could simply find like names. There is an age in the new metadata and an age in the old metadata it is simply in a different position. Accordingly the connector component can automatically alter the positional location so that it looks to the components down stream as if nothing happened upstream. More specifically data would be transmitted as last name first name and age.

Metadata conventionally and solely the concern and responsibility of the policy component is abstracted out or externalized. Stated differently the pipeline component is wrapped with metadata and to form metadata component . These pipeline components are somewhat isolated from other components as there is a layer of abstraction between pipeline components . As opposed to the present convention where the past defines metadata flow now there is an abstraction such that metadata that is presented to a pipeline component is not necessarily the metadata of the previous component. The pipeline component only sees a specific look of the metadata that it requires.

The receiver component receives retrieves or otherwise obtains or acquires data and metadata from one or more metadata components . More specifically the receiver component can acquire metadata from the output descriptor associated with a particular upstream metadata component and the input descriptor related to a linked downstream metadata component. The receiver component can provide obtained data and metadata to execution component for processing.

Execution component is communicatively coupled to one or more heuristic components contained within or external to the execution component . A heuristic component provides information and or functionality that dictates how metadata mismatches are to be resolved. Execution component can interact with the one or more heuristic components to receive and execute the functionality provided thereby in conjunction with the obtained data and metadata. Metadata upstream can be completely different from metadata downstream yet the connector component can manipulate it so that it looks the same and meets the requirements of metadata component. By way of example and not limitation a data type can be changed from a string to an integer or XML eXtensible Markup Language can be converted to binary columer of flat file format. The execution component can provide arbitrated data concurrently or subsequently to the transmission component for transmission to a downstream component.

Turning to a heuristic component is illustrated in accordance with an aspect of the innovation. The heuristic component can include logic component and reasoning component . Logic component provides set logic or algorithms for arbitrating metadata mismatches. For example logic component can execute heuristics that allow pass through i.e. direct mapping connection of like names connection of like types and connection of like names and types. By way of example a connection of like names heuristic may indicate that data indicated as last name family name or surname is the same. Accordingly metadata describing data such as a last name in one component could be mapped to surname metadata in a downstream component. Similarly if age is of type string with respect to an upstream component but represented as an integer in a downstream component the heuristic could perform a conversion from string to integer.

More advanced techniques can be provided by the reasoning component . The reasoning component can reason or infer as that term is described herein for instance utilizing artificial intelligence knowledge based systems machine learning and the like. Accordingly a heuristic component via the reasoning component can analyze metadata e.g. provided by descriptors associated with a source and a target and automatically resolve any differences. In essence the heuristic component can detect the kind of data being provided on one side or upstream and the kind of data required on another side or downstream and determine an algorithm to appropriately map data or call or import an appropriate heuristic or other data to transform the data.

The heuristic component can also include a reference component communicatively coupled to either or both of the logic component and the reasoning component . The reference component can retrieve receive or otherwise acquire or identify reference data and provide or make available such data to either or both of components and . Reference data can be any data or information that is useful in resolving metadata differences. By way of example and not limitation the reference data could correspond to a mapping or schema for a particular domain. The heuristic component could point to or reference such a schema and make use of such data in arbitrating metadata differences. For instance if the heuristic component detects that data needs to be transformed from a flat file format to XML an XML schema can be referenced and employed to facilitate such translation.

The interface component is communicatively coupled to a generation component . The based on data or information provided via the interface component the generation component can produce a heuristic component . Additionally or alternatively a mapping or schema component can be produced by generation component . As described supra a heuristic component can employ a mapping or schema to facilitate resolution of metadata conflicts or mismatches. Once a heuristic component and or mapping component are generated they can be made available for employment for instance by a connector component.

In addition to or in the alternative it should be appreciated that the system can also enable modification of heuristic and mapping components. As illustrated the interface component can also be communicatively coupled to both the heuristic component and the mapping component . Changes can be specified via interface component and communicated to the generation component . The generation component can then amend particular components or generate new components with the changes incorporated therein.

As an example of third party heuristic use assume a connector initial employs two heuristic such as straight across and name matching. Also assume that it turns out that many flat files are being read where flat files are all text. However there is a large quantity of text in flat files that are really numbers but they are represented as text. Hence a new heuristic could be generated that takes text that is know to actually be a number and maps that string column to an integer column in a table. Once this heuristic is developed it can be provided to a pipeline system for consumption by a connector component.

The aforementioned systems have been described with respect to interaction between several components. It should be appreciated that such systems and components can include those components or sub components specified therein some of the specified components or sub components and or additional components. Sub components could also be implemented as components communicatively coupled to other components rather than included within parent components. Further yet one or more components and or sub components may be combined into a single component providing aggregate functionality. The components may also interact with one or more other components not specifically described herein for the sake of brevity but known by those of skill in the art.

Furthermore as will be appreciated various portions of the disclosed systems above and methods below may include or consist of artificial intelligence machine learning or knowledge or rule based components sub components processes means methodologies or mechanisms e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines classifiers . . . . Such components inter alia can automate certain mechanisms or processes performed thereby to make portions of the systems and methods more adaptive as well as efficient and intelligent. By way of example and not limitation the reasoning component can employs such mechanisms with respect to automatically resolving metadata mismatches.

In view of the exemplary systems described supra methodologies that may be implemented in accordance with the disclosed subject matter will be better appreciated with reference to the flow charts of . While for purposes of simplicity of explanation the methodologies are shown and described as a series of blocks it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks may occur in different orders and or concurrently with other blocks from what is depicted and described herein. Moreover not all illustrated blocks may be required to implement the methodologies described hereinafter.

Additionally it should be further appreciated that the methodologies disclosed hereinafter and throughout this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methodologies to computers. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media.

Turning to a pipeline interaction methodology is depicted in accordance with an aspect of the subject invention. At reference numeral pipeline components are wrapped in metadata components. Stated differently the metadata associated with a component is abstracted or made visible to other components. This creates a separation between a pipeline component and the rest of the pipeline. At reference numeral metadata differences are arbitrated between upstream and downstream pipeline components. More specifically the arbitration process can resolve mismatches in metadata. Accordingly metadata is isolated from components in such a way that the component only sees a specific look of the metadata. These pieces of metadata can be altered such that if metadata changes between one component and another the connector will allow the break to be hidden rather than having components downstream break.

As an example of a connect like names heuristic assume a pipeline component is initially set up to process data in the form first name last name and age and this is later changed to age first name last name. There is a disconnect based on order. However this can be resolved by matching like names here the old and new ages and other data and reordering the data.

At reference number data such as arbitrated data is transmitted from the first to the second component. In the above example the reordered data would be transmitted from the first to second component thereby preventing a break.

In order to provide a context for the various aspects of the disclosed subject matter as well as the following discussion are intended to provide a brief general description of a suitable environment in which the various aspects of the disclosed subject matter may be implemented. While the subject matter has been described above in the general context of computer executable instructions of a computer program that runs on a computer and or computers those skilled in the art will recognize that the subject innovation also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures etc. that perform particular tasks and or implement particular abstract data types. Moreover those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations including single processor or multiprocessor computer systems mini computing devices mainframe computers as well as personal computers hand held computing devices e.g. personal digital assistant PDA phone watch . . . microprocessor based or programmable consumer or industrial electronics and the like. The illustrated aspects may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the claimed innovation can be practiced on stand alone computers. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

With reference to an exemplary environment for implementing various aspects disclosed herein includes a computer e.g. desktop laptop server hand held programmable consumer or industrial electronics . . . . The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available microprocessors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .

The system bus can be any of several types of bus structure s including the memory bus or memory controller a peripheral bus or external bus and or a local bus using any variety of available bus architectures including but not limited to 11 bit bus Industrial Standard Architecture ISA Micro Channel Architecture MSA Extended ISA EISA Intelligent Drive Electronics IDE VESA Local Bus VLB Peripheral Component Interconnect PCI Universal Serial Bus USB Advanced Graphics Port AGP Personal Computer Memory Card International Association bus PCMCIA and Small Computer Systems Interface SCSI .

The system memory includes volatile memory and nonvolatile memory . The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory . By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable ROM EEPROM or flash memory. Volatile memory includes random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM and direct Rambus RAM DRRAM .

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example disk storage . Disk storage includes but is not limited to devices like a magnetic disk drive floppy disk drive tape drive Jaz drive Zip drive LS 100 drive flash memory card or memory stick. In addition disk storage can include storage media separately or in combination with other storage media including but not limited to an optical disk drive such as a compact disk ROM device CD ROM CD recordable drive CD R Drive CD rewritable drive CD RW Drive or a digital versatile disk ROM drive DVD ROM . To facilitate connection of the disk storage devices to the system bus a removable or non removable interface is typically used such as interface .

It is to be appreciated that describes software that acts as an intermediary between users and the basic computer resources described in suitable operating environment . Such software includes an operating system . Operating system which can be stored on disk storage acts to control and allocate resources of the computer system . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It is to be appreciated that the present invention can be implemented with various operating systems or combinations of operating systems.

A user enters commands or information into the computer through input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner TV tuner card digital camera digital video camera web camera and the like. These and other input devices connect to the processing unit through the system bus via interface port s . Interface port s include for example a serial port a parallel port a game port and a universal serial bus USB . Output device s use some of the same type of ports as input device s . Thus for example a USB port may be used to provide input to computer and to output information from computer to an output device . Output adapter is provided to illustrate that there are some output devices like displays e.g. flat panel and CRT speakers and printers among other output devices that require special adapters. The output adapters include by way of illustration and not limitation video and sound cards that provide a means of connection between the output device and the system bus . It should be noted that other devices and or systems of devices provide both input and output capabilities such as remote computer s .

Computer can operate in a networked environment using logical connections to one or more remote computers such as remote computer s . The remote computer s can be a personal computer a server a router a network PC a workstation a microprocessor based appliance a peer device or other common network node and the like and typically includes many or all of the elements described relative to computer . For purposes of brevity only a memory storage device is illustrated with remote computer s . Remote computer s is logically connected to computer through a network interface and then physically connected via communication connection . Network interface encompasses communication networks such as local area networks LAN and wide area networks WAN . LAN technologies include Fiber Distributed Data Interface FDDI Copper Distributed Data Interface CDDI Ethernet IEEE 802.3 Token Ring IEEE 802.5 and the like. WAN technologies include but are not limited to point to point links circuit switching networks like Integrated Services Digital Networks ISDN and variations thereon packet switching networks and Digital Subscriber Lines DSL .

Communication connection s refers to the hardware software employed to connect the network interface to the bus . While communication connection is shown for illustrative clarity inside computer it can also be external to computer . The hardware software necessary for connection to the network interface includes for exemplary purposes only internal and external technologies such as modems including regular telephone grade modems cable modems power modems and DSL modems ISDN adapters and Ethernet cards or components.

The system includes a communication framework that can be employed to facilitate communications between the client s and the server s . The client s are operatively connected to one or more client data store s that can be employed to store information local to the client s . Similarly the server s are operatively connected to one or more server data store s that can be employed to store information local to the servers .

What has been described above includes examples of aspects of the claimed subject matter. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the claimed subject matter but one of ordinary skill in the art may recognize that many further combinations and permutations of the disclosed subject matter are possible. Accordingly the disclosed subject matter is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the terms includes has or having or variations in form thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

