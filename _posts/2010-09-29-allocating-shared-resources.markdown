---

title: Allocating shared resources
abstract: Disclosed are various embodiments for allocating shared resources. A request to allocate a shared isolating resource is received. The shared isolating resource operates to isolate a plurality of customer resources in a multi-tenant environment. In response to the request to allocate, a least recently deallocated shared isolating resource is removed from a pool of available shared isolating resources. The least recently deallocated shared isolating resource is provided to at least one device using the shared isolating resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08695079&OS=08695079&RS=08695079
owner: Amazon Technologies, Inc.
number: 08695079
owner_city: Reno
owner_country: US
publication_date: 20100929
---
Through a technology known as cloud computing customers now have access to vast amounts of computing resources such as storage space and compute power as well as services using these resources such as on demand backup. Providers of these computing resources utilize various types of computing and network devices to implement these services. To make a service accessible to a particular customer while keeping that service separate from other customers the providers typically provision the computing and network devices so that certain devices share resources or identifiers. However a malfunctioning device that does not use the proper identifier as intended can result in one customer having access to a computing resource of another customer.

The present disclosure relates to allocating resources that are shared among multiple devices. These shared resources operate to isolate customer resources in a multi customer or multi tenant environment. These customer resources are made available to customer devices through a service gateway. Availability of the shared resources is managed by a shared resource allocator which manages a pool of available shared resources for each type of resource. The shared resources are allocated on a least recently used basis where in this context used means deallocated. That is the next resource to be allocated is the one that was deallocated longest ago. Using a least recently deallocated allocation scheme allows a greater time to pass before a particular resource is used again relative to other allocation schemes. This increased time increases the probability that improper use of a deallocated resource by a malfunctioning device can be discovered and addressed.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing device one or more computing devices and at least one computing device . The computing device is in data communication with customer devices by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing device the computing device and the computing device may be operated by a cloud computing service provider. The computing device or may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. A plurality of computing devices together may comprise for example a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. Furthermore the device may take the form of a network device such as a router bridge switch security gateway virtual private network gateway etc. and may incorporate specialized hardware. For purposes of convenience the computing device the computing device and the computing device are referred to herein in the singular. Even though these computing devices are referred to in the singular it is understood that a plurality may be employed in the various arrangements as described above.

Various applications and or other functionality may be executed in the computing device the computing device and the computing device according to various embodiments. Also various data is stored in a data store that is accessible to the computing device . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing device for example include a service gateway . The service gateway is executed to provide resources or services to the customer devices . Examples of such resources include storage and compute resources among others. Examples of such services include a virtual private network VPN a virtual private cloud VPC an on demand storage device etc. The components executed on the computing device may also include other applications services processes systems engines or functionality not discussed in detail herein.

The components executed on the computing device for example include a shared resource allocator and a consistency checker . The components executed on the computing device may also include other applications services processes systems engines or functionality not discussed in detail herein. The data stored in the data store includes data accessed by the shared resource allocator for example shared resource pools as well as potentially other data. In various embodiments the shared resource allocator and the consistency checker may utilize any type of middleware framework to communicate with a client application executing on a customer device or with other applications executing on the computing device and the computing device . Examples of such frameworks include remote procedure calls simple object access protocol SOAP representational state transfer REST Windows Communication Foundation and other frameworks.

The shared resource allocator is executed to allocate and deallocate shared resources in response to requests from devices or components that use these resources. A shared resource is one that is utilized by more than one of the computing devices . In some embodiments the shared resource is simultaneously used by more than one of the computing devices . In other embodiments the shared resource is used by only one computing device at a time but is time shared among customers for example the shared resource is allocated to one customer for a period of time and then allocated to another customer. Each shared resource has a type and a value. Types of shared resources include for example port numbers device paths slot numbers interface identifiers virtual local area network VLAN identifiers security associations SAs etc. These resources may have a fixed size or a variable size. For each type of managed resource the shared resource allocator maintains a shared resource pool which contains available never allocated or deallocated resources. The consistency checker is executed to query the devices or components using the shared resources and to determine whether each resource is in a consistent state. For example the consistency checker may determine whether a resource that is reported as in use by a device or component is actually in the deallocated state. In some embodiments at least one of the shared resources managed by the shared resource allocator is an isolating resource which as used by a computing device operates to isolate customer resources in a multi tenant environment. These customer resources are then made available to the customer devices through the service gateway . In some embodiments the shared isolating resource is a security token or security association which operates to isolate security contexts in a multi tenant environment.

The customer device is representative of a plurality of devices that are associated with various customers. The customer device may be coupled to the network . The customer device may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer a personal digital assistant a cellular telephone a set top box a music player a video player a media player a web pad a tablet computer system a game console an electronic book reader or other devices with like capability.

The customer device may be configured to execute various applications such as an access application and other applications. The access application may be executed in a customer device for example to obtain access to resources and or services provided by the device as described above. The customer device may be configured to execute applications beyond access application such as for example browser applications email applications instant message applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin a request to allocate a customer resource is received by the service gateway from the access application executing on the customer device . Allocating a customer resource involves provisioning one or more of the computing devices where provisioning includes allocating a shared resource. Therefore the service gateway makes a request to the shared resource allocator to allocate the particular type of shared resource to accomplish this provisioning. The request may include other context information such as a list of devices that will share the resource.

The shared resource allocator examines the type of shared resource in the request and selects the appropriate shared resource pool based on the type. The shared resource allocator then locates the oldest or least recently deallocated shared resource in the shared resource pool . The shared resource allocator allocates the oldest shared resource by removing it from the pool and provides information about the newly allocated shared resource to the requesting service gateway . The shared resource allocator may also distribute the newly allocated shared resource to the computing devices which share the resource. This distribution may be performed in a staggered manner so that over time the shared resource reaches a consistent state where all sharing devices are aware of the new allocation.

Turning now to shown is a flowchart that provides one example of the operation of a portion of the shared resource allocator according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the shared resource allocator as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning at box the shared resource allocator receives a request related to a shared isolating resource. As noted above the shared isolating resource is one that is shared among multiple computing devices . The request may be triggered by for example a request to set up a customer resource e.g. a virtual private network an on demand storage device a virtual private network on a virtual network etc. . The request may also be triggered by for example a request to access a customer resources e.g. a request to access data on a storage volume. Next at box the shared resource allocator determines the type of request received in box . If at box it is determined that the request is an allocation request the shared resource allocator continues to box . However if at box it is determined that the request is a deallocation request the shared resource allocator continues to box .

At box the shared resource allocator examines the request and determines the appropriate shared resource pool based on context information in the request e.g. resource type . As noted above the shared resource pool contains deallocated resources which are therefore available for allocation. At box the shared resource allocator locates the least recently deallocated shared isolating resource in the shared resource pool . In some embodiments the shared resource allocator checks for a shared isolating resource that has never been allocated before allocating from the pool of deallocated resources. For example if a particular identifier has an identifier space of 0 4095 and this space contains an identifier which has not yet been allocated the shared resource allocator may allocate by increasing the sequence number of the last allocated identifier rather than allocating from the pool of deallocated resources.

Various data structures may be used for the shared resource pool . The shared resource pool may take the form of a queue or a linked list for example with allocations removing from one end of the queue list and deallocations adding to the other end of the queue list. If such a mechanism is used the least recently deallocated entry is always at the end of the queue. Alternatively a table may be used and the time of deallocation stored in the table such that the least recently deallocated entry can be determined from the time.

Next at box the shared resource allocator removes the least recently deallocated shared isolating resource from the shared resource pool thus making it unavailable for allocation. In some embodiments access to the shared resource pool is controlled via a lock or mutex where the lock is acquired before allocating from the shared resource pool and released after allocating from the shared resource pool.

At box the shared resource allocator provides the newly allocated shared isolating resource the one located in box to at least one of the computing devices that is sharing the resource. The newly allocated shared isolating resource may be provided as a response to the request from box or may be provided in a separate notification message that is sent to all of the computing devices that are sharing the resource. To determine which computing devices are sharing the shared isolating resource the shared resource allocator may utilize a sharing context to store information about a shared resource. For example the sharing context may store an identifier for the customer request that results in the need for a shared resource the shared resource type and a list of all computing devices that will share the resource. After providing the newly allocated shared isolating resource in box the process of is complete.

If at box it is determined that the request is a deallocation request the shared resource allocator then continues to box . At box the shared resource allocator examines the request and determines the appropriate shared resource pool based on the resource type in the request. Next at box the shared resource allocator obtains the shared isolating resource from the request and deallocates the shared isolating resource by adding the resource to the shared resource pool . In some embodiments deallocation may also involve storing a time of deallocation in the shared resource pool . In some embodiments access to the shared resource pool is controlled via a lock or mutex where the lock is acquired before deallocating and released after deallocating. At box the shared resource allocator sends a response to the request from box indicating that the shared isolating resource has been deallocated. The process of is then complete.

Referring now to shown is a flowchart that provides one example of the operation of a portion of the shared resource allocator according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the shared resource allocator as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning at box the shared resource allocator receives a request related to a security token. As noted above the security token is shared among multiple computing devices and operates to keep security contexts separate in a multi tenant environment. The request may be triggered by for example a request to set up a customer resource e.g. a virtual private network etc. . Next at box the shared resource allocator determines the type of request received in box . If at box it is determined that the request is an allocation request the shared resource allocator continues to box . However if at box it is determined that the request is a deallocation request the shared resource allocator continues to box .

At box the shared resource allocator examines the request and determines the appropriate shared resource pool based on context information in the request. In the embodiment of the pool is implemented with a queue. The shared resource pool contains deallocated resources here security tokenS which are therefore available for allocation. At box the shared resource allocator removes the entry at the back of the queue thus making it unavailable for allocation. Because entries are added to the front of the queue the back of the queue represents the least recently added deallocated security token in the queue.

Next at box the shared resource allocator provides the newly allocated security token the one removed in box to at least one of the computing devices that is sharing the resource. The newly allocated security token may be provided as a response to the request from box or may be provided in a separate notification message that is sent to all the computing devices that are sharing the security token. To determine which computing devices are sharing the security token the shared resource allocator may utilize a sharing context to store information about a security token. For example the sharing context may store an identifier for the customer request that results in the need for a security token the token type and a list of all computing devices that will share the security token. After providing the newly allocated resource in box the process of is complete.

If at box it is determined that the request is a deallocation request the shared resource allocator then continues to box . At box the shared resource allocator examines the request and determines the appropriate shared resource pool here a queue. The determination is made based on context information in the request. Next at box the shared resource allocator obtains the security token from the request and deallocates the security token by adding the security token to the front of the queue. At box the shared resource allocator sends a response to the request from box indicating that the security token was deallocated. The process of is then complete.

Moving on to shown is a schematic block diagram of the computing device according to an embodiment of the present disclosure. The computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like computing device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the shared resource allocator and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor . While not illustrated the customer device also includes components like those shown in whereby the access application is stored in a memory and executable by a processor. While not illustrated the computing device also includes components like those shown in whereby the service gateway is stored in memory and executable by a processor.

It is understood that there may be other applications that are stored in the memory and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java Javascript Pen PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the shared resource allocator the consistency checker the service gateway and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the shared resource allocator . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the shared resource allocator the consistency checker and the service gateway that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

