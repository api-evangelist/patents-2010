---

title: Conflict switches for implementation guide node changes
abstract: An enhancement implementation analysis method and system are provided. A processor may determine a node in an implementation guide hierarchy to be analyzed for conflicts. Based on the determination, a list of all switches assigned to the node in the implementation guide hierarchy may be retrieved from a data store. The list of retrieved switches may be checked by a processor to determine whether the switch is an active conflict switch. Upon a determination that the conflict switch is an inactive conflict switch, the conflict switch may be deleted from the retrieved list of all switches. If the conflict switch is determined to be an active conflict switch, the conflict switch may be added to a list of relevant switches, and the list of relevant switches may be processed to resolve conflicts, and a corresponding implementation guide may be presented.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08473867&OS=08473867&RS=08473867
owner: SAP AG
number: 08473867
owner_city: Walldorf
owner_country: DE
publication_date: 20101123
---
The present embodiments are directed to a tool that allows users to selectively activate or implement computer application functions provided in an enhancement package into a computer application. In particular the disclosed embodiments provide a tool that facilitates a more efficient selection of computer application functions that will be applied to the application as part of an enhancement package add on.

Enhancement packages are used to provide updated computer application functionality and features to a user of a particular computer application such as an enterprise resource management system or customer relationship management system. The enhancement package is structured such that a user can select which parts of the enhancement package that the user wants to install or use after installation has occurred. As a result both the installation of the enhancement package and the roll out of all of the updated computer application functions to the users do not have to occur substantially simultaneously. Using current systems a user can choose when to roll out a particular computer application function. For example in an enhancement package that is used by a number of departments within an entity a human resources department of the entity may activate computer application functions provided in the enhancement package immediately while an accounting department of the entity may delay activation of accounting functionality until a later date e.g. after the end of the fiscal year. The information technology IT administrator for example can perform the activation steps for the particular department.

Enhancement packages are provided to a customer such as a manufacturing entity or services entity. A group of data structures identifying the functions and computer objects that provide the functions are typically delivered with the computer code. The computer code and the group of data structures may be installed on the entity s computer system. A portion of the data structures may arrange in a hierarchical fashion the numerous functions that are part of the computer application enhancement. The hierarchy may be configured in the commonly known trunk branch node and leaf structure. Below the nodes in the hierarchy may be computer objects shown as leaves in the data structure that are responsible for the implementation of a particular function. This particular data structure may be called an implementation guide. A purpose of the implementation guide is to allow easy indication of the enhancement package implementation by a user such as an IT administrator of the computer application functions that have been changed. In order to maintain computer application configuration management integrity as enhancement packages are introduced changes to the implementation guide should reflect only changes to a computer application function.

The hierarchy may be used by computer system administrators to implement the enhanced functionality resulting from the enhancement changes in the computer objects. The hierarchy when presented in a graphical user interface allows a user to see which computer objects are affected by the selection of a particular node or leaf within the hierarchy. For example when a department of an entity may want to implement a new computer application function provided with the installed enhancement package a function specific to the particular department may be selected.

However given the complex nature of an enterprise wide computer application the selection of particular nodes or leaves may cause conflicts with other nodes or leaves. For example a selection of a computer object on one node may call for a software module that performs an operation that is an opposite operation performed by another computer object that has been selected by the user. In this case the two computer objects are said to conflict. The tool may present to the user both functions even though the switches conflict.

For example illustrates a table for explaining the problem resulting from conflicting computer objects. Structure nodes e.g. NODE and NODE and activities may be assigned to software switches e.g. S and S that include settings that can define how the nodes activities may react depending upon the state e.g. on or off separately or both on or off simultaneously the switches S and S are in after a particular selection. It may be possible to assign more than one switch to the same implementation guide node activity. When two or more switches are assigned to the same implementation guide node activity the probability of the possible reactions to the switch state causing a conflict increases. A data structure accessible by a processor may be maintained in a data storage that tracks the assignment of particular function switches to nodes or sub nodes and vice versa. In the different combination of settings for each switch and resulting reactions at the respective nodes are shown in rows . In the illustrated example possible reactions are hide and show which means the node activity associated with the particular switch may respectively either be hidden hide from view in the user interface or visible show on the user interface based on the switch setting. For example in row the switches S and S are both in a switched OFF state and the assigned nodes NODE and NODE respectively are both HIDDEN. Rows and show the reactions related to the respective nodes NODE and NODE when switch S is on and switch S is off and when switch S is off and switch S is on. Switches with the reaction VISIBLE i.e. show override all switches that have the reaction hide. In other words one switch may cause a node to be visible and the other may cause a node to be hidden. In that case the switch with the reaction to show will override the switch with the reaction to hide. In more detail consider the situation shown in 

Structure nodes NODE and NODE are sibling nodes within an implementation guide hierarchy because in the enhancement package NODE is semantically a full replacement of NODE. When the enhancements in the enhancement package are implemented NODE is intended to replace NODE.

Structure node NODE is assigned to switch S with reaction show when switch S is switched on and a reaction hide when switch S is off. This means NODE should be hidden when switch S is switched on reaction hide for NODE because switch S displays the new replacement structure node NODE.

But as mentioned above a problem is that it is not possible to hide NODE with switch S when S is switched on. This is because reaction show has been predetermined in the system to win over the reaction hide .

As a result both nodes NODE and NODE are presented i.e. visible to a user in the graphical user interface. The problem of conflicting computer objects in the implementation guide are typically resolved by the developers before a customer ever has the opportunity to make a conflicting selection. The developers typically implement a work around in the implementation guide to resolve the conflicts by assigning additional nodes.

To resolve the conflict a developer may configure a work around to the implementation guide. For example the developer may create a new node say NODE in the implementation guide structure to address conflicting computer objects. The new node say NODE may be assigned to switch S with a reaction to hide when switch S is on and may also be the parent node of NODE. NODE is also assigned to switch S with a reaction to show. By NODE being the parent of NODE this takes advantage of the rule that all children of a node take the same reaction as the parent. So if NODE is given the reaction to hide when switch S is on NODE will also be hidden. When switch S is selected to be on NODE is visible and presented in the graphical user interface and NODE and its child NODE are hidden.

The additional node NODE without corresponding additional functions can make the hierarchy of the implementation guide confusing because the additional node only addresses a specific conflict between two nodes. The confusion may be compounded by future enhancements that add further nodes that merely address node conflicts to the computer application. In addition the configuration management protocols for the implementation guide may be compromised because changes to the implementation guide do not reflect only changes to a computer application function but also include the switch workarounds.

An example shown in illustrates a scenario in which a switch is activated and a computer function is presented in a screenshot A of a graphical user interface. A graphical user interface presents to a user the screenshot A displaying in a hierarchy the implementation guide IMG for an exemplary enhancement package. Elements and graphically represent nodes in a hierarchical data structure at which the particular nodes User Interface Settings and Work Settings may be located. Also present in the data structure may be the switches that turn on or activate the particular computer functions indicated by the respective nodes. In the illustrated example the switch labeled SS may be a switch that activates the particular computer functions represented by nodes User Interface Settings and Work Settings. Depending upon the reaction show or hide assigned to the particular state of switch name SS either node User Interface Settings and Work Settings may be presented in the graphical user interface A.

An example of a workaround as presented in a screenshot B of a graphical user interface is shown in . The node User Interface Settings may be in the illustrated example semantically replaced with the new functions at node Settings for User Interface and Process . In the workaround screenshot B the nodes Process for Global Employee Management User Interface Settings and Work Settings are assigned to switch SS while the workaround User Interface Settings General and semantic replacement Settings for User Interface and Process nodes are assigned to switch SS . In the illustrated example the Settings for User Interface and Process computer function may be a semantic replacement for the User Interface Settings computer function. In this case the present example illustrates the state of the implementation guide IMG when switch SS element is on and switch SS element is off. The workaround inserts the node entitled User Interface Settings General in the hierarchy as a node above the User Interface Settings node . The node and implicitly node which is a sub node to node may have the reaction hide assigned to it and node has the reaction show when the switch SS is switched on. 

As can be seen in the workaround solution creates an additional node e.g. which based on its name User Interface Settings General is not very descriptive of the nodes true purpose. Furthermore if and when additional nodes are required other names must be given to those nodes further cluttering the implementation guide and masking the purpose of the presented nodes.

Accordingly the inventors have recognized the need for a tool that presents the implementation guide in a format absent of additional work around nodes that addresses the conflicting computer objects and satisfies the configuration management protocols of the implementation guide.

Disclosed embodiments provide an enhancement implementation analysis method. A processor may determine a node in an implementation hierarchy to be analyzed for conflicts. As a result of the determination by the processor a list of all switches assigned to the node in the implementation hierarchy may be retrieved from a data store. The list of retrieved switches may be checked to determine whether the switch is a conflict switch. For switches determined to be a conflict switch the processor may further determine whether the conflict switch is active. Upon a determination that the conflict switch is an inactive conflict switch the conflict switch may be deleted from the retrieved list of all switches. If the conflict switch is determined to be an active conflict switch the conflict switch may be added to a list of relevant switches and the list of relevant switches may be processed to resolve conflicts.

Also the disclosed embodiments provide an enhancement implementation analysis tool that include a display device and a processor. The display device may display a graphical user interface. The processor may be configured to construct in response to a selection of a specific computer application function in the graphical user interface a list of all switches assigned to the selected function. The selected function may be represented as a node in a data structure and the node may have a plurality of leaves representing sub functions related to the selected function. The processor may also be configured to extract individual switches from the list of all switches. All switches in the list may include function switches and conflict switches. A conflict switch may have at least two switches of any combination of function or conflict switches assigned to it and function switches are assigned to either a function or sub function. The processor may further be configured to determine whether the extracted switch is an active conflict switch and based on the determination that the extracted switch is an active conflict switch add the active conflict to a list of relevant switches. After all switches in the list of switches have either been removed from the list of all switches or added to the list of relevant switches by the configured processor the processor may process the list of relevant switches. As a result of the processing the processor may present in the graphical user interface on the display device an implementation guide indicating which specific computer application functions are to be executing on the processor.

In order to be able to provide this selectivity for functions within a computer application the developers must perform more tasks during development that facilitates the selection of the new or enhanced functions provided by the respective changes to the computer objects of the computer application. For example a switch enhancement framework may be implemented that analyzes the switches referred to in . The switch enhancement framework may provide additional capabilities beyond the current switching techniques used in other areas such as the adaptation of source code user interfaces presentation of screens and application menus.

As explained with reference to when a computer function is selected for implementation in a graphical user interface a switch may be set turning on the computer objects that provide the selected functionality related implementation guide development objects and other objects. In the switch enhancement framework the switches may be assigned to a particular computer application function such as HR management or invoicing functions. These switches may be referred to as function switches. The function switches are turned on when the particular computer application function to which it is assigned is turned on. The switches may include attribute settings e.g. flags or identifiers that indicate that the switch is a function switch.

The switch enhancement framework may also include switches referred to as a conflict switches. Conflict switches may be assigned to a function switch and may only be turned on when the function switch to which the conflict switch is assigned is turned on. A conflict switch may be assigned to more than one function switch in which case the conflict switch is turned on when all of the function switches assigned to it are also turned on. The conflict switches may also have attribute settings e.g. flags or identifiers that indicate the switch is a conflict switch.

In a first path the decision at step is YES the switch is a conflict switch the process proceeds to step . The decision to be made at step is whether the conflict switch is assigned to another active conflict switch. If the answer at step is Yes the process proceeds to step to delete the conflict switch from the list of switches. Otherwise the answer is No the conflict switch is not assigned to another conflict switch and process proceeds to step . At step it may be determined whether the conflict switch is an active conflict switch. An active conflict switch may be a conflict switch that is activated when all of the function switches that are assigned to the conflict switch have been selected by a user. If the conflict switch is determined NOT to be an active switch at step the process may proceed to step where the tool may delete the switch from the list of all switches. Otherwise if the answer is Yes the process may proceed to step . At step the conflict switch may be added to the list of relevant switches. Subsequently the process may proceed to step . At step the tool may retrieve any remaining switches assigned to the conflict switch from the list of all switches and if present from the list of relevant switches it may be possible that a switch that is assigned to a conflict switch may be processed and added to the list of relevant switches prior to the conflict switch being analyzed . The process may proceed to step where the retrieved remaining switches may be deleted from the list of all switches and if present from the list of relevant switches. After which the process may determine whether any switches remain in the list at step . If the answer is Yes switches remain in the list the process may identify at step the next switch in the list and the process restarts at step . If the answer is No switches do not remain in the list the process proceeds to step to process the list of relevant switches.

The processing of the list of relevant switches at step may include executing the rules of the relevant conflict switches and implementing the functions indicated by the conflict switches. In addition the execution of the rules of the relevant conflict switch may cause the graphical user interface to present the functions that are indicated by the rules of the conflict switch.

Alternatively in a second path if it is determined from the results of the attribute analysis at step that the switch is not a conflict switch the process may proceed to step .

At step a inquiry may be made whether the switch is an active function switch. If the response to the inquiry is No at step the process may proceed to step where the switch may be deleted from the list of all switches. Otherwise if the response to the inquiry at step is Yes the process proceeds to step . At step a decision whether the active function switch is assigned to an active conflict switch may be made. If the response to the inquiry at step is Yes the process may proceed to step where the switch may be deleted from the list of all switches. Alternatively if the response to the inquiry at step is No the process proceeds to step . At step the switch may be added to the list of relevant switches. After which the process may proceed to delete the active function switch from the list of all switches at step . Subsequently the process may continue and execute the steps and either or as explained above.

The processing of the list of relevant switches at step may include causing the graphical user interface to present the functions that are indicated by the rules of the conflict switch.

In an example assume that switches SA and SB have a conflict. The conflict may be resolved by conflict switch CS. Switches SA and SB are assigned to conflict switch CS. Further assume another conflict exists between conflict switch CS and another switch SC. Another conflict switch CS may be used to resolve this conflict. Switch SC and conflict switch CS may be assigned to conflict switch CS. In the process the list of assigned switches may contain switches SA SB SC and conflict switches CS and CS. Further assume that all of the switches are active i.e. switched on . The process may work through the list of switches recognizing that switches CS and CS are conflict switches. The processing of conflict switch CS will cause switches SA and SB to be removed from the list of all switches assigned to the particular node while CS will cause switches SC and CS to be cleared from the list as well. Only CS will remain in the list of relevant switches for processing. After the list or relevant switches is processed in step the process may proceed to step where an implementation structure such as an implementation guide is presented on a display device.

In an alternative embodiment the process may include a step between steps and in which the list of all switches would be sorted. Sorting may be done for example where conflict switches are ordered to appear prior to function switches in the list of all switches. In this case step may not be needed as step and would have already deleted all function switches which are assigned to an active conflict switch.

As shown in computer application functions are not assigned to conflict switches instead function and or conflict switches are assigned to a conflict switch. A conflict switch may have a number of settings that respond to the states of one or more assigned function and or conflict switches. To be clear other conflict switches may be assigned to a conflict switch.

An application programming interface API may be used to implement processes referred to in . For example the functionality of obtaining a list of switches assigned to a particular conflict switch may be implemented by a specific API developed to perform that function. In addition a function may be developed that implements the determination of whether a switch is a function switch or a conflict switch. This function may for example return a TRUE when the switch in question is a conflict switch otherwise the function may return a FALSE. Another example may be of a function that returns an answer to the inquiry of whether the conflict switch is active. The function may use an identifier of the conflict switch in question and return a TRUE when all of the conflicting switches both function and conflict switches assigned to the conflict switch are activated i.e. switched on . Of course other functions or APIs may be needed and the above APIs and functions are only exemplary.

The server and or the client terminal may include computer readable storage media such as RAID devices hard disk drives memory devices such as USB flash memory ROM and RAM or any other magnetic or optical storage devices that may store computer readable data and executable program instructions such as computer application and data structures . The client terminal and processor may access the included computer readable storage media as well as data storage device . The data storage device may also include hard disk drives or any other magnetic or optical device suitable for storing data and or executable program instruction code.

Several features and aspects of the present invention have been illustrated and described in detail with reference to particular embodiments by way of example only and not by way of limitation. Those of skill in the art will appreciate that alternative implementations and various modifications to the disclosed embodiments are within the scope and contemplation of the present disclosure.

