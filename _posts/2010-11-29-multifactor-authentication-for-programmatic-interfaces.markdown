---

title: Multifactor authentication for programmatic interfaces
abstract: Systems and methods provide logic that validates a code generated by a user, and that executes a function of a programmatic interface after the user code is validated. In one implementation, a computer-implemented method performs a multifactor authentication of a user prior to executing a function of a programmatic interface. The method includes receiving, at a server, a user code through a programmatic interface. The server computes a server code in response to the user code, and compares the user code to the server code to determine that the user code corresponds to the server code. The server validates the user code and executes a function of the programmatic interface, after the user code is validated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08776190&OS=08776190&RS=08776190
owner: Amazon Technologies, Inc.
number: 08776190
owner_city: Reno
owner_country: US
publication_date: 20101129
---
Remote network accessible entities offer a wide variety of electronic content and services to a variety of different devices including personal computers PCs electronic book viewers portable digital assistants PDAs mobile telephones pocket PCs smart phones televisions set top boxes digital video recorders DVRs and gaming consoles among others. These devices often access various remotely accessible resources such as various web pages and web services. Such resources may be for example associated with online stores or other providers of audio visual content software programs digital books or other electronic content.

Today providers of these resources sometimes require that users authenticate themselves in order to access particular resources. For example web pages may include information associated with billing data purchase histories personal information or stored content that can be protected using these techniques. Likewise in addition to protecting content it may be desirable to protect against unauthorized use of various web services particularly when the use of such services are charged on a pay per use basis. While such remotely accessible resources may employ authentication schemes to reduce unauthorized access hackers and other malicious parties sometimes identify and exploit the inherent weaknesses of existing authentication schemes to obtain access to secured consumer information. Therefore systems and methods are needed to overcome the limitations of traditional processes that authenticate users.

Disclosed embodiments implement a multifactor authentication process to provide an enhanced level protection to programmatic interfaces associated with remotely accessible secured resources of a network. As an example a user may transmit an authentication credential to a resource server in an attempt to access content stored within for example a cloud computing environment. After validation of the authentication credentials the user may request a particular operation be performed on the content such as deleting an element of content adding an element of content or changing a name or location of the element of content. However prior to granting the user access to the content the resource server may implement a multifactor authentication process to provide an enhanced level of security to the remotely accessible resources.

To facilitate the multifactor authentication process a user code associated with a shared secret may be generated by a user device. The user code and the authentication credential may be transmitted to the resource server with a request for a remotely accessible resource. The resource server after receiving the request may forward the authentication credentials and the user code to an authentication server which executes the multifactor authentication process. The authentication server may access a server copy of the shared secret and subsequently compute a corresponding server code. The user code and the server code may each represent strings of characters having a predetermined length and each may be based on an application of a hash function to respective values of a shared secret and a counter.

For example the user device may compute the user code by applying the hash function to a value of a shared secret and a value of a user counter identified by the user device. Similarly the authentication server may obtain values of the shared secret and a server counter and may compute the server code through an application of the hashing function to the obtained values. The authentication server may obtain the values of the shared secret and the server counter from a locally accessible storage medium or alternatively the values of the shared secret and the counter may be obtained from a remotely accessible repository or distributed hash table.

The authentication server may compare the user code to the server code and validate the user when the user code matches the server code. After validating the user code the authentication server may transmit a signal indicating a successful authentication to the resource server which may execute a function of a programmatic interface consistent with the operation requested by the user. As an example the resource server may execute a call to a web service associated with the data repository to modify one or more elements of stored content according to a request of the user.

User device may include but is not limited to a general purpose computer such as a laptop computer a stand alone personal computer PC a tablet PC a server and a mainframe computer. Additionally user device may include but is not limited to a personal digital assistant PDA a portable navigation device a mobile phone a smart phone an electronic book viewer and any additional or alternate computing device operable to transmit and receive data across network and able to display data received from authentication server and resource server . User device may also include a number of additional devices configured to transmit and receive data across network including but not limited to a television a set top box in communication with a television a digital video recorder DVR and a gaming console.

User device may include a processor a memory an input and output I O device a network interface for communicating across network and a code generation unit . Processor may be configured to execute instructions and to process data to perform one or more functions associated with system such as the illustrative methods of described below.

Memory may include one or more memory devices that store data including but not limited to random access memory RAM read only memory ROM a magnetic storage device e.g. a hard disk an optical storage medium e.g. a CD or DVD ROM a high definition optical storage medium an electronic storage device e.g. EPROM or a flash drive and or other data storage devices known in the art. Memory may store an operating system such as MacOS Windows or Linux and may also include one or more application programs such as word processing database programs spreadsheet programs presentation programs and graphics programs and or other programs capable of generating documents or other electronic content. Memory may also include browser applications capable of rendering standard Internet content such as Netscape Navigator Microsoft Internet Explorer and or Mozilla Firefox. Application programs may be implemented using applets plug ins modules widgets and or any other software components.

Input output I O device may include one or more components that allow a user of device to interface with applications executing on user device . For example I O device may include devices such as a keyboard a keypad a mouse a touch pad a touch screen a microphone an accelerometer a camera and or any other user input device consistent with user device . I O device may also include but is not limited to a display e.g. an LCD a CRT display electronic ink or a plasma display a printer a speaker and or any other output device consistent with user device .

Network interface may include any communication device for sending and receiving data across network including but not limited to a modem a transceiver a network communication card a satellite dish an antenna or another network adapter capable of transmitting and receiving data over network .

Code generation unit may be configured to generate a dynamically changing sequence of characters digits or combinations thereof e.g. a user code that facilitate a multifactor authentication process. For example the user code may be six character or digits in length. However user codes consistent with the disclosed embodiments are not limited to such illustrative lengths and in additional embodiments the user code may be of any additional or alternate length appropriate to code generation unit and to authentication server .

As depicted in code generation unit may be incorporated into user device and may be responsive to one or more applications executing on user device . Alternatively code generation unit may be a device e.g. an authentication token separate from user device and in communication with user device e.g. through a USB port. In such an embodiment code generation unit may constitute a device configured to be transported by the user e.g. as a key fob or other readily movable article .

Network may represent any form or medium of digital data communication. Examples of network include a local area network LAN a wireless LAN e.g. a WiFi network a wireless Metropolitan Area Network MAN that connects multiple wireless LANs and a wide area network WAN e.g. the Internet a private network an intranet and a cloud computing network. The Internet may include any publicly accessible network or networks interconnected via one or more communication protocols including but not limited to hypertext transfer protocol HTTP and transmission control protocol internet protocol TCP IP . Moreover network may also include one or more mobile device networks such as a GSM network or a PCS network that allow mobile devices to send and receive data across network via applicable communications protocols including those described above.

Authentication server may be a special or general purpose computer e.g. a personal computer network computer server or mainframe computer having one or more processors that may be selectively activated or reconfigured by a computer program. Furthermore authentication server may be incorporated as a node in a distributed network. For example authentication server may communicate via network with one or more additional servers not shown which may enable authentication server to distribute processes for parallel execution by a plurality of servers.

In an additional embodiment authentication server may be associated with a node of a decentralized highly scalable distributed computing system which may provide a distributed hash table. The distributed hash table may be configured to provide shared cryptographic values to authentication server . For example authentication server may be associated with a node corresponding to a particular geographic region e.g. the New England region of the United States or alternatively the United Kingdom .

Referring back to authentication server may include a processor a memory a network interface and an I O device that may be similar in function to corresponding components of user device . Memory may also include a data store A.

Data store A may include for example information associated with one or more users e.g. a user of user device within system . In an embodiment data store A may include a plurality of individual data records associated with respective users within system such as data record of . However data store A is not limited to an individual record and in additional embodiments data store A may include any additional or alternate number of records.

As shown in data record may include information that facilitates an application of a multifactor authentication process to a user. For example the information may include a user identifier e.g. user ID a corresponding password an identifier of a device of the user e.g. a device ID and a shared secret that may be distributed to authentication server and the user associated with user ID .

Data record may further include a first counter e.g. login counter that identifies a total number of authentication attempts both unsuccessful and successful that reference the user ID . As described below in reference to authentication server may leverage login counter to compute a server code using for example a HMAC based one time password algorithm.

Data record may further include a second counter e.g. unsuccessful login counter which identifies a number of unsuccessful authentication attempts that reference user ID . For example an unauthorized party e.g. a hacker may repeatedly attempt to access an account of a user by guessing that user s password or code. In such embodiments authentication server may use unsuccessful login counter to track the number of unsuccessful attempts and subsequently block future authentication attempts that reference user ID after the number of unsuccessful attempts exceeds a maximum number.

For example as depicted in a user referenced by data record may be associated with a user ID of user1 a password of abczyx and a user device e.g. user device having a device ID of 2251365856. The user may be assigned a shared secret having a value of 123789 and may be associated with an authentication counter of 12 and an unsuccessful authentication counter of 5. As such authentication counters and associated with data record indicate that twelve total authentication attempts reference the user ID user1 and the five of the twelve attempts have been unsuccessful.

Although described in terms of user ID password device ID shared secret and login counters and records within user data store A are not limited to such illustrative information. In additional embodiments user device store A may include a subset of this information or additional or alternate information.

One or more records of user data store A e.g. data record may be generated in response to a registration process. For example authentication server may prompt a user to select a user ID and password which may be entered into an interface of a user device e.g. user device and transmitted to authentication server . However the generation of data record by authentication server is not limited to such illustrative processes and in additional embodiments authentication server may generate or populate data record using any additional or appropriate technique.

In a further embodiment authentication server may obtain elements of one or more records of user data store A e.g. shared secret and login counters and of data record from a remotely accessible web server or data repository using for example an appropriate application programming interface API call across network . Additionally or alternatively values of elements of one or more records of user data store A may be obtained by authentication server from corresponding distributed hash tables accessible to authentication server .

Referring back to resource server may be a special or general purpose computer e.g. a personal computer network computer server or mainframe computer having one or more processors that may be selectively activated or reconfigured by a computer program. Furthermore resource server may be incorporated as a node in a distributed network. For example resource server may communicate via network with one or more additional servers not shown which may enable resource server to distribute processes for parallel execution by a plurality of servers.

Resource server may include a processor a memory a network interface and an I O device that may be similar in function to corresponding components of user device . Memory may also store an operating system such as MacOS Windows or Linux and may also include one or more application programs that when executed by processor generate a web service that may interact with one or more additional servers within network such as authentication server using appropriate calls to and from programmatic interfaces such as application programming interfaces APIs .

In block resource server may establish communications sessions with user device and authentication server over network . Resource server may establish the communications sessions using authentication techniques associated with any of the communications protocols outlined above or using any additional or alternate protocol appropriate to components of system . Although described in terms of user device illustrative routine is not limited to a specific number of user devices and authentication servers interacting with resource server . In additional embodiments resource server may establish communication sessions with any additional or alternate number of user devices and authentication servers apparent to one of skill in the art and supportable by network .

In block resource server may receive a request to execute an operation e.g. a function of a web service from user device over network . For example an application of user device may transmit the request to a programmatic interface e.g. an API of resource server automatically without explicit user command and the received request may include authentication factors that enable a multifactor authentication of a user associated with user device . For example such authentication factors may include but are not limited to an authentication credential associated with the user and a user code generated by user device e.g. by code generation unit of .

For example the authentication credential may represent a programmatic means of authentication including but not limited to an access key a public key certificate or any other programmatic authentication credential appropriate to the components of system . However the authentication credential is not limited to such programmatic means and in additional embodiments the authentication credentials may include one or more user defined credentials such as a login name and a password. The user code may in an embodiment represent a dynamically changing sequence of characters digits or combinations thereof generated by code generation unit of user device . For example the user code may be six character or digits in length. However user codes consistent with the disclosed embodiments are not limited to such illustrative lengths and in additional embodiments the user code may be of any additional or alternate length appropriate to the code generation unit and to authentication server .

Prior to executing the requested operation of function resource server may request that authentication server perform a multifactor authentication of the user based on the received authentication factors. Referring back to in block resource server may transmit the received authentication factors to authentication server across network . In such embodiments authentication server may authenticate the user through an application of a multifactor authentication process to the received authentication factors as described below in reference to .

In block authentication server may receive a set of authentication factors from resource server through an appropriate programmatic interface e.g. an API . As discussed above the received authentication factors may include a programmatic authentication credential e.g. an access key or a public key certificate associated with the user of user device . For example such programmatic authentication credentials may be generated by an application executing on user device or alternatively may be obtained from a data repository accessible to user device across network .

As discussed above the received authentication factors may also include a user code generated by code generation unit of user device . The received user code may in such embodiments represent a dynamically changing sequence of characters digits or combinations thereof generated by code generation unit . For example the received user code may be six character or digits in length. However user codes consistent with the disclosed embodiments are not limited to such illustrative lengths and in additional embodiments the user code may be of any additional or alternate length appropriate to code generation unit and to authentication server .

After receipt of the authentication factors authentication server may retrieve a data record associated with the user e.g. data record of user data store A in . The data record may be retrieved based on user information incorporated within the programmatic authentication credential e.g. a subject of a public key certificate or through additional information received from resource server e.g. a user identifier associated with a received request .

As described above the retrieved data may include copies of a server version of a shared secret e.g. shared secret a first counter indicating a total number of authentication attempts that reference an identifier of the user e.g. login counter and a second counter indicating a number of unsuccessful authentication attempts that have referenced the identifier of the user identifier e.g. unsuccessful login counter . However authentication server is not limited to such illustrative data and in additional embodiments authentication server may access any additional or alternate set of stored data appropriate to authentication server and the received authentication factors.

In block authentication server may determine whether the number of unsuccessful authentication attempts exceed a maximum number of unsuccessful attempts. For example the maximum number of unsuccessful authentication attempts may reflect one or more parameters of system e.g. a number of authentication servers in system one or more parameters of the distributed hash network in which authentication server participates or any additional or alternate parameter.

For example in block authentication server may compare the value of the second counter of the retrieved data record e.g. authentication counter of data record with the maximum number of unsuccessful authentication attempts. If it is determined in block that the maximum number of unsuccessful authentication attempts has been exceeded then authentication server may prevent authentication attempts that reference the user for a predetermined period of time i.e. a lockout period in block . For example the lockout period may include but is not limited to ninety seconds five minutes one hour or any additional or alternate time appropriate to authentication server .

The capability of authentication server to block access during this lockout period may substantially reduce the ability of malicious parties acting individually or through software e.g. bots to determine the authentication credentials of a user through repeated authentication attempts. After expiration of the lockout period authentication server may reset unsuccessful login counter of data record to a value of zero.

If it is determined in block that the maximum number of unsuccessful login attempts has not been exceeded then authentication server may determine whether the programmatic authentication credential is valid in block . For example and as discussed above the programmatic authentication credential may include a public key certificate and the authentication server may process the received public key certificate in block to verify the authenticity of the received credential and the digital signature of user using any of a number of techniques apparent to one of skill in the art and appropriate to authentication server .

If it is determined in block that the authentication credential is not verified e.g. the public key certificate is invalid or has been subject to tampering then authentication server may identify the authentication attempt as failed. Authentication server may increment the unsuccessful authentication counter associated with the retrieved record by a value of one in block to indicate the failed attempt and may transmit a message to resource server in block that indicates the authentication attempt has failed.

However if it is determined in block that the authentication is valid authentication server may compute a corresponding code i.e. a server code to validate the user code in block . As described above the server code may represent an alpha numeric sequence having a pre determined length of six to eight characters and authentication server may compute the server code through an application of a hashing algorithm to locally obtained values of a shared secret and an appropriate sever counter. For example the hashing algorithm applied by authentication server may include one or more of the algorithms associated with the OATH standard including but not limited the one time password OTP algorithms described above.

In an embodiment in block authentication server may obtain the value of the shared secret e.g. shared secret of record from a locally accessible data repository maintained by authentication server e.g. data store A of . Alternatively authentication server may receive the value of the shared secret from a remotely accessible web service or distributed hash table across network for example in response to an appropriate application programming interface API call. Authentication sever may subsequently obtain the value of the counter from the locally accessible storage medium or from the remotely accessible web service or distributed hash table and may compute the server code in block through an application of the hashing algorithm to the obtained values of the shared secret and the server counter as outlined above.

For example the server counter incorporated within a time dependent OTP algorithm may represent a system time determined from a system clock of authentication server . Alternatively using an HMAC based OTP algorithm authentication server may retrieve a value of an increasing counter from a locally accessible data repository e.g. data store A of or a remotely accessible web service or distributed hash table across network using for example a call to an appropriate programmatic interface. The increasing counter may be an authentication counter e.g. authentication counter of data record representing a number of authentication attempts that reference the user identifier of the user an unsuccessful authentication counter e.g. unsuccessful authentication counter of data record representing a number of unsuccessful authentication attempts that reference the user identifier of the user or any additional or alternate value of an increasing counter associated with the user or user device .

Authentication server may compare the user code to the server code in block to determine whether the user code corresponds to the server code. For example authentication server may determine that the user code matches the server code when the alpha numeric sequence of the user code matches the corresponding sequence of the server code. Authentication server may validate the user code when that user code matches the server code as determined in block .

If it is determined in block that the user code does not correspond to the server code authentication server does not validate the user code. Additionally authentication server may determine that the invalidated user code corresponds to a failed authentication attempt and may increment the login counters associated with the retrieved data record of the user e.g. login counter and unsuccessful login counter of data record by a value of one in block to reflect the failed login attempt. Additionally and as discussed above authentication server may transmit a message to resource server in block indicating that the authentication attempt has failed.

However if it is determined in block that the user code corresponds to the server code then authentication server may validate the user code and authenticate the user. In an embodiment the validation of the user code indicates that user device and authentication server share a common value of the shared secret and a common value of the counter associated with the hashing algorithm. For example using an HMAC based OTP algorithm the validation of the user code may imply that user device and authentication server are associated with synchronized values of the increasing counter e.g. the total number of login attempts that reference the user identifier of the user . Alternatively using a time based OTP algorithm the validation of the user code may imply that the system time associated with user device is synchronized with the system time of authentication server and as such both user device and authentication server share a current view of a current time. 

In block once the user code is validated authentication server may increment the counters associated with the retrieved data record of the user e.g. authentication counter of data record by a value of one to reflect the successfully authentication attempt. Authentication server may then transmit a message to resource server in block indicating that the user has been successfully authenticated. Upon transmission of the message indicating the successful authentication attempt in block or alternatively the transmission of the message indicating the failed authentication attempt in block the multifactor authentication processes of are complete and the routine passes back to block of .

Referring back to in block resource server may receive a response from authentication server that indicates a status of the multifactor authentication of the user i.e. the message transmitted by authentication server in block or alternatively in block . For example the response may include a Boolean expression i.e. YES or NO indicative of the success of the multifactor authentication process or alternatively may include any additional or alternate information apparent to one of skill in the art and appropriate to resource server and authentication server .

Based on the received response in block resource server may determine whether the user has been successfully authenticated. If it is determined in block that the user has been successfully authenticated then resource server may perform the operation requested by the user in block . For example the requested operation may correspond to a function of a web service associated with resource sever and resource server may execute the requested function of the web service in block e.g. through a call to an appropriate programmatic interface .

Alternatively if it is determined in block that authentication server has been unable to authenticate the user then resource server fails to perform the requested operation in block . In block resource server generates an error message and transmits that error message to user device over network through an appropriate programmatic interface e.g. an API .

As described above resource server may be associated with a web service which may be accessed by user device using one or more calls to an appropriate programmatic interface e.g. an application programming interface API call . In such embodiments the multifactor authentication processes of provide enhanced protection of programmatic interfaces associated with web services and other applications executing within network .

Furthermore the illustrative processes of satisfy the requirements of so called strong authentication standards such as the open OATH standard described above that recommend authentication schemes that ensure a user code is uniquely assigned to a user over a threshold period of validity. In these disclosed embodiments the values of the user code and corresponding server code are calculated based on a unique value of a shared secret assigned to the user of device and accessible to authentication sever and a value of a counter that varies in time and in response to actions of the user. For example if a user code and a server code were validated at a particular server time e.g. of 13 31 21 a malicious user that might attempt to access the web service using the same code at 13 31 30 would be blocked as the value of the server code would be computed based on the value of the new time i.e. 13 31 30 and not 13 31 21. 

Although not depicted in authentication server may store local copies of a server code and a system time. In such embodiments authentication server may leverage these locally stored values to validate a received user code when authentication server is unable to access the information needed to compute the server code. For example in the event of a communications failure or a power failure authentication server may be unable to access network to obtain the value of the shared secret from a remotely situated data repository or distributed hash table.

In such embodiments authentication server may retrieve the local copy of the server code and the server time and may validate the received user code in block of when the received user code matches the local copy of the server code and when the server time associated with the local copy of the server code falls within a threshold time period of the current server time of authentication server . For example the threshold time period may represent one second five seconds ninety seconds five minutes one hour or any additional or alternate time period.

In an illustrative embodiment resource server may be associated with one or more geographically dispersed data repositories within a cloud based computing environment. For example such repositories may store content elements of the user of user device and such stored data may include but is not limited to digital images digital videos digital audio recordings electronic books and files comprising structured and or unstructured text e.g. word processor spreadsheet and presentation documents .

In such embodiments resource server may be associated with an application that manages stored content within a data repository e.g. a repository within a cloud computing network . For example the application may enable the user to upload content manage previously uploaded content and to permanently delete such content from the data repository. In such embodiments resource server may leverage the processes disclosed above in reference to to provide an enhanced level of authentication to any user attempting to modify content maintained in the data repository as described below in reference to the illustrative screen shots of .

For example a user of a user device e.g. user device may execute an application to access a user interface of a repository within the cloud computing environment that stores the user s electronic content. As discussed above resource server may be associated with the repository and may be configured to service requests from the user to manage the stored electronic content after validation by a multifactor authentication process.

After receiving the request to access the stored electronic content resource server may transmit the programmatic authentication credential e.g. the public key certificate to authentication server to facilitate a single factor authentication of the user. If authentication server determines that the programmatic authentication credential is valid and that the user has not exceeded a maximum number of unsuccessful authentication attempts then a portion of the stored electronic content associated with the user may be displayed to the user within screen of user device as described below in reference to .

Home directory may also be linked to a subdirectory associated with digital videos of the user e.g. VIDEOS a subdirectory associated with electronic books of the user e.g. EBOOKS and a subdirectory e.g. DOCUMENTS associated with files that include structured and or unstructured text. For example a digital video file A e.g. MaryPoppins.mpeg and digital video file B e.g. Cheers.mpeg may be linked respectively to VIDEOS subdirectory an electronic book A e.g. OliverTwist.txt may be linked to EBOOKS subdirectory and a word processing document A e.g. Dissertation.doc a presentation document B e.g. Defense.ppt and a spreadsheet document C e.g. Data.xls may be linked respectively to DOCUMENTS subdirectory .

The user may desire to perform a particular operation on one or more of the files or subdirectories associated with home directory . In order to perform such an operation on a file or a subdirectory the user may click select or otherwise activate a region disposed proximate to the displayed filename or directory name and the user may select an appropriate operation from a list displayed in a menu or pop up window as depicted below in .

As depicted in the user may select the Delete operation from menu in order to permanently delete the selected Dissertation.doc file from home directory . In response to the selection code generation unit of user device may generate a user code according to the one time password algorithms described above and the user code and the programmatic authentication credential of the user may be transmitted to resource sever with a request to perform the Delete operation on the selected file.

Prior to performing the requested operation resource server may interface with authentication server to perform an enhanced multifactor authentication of the user based on the received user code and programmatic authentication credential. As described above in reference to block of resource server may forward the programmatic authentication credential of the user and the user code to the authentication sever . Further as discussed in reference to authentication server may receive the programmatic authentication credential and user code in block may determine that the programmatic authentication credential is valid in block may compute a corresponding server code in block using one or more of the algorithms outlined above and may subsequently validate the user code through a comparison against the server code in block .

If authentication server validates the received user code in block then authentication server may transmit a signal indicative of the successful authentication of the user to resource server in block . Upon receipt of the signal indicating a successful multifactor authentication resource server may execute the requested function of the web service to perform the requested operation and delete the selected Dissertation.doc from home directory as depicted in which indicates that DOCUMENTS directory now contains only Defense.ppt and Data.xls but not Dissertation.doc. 

Alternatively if authentication server fails validates the received user code in block then authentication server may transmit a signal indicative of the failed authentication of the user to resource server in block . In response to the signal resource server may generate an appropriate error message which may be transmitted to user device through an appropriate programmatic interface and subsequently displayed to the user for example in screen of user device .

Although the processes of are described in terms of a remote API call that deletes a selected file from a home directory the disclosed embodiments are not limited to such illustrative operations. In additional embodiments and after validating a user code authentication server may initiate call to an application programming interface API or any additional or alternate programmatic interface of a resource service configured to perform any of the operations included within window of or any additional or alternate operation compatible with the files linked to home directory of the user.

For example as discussed above the call to the API may open the selected file using an application program appropriate to the file or specified by the user e.g. by selecting the Open icon of change a filename of the selected file e.g. by selecting the Rename icon of and or change a location of the selected file within a directory structure e.g. by selecting the Change Location icon of . Further for example the call to the API may generate one or more recommendations of electronic content or services associated with the selected file and additionally or alternatively may provide the user with an opportunity to purchase or obtain access to one or more services or additional elements of electronic content for example that are related to the selected file.

Further the disclosed embodiments are not limited to resource server e.g. resource server of that delegates multifactor authentication processes to corresponding authentication servers e.g. authentication server of . In additional embodiments. authentication server may execute a multifactor authentication process for a user of a user device e.g. user device and upon successful authentication execute a call to a service associated with resource server . In such embodiments authentication server may serve as a gateway that ensures a separation between user device and resource server .

Moreover although described in terms of operations performed on user content stored remotely within a cloud computing environment the multifactor authentication processes of are not limited to such illustrative applications. In additional embodiments after validation of a user code resource server may perform an operation or execute a function of a programmatic interface e.g. an API associated with one or more of an online retailer a financial institution an actuarial institution a data repository a news organization a social networking application a provider of electronic content or any additional or alternate entity without departing from the spirit or scope of the disclosed embodiments.

For example and in response to the authentication of the user resource server may execute a call to an API that enables the user to modify billing or shipping information associated with an electronic retailer including for example a current billing address a current personal address a current shipping address or details of a preferred payment method. Furthermore for example the call to an API may enable to user to access and modify details of a user account with a utility financial institution or actuarial institution including for example a modification to personal information associated with the user account a modification to a billing cycle of the user account a selection of paperless statements or a selection of a payment method.

Additionally or alternatively the call to the API may grant the user access to a restricted web service for example one that is available on a pay per user basis. As yet another example a call to an API associated with a financial institution may enable to user to gain access to multiple years of account statements at a cost and the successful validation of the user through the multi factor authentication process may indicate the user s agreement to the cost of the service.

Further for example the exemplary processes of are not limited to applications initiated by a user on a user device e.g. through I O device of user device . In additional embodiments a request for a function of a web service may be programmatically generated by an application executed in a background of user device by for example an operating system e.g. MacOS Windows or Linux a file system utility or any additional or alternate application executing on user device without departing from spirit or scope of the disclosed embodiments.

As one of ordinary skill in the art will appreciate one or more of blocks and blocks may be optional and may be omitted from implementations in certain embodiments. Furthermore functionality provided by one or more of blocks may be subdivided into multiple blocks.

The foregoing description has been presented for purposes of illustration. It is not exhaustive and is not limiting to the precise forms or embodiments disclosed. Modifications and adaptations will be apparent to those skilled in the art from consideration of the specification and practice of the disclosed embodiments. For example the described implementations include software but systems and methods consistent with the disclosed embodiments be implemented as a combination of hardware and software or in hardware alone. Examples of hardware include computing or processing systems including personal computers servers laptops mainframes micro processors and the like. Additionally although aspects of the disclosed embodiments are described as being stored in memory one skilled in the art will appreciate that these aspects can also be stored on other types of non transitory computer readable storage media such as secondary storage devices for example hard disks floppy disks or CD ROM or other forms of RAM or ROM USB media DVD or other high definition optical storage media.

Computer programs based on the written description and disclosed methods are within the skill of an experienced software developer. The various programs or program modules can be created using any of the techniques known to one skilled in the art or can be designed in connection with existing software. For example program sections or program modules can be designed in or by means of .Net Framework .Net Compact Framework and related languages such as Visual Basic C etc. Java C Objective C HTML HTML AJAX combinations XML or HTML with included Java applets. One or more of such software sections or modules can be integrated into a computer system or existing e mail or browser software.

Moreover while illustrative embodiments have been described herein the scope of any and all embodiments having equivalent elements modifications omissions combinations e.g. of aspects across various embodiments adaptations and or alterations as would be appreciated by those in the art based on the present disclosure. The limitations in the claims are to be interpreted broadly based on the language employed in the claims and not limited to examples described in the present specification or during the prosecution of the application which examples are to be construed as non exclusive. Further the blocks of the disclosed routines may be modified in any manner including by reordering blocks and or inserting additional blocks or deleting blocks. It is intended therefore that the specification and examples be considered as illustrative only with a true scope and spirit being indicated by the following claims and their full scope of equivalents.

