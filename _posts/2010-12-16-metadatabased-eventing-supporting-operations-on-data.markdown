---

title: Metadata-based eventing supporting operations on data
abstract: Concepts and technologies are described herein for providing metadata-based eventing supporting operations on data. Application data such as classes and events can be stored in a table and can be associated with and/or described by application metadata. The application metadata also can specify one or more event handlers that reference one or more methods on a class. The event handlers can be invoked via various delegates linked to the one or more application metadata tables. When a create, update, or delete operation on the application data is received, the application metadata can be queried to determine if the application metadata describes event handlers associated with the application data. If event handlers associated with the application data exist, the event handlers can be invoked.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08793706&OS=08793706&RS=08793706
owner: Microsoft Corporation
number: 08793706
owner_city: Redmond
owner_country: US
publication_date: 20101216
---
The use and reach of software continues to increase as new software uses and purposes are addressed. As more aspects of personal and professional lives are addressed by software interactions between various software packages may become more important. Furthermore users or other entities may wish to associate events in one software package or environment other actions or events. Thus users or other entities may wish to tailor software packages to work with and or react to information from other software packages and or changes in objects or program data of other software packages for example.

Changes to programs and program objects may be difficult to recognize and or communicate to another software package and or may require alteration of code associated with the program and or program objects. As complex software packages interact to provide functionality associated with various aspects of users business and personal needs the inability to communicate between two or more software packages may limit various interactions between the software and or may negatively impact the overall usefulness of a user or entities software library.

Concepts and technologies are described herein for providing metadata based eventing supporting operations on data. In accordance with the concepts and technologies disclosed herein information describing application data artifacts such as classes and events is stored in a table and is thus described by and or associated with application metadata. The application metadata can include information specifying one or more event handlers associated with the application data. The event handlers can reference one or more methods on a class and can be invoked via various delegates linked to one or more consumers. According to various embodiments when a create update or delete CUD operation on the application data is received the application metadata is queried to identify event handlers associated with the application data.

The event handlers can be tailored by a user or other entity to perform particular functionality when the event handlers are invoked. Thus for example when a record in a table corresponding to the application data is created updated or deleted an event handler associated with the table can be invoked. The event handlers can cause various devices to call one or more methods. Thus various actions can be taken when the application data is modified via invoking the event handlers associated with the application data.

According to one aspect a server computer executes a server application for providing functionality associated with the server computer. The server application generates and stores application data and or application metadata. A client communicates with the server computer to access the functionality associated with the server application. As operations are submitted to the server computer the application data may be modified via one or more CUD operations on the application data. The server application also can be used to tailor and store one or more event handlers in the application metadata. In some embodiments a user interface UI for creating event handlers is presented by the server application.

The server application can be configured to detect changes made to the application data. For example the server application can be configured to detect a create update or delete operation executed on the application data to modify one or more records of the application data. If changes are made to the application data the server application can query the application metadata to determine if any event handlers linked to the application data exist in the application metadata. The event handlers can be tailored by users or other entities to allow software or other entities to subscribe for published changes made to the application data. Event handlers linked to the application data can be invoked in a particular order if appropriate. When invoked the event handlers can execute one or more methods referenced by the event handlers.

It should be appreciated that the above described subject matter may be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable storage medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to concepts and technologies for providing metadata based eventing supporting operations on data. According to the concepts and technologies described herein application artifacts such as classes and events can be stored in a table and can be associated with and or described by application metadata. The application metadata also can specify one or more event handlers that reference one or more methods on a class. The event handlers can be invoked via various delegates linked to the one or more application metadata tables. The event handlers can be invoked when create update or delete operations on the application data are executed. The event handlers can prompt execution of one or more methods and can be invoked sequentially. As such methods executed via invoking the event handlers can be executed in a particular order.

While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements throughout the several figures aspects of a computing system computer readable storage medium and computer implemented methodology for providing metadata based eventing supporting operations on data will be presented.

Referring now to aspects of one operating environment for the various embodiments presented herein will be described. The operating environment shown in includes a server computer operating on or in communication with a network . The server computer is configured to execute an operating system not illustrated in and one or more application programs such as for example a server application and or other application programs. The operating system is a computer program for controlling the operation of the server computer and the server application is an executable program configured to execute on top of the operating system to provide functionality described herein for providing metadata based eventing supporting operations on data.

The server application is configured to generate conduct operations on cache and or store application data at the server computer and or at a data storage location in communication with the server computer . The application data can be generated by one or more users or other entities communicating with the server computer via one or more interfaces and or via other processes. The application data can be stored for example in a table. The server application also is configured to generate conduct operations on cache and or store application metadata . According to various embodiments the application data includes data used by the server application to provide functionality associated with the server computer . In the case of a customer relationship management CRM application for example the application data can include tables of customer data that include customer names and associated contact information as well as other data. It should be understood that this embodiment is illustrative and should not be construed as being limiting in any way.

The application metadata includes information describing various aspects of the application data . Additionally in various implementations the server application corresponds to software associated with a model based environment. The models included in the application data illustrated in can be described and persisted in a storage location as the application metadata . As such the application metadata can be interpreted by the server application . The application metadata includes information describing one or more events associated with the server application and or the application data . Thus it will be appreciated that the application metadata can be interpreted by the server application and or other authorized entities to determine scope and details associated with models and or events implemented by the server application .

In some embodiments the application data is published according to a publish and subscribe model wherein software can subscribe to receive notifications that changes have occurred in the application data . According to various implementations when changes are made to the application data the server application can be configured to query the application metadata to determine if any event handlers associated with the application data exist in the application metadata . As will be explained in more detail herein if any event handlers exist in the application metadata the event handlers can be invoked.

According to various implementations the server application is configured to store the application data and or the application metadata in an application data repository . As illustrated in the application data repository can be in communication with the server computer via a direct link. It should be understood however that the application data repository can communicate with the server computer via one or more network connections not shown . Thus the server computer can communicate with the application data repository via the network and or via other networks and or communication links.

The functionality of the application data repository can be provided by one or more databases memory devices mass storage devices server computers desktop computers mobile telephones laptop computers other computing systems and the like. In the illustrated embodiments the functionality of the application data repository is provided by a database communicatively linked to the server computer . It should be understood that this embodiment is illustrative and should not be construed as being limiting in any way.

According to various embodiments the operating environment includes a client configured to communicate with the server computer . The functionality of the client can be provided by a personal computer PC such as a desktop tablet or laptop computer system. The functionality of the client also can be provided by other types of computing systems including but not limited to server computers handheld computers netbook computers embedded computer systems personal digital assistants mobile telephones smart phones or other computing devices. The client is configured to execute an operating system OS and one or more application programs .

The OS is a computer program for controlling the operation of the client and the application programs are executable programs configured to execute on top of the OS to provide various functionality. In some embodiments the client interfaces with the server computer via one or more application programming interfaces APIs . For example the client can interface with the server computer via a web based API accessed via a traditional web browser or other web enabled application program . It should be understood that this embodiment is illustrative and should not be construed as being limiting in any way.

The client is configured to interact with the server application . For example the client can be configured to generate and submit one or more operations to the server application . The operations can be submitted to the server computer and interpreted by the server application to support various interactions between the client and the server application . In various embodiments the operations can include data corresponding to one or more queries of the application data create update or delete operations on the application data and the like. The operations can be generated by the client and or by the server application via interactions with the client . In some implementations the operations are generated by the server application in response to interactions with the client via UIs exposed APIs and or other means. In some embodiments a user or other entity interacts with the one or more UIs to generate the operations .

As explained above the application metadata can describe event handlers associated with the operations performed on application data . In some embodiments for example operations on the application data are associated with and or tied to event handlers described by the application metadata . The server application can be configured to query the application metadata in response to operations on the application data to identify and invoke the event handlers associated with the operations on the application data . Thus changes to the application data may via querying of the application metadata and the identification and invoking of event handlers described thereby trigger various events defined by the event handers which are described by the application metadata .

Turning now to additional aspects of the application metadata are described in additional detail according to exemplary embodiments. In particular is a Unified Modeling Language UML diagram illustrating a data structure for the application metadata . It should be understood that the illustrated data structure is exemplary and should not be construed as being limiting in any way. The data structure includes a table corresponding to the application data . As illustrated in the table can include a primary key corresponding to a name of the table though this is not necessarily the case. Thus the table can be uniquely identified by its name.

According to various embodiments the table includes references to one or more delegates . The delegates can be uniquely identified by a name illustrated in as DelegateName. The delegates also can be referenced by one or more classes . The classes can be uniquely identified by a name. In addition to including references to the delegates the classes also can reference one or more methods . The methods and the delegates can include one or more references to one or more event handlers . The event handlers include references to the classes and the table . According to various embodiments the event handlers are used to invoke various methods upon changes to one or more records in the table .

When an operation is received by the server application the server application can create update or delete one or more records associated with the application data . According to implementations the server application performs a CUD operation on the table to reflect changes associated with the operation . One or more event handlers are tied to the table such that changes to the table which includes one or more references to the delegates can trigger one or more methods . The methods can be invoked via one or more event handlers which may be referenced by the delegates . Thus it should be appreciated that CUD operations on the application data can be tied to any number of event handlers. Thus for example actions can be taken and one or more subscribers can be notified if one or more records of the application data is created updated or deleted. Although not described in detail with reference to it should be understood that each of the delegates and the methods can include references to one or more parameters .

Although not explicitly shown in in an exemplary embodiment the delegates include a pre create delegate a post create delegate a pre update delegate a post update delegate a pre delete delegate and a post delete delegate. Each of the delegates can include one or more referenced event handlers wherein each event handler can reference one or more methods on a class . Thus it will be appreciated that various methods can be invoked before or after CUD operations on the table . Furthermore as will be described in more detail herein with reference to the event handlers can be invoked in a particular order. Thus any number of methods can be performed and or can be performed in a particular order in response to a CUD operation on the table .

Turning now to aspects of a method for creating event handlers will be described in detail. It should be understood that the operations of the methods disclosed herein are not necessarily presented in any particular order and that performance of some or all of the operations in an alternative order s is possible and is contemplated. The operations have been presented in the demonstrated order for ease of description and illustration. Operations may be added omitted and or performed simultaneously without departing from the scope of the appended claims.

It also should be understood that the illustrated methods can be ended at any time and need not be performed in their respective entireties. Some or all operations of the methods disclosed herein and or substantially equivalent operations can be performed by execution of computer readable instructions included on a computer storage media as defined above. The term computer readable instructions and variants thereof as used in the description and claims is used expansively herein to include routines applications application modules program modules programs components data structures algorithms and the like. Computer readable instructions can be implemented on various system configurations including single processor or multiprocessor systems minicomputers mainframe computers personal computers hand held computing devices microprocessor based programmable consumer electronics combinations thereof and the like.

Thus it should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as states operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof.

For purposes of illustrating and describing the concepts of the present disclosure the methods disclosed herein are described as being performed by the server computer via execution of the server application . It should be understood that these embodiments are exemplary and should not be viewed as being limiting in any way. Additional and or alternative devices can provide the functionality described herein via execution of additional and or alternative applications. The method begins at operation wherein the server computer creates an event handler. As explained above it should be understood that a created event handler can be described by the application metadata .

According to some embodiments the server application is executable by the server computer to present one or more UIs via which users or other entities create the event handlers via submission of one or more operations . More particularly in some embodiments a user or other entity enters data for creating the event handlers via the UI the data for creating the event handlers is received by the server computer as the operations and the server computer can store and create or update the application metadata to reflect the event handlers. In some embodiments the application metadata describing the event handlers is cached in a data storage device such as a memory or cache until the user disconnects from the server computer or otherwise commits the changes to the application metadata . It should be understood that a user or other entity can interact with the server computer to create or configure event handlers at any time.

From operation the method proceeds to operation wherein the server computer associates the event handler to an event. Thus as will be explained in more detail herein occurrence of the event associated with or linked to the event handler can cause calling and or execution of the event handler. As is explained in more detail herein with reference to the server computer can be configured to query the application metadata in response to various events such as create update and or delete operations on the application data . The server computer can query the application metadata to identify and invoke event handlers associated with the application data which is described by the application metadata .

From operation the method proceeds to operation wherein the server computer determines if another event handler is to be created. For example as explained above a user may create one or more event handlers via interactions with the server computer via one or more UIs. Thus the user or other entity may create one or more event handlers at any particular time. If the server computer determines in operation that an additional event handler is to be created the method returns to operation for creation of another event handler. It will be appreciated that if the event handlers are created via one or more UIs that a determination that another event handler is to be created can include a determination that the one or more UIs have not been closed and or that a user or other entity continues to interact with the one or more UIs. It should be understood that this embodiment is exemplary and should not be construed as being limiting in any way.

The steps can be iterated until the server computer determines in any iteration of operation that additional event handlers are not to be created. If the server computer determines in operation that additional event handlers are not be created the method proceeds to operation . The method ends at operation .

Turning now to aspects of a method for providing metadata based eventing supporting operations on data will be described in detail. The method begins at operation wherein a CUD operation on a table corresponding to the application data is received by the server computer . In one exemplary embodiment a user or other entity submits an operation to the server computer for creating a customer or account in a customer or account table which can be stored as or as part of the application data . The customer or account can be created via interactions with one or more UIs if desired. In response to receiving one or more operations for creating the customer or account the server computer can update the application data to reflect the change.

From operation the method proceeds to operation wherein the server computer queries the application metadata to identify event handlers associated with the operation on the application data received in operation . More particularly the server computer queries the application metadata to determine if any event handlers associated with the operation received by the server computer are described by the application metadata . In the above exemplary embodiment the server computer queries the application metadata to determine if the application metadata describes any event handlers tied to creation of a customer in a customer table. It should be understood that this embodiment of customer creation is illustrative and should not be construed as being limiting in any way.

From operation the method proceeds to operation wherein the server computer determines if the application metadata describes any event handlers corresponding to the create update or delete operation received in operation a determination that can be based upon the query of the application metadata as described above with regard to operation . If the application server determines in operation that event handlers corresponding to the create update or delete operation received in operation are described by the application metadata the method proceeds to operation wherein the server computer identifies the one or more event handlers corresponding to the create update or delete operation . Although not illustrated in it should be clear from the description of that any number of event handlers may be described by the application metadata with respect to a particular operation . Thus the operation includes in some embodiments identifying more than one event handler and determining an order in which the event handlers are to be invoked.

Continuing the above example of creating a customer the application metadata corresponding to one or more customer tables can be linked to one or more event handlers for taking actions when customers are created. For example if a new customer is created an event handler may be invoked for updating a customer contact information database or spreadsheet updating email lists for advertising or marketing information generating messages or content for welcoming the new customer other purposes and the like. According to various embodiments one or more orders in which the one or more event handlers corresponding to these and or other actions are invoked can be specified or determined. In the above example an event handler for invoking a mail program to send a welcome message to the customer may be invoked after an event handler for creating a customer account and associated customer number is invoked. Thus the welcome message can include the created customer number. It should be understood that this embodiment is illustrative and should not be construed as being limiting in any way.

From operation the method proceeds to operation wherein the server computer invokes the event handlers. More particularly the server computer can invoke the event handlers in one or more orders determined in operation if desired. It should be understood that actions by one or more systems devices and or other entities may be prompted via invoking the event handlers. From operation or if the server computer determines in operation that event handlers corresponding to the create update or delete operation received in operation are not described by the application metadata the method proceeds to operation . The method ends at operation .

The computer architecture illustrated in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer architecture such as during startup is stored in the ROM . The computer architecture further includes a mass storage device for storing the operating system the server application the application data and the application metadata .

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer architecture . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available computer storage media or communication media that can be accessed by the computer architecture .

Communication media includes computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any delivery media. The term modulated data signal means a signal that has one or more of its characteristics changed or set in a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

By way of example and not limitation computer storage media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer architecture . For purposes the claims the phrase computer storage medium and variations thereof does not include waves signals and or other transitory and or intangible communication media per se.

According to various embodiments the computer architecture may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer architecture may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit also may be utilized to connect to other types of networks and remote computer systems for example the application data repository the client and or other devices systems and or networks. The computer architecture also may include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly the input output controller may provide output to a display screen a printer or other type of output device also not shown in .

It should be appreciated that the software components described herein may when loaded into the CPU and executed transform the CPU and the overall computer architecture from a general purpose computing system into a special purpose computing system customized to facilitate the functionality presented herein. The CPU may be constructed from any number of transistors or other discrete circuit elements which may individually or collectively assume any number of states. More specifically the CPU may operate as a finite state machine in response to executable instructions contained within the software modules disclosed herein. These computer executable instructions may transform the CPU by specifying how the CPU transitions between states thereby transforming the transistors or other discrete hardware elements constituting the CPU .

Encoding the software modules presented herein also may transform the physical structure of the computer readable media presented herein. The specific transformation of physical structure may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the computer readable media whether the computer readable media is characterized as primary or secondary storage and the like. For example if the computer readable media is implemented as semiconductor based memory the software disclosed herein may be encoded on the computer readable media by transforming the physical state of the semiconductor memory. For example the software may transform the state of transistors capacitors or other discrete circuit elements constituting the semiconductor memory. The software also may transform the physical state of such components in order to store data thereupon.

As another example the computer readable media disclosed herein may be implemented using magnetic or optical technology. In such implementations the software presented herein may transform the physical state of magnetic or optical media when the software is encoded therein. These transformations may include altering the magnetic characteristics of particular locations within given magnetic media. These transformations also may include altering the physical features or characteristics of particular locations within given optical media to change the optical characteristics of those locations. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this discussion.

In light of the above it should be appreciated that many types of physical transformations take place in the computer architecture in order to store and execute the software components presented herein. It also should be appreciated that the computer architecture may include other types of computing devices including hand held computers embedded computer systems personal digital assistants and other types of computing devices known to those skilled in the art. It is also contemplated that the computer architecture may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for providing metadata based eventing supporting operations on data have been disclosed herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological and transformative acts specific computing machinery and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

