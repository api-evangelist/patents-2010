---

title: Allocation of energy budgets to individual partitions
abstract: A mechanism is provided for allocating energy budgets to a plurality of logical partitions. An overall energy budget for the data processing system and a total of a set of requested initial energy budgets for the plurality of partitions are determined. A determination is made as to whether the total of the set of requested initial energy budgets for the plurality of partitions is greater than the overall energy budget for the data processing system. Responsive to the total of the set of requested initial energy budgets exceeding the overall energy budget, an initial energy budget is allocated to each partition in the plurality of partitions based on at least one of priority or proportionality of each partition in the plurality of partitions such that a total of the initial energy budgets for the plurality of partitions does not exceed the overall energy budget of the data processing system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08589556&OS=08589556&RS=08589556
owner: International Business Machines Corporation
number: 08589556
owner_city: Armonk
owner_country: US
publication_date: 20101105
---
The present application relates generally to an improved data processing apparatus and method and more specifically to mechanisms for allocating energy budgets to individual partitions.

In current computing systems there is an emerging user requirement for better power management. Users increasingly expect computing systems to behave in such a way as to be power efficient. Users also want the ability to set policies that trade off power and performance in order to meet their particular objectives. For example users want to be able to over provision their installations relative to the nominal maximum power and temperature values of the systems that they install but be able to take advantage of the variability in workloads and utilization to ensure that the computing systems operate correctly and within the limits of the available power and cooling.

Generally design and management considerations limit the amount of power provided to a computing system and thus energy that the computing system may consume over time. The power supplied to and the energy consumed by the various components in the computing system are generally managed by control systems built into the computing system at various levels. The term levels denotes the construction of a computing system out of hardware and software components such as processors which are then organized into boards which in turn are combined to make whole computing systems. Many computing systems provide a user interface to a power capping mechanism associated with the computing system that allows the user to configure power caps for the computing system such as an upper bound on the instantaneous power consumed which then bounds the energy consumption over a fixed period of time. That is both power and energy over a fixed period of time may be budgeted. However when a user partitions a computing device in order to run multiple operating system images a system wide power cap or energy budget may favor one partition while limiting another partition rather than reflecting the intent of the user.

In one illustrative embodiment a method in a data processing system is provided for allocating energy budgets to a plurality of logical partitions. The illustrative embodiment determines an overall energy budget for the data processing system. The illustrative embodiment determines a total of a set of requested initial energy budgets for the plurality of partitions. The illustrative embodiment determines whether the total of the set of requested initial energy budgets for the plurality of partitions is greater than the overall energy budget for the data processing system. Responsive to the total of the set of requested initial energy budgets for the plurality of partitions exceeding the overall energy budget of the data processing system the illustrative embodiment allocates an initial energy budget to each partition in the plurality of partitions based on at least one of priority or proportionality of each partition in the plurality of partitions such that a total of the initial energy budgets for the plurality of partitions does not exceed the overall energy budget of the data processing system.

In other illustrative embodiments a computer program product comprising a computer useable or readable medium having a computer readable program is provided. The computer readable program when executed on a computing device causes the computing device to perform various ones and combinations of the operations outlined above with regard to the method illustrative embodiment.

In yet another illustrative embodiment a system apparatus is provided. The system apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which when executed by the one or more processors cause the one or more processors to perform various ones and combinations of the operations outlined above with regard to the method illustrative embodiment.

These and other features and advantages of the present invention will be described in or will become apparent to those of ordinary skill in the art in view of the following detailed description of the example embodiments of the present invention.

The illustrative embodiments provide a mechanism for allocating energy budgets to individual partitions. That is the illustrative embodiments allocate energy budgets to individual partitions based on a priority associated with the function or workload being performed by the partition with regard to energy management and virtualization. As stated previously failing to manage energy budgets at a partition level may mean that the behavior of the computing system may not reflect the intent of the user. Partitions may depending on their behavior receive more or less than the proportion of total system energy than they should. In turn an overallocation or an underallocation of power and energy may lead to problems such as performance anomalies. The illustrative embodiments provide for budgeting energy to partitions to match their needs and the user s priorities.

Thus the illustrative embodiments may be utilized in many different types of data processing environments including a distributed data processing environment a single data processing device or the like. In order to provide a context for the description of the specific elements and functionality of the illustrative embodiments are provided hereafter as example environments in which aspects of the illustrative embodiments may be implemented. While the description following will focus primarily on a single data processing device implementation for allocating energy budgets to individual partitions this is only an example and is not intended to state or imply any limitation with regard to the features of the present invention. To the contrary the illustrative embodiments are intended to include distributed data processing environments and embodiments in which energy budgets may be allocated to individual partitions.

With reference now to the figures and in particular with reference to example diagrams of data processing environments are provided in which illustrative embodiments of the present invention may be implemented. It should be appreciated that are only examples and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

In the illustrative embodiments a computer architecture is implemented as a combination of hardware and software. The software part of the computer architecture may be referred to as firmware microcode or millicode. The combination of hardware and software creates an instruction set and system architecture that the rest of the computer s software operates on such as Open Firmware Virtual Machine Monitors VMM Operating Systems applications etc. The computer architecture created by the initial combination is immutable to the computer software except through defined interfaces which may be few.

Referring now to the drawings and in particular to there is depicted a block diagram of a data processing system with which aspects of the illustrative embodiments may advantageously be utilized. As shown data processing system includes processor units . Each of processor units includes a processor and a cache memory. For example processor unit contains processor and cache memory and processor unit contains processor and cache memory

Processor units are connected to main bus . Main bus supports system planar that contains processor units and memory cards . System planar also contains data switch and memory controller cache . Memory controller cache supports memory cards that include local memory having multiple dual in line memory modules DIMMs .

Data switch connects to bus bridge and bus bridge located within native I O NIO planar . As shown bus bridge connects to peripheral components interconnect PCI bridges and via system bus . PCI bridge connects to a variety of I O devices via PCI bus . As shown hard disk may be connected to PCI bus via small computer system interface SCSI host adapter . Graphics adapter may be directly or indirectly connected to PCI bus . PCI bridge provides connections for external data streams through network adapter and adapter card slots via PCI bus .

Industry standard architecture ISA bus connects to PCI bus via ISA bridge . ISA bridge provides interconnection capabilities through NIO controller having serial connections Serial 1 and Serial 2. A floppy drive connection keyboard connection and mouse connection are provided by NIO controller to allow data processing system to accept data input from a user via a corresponding input device. In addition non volatile RAM NVRAM connected to ISA bus provides a non volatile memory for preserving certain types of data from system disruptions or system failures such as power supply problems. System firmware is also connected to ISA bus for implementing the initial firmware functions. Service processor connects to ISA bus to provide functionality for system diagnostics or system servicing.

The operating system OS is stored on hard disk which may also provide storage for additional application software for execution by a data processing system. NVRAM is used to store system variables and error information for field replaceable unit FRU isolation. During system startup the bootstrap program loads the operating system and initiates execution of the operating system. To load the operating system the bootstrap program first locates an operating system kernel image on hard disk loads the OS kernel image into memory and jumps to an initial address provided by the operating system kernel. Typically the operating system is loaded into random access memory RAM within the data processing system. Once loaded and initialized the operating system controls the execution of programs and may provide services such as resource allocation scheduling input output control and data management.

The illustrative embodiment may be embodied in a variety of data processing systems utilizing a number of different hardware configurations and software such as bootstrap programs and operating systems. The data processing system may be for example a stand alone system or part of a network such as a local area network LAN or a wide area network WAN . As stated above is intended as an example not as an architectural limitation for different embodiments of the present invention and therefore the particular elements shown in should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.

With reference now to a block diagram of an exemplary logically partitioned platform is depicted in which the illustrative embodiments may be implemented. The hardware in logically partitioned platform may be implemented for example using the hardware of data processing system in .

Logically partitioned platform includes partitioned hardware operating systems and virtual machine monitor . Operating systems and may be multiple copies of a single operating system or multiple heterogeneous operating systems simultaneously run on logically partitioned platform . These operating systems may be implemented for example using OS 400 which is designed to interface with a virtualization mechanism such as partition management firmware e.g. a hypervisor. OS 400 is used only as an example in these illustrative embodiments. Of course other types of operating systems such as AIX and Linux may be used depending on the particular implementation. Operating systems and are located in logical partitions and respectively.

Hypervisor software is an example of software or firmware that may be used to implement a logically partitioned platform in this example virtual machine monitor and is available from International Business Machines Corporation. Firmware is software stored in a memory chip that holds its content without electrical power such as for example a read only memory ROM a programmable ROM PROM an erasable programmable ROM EPROM and an electrically erasable programmable ROM EEPROM .

Logical partitions and also include partition firmware loader and . Partition firmware loader and may be implemented using IPL or initial boot strap code IEEE 1275 Standard Open Firmware and runtime abstraction software RTAS which is available from International Business Machines Corporation.

When logical partitions and are instantiated a copy of the boot strap code is loaded into logical partitions and by virtual machine monitor . Thereafter control is transferred to the boot strap code with the boot strap code then loading the open firmware and RTAS. The processors associated or assigned to logical partitions and are then dispatched to the logical partition s memory to execute the logical partition firmware. Among other functions the logical partition firmware loads the operating system that subsequently executes in the logical partition.

Partitioned hardware includes a plurality of processors a plurality of system memory units a plurality of input output I O adapters and storage unit . Each of the processors memory units NVRAM storage and I O adapters may be assigned to one of multiple logical partitions and within logically partitioned platform each of which corresponds to one of operating systems and .

Virtual machine monitor performs a number of functions and services for logical partitions and to generate and enforce the partitioning of logical partitioned platform . Virtual machine monitor is a firmware implemented virtual machine identical to the underlying hardware. Thus virtual machine monitor allows the simultaneous execution of independent OS images and by virtualizing all the hardware resources of logical partitioned platform .

Service processor may be used to provide various services such as processing of platform errors in logical partitions and . Service processor may also act as a service agent to report errors back to a vendor such as International Business Machines Corporation. Operations of the different logical partitions may be controlled through a hardware system console . Hardware system console is a separate data processing system from which a system administrator may perform various functions including reallocation of resources to different logical partitions.

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in .

Again the illustrative embodiments provide for allocating an energy budget to each partition running on the system in proportion to one or more of the partition s relative priority as specified by the user the energy demand from the partition and or the an overall surplus or deficiency of energy versus the budgeted energy to date. The energy budget for the computing system may be split among the partitions running on the system. The scheme of allocating an energy budget to each partition relies on either an accurate partition level energy accounting or functions which map between energy values and observable activity levels.

LPARs and may also be referred to as clients or more commonly as guests. LPAR has an instance of an operating system OS with a set of application programming interfaces APIs and one or more applications running LPAR has OS with APIs and one or more applications . LPAR has OS with APIs and one or more applications . While logically partitioned data processing system illustrates only LPARs and the illustrative embodiments are not limited to such. Rather any number of LPARs may be utilized with the mechanisms of the illustrative embodiments without departing from the spirit and scope of the present invention.

As with all computing systems data processing system is powered with some type of power and therefore within any particular time interval has an energy bound as well. The energy limit may be imposed by design considerations such as a bulk power supply one or more line cords or an internal distribution system. The energy limit may also be imposed as a user specified power cap that may be used for installation planning purposes or to manage costs. In this example virtualization mechanism may determine an overall energy budget for the first interval of time for data processing system based on values that are initially defined and stored on data processing system and or request an overall energy budget for it from an administrator of data processing system . Virtualization mechanism may then send the overall energy budget for the initial time interval to energy budget analysis and allocation mechanism .

Additionally virtualization mechanism may receive one or more logical partition requests for the creation or destruction of logical partitions such as LPARs and from a user. Upon receiving a creation request virtualization mechanism identifies in the request a type of logical partition to be generated such as a dedicated logical partition a shared logical partition or the like a number of resources such as processors processor cores memory or the like that are to be allocated to the logical partition. Additionally virtualization mechanism attempts to identify in the request an initial energy budget for the first interval of time that is to be used for the partition. If an energy budget is identified virtualization mechanism may then send the initial energy budget for the partition to energy budget analysis and allocation mechanism . If an energy budget is not identified then virtualization mechanism may send information regarding the number of resources that are allocated to the logical partition to energy budget analysis and allocation mechanism . Based on this information energy budget analysis and allocation mechanism may determine an initial energy budget for the partition based on the configuration of the resources.

With the overall energy budget of data processing system and the individual initial energy budgets for LPARs and identified for the initial interval energy budget analysis and allocation mechanism initially allocates an energy budget to each of LPARs and that is equal to the identified initial energy budgets so long as the total of the initial energy budgets does not exceed the overall energy budget of data processing system . If the total of the initial energy budgets for LPARs and exceeds the overall energy budget of data processing system energy budget analysis and allocation mechanism may either reduce the initial energy budgets for each of LPARs and proportionally based the each of the initial energy budgets requested or identified for each of LPARs and reduce the initial energy budgets for each of LPARs and based on a priority associated with each of LPARs and or reduce the initial energy budgets for each of LPARs and based on some combination of proportionality and priority.

For example with regard to proportionality if LPAR has an initial energy budget of 360 watt seconds for a 1 second interval LPAR has an initial energy budget of 600 watt seconds LPAR has an initial energy budget of 840 watt seconds and the overall energy budget of data processing system is 1500 watt seconds all for 1 second intervals then the total individual initial energy budgets of LPARs and exceed the overall energy budgets of data processing system by 300 watts seconds. In order to properly allocate an initial energy budget to each of LPARs and so that the overall energy budget of data processing system is not exceeded the energy budget analysis and allocation mechanism may proportionally reduce the initial energy budgets such that LPAR has an allocated energy budget of 300 watt seconds a reduction of 60 watt seconds LPAR has an allocated energy budget of 500 watt seconds a reduction of 100 watt seconds and LPAR has an allocated energy budget of 700 watt seconds a reduction of 140 watt seconds . Thus the total allocated initial energy budget will be 1500 watt seconds.

With regard to priority energy budget analysis and allocation mechanism may determine a priority of each of LPARs and . The priority of a partition may identified at the time of creation of the partition at the request of the user or may be set by an administrator after the creation of the partition. Thus the priority is programmable within data processing system and may be changed during the existence of the partition. Again if the total individual initial energy budgets of LPARs and exceeds the overall energy budgets of data processing system then in order to properly allocate an initial energy budget to each of LPARs and so that the overall energy budget of data processing system is not exceeded the energy budget analysis and allocation mechanism may reduce the initial energy budgets. For example if LPAR has a priority of 1 LPAR has a priority of 2 and LPAR has a priority of 3 then energy budget analysis and allocation mechanism may not reduce the allocated energy budget of LPAR leaving LPAR with an allocated energy budget of 360 watt seconds may reduce LPAR by 100 watt seconds leaving LPAR with an allocated energy budget of 500 watt seconds and may reduce LPAR by 200 watt seconds leaving LPAR with an allocated energy budget of 640 watt seconds. Thus the total allocated initial energy budget will be 1500 watt seconds which is equal to the overall energy budget of data processing system of 1500 watt seconds.

With the initial energy budgets allocated energy budget analysis and allocation mechanism proceeds to divide time into predetermined intervals Tand allocate an energy budget to each of LPARs and for the next time interval T. In order to adequately allocate an energy budget to each of LPARs and for the next time interval T energy budget analysis and allocation mechanism may either map an energy consumption for each LPAR based on the activities performed by the LPAR on each of partitioned hardware as identified by virtualization mechanism or receive partition level energy accounting from the operating system on each LPAR where the operating system performs measurements of the energy consumption.

In order to determine a next energy budget for each of LPARs and energy budget analysis and allocation mechanism uses the following conventions 

The basic idea is to obtain a state in data processing system such that the E T is approximately equal to E which in turn is approximately equal to the sum of the E P T for all of the partitions P which in turn is approximately equal to the sum of the E P T for all of the partitions P. In order that data processing system does not exceed the energy budget Eof data processing system energy budget analysis and allocation mechanism provides a sufficient margin in energy allocation so that data processing system may experience a small deficit D during Twithout exceeding E such that a usable energy budget of data processing system E M is equal to Eminus the small deficit D . It is also possible that data processing system may experience a surplus S of energy during T any surplus S is available for allocation to the partitions at the next time interval T.

Energy budget analysis and allocation mechanism also lets Pr P be the priority of partition P. The illustrative embodiments assume without loss of generality that Pr P Pr P . . . Pr P . In the illustrative embodiments priorities are set during initialization of the partition. However an operating system with the partition may request that its priority be altered in order to bid for more energy or release energy to the platform for other uses which is described in detail below.

Thus energy budget analysis and allocation mechanism determines for each partition P a surplus and a deficit based on the measured energy E P T versus the previously allocated energy budget E P T for the interval T. That is for each P energy budget analysis and allocation mechanism calculates S P T and D P T where at most only one of S P T and D P T will be greater than 0. Based on the individual surpluses or deficits of the partitions energy budget analysis and allocation mechanism calculates a total surplus S T or deficit D T for data processing system .

Energy budget analysis and allocation mechanism then distributes an allocation of energy in proportion to each partition Pbased on the priority of the partition. That is energy budget analysis and allocation mechanism distributes the surplus S or deficit D of data processing system to the partitions to adjust their base energy budgets for the next time interval T. The effect is that E P T Pr P Pr Pj E M .

For partitions with a surplus if there is a higher priority partition with a deficit energy budget analysis and allocation mechanism transfers the surplus to the highest priority partition with a deficit. That is for each Pj where S Pj T 0 if there is another Psuch that Pr P Pr P and D Pk T 0 then for the smallest such P E P T E P T S P T and E P T E PT S P T .

If E M of data processing system indicates a surplus and all partitions have a surplus or exactly meet the budget target no partition has a deficit energy budget analysis and allocation mechanism reduces the energy budget E P T to cut their surpluses in half in order to align the energy budgets with the measured energy consumption of the system. In other words if S M 0 and for all P S P T 0 E P T E P T S P T . Energy budget analysis and allocation mechanism then repeats the process for the next interval. Although the formulation presented above is in terms of energy the illustrative embodiments recognize that a corresponding formulation in terms of power is also possible where the energy budget becomes a power limit.

Energy budget analysis and allocation mechanism may then send the energy budget for each partition E P T to virtualization mechanism for enforcement. Virtualization mechanism may either loosen constraints on partitions that adhere closely to their energy budgets or tighten constraints on partitions that tend to continuously run either deficits or surpluses. In another embodiment energy budget analysis and allocation mechanism may communicate the energy budget for each partition E P T back to the operating system image running in each partition P. Using this information the operating system may cooperate with virtualization mechanism to manage the energy budget by either setting an energy state that is bounded by the constraints of the energy budget E P T or making power aware decisions about the amount of work to schedule during the time interval T. Enforcement of the energy budget by either the operating system in the partition or virtualization mechanism may be performed by proportional adjustment of the frequencies of the processors of the partitioned hardware associated with the partitions. That is the frequencies of the processors of the partitioned hardware may be decreased to correct a deficit in relation to the size of the deficit correction or may be increased to correct a surplus in relation to the size of the surplus correction. The illustrative embodiments also recognize that other energy consumption control mechanisms may also be used without departing from the spirit and scope of the invention.

Thus the illustrative embodiments provide a mechanism for allocating energy budgets to individual partitions. That is the illustrative embodiments allocate energy budgets to individual partitions based on a priority associated with the function or workload being performed by the partition with regard to energy management and virtualization. Partitions may depending on their behavior receive more or less than the proportion of total system energy than they should. The illustrative embodiments provide for budgeting energy to partitions to match their needs and the user s priorities.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in any one or more computer readable medium s having computer usable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in a baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Computer code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable radio frequency RF etc. or any suitable combination thereof.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to the illustrative embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions that implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Referring now to these figures provide flowcharts outlining example operations of allocating energy budgets to a plurality of logical partitions in a data processing system. depicts an example of the operation performed in setting energy budgets for the initial time interval for the plurality of partitions in accordance with an illustrative embodiment. As the operation begins a virtualization mechanism and or a energy budget analysis and allocation mechanism determines an overall energy budget for the data processing system step . The initial energy budget for the data processing system may be either initially defined and stored on the data processing system or the virtualization mechanism may request an overall energy budget from an administrator of the data processing system.

The virtualization mechanism and or the energy budget analysis and allocation mechanism then determines whether each partition in a plurality of partitions has an associated requested initial energy budget that is to be used for the partition step . If at step a requested initial energy budget is identified the energy budget analysis and allocation mechanism uses the requested initial energy budget for the partition step . If at step the requested initial energy budget is not identifiable then the energy budget analysis and allocation mechanism determines a requested initial energy budget for the partition based on the configuration of the resources for the partition step .

From steps or the energy budget analysis and allocation mechanism determines a total of the requested initial energy budgets for the plurality of partitions step . The energy budget analysis and allocation mechanism then determines whether the total of the requested initial energy budgets for the plurality of partitions is greater than the overall energy budget for the data processing system step . If at step the total of the requested initial energy budgets for the plurality of partitions fails to exceed the overall energy budget of the data processing system then the energy budget analysis and allocation mechanism allocates the requested initial energy budget to each partition in the plurality of partitions step . If at step the total of the requested initial energy budgets for the plurality of partitions exceeds the overall energy budget of the data processing system then the energy budget analysis and allocation mechanism may either reduce initial energy budgets of the partitions proportionally based on each of the requested initial energy budgets requested or identified reduce the initial energy budgets of the partitions based on a priority associated with each of the partitions or reduce the initial energy budgets of the partitions based on some combination of proportionality and priority such that the total of the initial energy budgets for the plurality of partitions does not exceed the overall energy budget of the data processing system step . From steps or the energy budget analysis and allocation mechanism then sends the initial energy budget for each partition E P T to either the virtualization mechanism or a respective operating system on each partition for enforcement step with the operation terminating thereafter.

The energy budget analysis and allocation mechanism determines for each partition P a surplus and a deficit based on the measured energy E P T versus a previously allocated energy budget E P T step . That is for each partition P the energy budget analysis and allocation mechanism calculates S P T and D P T where at most only one of S P T and D P T will be greater than 0. Based on the individual surpluses or deficits of the partitions the energy budget analysis and allocation mechanism calculates a total surplus S or a total deficit D for the data processing system step .

The energy budget analysis and allocation mechanism determines whether based on the energy budget of data processing system E M the entire data processing system indicates a surplus and all partitions have a surplus step . If at step the energy budget of data processing system E M indicates a surplus and no partitions have a deficit then the energy budget analysis and allocation mechanism reduces the surplus energy budget E P T to reduce the surpluses of the partitions in half in order to align the energy budgets with the measured energy consumption of the system step . In other words if S M 0 and for all P S P T 0 E P T E P T S P T .

If at step the energy budget of data processing system E M fails to indicate a surplus or not all of the partitions have a surplus then the energy budget analysis and allocation mechanism determines a next energy budget for the next time interval Tin proportion to each partition Pbased on the priority of the partition and whether there is a surplus or a deficit in the partition such that E P T Pr P Pr Pj E M step . For partitions with a surplus if there is a higher priority partition with a deficit the energy budget analysis and allocation mechanism transfers the surplus to the highest priority partition with a deficit. That is for each Pj where S Pj T 0 if there is another Psuch that Pr P Pr P and D Pj T 0 then for the smallest such P E P T E P T S P T and E P T E P T S P T . From steps or the energy budget analysis and allocation mechanism sends either the surplus energy budget or the next energy budget to either the virtualization mechanism or a respective operating system on each partition for enforcement step with the operation returning to step thereafter.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Thus the illustrative embodiments provide mechanisms for allocating an energy budget to each partition running on the system in relation to one or more of the partition s relative priority as specified by the user the energy demand from the partition and or the an overall surplus or deficiency of energy versus the budgeted energy to date. The energy budget for the computing system may be split among the partitions running on the system. The scheme of allocating an energy budget to each partition relies on either an accurate partition level energy accounting or functions which map between energy values and observable activity levels.

As noted above it should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In one example embodiment the mechanisms of the illustrative embodiments are implemented in software or program code which includes but is not limited to firmware resident software microcode etc.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

