---

title: Large-scale event evaluation using realtime processors
abstract: Large-scale event processing systems are often designed to perform data mining operations by storing a large set of events in a massive database, applying complex queries to the records of the events, and generating reports and notifications. However, because such queries are performed on very large data sets, the processing of the queries often introduces a significant delay between the occurrence of the events and the reporting or notification thereof. Instead, a large-scale event processing system may be devised as a large state machine organized according to an evaluation plan, comprising a graph of event processors that, in realtime, evaluate each event in an event stream to update an internal state of the event processor, and to perform responses when response conditions are met. The continuous monitoring and evaluation of the stream of events may therefore enable the event processing system to provide realtime responses and notifications of complex queries.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08510284&OS=08510284&RS=08510284
owner: Microsoft Corporation
number: 08510284
owner_city: Redmond
owner_country: US
publication_date: 20101220
---
Within the field of computing many scenarios involve a set of events to be evaluated through data mining. As a first example the events may comprise the actions of a set of customers interacting with a commercial store website product or service and the actions may be evaluated to identify consumer trends. As a second example the events may comprise the actions of individuals comprising a demographic a group or an organization and the actions may be evaluated to identify patterns of behavior of behavior among the individuals. As a third example the events may comprise the actions of users who wish to receive services and information that may be of interest to the users. As a fourth example the events may comprise measurements of a system such as a machine or an environment that are to be evaluated to monitor the state of the system on behalf of an administrator. As a fifth example the events may comprise measurements performed in a technical or scientific study and the evaluation may be performed to identify relevant information.

Many such processing systems are centered around a large database and the evaluation of data stored therein. For example many such processing systems are designed as a server farm comprising a large number of database servers interoperating as a distributed database and configured to generate various queries to be applied to a very large data set stored therein. This information may be stored e.g. as a large set of tables comprising interrelated records where such tables and records may be distributed across the database servers comprising the server farm. As an example of such large scale processing many such data processing systems utilize a MapReduce based framework wherein a central coordinating system may evaluate a query by identifying various query components distributing each query component to a database servers storing information relevant to the query component and compositing the query results generated by each database server to generate a query response. Such databases are often designed to store a large amount of data gathered over a period of time and to apply large and complex queries to large numbers of records potentially comprising billions of records gathered over a long period of time and the evaluation of such queries may eventually result in a result set comprising portions of the records satisfying the criteria of the query.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Event processing systems centrally designed around records stored in a database may present many advantages e.g. a detailed evaluation of nuances of events detected over a long period of time. However such database systems may involve some disadvantages. First the application of a query to a large data set may take a while to execute against the large data set. For example reports based on various queries may be periodically generated but the frequency of such reports may introduce a delay between the occurrence of an event and the results of the report thereby limiting the responsiveness to recent events by recipients e.g. individuals and processes who receive the report. As a second example the administrative storage of a large volume of historic information may be very costly involving the administration and costs of acquiring and maintaining large storage systems. As a third example the recipients of a report may have little interest in the fine grain details of events stored in the database but rather are interested only in the high level reports resulting from the evaluation. However since the computation is performed after storing the information the administrators may be unable to reduce the data footprint without losing details captured in the records of the events that influence the results of reports. Thus many of the stored records may be too specific to be of much direct value to the administrators while also imposing a significant administrative cost yet the administrators may have to capture the information in order to receive the results of analyses utilizing such records.

Presented herein are techniques for improving the evaluation of events by large scale processors. In accordance with these techniques the evaluation of such events is not principally performed by storing records of such events in a database and then applying a query to the database to generate a query result representing useful information. Rather the processing system may be formulated as a large state machine comprising a graph of realtime event processors operating as individual state machines and communicating with the other event processors. An evaluation plan may be provided e.g. a stepwise logical process of evaluating a set of events and for various evaluation stages of the evaluation plan one or more event processors may be instantiated each event processor having a set of response conditions that when satisfied cause the event processor to perform a response. When an event is received the event processor may perform some processing on the event update its internal state and if its response conditions are satisfied perform the response e.g. generating a report or notification or communicating the event or a processing result to another event processor . Thus the results and effects of the events and processing results are stored not in a database but in the internal states of the state machines. Moreover the monitoring and processing of a stream of events results in notifications and responses to queries based on the current internal states of the state machines which have been generated from and reflect the history of the event stream. As a result notifications and reports based on a long history of accumulated knowledge may be generated promptly after the detection of the event or the receipt of the query.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

Within the field of computing many scenarios involve the processing of a large set of events received from an event source. The events may comprise e.g. the actions of individuals measurements of physical properties or reports generated by automated processes. As a first example the events of a set of consumers may be detected to observe consumer trends such as the popularity of products and services user experiences and consumer decisions. As a second example the events of a set of individuals such as members of a community or an organization may be detected to identify behavioral patterns such as evaluating interactions and discussions occurring within a social network. As a third example an end user may utilize a computer to track his or her actions in order to identify interests present information related thereto and take actions on behalf of the end user. As a fourth example measurements of a system such as a natural environment a machine or a processing plant may be recorded to evaluate analyze and monitor the state of the system. As a fifth example the events may arise within a field of technical or scientific research such as medical events of individuals in a community and may be evaluated to generate new information within the domain of the research. In these and other scenarios a large set of data about the events may be generated and reported to a processing system for processing via data mining techniques. The evaluation may be directed e.g. formulated by an administrator to retrieve information in response to specific queries and or undirected e.g. automatically identifying significant patterns within the events that may be of interest to the administrator such as clustering similar types of data or formulating knowledge or heuristics about the information domain of the events.

Many such systems are designed as a set of computers such as a server farm that together manages a large and complex database configured to store a large number of records possibly numbering into the billions . For example the database may be distributed over a large number of database servers each configured to store a portion of the database e.g. a subset of the tables of the database and or a subset of the records of one or more tables and to apply various queries to the records stored therein. The database may also be structured as a series of layers e.g. a first set of servers operating as a data storage layer configured to store the data and a second set of servers operating as a business logic layer configured to access the data and perform complex evaluation of the data. These servers may support many types of operations e.g. complex and historic analyses of the data monitoring for events of particular interest providing reports that summarize the data in various ways and data mining to identify patterns and knowledge represented within the database.

One such technique that is often utilized in such event processing systems is the distribution of a query over a set of database servers. The MapReduce framework is often utilized for this task and does so by providing a master node having information about the other database servers comprising the event processing system. Upon receiving a query the master node may seek to decompose the query into various subqueries each pertaining to a subset of data that is stored on a particular subset of database servers. For example if a query involves a combined evaluation of three tables the master node may seek to find one or more database servers that are currently storing the respective tables and may send a subquery to each database server querying the data stored thereby. Upon receiving the results of the query evaluation from each database server the master node may compose the results into a result set that is responsive to the query and may provide it to the individual or process that submitted the query.

While event processing database in the exemplary scenario of presents some advantages some disadvantages may also arise from the design of the processing system around a large database. As a first example the storage of a large database involves significant cost in acquiring the storage and processing hardware and in configuring and administrating the event processing system . For example administrators may expend considerable attention in designing implementing securing and maintaining the data stores the database contained therein and the interrelationships of the query processor and the database servers . Moreover the storage of a large number of events with a high degree of granularity may not be cost effective. For example a complex query applied against the database may generate high level results e.g. macroanalyses and extracted knowledge from the low level records stored in the database but otherwise the storage of voluminous low level data may impose a significant administrative cost without significant benefit. Yet it may not be feasible to cull the voluminous low level data since the execution of future queries may be skewed if not applied against older events as well as newer events .

As a second example the processing of any query against the large number of records stored in the database may involve considerable computational resources since the queries may potentially be executed over a large number and or complexity of records. As a result the processing of each query may involve a considerable expenditure of computing resources and a considerable delay. Accordingly complex queries are often executed only periodically e.g. once per week. Additionally the event processing database may be unable to monitor events continuously for updates or changes. As a result the event processing database may be unable to provide continuous realtime reports and notifications in response to newly received events . The delay imposed between the receipt of events and the notification or reporting of query results to a user may diminish the value of thereof. For example if a complex query is executed weekly a user may not be notified of events until up to a week after occurrence. This delay may be costly in circumstances where rapid responsiveness may be of significant value.

As a third example an event processing database may not be able to continue evaluating a query against events in a continuous manner. In some scenarios the event processing database may after evaluating a query and generating query results apply the query to subsequently received events and supplement the results with newly generated records based on such events . However this supplemental approach does not holistically reevaluate the query against the entire database. For example in a data mining technique that involves a clustering of events into distinctive types a first evaluation of the query may identify some clusters of events and continued evaluation of newly received events may classify events into previously identified clusters and may also identify new clusters comprising events that are markedly different from the previously identified clusters. However the supplemental evaluation of new events cannot reassess the previously identified clusters in view of the new events without reevaluating the query holistically against the entire database.

This inefficiency may arise in significant part from the statelessness of the event processing database in the evaluation of each query anew. For example the processing of a query involves the current set of records and the operations specified in the query but does not include knowledge or previous computations arising from previously generated queries . For example executing the same query repeatedly on the database involves gathering the same records and performing the same evaluation thereupon. Instead the event processing database reevaluating the referenced data set from scratch for each query . While caching techniques may improve the throughput of the query the results of one query do not meaningfully inform the results of further queries . In general the event processing database stores information and na vely evaluates queries but does not capture or utilize knowledge. Additionally fine grain data within the database that has already been evaluated may have to be preserved in order to achieve consistent results for future queries because the evaluation of the query can only utilize previously discovered knowledge by reprocessing the previously evaluated events along with the subsequently received events . For example in scenarios involve a clustering of events the query may differentiate events into clusters based on heuristics discovered during the query . However when the query terminates the heuristics may be discarded e.g. the database may preserve the query results e.g. the identified clusters and the events related thereto but not the rationale whereby the clusters were selected. Accordingly these rationale may not be available to the event processing database while evaluating subsequently received events . Reevaluation may only be achievable by re executing the entire query against the entire database. This na vet in the evaluation of events may present significant limitations in the capabilities of the event processing system. For example for complex queries involving a large number of database records and or complex processing of such records continuous and realtime evaluation or even frequent evaluation may be cost ineffective or simply unachievable. These and other disadvantages may arise from the implicit inefficiencies in using a large database to evaluate the events .

Presented herein are alternative techniques for evaluating events received from an event source . These techniques involve modeling an event processing system not as a database to be na vely queried for each query but rather as a state machine. In these techniques an evaluation plan is provided involving one or more evaluation stages involved in the evaluation of the events . The evaluation plan may be generated by a user such as an administrator with or without the assistance of a computer. Using this evaluation plan an event processor set may be generated comprising event processors configured to perform an evaluation of events for each evaluation stage of the evaluation plan. Each event processor may have an internal state and upon completing an evaluation of an event may update its internal state with the results of the evaluation. The event processor may therefore store knowledge extracted from the evaluation of events and may retain and utilize that knowledge while evaluating subsequent events . Therefore by comparing its internal state upon evaluating each event and making adjustments each event processor may retain the knowledge extracted during each evaluation and may re use and reexamine this knowledge while processing future events . Moreover each event processor may also perform one or more responses based on whether or not the state of the of the event processor matches particular response conditions. For example an event processor may notify a user or administrator upon identifying significant changes in the state of the event processor which may represent knowledge or significant information. Moreover event processors may be interconnected e.g. with event processors intercommunicating in response to the evaluation of events . Finally the event processor set may be connected to the event source to initiate the monitoring of the events generated thereby. Because the evaluation of each event including newly submitted queries involves the examination of the internal states of the event processors instead of a na ve application of the query to the entire set of events stored in the database the event processors may be able to evaluate and respond to events in a rapid manner. Accordingly such evaluation may be performed continuously on an event stream. This may result in notifications reports and query results that may be delivered in realtime including both the latest events in view of the knowledge extracted from the evaluation of all preceding events .

As one such example an event processor set may be configured to identify patterns of individual preferences in movies that may be revealed through events comprising the interactions of the individuals with a movie library. Individuals may perform various actions in such interactions including searching for movies browsing the titles and descriptions of movies responding to recommendations of movies and selecting movies for viewing as well as actions performed while viewing the movies such as pausing skipping ahead or back viewing again and terminating without completing a viewing the movie. One individual may therefore generate many such events during a viewing session and thousands of individuals may generate a voluminous stream of such events . In accordance with the techniques presented herein an evaluation plan may be devised e.g. by an administrator of the event processing system with or without the assistance of a computer comprising various evaluation stages that may be applied to this task. Such evaluation stages may include e.g. inferring the interests of an individual from the searches and selections of movies clustering and classifying individuals based on demographics inferred interests and viewing history and identifying heuristics that may be indicative of interests such as actions that are highly correlated with high interest or low interest. This evaluation plan may then be implemented by automatically generating one or more event processors each tasked with performing some or all of the evaluation for a particular evaluation stage. These event processors may then be interconnected to generate an event processor set that covers the evaluation stages of the evaluation plan. Finally the event processor set may be connected to an event source which may begin delivering a continuous stream of events to the event processor set. The evaluation of each event is rapid e.g. because each event processor within the event processor set may perform a comparatively simple evaluation based on the event and its current state. As a result the event processor set may scale with acceptable performance to handle a large and continuous volume of events thereby enabling a realtime generation of reports notifications and query results in response to new information and knowledge identified in the stream of events such as anomalies and developing trends.

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to apply the techniques presented herein. Such computer readable media may include e.g. computer readable storage media involving a tangible device such as a memory semiconductor e.g. a semiconductor utilizing static random access memory SRAM dynamic random access memory DRAM and or synchronous dynamic random access memory SDRAM technologies a platter of a hard disk drive a flash memory device or a magnetic or optical disc such as a CD R DVD R or floppy disc encoding a set of computer readable instructions that when executed by a processor of a device cause the device to implement the techniques presented herein. Such computer readable media may also include as a class of technologies that are distinct from computer readable storage media various types of communications media such as a signal that may be propagated through various physical phenomena e.g. an electromagnetic signal a sound wave signal or an optical signal and in various wired scenarios e.g. via an Ethernet or fiber optic cable and or wireless scenarios e.g. a wireless local area network WLAN such as WiFi a personal area network PAN such as Bluetooth or a cellular or radio network and which encodes a set of computer readable instructions that when executed by a processor of a device cause the device to implement the techniques presented herein.

An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to the principles set forth herein. In one such embodiment the processor executable instructions may be configured to perform a method of evaluating events received from an event source such as the exemplary method of . In another such embodiment the processor executable instructions may be configured to implement a system for evaluating events received from an event source such as the exemplary system of . Some embodiments of this computer readable medium may comprise a non transitory computer readable storage medium e.g. a hard disk drive an optical disc or a flash memory device that is configured to store processor executable instructions configured in this manner. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

The techniques discussed herein may be devised with variations in many aspects and some variations may present additional advantages and or reduce disadvantages with respect to other variations of these and other techniques. Moreover some variations may be implemented in combination and some combinations may feature additional advantages and or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments e.g. the exemplary method of and the exemplary system of to confer individual and or synergistic advantages upon such embodiments.

A first aspect that may vary among embodiments of these techniques relates to the scenarios wherein such techniques may be utilized. As a first example these techniques may be utilized to evaluate many types of events such as events generated by individuals organizations or automated processes. As a second example these techniques may be combined with traditional data mining techniques. For example in addition to performing responses the event processors may also store data in various databases to which traditional data processing techniques may be utilized to extract additional information and knowledge. In turn this information and knowledge may be utilized to update the state of one or more event processors and or to update the evaluation plan e.g. by adding or altering one or more evaluation stages thereof. As a third example many architectures may be utilized to implement these techniques. For example the respective event processors may be implemented as separate machines and or as two or more software processes executing on one or more such machines. Those of ordinary skill in the art may devise many scenarios wherein the techniques presented herein may be utilized.

A second aspect that may vary among embodiments of these techniques relates to the generation of the evaluation plan . The evaluation plan may be generated completely by one or more users such as an administrator of the event processor set and provided to an embodiment of these techniques such as the exemplary system of to generate the event processor set and the event processors therein. However in other scenarios the evaluation plan may be generated with the assistance of an embodiment of these techniques. In a first such variation an embodiment may suggest aspects of the evaluation plan that the user may wish to incorporate. For example data mining techniques may be applied to a database of events either generated by another technique or generated by the event processor set to extract knowledge and heuristics that may be suggested to the administrator to include in an evaluation plan . As one such example in a scenario where the event processor set is provided to evaluate individual interests in movies data mining techniques applied to a database of events representing the actions of individuals interacting with a movie library may indicate that viewing a movie more than twice is a strong indicator of individual interest and that this type of event may be advantageously included as an evaluation stage within the evaluation plan .

As a second variation of this second aspect an embodiment of these techniques may endeavor to automate part of the generation of the evaluation plan . In particular a user may identify one or more evaluation goals of the evaluation plan e.g. the types of information knowledge and heuristics that the user endeavors to generate with the event processors set and an embodiment of these techniques may automatically generate some parts of the evaluation plan in furtherance of these evaluation goals. As a first such example the user may specify a particular topic e.g. the popularity of a movie star within a social network and an embodiment of these techniques may automatically generate some parts of an evaluation plan that identifies events associated with the topic e.g. identifying messages posted within the social network regarding the movie star links to photos and articles about the website of the movie star and reviews of the movies of the movie star as well as an evaluation of the correlative weight of each type of event to this topic . As a second such example the user may specify a topic such as a product and an embodiment of these techniques may automatically generate parts of an evaluation plan that identify other topics that are related to the topic e.g. monitoring a commercial market to identify competing products and the popularity of such competing products among users . As a third such example the user may specify an evaluation result to be derived from the events e.g. a type of report or data set such as a general summary of topics discussed in a social network and an embodiment of these techniques may automatically generate parts of an evaluation plan whereby event processors are utilized to generate the evaluation result. In these and other variations an embodiment of these techniques may endeavor to assist an individual in generating the evaluation plan in accordance with the techniques presented herein.

A third aspect that may vary among embodiments of these techniques relates to the operation of the event processors of the event processor set to evaluate the events . As a first variation the event processors may be configured e.g. to evaluate respective events according to a particular task to be achieved by the evaluation stage wherein the event processor is positioned e.g. by transforming incoming data into more useful outgoing data e.g. by translating a foreign language message in a social network into a local language for easier processing by other event processors . Alternatively the event processors may be configured to shape the evaluation of events through the event processor set . As one such example the event processors may be configured in order to perform taxonomy reduction e.g. by filtering or summarizing events such that the number of events in an incoming event set that the event processor receives and evaluates is larger the number of events in the outgoing events set that the event processor transmits e.g. to another event processor into a report or notification or into a database thereby reducing the amount of data exchanged and improving the significance of such data.

As a second variation of this third aspect the types of responses performed by the event processors may vary. As a first example the event processors may provide realtime notifications of the information gleaned from the events reports and or realtime query results of one or more queries submitted by a user . Alternatively or additionally the event processors may generate such notifications reports and or query results in a non realtime manner e.g. by periodically evaluating a set of events in a deferred time frame. As a second example the responses of one or more event processors may involve storing a record of at least one event or a processing result of having evaluated such events in a traditional data store such as a database for further evaluation by users and or other processes.

A third variation of this third aspect relates to the manner of saving the state of the event processor set . For example one interesting characteristic of the event processor set is that the information gleaned from the evaluation of events is stored in the states of the respective event processors however this characteristic also raises a potential vulnerability to the loss of such information e.g. upon a machine or software process crashing. Therefore it may be desirable to capture a snapshot of the states of the event processors of the event processor set e.g. in order to evaluate the information contained in the event processor set and or to enable the event processor set to be restored to this state at a later time. Moreover it may be desirable to refrain from stopping the event processor set from evaluating events while capturing the snapshot particularly where the event source provides a continuous and heavy stream of events . Therefore an embodiment of these techniques may store an event processor set snapshot comprising the state of each event processor of the event processor set while the event processor set continues to operate.

A fourth variation of this third aspect relates to the manner of allowing users to interact with the event processor set . For example where the event processor set is utilized to evaluate and report on the actions of users it may be undesirable to include personally identifying information PII of any particular user in any such report such that the privacy and trust of the user and others may be jeopardized. To this end it may be advantageous to permit the user to examine the information that has been captured about the user and how such information is to be used various in various reports . Therefore when an embodiment of these techniques receives a presentation request to present the state of various processors that involve the user the embodiment may be configured to identify such event processors and present the state thereof to the user . Additionally if the user submits an adjustment request to adjust the state of one or more event processors e.g. requesting to have some sensitive or personally identifying information removed the embodiment may accordingly alter the state of the event processor s . In this manner the embodiment may extend to the users monitored by the event processor set a measure of review and or control over the personal information that is collected and reported. Those of ordinary skill in the art may devise many ways of adjusting the execution of the event processor set in accordance with the techniques presented herein.

A fourth aspect that may vary among embodiments of these techniques relates to updates to the evaluation plan that may affect the configuration of the event processor set e.g. the addition removal repositioning and or reconfiguring of one or more event processors . For example a user such as an administrator may request to alter the evaluation plan to adjust the details of the evaluation of events and the responses generated by such event processors . Alternatively the evaluation plan may be informed by the results of the evaluation e.g. new heuristics identified as potentially valuable in the evaluation of the events may be incorporated as new or improved event processors . Therefore an embodiment of these techniques may be configured to upon receiving an updated evaluation plan reconfigure the event processor set to match the updated evaluation plan. However it may be desirable to reduce the impact of the reconfiguration upon the continued operation of the event processor set e.g. to permit the event processor set to continue evaluating events during the reconfiguration. Therefore as a first variation of this fourth aspect an embodiment of these techniques may be configured to identify one or more updated event processors that are affects by the updated evaluation plan and while the event processor set remains connected to the event source and continues evaluating the events update only the updated event processors.

A second variation of this fourth aspect relates to the manner of updating the event processor set with an updated evaluation plan to evaluate new information. A particular problem may arise in this scenario wherein the event processors may not yet be informed of how to perform the evaluation having not yet evaluated events in this manner and therefore being unable to generate accurate results until the state of such event processors is adapted to the new evaluation expressed in the updated evaluation plan. For example the event processor set may be newly tasked with identifying trends in the popularity of one or more topics in a social network but without having been informed yet of the current popularity of such topics the event processor set may generate anomalous results until such familiarity is established. This cold start problem may be alleviated e.g. by connecting the event processor set to a historic event set comprising a set of historic events that have previously been captured. For example a data store of events may be captured in a period preceding the updated evaluation plan and may be run through the event processor set e.g. while suppressing output of the results until acceptable results are achieved in order to achieve states of the event processors that generate acceptable results.

However the training of the event processor set with a historic event set may be costly e.g. a large and varied set of historic events may be available e.g. if such historic events have been captured in a data warehouse such as in a traditional data mining scenario and training the event processor set with a large set of historic events may cause a delay in the availability of the event processing. Therefore it may be desirable to reduce the size of the historic event set in order to achieve a training of the event processors with high efficiency and or reduced cost. As a first such example where a large number of historic events may be available from a historic event source e.g. a large database or capture of historic events the historic events of the historic event set may be selected only in relation to the updated aspects of the evaluation plan e.g. only including historic events that are likely to be evaluated by one or more updated event processors . As a second such example an embodiment of these techniques may limit the historic event set to a selection of historic events that match one or more historic event parameters e.g. historic events occurring within a designated period such as the week preceding the updating of the event processor set or historic events involving one or more users and or topics . Such historic event parameters may be identified by a user such as an administrator or may be automatically selected by an embodiment of these techniques e.g. by identifying historic event parameters that are likely to identify historic events of high training value to the event processor set .

As an additional variation an embodiment of these techniques may be able to estimate a computational cost arising from connecting the event processor set to a particular historic event set e.g. an amount of time that will be involved in applying the event processor set to evaluate the historic event set or an amount of storage space or bandwidth utilized in such training . The computational cost may be presented to a user such as an administrator to estimate the impact of training with a selected historic event set upon the functionality of the event processor set e.g. an amount of downtime of the event processor set that may be caused by the training . The embodiment may therefore wait for the user to verify the use of the historic event set in view of the estimated computational cost. Additionally the user may be permitted to adjust various historic event set parameters e.g. the period and or scope of historic events retrieved from the historic event source to view the estimated computational costs of training with different historic event sets and to select a historic event set that offers an acceptable tradeoff of training value and computational costs. In this manner an embodiment of these techniques may facilitate an administrator or other user in achieving a training of an updated event processor set with a historic event set thereby reducing the impact of the cold start problem on the utility of the results of the evaluation while also managing the computational costs of such training. Those of ordinary skill in the art may devise many ways of updating the event processor set in accordance with the techniques presented herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

