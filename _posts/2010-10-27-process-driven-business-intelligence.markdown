---

title: Process driven business intelligence
abstract: Described herein is a technology for facilitating process driven business intelligence. In one implementation, context data generated by a business process tool is received. One or more relevant application programming interfaces (APIs) are identified by matching the APIs with the current attribute associated with the context data. The APIs are executable by a processor to retrieve source data from an information source and provide business intelligence based on the source data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09064224&OS=09064224&RS=09064224
owner: BUSINESS OBJECTS SOFTWARE LIMITED
number: 09064224
owner_city: 
owner_country: IE
publication_date: 20101027
---
The present disclosure relates generally to business intelligence and more particularly to facilitating process driven business intelligence.

In the present business environment corporations are demanding more real time information to make sound and time critical business decisions. Business Intelligence BI has been used to support and improve such business enterprise decision making. BI tools are commonly applied to business data such as sales revenue costs income or other financial data. These tools are designed to spot retrieve and analyze business data and to provide various historical current and predictive future views of business operations. Common functions of BI tools include reporting data exploration data mining data cleansing information management and business performance management.

In particular reporting is a common function of BI tools. A report typically refers to information that is automatically retrieved from an information source e.g. data warehouse database repository etc. and formatted according to a predefined schema. A report is a powerful way to present information. It facilitates compilation of massive amounts of data and monitoring of various enterprise operations. In addition reports may be used to support the enterprise decision making process in many areas such as in sales marketing management budgeting or forecasting.

There are however some limitations in present BI systems. One limitation is the complexity of the available tools and environment used for designing professional reports. Such tools require expert knowledge and are often too complex for a typical business user to learn. This often leads to lower productivity in developing reports and incomplete capturing of valuable data in the resulting report.

Another problem is the lack of integration of BI systems with the business process. For example a user may be using an enterprise resource planning ERP software to perform work tasks or manage resources. While doing so he may wish to view certain reports that can be generated by the BI tools to facilitate his work process. However such BI tools are typically not integrated with the ERP software or the business process. More importantly the source data retrievable by BI tools is typically not from the same information source as the source data retrievable by ERP software. Moreover the relationship between the two types of source data is typically not defined. In order to view such reports the user must switch from the ERP software to another different application to activate the BI tools. This causes much inconvenience and isolates the business process from the business intelligence platform.

Yet another limitation is the passive nature of the search and knowledge retrieval process in conventional BI systems. Ideally users should be experienced with the creation and content of existing reports so that they can easily find the report relevant to their work task. However in current systems users have to manually select the relevant report from a long list presented to them. As a result work productivity and efficiency are typically impaired.

Accordingly there is a need to provide an improved business intelligence platform that is more automated and integrated with the business process.

A technology for process driven business intelligence is described herein. In one implementation context data generated by a business process tool is received. One or more relevant application programming interfaces APIs are identified by matching the APIs with the current attribute associated with the context data. The APIs are executable by a processor to retrieve source data from an information source and provide business intelligence based on the source data.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the following detailed description. It is not intended to identify features or essential features of the claimed subject matter nor is it intended that it be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

In the following description for purposes of explanation specific numbers materials and configurations are set forth in order to provide a thorough understanding of the present frameworks and methods and in order to meet statutory written description enablement and best mode requirements. However it will be apparent to one skilled in the art that the present frameworks and methods may be practiced without the specific exemplary details. In other instances well known features are omitted or simplified to clarify the description of the exemplary implementations of present frameworks and methods and to thereby better explain the present frameworks and methods. Furthermore for ease of understanding certain method steps are delineated as separate steps however these separately delineated steps should not be construed as necessarily order dependent in their performance.

A framework for facilitating process driven business intelligence is described herein. One aspect of the present framework advantageously provides seamless integration of business process and business intelligence BI tools. The business intelligence tool is driven by the current attributes generated by the business process. Another aspect of the present framework enables the retrieval of business intelligence information from disparate sources of data. For example the present framework may enable a user reviewing a sales order via a business process platform to view a report generated by the business intelligence tool with information retrieved from a financial news website. Yet another advantageous aspect of the present framework identifies and provides suggestions to users of business intelligence application programming interfaces APIs based on context data generated by the business process.

Business process tools generally refer to software tools that support business enterprise functions workflow management or planning. Such business process tools include but are not limited to enterprise resource planning ERP applications such as the SAP Business Suite SAP GRC SAP BusinessOne etc. Business intelligence tools are software tools used to improve business enterprise decision making. These tools are commonly applied to financial human resource marketing sales customer and supplier analyses. More particularly these tools can include but are not limited to reporting and analysis tools for information presentation content delivery infrastructure systems for delivery and management of reports and analytics data warehousing systems for cleansing and consolidating information from disparate sources and data management systems such as relational databases or Online Analytical Processing OLAP systems used to collect store and manage raw data. Exemplary BI applications that are commercially available include SAP BusinessObjects GRC SAP Crystal Reports and Xcelsius. It is understood that the present framework may be embodied in other types of business intelligence applications that are operable to retrieve information from other information sources and to present information so as to facilitate decision making in the business process.

The framework described herein may be implemented as a method computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from the following description.

Turning to the computer system in more detail it may include a central processing unit CPU an input output I O unit and a memory device . Memory device stores machine executable instructions data and various programs such as an operating system a graphical user interface GUI module and a business intelligence tool all of which may be processed by CPU . As such the computer system is a general purpose computer system that becomes a specific purpose computer system when executing the machine executable instructions. Alternatively the technology described herein may be implemented as part of a software product which is executed via the operating system . It should be noted that the various components may be hosted in whole or in part by different computer systems in some implementations. Thus the techniques described herein may occur locally on the computer system or may occur in other computer systems and be reported to computer system . Although the environment is illustrated with one computer system it is understood that more than one computer system or server such as a server pool as well as computers other than servers may be employed.

In addition each program may be implemented in a high level procedural or object oriented programming language or in assembly or machine language if desired. The language may be a compiled or interpreted language. The machine executable instructions are not intended to be limited to any particular programming language and implementation thereof. It will be appreciated that a variety of programming languages and coding thereof may be used to implement the teachings of the disclosure contained herein.

The GUI module comprises machine executable instructions to generate graphical components of a user interface. It is understood that the user interface may also comprise non graphical or textual components. For example exemplary windows icons buttons menus or the like may be generated as will be discussed later. The user interface may further include instructions to receive input from an input device and display the graphical components on an output device .

The business intelligence tool comprises tangibly encoded machine executable instructions to perform intelligence related functions on computer system client system or across network . Intelligence related functions refer to functions that are operable via an interface to retrieve and analyze data from various information sources. Such intelligence related functions include but are not limited to business intelligence BI functions such as generating reports locally or on a server viewing a report performing query and analysis mining data cleansing data performing Online Analytical Processing OLAP managing business performance presenting information via a dashboard and so forth. In one implementation the business intelligence tool includes a suggestion engine and a report generator as will be described with reference to . It should be understood that the components stored in memory device are merely exemplary and additional modules or sub modules may also be provided. In addition the functions of the components may be combined. A function of a module need not be performed on a single machine. Instead the function may be distributed across system or a wider network if desired.

Memory device may be any form of non volatile memory including by way of example semiconductor memory devices such as Erasable Programmable Read Only Memory EPROM Electrically Erasable Programmable Read Only Memory EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and Compact Disc Read Only Memory CD ROM .

In one implementation computer system is coupled to an input device e.g. keyboard or mouse and an output device e.g. monitor or screen . The output device may be used to display the reports generated by the report generating unit . In addition computer system may also include a communications card or device e.g. a modem and or a network adapter for exchanging data with a network using a communications link e.g. a telephone line a wireless network link a wired network link or a cable network . Other support circuits such as a cache power supply clock circuits and a communications bus may also be included in computer system . In addition any of the foregoing may be supplemented by or incorporated in application specific integrated circuits.

Computer system may operate in a networked environment using logical connections to one or more remote client systems over one or more intermediate networks . These networks generally represent any protocols adapters components and other general infrastructure associated with wired and or wireless communications networks. Such networks may be global regional local and or personal in scope and nature as appropriate in different implementations.

Remote client system may be a personal computer a mobile device a personal digital assistant PDA a server a server pool a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer system . Client system may also include one or more instances of computer readable storage media or memory devices not shown . The computer readable storage media may include a client application suitable for interacting with the components over the network . The client application may be an internet browser a thin client or any other suitable applications. Examples of such interactions include requests for reports. In turn the client application may forward these requests to the computer system for execution.

In one implementation the architecture comprises a business intelligence tool communicatively coupled with a business process tool . The business process tool performs one or more tasks of a business process. Exemplary business processes include for example an enterprise resource planning ERP business process such as a human resources HR management business process a sales business process a project management business process or any type of workflow. As the business process executes context data may be generated created received exchanged stored passed or acted upon by the business process tool . For example the business process tool may be assigned a task to perform and the task may be uniquely identified by a task ID which is used to instantiate a business object. Business objects define and enable the tasks to be carried out in the business process. In one implementation a business object describes an entity to appear in a report. For example in this case a business object may describe a given user by storing attributes e.g. USER ID DEPARTMENT POSITION STATUS etc. associated with the user.

As illustrated by the business intelligence tool may include a business object analyzer a suggestion engine and a report generator . In one implementation the business object analyzer receives context data from the business process tool . Context data generally refers to any data that context can be extracted from. Such context data includes but is not limited to business objects with associated attributes user profiles system information e.g. time date company profile user history application data etc. The term context as used herein generally refers to any information that is collected known stored determined received or otherwise identified to be associated with the current business process and or the user associated with the current task in the business process. In particular such information may be associated with the user s profile the user s role in a business the user s geographical location business organization customer application workflow task status product information business activity process or data involved therein and so forth.

In one implementation the business intelligence tool extracts context information from the context data while the user is using the business process tool . The business intelligence tool may use the extracted context information to intelligently search match the context and dynamically invoke Application Programming Interfaces APIs to provide relevant business intelligence to the user. In one implementation the business object analyzer receives the context data and records the business object attributes and the user profile in a context data pool . The business object analyzer may also retrieve related report source data APIs and store them in a report source data API pool . The context data pool and the report source data API pool are databases that enable the respective data to be stored accessed and retrieved. The data pools may be stored locally on computer system or remotely in another computer system.

The report source data APIs are software interfaces that provide business intelligence by facilitating the retrieval of source data from one or more information sources to generate a report based on the source data. For example the report source data API List production plan may provide a set of functions to retrieve production plans from one or more information sources. It is understood that other types of APIs including non report source data APIs may also be provided. For example such APIs may be provided to retrieve user data e.g. user name department role profile etc. retrieve data associated with issues occurring within a timeframe e.g. issue id name priority status etc. retrieve data related to a business process task etc. The data retrieved by such APIs may be analyzed to generate reports or to provide business intelligence. The APIs may be registered during an initial configuration of the computer system . In addition the APIs may be standard APIs pre defined in the system or customized by the user or another third party.

In one implementation the suggestion engine receives from the business object analyzer API input parameters with data attributes . Alternatively the suggestion engine may retrieve these API input parameters with the data attributes directly from the data pools . In one implementation the suggestion engine comprises a matching tool a ranking tool and a context tool . More details of these tools will be provided later.

During the business process the user may request for information while performing certain tasks. After the user enters a request for information the suggestion engine extracts the current attributes from the request and matches the current attributes with API input parameters. In one implementation the suggestion engine presents a list of available matching APIs to the user for selection . The user may be prompted via a user interface to make a selection. It is to be noted however that this step is merely optional and may be useful where many matching APIs are found by the suggestion engine . Alternatively the suggestion engine may select the most relevant matching API with the highest match score and directly invoke the API based on attribute values to generate a new report . The attribute values may be automatically or semi automatically computed by the suggestion engine and passed to the report generator as API input parameters.

Finally the report may be presented to the user. The report may be presented to the user via for example a graphical user interface. For example the report may be presented via a pop up window or a dashboard. The format of the report may include one or more data tables histograms pie charts graphs text boxes figures and so forth.

In this exemplary scenario a sales executive wishes to generate a sales quote for a customer who is interested in buying 10 desktop computers and 10 laptop computers. shows a screenshot of an exemplary window that is displayed by the ERP software. Since the desktop and laptop computers are part of the product portfolio the user may click on the Products section to change the quantity or discount fields. The selection of the Product section indicates a change in business context. Upon receiving the user selection the present framework extracts the context from the current attribute values associated with the Products section and dynamically loads relevant business intelligence APIs specific to the product sales context.

As illustrated by the exemplary scenario shown by the user can advantageously obtain valuable information from automatically generated reports without spending effort on report development. This approach also offers seamless interactive and native integration of BI analytics e.g. report generation with the business process. During the work process the user may obtain answers to questions without having to leave the work environment and to search for such information in another application. In addition instead of having to search for information or pull data from different information sources valuable data is automatically pushed and suggested to the user by the present framework. In a collaborative environment for example the manager can sign off at each stage of the business process and make important enterprise decisions based on the automatically generated reports. While the manager or user navigates the workspace changes in business context cause relevant BI analytics to be loaded and context based reports to be generated and presented to the user.

Referring to at context data is received. The context data may be generated by a business process such as an ERP business process or workflow. Such context data may be retrieved by the suggestion engine from the context data pool as described previously. The context data includes for example one or more business objects user profiles system information company profiles user histories application data and so forth. Other types of context data from which context may be derived may also be provided.

At the matching tool identifies one or more APIs that are relevant to the current context. Relevant APIs may be identified by matching the APIs with the current attributes of the context data. In one implementation the APIs include report source data APIs that are executable to retrieve data from various information sources and automatically generate reports based on such data. Other types of APIs may also be provided. The APIs may be retrieved from for example the report source data API pool as described previously.

One or more methods may be used to perform the matching calculation. In one implementation a name matching method is used to identify any API with one or more parameter names that match a current attribute name associated with the context data. In another implementation an alias matching method is used to identify any API with parameter names that match an alias of a name associated with the current attribute. In yet another implementation a value matching method is used to identify APIs with parameter names that match semantic values of current context attributes. These matching methods will be described in more detail later. Alternatively or in combination thereof the matching method may also be defined by the user.

At the ranking tool ranks the matching APIs and presents the ranked APIs in a suggestion list to the user. In one implementation the ranking is based on scores computed by one or more ranking methods. The ranking methods may be pre defined by the system or manually defined by the user as will be described in more detail later. Alternatively or in combination thereof the ranking method may compute recommendation scores based on historical statistics as will also be described in more detail later. The final score of each report source may be the accumulation of scores obtained by the various ranking methods.

At the context tool extracts one or more context values from the context data. The context values may be used as input values of parameters for the APIs. The context values may be presented to the user for selection via for example a graphical user interface. The context values may be extracted from for example the user profile or system information e.g. time date that provides additional information about the user or the user s business. Such context values facilitate the retrieval of data that is likely to be relevant to the user s interest.

At the suggestion engine returns a list of one or more matching APIs and their corresponding input parameter values. The input parameter values are derived from the context values extracted from the context data. The list of APIs may be stored in a hierarchical structure which is ranked at each level. Other types of data structures may also be used. The list may be presented to the user for selecting the appropriate API. Alternatively the system may automatically select and pass one or more APIs to for example a report generator to generate the context based reports.

In one implementation the matching tool in the suggestion engine implements a matching calculation model . The matching calculation model uses one or more matching methods or strategies to identify one or more report source data APIs that are relevant to the current context or user s interest based on one or more context attributes and or a user profile . The APIs may be selected from an input list of available APIs. A result list of matching report source data APIs is generated by the selection process. In one implementation the result list is the union of all the report source data APIs selected by the matching methods. In addition security constraints may be imposed in generating the result list . For example if a user does not have the privilege or permission to view the information from a particular report source the corresponding report source data API will be removed from the result list .

In one implementation the matching method comprises a name matching method. shows an exemplary name matching method . Generally the matching method describes the matching tool identifying a set of one or more report source APIs with parameter names that match a set of one or more current context attribute names.

At step the matching tool receives input data . In one implementation the input data comprises a set of report source data API names R . A report source data API comprises one or more functions to retrieve various types of information from various report sources. Examples of report source APIs include List production name List leave requests List employee salaries List department employees and so forth. Each report source API name Ri is associated with a set of one or more input parameters Ai . For example the List production plan API may be associated with the input parameters DEPARTMENT and TIMEFRAME which identify the department and period of time for which the production plans are to be listed. Other types of input parameters may also be defined. The input data may further include a set of current context attribute names B . The current context attributes and values may be derived from the context data e.g. business objects . Examples of context attributes include but are not limited to USER ID DEPARTMENT ORGANIZATION TIMEFRAME and POSITION. It is understood that other types of context attributes may also be provided.

At step an empty result set M is initialized. At the parameter name set Ai associated with each report source data API name Ri are compared. At if the report source data API s parameter name set Ai is contained i.e. equal to or a subset of in the context attribute name set B then the report source data API name Ri is matching . At the report source data API name Ri is stored or pushed into the result set M . At the matching tool checks to see if there are any remaining parameter name sets Ai to be processed. If there are parameter name sets Ai to be processed steps and are repeated. If the parameter name set Ai is not contained in the context attribute name set B the next parameter name set Ai if any is processed at . At the result set of matching report source API names is returned.

In another implementation the matching method comprises an alias matching method. The alias matching method is generally an extension of the name matching method which was previously described. However instead of simply matching the names of the current context attributes and API parameters the alias matching method compares the aliases of the context attribute names with the API parameter names. An alias generally refers to an alternate name e.g. synonym acronym etc. that is used to identify the same context attribute. Each name may be associated with one or more aliases. For example the context attribute name USER ID may be associated with the aliases ID Identity and EMPLOYEE IDENTITY. The alias matching method expands the set of context attribute names by adding the one or more aliases associated with the context attribute names to the comparison set. The aliases may be pre defined and stored in for example a dictionary. The aliases may also be manually added by users into the dictionary.

Turning back to at the matching tool initializes result set M and alias name set C as empty sets. Alias name set C serves to store all the context attribute names and aliases corresponding to the context attribute names. Result set M is used to store the result set of matching report source API names identified by the method . At the matching tool parses the context attribute name set B. For each element Bi in the context attribute name set B the matching tool pushes or saves Bi in the set C. Next at using the context attribute name Bi as the key the matching tool looks up the dictionary D for any aliases Ci . The aliases Ci may be saved in the set C. At the matching tool checks to see if there are any other context attribute names Bi to be processed. If yes the steps and are repeated. If all the context attribute names Bi have been processed the process continues to step .

At the matching tool compares the API parameter name set Ai corresponding to each API name Ri with the alias name set C . At if the API parameter name set Ai is equal to or a subset of alias name set C then a match is deemed to be found. At the API name Ri corresponding to Ai is pushed or stored into result set M. At if there are remaining API parameter name sets Ai to be processed the steps and are repeated. If there are no remaining Ai to be processed the matching tool returns the result set M at .

Another exemplary matching method is the value matching method. This method generally includes analyzing and extracting semantics from current context attribute values and matching the attribute value semantics with the report source data API parameter names. For example a context attribute may have a meaningless name XYZ which is associated with a current value of China. The matching by value method analyzes the text of the context attribute value China as Country and uses Country instead of the meaningless XYZ to match the report source data API parameter names. This approach may be used to complement or replace the name matching method and or alias matching method described previously as it may be more accurate in some cases.

At the matching tool extracts the semantic of the value of the context attributes Bi. The semantic extraction may be performed by for example a data analyzing tool. The data analyzing tool may implement artificial intelligence techniques to determine the semantic meaning of a given data string. At the semantic is pushed or stored into semantic set S. At the matching tool checks to see if there are any other context attributes Bi to be processed. If there are remaining context attributes Bi the steps and are repeated. If not the method continues at step .

At the matching tool compares Ai and the semantic set S. At if Ai is equal to or a subset of S then the corresponding Ri is pushed or stored into the result set M. Steps and are repeated for all the remaining Ai. At the matching tool returns the result set M which includes all the matching report source API names identified by the method .

Turning back to the result list generated by the matching tool is passed to a ranking tool to implement a ranking calculation model . In one implementation the ranking calculation model ranks the report source data APIs in the result list according to their match scores. The match scores may be computed by one or more ranking methods. Such ranking methods compute the match scores according to for example pre defined system ranking rules user defined rules historical statistics or a combination thereof. To compute the final score for each API the scores generated by the various ranking methods may be accumulated.

In one implementation the ranking calculation model comprises a system defined ranking method. A system defined ranking method computes ranking scores according to rules that are pre defined and stored in the system. Such system defined ranking method may be selected as the default ranking method. In one implementation the system defined ranking method ranks a report source data API according to its specificity of match i.e. number of input parameters associated with the matching API . For example the more specific the match is the higher the score assigned to the matching API.

At the score set S is initialized as an empty set. The score set S is used to store score values computed by the method . In one implementation each element Si in the score set S stores a score for a corresponding matching report source data API Mi.

At the ranking tool determines the count of parameters corresponding to each matching report source data API Mi listed in M. In particular the ranking tool determines the number of elements in each parameter set Ai associated with API Mi. As discussed previously a matching API with a higher number of parameters provides more specificity and will therefore be allocated a higher score.

At the ranking tool determines the score Si. In one implementation the score Si is determined by multiplying the count by the specificity C. Once the score Si is computed it may be saved or pushed into the set S at . At the ranking tool checks to see if there are further parameter sets Ai to be processed. If so the steps and are repeated. If all parameter sets Ai are already processed the ranking tool returns the set S at .

In another implementation the ranking method comprises a user defined method. A user defined method computes ranking scores according to user defined rules. One exemplary user defined method includes assigning a very high score to a certain report source API such that it is always the highest ranked in the suggestion list. For example users can define a MAX score for the API List production plan if the current context attributes are USER ID DEPARTMENT TIMEFRAME POSITION PRODUCTION. 

In accordance with another implementation the ranking method comprises a historical user selection method. The historical user selection method is based on historical statistics compiled from recording users previous selections. Such historical statistics may be used in artificial intelligence algorithms such as machine learning data mining or statistical classification e.g. Bayesian model to provide recommendation scores. 

Turning back to at the user selects from a suggestion list of matching and ranked report source data API one or more APIs to be used for retrieving data. The user may be prompted to make such selection via for example a graphical user interface. The user selection is passed to the context suggestion model . In one implementation the context suggestion model is implemented by the context tool described with respect to . The context suggestion model provides suggestions of context values for the input parameters of the selected APIs . The context values may be derived from information such as the user profile system information or any other types of information associated with the user or the business process. For example when a user inputs the text string Wall Street the context suggestion model may provide a suggestion to the user such as Do you mean New York Wall Street 

A suggestion list of context values may be presented to the user for selection at . Alternatively or in combination thereof the framework may implement a machine learning model that automatically selects context values based on historical statistics. The historical statistics may be compiled by storing prior user selections of context values or report source data APIs. With the selected context values the selected APIs may be executed by the report generation model to present context based reports that are tailored to the user s interest.

As discussed previously the suggested context values may be extracted from the user profile . The user profile may be stored as an attribute of a business object. The user profile provides information about the current user which may be useful in determining what kind of data the user may be interested in viewing. Based on this determination the present framework may suggest the specific type of information the current user is likely to be interested in. In one implementation the user profile comprises attributes related to the role location or organization of the user or a combination thereof. It is understood that other types of attributes may also be provided.

More particularly users in different roles or positions are interested in different types of information. For example if the attribute ROLE is associated with a CFO value the context value Financial is suggested as the value of ReportType in context. As a result financial reports may be pushed to the CFO user. Users in different locations or organizations or departments may also be interested in different sets of information. In addition a user may be interested in data related not only to their own geographical location or organization but also data related to their neighbor s co worker s or competitor s location or organization. The rules for mapping the attribute to the suggested context value may be stored in a system metadata repository such as SAP BusinessObjects text analysis. Other types of repositories are also useful.

The suggested context values may also be extracted based on system information . System information includes for example the current time. The system information may also be stored as an attribute of a business object. Information such as current year current quarter current month etc. may be derived from the current time. In addition the context tool may generate time sensitive alerts from such system information.

For example referring to the current context attributes show that the attribute TIMEFRAME has the value of Sep. 24 2009. The context tool may determine that this timeframe is close to the end of the third quarter of 2009 and suggest the context value of 2009 Q3 for the input parameter TIMEFRAME for report source data API List production plan . As a result the data of the current quarter Q3 may be pushed to the user upon executing the report source data API. Data in other types of timeframes such as hourly daily or monthly data may also be pushed to the user.

Although the one or more above described implementations have been described in language specific to structural features and or methodological steps it is to be understood that other implementations may be practiced without the specific features or steps described. Rather the specific features and steps are disclosed as preferred forms of one or more implementations.

