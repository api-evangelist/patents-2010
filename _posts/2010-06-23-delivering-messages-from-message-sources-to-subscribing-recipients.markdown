---

title: Delivering messages from message sources to subscribing recipients
abstract: Many scenarios involve the delivery of messages received from various message sources to recipients, based on subscriptions established between various recipients and message sources. The recipients may be distributively assigned to one or more message servers, either operating independently or as part of an interoperating message server set. Respective message servers may generate a subscription filter indicating whether at least one assigned recipient subscribes to respective message sources, and may utilize the subscription filter to determine, upon receiving a message from a message source, whether to discard the message or store the message for delivery. Interoperating message servers may also exchange subscription filters, and upon receiving a message from any message source, a message server may utilize the subscription filters of the other message servers to determine which other message servers are assigned at least one subscribing recipient, and may retransmit the message only to such message servers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08706822&OS=08706822&RS=08706822
owner: Microsoft Corporation
number: 08706822
owner_city: Redmond
owner_country: US
publication_date: 20100623
---
Within the field of computing many scenarios involve a delivery of messages from a set of message sources to a set of recipients where respective recipients may subscribe to one or more message sources to receive messages therefrom. A first such scenario involves a social network where each user may subscribe to one or more other users and where a user may author a message that is to be delivered to each other user subscribing to the author. A second such scenario involves an event publication and subscription model where a message source comprising e.g. an individual an organization a device or a software process may generate notifications of events and where various recipients also comprising e.g. an individual an organization a device or a software process may subscribe to a message source to receive notifications of events that are generated by the message source. A message server may be configured to receive messages from various message sources and to distribute messages to the recipients either upon request of the recipient e.g. storing the messages to be delivered to the recipient in a message queue until the recipient requests delivery or in a push model e.g. where the message server actively and promptly notifies the recipient upon receiving a message from a message source to which the recipient is subscribed. 

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Challenges may arise in the configuration of a message server to receive a set of messages from various message sources and to deliver the messages to the recipients subscribing to respective message sources. As a first example the message server may be configured to generate a separate message queue for respective recipients and upon receiving a message from a message source to place a copy of the message in the message queue of each recipient subscribed to the message source. However this example does not scale well because a message source may have a large number of subscribing recipients e.g. a popular user in a social network scenario may be subscribed by millions of users and every message issued by the message source may lead to a very large number of copies of the message. As a second example the message server may be configured to generate a separate message queue for respective message sources and upon receiving a request from a recipient to present messages to retrieve the messages from the message queue of each message source to which the recipient is subscribed. However if a message source is subscribed by many recipients the message server may have to field a very large number of queries for messages from the message source. In either of these examples scalability is a potential issue the configurations of the message servers are not readily conducive to adding more message sources adding more recipients or managing a high volume of subscriptions of recipients to message sources.

Presented herein are techniques for configuring a message server to handle the delivery of messages from a set of message sources to a set of recipients based on a subscription model. A single message server such as a single computer may be configured to receive and store messages for delivery to a set of recipients and may store for respective recipients a recipient profile indicating the message sources to which the recipient is subscribed. The message server may also generate a subscription filter which may indicate for respective message sources whether at least one recipient subscribes to the message source. Upon receiving a message from a message source the message server may check the subscription filter to determine whether at least one recipient subscribes to the message source of the message. If so the message source may be configured to receive the message and to associate the message with the recipients who are subscribed to the message source based on the recipient profiles of the recipients. If not the message source may simply discard the message. When a recipient requests to receive messages the message server may search the stored messages for those that are associated with the recipient and may present the associated messages to the recipient. This configuration may be advantageous e.g. by providing an efficient mechanism for determining whether a particular incoming message is to be kept or discarded and by enabling a single copy of a message to be stored even if subscribed by many recipients. Additional efficiency may be achieved e.g. by implementing the subscription filter as a bloom filter which may permit space and processing efficient determinations.

Additional advantages may be achieved by providing a set of message servers each assigned a particular set of recipients and storing a recipient profile for respective recipients. The message servers of the message server set may share an assignment map that identifies the message server to which a particular recipient is assigned. Additionally each message server may share its subscription filter with the other message servers. The message servers may then be configured to upon receiving a message from a message source consult the subscription filter of each other message server to determine whether any recipient assigned to the other message server is subscribed to the message source and may forward the message to the other message server only if at least one recipient assigned to the other message server is subscribed to the message source. In this manner the message servers may be configured to economize network traffic by sending messages only to message servers having one or more recipients that are subscribed to the message source of the message. Additionally this configuration promotes the scalability of the message server set since the capacity may be increased simply by adding new message servers and assigning recipients to the new message servers.

Even greater efficiency may be achieved by assigning similar recipients to the respective message servers such that the recipients of a message server are more likely to subscribe to similar types of message sources. For example a message server set comprising a social network may be configured to assign similar groups of recipients to a particular message server since such similar users are more likely to subscribe to the same message sources e.g. message authors who are popular among the similar group of users. As compared with distributing this similar group of users across many message servers which might involve sending the same messages from the popular message authors to many message servers this assignment may consolidate the sending and storing of such messages to the one message server to which these similar users are assigned.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

Within the field of computing many scenarios involve the delivery of messages from one or more message sources to one or more recipients based on the subscriptions of respective recipients to one or more message sources. As a first example a social network may comprise a set of users who author messages and may permit users to subscribe to other users in order to receive messages authored thereby. As a second example a set of weblog authors may author posts and users may subscribe to various weblog authors in order to receive posts issued to the respective weblogs. As a third example a mailing system may involve a set of mailing lists and various users may subscribe to one or more of the mailing lists in order to receive the messages of particular mailing lists. As a fourth example an event publication and subscription system may feature a set of event sources each of which may raise notifications upon detecting particular events and various event monitors may subscribe to one or more of the event sources in order to receive notifications of detected events from such event sources.

In these and other scenarios the message sources and or recipients may comprise humans such as individuals groups of individuals and organizations such as businesses or academic institutions or automated agents such as hardware devices and software processes. Also in these and other scenarios the recipients may subscribe to various message sources or the message sources may select recipients for subscription thereto or an external agent may define the subscriptions of recipients to message sources. Additionally some scenarios the message sources and recipients may comprise different sets of agents while in other scenarios one or more of the agents may serve as both message sources and recipients.

In order to enable such scenarios many systems may be devised to accept subscriptions by recipients to message sources and to perform the delivery of messages based on such subscriptions . Some systems may present some advantages with respect to other systems such as ease of implementation or greater efficiency for different scenarios. A significant aspect that may vary considerably among implementations involves scalability of the system in terms of the number of message sources recipients and subscriptions that may be established and in the number of messages that may be exchanged thereamong without exhausting the computing resources of the system. Scalability may also be a significant factor in implementations that involve parallel processing such as a server farm that comprises a set of servers each configured to handle a portion of the processing tasks of the exchange of messages e.g. receiving a message from a message source identifying the recipients of the message storing data representing the delivery of the message to the recipients and presenting messages to a recipient some configurations may provide improved performance proportional to additions to the number of servers while other configurations may provide less or no advantage if new servers are added to the server farm.

In view of the deficiencies of the exemplary implementations of and it may be appreciated that significant challenges may arise in the implementation of an architecture of a message server that is efficient and prompt that may scale to support many message sources recipients subscriptions and messages with adequate performance. Additionally it may be advantageous to choose an architecture that if implemented on respective message servers of a message server set presents proportional performance advantages upon expanding to include additional message servers.

Presented herein are techniques for configuring a message server to deliver messages from a set of message sources to a set of recipients based on subscriptions of respective recipients to respective message sources . These techniques may be implemented either upon a single message server or upon respective members of a message server set that interoperate to fulfill such tasks.

The illustrated implementations in of the techniques presented herein may promote or improve several advantages with respect to implementations of other techniques such as the implementations presented in . As a first example the use of the subscription filter enables the message server to discard messages that are not deliverable to any recipient thereby economizing the storage space of the message store . As a second example the implementation of may permit an efficient storage of messages such as by storing one copy of the message for an entire set of recipients serviced by the message server in contrast with the storing of a copy of the message for each subscribing recipient as in the exemplary scenario of . As a third example the association upon receipt of messages with users promotes the efficient retrieval of messages to be delivered to a particular recipient as opposed to the large number of queries by recipients that may be submitted to the message store of a popular user as in the exemplary scenario of . Indeed the delivery of messages to a recipient may consume no network resources among the message servers of a message server set as all of the messages and subscription information utilized in the presentation of messages to the recipient are stored locally by the message server . As a fourth example in scenarios involving a set of message servers the architecture devised by these techniques may be scaled to support additional recipients by introducing additional message servers each configured to service a particular set of recipients . For example in the first message store services a first set of recipients and the second message store services a second set of recipients . While each message server may have to store a duplicate copy of a message if at least one recipient assigned to each message server is subscribed to the message source of the message the number of duplicate messages may be significantly or greatly reduced as compared with storing a copy for every subscribing recipient as in the exemplary scenario of . While only three recipients are assigned to each message server in the exemplary scenario of it may be appreciated that a message server may support an assignment of a much larger set of recipients such as hundreds or thousands of recipients and that larger groups of assigned recipients may further reduce the duplication of messages . In this regard additional efficiency may be achieved by assigning to each message server a group of recipients who subscribe to similar sets of message sources e.g. based on shared demographic traits such as age gender geographic location and interests. 

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to apply the techniques presented herein. An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to the principles set forth herein. In one such embodiment the processor executable instructions may be configured to perform a method of configuring a message server having a processor and a message store to deliver messages respectively generated by a message source to at least one recipient that is assigned to the message server such as the exemplary method of . In another such embodiment the processor executable instructions may be configured to implement a system for delivering messages respectively generated by a message source to at least one recipient that is assigned to the message server such as the exemplary system of . Some embodiments of this computer readable medium may comprise a non transitory computer readable storage medium e.g. a hard disk drive an optical disc or a flash memory device that is configured to store processor executable instructions configured in this manner. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

The techniques presented herein may be devised with variations in many aspects and some variations may present additional advantages and or reduce disadvantages with respect to other variations of these and other techniques. Moreover some variations may be implemented in combination and some combinations may feature additional advantages and or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments e.g. the exemplary method of and the exemplary system of to confer individual and or synergistic advantages upon such embodiments.

A first aspect that may vary among embodiments of these techniques relates to the scenarios wherein such techniques may be utilized. As a first example the message sources and recipients may comprise individuals groups of individuals organizations such as businesses academic institutions and governments or automated agents such as devices and software processes. The message sources and recipients may also comprise discrete sets of agents or at least one recipient may also serve as a message source e.g. by resending messages received from other message sources and or by generating new messages . As a second example of this first aspect the message sources and recipients may exchange messages in many scenarios such as a conglomeration of content servers such as webservers a social network a business to business network an email exchange system an instant messaging or other chat network an event publication subscriptions network and a peer to peer file exchange network. Additionally one or more of the message sources may exist outside of the network such as email messages received from an email sender outside of the network managed by the message server . As a third example of this first aspect these networks may support many types of subscription models such as recipients requesting to subscribe to message sources message sources creating subscriptions with recipients and other agents defining subscriptions among message sources and recipients . As a fourth example of this first aspect many types of messages may be exchanged such as status messages email messages instant messages textual writings images audio and or video documents files and other digital objects. Those of ordinary skill in the art may devise many scenarios wherein the techniques presented herein may be utilized.

A second aspect that may vary among embodiments of these techniques relates to the architectures wherein such techniques may be implemented. As a first example these techniques may be implemented as a single message server configured to deliver messages from a set of message sources to a set of recipients . Alternatively the techniques may be implemented on a plurality of message servers comprising a message server set where each message server may be assigned a distinct set of recipients . Additionally the message servers of the message server set may operate independently of one another e.g. the message sources may broadcast messages to all message servers each of which may independently determine which messages to deliver to the assigned recipients or may interoperate to improve the efficiency flexibility and or robustness of the message server set. As a second example of this second aspect a message server may comprise a discrete hardware component such as a machine or computer server. Alternatively a message server may comprise a software process implemented on such a machine or computer server possibly alongside other message servers. For example a computer server may implement and concurrently execute a set of virtual machines or processes each implementing a message server to which a discrete set of recipients is assigned. As a third example of this second aspect these techniques may be implemented as a method such as the exemplary method of however the elements of such methods may be implemented in a different configuration. As a fourth example of this second aspect these techniques may be implemented as a system such as the exemplary system of however the components of the system implementing these techniques may vary or may be implemented in a different configuration. Those of ordinary skill in the art may devise many architectural variations in the implementations of the techniques presented herein.

A third aspect that may vary among embodiments of these techniques relates to the manner of establishing or removing a subscription of a recipient with a message source . A first embodiment of these techniques may disallow or simply not support alterations to the subscriptions of recipients with message sources . For example the subscriptions may be comparatively static or may be defined by another system or component such as where the recipient profiles are managed by another system. The embodiment may therefore be configured to route messages according to the static map of subscriptions and may therefore generate the subscription filter for use in deliver the messages according to the static map. Alternatively an embodiment may be configured to allow alterations to the subscriptions of recipients to message source . For example upon receiving a subscribe request from a recipient to subscribe to a message source the embodiment may be configured to update the recipient profile of the recipient to identify the message source subscribed by the recipient and to update the subscription filter to indicate that at least one recipient subscribes to the message source . Conversely upon receiving an un subscribe request from a recipient to unsubscribe from a message source the embodiment may be configured to update the recipient profile of the recipient to identify that the message source is not subscribed by the recipient and may remove the message source from the subscription filter if no other recipients are subscribed to the message source . Alternatively or additionally embodiments may accept and apply subscribe requests and unsubscribe requests defined by other sources e.g. message sources may request to add or remove subscriptions for particular recipients or recipients subscribing to a message source may request the addition of other recipients as subscribers of the same message source in a subscription referral model. Those of ordinary skill in the art may devise many ways of supporting subscribe requests and unsubscribe requests while implementing the techniques presented herein.

A fourth aspect that may vary among embodiments of these techniques relates to the implementation of the subscription filter that indicates whether at least one recipient subscribes to each message source . As a first example the subscription filter may simply comprise a set of Boolean values such as a bit array indicating whether at least one recipient managed by the message server has established a subscription with the message source . As a second example of this fourth aspect the subscription filter may indicate the number of subscribing recipients such as an integer array this may be advantageous e.g. for allowing a rapid updating of the subscription filter in response to an unsubscription of a recipient from a message source by simply decrementing the count of subscribing recipients . As a third example of this fourth aspect the subscription filter may additionally indicate which recipients are subscribed to a particular message source such as an array of references to the recipient profiles of subscribing recipients . This implementation of the subscription filter may incorporate aspects of the recipient profile and may be advantageous e.g. for determining not only whether a recipient is subscribed to a message source but also for identifying the subscribing recipients in order to associate a message therewith. For example if the subscription filter indicates for a particular message source a list of references to recipients or the recipient profiles thereof who are currently subscribed to the message source a message may be associated with the recipients by appending a copy of the list of references to the message . This copying might be performed in bulk to expedite the associating particularly if a large number of recipients are subscribed to the message source and may be computationally more efficient than other variations e.g. querying a database for records associating a message with subscribing recipients . Additionally this implementation may be comparatively easy to update in view of changes to the subscriptions of the recipients . However the scalability of this variation may be difficult to manage e.g. if many message sources are subscribed by many recipients the embodiment many have to store many copies of lengthy lists of references to subscribing recipients which may not be an efficient or feasible use of storage space.

A fourth example of this third aspect involves the implementation of the subscription filter as a bloom filter which permits the storage of a large amount of data in a compact manner while also permitting rapid retrieval of data. A traditional implementation of a bloom filter allows any input value to be initially and by default associated with a result value of False but to allow particular input values to be set to True. An array such as a bit array may be utilized as a storage structure for storing the result values corresponding with various input values. The bloom filter is also associated with a set of hash functions that map input values to particular indices within the bit array. For example if a bit array of eight kilobytes 65 536 bits is selected a set of hash functions may be provided that according to different mathematical formulae map an input value arbitrarily to a value between 0 and 65 535. Initially the entire bit array is initialized to zero indicating that every input value is associated with a result value of False. When a particular input value is to be stored as True the value is processed by all hash functions and the bit values at the index computed by each hash function is set to one. In order to extract the result value for a particular input value the input value is again processed by all hash functions and the bit values at the respective indices are retrieved and compared. If all of the bit values are set to one then the input value is probably stored in the bloom filter with a result value of True but if any one bit value is set to zero the value is definitely stored in the bloom filter with a result value of False or is not stored in the bloom filter at all thereby resulting in a default result value of False. Improvements of the traditional bloom filter may present additional features such as improved accuracy or storage density quicker retrieval or the capability of removing values from the bit array.

In view of these properties of a bloom filter a variation of these techniques may implement the subscription filter as a bloom filter. presents an exemplary scenario featuring this variation wherein the subscription filter is implemented as a bloom filter comprising a bit array and a set of three hash functions . Various message sources may be recorded in the bloom filter as being subscribed by one or more recipients by setting values in the bit array in the following manner. Initially the values of a length 16 bit array are set to zero to indicate that no message sources have any subscribing recipients . A message source may have a distinctive identifier such as a name or an integer. When the message source is to be recorded in the subscription filter as having at least one subscribing recipient the identifier is processed by all three hash functions each of which returns a numeric hash value between 0 and 15 that corresponds to an index in the length 16 bit array and the value at the respective index is set to one disregarding its previous value of zero or one. When a message is received and a determination is to be made whether the message source of the message has any subscribing recipients the identifier of the message source may again be processed by the hash functions and the values at the indices computed by the hash functions may be compared e.g. through a bitwise AND to determine whether all such values are one. If so the message source is determined to probably have at least one recipient so the message may be stored in the message store but if not the message may be discarded.

In the exemplary scenario of if a message is received from the first message source is received the identifier of the message source may be processed by the three hash functions of the bloom filter resulting in the numeric hash values 2 11 and 5 corresponding to array indices 0x02 0x0B and 0x05. The values in the bit array at these array indices may be examined since all three values are 1 the bloom filter indicates that the message source is subscribed by at least one recipient and the message may be stored. By contrast when a message is received from the second message source the identifier of the second message source is processed by the hash functions and the values at corresponding array indices 0x04 and 0x07 are found to equal one but the value at array index 0x0A indicated by the third hash function is found to equal zero accordingly the second message source is determined to have no subscribing recipients and the message from the second message source may be discarded.

The use of a bloom filter as a subscription filter such as illustrated in the exemplary scenario of may be advantageous for permitting the storage of a large amount of subscription information about a large number of message sources in a compact manner while still permitting comparatively rapid retrieval of the subscription information e.g. compared with querying every recipient profile to locate at least one subscribing recipient . The traditional bloom filter may present some limitations but these limitations may be tolerable for a subscription filter . As a first example the bloom filter may return false positive results e.g. for a particular input value that has not yet been stored with a result value of True each of the hash functions may indicate an array index that has previously for a different input value been set to one and may coincidentally produce an incorrect result value of True. As a second example once an input value is associated in a traditional bloom filter with a result value of True it often cannot be reset to False by setting the corresponding values in the bit array to zero as this resetting may cause other input values that have previously been associated with a result value of True may be unintentionally set to False subsequently causing a false negative result for the corresponding message sources and the incorrect discarding of messages that are deliverable to one or more subscribing recipients .

However in both cases the consequences of a false positive result of a bloom filter either because the message source has never had any subscribing recipients or because all subscribing recipients have unsubscribed involves the storing of a single undeliverable message in the message store which may represent a trivial and acceptable inefficiency. This inefficiency may be avoided with additional processing e.g. while associating the message with subscribing recipients according to the recipient profiles it may be determined that no subscribing recipients exist and the message may then be discarded. Conversely the traditional bloom filter does not produce false negatives so messages that are deliverable to one or more subscribing recipients are not incorrectly discarded. Moreover if the bloom filter becomes unacceptably inaccurate e.g. yielding too many false positives the bloom filter may be regenerated based on the current recipient profiles . This regenerating may erase the effects of previously subscribed but currently unsubscribing recipients . Moreover false positives may be reduced by choosing a different set of hash functions for the bloom filter during the regenerating. In a first such embodiment the regenerating may be performed promptly to reduce inaccuracies caused by unsubscribing recipients e.g. upon receiving an unsubscribe request from a recipient to unsubscribe from a message source a message server may update the recipient profile of the recipient to identify the message source as not subscribed by the recipient and may also regenerate the bloom filter based on the updated recipient profiles of the message server . Similarly upon receiving a removal request to remove a recipient from the message server e.g. to deactivate or close an account the message server may remove the recipient profile of the recipient and may regenerate the bloom filter based on the remaining recipient profiles of the message server . However the regenerating may be a computationally costly endeavor and may be performed periodically or upon detecting a particular level of inefficiency inducing inaccuracies in the bloom filter e.g. upon detecting a particular number of false positives during the associating of messages with recipients . Alternatively improved versions of the bloom filter may be utilized to address these limitations e.g. a bloomier filter may be utilized to eliminate false positive result values reported by the bloom filter . Those of ordinary skill in the art may devise many variations of the subscription filter while implementing the techniques presented herein.

The techniques described herein may be embodied in the configuration of a single standalone message server e.g. as in the exemplary scenario of where a single message server delivers messages received from a set of message sources to various subscribing recipients or in a plurality of message servers that independently service different recipients and or message sources e.g. as in the exemplary scenario of where two message servers service discrete and non overlapping sets of recipients . However some variations of these techniques involve the configuration of a plurality of message servers of a message server set in an interoperative manner. In these scenarios a body of recipients may be distributed among various message servers such as by assigning respective recipients to a particular message server that hosts the recipient profile of the recipient and or the messages to be delivered to the recipient . The message servers may also share an assignment map which indicates the assignment of respective recipients to a particular message server in the message server set. Each message server may comprise a discrete computer system among a set of interoperating computer systems and or a software process operating on such a computer system possibly concurrently or in series with other software processes representing other message servers operating on the same computer system. A first message server may utilize the assignment map to determine the message server to which a particular recipient is assigned in order to either handle requests received from the recipient or to forward such requests or refer the recipient to a second message server .

A fifth aspect that may vary among embodiments of these techniques and in particular for embodiments involving a configuration of respective message servers of a message server set relates to the manner of adding recipients to message servers . The message servers may be configured to accept new recipients such as new users who generate personal accounts to receive messages from the message sources . As a first example upon receiving an add request to add a new recipient a message server may be configured to generate a new recipient profile that identifies the message sources subscribed by the new recipient and to update the assignment map thereby indicating e.g. to other message servers of the message server set the assignment of the new recipient to the message server . In this regard additional variations of these techniques may relate to the manner of choosing a message server to which the recipient is to be assigned. As a second example of this fifth aspect the recipients may be arbitrarily assigned to message servers such as randomly or by user or administrator selection. As a third example of this fifth aspect recipients may be assigned in order to balance the resource consumption of respective message servers such as by promoting an approximately equivalent number of recipients or an approximately equivalent space usage by the recipients e.g. where recipients subscribing to more message sources may entail a greater storage of messages having a greater resource consumption. As a fourth example of this fifth aspect recipients may be assigned to message servers based on geographic proximity e.g. if the message server set is distributed across a wide area network such as a country or continent recipients may be assigned to the message server in closest proximity in order to reduce network latency.

As a fifth example of this fifth aspect recipients may be assigned to message servers in a manner that improves the efficient use of computing resources. In particular among the set of recipients identifying similar recipients and assigning such recipients to the same message server may reduce the number of stored messages and consumed network bandwidth. For example if out of a body of 100 000 recipients a cluster of 1 000 recipients subscribes to a particular message source it may be efficient to assign these recipients to the same message server which may receive and store a single copy of the messages received from the message source and distribute such messages to these recipients than to distribute the recipients across many message servers thereby entailing multiple transmissions the storing of multiple copies and delivery processing by multiple message servers . Such clustering may also improve the performance of the message server set by improving the use of caches e.g. if a set of recipients subscribe to the same message source a message server to which these recipients are assigned may exhibit improved performance by retaining the messages from the message source in a memory cache for faster and frequent delivery but this performance improvement may not be achievable if the recipients are distributed across many message servers .

This clustering of similar recipients may be achieved in at least two ways. As a first clustering technique recipients may be assigned to a message server of the message server set based on a predicted shared set of message sources to which these recipients might subscribe. Upon receiving the add request to add a recipient to a message server a determination may be made whether the new recipient is similar to the recipients of a previously identified cluster such as recipients who enjoy particular sports who listen to similar types of music or who engage in particular professions. If the recipient appears similar to any such cluster of recipients previously assigned to a particular message server the message server may accept the new recipient e.g. by generating a new recipient profile identifying the message sources subscribed by the new recipient and updating the assignment map indicating the assignment of the new recipient to the message server . Alternatively if a first message server determines that a particular recipient is similar to the recipients assigned to a second message server the first message server may simply forward the add request to the second message server .

A second clustering technique which may be implemented either alternatively or additionally with other clustering techniques involves rather than predicting the message sources to which a particular recipient might subscribe detecting similarities of existing subscriptions among the recipients and upon identifying a subset of recipients who maintain similar subscriptions reassigning the recipients to a particular message server . This detection may be implemented e.g. by statistical analysis or various artificial intelligence techniques such as pattern recognition. Once such a similarity of subscriptions among a subset of recipients is detected the message servers may arrange to consolidate the recipients to a single message server . This consolidation may be performed in a decentralized manner e.g. each message server may endeavor to claim from other message servers any recipients hosted by such other message servers who subscribe to similar message sources . For example when a first message server identifies at least one shared message source that is subscribed by a first recipient hosted by the first message server and a second recipient hosted by a second message server the first message server may send to the second message server a transfer request to transfer the second recipient to the first message server . The second message server may oblige by upon receiving the transfer request sending the recipient profile of the recipient to the first message server removing the recipient profile from the set of recipient profiles stored by the second message server updating the subscription filter and updating the assignment map to indicate the reassignment of the recipient to the first message server . In one such implementation the message servers may interoperate in many ways to achieve an efficient redistribution e.g. upon determining that two or more message servers share a set of recipients sharing one or more subscriptions with particular message sources the message servers may choose a particular message server to which the recipients may be advantageously transferred based on various heuristics such as e.g. choosing the message server currently storing the largest share of the recipients having the largest spare capacity e.g. to which are assigned the fewest other recipients and or having the closest geographic proximity or available bandwidth with the recipients . Alternatively or additionally a centralized server may facilitate the consolidation by identifying patterns of similar subscriptions choosing an advantageous consolidation of recipients and or coordinating the transfer of recipients with the message servers currently hosting the recipients . Those of ordinary skill in the art may devise many ways of configuring one or more message servers to add recipients while implementing the techniques presented herein.

A sixth aspect that may vary among embodiments of these techniques and in particular for embodiments involving a configuration of respective message servers of a message server set relates to the manner of receiving and exchanging messages from various message sources among the message servers . When a message server receives a message from a message source in addition to delivering the message to recipients subscribing to the message source according to the techniques presented herein the message server may also be configured to retransmit the message to other message servers for delivery to the other recipients assigned to such other message servers . As a first example the message server may broadcast all such messages to all other message servers but such broadcasting may efficiently utilize the available bandwidth of a network or bus connecting such message servers as the number of messages processed by the message server set increases. As a second example the message server may retransmit the message only to the other message servers who may deliver the message to at least one recipient assigned thereto and subscribing to the message source of the message . In one such embodiment each message server may share its subscription filter with the other message servers of the message server set and upon updating the subscription filter e.g. in view of changes in the assignments of recipients and or the subscriptions of assigned recipients to message sources may transmit an updated subscription filter to the other message servers . Each message server may also store the subscription filters of the other message servers and may refer to such subscription filters to identify the other message servers to which the message is to be retransmitted.

The selective transmission of messages according to this second example of this sixth aspect may significantly improve the efficient utilization of the computing resources of the message server set . Additionally this sharing and retransmission may be implemented according to many topologies e.g. as a fully interconnected graph where each message store stores the subscription filters of all other message servers and rebroadcasts a received message to all other message servers having at least one subscribed recipient or as an n tiered network topology involving smaller groups of message servers that exchange subscription filters and or messages thereamong and with other groups. Various configurations may be comparatively advantageous according to various aspects of the messaging scenario e.g. based on the number of message servers and messages the rate of change in the message server set or in the subscriptions of recipients to message sources and the comparative values of promptly delivering messages and conserving network bandwidth.

Accordingly these and other advantages of this second example of this sixth aspect may be achieved by configuring the message servers in the following manner. Upon generating or updating a subscription filter or upon joining a message server set a message server may be configured to send the subscription filter to at least one other message server and in some configurations to all other message servers of the message server set . Upon receiving a second subscription filter from a second message server the message server may be configured to store the second subscription filter of the second message server . Upon receiving a message from a message source the message server may examine each of the subscription filters of the other message servers to determine whether at least one recipient assigned to each other message server subscribes to the message source and upon so determining may forward the message to such other message server . Finally upon leaving the message server set e.g. in the event that the message server is being decommissioned the message server may be configured to transfer all recipients assigned to the message server to another message server of the message server set and to request the other message servers of the message server set to remove the subscription filter for the message server . According to this configuration the message servers may interoperate to share subscription filters and to exchange messages in an efficient manner.

A particular feature that may be implemented in such configurations in order to achieve improved efficiency relates to the sending of messages by a popular message source to which many recipients subscribe. For example in a social network scenario a particularly popular message source such as a celebrity may have millions of subscribing recipients . For such popular message sources it may be inefficient for a message server upon receiving a message therefrom to examine the subscription filters of the other message servers to identify the message servers to which are assigned at least one subscribing recipient when many or all such message servers may have at least one such recipient . Instead for these popular message sources greater efficiency may be achieved by transmitting the message to all message servers of the message server set . Accordingly one or more message servers may be configured to identify at least one popular message source that is subscribed by many recipients and upon receiving a message from a popular message source to send the message to the message servers of the message server set . In this manner the computational resources involved in examining the subscription filters of the other message servers may be avoided since many or all of the other message servers are likely to have at least one subscribing recipient .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

