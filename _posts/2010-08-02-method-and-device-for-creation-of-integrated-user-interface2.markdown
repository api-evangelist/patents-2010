---

title: Method and device for creation of integrated user interface
abstract: A method and device for creating an integrated User Interface (UI) by combining individual application UIs. The device receives application UIs from individual UI providing devices, combines the application UIs into the integrated UI, and displays the integrated UI. When an application UI is selected from the integrated UI, the device sends a function invocation signal to a corresponding device in order to perform the particular function corresponding to the selected application UI.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09658864&OS=09658864&RS=09658864
owner: Samsung Electronics Co., Ltd
number: 09658864
owner_city: 
owner_country: KR
publication_date: 20100802
---
This application claims priority under 35 U.S.C. 119 a to an application filed in the Korean Intellectual Property Office on Jul. 31 2009 and assigned Serial No. 10 2009 0070329 the content of which is hereby incorporated by reference.

The present invention relates generally to a User Interface UI and more particularly to a method and device for creating a new integrated UI by combining individual application UIs received from external communication entities.

A UI is a physical or virtual medium with which a user interacts with an electronic device. Normally a UI provides an input enabling a user to manipulate a device and an output enabling the device to indicate information to the user.

Conventional UIs are offered by device manufacturers and do not allow rework or modification once stored in devices.

Currently as a great amount of and a great variety of data are processed in devices various UIs are being studied and developed. In particular traditional UIs that only offer simple images and text are now being replaced by newer UIs based on rich media in which several types of data such as text audio video fonts images graphics etc. are provided as integrated content.

Binary Format for Scene BIFS Light weight Application Scene Representation LASeR etc. are known international standards for rich media services. In particular the LASeR specification has been designed to offer much richer user services through efficient representation and user interaction using various multimedia elements such as scene description video audio image font text meta data script etc.

Although a device can perform various functions in connection with external devices a UI of each individual device is still in the default stage as set by a device manufacturer. Accordingly there is an arising need for an advanced flexible integrated UI that enables an extended and integrated control of other devices.

The present invention is designed to address at least the above mentioned problems and or disadvantages and to offer at least the advantages described below.

In accordance with an aspect of the present invention a method is provided for creating an integrated UI from application UIs for performing particular functions. The method includes receiving a first application UI from a first individual UI providing device receiving a second application UI from a second individual UI providing device combining the first and second application UIs into the integrated UI with a single scene and displaying the integrated UI.

In accordance with another aspect of the present invention a device is provided for creating an integrated UI. The device includes a communication unit that is connected to a first UI providing device and a second UI providing device and that is configured to receive a first application UI from the first UI providing device and a second application UI from the second UI providing device each for performing a particular function a control unit that combines the first and second application UIs into the integrated UI with a single scene and a display unit that displays the integrated UI.

Other aspects advantages and salient features of the present invention will become apparent to those skilled in the art from the following detailed description which taken in conjunction with the annexed drawings discloses exemplary embodiments of the invention.

Various embodiments of the present invention will now be described more fully with reference to the accompanying drawings. In the description well known or widely used techniques elements structures and processes may not be described or illustrated in detail to avoid obscuring the essence of the present invention. Although the drawings represent certain embodiments of the invention the drawings are not necessarily to scale and certain features may be exaggerated or omitted in order to better illustrate and explain the present invention.

Among the terms set forth herein a device refers to a piece of equipment designed to transmit and receive a variety of data to and from external communication entities through a wired or wireless connection. For instance a device may be a mobile handset a notebook a stereo system a TV a set top box a network server etc. In addition a great variety of portable devices multimedia players office automation machinery and any other communication entities may be also employed for a device set forth herein. Such a device can display any application UI selected to perform a particular function.

Hereinafter a device will be classified into an integrated UI creating device and an individual UI providing device. An integrated UI creating device is a device that receives individual application UIs from other devices through a wired or wireless connection combines received individual application UIs into a single UI i.e. an integrated UI and then displays an integrated UI. For example the integrated UI creating device may perform a role of a UI management engine or a widget manager.

An individual UI providing device is a device that has and displays some application UI and also provides information about it to the integrated UI creating device through a wired or wireless connection.

An application UI represents a particular executable function of a device e.g. using graphical images such as buttons icons animations and vector graphics and any other visual aural and tactile elements. The application UI may also involve some operational elements to execute remove add and convert an application. Here each application UI is mapped to an individual application for performing a particular function. Therefore if any application UI is selected a specific application mapped to a selected application UI may be executed. For example the application UI can be a widget.

In a mobile device a widget represents a frequently used function using an icon. A weather widget an image viewer widget a subway map widget etc. are examples of widgets that are commonly used in a mobile device. If a user selects a weather widget for example a mobile device may display given content related to weather.

Content refers to data that is displayed in relation to a particular function that is performed when an application UI is selected. For instance content typically contained in a mobile device may be link data such as phone numbers image data such as photographs text data such as messages etc.

A function refers to a specific activity program etc. that performs a particular operation in a device. For instance a function typically performed in a mobile device is a call function a data display function etc.

Referring to an integrated UI creating device is connected to at least two individual UI providing devices and through a wired or wireless network. Each of the individual UI providing devices and provides a specific individual application UI to the integrated UI creating device . Thereafter the integrated UI creating device creates an integrated UI by combining received individual application UIs and then displays the integrated UI.

Specifically in step the integrated UI creating device starts an integrated UI display mode at a user s request. As described above the integrated UI is a single scene involving combined application UIs each of which is offered by the individual UI providing device and also used to perform a particular function in that device.

In steps and the integrated UI creating device searches for the individual UI providing devices and through a wired or wireless connection. In steps and the integrated UI creating device receives the first application UI and the second application UI from the first individual UI providing device and the second individual UI providing device respectively. Here the individual UI providing devices and also send characteristic information about their respective application UI to the integrated UI creating device . Characteristic information includes details about media and graphic objects that constitute an application UI including elements written in a declared form an attribute of each element scripts information about mapped applications etc.

Thereafter the integrated UI creating device decodes characteristic information about each received application UI and then checks mapped applications and objects to express each application UI by using decoded characteristic information. For example characteristic information offered by the individual UI providing devices and may be written as shown in Table 1.

In Table 1 the indicates that this interface can be output in a corresponding application and also has the name attribute that denotes an interface name. Any subordinate interface may be expressed using the output factor and the input factor each of which has the name attribute and the scriptParamType attribute.

After checking characteristic information about received application UIs step the integrated UI creating device combines the first and second application UIs into an integrated UI by using characteristic information i.e. the integrated UI creating device produces an integrated UI.

More specifically the integrated UI creating device retrieves characteristic information about application UIs the individual UI providing devices and respectively offer. For example retrieved characteristic information may include but is not limited to Graphic UI GUI information about size and color of modules that constitute each application UI and information about name and attribute of interfaces that define functions of such modules. Such characteristic information may be handled in a presentation engine a specialized module for external communications a UI management engine an application programming interface a temporary memory of a system library or any equivalent thereof. The UI management engine is often referred to as a UI manager or a widget manager and may have an extended form of a rich media engine. The rich media engine is an interactive media engine that can provide dynamic information in which graphic or flash technique is applied to audio and video. The UI management engine may be included in the rich media engine may be a specialized functional module including the rich media engine or may be an independent module completely separated from the rich media engine.

The integrated UI creating device checks a predefined connectivity relation between respective devices and then produces an integrated UI by using retrieved characteristic information about each application UI. That is by using an ID a category etc. of each application UI the integrated UI creating device retrieves connectable application UIs from among all application UIs that the respective individual UI providing devices offer.

Then the integrated UI creating device produces an integrated UI by combining retrieved application UIs. Here an integrated UI includes application UIs each of which is offered by the individual UI providing device or and is also used to control a particular function to be performed in that device. Accordingly when combining the first and second application UIs into an integrated UI the integrated UI creating device performs a mapping of retrieved characteristic information to each application UI displayed in an integrated UI.

In step the integrated UI creating device displays an integrated UI that involves application UIs for the individual UI providing devices and . Here the integrated UI creating device may reconfigure the position shape etc. of the respective application UIs in the integrated UI and may also manage and control each application UI.

In steps and when each of the first and second application UIs is selected in the integrated UI the integrated UI creating device sends a function invocation signal to each of the first and second individual UI providing devices and . Here a function invocation signal starts a particular function in the individual UI providing device or . Accordingly in step after receiving a function invocation signal each of the first and second individual UI providing devices and starts a selected function.

Referring to the integrated UI creating device includes a communication unit an input unit a control unit a connectivity checking unit a UI combining unit and a display unit . Here the connectivity checking unit and the UI combining unit are included in the control unit .

The communication unit establishes a wired or wireless connection with at least one of other devices i.e. external communication entities and then sends and or receives data to and or from the connected devices under the control of the control unit . Particularly the communication unit receives a signal including characteristic information about at least one application UI hereinafter referred to as an application UI signal from at least one individual UI providing device for offering application UIs. Thereafter the communication unit delivers a received application UI signal to the control unit . The communication unit may also send a function invocation signal to a corresponding individual UI providing device under the control of the control unit . As described above the function invocation signal starts a particular function corresponding to a specific application UI selected by a user.

The input unit creates various input signals depending on user instructions and delivers various input signals to the control unit . The input unit may include but is not limited to a touch screen a keypad a remote control or any other equivalent. Particularly the input unit sends an input signal indicating an application UI selected by a user to the control unit .

The control unit controls the states and operations of elements in the integrated UI creating device . Particularly the control unit produces an integrated UI by combining individual application UIs received from the respective individual UI providing devices and then controls a display of the integrated UI.

More specifically when an integrated UI display mode is selected to display a single scene involving several application UIs that are offered by the respective individual UI providing devices the control unit performs a search for individual UI providing devices by controlling the communication unit . The control unit receives at least one application UI signal from the individual UI providing devices through the communication unit . Additionally the control unit decodes received application UI signals to application UI characteristic information combines application UIs received respectively from the individual UI providing devices into an integrated UI by using decoded characteristic information and displays an integrated UI on the display unit . Therefore an integrated UI involves application UIs each of which is used to perform a corresponding function. When one of application UIs included in the integrated UI is selected through the input unit the control unit sends a function invocation signal corresponding to a selected application UI to the individual UI providing device through the communication unit .

In order to display an integrated UI the control unit retrieves characteristic information about each application UI. As described above characteristic information includes graphic objects information about mapped applications attribute information etc.

Thereafter the control unit checks a connectivity relation between the individual UI providing devices through retrieved characteristic information and produces an integrated UI according to a connectivity relation. As illustrated in the control unit may include the connectivity checking unit and the UI combining unit .

The connectivity checking unit may check a connectivity relation between the individual UI providing devices offering application UIs.

For example the connectivity checking unit may check application UI connectivity by examining a list of connectivity relations. This list may be stored in the integrated UI creating device . This list may be stored as default by a device manufacturer or may be offered in advance by an application UI provider such as a service operator.

The integrated UI creating device may manage a list of connectivity relations between the individual UI providing devices and also retrieve a connectivity relation through a predefined interface as shown below in Table 2. Table 2 is directed to the integrated UI creating device as a widget manager and an individual UI as a widget.

The getInterfaceHandlersByType method enables a Widget to retrieve an array of objects implementing the InterfaceHandler interface of the given type and representing bound interfaces.

The function onInterfaceBind can be set to a function that will be called by the widget manager upon the binding of any interface. The function onInterfaceUnbind can be set to a function that will be called by the widget manager upon the unbinding of any interface.

The function onActivation can be set to a function that will be called by the widget manager upon activation or upon failure to activate a component. The return parameter is a Boolean indicating if the activation was a success true or a failure false .

The activateComponentWidget method is called by a widget to trigger the activation of a component widget.

The deactivateComponentWidget method is called by a widget to trigger the deactivation of a component widget.

The widget manager provides an InterfaceHandler object per defined interface of the widget as shown in Table 3.

In Table 3 the bound string indicates an address e.g. an IP Address hostname . . . of the external communication entity corresponding to this InterfaceHandler object.

The type string indicates the type of the external communication entity corresponding to the InterfaceHandler object.

A script within a widget may call the invoke method from the InterfaceHandler object to send a message to the corresponding external communication entity. A message parameter indicates each external communication entity s interface declaration in a declaration order. The Widget Manager triggers the callBackFunction upon reception of the entity s reply giving the MsgHandler object enabling the script to distinguish multiple calls to the callback.

When scripts functions are called upon reception of an incoming message i.e. because the function is declared in the mw inputAction attribute of a element the script may reply to the originating communication entity.

The invokeReply method is used to send a reply to a previous message. Upon the call to this method the Widget Manager shall send a message back to the communication entity. The message output parameters are mapped to the method s following arguments in order.

For example assuming that Widget A defines a method do Search and Widget B wishes to use the service in question a Widget Manager identifies that widget A and B are compatible for communications and connects the output of widget B to the input of widget A. Upon invocation by Widget B of the Search method the Widget Manager sends a message to Widget A which triggers a call to SearchFunction method. Widget A then performs its search creates and stores an MsgHandler object and return. When the processing is done Widget A calls the invokeReply method with the MsgHandler object and the result of its process sending a reply message which in turn calls back Widget B and its myProcessSearchResults method with the result the value of URL .

The manifest of widget A declares in an interface of type example search interface as shown in Table 4.

The manifest of widget B declares in an interface of type example search interface as shown in Table 5.

Table 8 arranges a list of the second application UIs connectable to each of the first application UIs.

When a list of connectivity relations is defined as shown in Table 8 the connectivity checking unit determines which of the second application UIs offered by the second individual UI providing device can be combined with each of the first application UIs offered by the first individual UI providing device . For example if the first application UI is a map application UI the connectivity checking unit ascertains the ID widget H Map of a map application UI through retrieved characteristic information about the first application UI. Thereafter the connectivity checking unit finds the IDs of connectable application UIs in the connectivity relation list. As shown in Table 8 connectable application UIs are widget H weather . . . widget H weather widget H cal and widget H cal for example. Additionally the connectivity checking unit checks characteristic information about the second application UIs offered by the second individual UI providing device and then retrieves the second application UIs corresponding to connectable application UIs included in the connectivity relation list.

Table 9 arranges a group of the second application UIs connectable to each of the first application UIs.

When a list of connectivity relations is defined as shown in Table 9 the connectivity checking unit checks which group of the second application UIs can be combined with each of the first application UIs. All application UIs that can be displayed in individual UI providing devices are included in application UI groups and the ID is assigned to each application UI group. In a mobile device application UI groups may be a game application UI a weather application UI a calendar application UI a call application UI etc.

The following example is a method of checking connectable application UIs through application UI groups.

If a first application UI is a calendar application UI the connectivity checking unit ascertains an ID widget S cal of a calendar application UI through retrieved characteristic information about the first application UI. Thereafter the connectivity checking unit finds the group IDs of connectable application UIs in the connectivity relation list. As shown in Table 9 the group ID of the connectable application UIs is widget Group S  for example. Additionally the connectivity checking unit checks characteristic information about the second application UIs and then retrieves the second application UIs corresponding to a connectable application UI group included in the connectivity relation list.

The connectivity checking unit may create a connectivity relation list whenever receiving an application UI from the individual UI providing device and then check a connectivity relation between application UIs. For the above the individual UI providing device includes information about connectable application UIs in characteristic information when sending application UIs to the integrated UI creating device . Such information about connectable application UIs may be recorded in the form of aggregatable T F in or in association with the application UI ID field. The connectivity checking unit checks information about connectable application UIs included in characteristic information thereby creating a connectivity relation list. Thereafter the connectivity checking unit finds connectable application UIs by comparing characteristic information about each application UI with a connectivity relation list.

Additionally the connectivity checking unit may assign a priority to each application UI offered by the individual UI providing device. When application UIs are combined into an integrated UI by the UI combining unit application UIs may be selectively stored in an order of priority. This priority may be predetermined as default by a device manufacturer or may be varied according to the frequency of use.

After being checked by the connectivity checking unit connectivity relation information about connectable application UIs may be formed as rich media data stored as a separate data regarding connectivity relation or included in characteristic information about application UIs.

The UI combining unit combines application UIs offered by the individual UI providing devices into an integrated UI by using connectivity relation information checked by the connectivity checking unit . For example the UI combining unit checks characteristic information about connectable application UIs as shown in Table 10.

In Table 10 describes the communication capabilities of the widget for a certain type of communication. Additionally subordinate attributes may include but are not limited to a type identifying the type of interface mw bindAction mw unbindAction indicating the scene construct to change or trigger or the name of a script function to call upon the successful binding of this interface mw serviceProvider enabling an external search for this interface mw connectTo indicating the connectivity relation with this interface mw multipleBindings indicating connectability between this interface and other interfaces and mw required indicating a necessary interface when activated.

Characteristic information may include features in representation and configuration such as graphic objects conditions for activation of functions in an integrated UI and information about portable regions objects attributes parts functions etc. Such characteristic information may be written in an application UI itself or a manifest or may alternatively be formed as a separate file or data.

The following is a description regarding characteristic information assuming that an integrated UI creating device as a widget manager and an individual UI as a widget.

Upon loading of this manifest the Widget Manager retrieves the manifest of the component widgets referenced by the mw src attribute or try to find a widget that matches the interfaces declared by the elements without actually activating the component widget. If no available widget matches the required interfaces the behaviour and in particular the loading of the main widget is implementation specific. If a matching widget is found events for the binding of this component shall be triggered after the events for the activation of that widget are triggered.

Depending on the actual situation the activatedAction and deactivatedAction messages may not be received for example when the component was already activated before the parent requested the activation of the component.

In the following example components may be used to create template widgets. Widget A refers to a scene capable of visually grouping two objects. The manifest of A uses two components B and C pointing to either specific widgets or to generic interfaces. Upon activation of B and C A can be activated and its scene can indicate to the widget manager how to visually group B and C as shown in Table 11.

The UI combining unit may define information about display positions of application UIs in an integrated UI functions mapped to application UIs etc. by using retrieved application UI characteristic information. Also the UI combining unit may define an operating scenario of application UIs in an integrated UI by using for example an operating table.

When application UIs are combined into an integrated UI the UI combining unit may define characteristic information to be maintained or not shared per application UI and also application UIs to be removed or involved. In addition the UI combining unit may determine which application UIs are appointed as the main or subordinate depending on priority. Also the UI combining unit may perform an integrated or individual administration for information about the individual UI providing devices that offer respective application UIs involved in an integrated UI. This information may be used when an integrated UI is released or recombined.

Also included is a scenario in which a widget manager manages independent application UIs as an integrated UI. For example a widget manager combines an application UI A offered by an air conditioner with other application UI B for offering weather information and then considers it as an independent application UI combined by the UI combining unit . In this case if a certain event occurs in a weather application UI B a widget manager or a weather application UI B may send that event to an air conditioner application UI A .

Furthermore the control unit controls the display unit so that an integrated UI may be displayed. Here a displayed integrated UI includes application UIs each of which corresponds to a particular function of the individual UI providing device that has offered the application UI. When a certain application UI is selected the control unit ascertains a function to be performed depending on a selected application UI and then sends a function invocation signal to corresponding one of the individual UI providing devices through the communication unit .

The display unit represents information in association with the states and operations of integrated UI creating device . Particularly the display unit displays an integrated UI created from at least one application UI under the control of the control unit .

Referring to the printer displays a print application UI for performing a print function and a set application UI for setting print environments. In addition the camera displays a photo viewer application UI for showing a stored photo image and an enlarge application UI for enlarging a selected photo image. When the mobile device sends a signal requesting application UIs the printer transmits the print application UI and the set application UI to the mobile device and the camera transmits the photo viewer application UI and the enlarge application UI to the mobile device .

The mobile device receives the print application UI the set application UI the photo viewer application UI and the enlarge application UI from the printer and the camera and then retrieves characteristic information about received application UIs. Additionally the mobile device checks a connectivity relation through the ID of each application UI in retrieved characteristic information. It is assumed herein that the print application UI the photo viewer application UI and the enlarge application UI are connectable application UIs and the priority is assigned to the order of the photo viewer application UI the print application UI and the enlarge application UI .

The mobile device produces an integrated UI using characteristic information retrieved from application UIs received from the printer and the camera . By checking connectivity relation information the mobile device recognizes that the print application UI the photo viewer application UI and the enlarge application UI are connectable and the photo viewer application UI has the highest priority. Therefore the mobile device combines the above connectable application UIs into an integrated UI and then displays the integrated UI on the display unit.

Thereafter when any application UI in the integrated UI is selected the mobile device sends a function invocation signal to the corresponding individual UI providing device so that a particular function corresponding to a selected application UI may begin to be performed. If any photo image is selected in the photo viewer application UI and then the print application UI is further selected the mobile device sends a function invocation signal for requesting a selected photo image to the camera that has offered the photo viewer application UI with a higher priority. Additionally the mobile device sends a function invocation signal for printing a selected photo image to the printer that has offered the print application UI with the next priority. Therefore the camera sends a selected photo image to the mobile device and then the mobile device sends a received photo image to the printer . Thereafter the printer prints a received photo image.

Additionally the mobile device may receive in advance photo image data displayed in the photo viewer application UI from the camera and then in a quick response to selection send selected photo data to the printer . Alternatively the mobile device may deliver IP address or other identifying information of the printer to the camera and then the camera may send selected photo data to the printer using the IP address or other identifying information of the printer .

The above described method for combining application UIs offered by the individual UI providing devices into an integrated UI is not limited to a partial transfer of functions and application characteristic information and may also include an integrated management method for the respective individual UI providing devices by using an independent application UI. For example if the first individual UI providing device offers the first application UI for controlling an air conditioner and if the second individual UI providing device offers the second application UI for performing a function of a thermometer the integrated UI creating device produces an integrated UI by combining the first and second application UIs. Thereafter if a change in temperature is detected through the second application UI the integrated UI creating device may send a detected value of temperature to the first individual UI providing device and thereby control an air conditioner.

Additionally this method enables several devices to share application UI usage log or data with each other such that an integrated UI may be used as the third application. For example such application UI usage log or data may be utilized through other application UI.

Referring to in step the integrated UI creating device starts an integrated UI display mode. For example the integrated UI display mode may be selected through a given menu or function key. If any application UI displayed in the integrated UI creating device is combined into an integrated UI the integrated UI creating device may offer a pop up window indicating that a displayed application UI is available for the integrated UI. In response to a user s selection of an integrated UI display menu the integrated UI creating device may start the integrated UI display mode. Alternatively when receiving at least one application UI from at least one individual UI providing device the integrated UI creating device may offer a pop up window enabling a user to select the integrated UI display mode.

In step the integrated UI creating device performs a search for individual UI providing device through a wired or wireless connection. Although not illustrated the integrated UI creating device may send a request signal for application UIs to each individual UI providing device. This signal may be a request for currently displayed application UIs in each individual UI providing device or for selected application UIs from among all applications stored in each individual UI providing device.

In step the integrated UI creating device receives at least one of the first application UIs from the first individual UI providing device and at least one of the second application UIs from the second individual UI providing device. In step the integrated UI creating device checks a connectivity relation of the first and second individual UI providing devices through the received first and second application UIs. Specifically the integrated UI creating device determines connectable application UIs by comparing a predefined connectivity relation list with characteristic information about each application UI. In addition the integrated UI creating device determines the priority of each application UI. Although not illustrated the integrated UI creating device may inform a user of an absence of connectable application UIs by using for example a pop up window or other message if there are no connectable application UIs.

In step the integrated UI creating device combines the first and second application UIs into an integrated UI depending on a connectivity relation. The integrated UI creating device displays the integrated UI on the display unit in step and sends an invocation signal to each individual UI providing device in step . The integrated UI creating device may send invocation signals in an order of the priorities of the selected application UIs i.e. an invocation signal is first transmitted to an individual UI providing device having an application UI with a higher priority than other individual UI providing devices.

Although the integrated UI creating device described above combines application UIs received from the individual UI providing devices the integrated UI creating device may also combine its own application UIs into an integrated UI. For example the mobile device may combine a message application UI with an image display application UI into an integrated UI and then display it as a single scene. Similarly a schedule application UI and a memo application UI may be combined into and displayed as an integrated UI.

As described above the present invention may combine individual UIs of several devices into a single integrated UI. Additionally such an integrated UI displayed in a device may be flexibly varied according to changes in individual UIs offered by external devices such that a user can easily check executable functions of each device. Also this integrated UI may enable the effective utilization of data or functions separately dispersed in several devices.

While the present invention has been particularly shown and described with reference to certain embodiments thereof it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the present invention as defined by the appended claims.

