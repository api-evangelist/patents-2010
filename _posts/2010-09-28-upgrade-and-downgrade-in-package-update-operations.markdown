---

title: Upgrade and downgrade in package update operations
abstract: Embodiments relate to systems and methods for automatic upgrade and downgrade in package update operations. A physical or virtual client machine can host an installed software distribution including a set of installed software packages, such as an operating system, application, and/or other software. A package manager on the client can manage the set of installed packages, and report the installed distribution including version and component packages to one or more package servers. When a distribution upgrade is initiated, the package manager and/or other distribution logic can analyze the target distribution, to determine whether each package in the target distribution represents the most-current version of each component package. Packages which represent the most-current can be installed. Packages which do not represent the most-current version, e.g. due to slippage in vendor updates or versions, can be substituted with a most-current version automatically retrieved from a software repository or other source.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08806471&OS=08806471&RS=08806471
owner: Red Hat, Inc.
number: 08806471
owner_city: Raleigh
owner_country: US
publication_date: 20100928
---
The present teachings relate to systems and methods for automatic upgrade and downgrade in package update operations and more particularly to platforms and techniques for automatically identifying packages for upgrade and downgrade activity in connection with the installation of software distributions in order to produce the most current version of each package installed on a target machine.

Users of physical or virtual machines commonly install software packages including package updates to physical or virtual machines. The software packages can contain a set of related files chosen to perform a given application or task such as for example a group of software applications drivers and or other resources used to install and use messaging applications. In instances a software package can contain application software operating system software drivers patches and or other software components grouped as a logical set.

Software package update managers exist to help a user initiate and perform software package updates such as for example the yum Yellowdog update manager package update manager available from Red Hat Inc. and others. In general available software package managers are configured to interact with the set of installed packages on a client and with one or more software package repositories to directly connect to those databases and download available package updates. In cases the package update can be formatted as a single combined file containing the various component files and can be compressed for easier transmission.

The task of managing a network of physical and possibly virtual machines can be complicated by the need to identify and track the population of the machines under management and the various software package complements and or entire software distributions such as operating system distributions installed on those machines. The machines under management and their package complements may need to be identified and tracked for a variety of purposes including for instance to identify and schedule package updates activate and deactivate machines assigned to networks including on premise and cloud networks to perform maintenance or other package or network management tasks.

In various networks it may be periodically desired by users and or administrators to perform a distribution upgrade for instance to update one or more client machines from an installed distribution version of Linux and or other software to a target presumably upgraded version of the same distribution. In general regards if all software packages contained in the installed distribution were present in the target distribution in their most current or up to date form performing such a distribution upgrade would be a straightforward task.

However in actuality the packages contained in the target distribution may not always represent the most current versions of the same packages already installed in earlier versions on the existing distribution hosted by the client. This can occur for a variety of reasons or due to a variety of factors. For one a software distribution can contain a relatively large number of packages and constituent files of those packages for instance on the order of hundreds or thousands of packages and or files. Frequently the packages and or files contained in a distribution can be contributed by a diverse set of software vendors or other suppliers. For distributions of various types there may be insufficient coordination between the different vendors to result in the absolutely most recent version of all potentially thousands or more packages being inserted into the overall software distribution. For instance vendors or other software suppliers frequently patch or update their packages or other files. In many cases these updates can be labeled or named with a relatively minor or incremental version number update e.g. from version 3.2 to version 3.3 of the package or software of the same name.

However incremental or ongoing package updates can take place at any time including after an overall distribution is finalized and potentially encoded and stored in a software repository or other data store. Package update logic used to retrieve and install updates may not be configured to locate all incremental or other updates for packages in the target distribution. In cases the most recent version of a package may be re named or re identified by a different package or file name after the software distribution is finalized.

Further different software vendors or other contributors may adopt inconsistent naming or versioning schemes for their package updates depending on time of release and other factors. For instance one vendor may contribute Package X Version 2.0 for Distribution A and within a month of the version being embedded into Distribution A develop or release version 2.1 of Package X. In an effort to discriminate that version from others the contributing vendor may label or name that package Package X Distro A2.1 or other complex identifier intended to indicate the distribution with which a package version is correlated.

However complex identifiers may lead to inconsistencies or confusion in terms of downstream updates and associated distributions. If the same exemplary vendor released a further update to the same package after a further distribution B they might label that package Package X Distro B1.0 or similar. However if a subsequent package update is made the vendor may unable to attach a label to that further update that will intelligibly indicate whether that package represents an update to Package X Distro A2.1 Package X DistroB1.0 or both or neither.

In further regards the naming conventions and update position of package versions can become yet further complicated if a vendor produces multiple updates for different step versions e.g. versions 2.2 2.3 etc. as well as 3.1 3.2 3.3 etc. in which case there may be multiple series of versions some of which are more recent than others but not all of which may represent an upgrade to each other. Similarly consistency may become problematic between package versions when a vendor or does not produce an update or any package at all for inclusion in additional downstream distribution versions. In those cases and others the installation logic may wish to revert to a prior version of a software package which still represents the most recent version even if a nominally higher labeled version is incorporated in a distribution or otherwise. In existing installation platforms the ability to automatically seek detect and install the most recent version of a software package contained in a distribution is not provided. Users are instead relegated to manually searching or confirming that all packages are compatible and up to date after performing an update to a distribution.

It may be desirable to provide systems and methods for automatic upgrade and downgrade in package update operations in which an administrator or other user can initiate a distribution upgrade in which the installation logic can automatically detect and install the most recent version of constituent packages regardless of package name or version compatibilities across different package versions and between distribution version upgrades.

Embodiments of the present teachings relate to systems and methods for automatic upgrade and downgrade in package update operations. More particularly embodiments related to platforms and techniques for managing the upgrading of software distributions in which the package manager and or other logic can automatically sort identify track and install the most recent or most current version of a package that is being updated for instance as part of an overall software distribution upgrade. In aspects a package manager can generally track and manage the installation of one or more software packages and or updates to those packages which may be referred to together as a software package update and or package installation on a client host target physical virtual and or other machine. The local package manager can be configured to access the set of installed packages in a distribution or otherwise and their related attributes on the client or other machine and derive or generate an inventory of the distributions packages and or constituent files present on that associated machine. In embodiments the inventory of the set of installed packages can comprise a list tree and or other record of the software applications installed on a client machine in the managed network. In aspects the inventory of the set of installed packages for a client machine can be captured and reported by the local package manager installed on that machine and or by other local or remote software services or logic.

According to further regards the package manager and or other logic can receive a request to initiate a distribution upgrade to upgrade a software distribution installed on the client machine. In aspects the package manager and or other logic can identify one or more installed distributions such as operating system versions with related resources installed on the subject client and transmit or communicate the inventory of the set of installed packages including that distribution version to one or more than one remote management platforms. The one or more remote management platforms can be or include one or more package servers and or one or more repositories associated with the server s and or other platforms or logic. In embodiments the one or more package servers and or other logic can receive the inventory of the set of installed packages from the requesting machine and identify the highest version or other available upgrade for the distribution that the client or user is requesting.

In aspects after the installed and target distributions defining the distribution update are identified the package manager and or other logic can examine the entire set of packages in the target distribution to determine whether each package in the target corresponds to the most recent or otherwise most current version of that package on a package by package basis. The package manager and or other logic can in embodiments determine whether a subject package represents a most current version regardless of actual or nominal version number and or package name by accessing a version reconciliation table and or other record recording or encoding a most current or most recent version of distributions packages files and or other data objects or attributes associated with software distributions and or software packages. When a component package contained in the target distribution of the distribution upgrade represents the most current version the package manager and or other logic can install retain and or otherwise use that version. When a component package contained in the target distribution of the distribution upgrade does not represent the most current version the package manager and or other logic can identify and retrieve the correct most current version and install retain and or otherwise use that version for instance by accessing a software repository or other data store. In this manner the resulting distribution upgrade as adjusted for currency can be synchronized with and deploy the most current or most recent set of software packages for an entire distribution without a need for user intervention. Better consistency and reliability in distribution upgrade operations can in regards be achieved.

Reference will now be made in detail to exemplary embodiments of the present teachings which are illustrated in the accompanying drawings. Where possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

In aspects the installed distribution can be or include one or more software distributions consisting of a set of related packages for instance a distribution of an operating system such as the Linux operating system such as the Fedora distribution available from Red Hat Inc. and or other distributions such as the Ubuntu or other commercially or publicly available distributions. In aspects the installed distribution can represent distributions based on software other than operating systems such as a set of applications. In aspects the client can host a set of installed software packages can be or include packages comprising various types of applications files and or other resources such as for example messaging applications spreadsheet or modeling applications social networking applications word processing applications modeling applications media applications and or other applications software or utilities. In aspects the set of installed software packages can in aspects be associated with the installed distribution and or other distributions or installations and can include an operating system drivers and or components thereof. The set of installed packages can have an associated set of package attributes which records file names versions dates storage size software or hardware requirements an or other attributes or metadata related to the software packages and or their updates installed on client . In aspects a user may browse set of installed packages in list or other form via selector tool or other interface to check or otherwise select one or more packages to analyze manage and or identify on client .

In aspects and as also shown the package manager can communicate with a network interface configured to connect to one or more network such as the public Internet or other public or private networks. The package manager can thereby connect to one or more package servers and or associated one or more repositories hosting software packages including a set of distributions a set of stored software package updates and or other software or resources. The one or more package servers can in embodiments include logic to identify organize and distribute one or more distributions software packages and or other data files or information to the requesting client server virtual and or other machines.

In aspects the package manager can interact with the set of installed packages one or more package servers and or the associated one or more one or more repositories via network interface and one or more networks to identify and manage the installation and hosting of the installed distribution as well as the content of set of installed packages operating on client . The package manager of each client in the managed network can develop and inventory the installed distribution the set of installed packages and other resources of each machine and report that inventory data to the one or more package servers . In aspects the package manager can for example provide a user with a selector tool displayed via user interface such as a graphical user interface or others to select various test configuration inventory and or other management activities on the installed distribution the set of installed packages and or other files or resources. The selector tool can present options to select distributions and or packages for installation and or update and or to carry out various other installation options. The selector tool can likewise present options to initiate an inventory of one or more installed distribution the set of installed packages and or constituent files located on client and or other selectable options or parameters for managing the distribution and package complement of the client .

In aspects in general the package manager can access and extract information related to the installed distribution and or the set of installed packages to generate the inventory and transmit that inventory to the one or more package servers and or associated one or more repositories . The inventory of the distribution s set of installed packages and or related files extracted from each client can contain a list or other record or enumeration of the installed distribution the set of installed packages and or any files on the client such as the distribution and or package name or other identifier for each distribution package and or file installed present and or hosted on the client . In aspects the inventory can be arranged as a list database tree and or other record or data object. In aspects the inventory can in addition or instead incorporate some or all of the set of package attributes for each distribution package and or file identified in the inventory .

It may be noted that in embodiments the package manager can generate the inventory and associated data in an encoded format. In aspects package manager may for instance generate a string label value address and or other identifier which identifies or associates client by or with its hosted installed distribution set of installed packages and or associated files. For instance the package manager can generate the inventory or components thereof as the output of a hash function or hash operation performed on one or more attributes contained in set of package attributes for one or more packages of the client . For instance package manager can perform a hash function such as Secure Hash Algorithm 1 SHA1 or other hash function versions and or other encoding algorithms on attributes such as the package name package epoch package timestamp package size and or other data. In embodiments the inventory can also be stored or formatted in an unencoded format.

In embodiments and as also shown in the one or more package servers can receive a request from the client to initiate a distribution upgrade to update or upgrade an installed distribution . In connection with the request before during and or after initiation of the request the package manager of the client can transmit the inventory from the client to the one or more package servers and or one or more repositories . The package manager can subsequently communicate with the one or more package servers and or one or more repositories to identify analyze build and install a target distribution on the client subject to updates substitutions and or other modifications by package manager and or other logic to ensure that the most current version of each package in the target distribution is identified and installed to the client whether or not the most current version is reflected or incorporated in the target distribution as stored and delivered by the one or more package servers and or one or more repositories .

As illustrated for example in the package manager and or other logic can access retrieve analyze and install the distribution upgrade on the client and or other target machine or destination. According to aspects the distribution upgrade can comprise an installed distribution which may be already installed and hosted on client and or other machine. The distribution upgrade can update or upgrade the installed distribution to the target distribution . In aspects the target distribution can be an upgraded version of the distribution upgrade such as for example an upgrade from a Fedora desktop Linux installation version 12 to Fedora desktop Linux installation version 13.2. The target distribution in embodiments need not be a next sequential version of the installed distribution . For instance a given user can update or migrate from a Fedora desktop Linux installation version 10.2 to Fedora desktop Linux installation version 13.1. In aspects the installed distribution can comprise a set of installed distribution packages each of which can be identified by a package version ID . The package version ID can comprise a package name package version number a package version date reflecting the date of release or distribution of that package a package installation date reflecting the date of installation of that package on client and or other attributes or information.

The target distribution can comprise a set of target distribution packages also identified by a package version ID and or other attributes or information. In aspects in general for each package in set of installed distribution packages there may be one corresponding package in the set of target distribution packages although exceptions may occur. In aspects in general a user may wish to execute the distribution upgrade to move from the installed distribution to the target distribution and ultimately install and place the most current version of each package in the set of target distribution packages on client . In cases there may be distribution upgrade between one installed distribution and target distribution in which each package version reflected in the package version ID of the target distribution already contains the most current version of each target package. In aspects a distribution upgrade for which this is true need not undergo any further processing to retrieve the correct most current version of one or more packages although the current status of each of package of the set of target distribution packages may be verified as described herein.

In terms of processing the distribution upgrade in situations where one or more packages in the target distribution may not represent the most current version of packages in the installed distribution intended to be upgraded the package manager and or other logic can build maintain and or access a version reconciliation table to identify the currency of one or more packages in the target distribution . According to embodiments as shown the version reconciliation table can maintain a record of the package version ID for one or more packages that can be found in various distributions in one or more managed networks and or other installations. Along with the package version ID the version reconciliation table can store or record the most current version ID for each package recorded by package version ID . In embodiments the version reconciliation table can record different most current version IDs for different sub versions or series of versions of individual packages such as versions 4.1 4.2 4.3 as well as 5.1 5.2 5.3 and so forth. The most current version ID can be established and built for instance by different entities such as the one or more package servers any one or more independent software vendors ISVs and or other vendors or contributors the package manager of individual clients and or other entities services or logic.

As illustrated for example more particularly in package manager can accordingly receive a request to initiate a distribution upgrade from a installed distribution to a target distribution to begin distribution update processing. In embodiments the request to initiate the distribution upgrade can be received from a user of client through a dialog and or other user input and or can be initiated automatically such as via a software program or service. The request can specify the target distribution and or the target distribution can be identified by the package manager and or other logic such as by identifying the most current or highest version of the subject software distribution such as an operating system distribution. Once the installed distribution and target distribution are identified the package manager and or other logic can initiate the processing of the set of target distribution packages to determine the currency and or version status of each package in the set of target distribution packages . In aspects the package manager and or other logic can access the version reconciliation table to access the most current package version for each package version ID stored in the version reconciliation table for the target distribution . For packages whose version contained in the target distribution matches the most current package version upgrade operations can continue using the package contained in the target distribution . For packages whose version contained in the target distribution does not match the most current package version upgrade operations can apply additional decision logic to determine which package version to install. If the most current package version points to a package which is available in the set of package servers and or one or more software repositories the package manager and or other logic can retrieve that package or packages from those remote resources instead and or in replacement of the package in the target distribution and or already installed on client . In aspects the most current package version can identify a package by package version ID whose formal file name version and or other identifying attribute may or may not be the highest valued identifier but whose actual currency status is the most current highest or most recent version available to update the corresponding package in the installed distribution and or otherwise forms or constitutes a match as an upgrade to the subject package version ID . In aspects the most current package version can be identified by a release date rather than file or version identifier and or by other attributes. In aspects the most current package version can be identified by verification of the software vendor which supplies the subject package and or by the user or other sources. Each package whose most current version is located and or identified or verified as an upgrade match can be upgraded to that version. In embodiments the set of packages updated to most current version status from the target distribution can be recorded to a set of reconciled package updates . In aspects the package manager and or other logic can store the set of reconciled package updates for instance to the one or more package servers one or more repositories local store and or other databases or data stores. In embodiments when a further request to perform a distribution upgrade from installed distribution to target distribution has been received the requesting client or other entity can access the set of reconciled package updates to immediately identify the proper packages to be installed to achieve current or up to date status for an upgrade between those two distribution versions. In aspects the set of reconciled package updates can be made available or applied within a specified or predetermined window such as 1 day 7 days or other periods of time since the individual packages in the most current package version and or target distribution can be updated at any time by vendors or other contributors and the set of reconciled package updates will not represent the most current complement of package versions indefinitely. The set of reconciled package updates can also in embodiments store a record of substitutions made to achieve most current status for any one or more packages in the most current package version and or target distribution so that a user may revert to prior or less than most current versions if desired.

In the package manager and or other logic can identify the target distribution as part of the distribution upgrade to be performed on the client . In for each package in the target distribution the package manager and or other logic can determine whether the package version as identified in the package version ID matches the most current version as identified in the version reconciliation table and or other data or reference. In for all packages in the target distribution whose version matches the most current version the package manager and or other logic can install those packages to client . In for all packages in the target distribution whose version does not match the most current version the package manager and or other logic can identify retrieve and install most current version on the client . In aspects for packages requiring substitution with the target distribution the package manager and or other logic can locate and retrieve those packages from a local or remote data source such as the one or more package servers and or associated one or more software repositories and or other sources.

In the package manager and or other logic can aggregate all of the most current version packages for the target distribution and can store those packages and or their identifiers in the set of reconciled package updates along with other packages in the target distribution which have been determined to already represent the most current version . In aspects the set of reconciled package updates can for instance be stored to the one or more package servers the one or more repositories and or other local or remote storage or platforms. In the set of reconciled package updates can be distributed by the one or more package servers the one or more repositories and or other entities or logic in response to further distribution upgrade or update requests for instance by other clients or targets which request the pairwise upgrade from the same installed distribution and target distribution . It may be noted that in embodiments the later distribution of the set of reconciled package updates can be limited in time for instance to within a predetermined period of time due to the fact that the constituent packages in the most current package version and or target distribution can be continuously updated by vendors or other software contributors. In processing can return to a prior processing point jump to a further processing point or end.

The foregoing description is illustrative and variations in configuration and implementation may occur to persons skilled in the art. For example while embodiments have been described in which a unitary package manager operating on client is configured to control package management and client identification activity in embodiments multiple local and or remote applications or software can interact to control the downloading installation testing and other management of distribution updates and software packages.

For further example while embodiments have been described in which the analysis and management of the distribution upgrade is conducted by the local package manager on the client in embodiments the distribution upgrade can be managed by additional and or other logic. For instance other applications or services can host part or all of the logic used to check the target distribution against the version reconciliation table and or other references or data. Similarly while the logic which controls the distribution upgrade has been described as residing in the package manager on the client in embodiments the same or similar logic can be partly or entirely hosted in remote resources such as services and or remote platforms such as the one or more package servers and or the associated one or more repositories . For further example while embodiments have been described in which the target distribution and other data can be stored or accessed from a group of one or more package servers and or associated one or more repositories and other records in embodiments multiple groups or sets of package servers and or repositories can perform distribution storage and management package search and other activity. Other resources described as singular or integrated can in embodiments be plural or distributed and resources described as multiple or distributed can in embodiments be combined. The scope of the present teachings is accordingly intended to be limited only by the following claims.

