---

title: Massive structured data transfer optimizations for high-latency, low-reliability networks
abstract: Optimizations for data transmission may be provided. A portion of a data block may be read into a batch by a read thread on a first server. The batch may be passed to a transmission thread. The transmission thread may then transmit the first batch to a second server while the read thread asynchronously reads a second portion of the data block into another batch.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08677009&OS=08677009&RS=08677009
owner: Microsoft Corporation
number: 08677009
owner_city: Redmond
owner_country: US
publication_date: 20100122
---
Related U.S. patent application Ser. No. 12 692 321 filed on even date herewith entitled Moving Large Dynamic Datasets Via Incremental Change Synchronization and assigned to the assignee of the present application is hereby incorporated by reference.

Structured data transfer optimizations provide a process for transferring large amounts of data over an high latency and or unreliable network. In some situations interaction protocols may impose a large amount of overhead data as well as introduce transmission delays due to the need to complete multiple set of operations while waiting for confirmation over the network. For example the Messaging Application Programming Interface MAPI protocol allows a great degree of features and functionality in exchanging messages but can require a great deal of command and control information and multiple operations to be transmitted along with each data message. This often causes problems when users need to transfer large amounts of message data such as when a user s message files are being moved to a new server. Further transmitting this large amount of data through multiple operations may consume local resources inefficiently such as idling local resources while waiting for confirmation from the remote server.

Structured data transfer optimizations may be provided. This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter. Nor is this Summary intended to be used to limit the claimed subject matter s scope.

Optimizations for data transmission may be provided. A portion of a data block may be read into a batch by a read thread on a first server. The batch may be passed to a transmission thread. The transmission thread may then transmit the first batch to a second server while the read thread asynchronously reads a second portion of the data block into another batch.

Both the foregoing general description and the following detailed description provide examples and are explanatory only. Accordingly the foregoing general description and the following detailed description should not be considered to be restrictive. Further features or variations may be provided in addition to those set forth herein. For example embodiments may be directed to various feature combinations and sub combinations described in the detailed description.

The following detailed description refers to the accompanying drawings. Wherever possible the same reference numbers are used in the drawings and the following description to refer to the same or similar elements. While embodiments of the invention may be described modifications adaptations and other implementations are possible. For example substitutions additions or modifications may be made to the elements illustrated in the drawings and the methods described herein may be modified by substituting reordering or adding stages to the disclosed methods. Accordingly the following detailed description does not limit the invention. Instead the proper scope of the invention is defined by the appended claims.

Data transfer optimizations for high latency and or low reliability networks may be provided. Consistent with embodiments of the present invention the transfer of a large block of data such as a user s mailbox file comprising potentially hundreds and or thousands of messages may be accomplished via streaming the data from a source server to a destination server. On the source server the individual pieces of data e.g. messages may be read by a threaded process concatenated and converted into binary data batches. Each batch may be compressed using an algorithm such as the Lempel Ziv LZ DEFLATE e.g. gzip and or LZ Reneau LZR compression methods. The data may be streamed over a network such as the Internet to a receiving thread on the destination server by a transmission thread on the source server while the read thread asynchronously reads and prepares the next batch of data. A write thread on the destination server may asynchronously write the batch of data to disk and verify that the data was correctly received e.g. via a checksum based error detection algorithm .

Consistent with embodiments of the invention method may begin when an automated process detects that source datastore has reached a certain capacity level. That is source server may initiate the data transfer process when the amount of data on the datastore exceeds a threshold e.g. 90 of available storage space. A new server such as destination server may be set up to provide additional storage and one or more data blocks from source server may be identified for transfer to the new server. Data blocks may comprise raw data and or metadata such as folder handles version or tracking information author data etc.

From stage where computing device identified the data block to be transferred method may advance to stage where computing device may determine whether the data block is greater than a threshold size. For example a threshold value may determine whether a user s mailbox file is greater than a value such as 5 MB. The threshold value may be computed according to a batch size as described below the threshold may comprise the batch size itself or the batch size times a multiplier value such as 100. The data block may be compressed prior to evaluating its size.

If at stage computing device determines that the data block is greater than the threshold size method may advance to stage where computing device may divide the data block into batches. For example source server may convert a data block comprising a plurality of messages of a user s mailbox into a single block of binary data. This block of binary data may be compressed according to a known compression algorithm. The block may then be divided into batches such as 256 kB size chunks. Once computing device divides the data into batches in stage method may continue to stage where computing device may spawn a plurality of work threads. For example source server may spawn one or more read threads and one or more transmit threads. Similarly destination server may spawn one or more receive threads and one or more write threads.

After computing device spawns the work threads in stage or if the data is determined to be less than the threshold size in stage method may proceed to stage where computing device may read the data. For example data reader may comprise one or more read threads operative to read data out of the identified data block. Consistent with embodiments of the invention multiple read threads may be operative to associate their respectively read batches with an identifier that may provide ordering information. That is a batch comprising the start of the data block may be identified as the first batch even if it is not the first batch to be read transmitted received verified and or written.

Once computing device reads the data batch in stage method may advance to stage where computing device may determine whether the batch was read without error. For example a checksum may be calculated according to the data batch as saved in source datastore and according to the data batch as read into memory by data reader . If the checksums are not identical computing device may determine that an error occurred. Consistent with embodiments of the invention computing device may be operative to establish a synchronization point that encompasses several batches. For example every 100 messages of a mailbox file and or every 10 MB of data may comprise a synchronization point at which time computing device may perform error checking of some and or all of the data batches encompassed within that subset of the data block.

If an error is determined to have occurred computing device may return to stage and may re read the corrupted data batch and or all of the data batches within the data block encompassed by the synchronization point. Further consistent with embodiments of the invention computing device may be operative to save data batches in memory until the batches are verified as having been read transmitted received and or written without error.

Once computing device determines that the data batch has been read without error at stage method may advance to stage where computing device may queue the data batch for transmission. For example source server may provide the data batch to a transmission thread. If multiple read threads are reading and preparing data batches each batch may be placed in a buffer to await transmission. Consistent with embodiments of the invention each batch may be compressed e.g. using gzip prior to transmission.

After queuing the data batch at stage method may advance to stage where computing device may transmit the batch. For example a transmission thread on source server may send the data batch over network to destination server using a known protocol such as TCP IP. Data receiver may comprise one or more threads operative to receive the transmitted data batch and read the data into a memory associated with destination server .

Once the data batch has been transmitted at stage method may advance to stage where computing device may determine whether the data batch was received without error. For example source server may provide a checksum associated with the transmitted data batch. Destination server may compute a checksum for the received data batch before and or after writing it to target datastore . This verification of received data may also make use of synchronization points encompassing multiple batches as described above.

If computing device determines that the data was not received without error method may return to stage and or stage where computing device may re read and or re transmit the data batch or batches containing errors. For example destination server may determine that one batch out of 10 encompassed within a synchronization point experienced an error during transmission. Source server may have retained each batch in memory until verifying that the batch had been received without error and may simply re transmit the corrupted data batch. For another example source server may re read the corrupted batch and or all data batches encompassed by the synchronization point verify that the read occurred without error and retransmit the batch or batches to destination server .

Otherwise once the data batch has been verified as having been received without error method may advance to stage where computing device may determine whether additional data remains to be transferred. If so method may return to stage where reading of the data block may continue. Otherwise method may end at stage .

Consistent with embodiments of the invention the read operations of data reader the transmission and receiving operations of data transmitter and data receiver and the write operations of data writer may be performed asynchronously. That is using a multi threaded architecture each thread may perform its own task independently of the other threads. For example a read thread may read and queue three data batches while a transmission thread sends another batch to a receive thread on destination server . If the transmission thread is determined to be waiting on the read thread s to prepare new data batches for transmission. Source server may be operative to spawn additional read threads in order to prepare additional data batches simultaneously.

Rather than transferring data items individually and incurring the overhead of transmission receiving operations for each item multiple data items may be transferred using a single transmit receive operation per batch. Moving or copying a single message from a folder on one server to another may comprise a plurality of operations on both the source server and the destination server. For example the source server may perform operations such as identifying a folder for the message retrieving metadata e.g. author or version information associated with the folder obtaining a filehandle for the folder opening the filehandle for the folder retrieving metadata associated with the message creating a copy of the message and associated metadata in memory closing the filehandle and initiating the transmission of the message and metadata from the source server to the destination server. The destination server may need to perform a similar set of operations to write the message to its new location.

Consistent with embodiments of the invention each batch of data to be transferred from the source server to the destination server may be associated with a single set of operations on the server and a single set of operations on the destination. For example the data to be moved may comprise all messages in a user s mailbox. This data may be broken into batches associated with subfolders within the user s mailbox in order to reduce the overhead needed to maintain the mailbox structure. A data batch may therefore comprise as an example a single folder comprising 60 messages. Rather than the source server having to open a filehandle read and copy the associated metadata and individual message data transmit the data and associated metadata to the destination and close the filehandle for each message the server may perform the operations on the folder only once. That is the source server may get the folder name open a filehandle and retrieve the folder metadata once and use the same filehandle and metadata for each of the messages in the folder. This batch of data may then be transferred to the destination server which may make similar efficiency gains by obtaining a destination folder filehandle once and using it to write all of the messages in the batch. The destination server may then close its filehandle and report success to the source server. The source server may wait on this success message to close the source folder filehandle but may have been asynchronously reading and preparing the next batch of data for transmission while waiting.

An embodiment consistent with the invention may comprise a system for optimizing data transfer. The system may comprise a memory storage and a processing unit coupled to the memory storage. The processing unit may be operative to read a first portion of a data block into a first batch by a read thread pass the first batch to a transmission thread transmit the first batch to a destination server by the transmission thread and asynchronously read a second portion of the data block into a second batch by the read thread. The batch may be received by a receiving thread on a similar system comprising a destination server. A write thread of the destination server may be operative to store the received batch to the server s memory storage. The receiving system may be operative to notify the sending system of whether the batch was received without error. Pending this notification the sending system may be operative to persist each data batch in a volatile memory in case the batch needs to be retransmitted.

Another embodiment consistent with the invention may comprise a system for providing optimized data transfer. The system may comprise a memory storage and a processing unit coupled to the memory storage. The processing unit may be operative to select a block of data to be copied from the system to a second similar system divide the block of data into a plurality of batches read a first batch of the plurality of batches provide the first batch to a transmit thread of the first system transmit the first batch to a receive thread of the second system and asynchronously read a second batch of the plurality of batches. Each batch may comprise 256 kB of data and may be compressed prior to transmission.

Yet another embodiment consistent with the invention may comprise a system for providing optimized data transfer. The system may comprise a memory storage and a processing unit coupled to the memory storage. The processing unit may be operative to identify a plurality of source data on a first server determine whether the plurality of source data is greater than a threshold size and if so spawn at least one read thread and at least one transmit thread on the system. The processing unit may be further operative to divide the plurality of source data into a plurality of batches of substantially similar size read a first batch of the plurality of batches into the memory storage determine whether the first batch has been read without error transmit the first batch by the at least one transmit thread to a second system and read a second batch of the plurality of batches by the at least one read thread. The processing unit may be further operative to determine whether the first batch has been received without error by the second system and if so transmit the second batch by the at least one transmit thread to the second system.

With reference to a system consistent with an embodiment of the invention may include a computing device such as computing device . In a basic configuration computing device may include at least one processing unit and a system memory . Depending on the configuration and type of computing device system memory may comprise but is not limited to volatile e.g. random access memory RAM non volatile e.g. read only memory ROM flash memory or any combination. System memory may include operating system one or more programming modules such as data reader and or data transmitter . Operating system for example may be suitable for controlling computing device s operation. Furthermore embodiments of the invention may be practiced in conjunction with a graphics library other operating systems or any other application program and is not limited to any particular application or system. This basic configuration is illustrated in by those components within a dashed line .

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by a removable storage and a non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all computer storage media examples i.e memory storage. Computer storage media may include but is not limited to RAM ROM electrically erasable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as a keyboard a mouse a pen a sound input device a touch input device etc. Output device s such as a display speakers a printer etc. may also be included. The aforementioned devices are examples and others may be used.

Computing device may also contain a communication connection that may allow device to communicate with other computing devices such as over a network in a distributed computing environment for example an intranet or the Internet. Communication connection is one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may describe a signal that has one or more characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. The term computer readable media as used herein may include both storage media and communication media.

As stated above a number of program modules and data files may be stored in system memory including operating system . While executing on processing unit programming modules e.g. data reader may perform processes including for example one or more of method s stages as described above. The aforementioned process is an example and processing unit may perform other processes. Other programming modules that may be used in accordance with embodiments of the present invention may include electronic mail and contacts applications word processing applications spreadsheet applications database applications slide presentation applications drawing or computer aided application programs etc.

Generally consistent with embodiments of the invention program modules may include routines programs components data structures and other types of structures that may perform particular tasks or that may implement particular abstract data types. Moreover embodiments of the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Furthermore embodiments of the invention may be practiced in an electrical circuit comprising discrete electronic elements packaged or integrated electronic chips containing logic gates a circuit utilizing a microprocessor or on a single chip containing electronic elements or microprocessors. Embodiments of the invention may also be practiced using other technologies capable of performing logical operations such as for example AND OR and NOT including but not limited to mechanical optical fluidic and quantum technologies. In addition embodiments of the invention may be practiced within a general purpose computer or in any other circuits or systems.

Embodiments of the invention for example may be implemented as a computer process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage media readable by a computer system and encoding a computer program of instructions for executing a computer process. The computer program product may also be a propagated signal on a carrier readable by a computing system and encoding a computer program of instructions for executing a computer process. Accordingly the present invention may be embodied in hardware and or in software including firmware resident software micro code etc. . In other words embodiments of the present invention may take the form of a computer program product on a computer usable or computer readable storage medium having computer usable or computer readable program code embodied in the medium for use by or in connection with an instruction execution system. A computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific computer readable medium examples a non exhaustive list the computer readable medium may include the following an electrical connection having one or more wires a portable computer diskette a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber and a portable compact disc read only memory CD ROM . Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

Embodiments of the present invention for example are described above with reference to block diagrams and or operational illustrations of methods systems and computer program products according to embodiments of the invention. The functions acts noted in the blocks may occur out of the order as shown in any flowchart. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality acts involved.

While certain embodiments of the invention have been described other embodiments may exist. Furthermore although embodiments of the present invention have been described as being associated with data stored in memory and other storage mediums data can also be stored on or read from other types of computer readable media such as secondary storage devices like hard disks floppy disks or a CD ROM a carrier wave from the Internet or other forms of RAM or ROM. Further the disclosed methods stages may be modified in any manner including by reordering stages and or inserting or deleting stages without departing from the invention.

All rights including copyrights in the code included herein are vested in and the property of the Applicant. The Applicant retains and reserves all rights in the code included herein and grants permission to reproduce the material only in connection with reproduction of the granted patent and for no other purpose.

While the specification includes examples the invention s scope is indicated by the following claims. Furthermore while the specification has been described in language specific to structural features and or methodological acts the claims are not limited to the features or acts described above. Rather the specific features and acts described above are disclosed as example for embodiments of the invention.

