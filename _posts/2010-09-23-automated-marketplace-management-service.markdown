---

title: Automated marketplace management service
abstract: Techniques described herein provide a self-service, run-time configuration store for interaction between a business owner and a Web service. For instance, the techniques may receive entity-specific configuration data from a business entity, may validate and store the entity-specific configuration data in a central location, and may receive a service-specific schema definition from a Web service. In response to a command to push the validated configuration data, or in response to a request to pull the validated configuration data, the techniques serve the entity-specific configuration data to configure the Web service for use with customers of the business entity.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08620774&OS=08620774&RS=08620774
owner: Amazon Technologies, Inc.
number: 08620774
owner_city: Reno
owner_country: US
publication_date: 20100923
---
In the world of e commerce many different types of businesses and organizations perform a multitude of different tasks. For instance one business may sell products another business may sell services and yet another business may sell both products and services. Even still some business may manufacture products from raw materials or materials produced by others and thus may perform more purchasing and receiving type tasks than other businesses. Some may be brick and mortar businesses in that they have a physical presence such as a store while others may be primarily accessible by computers over a network such as the Internet. Additionally some organizations may merely provide services to their users such as educational institutions or the government with less emphasis on sales.

More specifically businesses and organizations may perform tasks such as collecting and organizing customer information receiving payments fulfilling orders shipping products or even receiving returned items. Fortunately there are services that may be able to help perform these tasks. While some services are operated by brick and mortar business as noted above others may come in the form of Web applications or Web services. For instance a Web service may provide payment collection services by facilitating credit card payments from customers of a business over the Web. In this way a business tasked with receiving payments for orders may rely on a Web service for this collection. Some services may perform many different tasks and yet some services may perform only one or two tasks. Other tasks that can be performed by services or Web services may include collecting customer information fulfilling orders organizing shipping and the like or any other task that a business or organization may perform.

In addition each business or organization may prefer to set their own policies for interaction with customers or users. For instance while one business may allow users to create unique user identifiers IDs based on any combination of letters and numbers another business may only allow users to register using an existing email address. In another example some businesses may operate in English only while other businesses may provide products and or services in many languages. In other words each business or organization may uniquely determine its own set of configuration rules for each task that it may perform.

Based on the particular needs of each business different entities may want to acquire the assistance of different services. As such each entity may interact with many different services in order to effectively operate for a variety of different reasons. For instance one entity may prefer to use a service for collecting payments and fulfilling orders e.g. a brick and mortar store another entity may prefer to utilize catalog services for displaying products to potential on line customers e.g. a Web store and yet another entity may prefer to only use a service for collecting and organizing user information e.g. an educational institution . Thus each entity may have a unique set of services that it has enlisted for performing tasks and a unique set of configurations for each service.

Further each service may have its own set of specific configuration rules for the businesses to follow. For instance a service for collecting and organizing user information may have a rule pertaining to the number of special characters per password. Alternatively a service for shipping products may allow shipment to any country in North America or Europe. As such each service may uniquely determine its own set of configuration rules for accessing and or utilizing its functionality.

However in order to maintain the unique configuration requirements of each business securely such as payment options or the like configuration data for each individual business may be stored locally by the services. Thus as commerce grows particularly e commerce and more businesses request the aid of service providers including Web services services may find it more and more difficult to maintain and manage configuration information. Moreover as businesses often change configuration policies rapidly request new services and grow the services they use may prefer to be more dynamic. As more businesses request more services existing services may find it ineffective to continue to store the configuration data locally. Unfortunately the current system may be too inflexible and decentralized to handle further growth.

This disclosure is directed in part to techniques for receiving and storing configuration information from a multitude of business entities. This disclosure is also related to serving the configuration information to service providers that provide services to the business entities for interacting with customers. By doing so the techniques allow for management of entity specific configuration data at a central location while still allowing different service providers to regulate their own respective configuration rules. For instance a central location may include at least one server that maintains configuration files from a business entity for an authentication service an address management service a payment options service or any other similar or different services that may be utilized by multiple different business entities for selling products and or providing services to customers.

As such when an owner or agent of a business entity requests to update or create its configuration information for particular services the owner or agent need only interact with the central location as opposed to each service provider individually. Further the central location server may provide the business entity with a Web service user interface UI for updating creating configuration files. The business entity may then operate this UI to provide the configuration file directly to the central location. Conversely the business entity may provide this configuration file to the central location in any other manner such as by writing code that effectively serves the configuration file to the central location. This entity specific configuration file may include contact configuration information payment configuration information catalog configuration information different configuration information or the like. Additionally each of a multitude of business owners may own a set of unique configuration files. As such each business utilizing the central location may have a unique configuration file that specifies different services and or different configurations for these services.

After the central location receives a unique configuration file from a business entity the central location may parse this file and serve the entity specific configuration information to the appropriate service providers. The central location may similarly send this information in response to receiving an update to the configuration file in response to customer actions or in response to a request for information from the service provider. In this way configuration information can be either pushed to or pulled from the service providers depending on the use case. For instance performance critical services such as search indexing or the like can listen to the central location for important changes to the searching configuration information of each business utilizing the search service. When a change occurs to one or more configuration files that affects the search service the search service may pull the updated configuration file s rather than waiting for the central location to push this information to the search service. As such the search service may update a search index prior to a customer attempting to search a business s catalog s .

In some instances the configuration files may contain time to live TTL data that can be used by the service providers for effectively caching the configuration information. For instance a particular configuration file may use a hypertext transfer protocol HTTP cache header to signify that the information within the file is only valid for one day. As such when the service provider accesses the configuration file the service provider may set a particular caching policy for that configuration information based on this period of time. For example if the TTL data signifies that the configuration file is only valid for one day the caching policy may request an updated configuration file each day. Thus the service provider may perform optimally by either using the cached information or by requesting updated information based on the caching policy. In one example TTL data may be set by the central location by business owners or dynamically based on prior use history e.g. based on how often business owners change the particular configuration file . In another example TTL data may be set to a default time such as five minutes. In yet another example a service provider may store a default TTL value in the central location in which case the central location may populate an HTTP caching header of an XML file with the stored TTL value. Additionally other caching technologies may be used as well.

In other instances the service providers may include a management client for interacting with the central location. The management client may facilitate interaction between the service providers and the central location such that each service provider can communicate with the central location regardless of the service provider s language. For instance one service provider may be written using Java while another service provider may be written using C . However since the management client can communicate with the central location independent of the service providers native language each service provider can access the central location and interpret the caching headers.

In addition the configuration files received by the central location can be validated prior to being stored in some instances. In some instances the configuration files comprise extensible markup language XML files in which case the central location may both syntactically and semantically validate the files using service provided XML schema definition XSD files and service provider call backs. For instance the central location may syntactically validate each XML file by checking the file against the received XSD file for each service provider. In this way the syntax of the entity specific configuration requirement can be approved. For instance if a business owner requires that payment be made by either VISA or Mastercard the central location can check the payment service s XSD file to ensure that VISA and Mastercard are valid options i.e. that they exist on the master list .

Additionally the central location may provide semantic validation of each XML file by calling back to the appropriate service provider to determine if the semantics of the configuration requirement is correct. For instance certain user IDs may not be approved by the contact service provider and the call back may request that the contact service determine whether an approved user ID of a customer located within a configuration file is allowed by the contact service provider.

With these techniques in one example a business owner may store a configuration file at a central location. The central location may validate the syntax of the configuration file and if necessary call back to the appropriate service provider to validate its semantics. Once validated the configuration file may be stored in the central location for serving to the appropriate service provider.

In one example the validated and stored configuration file may be pushed to the appropriate service provider immediately or in response to a notification of an updated configuration file. Alternatively or additionally the central location may store the configuration file until a pull request is made by a service provider. For instance a service provider may be listening for changes to a specific configuration file and may make a pull request for the information once it is updated or at pre specified time intervals. Based on a caching policy and or TTL data the service providers may dynamically update with a business entity s configuration requirements. The service providers may then perform their service to the appropriate customer of the business.

In some instances a business owner may choose to utilize all of the service providers available through the central location. However some business owners may choose to use only a subset of the available services. For example a brick and mortar store may choose to interact with the central location to take advantage of a payment service provider for accepting on line credit card payments. However they may handle their contacts shipping fulfillment of orders etc. on their own. As such they may only need to provide one configuration file because they are only setting configurations for a single service provider. In this way the central location may be externalized and accessible to any business. On the other hand a full service Web store or marketplace may choose to take advantage of each available service provider and as such may provide a configuration file or set configuration requirements through a user interface for each available service provider.

In other instances the central location may be accessible by Web clients over a public or private network. Additionally as noted above the central location may be accessible through a Web service interface over a public or private network. In these instances business owners may access Web clients provide configuration information independently or access the Web service interface over a network such as the Internet.

Furthermore the central location may be configured to codify a set of business rules into a configuration file on the behalf of a business owner. For instance a business owner may develop a set of marketplace specific rules for determining how to detect fraudulent orders. The central location may in turn create a configuration file for the business owner that codifies the fraud detection rules into executable configuration information such that a service may perform fraud detection for the business owner. As such each business owner may submit a set of business rules to the central location for codification into a configuration file.

The techniques described above and below may be implemented in a number of ways and in a number of contexts. Several example implementations and contexts are provided with reference to the following figures as described below in more detail. However the following implementations and contexts are but a few of many.

In one example the entity may be a business entity entering business specific configuration requirements over the network . For instance business specific configuration requirements may include but are not limited to customer contact information configurations payment requirement configurations fulfillment configurations shipping configurations feedback configurations other requirement configurations combinations of the foregoing or the like. In another example country specific configurations or seller of records specific configurations could be stored in the central location server along with or instead of business specific configurations. Additionally the central location server may provide the Web service interface for the business specific requirements to be entered. Alternatively the business entity may enter the business specific configuration information by any other means such as by providing a configuration file directly to the central location server or writing code to communicate directly with the central location server over the network .

When configuration requirements are entered through the central location provided Web service interface a tooling phase may take place in which the updating and storing of the configuration requirements are automated. During the tooling phase the configuration requirements may be compiled into a specific configuration file. This configuration file may then be served to the central location server by the Web service interface .

The example architecture can also be described in terms of two other phases the configuration phase and the run time phase . In one example during the configuration phase the central location server may receive validate and store the business specific configuration information entered by the entity . Additionally during the configuration phase the central location server may serve the configuration information to the appropriate service . In another example during the run time phase the services may receive the configuration information that applies to them and provide their respective service to the entity for use with a customer of the entity. For instance using the payment example from above if a business entity enters a payment configuration that only allows customers to pay with American Express AMEX the payment service will provide the AMEX only payment option to a customer of the business entity during the run time phase .

Thus in this example by separating the example architecture into a tooling phase a configuration phase and a run time phase the time sensitive run time phase can operate fluidly without maintaining the configuration information of every possible business entity for which it provides a service. Additionally by providing a configuration phase separate from the run time phase services may control when to update local storage including cache with business specific configuration information rather than having each configuration change unnecessarily pushed from the central location server .

While illustrates a single business entity the architecture and other architectures may employ any number of business entities . For instance and as noted above one business entity may employ many different services and thus may employ one configuration file for each service . However another business entity may simply employ the services of one service and thus may only provide one configuration file. Additionally while only one network is shown in any number of networks whether public or private can be used to implement this example architecture.

In one example the service may communicate with the central location server via an optional central location client . As noted above the central location client previously referred to as a management client may be provided to the service by the central location client however in other examples the central location client may be created by the service or by another entity. In yet another example the functionality of the central location client may be fully integrated within the service .

In one instance the central location server includes a representational state transfer REST interface. In this case the central location client may communicate with the central location server using the REST protocol and may make REST configuration requests based on logic implemented by the central location client . For example and as discussed above when a customer of a particular business entity attempts to purchase an item the payment service may need to determine the payment configuration for that particular business entity . As such based on logic implemented by the central location client the central location client may first check a local cache for the configuration information. If the information is not stored locally i.e. the information is not cached a REST configuration request may be sent to the central location server . In response to the request assuming the XML file from the particular business entity has been validated the central location server may serve the XML file to the service by serving the XML file to the central location client over the network . Alternatively when no central location client is used the XML file may be served directly to the service over the network . In either case once received the service may cache the XML file locally.

As described above the central location client may be configured to communicate with the central location server using the REST protocol and may be configured with logic for determining when to use cached configuration information and alternatively when to make REST requests to the central location server . Additionally the central location client may also be configured to listen to or poll the central location server for changes to specific XML files . For instance and as discussed above certain services may be performance critical and may request that configurations be received as soon as they are updated or at specific time intervals. One such example of a performance critical service may be a search service. As such the central location client may facilitate polling the central location server for a search service every hour for example only to determine whether a change has been made to an XML file corresponding to an entity that utilizes the search service . Other performance critical services may also poll the central location server as well either through logic implemented by the service or through logic implemented by the central location client . Another example of a performance critical service may be a free two day shipping FTDS service . In this example a flag may be set for each product offer made by each business entity that uses the FTDS service . As such the central location client used by the FTDS service or the FTDS service itself may want to poll the central location server every minute for example only to determine whether any XML files have been updated with that particular flag set. If so the FTDS service may be updated before a purchase is made so that the correct steps are taken to ensure that the customer receives their product within two days.

In one instance an XSD file may be provided to the central location server by a service communicating with the central location server for the service . The XSD file may be stored at the central location server for actively validating each XML file that is received. In this way a single centralized location may be responsible for managing the XSD files the XML files and the syntactic validation of each XML file . Additionally this may help ensure that each piece of configuration information that the central location server serves to each service is syntactically correct.

As noted above the architectures and transactions illustrated in are merely examples and other transactions and or configurations are possible. For example while one business entity and one service is shown any number of business entities and or services may be used. Additionally while the polling examples above described that a search service or an FTDS service may poll the central location server every hour and every day respectively any other pre determined or dynamically changing time intervals may be used.

As discussed above the business owners may be responsible for writing and serving configuration requirements in the management plane . In some instances these configuration requirements may be in the form of an XML file served to the central location server . Additionally semantic and or syntactic validation may be performed in this plane thus not interrupting the operation of the service providers in the run time plane . Alternatively internal protocols may be implemented to validate the XML files rather than relying on schema definitions and call backs.

In yet another example business owners may be responsible for updating sets of configuration files together in a single release rather than updating each configuration file individually. In this way release management may be tied to the central location and or may be managed during the management plane by the business owners . In one example of release management a business owner may create a set of configuration files for implementation together. Once created the central location may identify the set of configuration files as a release or version by time stamping or creating an instance ID i.e. tagging the configuration files for the set. Additionally each release may me chronologically numbered as in Version 1 through Version N for each business owner . Additionally business owners may have different releases for different service providers . In other words a single business owner may create a different set for each of a multitude of different service providers and as such may have multiple different Version 1s. 

Additionally the central location may tie each set of configurations to a particular user s Web session. In this way a user may be protected from configuration changes that may occur during a session. For example if shipping charges were to change internally a user who purchased an item while one version was being implemented would be unaffected by a new version with a higher shipping charge being implemented after the purchase.

Further release management may be useful when business owners want a set of configuration changes to occur at the same time. For example if a sale on a products is intended to only last for a particular window of time a first release may contain configurations for the sale followed by a subsequent release with configurations similar to that implemented prior to the sale. Additionally by querying the central location periodically for the most updated version and then requesting the appropriate version service providers may avoid communicating with one another with conflicting versions for the same business owner .

In other examples as part of the run time plane service providers may read configuration files from the central location server . As discussed above during the run time plane the business owners may serve XML files to the service providers based on a either a push or a pull command. Additionally in this plane the service providers may perform service side caching by implementing logic to appropriately cache configuration information that tends to be updated frequently. This may reduce the number of times the service providers may go off box. As discussed above the central location client may facilitate such service side caching.

In some instances the request may be a get command in which case the central location server may search the local cache to determine whether a local copy exists. On the other hand if the request is a put command the central location server may be configured to run syntactic validation and semantic validation . As discussed above syntactic validation may validate an XML file based on an XSD file stored locally within the central location server or alternatively provided by an XSD provider . Additionally semantic validation may validate an XML file based on a call back to a semantic validator e.g. the service owner . Finally the request may be stored in any number of persistence mechanisms. In one example two different persistence mechanisms may be used internal storage and backup storage however in other examples more or less persistence mechanisms may be used. In still another example backup storage may be an exact duplicate of internal storage . Although internal storage is shown outside of the central location server it may alternatively reside within the central location server . illustrates a detailed example of the run time plane as described above also with reference to . In this illustration and by way of example only a service owner connects to the HTTP proxy for performing get commands. In one instance the service owner may be an internal trusted service and may therefore only be able to read files from the central location server . As such the run time plane may offer much faster speeds than the management plane because no access controls are implemented and the service owner may not allow puts i.e. data writes . Additionally the request may cause the central location server to serve the configuration information to the service owner from the internal storage . As noted above with respect to the backup storage may be an exact duplicate of the internal storage . In this way if the data in either internal storage or backup storage is lost or corrupt disaster recovery may replicate the data in one from the other.

The memory may be used to store any number of functional components that are executable on the processor s as well as data and content items that are rendered by the computing device . Thus the memory may store an operating system XML files N provided by business owners XSD files N provided by services and several modules containing logic.

A service interface module located in memory and executable on the processor s may also facilitate communication between a central server and the services. The service interface module may also provide a REST interface such that the communication between the central server and the services follows the REST protocol. In some instances requests for configuration files may be made by the services through the REST interface .

The memory may further store a schema module to receive a schema definition file such as an XSD file from a service and or to provide a schema definition file to a service. As noted above the XSD file may define the syntactic requirements placed on business owner configuration files by the service.

The memory may also store a configuration storage module to facilitate storage and maintenance of configuration information. In one instance configuration storage module may also provide XML creation for instances when business owners do not provide an XML file. In these instances XML creation may create an XML file containing the configuration information input by the business owners into a Web service interface.

The computing device in one configuration may also include a configuration providing module stored in the memory and executed on the processor s responsible for serving the configuration information to the services when needed. In some instances the configuration information may be sent directly to the services in the form of a push command without the service requesting the information or in response to a notification of an updated configuration file. Alternatively in other instances the configuration information is served to the service in the form a pull command . In this instance the service will make a request i.e. the pull and the configuration providing module will serve the configuration information responsive to the request.

Additionally the memory may store a validation module to facilitate validating the XML files provided by the business owners. In one instance the validation module may perform syntactic validation and in another instance it may perform semantic validation as described with reference to . In yet another instance the validation module may perform both syntactic validation and semantic validation on one XML file.

Various instructions methods and techniques described herein may be considered in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. for performing particular tasks or implementing particular abstract data types. These program modules and the like may be executed as native code or may be downloaded and executed such as in a virtual machine or other just in time compilation execution environment. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. An implementation of these modules and techniques may be stored on some form of computer readable storage media.

The process includes a service provider defining a configuration schema definition based on a particular service provided by the service provider at . At the service provider stores the configuration schema definition in memory. In some instances as noted above this schema definition may be in the form of an XSD file. At the service provider serves the configuration file to the centralized configuration store . As noted above the service provider may utilize a management client to communicate with and send the schema file to the centralized configuration store . At the centralized configuration store validates a configuration file from a business owner. In one instance the validation is based at least in part on the schema definition stored at the centralized configuration store . In yet another instance the validation is based at least in part on a call back from the centralized configuration store to the service provider that provided the schema definition file.

At the centralized configuration store may determine whether a push or pull command is to be performed. If the central configuration store is to perform a push at the service provider may receive a notification of an updated configuration file from a business entity at . In one instance the configuration file may be an XML file. At the service provider may request an update of a configuration file from the centralized configuration store based at least in part on the notification of the updated configuration file. On the other hand the service provider may request an update of a configuration file from the centralized configuration store at independent of the notification received at the centralized configuration store . In this instance the centralized configuration store may wait to serve the configuration file until it receives the request from the service provider . Additionally the timing of the request for the updated configuration file may be based on polling the centralized configuration store or based on caching logic and TTL data as discussed above. At the service provider may receive the configuration file from the centralized configuration store . At the service provider may cache the configuration file locally.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the claims.

