---

title: Determining differences in an event-driven application accessed in different client-tier environments
abstract: In one embodiment, a method includes dynamically crawling an event-driven application in a plurality of client-tier environments; for each of the client-tier environments, generating a behavioral model of the event-driven application based on the dynamic crawling; for each of the behavioral models, determining one or more pairwise equivalences with respect to one or more other ones of the behavioral models; and, for each of the client-tier environments, determining one or more differences in an end-user experience of the event-driven application in the client-tier environment with respect to one or more other end-user experiences of the event-driven application in one or more other ones of the client-tier environments.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09032067&OS=09032067&RS=09032067
owner: Fujitsu Limited
number: 09032067
owner_city: Kawasaki-shi
owner_country: JP
publication_date: 20100312
---
The present disclosure relates generally to determining differences in an event driven application accessed in different client tier environments.

Event driven applications typically may be accessed in different client tier environments. However in many cases a first client tier environment may provide a different end user experience of the event driven application than a second client tier environment.

A user may interact with a client to access one or more event driven applications . As an example and not by way of limitation a user may include a person a program a device an automation any other suitable entity or a combination of two or more of these.

A client may send and receive signals to and from one or more servers in order to allow a user to access one or more event driven applications . As an example and not by way of limitation a client may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. A client may send and receive any suitable type of signals for accessing an event driven application . For example and not by way of limitation a client may send and receive hypertext transfer protocol HTTP signals file transfer protocol FTP signals or any other suitable signals.

A client may further include an I O interface not shown that enables a user to interact with a client . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touchscreen trackball video camera another suitable I O device or a combination of two or more of these. An I O interface of a client may provide a user with a viewable display of an event driven application . As an example and not by way of limitation an I O device may be a monitor that provides a viewable display to a user by displaying an event driven application on the monitor. An I O interface of a client may further allow a user to interact with an event driven application by allowing a user to perform one or more events . An event may include any suitable type of user initiated event. As an example and not by way of limitation an event may include clicking a mouse moving a mouse pressing one or more keys on a keypad touching a touchscreen moving a trackball speaking into a microphone any other event that may be initiated by a user or any combination of two or more of these.

A client may further include one or more client tier environments not shown . A client tier environment of a client may allow a user to access one or more event driven applications . As an example and not by way of limitation a client tier environment may include an operating system OS installed on a client a web browser installed on a client one or more settings of a client e.g. such as the screen resolution of a monitor of a client one or more variations in a web browser installed on a client e.g. the version and configuration of the web browser including one or more web browser plug ins and one or more web browser settings or any combination of two or more of these.

An OS installed on a client may run one or more web browsers installed on a client . As an example and not by way of limitation the OS may include a Windows 95 98 NT XPNista Mobile OS an OS X OS a UNIX OS a LINUX OS or any other suitable OS. The web browser installed on a client may allow a user to access event driven applications . For example and not by way of limitation the web browser may include Microsoft Internet Explorer Mozilla Firefox Google Chrome Opera or any other suitable web browser. In particular embodiments the web browser may initiate the transmittal of one or more server request signals from a client to one or more servers over a network . A server request signal may be based on one or more events from a user or web flow from an event driven application . As an example and not by way of limitation a user may enter an address for an event driven application e.g. such as a uniform resource locator URL or a uniform resource indicator URI into an address box of the web browser and the web browser may send a server request signal to a server to request content from an event driven application . In particular embodiments the server may respond to the server request signal by transmitting a server response signal including content corresponding to an event driven application to the web browser in a client . After receiving the content the web browser may render the content into a viewable form so that it may be displayed to a user through the I O interface of a client .

An event driven application may provide one more media objects for a user to interact with. As an example and not by way of limitation an event driven application may include a web application a web 2.0 application an AJAX based web application or any other suitable application that provides media objects. In particular embodiments an event driven application may be run on a server and interacted with by a user through a browser on a client . For example and not by way of limitation content for an event driven application may be sent to the web browser in a programming language and the web browser may render the programming language viewable on a display so that a user may interact with the event driven application . In particular embodiments an event driven application may include one or more contents that may be executed by the web browser.

The media objects provided by an event driven application may be changed e.g. such as by adding removing or modifying the media objects by one or more events or web flow from the event driven application . As an example and not by way of limitation a user may enter data using a keyboard causing the event driven application to change the media objects provided to the user . In particular embodiments when an event driven application changes the media objects the altered media objects may be provided to a user as a new a screen or state . An event driven application may include any suitable programming language or combination of programming languages. In particular embodiments an event driven application may include source code or object code. In particular embodiments an event driven application may include a higher level programming language such as for example C Perl or a suitable extension thereof. In particular embodiments an event driven application may include a lower level programming language such as assembly language or machine code . In particular embodiments an event driven application may include JAVA. In particular embodiments an event driven application may include Hyper Text Markup Language HTML Extensible Markup Language XML Javascript JS Java Server Pages JSP Hypertext Preprocessor PHP or other suitable markup language.

A network connects one or more clients to one or more servers transporting one or more signals to and from the one or more clients and the one or more servers . A network may refer to any interconnecting system capable of transmitting audio video signals data messages or any combination of the preceding. A network may comprise all or a portion of a public switched telephone network PSTN a public or private data network a local area network LAN a metropolitan area network MAN a wide area network WAN a local regional or global communication or computer network such as the Internet a wireline or wireless network an enterprise intranet other suitable communication link or any combination of the preceding. A network may transport any suitable signal for accessing an event driven application on one or more servers . For example and not by way of limitation a network may transport HTTP signals FTP signals or any other suitable signals.

A server may store one or more event driven applications and may further send and receive signals to and from one or more clients in order to allow a user to access one or more event driven applications stored in the server . As example and not by way of limitation a server may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. In particular embodiments a server may receive one or more server request signals from a web browser installed on a client . In particular embodiments a server may respond to a server request signal by transmitting a server response signal that includes content corresponding to an event driven application to a web browser in a client . A server may send and receive any suitable signals in order to allow a client to access an event driven application . For example and not by way of limitation a server may send and receive HTTP signals FTP signals or any other suitable signals.

In particular embodiments an event driven application may be accessed in different client tier environments. As example and not by way of limitation an event driven application may be accessed in a first client tier environment that includes a Microsoft Internet Explorer web browser and the same event driven application may also be accessed in a second client tier environment that includes a Mozilla Firefox web browser. In particular embodiments although the event driven application may be accessed in both client tier environments an end user experience of the event driven application may be different on each client tier environment. In particular embodiments such differences may be caused by an OS installed on a client a browser installed on a client any other numerous differences in the client tier environments or any combination of two or more of these.

Unfortunately these different end user experiences may cause problems because an event driven application may modify the content provided based on one or more events that occur. As an example and not by way of limitation an event driven application may modify its content based on a user scrolling over certain content in the event driven application . However if the content is displayed differently in certain client tier environments or not displayed at all an event may never occur and the content may not be modified causing further differences in the end user experience As such even minor differences in an end user experience may turn into much bigger differences.

An event driven application of may be similar to an event driven application of . As such an event driven application may provide one more media objects for a user to interact with.

A crawler may dynamically crawl an event driven application . In particular embodiments the dynamic crawl of a crawler may allow a crawler to dynamically analyze an event driven application in order to generate a behavioral model . As example and not by way of limitation a crawler may include Crawljax WebCrawler Methabot Googlebot or any other suitable crawler. In particular embodiments a crawler may exercise code on a client e.g. such as client of in order to detect and execute one or more doorways e.g. clickables of an event driven application . As such in particular embodiments a crawler may dynamically analyze one or more screens of an event driven application that are rendered by the web browser on a client. Furthermore a crawler may analyze how the one or more executed doorways effect the one or more rendered screens of an event driven application . In particular embodiments this may involve replicating or firing one or more events such as events of e.g. clicking on a mouse typing on a keyboard in order to analyze how such events effect the dynamic DOM tree in a browser before and after the event is replicated. In particular embodiments by analyzing and storing the effects that occur before and after each of the replicated events a crawler may incrementally build a behavioral model for an event driven application .

A client tier environment may allow one or more event driven applications to be accessed at a client. In particular embodiments a client tier environment may be similar to a client tier environment of . As an example and not by way of limitation a client tier environment may include an operating system OS installed on a client a web browser installed on a client one or more settings of a client e.g. such as the screen resolution of a monitor of a client one or more variations in the web browser installed on a client e.g. the version and configuration of the web browser including one or more web browser plug ins and one or more web browser settings or any combination of two or more of these.

According to the illustrated embodiment system includes three client tier environments . In particular embodiments each of the client tier environments may be different. For example and not by way of limitation a client tier environment may include a Windows Vista OS and a Google Chrome web browser a client tier environment may include a Windows XP OS a Microsoft Internet Explorer web browser and a particular screen resolution and a client tier environment may include a UNIX OS a Mozilla Firefox web browser and one or more plug ins for the web browser. Although system illustrates three client tier environments system may include more than three client tier environments or less than three client tier environments . As an example and not by way of limitation system may include two or more client tier environments .

According to the illustrated embodiment a crawler may dynamically crawl an event driven application in each of the client tier environments in order to analyze the event driven application . Accordingly a crawler may generate a behavioral model for each client tier environment . In particular embodiments the crawling conducted by a crawler may be performed in an identical fashion for each client tier environment . As an example and not by way of limitation a crawler may replicate the same events and do so in the same order while crawling the event driven application on each client tier environment . As such the only differences in the behavioral models if there are any at all may be caused by the different client tier environments . In particular embodiments the crawling conducted by a crawler may be automatic. As an example and not by way of limitation a crawler may be initiated for a particular event driven application in a particular client tier environment and the crawler may perform the entire crawl including the analysis and behavioral model generation for that particular event driven application in the particular client tier environment without any further prompting.

A behavioral model may be generated based on the analysis conducted by a crawler on an event driven application . According to the illustrated embodiment system includes three behavioral models one behavioral model for each client tier environment . Behavioral models are further described in .

In particular embodiments a behavioral model may be generated by dynamically crawling an event driven application in a client tier environment as is discussed in . For example a behavioral model may be generated by a crawler such as a crawler of .

In particular embodiments a behavioral model may be a finite state machine FSM with partial transition functions. As an example and not by way of limitation a behavioral model may include each of the states of the event driven application and each of the transitions that caused each of the states. In particular embodiments a state of a behavioral model may refer to a screen observed by a user when the event driven application is accessed in a particular client tier environment. In particular embodiments a transition may refer to an event e.g. clicking a mouse moving a mouse pressing one or more keys on a keypad that caused the observed screen or state to change. A behavioral model may include a state graph and a set of one more screen models for one more states of the state graph .

A state graph may include a graphical representation of the finite state machine with the states represented as unnamed vertices. In particular embodiments a state graph captures the set of traces e.g. alternating sequences of events and screen transitions caused by the events without reference to the details of each state. In particular embodiments a state graph may be a labeled directed graph with a special designed start vertex. It may be denoted by a 5 tuple G V E o L where V is the set of vertices E is the set of directed edges o is the special designated start vertex E is an alphabet of labels and L E is a labeling function that assigns a label from E to each edge. According to the illustrated embodiment each node in a state graph of a behavioral model may represent a state of a screen of the event driven application. Furthermore each edge in a state graph of a behavioral model may represent an event e.g. such as a user initiated interaction with an event driven application causing a transition from one of the screens to another. In particular embodiments each edge of a state graph of a behavioral model may be labeled not shown with the event that caused the transition between states.

A screen model may include a programmatic representation of each state screen . In particular embodiments a screen model captures details of each screen without any knowledge of transitions leading up to or out of the screen. In particular embodiments a screen model may be a rooted directed labeled tree. It may be denoted by a 5 tuple T Q D r where Q is the set of vertices D is the set of directed edges r Q is the root vertex is a finite set of labels and Q is a labeling function that assigns a label from to each vertex in Q. In particular embodiments a screen model may be an abstracted version of the DOM tree of a given state screen displayed on a web browser. Although behavioral model illustrates a single screen model a behavioral model may include any suitable number of screen models . As an example and not by way of limitation a behavioral model may include a screen model for every state screen of a state graph of a behavioral model .

The method begins at step . At step a first behavioral model behavioral model M and a second behavioral model behavioral model G are read. At step a first state graph state graph G is extracted from behavioral model G. At step a second state graph state graph G is extracted from behavioral model G. At step state graph G and state graph G are compared at a trace level. A trace level comparison may determine one or more pairwise equivalences between state graphs G and G. In particular embodiments determining one or more pairwise equivalences between state graphs G and G may include determining whether any edges e.g. events that cause a transition between states or screens of state graph G are isomorphic with any edges of state graph G and whether any nodes e.g. representing states or screens of state graph G are isomorphic with any nodes of state graph G. In particular embodiments the comparison may start from the root node of each state graph and traverse through a depth first search. In particular embodiments determining whether any edges are isomophoric may include retrieving the DOM element and the event from each corresponding node and attempting to reconcile them.

In particular embodiments the edges may be considered isomorphic if the edit distance between the two edges is lower than a similarity threshold. In particular embodiments the edit distance may be based on event types tag names attributes and their values Xpath positions of the two edges on their corresponding DOM trees ID attributes or any combination of two or more of these. In particular embodiments the nodes may be considered isomorphic if and only if each of the previous nodes successive nodes and edges are isomorphic. In particular embodiments the trace level comparison may also determine which states of behavioral model M may be considered to be matching particular states of behavioral model M.

At step if any edges or nodes of state graphs G and G were determined to not be isomorphic the trace level differences of the state graphs G and G are outputted at step . In particular embodiments the output may include a list of all the edges and the nodes that were determined to not be isomorphic. However at step if all of the edges and nodes of state graphs G and G were determined to be isomorphic no trace level differences may be outputted and the method moves to step .

At step a vertex vertex v is picked from state graph G. At step a screen model screen model T corresponding to the state or screen represented by vertex v is retrieved from the behavioral model M. At step it is determined if the trace level comparison between state graphs G and G step produced a matching node v in state graph G corresponding to vertex v in state graph G. If not the algorithm moves to step . Otherwise at step a screen model screen model T corresponding to the state or screen represented by vertex v is retrieved from the behavioral model M. In particular embodiments vertex v and vertex v may be determined as matching during the trace level comparison discussed above in step . At step screen model T and screen model T are compared at a screen level. A screen level comparison may determine one or pairwise equivalences between the behavioral models M and M. In particular embodiments determining one or more pairwise equivalences between the behavioral models M and M may include determining whether screen model T and screen model T are isomorphic. In particular embodiments the screen level comparison may include retrieving the DOM tree and Javascript state variables for both screen model T and screen model T and attempting to reconcile them. In particular embodiments screen model T and screen model T may be determined to be isomorphic by checking the equivalence between the DOM trees corresponding to screen model T and screen model T and matching the name value pairs of Javascript variables of screen model T and screen model T.

At step if screen model T and screen model T were determined to not be isomorphic the screen level differences for the screen model T and the screen model T are outputted at step . In particular embodiments outputting the screen level differences may include determining whether the differences may be irrelevant. In particular embodiments an irrelevant difference may not be outputted. In particular embodiments an irrelevant difference may result from certain web browsers rendering DOM changes differently than other web browsers. As an example and not by way of limitation certain stylistic differences between various web browsers e.g. case sensitivity white space attribute order and node text values may be determined to be an irrelevant difference and may not be outputted. After the state level differences are outputted the method moves to step .

Furthermore if at step screen model T and screen model T were determined to be isomorphic the method also moves to step . At step a determination may be made regarding whether there are any more vertices in state graph G or in state graph G . If there are additional vertices steps through are repeated for each additional vertex in state graph G or in state graph G . If there are no additional vertices the method ends at step .

In particular embodiments the method may be repeated for each pairing of behavioral models. As an example and not by way of limitation if three behavioral models are generated by a crawler for an event driven application in three different client tier environments the method may be repeated for each pairing of the three behavioral models. As such each trace level difference or incompatibility and each screen level difference between each of the behavioral models may be determined and outputted. Furthermore for each of the behavioral models one or more pairwise equivalences with respect to one or more other ones of the behavioral models may be determined. In particular embodiments the outputting of the trace level differences and the screen level differences may include sorting classifying and or filtering the differences before outputting them.

In particular embodiments algorithm implements a trace level equivalence check on the state graph G of the first behavioral model and the state graph G of the second behavioral model as an isomorphism check. The function OUT v returns the set of outgoing edges of vertex v LABEL e returns the label of edge e and the function LOOKUP l edgeSet returns an edge having the label from the set of edges edgeSet or null if none exists. DEST e returns the destination vertex of edge e. It may be assumed that the match field of each edge visited field of each vertex in both Gand G is initialized to false and the match field of each vertex in Gis initialized to null. In particular embodiments algorithm is a simple variant of depth first search and linear time in the sizes of G G e.g. O V V E E .

In particular embodiments G V E o L and G V E o L may be trace equivalent if and only there exists a bijective mapping function M V V Vsuch that the following are true . . 1 such that and 2 3 

In particular embodiments algorithm may determine that Gand Gare equivalent if and only if they satisfy equations 1 2 and 3 above.

In the case where algorithm determines that Gis not equivalent to G the algorithm may determine that one or more sub graphs implied by the partial match produced by the algorithm e.g. the sub graph implied by all nodes and edges that were matched to a counter part in the other graph are trace equivalent based on equations 1 2 and 3 . For example and not by way of limitation the subgraph 

G V E o L of G where E e E e.match true V v V v.match null L E E and L e L e e E . and a similarly defined sub graph for G of G V E o L may be determined to be trace equivalent per equations 1 2 and 3 .

Further in the case where Gis not equivalent to G algorithm not only produces a trace equivalent partial match but actually a maximal partial match e.g. there do not exist a pair of edges eand e where e Ebut e E and e Ebut e E which can be added to G and G respectively along with their source and sink nodes such that the resulting graphs may also be trace equivalent.

In particular embodiments although algorithm computes maximal matches the match need not be the maximum match possible. In particular embodiments a variant of algorithm may back track on matching decisions made in order to compute the absolute maximum match.

The function STATEGRAPH returns the underlying state graph for comparison through the Trace Equivalence Check shown in . traceMatch is an object that receives the result of algorithm of including the partial match in case where Gis not equivalent to G. OTDextracts and presents the user with the trace level differences. Similarly at the screen level the function GETSCREEN extracts and returns the detailed screen representation of a vertex v of a state graph from its corresponding behavioral model to be used for the equivalence check by algorithm . scrnMatch is the object receiving the result of this comparison and the function OSDextract and presents these screen level differences to the user.

In particular embodiments since the screen model is represented as a rooted directed labeled tree a screen model Tof a first behavioral model and a screen model Tof a second behavioral model may be compared based on the isomorphism of the respective trees. Thus in particular embodiments screen models T Q D r and T Q D r may be determined to be equivalent e.g. T T if and only if there exists a bijective mapping function N Q Qsuch that 4 5 6 

Since screen models are rooted labeled trees screen matching the function call SEC T T in algorithm may be performed in linear time by a simple variant of the tree isomorphism algorithm. In particular embodiments if two screens are determined to not be matching algorithm may utilize snapshots of the screens in outputting the differences to a user. As an example and not by way of limitation during the dynamic crawling of an event driven application a snapshot may be made of each screen change in the web browser. In particular embodiments when a screen mismatch is found by algorithm the snapshots corresponding to each of the mismatched screens may be used to create a visualization report that is outputted to a user. In particular embodiments the visualization report may include the transition paths that lead to the mismatched screens and may also include the DOM trees corresponding to the mismatched screens. In particular embodiments the differences between the screens may be highlighted in the DOM trees provided to the user.

This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system taking any suitable physical form. As example and not by way of limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these Where appropriate computer system may include one or more computer systems be unitary or distributed span multiple locations span multiple machines or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more computer systems may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation one or more computer systems may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein where appropriate.

In particular embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In particular embodiments processor may include one or more internal caches for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. As an example and not by way of limitation processor may include one or more instruction caches one or more data caches and one or more translation lookaside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. As an example and not by way of limitation computer system may load instructions from storage or another source such as for example another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In particular embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate Where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. The present disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. As an example and not by way of limitation storage may include an HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to computer system where appropriate. In particular embodiments storage is non volatile solid state memory. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Where appropriate storage may include one or more storages . Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. Computer system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and computer system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touchscreen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between computer system and one or more other computer systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation computer system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example computer system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Computer system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In particular embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCI X bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

Herein reference to a computer readable storage medium encompasses one or more tangible computer readable storage media possessing structure. As an example and not by way of limitation a computer readable storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk an HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a SECURE DIGITAL card a SECURE DIGITAL drive or another suitable computer readable storage medium or a combination of two or more of these where appropriate. Herein reference to a computer readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. 101. Herein reference to a computer readable storage medium excludes transitory forms of signal transmission such as a propagating electrical or electromagnetic signal per se to the extent that they are not eligible for patent protection under 35 U.S.C. 101.

This disclosure contemplates one or more computer readable storage media implementing any suitable storage. In particular embodiments a computer readable storage medium implements one or more portions of processor such as for example one or more internal registers or caches one or more portions of memory one or more portions of storage or a combination of these where appropriate. In particular embodiments a computer readable storage medium implements RAM or ROM. In particular embodiments a computer readable storage medium implements volatile or persistent memory. In particular embodiments one or more computer readable storage media embody software. Herein reference to software may encompass one or more applications bytecode one or more computer programs one or more executables one or more instructions logic machine code one or more scripts or source code and vice versa where appropriate. In particular embodiments software includes one or more application programming interfaces APIs . This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments software is expressed as source code or object code. In particular embodiments software is expressed in a higher level programming language such as for example C Perl or a suitable extension thereof. In particular embodiments software is expressed in a lower level programming language such as assembly language or machine code . In particular embodiments software is expressed in JAVA. In particular embodiments software is expressed in Hyper Text Markup Language HTML Extensible Markup Language XML Javascript JS Java Server Pages JSP Hypertext Preprocessor PHP or other suitable markup language.

The present disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly where appropriate the appended claims encompass all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend.

