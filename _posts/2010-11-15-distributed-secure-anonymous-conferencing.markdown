---

title: Distributed secure anonymous conferencing
abstract: A communications manager of an enterprise receives an add-conference request to host a conference by the enterprise from an organizer client, wherein the conference to enable an anonymous user that does not have enterprise credentials to join the conference. The communications manager sends an add-conference response to the organizer client indicating that the conference is organized.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08346667&OS=08346667&RS=08346667
owner: Microsoft Corporation
number: 08346667
owner_city: Redmond
owner_country: US
publication_date: 20101115
---
This application is a continuation application and claims priority to U.S. patent application Ser. No. 11 859 737 filed Sep. 21 2007 entitled DISTRIBUTED SECURE ANONYMOUS CONFERENCING. which application is incorporated herein by reference in its entirety.

An enterprise network allows an organization s members to collaborate and share data. Enterprise users may conduct conferences such as Audio Video A V conferencing instant messaging and data sharing conferences while connected to their enterprise network. However people without enterprise credentials cannot participate in such conferences hosted by the enterprise network.

The following presents a simplified summary of the disclosure in order to provide a basic understanding to the reader. This summary is not an extensive overview of the disclosure and it does not identify key critical elements of the invention or delineate the scope of the invention. Its sole purpose is to present some concepts disclosed herein in a simplified form as a prelude to the more detailed description that is presented later.

Embodiments of the invention are directed to distributed secure anonymous conferences. Embodiments herein provide a mechanism by which anonymous conferences hosted by an enterprise are organized. An anonymous conference includes a conference having at least one anonymous user. Anonymous users include conference attendees without enterprise credentials that may join a conference hosted by the enterprise.

Many of the attendant features will be more readily appreciated as the same become better understood by reference to the following detailed description considered in connection with the accompanying drawings.

The detailed description provided below in connection with the appended drawings is intended as a description of the present examples and is not intended to represent the only forms in which the present examples may be constructed or utilized. The description sets forth the functions of the examples and the sequence of steps for constructing and operating the examples. However the same or equivalent functions and sequences may be accomplished by different examples.

Embodiments of communications manager allow enterprise users to securely conduct A V conferencing instant messaging and data sharing conferences while being connected to their internal enterprise network or from the Internet without a Virtual Private Network VPN . These enterprise users can organize and or join conferences using their enterprise credentials. Enterprise credentials include means to access the enterprise network such as username password a smartcard and the like.

In addition communications manager also enables anonymous conferencing. Anonymous conferencing is a scenario where enterprise users invite people from outside the organization to take part in a meeting. For example a sales team might want to conduct a live online product demo to people outside the company. Anonymous users is a term for people outside the company that lack any established enterprise credentials. Using embodiments herein such anonymous users have the ability to participate in the meeting not just as attendees but also as presenters in the meeting. These anonymous users need to securely participate in a meeting hosted within the enterprise network of the meeting organizer and typically connect from the Internet. In embodiments herein the organizer provides anonymous users with a conference identifier ID and a conference key e.g. a cryptographically secure string of data to authenticate and authorize the anonymous users admission to a conference.

As used herein a conference may include any communication between two or more people. Examples include A V conferencing Instant Messaging IM and the like. It will be appreciated that A V conferencing includes audio only conferences conferences with audio and video or a mix of audio and video where some conference attendees have audio only while other attendees have audio and video.

Turning to another embodiment of enterprise is shown. In one embodiment the architecture in includes the Microsoft Office Communications Server 2007 Enterprise Edition. In enterprise includes one or more edge servers . Edge server handles traffic across the enterprise firewall such as Session Initiation Protocol SIP traffic to establish and validate connections. In one embodiment edge server does not authenticate users authentication may be conducted by director or a Front End FE server such as FE .

Edge server is connected to director . Director is the first authentication server within enterprise and acts as a line of defense in safeguarding internal servers from attacks such as by anonymous user .

Director is connected to a load balancer for communications manager . In communications from internal clients to communications manager are also routed through load balancer . In one embodiment load balancer is a hardware IP load balancer.

In the embodiment of communications manager may be implemented using one or more Front End FE servers in an FE pool one or more conferencing servers and a database . While in FE pool includes FE servers and it will be appreciated that FE pool may include alternative number of FE servers. FE pool provides IM presence and conferencing services. FE pool is connected to a database DB that stores user and conferencing related information. DB may reside on a separate physical machine or reside with one or more FEs in pool . In other embodiments communications manager may include additional FE pools that have their own associated databases and conferencing servers.

FEs in pool are also connected to one or more conferencing servers also referred to as a Multipoint Control Unit MCU that are used in conducting a conference. Conferencing server is responsible for managing one or more media types such as IM conferencing telephony conferencing web conferencing for conference data collaboration e.g. sharing a Microsoft PowerPoint presentation and A V conferencing.

Turning to a flowchart shows operations of organizing an anonymous conference in accordance with an embodiment of the invention. In one embodiment at least a portion of flowchart may be implemented by computer readable instructions executable by one or more computing devices. Starting with operation a conference organizer client receives a request to setup a conference from an organizer. The organizer of a conference is typically an enterprise user i.e. has enterprise credentials . The organizer client may connect to enterprise from inside or outside the enterprise network.

Continuing to operation in response to the conference request from the organizer the organizer client obtains a public encryption key from the communications manager. The communications manager retains the corresponding private key. Next in operation the organizer client generates a conference key and encrypts the conference key with the public encryption key received from the communications manager in operation . In one embodiment the conference key is a cryptographically secure string of data that an anonymous user will use to join a conference.

Continuing to operation the organizer client sends an add conference request to the communications manager. The add conference request includes the encrypted conference key. Next in operation the communications manager decrypts the conference key and stores the conference key. The conference key will be used to verify an anonymous user when an anonymous user requests to join a conference.

Proceeding to operation the organizer client receives an add conference response from the communications manager. The add conference response confirms that the conference key has been received and the requested conference has been setup.

Next in operation the organizer i.e. the human enterprise user sends the conference key to one or more anonymous users that are to join the conference. It will be appreciated that the same conference key is sent to each anonymous user. The conference key may be distributed to the anonymous users as desired by the organizer. For example the conference key may be sent to an anonymous user in a secure email such as by encrypting the email message. In another example the conference key may be sent in the clear to an anonymous user over a secured connection. In yet another example the organizer may call an anonymous user and tell the anonymous user the conference key over a telephone.

Turning to a flow diagram shows operations of organizing an anonymous conference in accordance with an embodiment of the invention. Flow diagram will be discussed in relation to the embodiment of enterprise shown in . In one embodiment at least a portion of flow diagram may be implemented by computer readable instructions executable by one or more computing devices.

Organizer client receives a request from a conference organizer i.e. an enterprise user to setup a conference. Organizer client sends a getEncryptionKey request GET EK to edge server which in turn sends the request to director which in turn sends the request to communications manager . Load balancer assigns the request to one of the FE servers in pool . In request is assigned to FE . Alternatively when organizer client is inside the enterprise network the getEncryptionKey request GET EK and other communications discussed below may be sent from organizer client to FE pool without passing through edge server and or director .

FE sends a getEncryptionKey response GET EK RES back to organizer client . Response includes the public encryption key that organizer client will use to encrypt the conference key. FE retains the private encryption key corresponding to the public encryption key. In one embodiment FE uses an RSA algorithm to generate the public private key pair.

In one embodiment FE may include opaque data in getEncryptionKey response GET EK RES . To support highly available conferencing communications manager may contain multiple FEs behind load balancer . As such it is possible for the add conference request to terminate on a different server from the one that handled the get encryption key request. When FEs do not share the same private encryption key which is a typical deployment scenario this can be problematic because the server receiving the add conference request has no way of decrypting the conference key using the private key configured on another FE.

To solve this problem the get encryption key response may also contain a server identifier. The server identifier must be reflected back to the FE servers in an add conference request along with the encrypted conference key. In one embodiment the server identifier includes a piece of opaque data. Opaque data is data placed in a data structure that the system defines and that has an intentionally hidden internal structure. Recipients such as the organizer s client make no assumptions regarding the contents of this opaque data and simply pass this information back to the system at a later stage. This opaque data contains information about the FE that provided the public encryption key. When an add conference request is received at a different FE it verifies that the target FE is a member of the pool and forwards the request to that FE.

Once organizer client receives the public encryption key organizer client may perform various operations. In operation organizer client saves the server identifier such as opaque data received in the getEncryptionKey response GET EK RES . In operation organizer client generates a conference key and encrypts the conference key using the public encryption key received from FE . In operation organizer client creates an addConference request ADD CONF that includes the encrypted conference key. In one embodiment request may also include the server identifier e.g. opaque data . Organizer client may include other conference data in request such as a conference identifier conference restrictions e.g. identify which attendees may be PowerPoint presenters make the conference re occurring e.g. every two weeks and the like.

The addConference request ADD CONF is sent to FE pool via edge server and director . Since FE pool is behind load balancer in this example the add conference request is sent to FE . FE reads the server identifier as shown by operation . Next in operation FE verifies that the specified FE i.e. FE belongs to FE pool and routes the add conference request to the correct FE i.e. FE . If the specified FE is not in FE pool then addConference request is returned as failed. Organizer client may attempt to request another encryption key from a valid FE and re send the addConference request.

As shown by operation FE decrypts the conference key and stores the conference key and any other conference data. In one embodiment the conference key and other data are saved in database . FE then sends an addConference response ADD CONF RES back to organizer client . As shown in response is sent back to FE the server that was originally assigned addConference request and then to director and edge server to organizer client . Response confirms that the conference has been organized and is ready for attendees to join at the scheduled time.

Turning to a flowchart shows operations of an anonymous user joining an anonymous conference in accordance with an embodiment of the invention. In one embodiment at least a portion of flowchart may be implemented by computer readable instructions executable by one or more computing devices. Starting with operation an anonymous user requests to join a conference. The anonymous user s join request includes the conference key. The join request may also include other information such as a conference identifier an identity for the anonymous user and the like.

Proceeding to operation enterprise verifies the anonymous user has the correct conference key such as by using an authentication server. In one embodiment the conference key received from the anonymous user client is compared to a conference key stored at communications manager to determine if the conference keys match. Anonymous user client may send the conference key using various security measures such as a secure channel hashing and the like. Next in operation once the anonymous user is verified the anonymous user is added to the conference.

It will be appreciated that the operations in flowcharts and may occur at various temporal distances. For example an organizer may setup a conference ahead of time via flowchart but the anonymous user may not actual join the conference until days or weeks later via flowchart . In another example an organizer may need to add an anonymous user to a conference that will begin in minutes or that is already occurring. In this example the operations of flowcharts and may occur very close together in time.

Turning to a flow diagram shows operations of an anonymous user joining an anonymous conference in accordance with an embodiment of the invention. Flow diagram will be discussed in relation to the embodiment of enterprise shown in . In one embodiment at least a portion of flow diagram may be implemented by computer readable instructions executable by one or more computing devices.

An anonymous user uses anonymous user client to send a joinConference request JOIN CONF to communications manager . Request is received by edge server which passes request to director . In anonymous user client is connected from outside the enterprise network. In another embodiment an anonymous user may connect to enterprise using an enterprise network access point e.g. anonymous user from company A connects their laptop to wireless access point in a conference room at company B . In this embodiment anonymous user joinConference request may be sent to director without passing through edge server .

Request may include a conference ID a hash of the conference key and an anonymous user identity. The conference key is hashed as a security measure for sending the conference key to enterprise . In one embodiment hashing mechanisms used by the Digest authentication algorithm may be used.

When director receives joinConference request director may perform various operations. In operation director retrieves the conference key hash conference ID and anonymous user identity from join Conference request . In operation director locates the FE server pool that hosts the conference for the organizer. Since director does not have access to the database that stores the conference key director must locate the correct FE pool. In the correct FE pool is pool .

Next in operation director issues an HTTP request called getConferenceKeyHash request GET KEY HASH to the located FE pool to obtain a hash of the conference key stored in the pool s database. In database stores the conference keys for FE pool . In FE responds to request but it will be understood that any FE in FE pool could have responded to request as assigned by load balancer . In one embodiment an HTTP based mechanism is used for obtaining the hash from the FE pool instead of a SIP based mechanism to ensure that an attack of the HTTP channel by a malicious anonymous user does not interfere with existing SIP based traffic in enterprise . It will be appreciated that any alternate mechanism such as Remote Procedure Call may be used in place of HTTP for obtaining the hash from the FE pool.

When FE receives getConferenceKeyHash request FE verifies that the anonymous user identity included in request has not been used in the conference already discussed further below as shown by operation . Next in operation FE retrieves the appropriate conference key from database and computes the hash of the conference key. FE then sends the hashed conference key to director in a getConferenceKeyHash response GET KEY HASH RES .

Director then compares the hashed conference key received from anonymous user client to the hashed conference key received from FE to determine if the anonymous user possesses the correct conference key as shown by operation . Director sends a joinConference response JOIN CONF RES to anonymous user client via edge server . Response indicates whether the anonymous user is admitted to the conference because the hashed conference key matches or denied admission to the conference. In other embodiments the conference key may be passed using other secure means e.g. the conference key may be sent in the clear in a secure channel between client and FE .

It will be appreciated that director only handles a hash of the conference key and does not see the conference key in the clear from the anonymous user client or from FE . In this way only the endpoints of the joinConference communication see the actual conference key. Thus if an attacker was running a trace on director or any other intermediary server the attacker sees only a hash of the conference key and not the actual conference key.

Authenticating a user establishes a security association on both the server and the client. This security association can be referenced in subsequent requests to prevent being challenged again. For enterprise users this security association can be used to route arbitrary requests including those destined to other conferences through the infrastructure. However anonymous users are not provided this luxury. To provide such a safeguard the authenticating server e.g. director or a front end server stamps the security association with the conference identifier for the conference that the anonymous user was successfully authenticated for and ensures that all subsequent requests from this anonymous user are only for this conference. Any request from this anonymous user that does not target this conference is rejected.

In one embodiment all anonymous users present an arbitrary identity e.g. a username and a single hashed conference key to join a conference with the joinConference request. Enterprise users on the other hand use their established identities with distinct credentials to join a conference. The conferencing infrastructure permits the same user to join a conference a certain number of times after which the oldest connected endpoint is removed from the conference. This design exists to protect the infrastructure from abuse and is easy to enforce for enterprise users since they have distinct verifiable identities but is hard to do for anonymous users since they all present the same credentials i.e. the same conference key for a particular conference with unverifiable arbitrary identities. This allows for the possibility that a malicious anonymous user can impersonate an existing anonymous user in the conference and exceed that user s connection limit thus resulting in that user being removed from the conference.

To prevent this threat communications manager ensures that the anonymous user identity being presented by the anonymous user is not already being used in the conference. If only one anonymous user is allowed to use a particular identity it prevents another anonymous user from using the same identity thus mitigating the threat. In one embodiment if the identity from an anonymous user is already in use by another user in the conference then the anonymous user is not allowed to join the conference. The anonymous user may re attempt to join the conference with a different anonymous user identity. There is a small race condition when two anonymous users present the same identity but guidelines for creating anonymous identities can clearly indicate that they have to be cryptographically unpredictable identities with low probability for collision so the race condition is minimized.

Embodiments of the invention allow a person without enterprise credentials to securely join a conference hosted by the enterprise. An anonymous conference is organized and a conference key is provided to anonymous users. When joining a conference an anonymous user presents the conference key for verification. Thus a person from outside an organization may participate in the conference without the burden of setting up enterprise credentials for that person. Also the enterprise maintains security and typical server logging when hosting the conference.

Although not required embodiments of the invention are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement embodiments of the invention may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allow device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency infrared Near Field Communication NFC and other wireless media.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

In the description and claims the term coupled and its derivatives may be used. Coupled may mean that two or more elements are in contact physically electrically magnetically optically etc. . Coupled may also mean two or more elements are not in contact with each other but still cooperate or interact with each other for example communicatively coupled .

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments of the invention. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device . Those skilled in the art will also realize that all or a portion of the computer readable instructions may be carried out by a dedicated circuit such as a Digital Signal Processor DSP programmable logic array and the like.

Various operations of embodiments of the present invention are described herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment of the invention.

The above description of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the embodiments to the precise forms disclosed. While specific embodiments and examples of the invention are described herein for illustrative purposes various equivalent modifications are possible as those skilled in the relevant art will recognize in light of the above detailed description. The terms used in the following claims should not be construed to limit the invention to the specific embodiments disclosed in the specification. Rather the following claims are to be construed in accordance with established doctrines of claim interpretation.

