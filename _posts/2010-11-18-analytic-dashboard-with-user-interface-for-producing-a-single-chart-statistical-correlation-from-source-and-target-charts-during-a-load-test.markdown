---

title: Analytic dashboard with user interface for producing a single chart statistical correlation from source and target charts during a load test
abstract: A processor-implemented method includes providing an analytic dashboard with a graphical user interface (GUI) that outputs aggregated results streaming in real-time of a load test performed on a target website. Responsive to input of a user on the GUI, the input comprising selection of a source chart and a target chart, a single chart is automatically generated that represents either a combination or a statistical correlation of the source and target charts. The single chart has a left y-axis and an x-axis. The combination or the statistical correlation of the single chart changing in real-time as the load test progresses. A visual representation of the single chart is then produced on the analytic dashboard.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09495473&OS=09495473&RS=09495473
owner: SOASTA, Inc.
number: 09495473
owner_city: Mountain View
owner_country: US
publication_date: 20101118
---
This application is a continuation in part CIP application of Ser. No. 12 804 338 filed Jul. 19 2010 entitled R T M T LTRD which is assigned to the assignee of the present CIP application.

The present disclosure relates generally to methods and apparatus for processing data generated from load testing of websites or browser based applications. Still more particularly the present disclosure relates to methods apparatus and executable computer instructions for combining and correlating test results data.

Information technology is now routinely used by many enterprises to receive process and provide information via widely accessible electronic communications networks such as the Internet. Yet most information technology systems will begin to deny service or fail to process message traffic efficiently when communications traffic exceeds a processing capacity of the system. Such failures in communication can significantly impair the operations of an enterprise in many ways. Slower website performance is also known to cause users visitors to leave the website sooner. Another consequence of poor performance is that the website may be downgraded in search engine results rankings.

In recent years enterprises and developers have sought an easy and affordable way to use cloud computing as a way to load and performance test their web based applications. Cloud computing gets its name from the fact that the machine storage and application resources exist on a cloud of servers. In cloud computing shared resources software and information are provided on demand like a public utility via the Internet. Cloud computing is closely related to grid computing which refers to the concept of interconnecting networked computers such that processing power memory and data storage are all community resources that authorized users can utilize for specific tasks.

Load testing a web based application or website can involve simulating a very large number e.g. up to or beyond 1 000 000 of virtual website users via Hypertext Transfer Protocol HTTP or HTTP Secure HTTPS message intercommunications with the target website. For very large tests sending and aggregating the test results data generated from all of the load servers to a database available to a dashboard in real time has been problematic. The huge overhead of receiving and processing a very large number of HTTP messages containing all of the requests and responses sent from each of the many load servers to the analytic servers responsible for analyzing the test results data can easily overwhelm the resources of the server. In addition the creation of test results charts that combine data from two or more charts into a single multi axis chart or correlate two datasets for display on a dashboard has been difficult. In the past presenting business intelligence test results data in combined or correlated charts involved complex time consuming and lengthy processing steps requiring considerable manual input.

In the following description specific details are set forth such as server types cloud providers structural features process steps etc. in order to provide a thorough understanding of the subject matter disclosed herein. However persons having ordinary skill in the relevant arts will appreciate that these specific details may not be needed to practice the present invention. It should also be understood that the elements in the FIGS. are representational and are not drawn to scale in the interest of clarity.

References throughout this description to one embodiment an embodiment one example or an example means that a particular feature structure or characteristic described in connection with the embodiment or example is included in at least one embodiment. The phrases in one embodiment in an embodiment one example or an example in various places throughout this description are not necessarily all referring to the same embodiment or example. Furthermore the particular features structures or characteristics may be combined in any suitable combinations and or sub combinations in one or more embodiments or examples.

In the context of the present application the term cloud broadly refers to a collection of machine instances storage and or network devices that work together in concert. A public cloud refers to a cloud that is publicly available i.e. provided by a cloud provider that a user may access via the Internet in order to allocate cloud resources for the purpose of utilizing or deploying software programs and also for running or executing those programs thereon. Some public clouds deliver cloud infrastructure services or Infrastructure as a Service IaaS . By way of example Amazon Elastic Compute Cloud also known as EC2 is a web service that allows users to rent computers on which to run their own computer applications thereby allowing scalable deployment of applications through which a user can create a virtual machine commonly known as an instance containing any software desired. The term elastic refers to the fact that user can create launch and terminate server instances as needed paying by the hour for active servers.

Cloud platform services or Platform as a Service PaaS deliver a computing platform and or solution stack as a service. An example PaaS cloud provider is the Google App Engine which lets anyone build applications on Google s scalable infrastructure. Another leading software platform in the cloud provider is Microsoft Azure an application platform in the cloud that allows applications to be hosted and run at Microsoft datacenters.

A private cloud is a cloud that is not generally available to the public and which is typically located behind a firewall of a business. Thus a private cloud is only available as a platform for users of that business who are behind the firewall.

The term server broadly refers to any combination of hardware or software embodied in a computer i.e. a machine instance designed to provide services to client devices or processes. A server therefore can refer to a computer that runs a server operating system from computer executable code stored in a memory and which is provided to the user as virtualized or non virtualized server it can also refer to any software or dedicated hardware capable of providing computing services.

In the context of the present disclosure load servers also referred to as Maestro or test servers are servers deployed and utilized primarily to generate a test load on a target website. That is load servers play the test composition generating a load on a target customer website and web applications. Load servers also function to report back results of the load test and statistics in real time. Analytic or result servers are deployed and utilized primarily to collect the real time test results from the load servers aggregate those results stream the results to real time dashboards and store them in a database.

The term real time refers to a level of computer responsiveness that a user senses as sufficiently immediate or that enables the computer to keep up with some external process for example to present visualizations of load test results as it constantly changes . Thus real time is a mode of computer operation in which the computer collects data analyzes or computes with the data reports e.g. visually displays and or stores the results nearly simultaneously i.e. within milliseconds or seconds.

A grid or test grid refers to a collection of interconnected load servers and result servers that may be used to run a load test on a target website or web applications. As disclosed herein a computer program or grid wizard may be utilized to automatically determine the global cross cloud resources needed to execute a test by examining the test plan or script also referred to as a test composition . Furthermore the computer program can automatically allocate those server resources required for the test across multiple different cloud providers verifies that the allocated servers are operational and that the allocated servers are running proprietary load testing software or computer program product correctly. The computer program or product also monitors the allocated servers replacing non operational servers when allocated and during execution of the test and displays results from multiple globally distributed clouds in a real time streaming dashboard which requires no user initiated refresh.

In one embodiment a graphical user interface GUI is provided that allows a user to selectively combine or correlate two or more charts representing different datasets into a single chart i.e. create a single multi axis chart from two or more different charts . In one example a user may select e.g. click using a mouse touchpad or other input device on one chart or icon representing a chart displayed visually on a screen drag the chart across the display screen and then drop the chart on another chart e.g. by the user releasing a button on the mouse . In response to the selected chart being dropped on another chart a visual representation of the two combined correlated charts is automatically generated on the display. In a specific implementation the drag and drop capability of the user interface provides a user with the ability to combine correlate test results data with other test results data e.g. count of virtual users with average response time test results data with monitor data e.g. count of virtual users with server CPU usage and monitor data with other monitor data e.g. Java Virtual Memory JVM heap usage with CPU usage . Thus a user of a business intelligence system can quickly combine correlate test data results taken from different metrics or datasets along a common timeline to analyze how a website or other system reacts in real time.

In one embodiment instead of using complex and time consuming wizards with drop downs checkboxes etc. to build the combined or correlated chart from scratch the disclosed GUI automatically combines or correlates two charts into a single chart having a left y axis a right y axis and a common x axis. For a correlated chart the GUI produces a new chart that shows how the data of the initially selected chart referred to in the present disclosure as the source chart is statistically correlated to that of the target chart the chart that the user drags and drops onto . This is automatically performed by a computer implemented process that matches each point from both charts based on a common x axis unit type e.g. time and then plots each pair of values on a new axis system that has the source chart s y axis and the target chart s x axis.

For combined charts the target chart keeps both its x axis and its y axis the y axis may appear on the left side and a new y axis right side is created for the source chart. One or more additional charts may be dropped on the newly combined chart as long as the source chart has a y axis that matches in unit type either the left or right y axis of the combined chart.

In one embodiment as the user drags the source chart drag handle around the dashboard when a chart cannot be combined or correlated with a drop target chart that the drag handle is positioned or hovering above a Stop icon appears on the display. On the other hand when a chart can be combined or correlated a Drop icon appears on the display screen of the user.

Target website is shown connected to a public cloud via Internet cloud . Public cloud includes a main instance coupled to a database . Database may be used to store test results store metadata indicative of the test definition and to store monitoring data e.g. CPU metrics generated during the load test. Main instance is also shown coupled to a pair of analytic servers and a pair of load servers within cloud consistent with a snapshot view of the start of a process of deploying a test grid. It is appreciated that cloud may comprise multiple clouds associated with multiple different cloud providers. In the example shown main instance is a virtual machine deployed on a server provided in cloud that communicates with a browser application. In one embodiment main instance may include a results service designated as a reader results service as opposed to all of the other remote writer results services which reads data from database and serves it to a web application which in turn formats the data and serves it to an analytic dashboard in the browser. In operation main instance executes the coded sequence of computer executed steps e.g. from code stored in a memory that allocates the server resources required for the test across one or multiple different cloud providers. The same application that allocates verifies server resources may also verify that the allocated servers are operational to conduct the website load test. The main instance may also execute code that aggregates load test results.

Additionally main instance may also execute code that generates the GUI described herein that allows a user to automatically combine or correlate chart data simply by dragging one chart source over another chart target and dropping it at that position on the screen.

Connected to the front end of cloud through Internet cloud is a laptop computer associated with a user who may orchestrate deployment of the test of target website . It is appreciated that in other implementations computer may comprise a desktop computer workstation or other computing device that provides a graphical user interface that allows a user to create and execute the test composition define the parameters of the grid initiate the load test as well as analyze review results of the test in real time. This GUI provides the ability to combine two or more charts into 1 creating a single multi axis chart or correlating two datasets by simply dragging a source chart and dropping it on the target chart. The GUI may be web based so it can be accessed from any computer having web browser capabilities from any location in the world without installation of specialized software.

Persons of skill in the art will understand that the software which implements main instance may also be downloaded to the user s laptop computer or implemented on a separate hardware appliance unit located either at the user s premises e.g. behind the firewall or anywhere in clouds or . It is further appreciated that laptop is representative of a wide variety of computer devices such as workstations personal computers distributed computer systems etc. that may be utilized by the user to launch the method for provisioning running the cross CloudTest grid analyzing streaming real time results as well as monitoring the performance of the actual load test. In other words the GUI described herein may also run on a computer or data processing system local to the user.

Continuing with the example of the application program running on main instance operates to create a GUI that allows a user of laptop to remotely interact with the application view monitor the test results in real time and modify parameters test conditions dynamically during the actual test. For purposes of the present disclosure the grid wizard is considered synonymous with the application program or system program that performs the method and operations described herein. In one embodiment main instance may include an embedded load server for running a relatively small load test that does not require the deployment of other load servers and an embedded results i.e. analytic server for collecting aggregating the real time test results. In another embodiment the main instance and the database provide a basic CloudTest environment that can be used to launch establish one or more grids with more or more cloud providers being utilized to provision each grid.

The overall testing process begins with the user creating a sophisticated test plan or composition via a GUI of either the same application program running on main instance or a GUI associated with another web browser application. The GUI may be utilized that generate complex parallel message streams for website testing. In one example the test plan may be created in the form of a visual message composition analogous to a music composition for testing and demonstrating web services such as that described in U.S. patent application Ser. No. 11 503 580 filed Aug. 14 2006 which application is herein incorporated by reference.

The process of deploying the test grid for a large scale test may start with the user of laptop indicating to main instance the number of virtual users wanted on each track of the test composition. For example the user of the system may wish test the target website with a load equal to 1000 users on each track of a test composition. The user may indicate the number of virtual users through an input entered on a browser page of the GUI as described below or alternatively invoke a grid wizard that automatically makes an intelligent allocation of the proper amount of resources needed to conduct the test based on examining the composition that this grid will be running. By way of example the system may determine that a single load server should be allocated to accommodate every 1000 virtual users.

Similarly the system via a grid wizard may determine a proper allocation of result servers needed to accommodate the number of load servers specified. In one implementation users can specify how many load servers and how many result servers they want in each cloud and region. Alternatively users may employ the grid wizard to specify all parameters. That is users can simply specify a defined test composition and the grid wizard automatically analyzes the composition and determines how many servers they need in each cloud and region. It is appreciated that the determination of the number of load servers and result servers is typically made based on considerations that ensure each virtual user has a satisfactory amount of bandwidth CPU memory resources etc. such that it correctly simulates or behaves as a real world browser.

Once the test has been defined and the parameters set e.g. number of servers server locations etc. via the grid wizard upon user input the user main instance starts the process of actually deploying and allocating the specified resources by interacting with an application programming interface API of one or more cloud providers. By way of example a user may click on a Deploy Instances button provided in a page of the CloudTest program GUI in response the system software contacts all of the different cloud APIs it needs and starts to allocate the required servers.

For example if 1000 servers are to be allocated in EC2 there may be 40 simultaneous requests issued each request being for 25 servers. If another 200 servers need to be allocated in Microsoft Azure in two different geographically located data centers two simultaneous requests may be issued each for 100 servers in each data center due to the fact that Azure does not support allocating smaller groups into one single deployment . In other words the user may simply click on an icon button of a GUI to initiate the deployment allocation of resources e.g. machine instances needed to execute the test composition with the requests necessary to achieve that allocation being issued handled in an automated manner i.e. without user intervention.

Each of result servers is connected to a plurality of associated load Maestro servers . Each load server is shown having an embedded component or Result Service client which computes metrics or statistics from the raw data e.g. web pages received from the target website or application. As discussed previously the function of each load server is to provide a load to the target website by creating one or more virtual users that access information on the target website. Within each Maestro server is Result Service client which functions to compute statistics such as average response time average response size and the like. In one embodiment instead of sending all of the raw data received from the target website Result Service client computes relevant statistics and discards the data. Then once an interval e.g. every five seconds the statistics computed by client are sent to the associated result server .

Each of the result servers takes all of the statistics received from all of its associated load servers and further aggregates those statistics. In other words each result server aggregates the aggregated results received from all of the load servers that it is connected to. The resulting aggregated data is then further aggregated when querying database . Thus statistics such as average response time across all of load servers for the load test is stored in database and available on a real time basis to browser via database queries performed by the main instance which can perform further aggregation grouping filtering etc.

Practitioners in the art will appreciate that aggregating statistical results data on multiple levels beginning at the point closest to the actual load test results creation allows a user to view results in real time on an analytic dashboard GUI thereby permitting real time analysis across the entire testing infrastructure.

In a specific implementation each load server includes a Result Service client which in turn includes accumulators that stores the statistically aggregated data e.g. average response time computed on a second by second basis. Periodically e.g. every 5 seconds each Result Service client sends an appropriate number of messages e.g. 5 messages one for each second to its associated result server . That is one batched message is sent every 5 seconds the batched message including data about all of the previous 5 seconds. Each message contains the data metrics computed every one second interval. These fine granularity metrics are then further aggregated in database . It is appreciated that by computing statistics metrics on a second by second basis the analytic dashboard running on browser can analyze the results on various levels of granularity. In other words the user may want to view statistical results of the load test on a minute by minute basis or all the way down to a second by second basis. Thus the architecture described herein allows a user to view real time streaming results in an analytic dashboard of various performance metrics on a second by second basis even when there are millions of virtual users on thousands of load servers. The GUI described herein also allows a user to combine correlate test result datasets from two or more charts automatically through a simple drag and drop operation.

Note that as the load test progresses within each load server a component or client periodically calculates or computes aggregated test results from the raw load test data generated from the target website. The raw data may comprise HTTP Simple Object Access Protocol SOAP or other protocols messages responses received from the target website whereas the aggregated test results may comprise any statistic or metric of interest. The periodic interval that the aggregated test results are computed for may vary but in a specific embodiment results are computed every second.

The aggregated test results computed by the client running on each load server are periodically sent to their associated analytic server. The period at which the aggregated results are sent to the analytic servers may be equal to or greater than the period at which the aggregated test results are computed within each load server. In a typical implementation aggregated test result data is computed by each load server every second with the results of those computations being sent to the analytic servers from each of the load servers every five seconds.

Next at each analytic server the aggregated test result data received from each of the associated load servers is further aggregated. In other words each analytic server produces aggregated test result data across all of its associated load servers. For example if each analytic server is associated i.e. connected with 50 load servers each analytic server aggregates statistics metrics across the aggregated test result data received from each of the 50 load servers.

Finally at block the aggregated data produced by each analytic server is further aggregated at the system wide data store in real time. For instance Structured Query Language SQL queries to the database can perform aggregation functions e.g. AVG SUM etc. against tables rows that have been inserted from the individual analytics servers thereby producing further third level aggregated results.

As explained above the results of this final level of aggregation are available in real time to a browser executing an analytic dashboard that provides a graphical display of the multiple results in various charts. The results are maintained in the dashboard in real time since the browser continues to produce the latest changes in each result set by querying the database for all of the rows that have changed since the last time that the queries ran.

A delta change document may be produced and sent to the browser which merges the changes into the currently displayed chart. In one embodiment if the multi result chart is combined or correlated the dashboard may produce more than one delta change document and merge all of the different changes into the multi result chart. If the multi result chart is correlated the widget code may wait or pause until both data points from each result set are available for a given point in time. In other words a new point is shown in the statistical correlation chart once the data is available for each result set.

For example field or widget is an example combined chart that illustrates the number of virtual users shaded area and the send rate heavy line as a function of test time. Test time is represented along the common x axis of this combined chart while the units associated with the virtual users and send rate are shown along the left side y axis and right side y axis respectively. By way of example combined chart may be automatically produced by selecting a chart showing the number of virtual users versus time dragging it to a position on the display screen over a second chart showing send rate versus time and dropping the first chart on the second chart.

A wide variety of input commands devices may be used to effectuate the selection dragging and dropping steps. For example a user may select a chart by clicking on or holding a button of an input device such as a mouse then moving the cursor and then releasing or clicking again a button of the input device while the cursor is over the second chart. Alternatively touch based input commands such as tapping swiping or other finger movements actions on a touch screen input device may be used to combine or correlate charts. Still other input devices and methods may be utilized including conventional keypad based input commands or voice based input command devices.

In field illustrates a combined chart showing error count vertical dark lines and the number of virtual users shaded area versus test time. Field shows the number of bytes sent and received vertical dark lines and the number of virtual users shaded area as a function of test time. It is appreciated that the user may select view a wide variety of charts combined correlated etc. using tabs which allow the user to switch between different dashboards. Collectively the charts provided in window allow a user to view analyze and monitor test results and information in real time so as to help identify root causes of performance problems their website or web application may be experiencing.

Persons of skill in the arts will appreciate that shows how the entire test grid comprising a huge number of interconnected load and result servers works in concert to send load receive responses aggregate and analyze those responses into a real time streaming graphical result displayed to the user. All this is accomplished regardless of how many server instances and different cloud providers are utilized to run the load test. Moreover the various result charts may be viewed in one or many real time streaming analytic dashboards. In each of the charts displayed on analytic dashboard window the user may change the time format or legend of the horizontal axis for reporting the testing analytics in real time on a varying time e.g. hour by hour minute by minute or second by second basis.

To combine or correlate two charts a user may locate two widgets charts presenting like data on the GUI which provides the analytic dashboard of real time streaming results. For example two charts with results data displayed per minute may be located or otherwise identified on the display screen. In one embodiment if an edit mode associated with the analytic dashboard is active it should be toggled to an off state prior to combining or correlating charts. In one embodiment the user places the mouse cursor over the title bar of the first source widget and depresses the left button left click of the mouse. At that point a drag icon e.g. cross directional arrows appears on the display screen indicating that the first widget has been selected. The user then drags the first widget onto a second target widget. If the two charts are capable of being combined by the automated program a drop icon e.g. downward arrow appears. If on the other hand the two charts cannot be combined a stop icon e.g. circle with a line through it appears. In other embodiments touch based keypad based or voice based input command device technologies may be utilized as described above. For instance using a touch based input device the user may touch the source chart drags it around while keeping his finger pressed down and then lift his finger up once the source chart is positioned above the target chart on the display screen.

In the embodiment described once a source widget has been successfully dropped onto a target widget a menu of options appears on the display screen. An example options menu dialogue window is illustrated in . Menu window presents a user with the option to combine or correlate the two widgets by clicking on icons or respectively. A cancel icon is also provided giving the user the option of abandoning the resulting widget combination.

The user may also click or otherwise select box to remove the source widget selected. In one embodiment checking box causes the GUI to remove the first widget from the analytic dashboard when the charts are combined. Settings made to the given widget while combined persist if the widget is detached or removed at a later time.

In one embodiment the default title for the combined widget is the title of the source widget versus the title of the target widget. For example the title of a combined widget created via a drag and drop process is automatically assigned a new title that reflects the two datasets being displayed. In the event that a combined widget is created the notation vs. may be placed between the two original source and target widgets names. If a correlated widget is created the word over may be placed between the two original widgets names.

Thus in which illustrates a combined widget showing average response time versus bytes sent and received the target widget is a chart of average response time versus time and the source widget is bytes sent and received versus time. Note that in this example the left side y axis shows bytes sent and received associated with the source while the right side y axis shows average response time associated with the target. In other words in the example of the Bytes Sent and Received chart was dropped onto the Average Response Time chart such that the resulting chart shows the datasets associated with the source and target widgets superimposed upon each other.

Although not explicitly shown the respective datasets displayed on combined chart or widget may be assigned a distinct color that matches the color of the series name color displayed along the corresponding vertical axis. By way of example the series name on the left hand y axis Bytes Sent and Received may be colored yellow to match the histogram data shown while the legend on the right hand y axis Average Response Time may be colored red to match the solid bold line shown in widget . By clicking on box labeled Legend the user is provided with an option to toggle either chart on off.

It should be understood that a user is not limited to combining just two charts. That is the GUI described herein allows the user to combine other datasets that are of similar type. For example in the example of the source widget showing bytes sent and received may be a combined widget of two charts one that shows bytes sent and another that shows bytes received. Both of these charts are of similar type i.e. both are counts of things . In such a case widget represents the combination of three charts or widgets. In still other embodiments users are provided with the ability to combine two or more data sets of different types e.g. producing a results chart having more than one right hand y axis or more than one left hand y axis 

Persons of skill in the art will appreciate that the disclosed system and GUI provides a user with the ability to combine disparate chart data provided that each are time based types. For example monitor data may be combined with result data. Monitor data may also be combined with other monitor data. In other words all sorts of different permutations of datasets are supported in the analytic dashboard GUI described herein.

In addition trend lines are shown superimposed on the data points in respective fields . In one embodiment trend lines are automatically generated by the GUI program. Trend lines represent a best fit line to the resulting data and may be generated using regression analysis algorithms or tools.

Persons of ordinary skill will further appreciate that the information provided in the dashboard window fields of gives a user valuable insight into how well the target website is performing. For instance in this example send rate bytes sent and received and error count are all shown increasing positively correlated with the number of virtual users. Thus the ability to quickly combine and or correlate results data in a real time analytic dashboard provides a user with a powerful ad hoc analytical investigative tool to better understand the performance of a target website. It should be understood that the GUI shown and described herein provides drag and drop capabilities in real time while the load test is running.

Once a widget displays a single resource set that data can be combined or correlated with a Monitor widget. In other words the GUI permits a user to combine or correlate test results with monitors.

It is appreciated that the ability to selectively combine or correlate two or more charts representing different datasets into a single chart i.e. create a single multi axis chart from two or more different charts is not limited with respect to the source of the data. That is the data sets to be combined or correlated may be internal to a specific data processing system or from any supported external data source or application. The external data sources or instance may define how CloudTest can read data from other applications. In an example implementation support is provided for CloudTest reading data from a third party monitoring application solution called CA Wily Introscope . The available metrics metadata from the external data source is presented in CloudTest and the GUI allows a user to choose to display it as charts. Those charts datasets can be combined and correlated with other external data source charts with CloudTest internal results charts or with internal monitors charts.

The GUI described herein also allows a user to correlate monitor data to monitor data that is present on a dashboard and where the data can be combined or correlated. The sequence of steps for combining or correlating monitor data is similar to that described above. For example from within a dashboard a user may locate two monitor widgets e.g. IO Kbytes Read and IO Kbytes Sent. The mouse cursor is placed over the title bar of the first widget on the display until a Drag icon appears. The user may then drag the first widget onto the second widget until a Drop icon appears. If a Stop icon appears the two charts cannot be combined. Once the first widget is successfully dropped onto the second widget the user may select Correlate from the options menu. The resulting widget correlating monitor data to monitor data is then automatically created with a default title e.g. Widget over Widget .

It should be understood that elements of the disclosed subject matter may also be provided as a computer program product which may include a machine readable medium having stored thereon instructions or code which may be used to program a computer e.g. a processor or other electronic device to perform a sequence of operations. Alternatively the operations may be performed by a combination of hardware and software. The machine readable medium may include but is not limited to floppy diskettes optical disks CD ROMs and magneto optical disks ROMs RAMs EPROMs EEPROMs magnet or optical cards or other type of machin e readable medium suitable for storing electronic instructions.

Additionally although the present invention has been described in conjunction with specific embodiments numerous modifications and alterations are well within the scope of the present invention. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

