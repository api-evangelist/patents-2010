---

title: System and method for establishing bidirectional links between multiphysics modeling and design systems
abstract: A system and method for implementing, on one or more processors, a bidirectional link between a design system and a multiphysics modeling system includes establishing via a communications link a connection between the design system and the multiphysics modeling system. Instructions are communicated via the communication link that include commands for generating a geometric representation in the design system based on parameters communicated from the multiphysics modeling system. One or more memory components can be configured to store a design system dynamic link library and a multiphysics modeling system dynamic link library. A controller can be operative to detect an installation of the design system, and implement via the dynamic link libraries, bidirectional communications of instructions between the design system and the multiphysics modeling system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09208270&OS=09208270&RS=09208270
owner: Comsol AB
number: 09208270
owner_city: Stockholm
owner_country: SE
publication_date: 20101229
---
This application claims priority to and the benefits of U.S. Provisional Application No. 61 290 839 filed on Dec. 29 2009 U.S. Provisional Application No. 61 360 038 filed Jun. 30 2010 and U.S. Provisional Application No. 61 377 841 filed on Aug. 27 2010 the disclosures of each of the foregoing applications being hereby incorporated by reference herein in their entirety.

The present invention relates generally to systems and methods for modeling and simulation and more particularly to interfaces and communications between design systems and multiphysics modeling systems.

Computer aided design systems are typically used to develop product designs and may be complemented with packages analyzing a single aspect of a design such as structural analysis in conjunction with computer aided design systems. It would be desirable to have design systems that can operate in more complex environments.

According to one aspect of the present disclosure a method is executable on one or more processors for implementing a bidirectional link between a design system and a multiphysics modeling system. The method includes the acts of establishing via a communications link a connection between the design system and the multiphysics modeling system. Instructions are communicated via the communication link. The instructions are configured to include commands for generating a geometric representation in the design system based on parameters communicated from the multiphysics modeling system.

According to another aspect of the present disclosure a method is executable on one or more processors for implementing a bidirectional link between a design system and a multiphysics modeling system. The method includes the acts of detecting the design system and communicating instructions between the detected design system and the multiphysics modeling system. The instructions include commanding the design system to generate a geometric representation based on parameters received from the multiphysics modeling system.

According to another aspect of the present disclosure a system is configured to establish a bidirectional link between a design system and a multiphysics modeling system. The system includes one or more memory components configured to store a design system dynamic link library and a multiphysics modeling system dynamic link library. A controller is operative to detect an installation of the design system and implement via the dynamic link libraries bidirectional communications of instructions between the design system and the multiphysics modeling system.

According to yet another aspect of the present disclosure one or more non transitory computer readable media are encoded with instructions which when executed by at least one processor associated with a design system or a multiphysics modeling system causes the at least one processor to perform the above method s .

Additional aspects of the present disclosure will be apparent to those of ordinary skill in the art in view of the detailed description of various embodiments which is made with reference to the drawings a brief description of which is provided below.

While the present disclosure is susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. It should be understood however that the invention is not intended to be limited to the particular forms disclosed. Rather the invention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims.

While the present disclosure is susceptible of embodiment in many different forms there is shown in the drawings and will herein be described in detail various aspects of the invention with the understanding that the present disclosure is to be considered as an exemplification of the principles of the invention and is not intended to limit the broad aspect of the invention to the aspects illustrated.

Computer systems may be used for performing a variety of different tasks by executing one or more computer programs stored on computer readable media e.g. temporary or fixed memory magnetic storage optical storage electronic storage other non transitory media flash memory . A computer program may include instructions which when executed by a processor perform one or more tasks. In certain embodiments a computer system may execute machine instructions as may be generated for example in connection with translation of source code to machine executable code to perform modeling simulation and problem solving tasks. One technique which may be used to model systems is to represent various physical aspects of the system being modeled in terms of equations or in other quantifiable ways that may be processed by a computer system. In turn these equations or other quantifiable ways may be solved by a computer system configured to solve for one or more variables associated with the equation or the computer may be configured to solve a problem using other received input parameters.

It is contemplated that computer applications for modeling a system may provide many advantages particularly as the complexity of the model and the system being modeled increases. In certain embodiments a user may be able to combine one or more systems that are each represented by different models into a multiphysics modeling system. Multiphysics modeling systems typically involve multiple physical models or multiple simultaneous physical phenomena. For example combining chemical kinetics and fluid mechanics or combining finite elements with molecular dynamics. Multiphysics modeling can also include solving coupled systems of partial differential equations. Exemplary multiphysics modeling systems include the COMSOL 4.0 or COMSOL Multiphysics simulation software operating on a computer system as such software is available from COMSOL Inc. of Burlington Mass. Additional exemplary aspects of multiphysics modeling systems are described in U.S. patent application Ser. No. 10 042 936 filed on Jan. 9 2002 now issued as U.S. Pat. No. 7 596 474 U.S. patent application Ser. No. 09 995 222 filed on Nov. 27 2001 now issued as U.S. Pat. No. 7 519 518 and U.S. patent application Ser. No. 09 675 778 filed on Sep. 29 2000 now issued as U.S. Pat. No. 7 623 991 the disclosures of which are each hereby incorporated by reference herein in their entirety.

An automatic technique for combining the one or more systems may be desirable such that the combination of the systems together may be modeled and accordingly represented in terms of combined physical quantities and equations. It may also be desirable for the automatic technique to provide for selectively solving for one or more variables associated with the combined system and or for solving the variables associated with one or more of the individual systems.

It may be desirable in certain embodiments to model the physical quantities of a particular system using different sets of equations to represent the model. This can allow for different techniques to be utilized to solve the system of equations associated with a singular or combined system. For example different forms of equations may be determined to be more desirable such as linear or non linear equations because they provide expedient and efficient solutions. It is contemplated that in certain embodiments systems of partial differential equations having multiple geometries can be desirable. Partial differential equations can provide an efficient and flexible arrangement for defining various couplings between the partial differential equations within a single geometry as well as between different geometries.

It is contemplated that computer system s on which modeling systems operate such as the ones described herein can include networked computers or processors. In certain embodiments processors may be operating directly on the modeling system user s computer and in other embodiments a processor may be operating remotely. For example a user may provide various input parameters at one computer or terminal located at a certain location. Those parameters may be processed locally on the one computer or they may be transferred over a local area network or a wide area network to another processor located elsewhere e.g. another room another building another city that is configured to process the input parameters. The second processor may be associated with a server connected to the Internet or other network or the second processor can be several processors connected to the Internet or other network each handling select function s for developing and solving a problem on the modeling system. Any of the processes or steps associated with the modeling system that are described herein can be performed by any one of the processors. It is further contemplated that the results of the processing by the one or more processors can then be assembled at yet another server or processor. It is also contemplated that the results may be assembled back at the terminal or computer where the user is situated. The terminal or computer where the user is situated can then display the solution of the modeling system to the user via a display e.g. a transient display or in hard copy form e.g. via a printer . Alternatively the solution may be stored in a memory associated with the terminal or computer or the solution may be stored on another server that the user may access to obtain the solution from the modeling system.

It is contemplated that in certain embodiments a product or system may be in the development or feasibility stage where it is being designed or analyzed. Such a product or system may be the subject of a multiphysics modeling system which can be used to assess the product or system in complex environment s involving several physical quantities or parameters. It may also be desirable to solve complex multiphysics problems associated with various products or systems by systematically varying parametric and geometric features in a computer based design system. Other desirable features may include for example to have a computer based system for solving complex multiphysics problems in which the settings for the physical properties and boundary conditions located in a memory and used to form multiphysics models and or solve multiphysics problems can be accessed directly from the design system such as through an interface between the design system and the multiphysics modeling system or an interface within one of the design system or the multiphysics modeling system. It is contemplated that the interface may be virtual or reside in a permanent memory. It is also contemplated the interface may at least partially include physical hardware components that may or may not also include software components for allowing useful interactions between the design system and the multiphysics modeling system. It is further contemplated that it may be desirable to have a modeling system having logical relationships established between various model components using a model tree that includes a plurality of nodes with branch relationships between the nodes.

Referring now to an exemplary aspect of a computer system is illustrated. The computer system includes a data storage system connected to host systems through communication medium . In this embodiment of the computer system the N hosts may access the data storage system for example in performing input output PO operations. The communication medium may be any one of a variety of networks or other type of communication connections as known to those skilled in the art. For example the communication medium may be the Internet an intranet or other network connection by which the host systems may access and communicate with the data storage system and may also communicate with others included in the computer system .

Each of the host systems and the data storage system included in the computer system may be connected to the communication medium by any one of a variety of connections as may be provided and supported in accordance with the type of communication medium . The processors included in the host computer systems and the data manager system may be any one of a variety of commercially available single or multi processor system such as an Intel based processor IBM mainframe or other type of commercially available processor able to support incoming traffic in accordance with each particular embodiment and application.

It should be noted that the particulars of the hardware and software included in each of the host systems as well as those components that may be included in the data storage system are described herein in more detail and may vary with each particular embodiment. Each of the host computers as well as the data storage system may all be located at the same physical site or alternatively may also be located in different physical locations. Examples of the communication medium that may be used to provide the different types of connections between the host computer systems the data manager system and the data storage system of the computer system may use a variety of different communication protocols such as SCSI ESCON or Fiber Channel. Some or all of the connections by which the hosts data manager system and data storage system may be connected to the communication medium may pass through other communication devices such as a Connectrix or other switching equipment that may exist such as a phone line a repeater a multiplexer or even a satellite.

Each of the host computer systems may perform different types of data operations such as storing and retrieving data files used in connection with an application executing on one or more of the host computer systems. For example a computer program may be executing on the host computer and store and retrieve data from the data storage system . The data storage system may include any number of a variety of different data storage devices such as disks tapes and the like in accordance with each implementation. As will be described in following paragraphs software may reside and be executing on any one of the host computer systems . Data may be stored locally on the host system executing software as well as remotely in the data storage system or on another host computer system. Similarly depending on the configuration of each computer system software as described herein may be stored and executed on one of the host computer systems and accessed remotely by a user on another computer system using local data. A variety of different system configurations and variations are possible then as will be described in connection with the embodiment of the computer system of and should not be construed as a limitation of the techniques described elsewhere herein.

Referring now to an exemplary aspect of the software is illustrated that may reside in one of the host computer systems such as whose computer system . The software of computer system of may include a User Interface module that communicates with the Modeling and Simulation module . The software further includes a Data Storage and Retrieval module which communicates with the Modeling and Simulation module for performing tasks in connection with data storage and retrieval. The Data Storage and Retrieval module may retrieve data files for example that may be stored in Libraries as well as perform data operations in connection with User Data Files .

It should be noted that certain embodiments may include other software components other than what is described and functionally represented in the software modules of . In the embodiment shown in both the Libraries and the User Data Files are shown as being stored locally within the host computer system. It should also be noted that the Libraries and or User Data Files as well as copies of these may be stored in another host computer system as well as in the Data Storage System of the computer system . However for simplicity and explanation in paragraphs that follow it is assumed that the software may reside on a single host computer system such as with additional backups for example of the User Data Files and Libraries in the Data Storage System .

In certain embodiments portions of the software such as the user interface the Modeling and Simulation module Data Storage and Retrieval module and Libraries may be included in combination in a commercially available software package. These components may operate on one of the host systems running Matlab V5.0 as well as one of Windows 95 or 98 Windows NT Windows XP Windows Vista Windows 7 Mac OS X Unix or Linux operating systems. One embodiment of the software may be implemented using MATLAB5.3 running on one of Windows 95 Windows NT Unix or Linux operating systems.

The User Interface module as will be described in more paragraphs that follow may display user interface screens in connection with obtaining data used in performing modeling simulation and or other problem solving for one or more systems under consideration. These one or more systems may be modeled and or simulated by the Modeling and Simulation module . Data gathered such as in connection with the User Interface and used by the Modeling and Simulation module may be forwarded to the Data Storage and Retrieval module where user entered data for example may be stored in User Data Files . Additionally other data and information may be obtained from the Libraries as needed by the Modeling and Simulation module or in connection with the User Interface . In this particular example the software in the modules may be written in any one of a variety of computer programming languages such as C C Java or any combination of these or other commercially available programming languages. For example one embodiment includes software written in MATLAB 5.3 and C. C routines may be invoked using the external function interface of MATLAB.

Additionally various data files such as User Data Files and the Libraries may be stored in any one of a variety of data file formats in connection with a file system that may be used in the host computer system for example or in the Data Storage System . An embodiment may use any one of a variety of database packages in connection with the storage and retrieval of data. The User Data files may also be used in connection with other software simulation and modeling packages. For example the User Data files may be stored in a format that may also be used directly or indirectly as an input to any one of a variety of other modeling packages such as Matlab. In particular an embodiment may provide for importing and exporting data between this system and another system such as Matlab for example. The precise format of the data may vary in accordance with each particular embodiment as well as the additional functionalities included therein.

As described in more detail elsewhere herein and in U.S. patent application Ser. No. 10 042 936 filed on Jan. 9 2002 now issued as U.S. Pat. No. 7 596 474 U.S. patent application Ser. No. 09 995 222 filed on Nov. 27 2001 now issued as U.S. Pat. No. 7 519 518 and U.S. patent application Ser. No. 09 675 778 filed on Sep. 29 2000 now issued as U.S. Pat. No. 7 623 991 the disclosures of which are each hereby incorporated by reference herein in their entirety various techniques may be used for combining application modes modeling different systems. Properties of these application modes represented by partial differential equations PDEs may be automatically combined to form PDEs describing these quantities in a combined system or representation. The combined PDEs when displayed for example in a coefficient view may be modified and further used as input to a finite element solver. It should be noted that the differential equations may be provided to the finite element solver either independently describing a single system or as a combined system of PDEs.

The software provides the ability to combine application modes that model physical properties through one or more graphical user interfaces GUIs in which the user selects one or more application modes from a list. When a plurality of application modes are combined this may be referred to as a multiphysics model. In addition to the application mode names the variable names for the physical quantities may be selected through a GUI. Application modes may have different meanings depending on a submode setting. This is described in more detail elsewhere herein.

The physical properties that are used to model the physical quantities in a system under examination in connection with the software may be defined using a GUI in which the physical properties may be described as numerical values. These physical properties may also be defined as mathematical expressions including one or more numerical values space coordinates time coordinates and the actual physical quantities. The physical properties may apply to some parts of a geometrical domain and the physical quantity itself can also be disabled in the other parts of the geometrical domain. A geometrical domain or domain may be partitioned into disjoint subdomains. The mathematical union of these subdomains forms the geometrical domain or domain . The complete boundary of a domain may also be divided into sections referred to as boundaries . Adjacent subdomains may have common boundaries referred to as borders . The complete boundary is the mathematical union of all the boundaries including for example subdomain borders. For example in certain embodiments the geometrical domain may be one dimensional two dimensional or three dimensional in the GUI. However as described in more detail elsewhere herein the PDE solution solvers may be able to handle any space dimension. Through the use of GUIs in one implementation the physical properties on the boundary of the domain may be specified and used to derive the boundary conditions of the PDEs.

Additional function included in the software such as in the Modeling and Simulation module may provide for automatically deriving the combined PDE s and boundary conditions of the multiphysics modeling system. This technique merges the PDEs of the plurality of systems and may perform symbolic differentiation of the PDEs and produce a single system of combined PDEs.

The combined PDEs may be modified before producing a solution. In certain embodiments this may be performed using a dialog box included in a GUI displaying the combined PDEs in a coefficient view . When the derived PDEs are modified in this way the edit fields for the corresponding physical properties become locked . The properties may subsequently be unlocked in certain embodiments by an explicit user action.

It should be noted that certain embodiments may include functionality for modeling any one or more of many engineering and scientific disciplines. These may include for example acoustics chemical reactions diffusion electromagnetics fluid dynamics general physics geophysics heat transfer porous media flow quantum mechanics semiconductor devices structural mechanics wave propagation and the like. Some models may involve more than one of the foregoing systems and rather may require representing or modeling a combination of the foregoing. The techniques that are described herein may be used in connection with one or more systems of PDEs. In certain embodiments described herein these PDEs may be represented in general and or coefficient form. The coefficient form may be more suitable in connection with linear or almost linear problems while the general form may be better suited for use in connection with non linear problems. The system s being modeled may have an associated submode for example such as stationary or time dependent linear or non linear scalar or multi component. Certain embodiments may also include the option of performing for example eigenvalue or eigenfrequency analysis. In the embodiment described herein a Finite Element Method FEM may be used to solve for the PDEs together with for example adaptive meshing and a choice of a one or more different numerical solvers.

In certain embodiments a finite element mesh may include simplices forming a representation of the geometrical domain. Each simplex belongs to a unique subdomain and the union of the simplices forms an approximation of the geometrical domain. The boundary of the domain may also be represented by simplices of the dimensions 0 1 and 2 for geometrical dimensions 1 2 and 3 respectively. The finite element mesh may be formed by using a Delanunay technique for example as described in Delanunay Triangulation and Meshing by P. L. George and H. Bourouchaki Hermes Paris 1998. Generally this technique may be used to divide the geometrical domain into small partitions. For example for a 1 dimensional domain the partitions may be intervals along the x axis. For a 2 dimensional square domain the domain may be partitioned into triangles or quadrilaterals. For a 3 dimensional domain the domain may be partitioned into tetrahedrons blocks or other shapes.

It should be noted that a mesh representing a geometry may also be created by an outside or external application and may subsequently be imported for use into the system s and embodiment s described in the present disclosure.

The initial value of the solution process may be given as numerical values or expressions that may include numerical values space coordinates time coordinates and the actual physical quantities. The initial value s may also include physical quantities previously determined.

The solution of the PDEs may be determined for any subset of the physical properties and their related quantities. Further any subset not solved for may be treated as initial values to the system of PDEs.

Referring now to an exemplary aspect of a user interface or GUI is illustrated that may be used in connection with specifying a multiphysics modeling system of more than one system to be combined. In this example each system to be combined may correspond to an application mode. Through the use of the GUI the application modes that are to be used in this combined multiphysics modeling system may be specified. Each application mode models physical quantities in terms of PDEs. The physical quantities may be represented either directly as the dependent variables in the PDE or by a relation between the dependent variable and the variable representing the physical quantity. The PDEs in this embodiment may be generally hidden from the user through the use of the GUIs. When several application modes are combined into one single model or system it may be referred to as a multiphysics model.

The list of application modes is the list of possible application modes from which a user may select in accordance with the user choice of space dimension indicated the buttons in the left hand top of the GUI . To add application modes to a multiphysics model the user selects application modes from the left most list box and may specify that these application modes are to be included in a multiphysics model for example selecting the button . After selection this application mode is added to the list on the right hand side of the GUI . Application modes may also be removed from the list by selecting button . Before adding an application mode the user may edit its name and names of the variables representing the physical quantities that may be solved for for example resulting in the new name and new name of the variable .

Each application mode in the multiphysics model is given a unique name that may be used to identify the origin of the variables in the multiphysics model. The example shown in the GUI is for an application mode Heat Transfer in the list . When selected using button the application mode appears on list . The user may edit the application mode name for example changing it from that included in display to the corresponding name of display item . Similarly the dependent variable name may be modified from that shown in item to the item . In this example only one variable is associated with the Heat Transfer application mode. For an application mode including more than one physical quantity the user may enter all the names of the physical quantities as space separated entries in the Dependent variables edit field .

There are also application modes that directly correspond to PDEs. In these modes the quantities are represented by the dependent variables. Each of these application modes may have more than one dependent variable. The number of dependent variables and the dimension of system of PDEs may be determined by entering one or more corresponding space separated variable names.

On the right hand side of the multiphysics GUI a solver type and solution form may be selected. The solver type may be specified in the item for example as one of stationary time dependent and the like. Similarly the solution form may be specified in item for example as coefficient or general form. These refer to the form of the PDE for which the solution is derived and are described in more detail elsewhere herein. The solver types and solution forms may vary in accordance with the application modes of the multiphysics model. In the list box all the application modes that have been added to the model appear. A user may select any of the model s application modes and change its submode . Generally a submode may relate to the manner in which equations are derived or differentiated for example with respect to what variables differentiation may be performed.

In this example the standard submode is specified at element . Additionally an application mode may include other associated submodes for example such as a wave extension submode that extends a standard time dependent equation to a wave equation using the second derivative of the standard equation with respect to time. Selecting OK using button saves the updated multiphysics model with all the added application modes and closes the GUI . In contrast selecting Cancel using button closes the GUI and discards any changes. Referring to when the OK button is selected the data may be communicated from the GUI to the Modeling and Simulation Module and subsequently to the Data Storage and Retrieval Module for storage in the User Data Files .

The foregoing screen display such as GUI may be displayed by and included as a portion of the software of the User Interface Module of the software . It should be noted that certain embodiments may include different types of application modes. In one embodiment application modes may be classified as one of user defined or predefined A predefined application mode may be one for which functionality is included in the libraries as may be available from a software vendor. In other words a software vendor may supply libraries including defined systems of PDEs GUIs and the like for a particular type of system such as heat transfer. Additionally an embodiment may include support to provide for user defined models or application modes for which a user may specify the PDEs the quantities being modeled and the like. Subsequently a user defined model may be saved in a user defined library for example included in the user defined data files . Definitions and other data files associated with a user defined model may be stored in any one of a variety of data formats for example similar to those of the libraries that may be included in an implementation by a software vendor. The format and function may vary in accordance with each embodiment.

In certain embodiments a user may define and add a user defined application mode by adding functions in MATLAB format for transforming the physical properties on subdomains boundaries and initial conditions. The user may specify a first function equ compute for transforming physical quantities to PDE coefficients a second function bnd compute for transforming the physical properties on the boundaries to boundary conditions and a third function init compute for transforming the physical properties in the initial condition. More detail on user defined application modes is described elsewhere herein.

Referring now to an exemplary aspect of an screen display of the physical property specification GUI is illustrated for the heat transfer application mode. It is contemplated that each application mode may have a specifically designed GUI display in which the physical properties associated with that application mode may be specified. The list in the left of the GUI includes one or more geometrical domains to which the physical properties may apply. These may also be referred to as subdomains. The user may select one or several subdomains from the list for example using a mouse keyboard or other selection device. If a single subdomain is selected entering a new name in the edit field Name may change the name. If the user selects multiple subdomains the properties that are specified apply to all the selected subdomains. The on top check box makes the boundary condition GUI float on top of the view of the geometrical domain also. In other words the corresponding dialog box floats on top of other items that may be displayed on the screen in connection with the GUI.

In certain embodiments if the properties of the currently selected subdomains differ the edit fields for the properties may be locked for no editing. One may unlock the subdomains by explicitly checking the Unlock check box . The properties from the first selected subdomain may be copied to all the selected subdomains.

It should be noted that in certain embodiments selecting several subdomains with different physical properties may also cause locking. Checking unlocking may then result in the properties in the first selected subdomain being copied to the other subdomains.

The physical properties of the subdomains are specified in the list . As previously described these properties may be specified as numerical values or also as symbolic expressions in terms of the space coordinates the physical quantities and their space derivatives and the time. Additionally a name of a procedure to compute a value of the property may also be specified by entering the name and any parameters that may be included in the procedure. In certain embodiments the procedure may be written for example in C Fortran or Matlab. The particular language of implementation may vary in accordance with each particular embodiment and the calling standards and conventions included therein.

A user may also disable the physical quantities of an application mode in a subdomain entirely by un checking the Active in this Subdomain checkbox . This removes the properties in from the application in the selected subdomain s . Also the physical quantities in this application mode are disabled in the selected subdomain s .

Referring now to an exemplary aspect of a screen display of a GUI is illustrated which is a physical property boundary specification GUI for the heat transfer application mode. The list in the left portion of the GUI includes geometrical boundaries where the physical properties may apply. Only the boundaries that form the outer boundary with respect to the active subdomains are included in the list. As described elsewhere herein those subdomains that are active may be specified in the GUI for physical properties.

Boundaries that are entirely inside the subdomain or between two subdomains are also not shown unless the Enable borders check box is selected. A user may select one or several boundaries from the list . If the user selects a single boundary the user can change its name by entering a new name in the Name edit field . If the user selects multiple boundaries the properties that the user specifies as in list apply to all the selected boundaries. If the properties on the currently selected boundaries differ the edit field for the properties is locked. One may unlock the subdomains by explicitly checking the Unlock check box . The properties from the first selected boundary are then copied to all the selected boundaries.

In certain embodiments selecting several boundaries with different physical properties may also cause locking. Checking unlock may then result in the properties in the first selected boundary being copied to the other boundaries.

The physical properties of the geometrical boundaries are specified in the list in the right hand portion of the GUI . These properties have values that may be specified as numerical values or symbolic expressions in terms of the space coordinates the physical quantities and their space derivatives from any application modes added by using the previous section and the time. Additionally the name of a procedure to determine the value of the property may also be specified in a manner similar to as described elsewhere herein.

It should be noted that a portion of the different GUIs displayed may be similar for example such as the on top check box that is similar in function to as described elsewhere herein.

Referring now to an exemplary aspect of a screen display is illustrated that may be used in connection with modifying the PDEs in a coefficient view . Using this interface of this may be used in connection with modifying the boundary conditions in coefficient view as associated with the combined system of PDEs. It should be noted that other embodiments may also include a similar screen display and interface to allow for modification of PDEs of each individual application mode or system being modeled. Additionally an embodiment may also include a similar screen display for modifying a system in general form rather than coefficient form as shown in the display of .

The GUI may be displayed in connection with modifying the boundary conditions associated with a coefficient. For example in the GUI the boundaries 1 and 3 have been selected as associated with the coefficient tab q corresponding to the coefficient appearing in the PDE at position . The list on the right hand side of the GUI includes the boundary conditions associated with the active q coefficient. A user may modify the conditions associated with the currently active coefficient such as q . Any one of the tabbed coefficients such as may be made active for example by selecting the tab such as with a mouse or other selection device. This causes the right hand portion of the GUI to be updated with corresponding values for the currently active coefficient. The values may be modified by editing the fields of and selecting the OK button or the apply button . The modification may be cancelled as by selecting the cancel operation button . A boundary number that is selected on list may be changed to have a symbolic name as may be specified in field . The values indicated in are set accordingly for the selected boundaries . The on top check box and other features of GUI are similar to those appearing in other GUIs and described in more detail elsewhere herein.

It should be noted that the PDE coefficient and boundary conditions associated with the combined system of PDEs for the various application modes selected may be stored in a data structure that is described in more detail elsewhere herein. Subsequently if these coefficient and boundary conditions are modified for example using the GUI of the corresponding data structure field s may be updated accordingly. As described elsewhere herein and in U.S. patent application Ser. No. 10 042 936 filed on Jan. 9 2002 now issued as U.S. Pat. No. 7 596 474 U.S. patent application Ser. No. 09 995 222 filed on Nov. 27 2001 now issued as U.S. Pat. No. 7 519 518 and U.S. patent application Ser. No. 09 675 778 filed on Sep. 29 2000 now issued as U.S. Pat. No. 7 623 991 the combined system of PDEs and associated boundary condition fields may be updated.

It should also be noted that the dialog for modifying the boundary conditions in coefficient view of a system of three variables may be viewed in the example GUI of . If the system to be solved is in general form the coefficient view dialog box may also include symbolic derivatives of the general form coefficients with respect to the physical quantities or solution components and their derivatives according to . As described in more detail elsewhere herein the derivatives may be used for the solution of nonlinear stationary and time dependent problems.

In certain embodiments when the coefficients in coefficient view are changed for a subdomain or a boundary the Unlock check box in the corresponding application modes for that subdomain or boundary dialog box is enabled as previously described in connection with GUI of . In certain embodiments in order to disable the change in coefficient view a user may remove the checkmark as may be displayed in the Unlock check box on the subdomain or boundary in the application mode for example as described in connection respectively with GUIs and .

Using the GUIs and for respectively physical properties for subdomains and boundaries as well as possible modifications specified as with GUI the Modeling and Simulation Module may create initialize and possibly modify the data structure of .

Referring now to shown is an example of a representation of the data structure that may be included in an embodiment in connection with storing data in connection with the PDEs selected and combined. The data in the data structure may include data used in connection with the multiphysics model.

The field fem.mesh includes the finite element discretization. The mesh partitions the geometrical domain into subdomains and boundaries. Data stored in this field may be created from an analyzed geometry. A mesh structure representing a geometry may also be created by an outside or external application and may subsequently be imported to use in this system in this embodiment. To obtain good numerical results in the solution to a particular multiphysics problem the mesh may have certain specific characteristics available in connection with an externally provided mesh such as by a MATLAB routine. In instances such as these a mesh may be imported from a compatible external source. Support may vary with embodiment as to what external interfaces are supported and what external formats of meshes may be compatible for use with a particular implementation. For example a mesh structure may be compatible for use with an embodiment such as a mesh structure produced by the product TetMesh by Simulog and HyperMesh by Altair Engineering.

In one embodiment a geometry is used in generating a mesh structure. In other words in an embodiment that includes functionality to define and create a mesh as an alternative to obtaining a mesh for example from an external compatible software product a geometry definition may be used in generating a mesh structure. What will now be described is a function that may be included in an embodiment. An embodiment may include any one or more of a variety of alternatives to represent a geometry of a PDE problem to be solved. One technique includes defining a geometry in accordance with a predefined file format predefined formatted object and the like. It should be noted that an embodiment may include the option of importing a predefined file format or specifying a function for describing the geometry.

It should be noted that the predefined file format may include differences in accordance with the varying dimensions that may be supported by an embodiment.

An embodiment may include a function or routine definition for returning information about a geometry represented in accordance with a predefined file format. This routine may be included in an implementation or may also be defined by a user. In other words an implementation may include support allowing a user to provide an interface function in accordance with a predefined template or API such as particular input and output parameters and function return values. Such a routine may be used as an interface function for example to obtain geometry information in which a geometry may be represented in any one of a variety of predefined file formats data structure formats and the like.

The fem.mesh structure may represent a finite element mesh that is partitioning a geometrical domain into simplices. In one embodiment minimal regions may be divided into elements and boundaries may also be broken up into boundary elements. In one embodiment of the mesh structure the mesh may be represented by fields of data two of which are optional. The five fields are the node point matrix p the boundary element matrix e the element matrix t the vertex matrix v and the equivalence matrix equiv in which v and equiv may be optional. The matrix p includes the node point coordinates of the mesh. The matrix e may include information to assemble boundary conditions on such as node points of boundary elements parameter values on boundary elements geometry boundary numbers and left and right subdomain numbers. The matrix t includes information needed to assemble the PDE on the domain . It includes the node points of the finite element mesh and the subdomain number of each element. The matrix v includes information to recreate geometric vertices. The equiv matrix includes information on equivalent boundary elements on equivalent boundaries. It should be noted that contents and of the data structure may vary with dimension of the domain being represented. For example in connection with a 2 dimensional domain the node point matrix p may include x and y coordinates as the first and second rows of the matrix. The boundary element matrix e may include first and second rows that include indices of the starting and ending point third and fourth rows including the starting and ending parameter values a fifth row including the boundary segment number and sixth and seventh rows including left and right hand side subdomain numbers. The element matrix t may include in the first three rows indices of the corner points given in counterclockwise order and a fourth row including a subdomain number. The vertex matrix v may have a first row including indices into p for vertices. For isolated vertices the second row may also include the number of the subdomain that includes the vertex. For other vertices the second row may be padded. The field v may not be used during assembly but rather have another use when the mesh structure for example may be used in connection with other operations or data representations. The equivalence matrix equiv may include first and second rows of indices into the columns in e for equivalent boundary elements. The third and fourth row may include a 1 and 2 or a 2 and 1 depending on the permutation of the boundaries relative to each other.

As another example of the mesh structure consider one that may be used in connection with a 1 dimensional structure being represented. The node matrix p may include x coordinates of the node points in the mesh in the first row. In the boundary element matrix e the first row may include indicates of the boundary point the second row may include the boundary segment number and the third and fourth rows may include left and right hand side subdomain numbers. In the element matrix e the first two rows include indices to the corner points given from left to right and the third row includes the subdomain number. In a 1 dimensional domain there is no vertex matrix since vertices are exactly equivalent to the boundaries. In the equivalence matrix equiv the first and second rows include indices into the columns in e for equivalent boundaries. The third row is padded with ones.

In one embodiment the fern structure may additionally include a fem.equiv field indicating boundaries that should be equivalent with respect to elements and node points e.g. for periodic boundary conditions. One implementation of fem.equiv includes a first row with master boundary indices and a second row with slave boundary indices. The mesh has the same number of node points for the boundaries listed in the same column. The points are placed at equal arc length from the starting point of the equivalent boundaries. If a negative number is used in row two the slave boundary may be generated by following the master boundary from end point to start point. A master boundary may not be a slave boundary in another column.

Following is a summary of the Delaunay triangulation method in connection with forming a 2 dimensional mesh structure 

3. Perform Delaunay triangulation of the node points on the boundaries and the vertices of the box. Use the properties MINIT ON and BOX ON to see the output of this step.

4. Insert node points into center of circumscribed circles of large elements and update Delaunay triangulation until HMAX is achieved.

The foregoing properties may be used in connection with forming a mesh structure. The Box and Minit properties are related to the way the mesh method works. By turning the box property on one may obtain an estimate of how the mesh generation technique may work within the bounding box. By turning on minit the initial triangulation of the boundaries may be viewed for example in connection with step above.

Hcurve is a scalar numeric value relating the mesh size to the curvature of the geometry or mesh boundaries. The radius of the curvature is multiplied by the hcurve factor to obtain the mesh size along the boundary. Hexpr is a string including an expression of x and y giving the size of the elements at different coordinates using the mesh structure. Hmax controls the size of the elements in the mesh. Hmax may either be a global value or a cell array. The syntax of the cell array varies in accordance with 1 D and 2 D. For 2 D the first entry in the cell includes a global Hmax the second entry is a matrix with two rows where the first row includes point indices and the second row includes Hmax and corresponding points. The third entry includes indices to edge segments and corresponding Hmax and the fourth entry includes indices to subdomains and corresponding Hmax. For a 1 D the first entry in the cell includes a global Hmax the second entry is a matrix with two rows where the first row includes point indices and the second row includes Hmax in the corresponding points. The third entry includes indices to the subdomains and corresponding Hmax.

Hmesh is a vector with one entry for every node or element in the mesh given in the mesh structure. Hnum controls the approximate number of elements in the mesh. Depending on other properties the number of elements specified by Hnum may be exceeded but at least as many elements specified are generated. Hnum may be either a global numeric value or a cell array. Syntax of the cell array varies with 1 D or 2 D. For 2 D the first entry in the cell includes a global Hnum the second entry is a matrix with two rows where the first row include edge indices and the second row includes Hnum on the corresponding edges. For 1 D the first entry in the cell includes a global Hnum the second entry is a matrix with two rows where the first row includes subdomain indices and the second row includes Hnum on the corresponding subdomain.

The Hpnt property controls the number of points placed on each edge to resolve the mesh. Additional points may be placed as needed in accordance with the curvature and distances. It is either a number for all edges or a cell. If it is a cell array the first entry applies to all edges and the second entry is a matrix with two rows where the first row includes edge indices and the second row includes Hpnt on that edge.

The Jiggle property may be used to control whether jiggling of the mesh may be attempted for example in using a smoothing technique. This may be performed until the minimum or mean of the quality of elements decreases by setting jiggle accordingly to min or mean. Jiggleiter may be used to specify a maximum number of iterations.

It should be noted that the foregoing properties may be included as parameters to an API for forming a mesh structure for example using the Delaunay triangulation method. Other techniques may also be used and the exact parameters in an embodiment using an API may also vary. Additionally other embodiments may also include other representations of the mesh structure that may vary in accordance with dimension of the geometry.

Referring back to other fields of the fern structure in one embodiment each application mode has a separate fem.appl i field referred to as appli. The index i in the appl vector runs over the set of application modes that have been selected for example in connection with . In this embodiment corresponding to each appli for each selected application mode are five subfields denoted . The appl i.dim field includes the names of the dependent variables or physical quantities in application mode i. The appli.equ field includes the physical properties associated with subdomain data for example as described in connection with . The field appli.bnd includes data describing the physical properties associated with boundary data for example as described in connection with for application mode i. The field border is a flag that controls if boundary conditions on inner boundaries are to be considered and for example corresponds to the Enable Borders check box as described in connection with the GUI of . There is one border flag for each application mode. The field usage corresponds to the Activate in this Subdomain check box as described in connection with the GUI of . In one embodiment this may be implemented as a boolean vector with one column for each geometrical subdomain. A logical value of 1 or true in an entry indicates that application mode i is active in the subdomain corresponding to that column. Fem.appli.submode represents a corresponding submode setting such as of .

In one embodiment the remaining fields in the data structure may be associated with the combined application modes. The field fem.dim includes the names of the dependent variables or physical quantities in all application modes. The fields fem.equ and fem.bnd correspond to the derived equations and boundary conditions for all the application modes. These fields may be used in connection with data from dialog boxes for PDE and Boundary conditions in coefficient view such as those GUIs described in connection with . Similarly the field fem.border may be implemented as a vector specifying borders for each variable of the variables in appli.dim separately. The field fem.usage includes data associated with the activation of dependent variables in each geometrical subdomain. The variables in fem.dim correspond to the rows of the fem.usage field and the columns correspond to the geometrical subdomains. The field fem.init includes the initial value for nonlinear and time dependent solvers for example as may be used in connection with solving for the PDEs. The field fem.sol may include the solution to the combined system of PDEs using a solution or PDE solving technique for example as may be selected in accordance with the GUI of other parameters included in the structure and the type of PDE system being solved such as whether the PDEs correspond to a linear or non linear system are in coefficient or general form and the like. The field indicates that other fields may be included in an embodiment in accordance with each implementation.

The equ fields may include several application mode dependent subfields with one list per physical property. Each list entries correspond to the subdomains of the problem. Each subfield may include a list of expression values representing the physical properties involved. For example the heat transfer application mode includes the list rho C k Q htrans Text Camb Tambtrans corresponding respectively to the density heat capacity coefficient of heat conduction heat source convective heat transfer coefficient external temperature user defined constant and transversal ambient temperature. This may be interpreted as a heat source of Q htrans Text T Camb Tambtrans 4 T 4 on a subdomain.

The usage fields and describe the setting of the Active in this subdomain setting for each physical property or dependent variable . The bnd fields include several application mode dependent subfields with one list per physical property. The list entries correspond to the boundaries of the subdomain. Each subfield contains a list of expression values for the physical quantities involved e.g. the heat transfer application mode contains the list q h Tinf C Tamb and T corresponding to the heat flux and heat transfer coefficient external temperature user defined constant ambient temperature and temperature respectively. An additional subfield type controls the basic type of the boundary condition and what physical properties are used on the boundary. For example referring to the heat transfer application mode the type may be one of T0 T q or q0. T0 indicates a zero temperature T indicates that the temperature is specified in the field T and q0 indicates a zero heat flux through that boundary and q indicates a heat flux of q h Tinf T C Tamb 4 T 4 through that boundary.

The border fields and indicate if the internal boundaries between subdomains are to be considered during the solution of the model. In one embodiment the outer boundaries with respect to the active in this subdomain setting may be ignored. The equ fields and and the bnd fields and may further include an ind subfield. Each of the ind subfields may be implemented as a vector with length equal to the number of subdomains or boundaries. For each subdomain the corresponding ind vector entry may indicate a domain group or 0 for no group. For boundaries each of the subfields bnd.ind may have the corresponding meaning for boundaries. When the ind field is not given each subdomain or boundary forms a separate group.

Referring back to in connection with GUI fields in fem.equ and fem.bnd may be modified if they are specified as being applied to the combined PDE system and subsequently modified for example using the GUI .

Referring now to an exemplary aspect of a screen display is illustrated that may be used in connection with solving the PDEs for any subset of physical quantities from any one or more application modes or of the combined PDE system. The GUI includes a left hand portion displaying the one or more application modes selected with the current combined or multiphysics mode. The show variables box if checked or activated may modify the content displayed in area to further include dependent variables in each of the associated application modes. In this instance the physical quantities may be selected as well as a particular application mode with regard to solving for the combined system of PDEs in which the combined system includes those systems corresponding to the application modes in the area . The area includes one or more various options that may be associated with solving for the PDEs. In this embodiment the reference to u as included in the area refers to all physical quantities for all application modes. Activating the field causes the updating of the appropriate data structure fields upon solving for the system of PDEs. Activating field uses interpolation in solving for the PDEs. This is described in more detail elsewhere herein.

The GUI may be used in selecting what physical quantities to solve for in the System of PDEs. Selecting all application modes such as by selection an highlighting application modes of area solves for all physical quantities in the system of PDEs. Selecting a subset of the application modes solves for all the variables in these application modes. In one embodiment checking the checkbox Show variables shows the actual variable names instead of the names of the application mode and enables selection of these. The Update u button inserts the current solution in fem.sol into the initial conditions in fem.init . The check box update u automatically makes u automatically update the data structure fields fem.init with fem.sol each time a solution is computed and the check box use interpolation allows interpolation to be used when the current solution and the current discretization mesh are different. In one embodiment the solution may be interpolated to the current discretization and inserted into fem.init. The use of interpolation for example is set forth in Numerical Methods G. Dahlquist . Bj rk Prentice Hall 1974 ISBN 0 13 627315. The Use solution number pop up menu controls which solution to update fem.init with for example if there are several columns in fem.sol as may be for a time dependent problem.

The values in the physical property fields of the application mode appl structure for each of the i selected application modes may be converted into PDEs. The formats of the PDEs formed for each specified application mode may be represented as in .

Referring now to shown is an example of an embodiment of formulae describing a system of PDEs in coefficient form. formula is for a bounded domain. The formulae including correspond to the boundary of the domain . ncorresponds to the components of an outward unit normal.

The first equation is satisfied inside the domain and the second and third equations of are both satisfied on the boundary of the domain. The second equation may be referred to as a generalized Neumann boundary condition and the third equation may be referred to as a Dirichlet boundary condition.

The unknown solutions such as those corresponding to the physical quantities may be denoted by uin the formulae of . The unknown solutions may include one or more components. N denotes the number of solution components or physical quantities. The solution is allowed to take complex values. is an unknown Lagrange multiplier. nis a component of the gradient of the solution. The coefficients included in the formulae d c f q g h and rmay be complex valued functions of the space time and the solution. The coefficients d c g a and f may be functions of the gradient of u.

For a stationary system in coefficient form for example as may be specified in item d 0. With respect to solution components the coefficients d c a and q are N by N matrices and f and g are N vectors. The coefficient h is an M by N matrix and r is an M vector where 0

Referring to the indices of the formulae i and j are space indices and k and l are component indices. Using the standard summation convention i.e. there is an implicit summation over each index pair i and j and k and l the formulae of where the indices i and j run from 1 to n the indices k and l run from 1 to N and where the index m runs from 1 to M. nis the jth component of the outward normal vector.

Referring now to shown is an example of an embodiment of a representation of formulae describing a system of PDEs in general form. Here is a bounded domain each and of is a boundary of the domain and nis the outward unit normal. The unknown solution is denoted by uand may include one or more components. N denotes the number of physical quantities. The solution is allowed to take complex values. is an unknown Lagrange multiplier. The generalized Neumann condition for example as expressed by includes a source where the Lagrange multipliers are computed such that the Dirichlet conditions become satisfied. The coefficients F G and R may be complex valued functions of the space time the solution and its gradient. With respect to solution components the coefficients F and G are N vectors. The coefficient R is an M vector where 0 M N and N is the number of constraints. The coefficient is an n vector with respect to space dimension n. The rest of the coefficients are scalars with respect to space. Using j as a space index and k and l as component indices in conjunction with implied standard summation convention the general form of may be expressed where the index j runs from 1 to n the indices k and l run from 1 to N where the index m runs from 1 to M and nis the jth component of the outward normal vector.

The application mode physical properties for example as described in connection with each selected application mode corresponding to an entry in the appli structure may be converted to the representation of PDEs in coefficient and or general form. The combined PDEs may be represented in fields of the data structure such as in the equ and bnd fields.

As described in more detail elsewhere herein in one embodiment the same syntactic rules may be used in determining coefficients for both PDEs as may be represented in the equ field and boundary conditions as may be represented in the field . In other words as summarized here and described further in more detail elsewhere herein are syntactic rules that may be used in forming coefficients for the PDEs. These rules may be used in forming coefficients for each system of PDEs associated with each application mode. These rules may also be used in connection with forming coefficients for the combined PDE or multiphysics system. The coefficients may be stored in nested lists. Each nested level of the lists may correspond to a nesting index position. For example level 1 may corresponds to subdomain boundary level 2 may correspond to a solution component or physical quantity and level 3 may correspond to the space coordinate. Level 4 may be a value level where the actual expressions are stored. In connection with forming coefficients for each application mode selected input data as may be obtained in connection with previously described GUIs may be converted to PDE format. Coefficients may be formed as part of this process. Data for each application mode may be stored in fields of the appli data structure subfields dim form equ bnd and init.

For the combined or multiphysics referring back to fields of the data structure described in more detail elsewhere herein the following list provides the position in the data structure for the combined system of PDEs and boundary conditions with regard to those elements referenced for example in d equ.da c equ.c equ.al equ.ga equ.be a equ.a f equ.f q bnd.q g bnd.g h bnd.h r bnd.r.

The general form coefficients for example as described in connection with and in more detail elsewhere herein F G and R may be stored in the equ.ga equ.f bnd.q and bnd.r fields respectively. A uniform format may be used for each of these coefficients. Subdomains and boundaries may be merged into groups where the expressions for the PDEs and boundary conditions are the same.

A subfield equ.ind of field may be a vector with length equal to the number of subdomains. For each subdomain the corresponding entry designates a subdomain group or 0 for no group. Similarly the field bnd.ind has the corresponding meaning for boundaries. When the ind field is not given each subdomain or boundary form a separate group.

The data structure field fem.border controls if assembly of boundary conditions are performed on borders. In one embodiment this may be implemented as one or more boolean conditions each representing two states on and off . Setting fem.border to off default turns off assembly on borders and setting fem.border to on turns on assembly on borders. An embodiment may implement fem.border as an array of text strings with either on or off conditions specified or a vector of logical values. The length of the array or the vector may be equal to the number of dependent variables. A border for a given dependent variable has that variable activated by fem.usage on each side.

What will now be described are formal rules of one embodiment for determining coefficients at varying levels. Given a PDE or boundary coefficient P1 with L subdomains boundary groups and N solution components n space coordinates with a varying number of levels such as 1 4 having corresponding coefficient leveling notation P1 P4 respectively the formal rules for coding the coefficients at varying levels in one embodiment may be represented as 

Level 1 subdomain boundary level If P1 is a cell array then each element of P1 is a P2 otherwise P1 is a single P2. The number of P2s in P1 is either 1 or L.

Level 2 solution component level If P2 is a cell array then each element of P2 is a P3 otherwise P2 is a single P3. If P2 is a d c a or q coefficient the number of P3s in P2 is 1 N N N 1 2 or N. If P2 is a f or g coefficient the number of P3s in P2 is 1 or N. If P2 is an h coefficient the number of P3s in P2 is 1 or MN where M is an integer between 0 and N representing the number of constraints. If P2 is an r coefficient the number of P3s in P2 is M.

Level 3 space coordinate level If P3 is a cell array then each element of P3 is a P4 otherwise P3 is a single P4. If P3 is a c coefficient then the number of P4s in P3 is 1 n n n 1 2 or n. If P3 is an a f q g h r or da coefficient there is one P4. If P3 is an or coefficient there are n P4s.

Level 4 value level A single item including a symbolic text expression for computing PDE coefficient values. The expression may be evaluated where the variables xi sd ui uixj and h correspond respectively to representing the ith coordinate subdomain label ith solution component jth derivative of the ith solution and the local element size. ui and xj may refer to the variable names defined by fem.dim and fem.sdim independent variable names or space coordinate names respectively. It should be noted that fem.sdim may be an additional field included in the portion of data structure in an embodiment.

What will now be described is one embodiment of a method for converting application mode physical properties on subdomains and boundaries into a PDE form either general or coefficient. In other words once data is input and stored in the structure this data may be expanded or transformed into another form used in subsequent processing steps. In other words the following may be used in connection with converting GUI data into PDE format for each application mode.

It should be noted that in the following example the GUI or input data is stored in a temporary or tmp structure for each application mode. The combined system of PDEs may be formed using as input each of the tmp structure for each application mode. An embodiment may store a representation of the combined PDE system in the fem structure as described in more detail elsewhere herein.

The application mode properties in the fields equ and bnd in the appl i structure are rewritten as symbolic expressions by using an application mode dependent set of transformation rules e.g. for heat transfer.

It should be noted that the foregoing rules to produce symbolic expression may vary with application mode. For example the foregoing rules may be used in connection with forming coefficients for heat transfer application mode. As known to those of ordinary skill in the art the techniques may be applied to forming coefficients for other application modes. It should be noted that functionality associated with the above description is included in one embodiment as a function appl2fem as described in the FEMLAB V1.1 Reference Manual from Comsol AB 1999.

The foregoing may be performed for each of the application modes i to expand or transform data into PDE form data included in the application mode structure tmpi. This structure tmpi includes a representation of the physical properties as instances of the PDE formulae of or .

The fields usage and border for the tmp data structure may be copied from the corresponding fields in the data structure . The field dim may be updated with another variable name and introduce a relation between the physical quantity and the dependent variables and introducing this relation when the equ and bnd fields are transformed into the tmp structure.

The submode setting described elsewhere herein in more detail for example in connection with may be used in determining the number of variables. The submode setting may be used to distinguish between a stationary and time dependent problem. In certain application modes such as structural mechanics the number of dependent variables in the application mode may vary in accordance with a submode setting or selection. For example PDE formulation as described in connection with does not provide for a second order time derivative. Thus for example in application modes related to structural mechanics where the displacements are the dependent variables it may be desirous to add the velocities of the displacements as dependent variables in addition to the displacements. Thus the application mode describing the system may include twice the number of variables for the time dependent subdomain than for the stationary.

What has just been described are processing steps that may be included in an embodiment in connection with expanding or converting input data as using the GUIs into a PDE form such as general or coefficient.

An embodiment may continue by merging the formulae associated with a plurality of application modes and PDEs into a single system of combined PDEs. Appending the subsystems in the order they are specified in each of the fem.appl creates the composite system. In one embodiment the affected fields in the data structure structure may include dim form additional field in area indicating problem form as general or coefficient in this example equ bnd border and usage .

The dim field of the composite system may be obtained by concatenating the dim field lists from each of the application modes appl i. The default form of the composite system is the most general form of the subsystems where general is the most general form and coefficient is the least general form.

The conversion of a PDE in coefficient form to general form is described elsewhere herein. The output form may be forced to general form by forcing the conversion also if none of the appli application modes are specified in general form. A value may be stored in an additional field that may be included in an embodiment of the data structure such as an additional field in the area indicating the type of problem form for example as one of general or coefficient in this embodiment.

The equ and bnd fields in the data structure may be determined using corresponding fields appli in the application modes after each application structure has been converted to the representation of the PDEs and the desired output form according to . The coefficients in the second row may be deemed weakly coupled in the sense that the corresponding coefficients in the composite system are block diagonal. This may limit the coupling between the subsystems. By using general form however there are no limitations on the composite system. In this embodiment the border field in the data structure may indicate a list of on off one for each solution component. The usage field may be determined using the usage matrices such as of each subsystems by concatenating usage lists as rows in a matrix.

Thus one technique for combining PDEs may be represented by the following pseudocode like description 

In the above description the Nsub denotes the number of subdomains in the geometry Nappl denotes the number of application modes and Nbnd denotes the number of boundaries. Ndim i is the number of dependent variables of the application mode.

The result of performing the foregoing is the data representation of the system of PDEs corresponding to the full multiphysics system of the combined PDEs for the selected application modes. In an embodiment the above procedure is documented as function multiphysics in the FEMLAB V1.1 Reference Manual.

It should be noted that if the systems represented in the structure tmpi are converted to general form the foregoing pseudocode description may be applied to the coefficients for example as represented by ga corresponding to gamma f g r.

An embodiment may include storing the data for the PDEs and boundary conditions for each application mode in a more compact format using for example the ind field in appli.equ and appli.bnd. In one embodiment as also described elsewhere herein the ind fields may be implemented each as a vector with length equal to the number of subdomains or boundaries. For each subdomain the corresponding entry designates a domain group or 0 for no group. Similarly the field bnd.ind has the corresponding meaning for boundaries. When the ind field is not given each subdomain or boundary forms a separate group. It should be noted that when using this compact format representation feature and the appli.equ.ind or appli.bnd.ind fields are different for the selected application modes the ind fields may also be merged or combined into the ind fields in fem.equ.ind subfield of 258 and fem.bnd.ind subfield of 260 . These fields may have a minimal common set of subdomain or boundary groups. This may be determined for example by jointly sorting the groups in the application modes and removing duplicates.

In one embodiment the solution procedure uses the Finite Element Method FEM to solve the system of PDEs in coefficient and general form for example as represented in . This is described for example in The Mathematical Theory of Finite Element Methods S. C. Brenner L. R. Scott Springer Verlag ISBN 3 540 94193 2. This is a well known procedure but has been adapted to specifically fit a particular context of one embodiment. In this embodiment the first equation in element and the first equation in element may be multiplied with an arbitrary test function v and integrated over the domain such as integrated by parts for example using Green s formula. The boundary integral may be replaced using the Neumann boundary condition. Furthermore the Dirichlet boundary condition may be multiplied by an arbitrary test function and integrated on the boundary and obtain the variational formulation of the full problem Find and such that for all v m l 1 . . . N and m 1 . . . M the equations in and hold for coefficient and general form respectively.

As described in connection with one embodiment the PDE system to be solved may be passed to a solver algorithm for PDEs that uses the finite element method. In addition to the data structure that may include the representation of the PDEs two sets of constraint matrices may be used and are referred to and described in more detail elsewhere herein in connection with particular features that may be included in an embodiment.

The finite dimensional function space is the set of piecewise linear functions on a triangulation of the domain . u and may be approximated for example using the formulae of where is linear on each element continuous and 0 on all node points in the triangulation except the node point I. is a delta function at a vertex L on a boundary element K.

By using the test functions and on the weak form of the PDE in coefficient form it may be determined that the formulae of applies for all J and l and that the formula of apply for all K L and m. The finite element discretization represented by of may be determined. It should be noted that the integrals as included in the formulae of may be computed using a Gauss quadrature within each element. The formula corresponding to those of of of for general form may be represented as in formulae of .

With reference to the data structure described elsewhere herein when the integrals in of are computed the initial value in fem.init may be used as values for the solution when it occurs in the expressions in the PDE coefficients and boundary conditions.

By numerically computing the matrices according to the foregoing formulae the systems of equations represented in and may be determined. In particular referring to shown are formulae in coefficient form and referring to shown are formulae in general form in which C AL BE A and Q are NN by NN matrices and F GA and G are NN vectors. H is a NnM by NN matrix and R is a NnM vector. The DA matrix is used in time dependent and eigenvalue problems. When these matrices are produced the first index in the index list in is expanded first.

Linear solvers nonlinear solvers time dependent solvers and eigenvalue solvers may be used in solving systems of PDEs of in coefficient form and PDEs of in general form. Such solvers or solving techniques are generally known in the numeric literature for example such as in Numerical Methods G. Dahlquist . Bj rk Prentice Hall 1974 ISBN 0 13 627315. In one embodiment a technique may be used to generate the Jacobian for nonlinear solvers and for solvers of time dependent problems. This technique may be used in systems in general form or PDE systems that have been converted from coefficient form to general form for example as described in connection with the formulae of .

It should be noted that use of PDEs in general form may be used to more efficiently provide PDE solutions in solving for non linear systems of equations. One technique as described elsewhere herein in more detail may utilize the general form to derive a Jacobian. This may be more efficient than using the coefficient form for solving for non linear systems. Using this general form to derive the Jacobian the Newton method may then be used. shows an iteration of using the Newton method.

For the combined system or multiphysics the solution may be stored in the field fem.sol of the data structure . In one embodiment the solution field may represent the solution to a PDE system as a vector having the same number of elements as the corresponding U. Similarly fem.init may include the initial value for the nonlinear and time dependent solvers. For time dependent solutions there may be several columns in fem.sol one for each point in time.

Referring now to shown is an example of the formulae that may be used in an embodiment in converting from coefficient to general form of the PDEs. The conversion from coefficient to general form may be performed on the appi structure for each application mode separately in accordance with the form desired for example as may vary in accordance with equation or system type. For example if a system being solved is in coefficient form and it is a non linear system it may be desired to convert from the coefficient form to general form using the formulae of in conjunction with the other formulae for coefficient form to produce a system of PDEs of the general form such as those represented by the formulae of . This conversion may also be performed in accordance with a user selected or specified mode for example as may be included in an embodiment. Other embodiments may perform this conversion from coefficient to general form in connection with other function that may be included and vary with implementation.

The formulae of may be used to derive F G and R from d c a f q g h and r as included in the formulae of . This may be performed for example as by symbolic manipulation of the mathematical expressions.

The discretization by the finite element method given a nonlinear system of equations in as in the general form of may be viewed as the problem U 0 where U is the vector of unknown coefficients of the finite element solution to the PDE problem. In this instance DA 0 since this problem is stationary. The LaGrange multipliers may be considered auxiliary values U which may be assumed to be eliminated. For the solution of the discretized system an affine invariant form of the dampened Newton method may be applied Given an initial guess U a sequence of iterates Uis computed by the iteration formula in where J U U U and 0 1 denotes a damping factor.

Subsequently solving for Uabove may utilize the solution of a linear system of equations. If J U is chosen as the exact Jacobian the iteration formula above may be interpreted as the finite element discretization of a linearized equations in coefficient form by applying the settings in of . The coefficients in the coefficient form PDE may be formed as symbolic derivatives of the coefficients in the general form PDE with respect to the solution and its gradient.

It should be noted that the Active in this subdomain feature for selective inclusion or variation of a variable in a system may be implemented in one embodiment by adding a constraint to the H and R matrices to not a number in IEEE arithmetic. One row containing the constraint may be added to H and R for each node point in the deactivated subdomains and dependent variables.

It should also be noted that when the system of PDEs is assembled for example according to the variables not to solved for may be used in the expressions for PDE coefficients and boundary conditions. In one embodiment the solve for variable feature may be implemented by adding a constraint to the H and R matrices that constrains the solution in the node points the value of the previous solution in the same point one row containing the constraint is added to H and R for each node point and dependent variable.

The foregoing description may be used in forming a multiphysics model and solving for selected variables. Steps of one embodiment may be summarized in the form of a flowchart and accompanying description.

Referring now to and shown is an example of an embodiment of a flowchart of steps of one method for automatically specifying one or more systems of PDEs representing them in a single combined form and solving a system of PDEs. At step a first application mode is selected. It should be noted that each application mode corresponds to a particular system being modeled. The selection of one or more application modes may be performed for example in one embodiment using the GUI of the previously described . At step a determination is made as to whether the processing steps formed by the loop at the top of step are complete for all application modes. If a determination is made at step that processing of all the applications modes selected at step control proceeds to flow point A. Otherwise control proceeds to step where the physical properties associated as active with the current application mode are determined. The physical properties associated with an application mode may be selected for example in connection with GUI of . Control proceeds to step where the boundary condition for the current application mode is determined. The boundary conditions may be determined for example using the GUI of the previously described .

Control proceeds to step where data structures are created and initialized using the physical properties and boundary conditions specified for the current application mode in connection with the processing for example of steps and . At step the coefficient PDEs may be formed using physical property and boundary data obtained in connection with steps and and accordingly stored in the data structure created and initialized at step . Recall as previously described that the PDE in coefficient view or form may be represented as described in connection with the formulae of . Additionally recall that a temporary data structure may also be used when forming the coefficients for each application mode. At step the general form of the PDE may also be formed. Accordingly the data structure initially created at step may be updated to include the information about the general form for the PDE system. It should be noted that the general PDE formed at step may be as represented by the formulae previously described in connection with . A temporary data structure may also be used in storing data for the coefficients formed in connection with processing of step similar to that as may be used in connection with step .

An embodiment may provide an option to allow for data entry display and modification in coefficient form general form or both of these forms. If more than one is included in an embodiment there may be a default or a user selection option. Thus processing associated with steps and may be optionally performed in accordance with what may be included in an embodiment and may additionally be in accordance with a user selection. One embodiment provides for data entry modification and PDE solving associated with an application mode in either coefficient view or general form. Coefficient view may be selected for data entry and modification with the additional user input selection of producing general form and solving PDEs using either form. If general form is selected for data entry without coefficient view PDE solving may be performed by default using a system of equation in general form. As known to those of ordinary skill in the art in accordance with the PDE system being solved solving using the general form may be more efficient and desired over use of coefficient form. For example in solving PDE systems for non linear systems use of the general form may be more efficient.

At Step an embodiment may include optionally functionality to modify the boundary conditions and or PDEs of the current application mode. It should be noted that if an embodiment includes the function of modifying a PDE for each application mode the previously described locking mechanism may operate differently since PDEs may change per application mode.

At step a next application mode may be selected. Control proceeds to step where a determination is again made as to whether processing all the application modes is complete.

When all the application modes are selected and done being processed in connection with the processing steps formed by the loop beginning with a decision at step control proceeds to flow point A step where PDEs for all the previously entered application modes are combined forming a combined PDE system. In other words the result is a single PDE system representing the combination of all the previously described systems in connection with all the previously specified application modes. It should be noted that in one embodiment described in more detail elsewhere herein data associated with the PDE of each application mode may be stored in a temporary structure for each application mode. At step in this instance the temporary data structures may be used as input for producing the combined PDE system or multiphysics system of PDEs. At step an embodiment may optionally provide for modifying the combined PDE system or other systems. Control proceeds to step where the PDEs or variables associated with PDEs may be solved. An embodiment may provide variations as to what variables or PDEs may be solved for in the processing of step . One embodiment may allow the user to select solving for one of the PDEs associated with individual application modes the combined PDE system or variables from different PDEs. Control proceeds to step where the processing of the flowchart stops.

What has just been described is the general processing of the overall system for automatically forming one or more sets of PDEs associated with one or more application modes or systems. These systems may be combined into a single combined PDEs system. A programming module such as the finite element solver that may be included in the Modeling and Simulation Module may solve a system of PDEs. The finite element solver for example may solve a single system of PDE corresponding to a single application mode may solve for the combined PDE system for example as computed or determined in connection with the processing step . An embodiment may also solve for one or more variables associated with one or more application mode using any one of a variety of known solving techniques.

What will now be described in more detail is how user defined application modes and user defined applications may be used in the foregoing system and with the techniques described herein. Generally a user defined application mode in one embodiment may be an equivalent to a predefined application mode such as heat transfer described elsewhere herein. An application mode is distinguishable from an application . In this embodiment an application may be associated with a user defined subclass from a class for example that may be associated with an application mode. An application may be defined by a user for example when it may be useful to create a specialized or narrower definition of an existing class corresponding to an application mode. In this way routines and code common in more than an application may be shared since fore example in this embodiment functionality of one or more applications subclasses may be inherited from an application mode.

Alternatively a user defined application mode rather than a user defined application may be more appropriate for example when such functionality is not common or bears little or no relationship in functionality to an existing application mode.

In one embodiment an application mode may be predefined such as Diffusion or Heat Transfer included in one embodiment of the software or user defined. User defined application modes may be created using an Application Program Interface API such as those described in the FEMLAB V1.1 Application Program Interface manual. In contrast to the user defined application mode is the user defined application. A difference between the user defined application mode and user defined application is that a user defined application may be much more specialized for example regarding the geometry modeling meshing and the GUI appearance. Use of the API allows users to add new functionality to FEMLAB or remove functionality in order to tailor software of an existing application mode to better fit a particular use as may be associated with a particular user defined application.

In one embodiment a user may create and define a user defined application mode and application. These may be created using classes and subclasses in connection with an object oriented approach in which use of objects and classes allows for the addition of new data types and operations for example as may be implemented using MATLAB. The operations and functions that operate on class objects are known as methods collected together in a class directory. The class directory includes a constructor for that class. Generally a predefined application mode such as one for heat transfer may be created as a class. A user defined application may be defined as a subclass of one of these classes. In this manner the functionality of an existing application mode may be inherited by a new user defined application with additionally having some or all of its functionality overloaded by a subclass allowing for a user to create an application with desired behavior. An application mode may also be defined a the same level as the predefined application modes such as heat transfer. These user defined application modes may have the same status and use as the predefined application modes. In particular both predefined and user defined application modes may be used as one of the application modes for example when forming a combined multiphysics system as described in more detail elsewhere herein.

An application mode may be created as a class. These classes may be represented in a hierarchical structure. There are a set of base classes at the top of a hierarchy containing the main functionality. The application modes may inherit from base classes sometimes through convenient intermediate classes that may include methods defining functionality common to several application modes. An example of the class hierarchy may be found in element as described in more detail elsewhere herein. An application mode may be created by defining parameters on the boundary and the inner domain that will define the equations to be solved and how to specify these parameters in the GUI. For more streamlined design of the application modes the available solvers and the initial conditions post processing expressions and name of dependent and independent variables may also be modified.

An application mode has a constructor for example such as in connection with described in more detail elsewhere herein. The information for an application mode may be stored in the application mode object and in the fem.appl structure also described elsewhere herein. Table of includes properties that may be included in one embodiment of an application mode object. These properties are either inherited from the parent objects or may also be set explicitly. Table of includes a listing of the methods that may exist either directly in the application mode class or in any of the parent classes. The column to the right in this table describes what the methods do.

Additionally a set of methods may be used by the GUI to set up solvers and dialog boxes as well as submodes for the application modes. In one embodiment these methods are 

Other important methods are the set and get methods that allows for setting and getting of the application mode object properties.

In one embodiment to define a user defined application mode a minimum set of definitions and routines or methods are defined. These include the constructor appspec bnd compute and equ compute. appspec is a routine for defining the parameters used in the interior and on the boundaries. Routines equ compute and bnd compute define how to set up the equations based on this information from appspec.

In order to use the application mode from the GUI the equinfo and bndinfo methods may be implemented in the application mode class. These methods define how to set up the dialog boxes in the GUI for specifying the parameters.

In contrast to a user defined application mode is a user defined application. In the user defined application for example overloading may be performed of some or all of the above methods in addition to the methods for setting up the GUI for example such as fldrawmode flboundmode flpdemode flmeshmode flsolvemode flplotmode in connection with set up some of the menus and toolbars for draw boundary PDE mesh solve and plotmode respectively.

Referring now to shown is an example of a class structure that may be included in an embodiment in which a user may define application modes. At the base of the class structure is the class flbase to facilitate overloading of generally provided functionality that may be included in an embodiment. The application mode object structure may divide the application mode objects in accordance with two particular criteria geometry dimension and application modes. For geometry dimension there are two geometry dimension dependent base classes fld1 and fld2 in which methods may implement dimension dependent functionality such as draw mode menus toolbars mesh drawings and the like. For application modes there are three application module base classes of flpde which is the parent of all application modes flsme and flcem which are other classes that may be defined in accordance with other modules and associated functionalities. In flpde all functionality may reside that is common to all application modes and that is also not dependent on geometry dimension. All application modes may be implemented as subclasses to this class. Additional application dependent classes may be added to support new applications. They may for example be implemented as subclasses of flpde or another application mode. In these class directories methods that implement application dependent functionality such as specific dialog box information and the like may reside. Referring to the structure of the hierarchy illustrated in the application dependent classes take precedence over the geometry dimension classes which also take precedence over the application module class so that for example a mesh drawing method in the flpde class may be overridden by the generic 2 D mesh drawing method. Note that the structure may be only a portion of the entire class structure included in an embodiment.

Together with methods the application objects may define specific properties and behaviors that define an application in the GUI. Referring to shown are sample 1 D one dimensional application modes and . In combination these two tables may define all predefined application modes included in one embodiment. All 1 D application objects inherit from the application module base class flpde and the geometry class fl1d.

Referring now to shown are 2 D two dimensional application modes that may be defined in an embodiment. The application modes defined in and may include all application modes for 2 D application mode objects. All 2 D application mode objects may inherit from the application module base class flpde and the geometry base class fl2d. All of these classes are subclasses of fl2d and an application mode class. The application mode classes in turn are subclasses of flpdec or flpdeg that represent the coefficient and general PDE form respectively. Note that the PDE mode classes flpdec1 flpdeg1d flpdec2d and flpdeg2g all accept the number of dependent variables as an input argument thus enabling the creation of PDE modes with an arbitrary number of dependent variables. Calling the constructor function without a dimension argument results in a scalar application mode object.

Referring now to shown is an example of properties of one embodiment of an application object. Table describes various properties of application objects. Parent is string containing the name of the object class parent. The dim name and parent properties are initialized explicitly using the application class constructor. Other fields may be inherited by the parent class but may also be initialized using the constructor.

In one embodiment the application being defined by a user may be a subclass to one of the application mode classes. In one example suppose a user wants to define a new application myapp based on the 2 D heat transfer mode flpdeht2d. A subdirectory may be created in a MATLAB path called myapp. An example of a constructor may look as in the code snippet of . In this example the settings for submode form tdiff and sdim are from the parent class flpdeht2d. The dim property is explicitly set to be default as may be defined by the method default dim.

In this embodiment that may use MATLAB the behavior of MATLAB operators and functions for object arguments may be changed by overloading the relevant functions. This may be accomplished by defining a replacement method with the appropriate name residing in the new class directory at the application level. A user may minimize the number of overloaded methods in an application class being defined by a user by choosing the most appropriate application mode as its parent class. By using the overloading functionality parts of an existing application may be modified to create application dependent functionality. For example portions of a GUI including menus toolbars and the like may be modified to better fit an application as well as methods for overloading the equation definitions.

One embodiment may include a set of methods to provide a portion of the functionality. Referring now to shown is an example of an embodiment of a portion of functions that may be included in one embodiment. The functions may determine the variables and equations defining a problem. As described in more detail elsewhere herein it should be noted that the appl field of the fem structure includes application dependent data. Appl is a cell array that contains more than one application mode for multiphysics problems. The foregoing methods may work in connection with a GUI and from the command line. The conversion from the application mode structure in the appl field s may be performed by invoking a function called the multiphysics function which in turn uses another function to compute the equ bnd init dim usage border var and form fields.

API functions may be included in an embodiment for example to allow for adding menus and toolbars to the existing GUI. Additionally overloading methods may be used for example to disable certain functionality associated with a method or provide for an alternative.

Referring now to shown is an example of a GUI that may be used in connection with adding an application to the existing GUI. Using the New tab in the GUI a user may browse through the applications. The procedure of adding a new user defined application may be performed using an API function for example fladdappl. Using such an API an application may be added to the application tree and optionally associated text and FIG. The description and FIG. may be displayed when the user defined application is selected. For example the GUI has a user defined application of IN PLANE WAVE GUIDE selected in . Accordingly an associated image is displayed in and text in .

What will now be described is another example of a user defined application for modeling transmission signals with frequencies in the microwave range for example as may be used in the telecom industry. The waves are transmitted through a waveguide with a rectangular cross section. If the wave is bent the elbow may cause scattering effects preventing the wave from being transmitted through the waveguide. In the following model a TE wave is modeled in which there is no electric field in the direction of propagation. The dimension of the waveguide and frequency are chosen so that the only mode that can propagate is the TEmode that is where the electric field has only one non zero component that is sinusoidal and vanishes at the walls of the waveguide.

A waveguide may be designed to transmit only frequencies in a narrow band. This band pass effect may be achieved using a resonance cavity formed by putting conducting posts protruding into the waveguide. The posts may be for example metal screws or tuning screws. Equations used to calculate effects may be derived from the wave equation. Time may be eliminated assuming a harmonic planar wave resulting in Helmholtz equation for non zero electric field component as represented by equation in in which k is the wave number in the propagating direction. The relation between the wave number k and the frequency f and wavelength is represented by equation in which c denotes the speed of light.

In this instance there are three kinds of boundary conditions in the model. At the entrance boundary in which there is a vertical line at x 0 there is an absorbing condition with an incoming sinusoidal wave as in equation . The right hand side of is the driving force of the incoming wave. d is the width of the waveguide and yo is the y coordinate of the lower left corner of the waveguide. The wave number depends on the wave number in the direction of propagation ky as in . may be derived from solving analytically for a straight waveguide the wave number in the transversal direction may be defined by twice the width of the waveguide. This results in the final expression for the wave number in the propagating direction as a function of the incoming wavelength and width of the waveguide according to . At the exit boundary there is an absorbing condition represented as and the walls are assumed to be perfect conductors so that the tangential component of E vanished as in . The velocity of light may be calculated from the material parameters and the wavelength is calculated from the frequency and velocity. The cut off frequency may be calculated from the analytical solution of a straight waveguide as in . No waves below this frequency are transmitted through the waveguide.

Using the foregoing waveguide and techniques disclosed herein the foregoing complexity may be hidden using a GUI. A feature called frequency analysis may be implemented in connection with the waveguide application. What will now be described is an overview of how this may be implemented in one embodiment.

The draw mode for this feature may be implemented using overloading to implement an alternative draw menu and corresponding toolbar buttons. Toolbar icons may be stored in the application class directory as bitmaps. In this example the draw menu is an alternate menu that includes 5 items draw mode straight waveguide elbow waveguide geometry parameters and the standard draw menu item Properties. The draw toolbar contains the toolbar buttons straight waveguide elbow waveguide and geometry parameters. In connection with each of the waveguides a corresponding FIG. or image may appear in the GUI. Parameters may be varied in accordance with each of the waveguides by overloading existing methods for example by overloading an existing method objdlg in which the geometry is parameterized and the parameters may be stored in a user defined portion of the fern structure on creation. It should be noted that this is a portion of memory allocated for use by the user and not used in this example by the existing methods. Additionally other functionality may be disabled using overloading such as to disable importing geometries and cut and paste functionality.

Boundary conditions are hardwired according to the equations depending on parameters for example as may be defined in the PDE specification GUI. The Boundary menu and related mode buttons may be completely removed using overloading of existing methods. Existing methods are used to define the boundary conditions. Some of the standard PDE mode menu items are removed by overloading the existing method s . The mesh mode remains the same. Similarly other modes that are defined and there GUIs toolbars and the like may be used and techniques such as overloading may be used to implement these as may be desired in accordance with this example and others.

In connection with the waveguide due to the conversion of time dependent PDE to a harmonic wave equation the existing application mode AC Power Electromagnetics mode may be used. The new waveguide application being defined may be implemented for example as a subclass to its class flpdeac. the waveguide class named flwaveguide may be created on the same directory level as the parent class flpdeac. An example class constructor is included in of .

Parameters of the waveguide may be specified as in of of . The entrybnd and exitbnd fields may be used by a bnd compute method to set the appropriate boundary conditions. The startpt field may be used to define the incoming sine wave on the entry boundary. The freqs field includes the frequency vector that may be used by the frequency analysis feature.

The geomparam structure is a 2 element structure array including geometry parameters for straight and elbow waveguides that may include fields as in of . The geometry boundaries may be formed by a set of existing objects using the parameters entrylength exitlength width and radius. These existing objects may be combined into a single new geometry object using for example an API that forms a single object that is a cell array containing the existing objects.

If the resonance cavity is operative such as by checking a resonance cavity checkbox on one of the GUIs the protruding posts are subtracted from the geometry. In this instance the posts may be creates as a set of solid rectangular objects using the specified cavity parameters. The resulting mapping matrices representing this subtraction result may relate the curve and point indices in the input geometries respectively to their new indices in the new geometry object. Knowing the order in which the basic object were created to make the new geometry the index corresponding to each of these basic objects in the final geometry may be calculated and stored in the user structure.

Of the existing methods previously described in connection with of 6 may be overloaded. These may include for example default equ equ compute default bnd bnd compute default var and posttable. Equ compute returns the PDE coefficients computed from parameters defined in the appl.equ structure. The ind field includes 1 since there is only one subdomain. Default bnd method defined default boundary conditions. Bnd compute computes boundary conditions from the material parameters and the frequency defined in appl.equ. The entrybnd exitbnd and startpt fields in the fem.user structure are used to place the correct boundary conditions on the correct boundaries. Default var returns an empty cell array disabling default scalar variables. It should be noted that this method may have been used to define the incoming frequency as a scalar subdomain independent variable instead of as part of the appl.equ structure. In this instance the frequency may be specified in connection with a different dialog box such as Application Scalar Variables rather than in connection with the PDE specification dialog box. In posttable the post processing data is defined. The output variables descriptions an evaluation expressions may be defined.

Following is an overview of the overloaded GUI methods in the Waveguide application. It should be noted that the following GUI methods may be included in one embodiment. Other embodiments may include other methods or variations of these. Method appspec may be used to define the variable names in the bnd and equ structures of the fem.appl field. appspect for the waveguide may return a structure including fields defining the PDE variables to be scalars and the boundary variables to be boundary coefficients of problem dimension. This information may be used by the appl2fem routine for example as described in the FEMLAB V1.1 Reference Manual FEMLAB V1.1 User s Guide and FEMLAB V1.1 Model Library by Computer Solutions COMSOL Europe AB. Parts of other functionality described herein may also be fund in the foregoing documentation. This information may also be used by the PDE specification dialog box. The method pdeinfo is used to define the default abbreviation for an application. Only the standard submode coefficient form and stationary linear solver are available. The equinfo method returns equations descriptions and parameter names to be displayed in connection with the PDE specification dialog box. The returned cell array of equations in this instance includes one equation due to the stationary linear solver being the only solver. The flboundmode method removes the standard Boundary menu from the GUI and the corresponding boundary mode toolbar is removed from the flviewtbg method. The importing of geometry objects may be disabled by the flimpmenu method returning an empty structure. Flmphmenu removes the multiphysics menu from the GUI by also returning an empty structure of menu handles. The flpdemode method returns a PDE menu structure including only 2 items PDE mode and PDE specification. flsolvemode method returns a Solve menu structure includes the items solvemode solveproblem frequency analysis and parameters. flmeshcolvtbg replaces the standard restart button with a frequency analysis button in which a corresponding icon is stored as a bitmap in a directory. Similarly methods in connection with the geometry parameters initial conditions and the like are modified and or disabled in accordance with the desired GUIs and functionalities for the waveguide mode. Finally the waveguide application may be added to the model navigator such as in connection with the GUI displayed in by invoking a function. In one embodiment the following is an example invocation 

In another embodiment a method is set forth that may be used in connection with specifying non local couplings of multiphysics systems. This method may also be used in connection with local couplings for example as described previously. The method includes a scheme for defining a plurality of variables as discussed in detail below. A non local coupling for example may be used in coupling a value of a physical quantity from one portion of a domain to another portion of the same domain. In one embodiment a non local coupling may be used for example to specify couplings when the values of a physical quantity on a boundary of a domain are used in a partial differential equation along parallel lines extending into the domain. Additionally a non local coupling may be used for example in specifying a coupling when the value of the integral over a portion of a domain is used in the boundary condition of a partial differential equation. Local and non local couplings as well as the variables that may be used with each type of coupling are described in more detail elsewhere herein.

Furthermore the method can include an analysis of a multitude of geometries. The data structures used previously can be extended to multiple geometries by storing the previous data structure fern data structure in a list in the extended data structure xfem . Both of these are described in more detail below. Generally for a geometry number g the field x in the extended data structure occurs as xfem.femg.x where xfem.femg is the fern data structure repeated for each geometry in the extended data structure for multiple geometries. When using the multiple geometry data structure the field xfem.sol contains the solution and solutions are no longer stored in fem.sol for each geometry. A combined extended mesh for all the geometries is stored in the field xfem.xmesh. The coupling variables are stored in a list in the field xfem.elemcpl. The extended mesh structure xfem.xmesh is described in more detail elsewhere herein.

In one embodiment there are three different forms of PDEs that may be used namely the coefficient form the general form and the weak form. It should be noted that the coefficient form is most suitable for use with linear or almost linear problems whereas the general form may be used for the non linear problems. The weak form of an equation is more general than the other two forms and it is formulated as an equality of integrals. The weak form may be used for example in implementing point and line sources. A problem in coefficient form can be converted to general form and a problem in general form can be converted to weak form. The coefficient form and the general form are described elsewhere herein in more detail.

Assume that there are a number of Euclidean spaces each equipped with a collection of domains i.e. volumes surfaces curves or points. The domains may be approximately subdivided into mesh elements constituting a mesh as described elsewhere herein using standard mesh generation techniques for example as described in the text by Frey P. J. George P. L. entitled application to finite elements HERMES Science Publishing 2000. Commonly used mesh elements as known to those of ordinary skill in the art may include for example tetrahedrons triangles and line segments. On each mesh element local barycentric coordinates may be defined for example as described in application to finite elements by Frey et al. Couplings including variables may be used to define relationships between multiple geometries as well as for a single geometry.

The starting point for the finite element method is a mesh that is a partition of the geometry into small units of a simple shape. In 1 D the subdomains are partitioned into smaller mesh intervals or mesh elements. The endpoints of the mesh intervals are called mesh vertices.

In 2 D the subdomains are partitioned into triangles or mesh elements. This is only an approximation since a boundary can be curved. The sides of the triangles are called mesh edges and the corners mesh vertices. A mesh edge must not contain mesh vertices in its interior. Similarly the boundaries defined in the geometry are partitioned approximately into mesh edges boundary elements which conform with the triangles if there is an adjacent subdomain. There may also be isolated points in the geometry that also become mesh vertices.

Similarly for 3 D geometries the subdomains are partitioned into tetrahedrons mesh elements having faces edges and corners that may be respectively referred to as mesh faces mesh edges and mesh vertices. The boundaries in the geometry are partitioned into boundary elements mesh faces . The edges in the geometry are partitioned into mesh edges. Isolated geometry vertices become mesh vertices.

It should be noted that mesh vertices are sometimes called node points. When considering a d dimensional domain in the geometry such as a subdomain boundary edge or vertex then by its mesh elements we mean the d dimensional mesh elements included in the domain. An embodiment may include a function for creating and initializing a mesh structure described herein.

For each of the geometries described herein there is a mesh. Once a mesh is defined using techniques also described elsewhere herein approximations may be introduced for the dependent variables. For example in considering a single variable u may be approximated with a function that can be described by a finite number of parameters also referred as the degrees of freedom or DOF. This approximation may be inserted into the weak equation to get a system of equations for the DOFs.

If better accuracy is desired another finite element space corresponding to quadratic elements may also be considered. Functions u in this space are second order polynomials on each mesh interval. To characterize such a function u node points can be introduced at the mid point of each mesh interval. For example x 0.5 and x 1.5. Accordingly corresponding degrees of freedom may also be introduced for each of these points U u x . Then on each mesh interval the second degree polynomial u x is determined by the degrees of freedom at the end points and the mid point. Accordingly 

In general a finite element space may be specified by giving a set of basis functions. The basis functions can be represented using local coordinates or element coordinates. For example consider a mesh element of a dimension d in an n dimensional geometry having space coordinates denoted x . . . xAlso consider the standard d dimensional simplex represented as 0 0 . . . 0 U1

which resides in the local coordinate space parameterized by the local coordinates If d 1 then the simplex is the unit interval. If d 2 then the simplex is a triangle with two 45 degree angles and if d 3 it is a tetrahedron. Now our mesh element can be viewed as a linear transformation of the standard simplex. Namely by letting the global space coordinates xbe suitable linear functions of the local coordinates the mesh element may be the image of the standard simplex. This means that in the local coordinate system the corners of the mesh element have all 0 except at for at most one k for which 1. When described in terms of the local coordinates the basis functions may assume one of a few basic shapes for example as defined in the fern structure described elsewhere herein. With linear elements in 1 D any basis function on any mesh element is one of the following 1 0

The first two above are the shape functions in this example. For quadratic elements in 1 D the shape functions are 1 1 2 4 1 2 1 

The foregoing examples are special cases of the Lagrange element. To describe the Lagrange element one needs to fix a positive integer k that is called the order of the Lagrange element. The functions u in the Lagrange finite element spaces are piecewise polynomials of the degree k such that on each mesh element u is a polynomial of degree k. To describe such a function it suffices to give its values in the Lagrange points of order k. These are the points whose local coordinates are integer multiples of l k. For each of these nodes p there is a degree of freedom U u p and a basis function f. The restriction of the basis function to a mesh element is a polynomial of degree at most k in the local coordinates such that f 1 at node i and 0 at all other nodes. Thus the basis functions are continuous and

The Lagrange element of order 1 is called the linear element and the Lagrange element of order 2 is called the quadratic element.

What will now be described are different types of variables that may be included in an embodiment for use in defining local and non local couplings. Other embodiments may include variables having different names and types including the concepts used herein. In one embodiment variables may be used which are functions on the domains. An embodiment may include basic variables auxiliary variables glued variables mapped variables and integrated variables.

Basic variables may be defined and then other types of variables and new variables may be defined in terms of existing variables. For example the auxiliary variables and the glued variables which are discussed in detail elsewhere herein may be used to implement local couplings between existing variables and new variables. A local coupling means that the value of a new variable in a point depends only on the values of the existing variables in the same point. A non local coupling means that the value of the new variable at a point may depend on values of existing variables in distant points. Mapped variables and integrated variables which are also discussed elsewhere herein may be used to define non local couplings between existing and new variables. In accordance with the method of this embodiment it is possible to model physical quantities using local and non local couplings.

In an embodiment a basic variable V may be defined in terms of a number of basis functions Fi i is an index . The notion of basis function is the usual one used in finite element analysis see Zienkiewicz O. C. Taylor R. L. vol. 1 McGraw Hill 1994.

Each basis function is a function defined on some of the domains. Its restriction to each mesh element is a smooth function often a polynomial in the local coordinates and it is nonzero only on a few mesh elements. To each basis function there is associated a parameter Ui which is called the degree of freedom DOF . The variable V is defined as the sum of Ui Fi over all indices i where the operator denotes a multiplication operation.

In the data structures of this embodiment the basic variable names and their associated types of basis functions are stored in the fields xfem.femg.shape where g is the geometry number. This field is a list of shape function objects. Each shape function object defines a number of basic variables and the basis functions that are used for these variables. In one embodiment using object oriented programming concepts written in for example C a number of methods may be applied on the shape function objects. For example there is a method that may compute values of the basis functions which may be characterized as polynomial functions representing a shape function object. The domains of definitions for the basic variables are determined by the fields xfem.femg. .shape where may be equ bnd edg or pnt.

It should be noted that an embodiment may include a shorthand feature for defining which properties shape function objects and the like apply to a plurality of domains. The plurality of domains may be referred to as a domain group which is also referred to as the ind group or field described elsewhere herein. For example a model may be defined in which a first set of material properties applies to 50 domains and a second set of material properties applies to another 50 domains. Rather than repeat the set of properties for each domain a single set of defined properties may be defined and associated with a group of domains. An embodiment may include the concept of a domain group implemented in any one of a variety of different ways in which a single set of properties is commonly applied to a plurality of domains rather than use a 1 1 relationship to define and associate a single set of properties with a single domain.

Auxiliary variables of an embodiment may be defined by letting V1 V2 . . . Vn be a number of variables which are all defined on some domain. The auxiliary variables can be further defined by letting E V1 V2 . . . Vn be a function of these variables an expression . Then an auxiliary variable W can be defined in the following way W E V1 V2 . . . Vn .

An embodiment may define glued variables using a number of disjoint domains that are numbered 1 2 . . . n. The glued variables can be further defined by letting V1 V2 . . . Vn be a number of variables where Vk is defined on domain number k. Then a glued variable W can be defined on the union of the domains in the following way W Vk on domain k for all k.

An embodiment may define the mapped variables by letting F be a mapping from a destination domain to a source domain. The mapped variables can be further defined letting V be a variable defined on the source domain. Then a mapped variable W can be defined on the destination domain by V F .

An embodiment of the integrated variables can be defined by letting V be a variable defined on a d dimensional domain M in some d dimensional Euclidean space. The integrated variables can be further defined by letting b

The plurality of variables as described above can be combined into any one or more of a plurality of permutations to form other variables. For example integration along curved domains can be implemented by combining mapped variables and integrated variables. However it may be clearer if the steps are separated as described above. In an embodiment some examples of these combinations of the above variables types can include Expression variables Boundary coupled variables Scalar coupling variables Extrusion coupling variables and Projection coupling variables which are each described in detail below.

An embodiment may define Expression variables using a number of disjoint domains that are numbered 1 2 . . . n. Let E1 E2 . . . En be a number of expressions where Ek is defined on domain number k. Then an expression variable W can be defined on the union of the domains in the following way W Ek on domain k for all k. In this instance the expression variable can be represented as a glued variable where the variables that are glued together are auxiliary variables. This is done by introducing names V1 . . . Vn for the expressions E1 . . . En. The expression variables are defined in the fields xfem.femg. .expr where is equ bnd edg or pnt and g is the geometry number. The expr field is a list of alternating variable names and defining expressions. A defining expression can be substituted with a list of expressions where the nth expression applies to the nth domain group.

An embodiment may define Scalar coupling variables by defining new variables as expressions of variables which are evaluated somewhere else. The variable is defined as the integral of an expression over some domains. Such a variable can be defined by the following data that may be included in a data structure and associated fields in an embodiment 

What will now be described are the data fields set forth above. The above described data creates a scalar coupling variable element structure c with index iel with the field c.elem above. The src field defines the new scalar variables in terms of integrals of expressions over geometry src.g which defaults to 1 . Src.equ.var defines variables in terms of integrals over subdomains. Further src.equ.var is a cell vector with alternating variable names and expressions. The expressions can be numeric constants strings or cell vector of such. If the expression is a cell vector then its nth component applies to the nth subdomain group. The subdomain groups are defined by the src.equ.ind field. The default subdomain grouping is that all subdomains are in one group. The variable is defined to have the value obtained by integrating the expression over the subdomain groups. If required a field src.gporder or src.equ.gporder can be given to specify the order of the quadrature formula to use in numerical integration as described for example in Cook R. D. Malkus D. S. Plesha M. E. Wiley 1988 and Zienkiewicz O. C. Taylor R. L. vol. 1 McGraw Hill 1994. The order should be a positive integer and in one embodiment the default is 2.

Similarly src.bnd src.edg and src.pnt define scalar variables as integrals over boundaries edges and vertices respectively an integral over a vertex is just the value of the integrand at the vertex . By default the variables defined in src can be used everywhere in a geometry under analysis. The optional field dst can be used to specify the domains of definition for the variables in detail. Dst.g specifies the geometry number on which the variables are defined defaults to 1 . The dst. .ind fields specify on which domains the variables are defined.

A variable defined as described above may be referred to as a scalar coupling variable. Such a variable can be seen as a combination for example of an expression variable an integrated variable and a mapped variable as follows. The expressions in src. .var define an expression variable. The expression variable may be integrated over its domain of definition producing an integrated variable that is defined on a zero dimensional space. The integrated variable may be further mapped to the destination domain using the mapping F that sends all points to the point in the zero dimensional space.

An embodiment may define Extrusion coupling variables by defining new variables as expressions of variables evaluated somewhere else. The Extrusion coupling variables are defined in a source domain and used in a destination domain. The value of the variable at an evaluation point in the destination domain is found by evaluating an expression at a point in the source domain where the choice of point in the source domain is dependent on the position of the evaluation point in the destination domain.

An extrusion coupling variable can be defined by the following data fields as may be included in a data structure in an embodiment 

The foregoing fields will now be described in more detail. The above described data creates an extrusion coupling variable element structure c with index iel with c.elem above. The extrusion coupling variables are similar to scalar coupling variables in that the basic fields in dst and src of the element structure are the same. That is to say that dst defines the geometry and domains where the variables are available and src defines the variable names and associated expressions and the geometry and domains from which they are defined. For extrusion coupling variables the main difference is that src has a new field meshp and dst has a new field ep. These describe the way in which an evaluation point in the destination domain is associated with a point in the source domain.

The src field defines the new variables in terms of expressions on geometry src.g which defaults to 1 . Src.equ.var defines variables in terms of expressions on subdomains. Further src.equ.var is a cell vector with alternating variable names and expressions. The expressions can be numeric constants strings or cell vector of such. If it is a cell vector then its nth component applies to the nth subdomain group. The subdomain groups are defined by the src.equ.ind field and it has the usual syntax. The default subdomain grouping is that all subdomains are in one group. Similarly src.bnd src.edg and src.pnt define variables in terms of expressions on boundaries edges and vertices respectively. In addition the term dst.g specifies the geometry number on which the variables are defined defaults to 1 . The dst. .ind fields specify on which domains the variables are defined.

The expressions in src. .var may be used to define a number of variables in the same way as expression variables are defined in which the variables are defined in the source domain. Consider a variable v 1. What will now be described is how the values of the variable v1 are transferred to the destination domain thus defining the variable w1 in the destination domain. The field src.meshp as described in more detail elsewhere herein is a cell vector of expressions one for each space dimension in the source domain. These expressions define the components of a mapping Fs which maps the source domain into an auxiliary Euclidean space of the same dimension. It is assumed that the inverse of this mapping Fsi exists. The inverse Fsi can be computed by search in the image of the source domain mesh under Fs see Frey P. J. George P. L. application to finite elements HERMES Science Publishing 2000 pp. 89 90 and linear interpolation followed by Newton iteration. Similarly the field dst.ep may be a cell vector of expressions where the number of expressions is the same as the dimension of the auxiliary Euclidean space. These expressions define the components of a mapping Fd which maps the destination domain into the auxiliary space. Now the variable w1 is defined on the destination domain by the formula w1 p v1 Fsi Fd p where p denotes points in the destination domain. The variable w1 may be referred to as an extrusion coupling variable. Based on the foregoing w1 may be obtained as a combination of an expression variable and mapped variables. Namely first the expression variable v1 is created. Then v1 is mapped to the auxiliary space using the mapping Fsi resulting in a mapped variable in the auxiliary space. Then this is further mapped to the destination domain using the mapping Fd producing a mapped variable such as w1.

In an embodiment Projection coupling variables may be defined as line integrals of expressions evaluated somewhere else. The variables are defined in a source domain and used in a destination domain. The value of the variable at an evaluation point in the destination domain is found by evaluating a line integral of an expression at in the source domain where the choice of line curve in the source domain is dependent on the position of the evaluation point in the destination domain.

A projection coupling variable may be defined using the following fields included in a data structure in an embodiment 

The foregoing data fields will now be described in more detail. The above described data defines a projection coupling variable element structure c with index iel with c.elem as defined above. Projection coupling variables are similar to elcplscalar in that the fields included in dst and src of the element structure are the same. In other words dst defines the geometry and domains where the variables are available and src defines the variable names and associated expressions and the geometry and domains from which they are defined. For projection coupling variables the main difference is that src has a new field meshp and dst has a new field ep. These describe the way in which an evaluation point in the destination domain is associated with points in the source domain. The fields meshp and ep are similar to elcplextr with a few small changes.

The src field defines the new variables in terms of expressions on geometry src.g which defaults to 1 . Src.equ.var defines variables in terms of expressions on subdomains. It is a cell vector with alternating variable names and expressions. The expressions can be numeric constants strings or cell vector of such. If it is a cell vector then its nth component applies to the nth subdomain group. The subdomain groups are defined by the src.equ.ind field and it has the usual syntax. The default subdomain grouping is that all subdomains are in one group. Similarly src.bnd src.edg and src.pnt define variables in terms of expressions on boundaries edges and vertices respectively.

Dst.g specifies the geometry number on which the variables are defined defaults to 1 . The dst. .ind fields specify on which domains the variables are defined. They have the usual syntax.

The expressions in src. .var may be used to define a number of variables in the same way as expression variables are defined in the source domain. Consider one of these variables v1. What will now be described is how the values of the variable v1 may be transferred to the destination domain thus defining the variable w1 in the destination domain. The field src.meshp is a cell vector of expressions one for each space dimension in the source domain and may be used in defining the components of a mapping Fs which maps the source domain into an auxiliary Euclidean space of the same dimension. It is assumed that the inverse of this mapping Fsi exists. The inverse Fsi may be computed by searching in the image of the source domain mesh under Fs see Frey P. J George P. L. application to finite elements HERMES Science Publishing 2000 pp. 89 90 and linear interpolation followed by Newton iteration. A temporary variable v2 may be defined in the auxiliary space by the formula v2 p v1 Fsi p where p denotes points in the auxiliary space. The field dst.ep may be a cell vector of expressions where the number of expressions is one less than the dimension of the auxiliary Euclidean space in which the expressions define the components of a mapping Fd which maps the destination domain into a subspace of the auxiliary space. This subspace is defined as the subspace in which the last coordinate is zero. Define a further variable v3 on this subspace as the integrated variable obtained from v2 by integration along lines orthogonal to the subspace. Finally the variable w1 is defined on the destination domain by the formula w1 p v2 Fd p where p denotes points in the destination domain. Based on the foregoing the variable w1 may be referred to as a projection coupling variable. Also based on the foregoing w1 may be obtained as a combination of an expression variable v1 a mapped variable v2 an integrated variable v3 and a mapped variable w1 .

An embodiment can define Boundary coupled variables on boundaries in the following manner. Given is an expression E defined on a subdomain. Then a Boundary coupled variable W can be defined by W E on a boundary that touches this subdomain. Thus a Boundary coupled variable is a special case of a mapped variable of an auxiliary variable where the mapping F is the identity mapping from a boundary into an adjacent subdomain. Optionally one can start with two expressions Eu and Ed that are defined on the two adjacent subdomains to a boundary respectively. Then a Boundary coupled variable W can be defined on the boundary as W Eu Ed 2. In this case W is the mean value of two mapped variables. The data structure that defines Boundary coupled variables can have the form

where the foregoing fields are described in following paragraphs. The above creates a boundary coupled variable element structure c with index i. The variable definitions given by varu vard and varm will be active only in geometry number g. If the ind field is given the definitions will apply only in the specified boundary groups. Varu yard and varm are cell vectors

with alternating variable names and defining expressions. The expressions can be numerical constants strings or cell vectors of numerical constants and strings. In the case of a cell vector its nth component applies to the nth group of boundaries given by ind dm ind field is not given the first entry of the cell vector applies to all boundaries . Otherwise the expression applies to all boundary groups.

For varu and vard the value of the variable is the expression evaluated in the upper lower subdomain or zero if there is no upper lower subdomain. For varm the value is the mean of the upper and lower values on an inner boundary the adjoining value on an outer boundary and NaN if there is no subdomain on either side.

An embodiment of the method may further include a scheme for numerical computation of the values of a variable in accordance with each type as one of a basic variable an auxiliary variable a glued variable a mapped variable and an integrated variable. For example assume that a user wants to compute the values of the variable Win the points p1 p2 . . . pm given values Ui for the DOFs. The points pj are specified by giving the values of the local coordinates and the mesh elements in which they reside. The result can be represented as a row vector where the jth component is W pj . Depending on what type of variable W is there are five possible cases e.g. W is a basic variable W is an auxiliary variable W is a glued variable W is a mapped variable and W is an integrated variable which are described in detail below. If W is a basic variable its values can be computed directly. If W is any of the other types of variables the values of the variables occurring in the definition of W should first be computed. Thus a recursive scheme is set forth for computation of the values.

In the case where W is a basic variable as described above W is the sum of Ui Fi over all indices i. Values are given by W pj sum of Ui Fi pj over all i. Since pj is given in local coordinates and Fi is a polynomial it is easy and well known how to evaluate Fi pj .

In the case where W is an auxiliary variable W E V1 V2 . . . Vn as described above the values of the variables V1 V2 . . . Vn in the points pj are determined. The values of W may then be computed as W pj E V1 pj V2 pj . . . Vn pj by evaluating this expression. Note if the expressions are parsed on the fly it is wise to carry out the evaluation on a large set of points in parallel in order to save computation time.

In the case where W is a glued variable W pj Vk pj for those points pj which are in domain k as described above. For each k let the vector Ik contain the indices j of the points pj that lie in domain k. First compute the values of the variables V1 V2 . . . Vn. In other words compute the values of the variable Vk in the points pj where j is in Ik. Subsequently define W pj Vk pj for j in Ik.

In the case where W is a mapped variable W pj V qj where qj are the points qj F pj as described above. These points are computed in the following way First the global coordinates for the points pj are computed and the global coordinates for the points qj are computed by the formula qj F pj . Then a search algorithm may be used to find the mesh elements in which the points qj reside in and the corresponding local coordinates. Such search algorithms are known to those of ordinary skill in the art for example at pages 89 90 of Mesh Generation Application to Finite Elements by Frey et al. also referenced elsewhere herein. Subsequently the variable V is computed in the points qj. The result is identical with the requested values namely the values of W in the points pj.

In the case where W is an integrated variable W pj is the integral of V pj y over all y such that pj y lies in the domain of V as described elsewhere herein. This integral is approximated with a quadrature formula in the standard way i.e. W pj is approximated with the sum of V pj yjk wjk over some indices k the index set can depend on j see for example Zienkiewicz O. C. Taylor R. L. vol. 1 McGraw Hill 1994. The numbers wjk are called the weights. Let q1 q2 . . . be the points pj yjk in some order and let w1 w2 . . . be the corresponding ordering of the weights wjk. Create the index vector J in the following way J 1 is the index j for which q1 pj yjk for some k . Thus J maps from indices of the points q1 q2 . . . to indices of the projected points pj. Now compute the values of the variable V in the points q1 q2 . . . . The result is represented by a row vector R. The values for the variable W can be now be computed as follows. W pj sum of R 1 w 1 where the sum is taken over all 1 such that J 1 j.

An embodiment may also include a format for numerical representation of the Jacobian of a variable. The Jacobian of a variable V may be defined as the vector consisting of the first partial derivatives of V with respect to the DOFs denoted as a vector U U1 . . . Un where n is the number of DOFs. The partial derivative of V with respect to Ui is denoted DiV. Assume that we want to evaluate the Jacobian of V in a number of points p1 p2 . . . pm. The Jacobian of V in these points can be represented by a number of contributions J1 J2. The number of contributions used in computing the Jacobian of a variable may vary in accordance with each variable s type and complexity. It should be noted that in the following description the references to VAL DOF and EP are variables used and referenced elsewhere herein in processing steps when computing the Jacobian. Each contribution Jk consists of three things A matrix Jk.VAL a matrix Jk.DOF and a row vector Jk.EP. For a fixed index k the matrices Jk.VAL and Jk.DOF have the same size and they have the same number of columns as Jk.EP. The DOF matrix contains degree of freedom indices and the VAL matrix contains the corresponding contributions to the value of the partial derivative. The EP vector contains evaluation point indices. More precisely this means that the partial derivative DiV pj is equal to the sum of Jk.VAL r c where the sum is taken over all k r and c such that Jk.D0F r c i and Jk.EP c j. Note that r and c denote the row and column indices respectively in the matrices. Often the vector Jk.EP is 1 2 . . . m . In order to conserve memory space the EP vector can be omitted in this case.

It should be noted that the Jacobian of a variable with respect to the degrees of freedom should not be confused with the stiffness matrix described elsewhere herein in which the stiffness matrix is the Jacobian matrix of the residual with respect to the degrees of freedom.

The points p1 p2 . . . pm may be uniformly distributed in the mesh elements. In other words the first b points lie in the first mesh element the next b points lie in the second mesh element etc. In this case the local coordinates may also be the same in all mesh elements. This type of local point data may be referred to as structured point data and the general case is called unstructured point data. For a basic variable structured point data means that the matrices Jk.DOF can be compressed. Namely the first b columns of Jk.DOF are identical the next b columns of Jk.DOF are identical etc. A more compact format can be realized by keeping only every bth column of Jk.DOF. This compact format can be preserved as long as only basic variables auxiliary variables and glued variables are used. In using structured data element coordinates for the evaluation points are the same for all mesh elements. With unstructured point data element coordinates are specified for each evaluation point individually.

Additionally an embodiment may also include a scheme for a numerical computation of the Jacobian of a variable. Assume that it is desired to compute the Jacobian of a variable W in the points p1 p2 . . . pm given values for the DOFs Ui. The points pj are specified by giving the values of the local coordinates and the mesh elements in which they reside. The result can be represented in the format described above. Depending on what type of variable W is there are five possible cases e.g. W is a basic variable W is an auxiliary variable W is a glued variable W is a mapped variable or W is an integrated variable which are discussed in detail below. If W is a basic variable the Jacobian can be computed directly. If W is any of the other types of variables the Jacobians of the variables occurring in the definition of W must first be computed. Thus a recursive scheme is set forth for computation of the Jacobian.

In the case where W is a basic variable recall that W is the sum of Ui Fi over all indices i. Thus the partial derivatives are DiV pj Fi pj . The Jacobian can represented with just one contribution J1. The vector J1.EP may be represented as a vector 1 2 3 . . . m . Consider the mesh element in which the point pj lies. Only a few basis functions are nonzero on this mesh element. The indices i of these basis functions constitute the jth column of the matrix J1.D0F. The corresponding values Fi pj make up the jth column of the matrix J1.VAL. Since pj is given in local coordinates and Fi is a polynomial it is easy and well known how to evaluate Fi pj .

Now the Jacobian of W can be represented by the contributions Kkl which are computed as follows. The EP and DOF matrices are the same as for the variables Vk Kkl.EP Jkl.EP and Kkl.DOF Jkl.DOF. The VAL matrices are computed as follows KkI.VAL r c Ck Jkl.EP c Jkl.VAL r c . The calculated contributions Kkl should then be reindexed in terms of just one index.

In the case where W is a glued variable recall that W pj Vk pj for those points pj which are in domain k. For each k let the vector Ik contain the indices j of the points pj that lie in domain k. First compute the Jacobians of the variables V1 V2 . . . Vn. More precisely compute the Jacobian of the variable Vk in the points pj where j is in Ik. This Jacobian is represented by the contributions Jkl where the index 1 can run over different sets for the different k . Now the Jacobian of W can be represented by the contributions Kkl which are computed as follows. The VAL and DOF matrices are unchanged Kkl.VAL Jkl.VAL and Kkl.DOF Jkl.DOF. Kkl.EP is obtained from Jkl.EP by KkI.EP Ik Jkl.EP . The calculated contributions Kkl should then be reindexed in terms of just one index.

In the case where W is a mapped variable recall that W pj V F pj . Thus the partial derivatives are DiW pj DiV qj where qj are the points qj F pj . These points are computed in the following way first the global coordinates for the points pj are computed and the global coordinates for the points qj are computed by the formula qj F pj . Then a search algorithm is used to find the mesh elements in which the points qj reside in and the corresponding local coordinates. Now the Jacobian of the variable V can be computed in the points qj. The result is identical with the requested Jacobian namely the Jacobian of W in the points pj.

In the case where W is an integrated variable recall that W pj is the integral of V pj y over all y such that pj y lies in the domain of V. This integral is approximated with a quadrature formula in the standard way i.e. we approximate W pj with the sum of V pj yjk wjk over some indices k the index set can depend on j . Thus the partial derivative DiW pj can be obtained as the sum of DiV pj yjk wjk over k. Let q1 q2 . . . be the points pj yjk in some order and let w1 w2 be the corresponding ordering of the weights wjk. Create the index vector J in the following way J 1 is the index j for which q1 pj yjk for some k . Thus J maps from indexes of the points q1 q2 . . . to indices of the projected points pj. Now the Jacobian for the variable V can be computed in the points q1 q2 . . . . The result is represented by the contributions Jk. The Jacobian for the variable W can be represented by the contributions Kk which are computed as follows. The DOF matrices are unchanged Kk.DOF Jk.DOF. The VAL matrices are transformed according to Kk.VAL r c Jk.VAL r c wc. The new EP vectors are constructed by Kk.EP c J Jk.EP c .

An embodiment may also provide an optimization using a cache for example when using the above recursive algorithms for computing values and Jacobians of variables it often happens that one computes the same variable several times at different levels of the recursion tree. To save computing time the results of the evaluations may be stored in the cache data structure for later use. In the cache each result is stored together with a key which identifies which variable was evaluated and whether it was values or the Jacobian that was computed. To search among the keys hashing can be used. It is important also to keep track of the evaluation points. Each time one switches from one set of evaluation points to another set one must make sure that either the cache is cleared or that the cache is pushed. In the latter case the cache works as a stack where each level corresponds to a set of evaluation points. When a user is done with one set of evaluation points the user can return to the previous set by popping the cache.

An embodiment may further include assembling the residual vector of a weak equation. For example consider a weak term that is an expression of the type V test W where V and W are variables. The residual vector L corresponding to the weak term is a column vector defined by L r integral of DrV W over some domain where we have assumed some given values of the DOFs Ui. To compute the residual vector numerically we approximate this integral with a quadrature formula L r sum of DrV pj W pj wj over certain indices j 1 2 . . . m. Thus the method may begin by computing the Jacobian of V and the values of W in the points pj using the above methods. Assume that the Jacobian of V in the points pj is represented by the contributions Jk. For simplicity assume that the variable V is constructed from basic variables only using auxiliary variables. Thus the contributions Jk all have Jk.EP 1 2 . . . m . Compute the row vector C as C j W pj wj. Now the residual vector L can be computed as follows start with L as the zero vector. Loop over all k then over all columns j of Jk.DOF and then over all rows r of Jk.DOF and add Jk.VAL r j C j to L Jk.DOF r j .

It should be noted that a weak term can in general have the form V test E V1 V2 . . . Vn . To simplify the presentation a name W can be introduced for the expression E V1 V2 . . . Vn which is possible by using an auxiliary variable. V test is described elsewhere herein in more detail.

A weak expression may be defined as a sum of weak terms. A weak equation is obtained by summing a number of integrals of weak expressions and putting the result equal to zero. shows the weak formulation. The integrals can be taken over different domains. Partial differential equations can be reformulated as weak equations.

An embodiment may further include assembling the stiffness matrix of a weak equation. For example consider a weak term that is an expression of the type V test W where V and W are variables. The stiffness matrix S corresponding to the weak feint is defined by S r c integral of DrV DcW over some domain. To compute the stiffness matrix numerically an approximation is made of this integral with a quadrature formula S r c sum of DrV pj DcW pj w j over certain indices j 1 2 . . . m. Thus the method of assembling the stiffness matrix of a weak equation is commenced by computing the Jacobians of V and W using the above method. Assume that these Jacobians are represented by the contributions J1 and Kk respectively. For simplicity assume that the variable V is constructed from basic variables only using auxiliary variables. Thus the contributions J1 all have J1.EP 1 2 . . . m . Now form the matrices COLk ROWlk and the three dimensional arrays VALlk as follows. Put COLk Kk.DOF and ROWlk r c J1.DOF r Jk.EP c . The array VALlk is defined by VALlk r c s J1.VAL r Jk.EP s Kk.VAL c s w Jk.EP s . Now the arrays COLk ROWlk and VALlk constitute a kind of sparse matrix representation of S. More precisely S r c sum of VALlk i j s where the sum is taken over all l k s i and j such that r ROWlk i s and c COLk j s .

An embodiment may further include assembling the constraints of a weak equation. For example consider a constraint W 0 on some domain where W is a variable. The constraint is discretized by requiring that W 0 holds in a finite number of points pj j 1 2 . . . m. Often the points pj are uniformly distributed in each mesh element on the domain. The constraint residual vector M is defined as the column vector with the components Mj W pj . This vector can be computed with the method for evaluating the variable W described above.

The constraint matrix C is the Jacobian of M with respect to the degrees of freedom namely Cji DiMj DiW pj . The constraint matrix C can be computed by computing the Jacobian of W in the points pj using the method described above. The result is a list of contributions Jk. Now the partial derivative DiW pj can be computed as the sum of Jk.VAL r c where the sum is taken over all k r and c such that Jk.DOF r c i and Jk.EP c j.

In understanding the assembly and solution process it is helpful to understand how the discretization of a stationary PDE problem is formed. The starting point is the weak formulation of the problem in and then with the discretization of the constraints 0on 0on 0on

The constraints on subdomains boundaries and vertices are stored in the sub fields equ.constr bnd.constr and pnt.constr respectively of xfem.femg. Consider the constraints on boundaries B. For each mesh element in B i.e. mesh edge in B consider the Lagrange points of some order k i.e. the points whose local coordinates are a multiple of 1 k . Denote them by x 1 mj where m is the index of the mesh element. Then the discretization of the constraint is 0 

The dependent variables are approximated with functions in the chosen finite element space s . This means that the dependent variables are expressed in terms of the degrees of freedom as

where phiare the basis functions for variable u. Let U be the vector with the degrees of freedom Uas the components. This vector is called the solution vector since it is what is to be computed. Now M only depends on U so the constraints can be written 0 M U . Now consider the weak equation 

The integrands W 2 W 1 and W 0 are stored in the subfields equ.weak bnd.weak and pnt.weak respectively of xfem.femg. The integrands W 2 W 1 and W 0 are weak expressions. To discretize this equation we express the dependent variables in terms of the DOFs as above. Similarly the test functions are approximated with the same finite elements this is the Galerkin method 

Since the test functions occur linearly in the integrands of the weak equation it is enough to require that the weak equation holds when we choose the test functions as basis functions 

When substituted into the weak equation this gives one equation for each i. Now the Lagrange multipliers have to be discretized. Let 

is approximated as a sum over all mesh elements in B. The contribution from mesh element number m to this sum is approximated with the Riemann sum

where w l mj is the length or integral of ds over the appropriate part of the mesh element. The integral over W and the sum over P is approximated similarly.

The objective is to solve this system for the solution vector U and the Lagrange multiplier vector LAMBDA. L is called the residual vector M is the constraint residual vector and C N is the constraint matrix. Note that M is redundant in the sense that some point wise constraints occur several times. Similarly L is redundant. This redundancy is removed by the solvers. The solution of the discrete system is obtained by using Newton s iterative method i.e. by solving a number of linearized problems see below .

The integrals occurring in the components of the residual vector L as well as the stiffness matrix S are computed approximately using a quadrature formula. Such a formula computes the integral over a mesh element by taking a weighted sum of the integrand evaluated in a finite number of points in the mesh element. The order of a quadrature formula is the maximum number k such that it integrates all polynomials of degree k exactly. Thus the accuracy of the quadrature increases with the order. On the other hand the number of evaluation points also increases with the order. As a rule of thumb one can take the order to be twice the order of the finite element that is used. The order of the quadrature formula is denoted by gporder in the data structures gp stands for Gauss points .

In time dependent problems the discretization of a time dependent problem is similar to the stationary problem 

where now U and LAMBDA depend on time t. The matrix D is called the mass matrix. This matrix is assembled in a similar way as the stiffness matrix but from data in the fields xfem.femg. .dweak instead of xfem.femg. .weak. It is assumed that the constraint is linear i.e. M depends linearly on U. The solution of the above system of differential algebraic equations can be obtained by using standard DAE solvers.

In considering a linearized stationary problem the linearization point corresponds to a solution vector U. The discretization of the linearized problem is 

where S K is called the stiffness matrix. The solution of this linear system can be obtained by standard direct or iterative methods.

where Uis the solution vector corresponding to the linearization point . The solution to this eigenproblem can be obtained by standard methods.

Referring now to shown is an example of another embodiment of a user interface or GUI that may be used in connection with specifying local and non local couplings of multiphysics systems. The GUI is similar in features and operation as the GUI of and further includes an option to add geometries which is discussed in detail below. On the GUI a user can start a multiphysics model that consists of several application modes and several different geometries. The user can start in the top left part of the GUI by specifying space dimension 1 D 2 D or 3 D and the user can elect to edit the names of the independent variables in the Independent variables dialog box . The user can also select application modes from the left most list box and add them to the model by pressing the button or by double clicking them. Application modes can be removed from the list by pressing button after selecting from the Geometry name drop down list box the Add button changes to a button after clicking it and thus adds geometry to the Geometry name drop down list box . Each geometry can also have a different space dimension.

Prior to the user adding an application mode as described above the user can edit the name of the application mode. Additionally the user can also edit the name of the application mode s dependent variables and the element type used for modeling. Each application mode in the model is given a unique name which is used to identify the origin of the variables in the multiphysics model. The user can edit the dependent variables names but the names are required to be valid variable names e.g. they are required to start with a letter . If the application mode contains more than one dependent variable the user can enter all of the variable names as space separated entries in the Dependent variables edit field . In the PDE modes where more than one dependent variable is possible the user can determine the number of equations in the model by entering one or more space separated variable names.

In the Element drop down list box the type of element used for the modeling is selected. Each application mode has a set of predefined elements. The element selection of the Element drop down list box can also be changed during the modeling process using the Element page in the Subdomain Settings dialog box .

On the right hand side of the GUI of a user can set the solver type stationary time dependent etc. and solution form coefficient general or weak form for the multiphysics model by respectively selecting a solver type from the solver type of drop down list and selecting a solution from the Solution form drop down list . In the list box located below the solution form drop down list all the application modes that have been added to the model appear. The name and the dependent variables for the selected application mode are displayed below the list box . A user can select any of the model s application modes and change its submode by selecting from the elements listed in the Submode drop down list . In addition to the Standard submode displayed in the Submode drop down list of the GUI for example there is also a Wave Extension submode not shown for some application modes. The Wave Extension submode extends the standard time dependent equation to a wave equation using a second derivative with respect to time . Pressing OK starts a new multiphysics model with all the added application modes as described above. The application mode that is selected in the right list box becomes the active application mode when the user continues the modeling.

Referring to shown is an example Boundary settings dialog box that provides a user the ability to access the weak form. In the Boundary settings dialog box a user can enter weak dweak and constr coefficient information in the respective weak dweak and constr fields corresponding to the fields xfem.femg.bnd.weak xfem.femg.bnd.dweak and xfem.femg.bnd.constr respectively in the data structure. The dialog box also sets the domain grouping xfem.femg.bnd.ind. The Boundary settings dialog box further includes a Domain selection list that permits a user to select domain related information associated with the weak solution form. The Boundary settings dialog box can also be made available in coefficient view and also directly in the application mode for PDE oriented application modes.

Referring to shown is an example of a Subdomain Settings dialog box which enables a user thereof to set shape function object integration order and constraint order corresponding to the fields xfem.femg.equ.shape xfem.fem g.equ.gporder and xfem.femg.equ.cporder respectively in the data structure. The dialog box also sets the domain grouping xfem.fem g.equ.ind. The shape function object integration order and constraint order data structures are defined below. In a typical application mode the element type is only set on a subdomain level but can be modified in coefficient view boundary level edge level and point level. It is possible that an application mode has no subdomain extent and thus is defined only on a boundary level and or below. Then in one implementation for example the application mode can set element types on a boundary level and allow modification of coefficient on edge level and point level.

Referring to shown is another example of a Subdomain Settings dialog box which permits a user to enter weak dweak and constr coefficient information for respective weak dweak and constr fields corresponding to the subfields of the xfem.femg data structure. The dialog box may also be used to specify domain groupings for example stored in the xfem.femg.equ.ind field. The dialog box can be made available in coefficient view and also directly in the application mode for PDE oriented application modes.

Referring to shown is an example of a representation of the data structure that may be included in an embodiment in connection with storing data in connection with the PDEs selected and combined. The data in the data structure may include data used in connection with the multiphysics model which is associated with local and or non local coupling variables.

As previously described the data structure above can be extended for use with multiple geometries by storing the above data structure for geometry g in a list entry xfem.femg

The data structure is similarly constructed and arranged as the data structure as described above and further includes the additional fields fem.sshape fem.shape fem.expr fem.equ fem.bnd fem.edg and fem.pnt as described above. The global coordinates are polynomials in the local element coordinates of a certain degree k. This degree k can be specified in the field fem.sshape . For instance fem.sshape 2 uses quadratic shape functions for the global space coordinates. This makes it possible for the mesh elements at the boundary to be curved and thus come closer to the true geometric boundary. The default k is equal to the maximum order of the shape function objects in fem.shape where k is called the geometry shape order. The field fem.shape is a cell vector with shape function objects. For example fem.shape shlag 1 u shlag 2 u shvec A defines three shape function objects. A user can choose on which domains these objects will be active by using the fields fem.equ.shape fem.bnd.shape fem.edg.shape fem.pnt.shape as discussed in detail below.

In the fields fem.equ.shape fem.bnd.shape fem.edg.shape and fem.pnt.shape a user can specify where the shape function objects in fem.shape are to be used. For example fem.shape shlag 1 u shlag 2 u sharg25 v fem.equ.shape 1 3 2 3 3 means that on the first subdomain group only the first and third shape function objects shlag 1 u and sharg25 v are active. On the second subdomain group the second and third shape function objects are active. On the third subdomain group no shape function objects are defined while on the fourth subdomain group only sharg25 v is active. Thus the variable u will be defined on subdomain groups 1 and 2 having linear elements in subdomain group 1 and quadratic elements in subdomain group 2. If these subdomains groups are adjacent this will cause problems since hanging nodes can appear. Thus the user should not mix elements for the same variable in adjacent subdomains. If the field fem.equ.shape is not given then all shape function objects in fem.shape apply in all subdomain groups.

Similarly the field fem.bnd.shape is a cell vector which specifies for each boundary group which shape function objects are active. If fem.bnd.shape is not given then it is inherited from fem.equ.shape. This means that a shape function object which is active in a subdomain is also active on the boundary of that subdomain as well as boundaries lying within the subdomain .

In 3 D the field fem.edg.shape similarly specifies the usage of shape function objects on edge groups. If the usage of shape function objects is not given it is inherited from the usage on subdomains and boundaries. That is a shape function object which is active on some subdomain or some boundary is also active on all edges that touch this subdomain or boundary. In 2 D and 3 D the field fem.pnt.shape similarly specifies usage on vertices. Specifying usage on vertices is defaulted by inheritance from subdomain boundaries and edges.

The fields fem.usage and fem.border mentioned earlier can be implemented in terms of the fem. .shape fields by not assigning a shape function object to a subdomain boundary edge or point. Thus with the fields fem. .shape the fields fem.border and fem.usage are no longer necessary.

The additional fields cporder gporder weak dweak constr and expr are available in the fields fem.equ fem.bnd fem.edg and fem.pnt . A user can define new field variables in terms of others in the fields fem.expr fem.equ.expr fem.bnd.expr fem.edg.expr and fem.pnt.expr. This may provide an advantage if included in an embodiment for example in which an equation may include the same expression several times.

In the field fem.expr a user can put variable definitions that apply on all domain groups of all dimensions . The field fem.expr is a cell vector of alternating variable names and expressions. In fem.equ.expr a user can put variable definitions that are in force on subdomains. For example fem.equ.expr W B H 2 div ux vy defines W B H 2 and div ux vy on all subdomain groups. The defining expressions in the fem.equ.expr cell vector can be cell vectors for instance fem.equ.expr v a b a b w pi x b . This defines v to be a b on subdomain group 1 and a b on subdomain group 2. The use of an empty vector instead of an expression means that the variable is not defined on the corresponding subdomain group. For example fem.equ.expr v a b means that v a b on subdomain group 1 and v is undefined on subdomain group 2. Similarly variable definitions on boundaries edges and vertices are put in fem.bnd.expr fem.edg.expr and fem.pnt.expr respectively.

The integrals occurring in the assembly of the matrices are computed numerically using a quadrature formula. The order of this quadrature formula is specified in the fields fem.equ.gporder fem.bnd.gporder fem.edg.gporder and fem.pnt.gporder. The fem. .gporder fields are entered in the dialog box of for subdomains. There are similar dialog boxes for boundaries edges and points. The field fem.equ.gporder gives the order for integrals over subdomains. Fem.equ.gporder can be a number or a cell vector. In the first case fem.equ.gporder applies to all subdomain groups. In the second case fem.equ.gporderi applies to the ith subdomain group. Fem.equ.gporderi can be a number or a cell vector of numbers. In the latter case fem.equ.gporderi k applies to the kth equation in coefficient or general form and the kth integrand fem.equ.weaki k in the weak formulation.

Similarly fem.bnd.gporder fem.edg.gporder and fem.pnt.gporder gives the order for integrals over boundaries edges and vertices respectively. The default value of the gporder fields is twice the maximum order of the shape functions being used.

The pointwise constraints are enforced in the Lagrange points of a certain order. This order is given in the fields fem.equ.cporder fem.bnd.cporder fem.edg.cporder and fem.pnt.cporder. These fields have the same syntax as the gporder fields. The field fem.equ.cporder gives the order for constraints on subdomains. Fem.equ.cporder can be a number or a cell vector. In the first case fem.equ.cporder applies to all subdomain groups. In the second case fem.equ.cporderi applies to the ith subdomain group. Fem.equ.cporderi can be a number or a cell vector of numbers. In the latter case fem.equ.cporderi k applies to the kth constraint on subdomain group i. Similarly fem.bnd.cporder fem.edg.cporder and fem.pnt.cporder gives the order for constraints on boundaries edges and vertices respectively. The default value of the cporder fields is equal to the maximum of the orders of the shape functions being used. The fem. .cporder fields are entered in the dialog box of for subdomains. There are similar dialog boxes for boundaries edges and points.

Equations may be represented in weak form are stored in the fields fem.equ.weak fem.bnd.weak fem.edg.weak and fem.pnt.weak. In one embodiment the field fem.equ.weak contains the integrand in the integral over subdomains. Fem.equ.weak can be a string expression or a cell vector. In the first case the expression applies to all subdomain groups. In the second case fem.equ.weakk applies to the kth subdomain group. Fem.equ.weakk can be an expression or a cell vector of expressions. In the latter case the expressions in the cell vector are added. In the expressions representing the integrand the test function corresponding to a variable v is denoted v test. Then v test will have the same shape functions as v. Similarly the fields fem.bnd.weak fem.edg.weak and fem.pnt.weak contain integrands that are integrated over boundaries edges and points respectively. All these integrals may be included on the right hand side of the weak equation.

It should be noted that the function v test as used herein is described in finite element literature for example as in Claes Johnsson Numerical Solution of Partial Differential Equations by the Finite Element Method Studentlitteratur ISBN 91 44 25241 2 Lund Sweden 1987.

For a time dependent problem the terms containing time derivatives may be stored in fem.equ.dweak fem.bnd.dweak fem.edg.dweak and fem.pnt.dweak. These have the same syntax as the weak fields except that the time derivatives must enter linearly. The time derivative of a variable v is denoted v time. The integrals defined by the dweak fields are put on the left hand side of the weak equation. The and shows the dialog boxes for entering the fields weak and dweak for subdomains boundaries edges and points respectively.

Eigenvalue problems are specified like time dependent problems. Then v time may be interpreted as minus the eigenvalue times v.

The constraints in the weak problem formulation are stored in the fields fem.equ.constr fem.bnd.constr fem.edg.constr and fem.pnt.constr. These constraints are implemented pointwise. The constraints on subdomains R n where n is the space dimension are given in the field fem.equ.constr. This field can be an expression or a cell vector. In the first case the expression fem.equ.constr is constrained to be zero on all subdomain groups. In the second case fem.equ.constrk applies to the kth subdomain group. Fem.equ.constrk can be an expression or a possibly empty cell vector of expressions. These expressions are constrained to be zero on the kth subdomain group. Similarly constraints on boundaries edges and vertices are defined in fem.bnd.constr fem.edg.constr and fem.pnt.constr respectively.

It should be noted as described elsewhere herein that the equations constraints such as the boundary conditions and the initial conditions of the PDE problem are stored in the fields fem.equ fem.bnd fem.epg and fem.pnt. The field fem.equ contains information pertaining to the subdomains i.e. geometric domains of the same dimension as the space. For a 3 D geometry a field fem.epg is related to the edges curves and for both a 2 D and 3 D geometry there can be a field fem.pnt which corresponds to vertices points . As described elsewhere herein equations represented within this data structure may be given in a strong form of PDE or in a weak form as an equality of integrals. The strong form has two variants coefficient form or general form suitable for linear and nonlinear problems respectively. The form of this equation is specified in fem.form as described elsewhere herein. After the PDE problem is specified the extended mesh structure fem.xmesh can be constructed. The extended mesh includes a low level description of the PDE problem. In one embodiment such an extended mesh may be produced for example by invoking a particular function. The solution to a particular set of PDE s may be computed by invoking one of the solvers as described elsewhere herein in accordance with the particular type of PDE specified for example time dependent or eigenvalue PDE s.

The solution vector or the solution matrix is stored in the subfield u of the data structure field fem.sol. Additionally other fields within the subfield fem.sol for the solution may include fields used for example when there are time dependent or eigenvalue solutions produced. In other words the data structure for example an instance of the data structure may use different fields in accordance with the different type of PDE solution formed.

It should be noted that an embodiment can also include any one or more of a variety of different software tools for the visualization and processing of data. For example tools may be included which provide for evaluation of a particular integral or expression for a particular set of points.

As also described elsewhere herein there are both local and nonlocal couplings that may be included in an embodiment. Generally variables may be evaluated locally which is to say that their value at each evaluation point may be computed using information at that particular evaluation point. It is also possible to define nonlocal coupling variables for which the value at each evaluation point is the result of a computation carried out elsewhere in the same geometry or within another geometry. These variables may then be used for example in the PDE coefficients or during post processing. These types of variables may be referred to as the nonlocal dependencies.

Referring to shown is an example of a weak formulation or weak solution form. The first equation is the weak equation and the others are the constraints . Here W is the subdomains B is the boundaries including outer and internal boundaries and P is the vertices points defined in the geometry. The integrands Ware scalar expressions involving the dependent variables u u . . . uas well as the test functions v v . . . v and their derivatives. The test functions and their derivatives enter linearly.

Referring to shown is a conversion from general form to weak form. Moreover conversion from general form to weak form is performed according to the formula as shown in where there is an implicit summation over the k and i indices in each product and n is the space dimension. Affected fields are therefore ga f weak da and dweak from equ and g weak r and constr from bnd with weak dweak and constr which are the only fields remaining. Other fields within equ and bnd such as shape init etc. remain unchanged.

In addition when converting to weak form according to fem.border can be taken into account. That is to say that if fem.border is not 1 or on there may be borders on which boundary conditions should not be applied. In order to decide in which subdomains each dependent variable is in use and hence decide on which boundaries and borders to apply conditions a comparison is made between the variable names in fem.dim and the field variables defined by the shape function objects being used.

Referring to shown is an example of another embodiment of a flowchart of steps of one method for automatically specifying one or more systems of PDEs which PDEs are associated with non local coupling of variables representing the PDEs in a single combined form and solving a system of PDEs. Many of these steps are similar to those described in connection with for examples described elsewhere herein. What will now be described are a highlight of additional steps with respect to other descriptions in connection with .

Referring now to the flowchart at step a first geometry is selected. At step a determination is made as to whether all geometries are processed. If not control proceeds to step . If all geometries are processed control proceeds to step . Generally the processing steps set forth in flowchart may be performed for each geometry of interest and are similar to other processing steps described elsewhere herein in connection with other FIGS. However the processing steps of utilize PDEs in the weak form. Thus step provides for forming the weak form of the equations from the general form of step .

Referring now to shown is a flowchart of steps that may be included in one embodiment in forming and solving for a solution of PDE s. The flowchart begins with step where the weak form of PDE s are formed. At step a stiffness matrix is determined. At step a residual matrix is determined. At step a constraint matrix is determined. At step a constraint residual is determined. At step the discretized system of PDE s may be solved in accordance with the type of the system of PDE included. Depending on the type of PDE s being solved different outputs of the various processing steps may be used. This is described in more detail elsewhere herein.

Referring now to shown is a flowchart of steps of one embodiment for computing a stiffness matrix. At step a loop counter variable i is initialized to 0. At step a determination is made as to whether all weak terms have been processed. If a determination is made that all weak terms have been processed control proceeds to step where the stiffness matrix is formed by adding together all the stiffness matrices for the weak terms.

If a determination is made at step that all weak terms have not been processed control proceeds to step where the current weak term is assigned to be the next weak term and the variable sum is initialized to 0. At step a determination is made as to whether all evaluation points have been processed. If not control proceeds to step where P is assigned the next set of one or more evaluation points.

The total set of evaluation points may be determined using the quadrature formula. The number of points in one set of evaluation points may be chosen to optimize performance that may vary in accordance with each embodiment. For example in an interpreted environment such as MATLAB the parsing of an expression can have a high computational cost. One might therefore choose a high number of points. On the other hand processing many points in parallel costs lots of memory so the number of points may also be limited in accordance with the amount of available memory.

At step Jacob V is assigned to be the computed Jacobian of variable V at the points included in P. It is at step at which a recursive nature of this technique may be observed such that the appropriate routine is called to compute the Jacobian in accordance with the type of Variable V. Control proceeds to step where the variable Jacob W is assigned the computed Jacobian of the variable W at the points included in P. As with step processing of step is also recursive in this embodiment of the processing steps included in flowchart . Control proceeds to step where the variable sum is updated to include the product of the Jacobian of V and W multiplied by the weights of the points in P. Weights may be determined using techniques known to those of ordinary skill in the art for example using the quadrature formula as described in for example the volume 1 by Zienkiewicz et al. described elsewhere herein.

Control proceeds to the determination at step where a further determination is made as to whether all evaluation points have been processed. If so control proceeds to step where the variables weak term stiffness matrix i and i are updated. Control proceeds to step to determine whether all weak terms have been processed.

Referring now to shown is a flowchart of one embodiment for computing a residual vector. The steps in flowchart are more detailed processing steps with reference to step of flowchart . At step a variable i is initialized to 0. At step a determination is made as to whether all weak terms have been processed. If so control proceeds to step where the residual vector is formed by adding all residual vectors for the weak terms. If all weak term processing is not complete control proceeds to step where sum is initialized to 0 and the current weak term is assigned the next weak term to be processed. Control proceeds to step where a determination is made as to whether all evaluation points have been processed. If not control proceeds to step where P is assigned the next set of one or more evaluation points. At step the Jacobian of variable V is computed at all points in P. At step values of variable W are computed for the points in P. Steps and include recursive processing in order to determine the Jacobian and value respectively in accordance with variable type. At step sum is updated by the product Jacobian of V Value of W weight of the points P. The points P and weight may be determined using techniques described elsewhere herein. Control proceeds to step where a determination is made if all evaluation points have been processed. If so control proceeds to step where the following variables are updated weak term residual vector i to store the results from the current weak term and i.

Referring now to shown is a flowchart of more detailed processing steps for determining a constraint matrix that may be included in an embodiment. At step the matrix C is initialized. At step a determination is made as to whether all constraint variables have been processed. If so processing stops. Otherwise control proceeds to step where W is assigned the next constraint variable. At step a determination is made as to whether all evaluation points have been processed. If so control proceeds to step . Otherwise control proceeds to step where P is assigned the next set of one or more evaluation points. The evaluation points may be determined in accordance with values specified in the cporder field of the xfem data structure described elsewhere herein. At step the Jacobian of W is computed at the points P and the vector of partial derivatives comprising the computed Jacobian are appended as the last rows in the matrix C at step . Control proceeds to step .

Referring now to shown is a flowchart of steps of an embodiment that may be used in determining a constraint residual vector. At step M is initialized as the empty vector. At step a determination is made as to whether all constraint variables have been processed. If so processing stops. Otherwise control proceeds to step where W is assigned the next constraint variable. Control then proceeds to step where a determination is made as to whether all evaluation points have been processed. If so control proceeds to step . Otherwise control proceeds to step where P is assigned the next set of evaluation points. At step values of variable W are computed at the points P and assigned to Val W. At step Val W is appended as the last rows in the vector M. Control proceeds to step .

Referring now to shown is a flowchart of steps of an embodiment that may be used in determining the value of a variable at a set of points P. At step a determination is made as to whether the variable V is a basic variable. If so control proceeds to step where the values of the basic variable V at points P are determined. Otherwise control proceeds to step where a determination is made as to whether the variable V is of the auxiliary type. If so control proceeds to step where values for the auxiliary variable are determined. Otherwise control proceeds to step where a determination is made as to whether the variable V is a glued variable. If so control proceeds to step where the value of glued variable V is determined. Otherwise control proceeds to step where a determination is made as to whether the variable V is a mapped variable. If so control proceeds to step for computing the value of the mapped variable V. Otherwise the variable is an integrated type variable and its value is accordingly determined.

Referring now to shown is a flowchart of steps of an embodiment that may be used in determining the values of a basic variable at a set of points P. At step the values for a set of points are determined and returned. A vector of values is returned in which a jth element of the vector corresponds to a sum for a single point pj.

Referring now to shown in is a flowchart of steps of an embodiment that may be used in determining the values of an auxiliary variable at a set of points P. At step it is determined which variables occur in the defining expression for the auxiliary variable. Additionally the variable i is initialized to 0. At step a determination is made as to whether all variables have been processed. If not control proceeds to step where V is assigned the next variable and i is updated. At step the values of the variable V are determined at points P. VAL i is a vector of values where the jth component of VAL i corresponds to the jth point in P. Control proceeds to step where a determination is made as to whether all variable processing is complete. If so control proceeds to step where the defining expression of the auxiliary variable is evaluated using VAL i for all entries in VAL. It should be noted that an expression may be evaluated for example using procedures available for use with the commercially available product MATLAB that parse the expression and apply appropriate mathematical functions to the operands. Control proceeds to step where the expression value is returned as a vector of values.

Referring now to shown is a flowchart of steps of an embodiment that may be used in determining the values of a glued variable at a set of points P. At step a determination is made as to which variables comprise the glued variable. Additionally k and VAL are initialized. Control proceeds to step where a determination is made as to whether all variable processing is complete. If so control proceeds to step where the vector VAL is returned that includes an element for each evaluation point. Otherwise control proceeds to step where k and V are updated. I is determined as the indices of points pj included in P that are within the domain k. Note that k indexes both the domains and the corresponding variables. At step VAL j is assigned the computed values of variable V at points pj included in I. In other words the values of V are computed for those points pj for which j belongs to I. In this example at step this is performed by a call to compute values of var. The returned values are then placed in the appropriate indices j of the vector VAL. Control proceeds to step .

Referring now to shown in is a flowchart of steps of an embodiment that may be used in determining the values of a mapped variable at points in a set P. At step global coordinates of the points in P are determined. At step the global coordinates of the mapped points are determined. At step using a search technique the local coordinates for points Q are determined. At step V is the variable that is mapped and the values of the variable V are determined at points in Q.

Referring now to shown is a flowchart of steps of one embodiment for determining the values of an integrated variable at a set of points P. At step the evaluation points q 1 and the corresponding weights are determined as described elsewhere herein. The index vector J is also determined as described elsewhere herein. At step R is assigned the computed values of variable V at points q l l 1 2 . . . . At step VAL j is determined. R is a vector including values of V at all points q l l 1 2 . . . . A single entry VAL j corresponds to the value of the integrated variable at the jth point. At step VAL is returned as the vector of values.

Referring now to shown is a flowchart of steps of an embodiment for computing the Jacobian of a variable V at a set of points P. At step a determination is made as to whether V is a basic variable. If so the Jacobian of the basic variable is determined at step . Otherwise control proceeds to step where a determination is made as to whether V is an auxiliary variable. If so control proceeds to step where the Jacobian of the auxiliary variable V is determined. Otherwise control proceeds to step where a determination is made as to whether V is a glued variable. If so control proceeds to step where the Jacobian of the glued variable V is determined. Otherwise control proceeds to step where a determination is made as to whether V is a mapped variable. If so control proceeds to step where the Jacobian of the mapped variable V is determined. Otherwise the variable is an integrated variable and the Jacobian of the integrated variable V is determined at step .

Referring now to shown is a flowchart of steps of an embodiment for computing the Jacobian of a basic variable V at points P. At step J1.DOF is determined. At step J1.VAL is determined. At step J1.EP is determined. At step the J1 is returned.

It should be noted that as described herein for all the functions that compute the Jacobian what is returned is not the Jacobian matrix in this embodiment. Rather a representation of the Jacobian is returned. This representation is a list of so called contributions according to the data format for the Jacobian as described elsewhere herein.

Referring now to shown is a flowchart of steps of an embodiment for computing the Jacobian of an auxiliary variable. At step k is initialized to 0 and it is determined which variables occur in the defining expression E of the auxiliary variable. Control proceeds to step where a determination is made as to whether all variables have been processed. If not control proceeds to step where V is assigned the next variable to be processed and k is updated. At step J k is assigned the computed Jacobian of the variable V at points in P. At step the partial derivative of the expression with respect to V is determined symbolically and then evaluated at points included in P. An embodiment may utilize the compute values of var routine as described in connection with in evaluating the expression of the partial derivative noted as DEDV in step in accordance with variable types. Other routines compute values of XXX var are called recursively in accordance with variable type. K k is determined from J k and C k as described elsewhere herein. Control proceeds to step where a determination is made as to whether all variables have been processed. If so control proceeds to step where the concatenation of K k for all k is performed and returned as the Jacobian.

Referring now to shown is a flowchart of steps of an embodiment for computing the Jacobian of a glued variable at a set of points P. At step it is determined which variables comprise the glued variable. Additionally k is initialized to be 0. At step a determination is made as to whether all variables have been processed. If not control proceeds to step where k and V are updated. Additionally I is assigned all indices j of the points pj in P that are in the domain k. At step J k is determined as the computed Jacobian of V at points pj for all j in the set I. Additionally K k is created from J k and I. Control proceeds to step where a determination is made as to whether all variable processing is done. If so control proceeds to step where all of K m for all m are concatenated and returned.

Referring now to shown is a flowchart of steps of an embodiment for determining a Jacobian of a mapped variable at a set of points P. At step the global coordinates for P are determined. At step the global coordinates of the mapped points are determined. At step using a search technique the local coordinates of the mapped points Q are determined. At step the Jacobian for V is determined at points Q where V is the variable that is mapped.

Referring now to shown is a flowchart of steps of an embodiment for determining the Jacobian of an integrated variable at a set of points P. At step evaluation points q 1 are determined and corresponding weights. Index vector J is determined. Determination of evaluation points weights and index vector J is described elsewhere herein in more detail. At step the Jacobian of V is determined for points q l l 1 2 . . . . At step K k is determined from J k and w as also described in more detail elsewhere herein. At step K is returned.

Referring now to shown is an example of an embodiment of a data structure that may be used in representing a plurality of geometries that are coupled.

The data structure is headed by a pointer xfem. Included in the data structure is an extended mesh or xmesh structure . For each of the geometries a fern data structure instance such as is included. It should be noted that each instance of the fern data structure such as may be an instance of the data structure described in connection with . The field may include one or more elements that are used to define the different types of variables in non local couplings. It should be noted that an embodiment may also include non local couplings which are not between geometries but specified within a single geometry also within a single fern structure. Also shown in the data structure is the sol or solution field . The sol field is a structure with a subfield u which is a solution vector or a solution matrix. Each column in the solution matrix or vector contains the values of all the degrees of freedom. If u is solution matrix then each column corresponds to the solution at a certain time value or eigenvalue. For time dependent or eigenvalue problems sol can have additional subfields containing the time values or eigenvalues. It should be noted that an embodiment may also include other fields in the data structure of .

Referring now to shown is an instance of a non local variable or coupling specified such as . It should be noted that each instance of a non local coupling included in the field may have a similar structure to that of . A particular instance of elemcp1 for a non local coupling variable may include an elem field which is elcplscalar elcplextr or elcplproj indentifying either a scalar coupling an extrusion coupling or a projection coupling respectively as described elsewhere herein. Other embodiments may also include other types of couplings. Also included is an src source field and its subfields as well as a dst destination field . It should be noted that other data fields shown in connection with such as meshp and ep are described elsewhere herein in more detail.

It should be noted that various fields of the data structure may be used in accordance with the different types specified in field . In other words for a scalar coupling type different fields of the data structure may be used in contrast to when the type specified in field is one corresponding to a projection coupling. Uses of different fields included in the data structure for example are described in more detail elsewhere herein in accordance with each of the different of the different types of non local couplings and variables.

In one embodiment the extended mesh data structure referred to as xfem.xmesh herein may be created by invoking a function meshextend which creates the xmesh data structure in accordance with the PDE problem as described in the xfem structure. In one embodiment the routine meshextend may be invoked after an instance of fern structure is defined for each geometry and may perform the following 

1. The PDE problem specification is translated to an intermediate form which is stored as a cell vector xmesh.el. Each entry in this cell vector is an object called an element object. An element object defines a part of the PDE problem like variables equations or constraints. An element object also has a number of methods that can perform various tasks.

2. The element objects xmesh.eli may introduce a number of new node points within the mesh elements in addition to the mesh vertices contained in the basic meshes xfem.femg.mesh. The function meshextend organizes all these node points in the data structures in xmesh.

3. Each element object xmesh.eli introduces a partition of a subset of the domains of dimension edim. Meshextend finds the common refinement of these partitions the mesh domain groups. This means that a mesh domain group is a maximal collection of domains that belong to the same group for all of the partitions given by the element objects.

4. The element objects xmesh.eli can introduce degree of freedom names. Meshextend collects all these names in the cell vector xmesh.name. Meshextend also collects all local degrees of freedom created by the element objects into a list of global degrees of freedom. Each global degree of freedom is given a number. A degree of freedom is a pair consisting of a degree of freedom name and a node point. When the node point is specified by giving its location relative to a mesh element that is in local coordinates the degree of freedom may be referred to as a local degree of freedom. When the node point is specified in global coordinates it may be referred to as a global degree of freedom. Note that two local degrees of freedom for adjacent mesh elements can correspond to the same global degree of freedom.

5. The element objects can introduce variables that can be computed. Meshextend collects this information into a table that tells which element object computes which variable.

What will now be described is a more detailed description of the xfem.xmesh data structure follows. xmesh is a structure with the following fields 

What will be described in following text are fields in the domain mesh structure xmesh.dmeshedim 1 which in this embodiment includes the fields g ind n np ix and elvars.

Now we describe the fields of the element mesh structure elmeshi edim 1. This structure has the fields mind elind rows and name.

Following are additional screenshots that may be included in an embodiment. In particular these screenshots may be included in an embodiment in which equations in weak form may be utilized.

Referring now to shown is a screen shot that may be used in connection with defining a multiphysics model that consists of several application modes and one or more different geometries. One may start in the top left portion of the screen by specifying the space dimensions such as one two or three dimensional and edit the names of the independent variables. Application modes may then be selected from screen portion and added to the model causing them to appear on the right hand portion of the screen .

It should be noted that in connection with this FIG. and others described in following text similarities may be seen between features described here and in previous FIGS. in connection with other screen shots.

Referring now to shown is an example of different file menu options that may be included in an embodiment of the model navigator for example as shown in connection with screen shot of . In connection with the file menu various options may be included in an embodiment for example to start a new model open a model file already existing and save the currently created model. Additionally model properties may be edited and stored in the file. An embodiment may also include an option to import model data from for example an application such as MATLAB or from a workspace or another file. Similarly options may exist to export the model or portions thereof to other applications or a file. What will now be described are some options that may be used in connection with the options selection tag from the screen shot menu .

Referring now to shown is an example of an embodiment of an options menu that may be included in an embodiment. The options menu may include for example certain features related to display items such as a grid or an access display as well as adding and editing constants variables expressions and the like.

What will now be described are functionalities that may be included with adding and editing coupling variables .

Referring to B and C shown are various pages of a Coupling Variable Settings dialog box respectively showing a Variables page Source page and Destination page . In the Coupling Variable Settings dialog box a user can specify non local coupling variables. On the Variables page shown in a user can specify the name of the coupling variable in the Variable name edit field . The type of coupling is specified in the Variable type drop down list box . A user can select scalar extrusion or projection variables from the Variable type drop down list box . After a user has entered a new variable name the user can click Add to add the new variable name to the list of coupling variables. The user can also click Delete to delete the highlighted variable in the list.

On the Source page as shown in the source of the coupling is specified i.e. the details of the evaluation undertaken. The evaluation may take place in any geometry in one or more of the domains at one of the levels subdomain boundary edge or point. The levels which may be used are partly dependent on the geometry selected in the Geometry drop down list box and partly dependent on variable type being used so not all levels will always be available in the Level drop down list box .

When selecting geometry and domain level the Source page will enter the corresponding mode. Domains are then selected either from the list box or by clicking on the domains in the GUI. For extrusion variables the expression given in the Expression edit field will be the one which is evaluated within the selected domain s . For scalar and projection variables the Expression edit field is replaced by an Integrand edit field not shown and the Integration order edit field not shown which gives the order of the Gauss quadrature rule which is used for integrating the variables over the source domains for the scalar variable along the projection curve for projection variables.

The Local mesh transformation edit fields x y and z may only be used when defining an extrusion or projection variable. The fields and contain expressions of the space coordinates e.g. x y and z or local mesh parameters e.g. s s1 or s2 which are then applied to create a new source mesh for use in interpolating or setting the position and direction of lines used for evaluating line integrals. The number n of these edit fields which are enabled depends on the dimensionality of the domain s used as the source. For example n is 2 if using boundaries in a 3 D geometry because such boundaries are 2 D surfaces. These edit fields may correspond to the cell vector src.meshp for example in the data structures described herein for extrusion and projection coupling variables.

On the Destination page as shown in a user can define where the variable is to be made available. The destination geometry and domain are specified in the same way as the source geometry level and domain are specified on the Source page B. For scalar variables a user may use the Active in this domain checkbox in order for the specified variable to be available in the selected domain. For extrusion and projection variables defining an Evaluation point transformation in the edit fields x y z activates the variable in the selected domain. If n of the mesh transformation edit fields were enabled on the Source page there will be respectively n and n 1 evaluation point transformation edit fields enabled on the Destination page for extrusion and projection variables. Again the mesh transformation edit fields x y and z should be expressions of the space coordinates or local mesh parameters. These edit fields may correspond for example to the cell vector dst.ep in the data structure for extrusion and projection coupling variables.

For extrusion variables the user can set the interpolation points within the source mesh. For projection variables the evaluation for each destination evaluation point is a line integral. The position of the line is given as follows the first n 1 coordinates in the source mesh are specified by the evaluation point transformation s applied to the destination evaluation point and the n th coordinate is allowed to vary.

Referring now to shown is an example of a dialog box that may be displayed in connection with defining expressions to be used in a model. This may be used for example in introducing shortenings for complicated expressions for entering parameters used in the model. An embodiment may also use expression variables in post processing for example if a user wants to plot a quantity on a graph defined by different application modes in different domains an expression variable may be defined that uses the correct expression in the different domains and may be used to plot that expression variable. Displayed in a dialog box is a variables tab and a definition tab .

What will now be described is the dialog box that may be used in connection with expression variable settings for the definition tab .

Referring to respectively shown are examples of a variables page and a Definition page of an Expression Variable Settings dialog box . In the Expression Variable Settings dialog box the user can define expressions to be used in a model. The Expression Variable Settings dialog box provides a convenient way to introduce short names for complicated expressions that the user wants to use when entering parameters for the model. Another use for expression variables is in post processing where if the user wants to plot some quantity that is defined by different application modes which are in different domains the user can define an expression variable that uses the correct expression in the different domains and then plot the expression variable.

On the Variables page as shown in the user can enter the name of the variable in the Variable name field to define an expression. Expressions can be either domain based i.e. at subdomain boundary edge point level or geometry based i.e. the expression is defined everywhere on the geometry. This variable type can be specified in the Variable type drop down list box .

On the Definition page as shown in the user can specify in which geometry and in which domain the expression should be defined by respectively selecting from the Geometry drop down list and the Level drop down list . In the Expression edit field the user can enter the expression to be defined by the specified variable. The definitions are recorded in the fields fem.expr fem.equ.expr fem.bnd.expr etc. in the data structure for the appropriate geometry. Where a definition is not given in the dialog for a subdomain the corresponding entry in fem.equ.expr will be the empty matrix which means that it is not defined this similarly holds true for bnd edg and pnt.

In connection with the assigned variable names selection of the options menu an assigned variable names dialog box may be displayed as shown in connection with .

Referring now to shown is an example of a dialog box that may be displayed in connection with assigning variables. The assigned variables dialog box may be used to edit assigned variable names for all variables belonging to application modes in a current model. Assigned variables may be used for post processing. They may be created automatically and based on a fixed name each of them gets a unique name.

In connection with application scalar variables as included in options menu item number an application scalar variable dialog box may be displayed.

Referring now to shown is an example of an embodiment of an application scalar variable dialog box . In some applications scalar variables may exist that take part in mathematical model but are independent of the geometry and material for example. The value of such application specific scalar variables may be set using this dialog box. Scalar variables may be included for example in predefined application modes. For example in one embodiment in connection with an application mode related to AC power electromagnetics scalar variables such as omega may be used in representing angular frequency. Additionally some of the modes in which the optional electromagnetics module and structural mechanics module may be included and may also include such scalar variables. It should be noted that an embodiment may disable this menu if no such quantities exist.

In connection with the differentiation rules option menu a differentiation rules dialog box may be displayed and used in an embodiment.

Referring now to shown is an example of an embodiment of a dialog box that may be used in connection with specifying additional differentiation rules. In particular these rules may be used to symbolically differentiate coefficients and a PDE in a general form and to compute the Jacobian of a variable.

In connection with the draw menu as displayed for example in different options may be available in connection with a particular dimension of the geometry of the model.

Referring now to shown is an example of an embodiment of a point menu . In this example the point menu may include three options or items including point mode point settings and an option to view point data as point coefficients. The point mode option may be used to enter or indicate point mode. Point settings may be used to specify point settings for selected points. The view as point coefficients option may be used to view or edit application specific point settings as generic point settings.

Referring to shown is an example of a Point Settings dialog box . The Point Settings dialog box allows 1300 permits entry of fem.pnt.weak fem.pnt.dweak and fem.pnt.constr fields on each point in the respective weak dweak and constr fields of the dialog box .

Referring now to shown is an example of a dialog box that may be used in connection with displaying point settings in coefficient view. When this option is turned on point settings open a new tab dialog box such as . Using this dialog box initial values may be specified and shape functions may also be specified on the init and elements page respectively in addition to the weak terms on the weak page.

Referring now to shown is an example of an embodiment of a menu for edge options that may be used in connection with three dimensional models in this embodiment. The edge menu in this example contains three options. The first option is edge mode where edge mode is enable or indicated. In the edge settings option which will be explained in more detail below edge settings may be specified for selected edges. Additionally an option in this embodiment may be included to view application specific edge settings as generic edge settings.

Referring to shown is an example of an Edge Settings dialog box . The Edge Settings dialog box permits entry of fem.edg.weak fem.edg.dweak and fem.edg.constr fields on each edge in 3 D in the respective weak dweak and constr fields of the dialog box . In coefficient view there are similar user interfaces for adding weak dweak and constr contributions on boundary and subdomain level.

Referring now to shown is an example of a dialog box that may be used in connection with edge settings. In connection with the different tabs included initial values may be specified with the init tab. Shape functions may be specified with the elements tab. Additionally weak terms may be specified on the weak tab.

Referring now to shown are examples of boundary menu options that may be enabled in connection with different dimensional geometries. In particular the boundary menu may appear as in in connection with one and two dimensional geometries and may appear as in for three dimensional objects or geometries.

The boundary mode option may be used to enable or indicate boundary modes. The boundary settings option may be used to specify boundary conditions for selected boundaries. Enable borders may be used to enable or disable the assembly of boundary conditions on subdomain borders. View as boundary coefficients may be used to view or edit application specific boundary conditions as generic boundary conditions. The show direction arrows option may be used to show direction arrows for the different boundaries. It should be noted that certain menu options may be enabled in accordance with the dimensions of a geometry. The option for generating coupled equation variables is used to enable or disable the automatic generation of the equation based variables on boundaries. Similarly the generate coupled shaped variables may be used to enable or disable the automatic generation of shape function based variables on boundaries.

In one embodiment one can generate boundary coupled variables corresponding to the basic variables and their derivatives and call them boundary shape variables such as for example in connection with menu option . In an embodiment one may also be able to generate boundary coupled variables corresponding to the terms in an equation on coefficient or general form and call them equation based boundary variables for example as in connection with option

Referring now to shown is an example of a dialog box that may be used in connection with boundary settings. In particular the weak tab in is displayed which may be used to specify weak terms and constraints in connection with specifying boundary conditions.

Referring now to shown is an example of a dialog box that may be used in connection with PDE models having more than one dependent variable. The dialog box shows the boundary settings for coefficient form PDE with two dependent variables. One may select boundaries from the list box or using other techniques that may be included in an embodiment.

Referring now to shown is an example of a dialog box that may be used in connection with the subdomain settings. In particular when the weak tab is activated as shown in the dialog box weak terms may be specified on selected subdomains.

Referring now to shown is an example of an embodiment of menus and dialog boxes that may be displayed in connection with a solve or solutions menu that may be used in connection with specifying options for partial differential equation solutions and solving methods. In particular the solve menu options may be included as in . In connection with the parameters option the dialog box for solver parameters may be displayed.

Referring now to the multiphysics page or tab in connection with the solver parameters option may cause dialog box to be displayed. Using this multiphysics tab the user may control how to solve a multiphysics model which is specified. For example this dialog box may be used to specify which variables to solve for and how initial value should be updated if you want to solve using an iterative approach where the previous solution becomes the initial values in a next iteration. In the solve for variables section a list of all application modes may be displayed. The solver may solve all variables in all selected application modes. By default an application mode in the model is selected. If the show variables option is checked the list shows all of the variables in the model and you may individually select among all of the variables in the application modes. In the update mechanism for the initial value U section it may be specified how to update the solution used as an initial value. For example if the store solution button is active the solution used for the initial value or valuation is updated using the current solution. In selecting the storage solution automatically option this causes the solution used for the initial value to be stored automatically when a new solution has been computed. From the use solution number drop down box a user may select which solution to use. For time dependant models the default is to use the solution at the last output time.

Referring now to shown are examples of a menu and dialog box that may be used in connection with a multiphysics menu option. The dialog box may be used to select application modes for a current multiphysics model. It should be noted that for PDE modes an embodiment may have more than one dependent variable. The space dimension of the model may be determined by entering one or more space separated variable names. For example in the screen dialog box three independent variables X Y and Z are entered and it is considered a 3 D geometry.

In reference to the foregoing dialog boxes user interfaces and the like data may be entered for each geometry. In this embodiment there are menu options and items used in connection with weak equations that may be stored in fields and subfields of the fern data structure for example as shown in and the xfem data structure for example as shown in . In particular data used in connection with the weak dialog tabs may be stored in fem. .weak fem. dweak and fem. .constr fields. Data used in connection with the Expression Variables dialogs as described herein may be used in adding variables for example to the fields fem.expr and fem. .expr in data structures described herein.

An embodiment may associate particular functionality described herein with particular functions or methods. In one embodiment each of the following is associated with a particular method computing the values of a variable computing the Jacobian of a variable assembling the residual vector of a weak term assembling the stiffness matrix assembling the constraint residual vector and assembling the constraint Jacobian.

It should be noted that as described elsewhere herein an embodiment may include functions routines or methods in accordance with each particular implementation that embody functionality described herein. For example in one embodiment an object oriented scheme may be used in which geometry objects may be predefined in a class structure as may be included in an embodiment using a C programming language for example. Additionally as also described elsewhere herein different methods may be invoked in accordance with each particular class.

Several specific examples as set forth herein include a scalar coupling example an extrusion coupling example and a projection coupling example followed by a discussion of the Weak solution form and the Solvers Sparsity of Jacobian and Non Local Dirichlet Boundary Conditions. In addition other specific examples as set forth herein include a Packed Bed Reactor example and a Magnetic Brake example.

Variables in FEMLAB are generally evaluated locally their value at each evaluation point is computed using information only from that evaluation point. In contrast the value of a coupling variable is the result of a computation carried out elsewhere in the geometry or even in another geometry altogether. When used in the PDE and boundary conditions the result is the introduction of non local dependencies extended multiphysics as opposed to ordinary multiphysics which refers to dependencies between variables in same geometric location.

The coupling variables are extremely powerful in their ability to make the values of an expression available non locally. The coupling variables are not only useful for modeling coupled problems they can also be used solely for post processing and visualization purposes.

All coupling variables are defined in two steps. First define the source i.e. the domains in which the evaluation takes place the nature of that evaluation and the name given to the resulting variable secondly define the destination i.e. the domains within which it is possible to use the resulting variable.

In the graphical user interface you can define coupling variables by using the Coupling Variable Settings dialog box from the Options menu as shown in .

The Source and Destination tabs allow you to define the source and destination details and the Variable type gives the choice of scalar extrusion or projection variables.

Use scalar coupling variables to make scalar values available elsewhere in your model. The source of the scalar value can be an expression in a vertex. In addition the source of the scalar value can be the integral of an expression over one or several subdomains boundaries or edges. The destination of the scalar variable can be the full geometry one or several subdomains boundaries edges or vertices.

As a simple example consider the case of Poisson s equation on a single rectangular domain as shown in . The integral of the square of the solution is used as in flux in a Neumann boundary condition on the right boundary. There is a Dirichlet boundary condition on the left boundary and the top and button boundaries have zero in flux. The problem is nonlinear so you have to use the nonlinear solver. The right boundary condition contains the scalar coupling variable in a coefficient so the weak solution form must be used.

Start FEMLAB and select the 2 D Coefficient Nonlinear PDE mode in the Model navigator. Use the Lagrange Quadratic element type. Press the More button and select solution form Weak.

Go to the Source page and select subdomain 1. Enter u 2 in the Expression field and enter 4 in the Integration order field.

As a simple rule the integration order can be the maximum of the quadrature order for the integration of the shape functions of the variables in the expression.

Open the Subdomain Integration item on the Post menu. Type u 2 in the expression field. Select subdomain 1 and press Apply. The integral of the solution is displayed in the message log.

Open the Plot Parameters dialog box. Check Contour and uncheck Surface. Press the Contour tab. Change the Contour expression to ux. Click in the GUI on the right boundary and verify that the in flux is equal to the integral.

One example of scalar couplings is to use scalar values from a vertices on the adjacent boundary as shown in . In structural mechanics you can use this type of coupling to formulate displacement constraints along a boundary in terms for the displacements of the end point.

Another example is to use the integral over a subdomain in a 2 D geometry along a subdomain in another 1 D geometry as shown in . This is useful for process industry models where two different processes interact.

An extrusion expression at coupling variable takes values from the source domain s by interpolation of an points that are dependent in some way on the position of the evaluation points in the destination domain s .

When the destination domain has more space dimensions than the source domain the variable performs extrusion of values. The extrusion coupling variable can also be used for mapping values from the source to the destination. This is applicable when the source and destination domains have the same number of space dimensions.

The method employed is that first a one to one transformation is applied to the mesh of the source domain s . This transformation may be trivial and leave the coordinates unchanged but it can also be used to rescale stretch bend or reflect the mesh. Then a second transformation is applied to the evaluation points in the destination domain s and the resulting points are used for the interpolation of an expression at points in the transformed source mesh.

Consider the case of a single rectangular domain where the source term in Poisson s equation comes from the inward flux over the right boundary for the corresponding y coordinate.

The FIG. shown in illustrates the extrusion process. The values of the in flux on the boundary become available throughout the domain by extrusion along the y axis. The source transformation mapping is y and the destination transformation mapping is y.

The problem is linear so you can use the linear solver. We use the weak term to specify the source term in the Poisson equation so we do not have to use the weak solution form.

The plot shows both the value of the flux variable on the destination domain and the source ncu on the boundary.

One application of extrusion couplings is to mirror the solution in the x axis as shown in . This can be very useful for post processing. The source transformation mapping is x y and the destination transformation mapping is x y.

Another example is to extrude the solution in the 1 D geometry to the 2 D along the s axis as shown in . The source transformation mapping is x and the destination transformation mapping is r.

Yet another example is to map values on the lower boundary to the right boundary on the same rectangle as shown in . The source transformation mapping is x 1 2 and the destination transformation mapping is y.

A projection coupling variable takes values from the source domain s by evaluating a series of line integrals within the source domain s where the line positions are dependent on the positions of the evaluation points in the destination domain s . In this way you can evaluate the average of a variable over one space variable at a range of different points along the other space axis giving a result which varies over the latter space variable.

The method employed is that first a one to one transformation is applied to the mesh of the source domain s . The last space dimension in the transformed mesh is the one integrated over so the lines used to integrate are vertical in the transformed source mesh. The placement of the vertical lines in the transformed source mesh is given by the positions of the transformed destination evaluation points. The integrals are then carried out in the source domain s over lines which correspond to the vertical lines in the transformed source mesh.

Then a second transformation is applied to the evaluation points in the destination domain s and the resulting points are used for the interpolation of an expression at points in the transformed source mesh.

Also non rectangular domains can be swept by the integration. Only the source domains will be included in the integrals. Other domains and the external area will be excluded from the integrals.

FEMLAB computes the exact Jacobian contribution for the coupling variables when the coupling variables are evaluated as weak terms. The easiest way of achieving this is by using solution form Weak. It can also be achieved by with solution form Coefficient or General by specifying all coupling variables in weak terms on the Weak tabs.

If you use a coupling variable in a coefficient without using solution form Weak the Jacobian is likely to be incorrect and the nonlinear solver might not converge even for linear couplings.

For stationary problems with coupling variables you should always use the nonlinear solver it can sometimes be difficult to see if the problem is nonlinear or not. If you are sure about the linearity of the problem and coupling variables only occur in weak terms the linear solver can be safely used.

The Jacobian for problems formulated using the finite element method is usually large but rather sparse i.e. with relatively few nonzero elements. This is because the solution at each node in the mesh can be dependent at most on the degrees of freedom from the neighboring mesh elements. If however coupling variables are introduced non local dependencies are introduced filling up the rows and columns of the affected source and destination nodes. This extra filling may make the Jacobian matrix slightly less sparse in which case the solution speed is only slightly affected or it may make it a great deal less sparse in which case the memory use and CPU time involved in solving the problem may be increased a great deal . For this reason care should be taken when introducing non local couplings.

When using coupling variables in Dirichlet boundary conditions the constraint is handled by adjusting both the source and the destination values until the constraint is satisfied. This corresponds approximately to how periodic boundary constraints are handled in FEMLAB and this may be appropriate in the context of the problem being modeled. Often however it is more appropriate to leave the source unaffected and constrain only the destination.

This example studies a magnetic brake that slows down a copper disk rotating in the magnet s air gap as illustrated in . The rotation induces currents and forces along the current lines impede the disk s motion.

This time dependent problem will be solved in two different ways first using FEMLAB s extended multiphysics feature and second as a Simulink simulation. In both cases the stationary problem of computing the magnetic field in the disk given a certain angular velocity will be solved first.

Assume the disk rotates around the z axis with angular velocity . The velocity v at a point x y is then 0 .

When the disk is inserted in the air gap and it encounters the magnetic field B the configuration induces a current density j according to Lorentz equation 

In these equations B represents the magnetic field E the electric field the permeability the electric conductivity and d the plate s thickness. This example uses the Dirichlet boundary condition B 0.

In this model the magnetic flux B has only a vertical component and the currents and electric field have no z components. Solving for B gives the following scalar partial differential equation div 0

Now consider how the system evolves over time. The disc is slowed down by the induced torque and an ordinary differential equation ODE must be set up to model the angular velocity .

To obtain the time derivative of the angular velocity the torque arising from the induced currents must be computed. For a small surface element the force equals 

Select the 2 D Coefficient Linear stationary PDE mode in the Model Navigator. Click on the button marked More change the Dependent variable name to B and then click OK.

The applied field Bis used here and it has not been defined. It is different in the two subdomains so it s best to use the Add Edit Expressions dialog

Open the Mesh Parameters dialog box by selecting Parameters . . . from the Mesh menu and set Max. edge size general to 0.04.

In this section FEMLAB s extended multiphysics feature will be used to solve the time dependent problem.

Note An alternative approach is to use only one geometry and introduce a new variable w active at a single point within that geometry using a Point weak form application mode. In this alternative the same coupling variables M and w are used but the source and destination domains would have to be suitably altered. The ODE for w would then be specified using the coefficients on the Weak tab in the Point settings dialog first multiply both sides of the ODE by the test function for w then set dweak and weak to be the left and right hand side respectively i.e. J w time w test and m w test.

Select the variable w in the list and Delete it so the list consists only of K J and mu. The variable w here will be replaced by the dependent variable w from the ODE.

In the Add Exit Expressions dialog box select the variable BO in the list and change its definition in subdomain 2 to 0.1

Now add the new geometry to handle the ODE. An ODE can be thought of as a zero dimensional PDE so in principle a zero dimensional geometry is all that is required here but since there is no support for this in the graphical user interface a trivial one dimensional geometry will be used instead. In addition the use of coupling variables means weak solution form must be used.

There are two extended multiphysics couplings in this model. In other words two variables which are to be made available beyond the domains in which they exist naturally.

Secondly the angular velocity variable w is used in the coefficients and y the PDE in geometry 1. Previously w was defined in the Add Edit Constants dialog box but this time it must be taken from geometry 2. Thus the dependent variable w in geometry 2 must be made available in the subdomains of geometry 1.

To check the variables have the correct source and destination domains click on the Variables tab in .

Note that the definition of w here means use the integral of w over subdomain 1 in geometry 2 but since w will be constant over the whole subdomain and the subdomain has length l this is the same as simply taking the value w at any point in the subdomain.

One of the most common reactors in the chemical industry for use in heterogeneous catalytic processes is the packed bed reactor as shown in . This type of reactor is used both in synthesis as well as in effluent treatment and catalytic combustion. The reactor consists in essence of a container filled with catalyst particles. These particles can be contained within a supporting structure like tubes or channels or they can be packed in one single compartment in the reactor.

The structure that is formed by the packed catalyst particles makes the modeling of mass and energy transport in the reactor a challenging task. The difficulty lies in the description of the porous structure which gives transport of different orders of magnitudes within the particles and between the particles. In most cases the structure between the particles is described as macro porous and the pore radius can be of the order of magnitude of mm. When a pressure difference is applied across the bed convection arises in the macro pores. The pores inside the catalyst particles form the microstructure of the bed. The pore radius in these particles is often between one and ten mm.

This model presents a simple and fast alternative for studying macro and micro mass balances in packed beds and other heterogeneous rectors with bimodal pore distribution. The simulation gives the mass and reaction distribution and the same type of approach for the heat balance accounts for the temperature profile in the reactor. The equations are based on simple mass balances for the macro and micro systems.

The mass balance for the macro system are based on the equation for convection diffusion reaction dot over 0

In the above equation D denotes the diffusion coefficient ms c concentration mol m u the velocity vector m s and R denotes the reaction term mol ms . The solution of the above equation requires proper boundary conditions at 0 at 0 at all other boundaries

At a first glance these equations look simple to solve especially if the velocity vector is given by an analytical expression which is the case for plug flow in a packed bed reactor. However the reaction term R depends on the transport in the micro particles which in general is obtained by calculating the flux into the particles at the outer surface of the particle times the available outer surface area of the particles per unit volume 

In this equation Adenotes the outer surface area of the particle per unit volume mm N denotes the flux vector mole ms in this case the flux in the porous particle r the independent variable for the radius of the particle m Rthe radius of the particle and n the normal vector to the particle surface.

To solve the equations above the reaction term R has to be calculated. This implies the formulation of a new mass balance in micro scale. Such a mass balance is expressed by the equation below 0

Here D is the effective diffusion coefficient in the particle c is the concentration in the particle and k the reaction rate constant for the heterogeneous reaction in the particle molsm In this case transport takes place by diffusion only.

The diffusion reaction equation combined with the boundary conditions for the particle give the concentration distribution in the particle. 0 at 0

The concentration distribution in the particle gives the flux at every point in the particles. This implies that the reaction term for the catalyst bed is given by the solution of the micro mass balance 

The complication in solving this system of equations is that the macro balance and the micro balance are defined in different coordinate systems. This problem is general for many chemical reaction engineering applications and is often solved by using analytical approximations of the solution to the micro balance. One possibility is to use Thiele modulus in the effectiveness value formulation. However this approach cannot be used for complicated reaction mechanisms involving several reacting species. The solution exemplified here is general and can be used for very complex reaction mechanisms involving a large number of species.

The approach here will be to model the bed as a 1 D model with independent variable x. At each x coordinate there is also a model of one particle typical of all of the particles at that position in the packed bed. Since the particles are spherically symmetric and the surface concentration c is to all intents and purposes constant around each particle a 1 D model with independent variable r can be used for each of the particles. In order to model particles for each position along the packed bed many such 1 D models can be placed side by side creating effectively a 2 D geometry with independent variables x and r.

In this 2 D model all of the particles can be modeled independently. There is therefore a 2 D geometry for the particles and a 1 D geometry for the packed bed. Two couplings are used in the model. The packed bed concentration is used in the boundary condition for the particles and the flux at the surface of the particles is used in the reaction term in the packed bed.

Enter C x in the Variable name edit field and select extrusion from the Variable type drop down menu. Then press Add.

Switch to the Source tab and select the Geometry Geom2 at the subdomain Level. Then select 1 in the window.

Switch to the Destination tab select Geom1 for the Geometry boundary for the Level and choose boundary 3. Enter x in the Evaluation point transformation x field.

Now define a variable Ndotn x to be the normal surface flux for the particles at position x and make this variable available in the packed bed geometry.

Switch back to the Variables. Referring to name the variable Ndotn x and choose extrusion for its Variable type then press Add.

Go to the Source tab and select Geom1 at the boundary Level. Select boundary number 3 and enter D1 cir rp as the Expression and x as the Local mesh transformation x coordinate.

Switch to the Destination tab and select Geom2 for the Geometry at the subdomain Level. Select 1 and enter x as the Evaluation point transformation x.

First select Insulation symmetry conditions for boundaries 1 2 and 4. The third boundary should be a Concentration boundary with epsil C x as its value.

Switch to the second Multiphysics mode 2 Geom1 1 variable weak constraint mode w1 . Open the Boundary Settings dialog and select boundary 3. Make it Active in this domain by selecting this checkbox and enter c1 as the Constraint variable. Press OK to make it active.

For the particles Multiphysics 1 it is interesting to see a contour plot. Open the Plot Parameters dialog. Deselect the Surface plot and instead select Countor plot then switch to the Contour tab. Specify x as the Contour expression and concentration of c1 c1 as the Height expression. Enter 40 in the Contour levels field and deselect the Color bar. The effect of this is to lay 40 lines across the geometry at 40 different x coordinates and show the concentration distribution along each line. Each one therefore represents the concentration distribution within a single particle. It is also interesting to see how the value of the normal flux which is a multiple of clr changes as x changes so switch to the Line tab and activate the line plot. Enter clr in the Line expression field and clr 20 in the Z expression field and press OK. The 20 is simply to rescale the curve to be able to see it on the same axes as the contour plot. The following plot results are shown in .

Turning now to an exemplary aspect of a GUI for a design system is illustrated that includes a settings window displaying for example menu s for accessing multiphysics model settings associated with a linked multiphysics modeling system . The design system is configured to interact with the multiphysics modeling system by accessing settings for forming and solving the multiphysics problems defined in the multiphysics modeling system . For example the GUI may allow the design system to access the multiphysics model setting including such items as the physical properties and boundary conditions of the system being modeled in the multiphysics modeling system . The design system may be configured to access the boundary condition selection in the multiphysics modeling system from a face selection in the design system s user interface . Similarly selection of a body or part in the geometric representation in the design system s user interface may access physical quantities and physical properties associated with a geometrical domain modeled in the multiphysics modeling system . It is contemplated that in certain embodiments access of the various physical quantities physical properties and boundary condition settings may be initiated through user selections of domains e.g. bodies or parts and faces via the GUI of the design system.

As illustrated in the GUI may also include a geometric representation of a geometrical domain of at least a portion of a system being modeled in the multiphysics modeling system . The window in the GUI used for accessing the multiphysics model settings may include a display of menus that describe settings for physical properties and boundary conditions in a multiphysics problem. The settings in the menu may be associated with entities in the geometrical domain such as domains faces edges or vertices associated with the system s being modeled and residing in the multiphysics modeling system. It is contemplated that selections of the multiphysics settings via the window on the GUI may implement routine s that describe the geometric entities and settings for the model attributable to a particular selection. In certain embodiments the design system may be configured for developing or assigning various geometric properties and physical properties of a system. The design system may then interface with and or send the different geometric representations the selection of entities e.g. domains faces edges or vertices and other setting to the multiphysics modeling system for subsequent multiphysics modeling which may include processing of the data sent from the design system. It is also contemplated that it may be desirable for the multiphysics modeling system to send a solution or modeling result configurable for display on the GUI of the design system.

In certain embodiments the design system and the multiphysics modeling system may reside in one or more memories one or more processors and or one or more computer readable media associated with the same computer system. In other embodiments the design system and multiphysics modeling system may reside in different computer systems connected over a local area network or a wide area network.

Referring now to an exemplary aspect is illustrated of communications via a bidirectional link between a design system and a multiphysics modeling system. The communications are described in the context of non limiting exemplary dynamic link communications that may be included in a bidirectional link between a design system e.g. a computer aided design system or CAD system and a multiphysics modeling system. The bidirectional link may be in the form of computer code embedded in a memory or another computer readable medium. In certain exemplary embodiments a CAD system user interface may be used to describe a multiphysics problem or design in the multiphysics modeling system. The multiphysics modeling system may seek a geometric representation from the CAD system to generate a geometrical domain for the multiphysics problem.

In certain methods of communication between a design system and a multiphysics modeling system a design system may detect the installation of a multiphysics modeling system and in response implement design system dynamic link library file s to facilitate communication with the multiphysics modeling system . In addition the multiphysics modeling system can implement multiphysics related dynamic link library file s to facilitate communication with the design system . In one exemplary embodiment the dynamic link library files may be used to implement various commands related to geometric features between the design system and the multiphysics modeling system . For example the design system may be instructed to transfer geometric representations to the multiphysics modeling system . In certain embodiments the design system may also transfer material properties which may be stored in the geometric representations of the design system . It is also contemplated that in certain embodiments the design system may mesh the geometry and send the resulting mesh to the multiphysics modeling system as the geometric representations. It is also contemplated that in certain embodiments the multiphysics modeling system may be configured to search detect and load the multiphysics dynamic link library files to allow communication with the design system. In addition the design system s dynamic link library files may return the name corresponding to an installed design system . The loaded dynamic link library files may include instructions for communicating commands between the multiphysics modeling system and the design system .

It is contemplated that the multiphysics modeling system design system and the bidirectional link may be executed in computer system having a memory associated with a single processor or in a computer system having one or more memories associated with one or more processors. In certain embodiments the multiphysics modeling system routine s may operate on one computer system the design system routine s may operate on a second computer system and the bidirectional link may operate on one or both of the computer systems. It is also contemplated that the bidirectional link may operate on a third computer system and that the multiphysics modeling system and the design system communicate through the third computer system via the bidirectional link. It is contemplated that communications between all the computer systems may occur asynchronously or synchronously. For configurations having multiple computer systems and or multiple memories communications between the various computers may occur over local connections or a local area network. It is also contemplated that communications between the various systems may occur over a wide area network. It is further contemplated that communications between the various systems may occur wirelessly. In certain embodiments the bidirectional link includes a series of instructions stored in a memory and executed by a processor. It is also contemplated that the bidirectional link may comprise dedicated computer hardware having the instructions permanently stored in a memory and communications ports for receiving connections from the multiphysics modeling system and the design system computer s that allow communications of geometry and parameter data between the multiphysics modeling system and the design system.

Referring now to a flowchart for an exemplary aspect of a bidirectional link using dynamic link library .dll files is described. The flowchart includes a multiphysics modeling system .dll and a design system .dll similar to the multiphysics system .dll and design system .dll discussed above for . As discussed previously the dynamic links may be used to send commands from a multiphysics modeling system via the multiphysics modeling system s .dll to the design system. For example a command may ask for the name and status of installed design systems. This is illustrated in step where the multiphysics .dll may send a request to a detected design system .dll to return the name and status of the design system. Upon the detection of the installed design system at step the design system .dll may at step send the name and status of the installed design system back to the multiphysics .dll . At step the multiphysics .dll may send the status message from step to the multiphysics modeling system and then proceed to step where the multiphysics modeling system may send a command to the multiphysics .dll that includes for example a list of parameters describing geometric features of a physical system being modeled by the multiphysics modeling system. Proceeding from step to the multiphysics .dll in turn relays the command to the design system s .dll and then further to the design system where the command may be executed. At step a confirmation may be received by the design system .dll from the design system. Proceeding from steps to the design system .dll may send a confirmation back to the multiphysics .dll regarding the status of the executed command which in turn may be communicated to the multiphysics modeling system. As illustrated in the example of when steps in the bidirectional link are executed a command involving a change for example in a geometric feature in the design system can automatically cause the design system to regenerate the geometric representation which may be generated as a file containing the geometric representation e.g. a Parasolid file a CAD file a SolidWorks file . The file containing the geometric representation may be automatically loaded by the multiphysics modeling system and the geometric operation in the geometry sequence and the geometrical domain may then be updated. In certain aspects the geometric representation may also be updated in a design system user interface linked to the multiphysics modeling system.

It is contemplated that the bidirectional link between the multiphysics modeling system and the design system may be directly connected such that the detection step may not be necessary or may be simplified. For example the name or identification of an installed design system may be known or directly stored in the bidirectional link such that for example step can be removed from the aspect described in . It is also contemplated that alternate or modified configurations of the detection aspects may be desirable. For example a setting defining the name and version of an installed design system may be entered by a user or other wise received in the multiphysics modeling system before a connection is made to the bidirectional link.

Referring now to an exemplary aspect of a bridge connection is illustrated between a design system and a multiphysics modeling system . A bridge connection such as the one illustrated in can communicate inputs and outputs between two systems in conjunction with operations associated with for example a window having selectable elements in a GUI. In one embodiment the bridge connection may be associated with the display of a settings window in a design system GUI for a multiphysics model system that is connected via the bridge connection to the design system. Operations performed in the settings window of the GUI such as selections from a pointer and or keyboard events can be sent via the bridge connection to the multiphysics model system. In certain embodiments a bridge connection can also send information to the multiphysics modeling system for selections in a display window in the design system GUI associated with geometric representations of the system being modeled. In certain embodiments the multiphysics modeling system can then send information associated with the selected geometric entity back to the settings window for the multiphysics modeling system that is displayed in the design system user interface.

The bridge connection in is configured to communicate commands associated with settings of a multiphysics model. The bridge connection may be activated via a user selection from a window in the design system s user interface e.g. see . In certain embodiments the bridge connection may be automatically activated upon the implementation or execution of the computer implemented instructions of the design system . It is contemplated that in certain embodiments the design system may detect the installation or execution of the computer implemented instructions for the multiphysics modeling system and based on that detection activate the bridge connection . It is also contemplated that the design system may be configured to start a process that executes the computer implemented multiphysics modeling system .

The bridge connection can be configured so that a GUI in the multiphysics modeling system communicates or interacts with a design system user interface. The design system s user interface may include a window that displays for example the multiphysics modeling system s model tree see e.g. FIGS. and and or a window corresponding to the settings of a node for the model tree. Exemplary aspects of a model tree are presented in more detail in FIGS. and . In certain embodiments a model tree associated with the multiphysics modeling system that is displayed in a GUI can include the display of nodes that represent modeling operations and the display of branches that represent the logical relationships between the nodes.

It is contemplated that in certain embodiments the bridge connection may allow certain user input events such as mouse events keyboard events or other user input to be sent from the design system s user interface to the multiphysics modeling system s model tree and or a settings window displayed in the design system s user interface. The multiphysics modeling system may also send commands through the bridge connection to the design system using the design system s application programming interface API . For example the bridge connection may allow the multiphysics modeling system to render its graphics inside a graphics window in the design system s user interface. The design system s user interface may then display a view of a model geometry associated with the setup of a multiphysics problem. Selections such as those of geometric entities e.g. domains boundaries edges vertices can also be requested from the design system s geometry by the multiphysics modeling system via the bridge connection . User selections and or selection results of geometric entities can be sent back and forth through the bridge connection between the multiphysics modeling system and the design system .

In certain embodiments the multiphysics modeling system s settings window s are configured to receive selection settings from the design system through the bridge connection . As discussed above the multiphysics modeling system may receive user inputs such as mouse events and keyboard events through the design system s user interface. In certain embodiments the multiphysics modeling system may be configured via rendering command s to render graphics directly in a graphics window of the GUI of the design system . This rendering of graphics may occur in response to a request from a user to show the results from the solution to a multiphysics problem or model. In certain embodiments the multiphysics modeling system may receive the rendering request from the earlier described user inputs e.g. mouse events or keyboard events .

The model tree can include nodes e.g. Materials Mesh 1 containing references to settings e.g. Joule Heating Electromagnetic Heat Source Electric Insulation Thermal Insulation Initial Values Electric Potential Temperature Convective Cooling of a multiphysics model and branches displaying relations between nodes. For example a setting can include a description for a physical quantity a physical property or a boundary condition associated with the model. Model tree illustrates an exemplary setting of a boundary condition for convective cooling at a face of a multiphysics model. The model settings for the face include an external temperature and a heat transfer coefficient. In certain embodiments a user of the design system can enter or select a node or face of the system being modeled from a geometrical display window in the design system user interface . The entering or selection of a node or face can then send an instruction via the bridge connection from the design system to the multiphysics model system to display in the settings window for the selected node. The multiphysics modeling system can then send again via the bridge connection a representation of the settings window for display in the design system user interface .

Certain settings may be associated with geometric entities of the model such as a face for a boundary condition and the multiphysics modeling system may prompt or send an instruction to the design system requesting the selection of the geometric entity associated with the setting. The prompt or request may occur using similar operations described previously in . In response to the entity selection the design system user interface can then generate a corresponding geometric entity in the multiphysics modeling system . The representation of the geometric entity can be displayed in the design system user interface such as in the geometrical display window or in a window associated with a selected node or face. The settings of an entity can be entered as instructions using the settings window . The instructions can include one or more selections of default or custom items from the settings window . The selections may occur via user input received through a mouse keyboard or other user input device. In certain embodiments the settings may be expressions entered using a keyboard or the setting may be predefined and selected from a window listing one or more of the predefined expressions. The input instructions can then be sent or transferred to the multiphysics modeling system . Based on the instructions received from the design system the multiphysics modeling system may then interpret the instructions and execute commands for forming the components of the multiphysics model described by the settings. The multiphysics modeling system can then transmit the status of the executed setting s back to the design system including for example any updates to geometrical display window .

The bridge connection can facilitate any of several exemplary associations and or communications between the multiphysics modeling system and the design system such as those illustrated in . For example boundary conditions selections including physical quantities and properties may be received by the multiphysics modeling system from the design system. illustrates the receipt by the multiphysics modeling system of boundary condition selections including for example face selections convection cooling settings and heat flux quantities for a model via the design system user interface . Furthermore a user interface associated with the multiphysics modeling system may receive selection data via the boundary conditions selection s and in turn communicate the boundary condition s data via the bridge connection back to the design system which then displays updated information on the design system user interface . The multiphysics modeling system may also determine various results based on the boundary condition selection s and also communicate those results for the multiphysics model to the design system which can display the results on the design system user interface . The communicated results can also be based on any physical entity or physics quantity associated with the system being modeled. That is illustrates the interactive nature and or exchange of information between a design system e.g. and a multiphysics modeling system e.g. and how information may be displayed to a user on a GUI e.g. associated with a design system that is bridged to a multiphysics modeling system e.g. .

Other boundary condition selections are contemplated in addition to those described above. For example in a model having electromagnetic properties and quantities boundary condition selections can include ground current density electric potential distributed impedance reflecting absorbing port perfect electric conductor etc. In a model having structural mechanics properties and quantities boundary condition selections can include fixed constraint roller load contact displacement free etc. In a model having fluid properties and quantities the boundary condition selections can include inlet outlet wall free surface pressure etc. The foregoing boundary condition selections are non limiting examples of domain settings and boundary conditions that can be selected and for which information can be exchanged between a design system and a multiphysics modeling system. It is contemplated that these and other types of domain settings and boundary conditions would be understood to be exchangeable between the systems depending on the scientific and engineering principles desired to be modeled.

Referring now to an exemplary aspect of the present disclosure is illustrated for dynamically controlling via a bidirectional link and a bridge connection parametric and geometric features in a design system. The steps shown in can be implemented via a multiphysics modeling system GUI that is executed or displayed in a design system user interface similar to the user interface illustrated in . The steps shown in include a series of steps between the design system and the multiphysics modeling system occurring over a communications path such as the bidirectional link and bridge connection described elsewhere herein.

Turning now to step a window or list of parameter definitions may be generated by the multiphysics modeling system and transferred to the design system . These communications may be facilitated via dynamic link library files described elsewhere herein. At step the parameter definitions are received and may be displayed and or accessed via the design system user interface. In certain embodiments the display of the parameter definitions may occur as a multiphysics modeling system GUI displayed inside the design system s user interface. At step the list of parameters or parameter definitions may be received as instructions sent via the bridge connection from the design system to the multiphysics modeling system . At step the multiphysics modeling system may interpret the list or definitions before sending them to the design system. For example the multiphysics modeling system may interpret the parameter definition to be associated with geometric features. It is also contemplated that in certain embodiments material properties may be obtained from the design system. At step the design system may receive parameters that are identified as parameters controlling geometric features. The geometric features can then be updated in the design system according to the parameter definitions or values received from the multiphysics modeling system. At step the design system may update a geometric representation of the model based on the updated geometric features. Furthermore the design system may also generate a file containing the geometric representation based on the updated geometric features. At step the generated file in step may be received or loaded into the multiphysics modeling system and a representation of the geometrical domain of the model can be updated. At step the multiphysics modeling system may then solve a multiphysics problem using the updated geometrical domain for the system being modeled. At step the design system can receive results or solutions associated with the geometrical domain where the results or solution are determined from the file received at step . The results or solution can then be displayed in the design system s user interface.

Referring now to another exemplary method is illustrated for dynamically controlling via a bidirectional link parametric and geometric features between a design system and a multiphysics modeling system. At step a list of parameters or parameter definitions as defined by the multiphysics modeling system may be sent from the multiphysics modeling system to the design system through a bidirectional link as illustrated and discussed for example in the context of . At step these parameters are received by the design system and may be identified by the design system as parameters controlling geometric features of the model. The geometric features can then be updated in the design system according to the parameter definitions or values received from the multiphysics modeling system. For example the value of a radius of a fillet associated with the face of a model may be controlled or altered. At step the design system may update a geometric representation of the model based on the updated geometric features. Furthermore the design system may also generate a file containing the geometric representation based on the updated or altered geometric features. At steps and the generated file in step may be automatically received or loaded into the multiphysics modeling system and the representation of the geometry sequence and geometrical domain of the model can be updated. In certain embodiments selected aspects of the parameter definitions from step may be directly sent to steps and such as parameter definitions that are unchanged e.g. parts of the geometry that are not changed and thus do not necessarily need to be sent to the design system. At step the multiphysics modeling system may then solve the multiphysics problem using the updated geometrical domain for the model.

In certain embodiments the method of may proceed directly to step where the multiphysics modeling system solves the multiphysics problem using the updated geometrical domain for the model. However the multiphysics modeling system may instead proceed from step to step where the multiphysics modeling system may use associativity to reuse settings for the physical properties and boundary conditions from a previous formation of a multiphysics problem and apply those reused settings for the formation and solution of the multiphysics problem using the updated geometrical domain. The associativity operation at step may include mapping geometric entities e.g. domains faces edges vertices between the old or previous geometrical domain and the new geometrical domain. The geometrical domain may be defined by a geometry sequence containing geometric objects and geometric operations. For example a new geometric object e.g. parent object may be constructed from a number of child geometric objects e.g. a number of other geometric objects . For each such parent there may be a mapping between geometric entities in the parent object and in the child object. In particular when a new geometric representation is loaded into a multiphysics modeling system through a bidirectional link the bidirectional link may provide such a mapping between the geometric entities of the old object and the new object. This mapping may be constructed by asking the design system for the mapping between the geometric entities. It is contemplated that during the updating of the geometrical domain some or all selections of geometric entities may be updated by applying the mapping between geometric entities of the old and the new geometrical domain. This mapping may be used to set physical properties and boundary conditions for the multiphysics problem.

A preliminary step in the associativity mapping process may include finding a minimal set of common ancestors of the old and the new finalized geometrical object. A next step may be to compute mappings of geometric entities from the common ancestors to the geometric objects for example by composing the mappings for the chain of parents or ancestors relating the objects. The mappings may then be composed to get a mapping from the new finalized geometrical domain to the old geometrical domain. The mapping may then be improved by applying some experience based techniques that are based on adjacencies between entities of different dimensions. An example of the associativity mapping process may include having an object that is the result of a change that is done on an original object. The resulting object would have the original object as an ancestor such that the resulting object inherits the settings of the original object or ancestor. For example if the original object were a rectangle the change could be rounding one of the corners of the rectangle. In the associative mapping process the multiphysics modeling system can map the exemplary boundary conditions from the original rectangle to the rectangle with the rounded corner. Next another change can be made to the object such as rounding another corner of the rectangle. Further applying the associative mapping process the multiphysics modeling system can then map or track from the first rectangle with one rounded corner up to the ancestor without rounded corners and then down to the rectangle with the two rounded corners. Thus by this process of associativity mapping the multiphysics modeling system can track objects up and down a geometry sequence in order to relate physical settings to new objects that may reuse portions of the original geometry sequence.

It is contemplated that in certain embodiments the method of may be used for a multiphysics problem to optimize a value of a parameter associated with a geometric feature. The value may be optimized using an objective function that accords with certain design criteria for the product being modeled or optimized. For example the multiphysics modeling system may use an optimization algorithm to search for an optimal value based on the objective function. As the search for the optimal value progresses the optimization algorithm may need to evaluate an objective function for updated parameter value s . The updated value s can then be sent back to a design system which may then update a geometric representation. The updated geometric representation may then be used by the multiphysics modeling system to update the geometrical domain. The multiphysics modeling system can then compute a new solution to the multiphysics problem along with new update s to the parameter value s based on the updated geometrical domain. The multiphysics modeling system can then determine whether to repeat the process based on the initial design criteria. That is as illustrated between steps and the iterative process or loop can be repeated a single time or as many times as is necessary to meet the design criteria and that can be supported by the computing capabilities of the multiphysics modeling system processor s .

Referring now to an exemplary GUI is illustrated for the multiphysics modeling system that may be displayed for dynamically controlling features between the multiphysics modeling system and a design system via a bidirectional link. The GUI may include parameter names e.g. Rad1 and their associated values e.g. R1 . The parameter names are shown to be defined in a settings window that may be accessed by selecting a feature or icon from the graphical representation of the bidirectional link in the multiphysics modeling system. The parameter names may refer to names of parameters that control geometric features in the design system. The geometric features in the design system may then be updated according to the parameter values in the multiphysics modeling system by selecting an icon associated with a synchronize feature between the multiphysics and the design systems.

It is contemplated that in certain embodiments it may be desirable to define variations for parameters that control for example the geometric features of a model. Referring now to an exemplary embodiment is illustrated for defining variations for parameters that control geometric features in a design system. The variations are defined via a multiphysics modeling system that is in communication with the design system through a bidirectional link. In certain embodiments a bidirectional link may be complemented by a bridge connection that allows a multiphysics modeling system to be accessed from a window in a design system GUI as described elsewhere herein.

At step a window for entering parameter list s may be generated by the multiphysics modeling system and transferred to the design system through the bidirectional link. For example parameters describing geometric features such as a radius or length or material properties such as tensile strength or density associated with a detail of a model may be generated and transferred through the bidirectional link. At step the parameter lists defined or entered are received and may be displayed in the design system user interface. In certain embodiments the display of the parameter definitions may occur as a multiphysics modeling system GUI displayed inside the design system s user interface. The lists may be received as instructions and in certain embodiments these instructions may be sent via the bridge connection of a bidirectional link from the design system to the multiphysics modeling system . The list or definitions may be interpreted before being sent to the design system. For example the multiphysics modeling system may interpret the parameter definition to be associated with geometric features. In certain embodiments the interpretation of the lists may be completed in the design system. Each list of parameters may represent a variation of parameter values to be used in solving a model. At step the parameters are identified as parameters controlling geometric features. The geometric features can then be updated in the design system according to the values of the parameters in each list. At steps the design system updates geometric representations for each list of parameters for the model variations based on the updated geometric features. Furthermore the design system may also generate a file for each list of parameters where each file contains the corresponding geometric representation. At steps each generated file in step may be received or loaded into the multiphysics modeling system and representations of the geometrical domains of the model variations can be updated. At step the multiphysics modeling system may then solve the multiphysics problems using the updated geometrical domains for the system variations being modeled. At steps the design system receives the results or solutions associated with each of the geometrical domains determined from the files received at steps . The multiphysics modeling system can create one solution set for each variation of the geometrical domain. The solutions can then be displayed in the design system s user interface. On the lower end it is contemplated that as few as two variations can be modeled and results be determined. On the upper end while only three geometric representations and domains are illustrated this is for example purposes only. That is more than three lists of parameters and geometric representations and lists of parameters can be input into the systems described herein such that a user can determine the desired model variations.

It is contemplated that in certain embodiments the multiphysics modeling systems described herein may use the concept of associativity to set the physical properties and boundary conditions specified for one geometrical domain and reuse these settings for each variations of the geometrical domain. Associativity may be achieved by mapping geometric entities domains faces edges vertices between an old or previous geometrical domain and a new or to be varied geometrical domain. When the new or varied geometric representation is received or loaded into the multiphysics modeling system through a bidirectional link the bidirectional link may provide the mapping between the geometric entities in the old object and the new or varied object. In certain embodiments this mapping may occur by the multiphysics modeling system prompting or requesting the design system for the physical properties and boundary conditions from the old object. When updating the geometrical domain all selections of geometric entities can be updated by applying the mapping between geometric entities in the old and the new geometrical domains. The mapping may then be used to set physical properties and boundary conditions for a multiphysics problem that is to be solved by the modeling system. The multiphysics modeling system can then solve the problem using each of the updated geometrical domains corresponding to the variations in geometric features. The multiphysics modeling system can then determine one solution dataset for each variation in geometrical domain. The solutions mapped on a corresponding geometrical domain can then be sent by the multiphysics modeling system to the design system where the solutions are then displayed in the design system s user interface with each variation in geometrical domain.

Referring now to an exemplary GUI is illustrated for defining variations of parameter s that control the geometric features in a design system from a multiphysics modeling system using a bidirectional link. In certain embodiments the parameter names in the multiphysics modeling system may also refer to names of parameters that control the geometric features in the design system. The parameter values may be varied according to an interval having certain boundaries such as a minimum value and a maximum value plus an increment for values in between. Each parameter value may be contained in a separate parameter list in the multiphysics modeling system that is then sent to the design system for automatic synchronization and generation of the files that contain the design system s geometric representation for each variation. One exemplary aspect of the present disclosure includes a method for accessing settings for forming and solving multiphysics problems in a multiphysics modeling system from a design system user interface. The solution of a multiphysics problem is displayed in the design system user interface.

Another exemplary aspect of the present disclosure includes a method for establishing and maintaining a bidirectional link between a CAD system and a multiphysics modeling system for communicating commands involving geometric features.

Yet another exemplary aspect of the present disclosure includes a method for establishing a bridge connection between a CAD system and a multiphysics modeling system for communicating commands involving settings in a multiphysics problem.

A further exemplary aspect of the present disclosure includes multiphysics software e.g. algorithms or instructions configured to be executed on a processor that is able to run parts of its GUI inside a CAD system user interface using a bridge connection. The settings for a multiphysics problem such as physical properties and boundary conditions can be accessed from a representation of the multiphysics problem in the form of a model tree in the CAD system user interface.

Another exemplary aspect of the present disclosure includes a method for dynamically controlling the parametric and geometric features in a CAD system from parts of a multiphysics modeling system s GUI run in the CAD system user interface via a bidirectional link and a bridge connection. The parametric and geometric features of the CAD system are expressed in terms of parameters in the parts of the multiphysics modeling system that are accessed in the CAD system s user interface. The CAD system dynamically returns a geometric representation which is automatically loaded by the multiphysics modeling system and a geometrical domain is changed accordingly. The multiphysics modeling system can be configured to define and solve the multiphysics problem for the geometrical domain. For example a dynamic link library DLL file may be used which is an executable file that allows programs to share code and other resources necessary to perform particular tasks.

Yet another exemplary aspect of the present disclosure includes a method that defines a variation of a geometrical domain using sets of parameters that control the geometric features in a CAD system from parts of a multiphysics modeling system GUI run in the CAD system user interface via a bidirectional link and a bridge connection. The CAD system can return a modified geometric representation of the variations which can be automatically loaded in the multiphysics modeling system. Each geometric representation corresponds to a variation and one geometrical domain is defined for each set of parameters. The multiphysics modeling system can then define and solve a multiphysics problem for each geometrical domain.

Another exemplary aspect of the present disclosure includes a method executed on a computer system for establishing a bidirectional link between a CAD system and a multiphysics modeling system. The method includes detecting one or more installed CAD systems communicating commands between the multiphysics modeling system and the one or more CAD systems and representing the bidirectional link as a geometric operation in a geometry sequence in the multiphysics modeling system.

In further exemplary aspects of the present disclosure the method for establishing the bidirectional link includes loading dynamic link libraries for each of the detected one or more CAD systems. The dynamic link libraries can be used for communicating the commands. The method may further include using the commands to generate files containing a geometric representation in the CAD system. The method can additional include generating a geometrical domain in the multiphysics modeling system using the files containing the geometric representation and the geometry sequence. The method may further include defining a multiphysics problem using the geometrical domain.

In yet further exemplary embodiments of the present disclosure the method for establishing bidirectional links can also include sending via the bidirectional link the parameters from the multiphysics modeling system describing geometric features in the CAD system. The method can also include sending via the bidirectional link the parameter lists representing variations in the geometric features. The method may further include specifying physical properties and boundary conditions in the multiphysics modeling system for each of the variations using associativity.

It is contemplated that a model tree such as in the exemplary aspects disclosed herein can be desirable because it provides a graphical programming environment for developing multiphysics problems in a multiphysics modeling system. As discussed above and elsewhere herein a model tree includes nodes and branches. The nodes represent various modeling operations and the branches represent the logical relationship between the operations represented by the nodes.

It is contemplated that it may be desirable to represent sequence s of modeling operations as nodes in a model tree. The model tree nodes may then be used to generate the constituents of a multiphysics problem that a user desires to model. The constituents of the problem being modeled can include among other things a geometrical domain physical quantities physical properties e.g. mechanical electrical magnetic thermal boundary conditions mesh solver configurations and results or solutions of the multiphysics model. In certain embodiments a sequence of modeling operations may be structured to include one or more child nodes e.g. subnodes that branch from a parent node e.g. primary node representing a constituent of a multiphysics problem. The branches in the model tree can be used to represent the logical relationship between the parent and child nodes. For example a system to be modeled may include one or more model nodes e.g. a parent node and under each of those model nodes there may be a geometry node material node s physics node s and a mesh node e.g. child nodes . Furthermore one or more of the child nodes may also have their own grandchild nodes for adding contributions to the physical quantities associated with the associated child node.

It may also be desirable in a multiphysics modeling system to generate partial differential equations that describe certain physical quantities in a multiphysics problem. For example in certain embodiments a partial differential equation for a multiphysics problem may be generated by adding contributions to a system of partial differential equations rather than changing an existing set of generic system s of partial differential equations. Such a process can provide efficiencies to the generation of partial differential equations. In one exemplary aspect operations may be included as nodes in the model tree for adding the contributions to the partial differential equations. The model tree may include a parent node for physics elements and the parent node may include a child node or branch for adding contributions to the partial differential equations associated with the problem being modeled. A model tree and node approach can be desirable because it provides clarity to the user of the multiphysics modeling system during the set up and modification of the various constituents of the problem being modeled.

In a multiphysics modeling system it may further be desirable to add contributions to a multiphysics problem by attributing the added contributions to a geometrical domain. The benefit can include that contributions are only defined when needed and any generic equations that by default are associated with all the geometric domains do not need to be altered or removed.

In a multiphysics modeling system it may further be desirable to have a model tree that has nodes for more than one model see e.g. such that several components in a system can be simultaneously modeled together. The individual models can share certain model inputs or parameters when the models are simulated simultaneously during the processing of a multiphysics problem.

Numerous exemplary and non limiting aspects of a model tree for a multiphysics modeling system are discussed in more detail below. Furthermore an exemplary multiphysics modeling system includes the COMSOL 4.0 or COMSOL Multiphysics simulation software operating on a computer system as such software is available from COMSOL Inc. of Burlington Mass. Additional exemplary aspects of multiphysics modeling systems are described in U.S. patent application Ser. No. 10 042 936 filed on Jan. 9 2002 now issued as U.S. Pat. No. 7 596 474 U.S. patent application Ser. No. 09 995 222 filed on Nov. 27 2001 now issued as U.S. Pat. No. 7 519 518 and U.S. patent application Ser. No. 09 675 778 filed on Sep. 29 2000 now issued as U.S. Pat. No. 7 623 991 each of which are hereby incorporated by reference herein in their entirety.

A model tree for a multiphysics modeling system can include a global definitions node for creating or inputting model parameters variables and function that have a global scope and thus are not specific to a particular model branch. The model tree can further include one or more model nodes a study node and a results node. The model node s can be used to set up a system or component to be modeled and the input or set up can be done for example as a two dimensional simplification of the component or system. Other exemplary model node s can be input or set up with a full three dimensional description. The study node can be used to set up the simulation s of the whole multiphysics model or portions thereof and can be applied for one or more models as set up using the model node s . The results node can then be used to further investigate and review the solution received from the study node.

In certain embodiments the selection of a space dimension in step can be used to determine the name s and icon s of model node s available in a model tree. The selection of the space dimension can further determine the content in the setting s that may be accessed in the model tree by a system user. In certain embodiments the selection of physics at step can also determine certain default content of a physics branch in a model tree and the available setting in the different nodes. Further it is also contemplated that the selection of the study at step may determine the content of one or several study steps that may be included in the study node.

Turning now to an exemplary aspect of a process is illustrated for forming and solving a system of partial differential equations in a multiphysics modeling system based on operations represented in a model tree. The model tree for the multiphysics model that is generated such as for the exemplary process illustrated in can include a model node a study node and a results node. The model node may include a plurality of child nodes such as a geometry node material node s physics node s and mesh node s . The study node can also include child nodes associated with solving the multiphysics problem.

At step a geometric representation is generated by the multiphysics modeling system based on operations associated with child nodes to the geometry node. For example selection of the geometry node may display various child nodes that allow a user to execute additional operations associated with the geometry node and the generation of the geometric representation in step . It is also contemplated that the geometry of the model or problem to be solved may be imported into the geometry node such as from a computer aided design file or through associations between a computer aided design system and a multiphysics modeling system as described elsewhere herein see e.g. .

At step physical properties are assembled by the multiphysics modeling system for the domains contained in the geometric representation generated in step . These physical properties are associated with the materials node s in the model tree which include the material properties for all the physics and all the domains in one or more model node s . In certain embodiments the materials node can include specific material s e.g. cast iron concrete titanium that are selectable by a user for the system s or component s being modeled. Depending on the complexity of the system being modeled the system may have multiple components or elements each having different material properties that can be assembled in step .

At step the multiphysics modeling system assembles the physics quantities and boundary conditions based on the representations of operations associated with one or more physics nodes of the multiphysics model. The assembled physics quantities and boundary conditions may be defined in the domains contained in the geometric representation using the physics properties determined from the operations represented in the materials node.

At step a mesh is generated by the multiphysics modeling system for the geometric representation and is based on the representations of the operations in the mesh node. For example a system user may select to execute the mesh operations in a menu displayed by clicking or selecting the mesh node. In one exemplary and non limiting embodiment the system user may select to create an unstructured tetrahedral mesh for a component being modeled. Other non limiting examples of mesh types may include prism pyramids swept boundary layer hexahedral surface e.g. for shells and edge meshes e.g. for beams . Other mesh geometries known in the field of the present disclosure are also contemplated.

Next at step the multiphysics modeling system may proceed with the compilation and discretization of equations for all the study steps selected in the study node for each of the model s . As discuss above a study node may contain a representation of study steps for a solution to a set of partial differential equations. The study node can include child nodes for compiling the partial differential equations for each study step. Furthermore the study node may include child nodes representing the discretization and solution sequence for the equations for each study step.

A system user may select to execute the operations represented by the child nodes in the study step from a menu e.g. a drop down menu displayed after selecting the study node. The menu may be displayed by clicking on or selecting the study node as it is displayed in a GUI. The execution of the study steps may involve compiling a set of partial differential equations based on the physics quantities and boundary conditions generated by the physics and based on the analysis selected for the study step such as whether to implement a transient e.g. dynamic or stationary e.g. static analysis. The equations are discretized based on the meshed geometric representation. Then at step discretized equations from step may be solved using a solver represented by child node s of the study node.

In certain embodiments the multiphysics modeling system may be solving a multiphysics problem including a plurality of model nodes with corresponding geometry materials physics and mesh child nodes. Furthermore each of the plurality of model nodes may be used to generate a corresponding part of the set of partial differential equations in the multiphysics problem. It is contemplated that the complete set of partial differential equations may be compiled discretized and solved in steps and for different study steps by solvers represented by child nodes to the study node. The compiling discretization and solving of the partial differential equations can be completed automatically through the execution of a series of processes in the multiphysics modeling system without the need for any further user inputs.

At step the results of the solution to the multiphysics problem may be generated and displayed or otherwise output for later display or use. For example the solution to a multiphysics problem may be visualized or prepared for display according to the operations represented by one or more child nodes associated with the results node. Such an operation may include the generation of one or more graphs of a set of results which may be generated by clicking or selecting a results node that implemented a predetermined or customized set of operations for preparing the display of the results.

Turning now to an exemplary aspect of a model tree is illustrated for forming and solving multiphysics problems in a multiphysics modeling system. In certain embodiments the model tree or variations thereof based on different modeling features is presented on a GUI associated with a processor configured to execute the multiphysics modeling system. It is also contemplated that model tree may be presented in a window on a GUI for a design system where the window is associated with the multiphysics modeling system operating on the same or a different processor implementing routines associated with the design system.

Model tree may include different configurations and different features represented as logically arranged nodes associated with simulating a multiphysics problem. For example a primary node e.g. thermal actuator tem.mph may represent the multiphysics problem for which a solution and results are desired. Node is exemplified to include four child nodes including global definitions node e.g. Global Definitions model node e.g. Thermal Actuator study node e.g. Study 1 and results node e.g. Results . Each of nodes may have their own additional child nodes which in turn may also have their own respective child nodes such that a branch of various logically associated nodes are built from the primary node for model tree .

The exemplary child node e.g. Parameters branching from the global definitions node may represent operations that generate parameters variables and or functions that apply to the entire multiphysics problem being solved and thus operations that are not generally attributable to specific geometric entities domains boundaries edges or vertices. The operations represented by the child nodes e.g. Parameters can be considered global to multiphysics problem represented in model tree . For example a parameter from the child node illustrated for node may be used to define a general physical constant and may be utilized in a plurality or even all the nodes in a model tree.

The exemplary child nodes e.g. Definitions Geometry 1 Materials Joule Heating and Thermal Expansion Mesh 1 branching from the model node e.g. Thermal Actuator may represent operations that generate a geometrical domain node e.g. Geometry 1 physical properties node e.g. Materials physics node e.g. Joule Heating and Thermal Expansion and or a mesh node e.g. Mesh 1 . In certain embodiments the exemplary model node may generate partial differential equations for the mesh and or the geometrical domain or partial differential equations associated with the geometrical domain. The partial differential equations can be formed using the physical properties node and or physics node which may include additional child nodes for physical quantities and boundary conditions. In the exemplary embodiment illustrated in the physics node is described as Joule Heating and Thermal Expansion though it would be understood that other engineering and scientific phenomena could be simulated as well e.g. acoustics chemical reactions diffusion electromagnetics fluid dynamics geophysics heat transfer porous media flow quantum mechanics structural mechanics wave propagation microelectromechanical systems semiconductor systems plasmas .

Operations for solving the partial differential equations such as those associated with the model node can be selected from child nodes branching from the study node e.g. Study 1 . The study node can include one or more study steps. For example in a first study step e.g. Step 1 Stationary 1 partial differential equations may be solved at stationary or static conditions while a second step may follow where these partial differential equations may be solved for time dependent or dynamic conditions. The study node may therefore contain operations that add or remove terms in partial differential equations according to how each step may be defined. It is also contemplated that a study node may include child nodes representing operations for solving partial differential equations using a finite element solver e.g. Solver Configurations .

A branch from the primary node for a multiphysics problem can also include a results node which may further include additional child nodes representing operations for generating simulation results for solution s to the multiphysics problem that are transformable to a predetermined or customized format presentable to the user of a multiphysics modeling system. For example the child nodes may include results presented in table formats as derived values as various multi dimensional plots or as reports including combinations of result formats such as graphics numbers and text.

Referring now to an exemplary aspect of a child node e.g. Joule Heating and Thermal Expansion is illustrated that branches from an exemplary model node of a model tree. The physics node includes operations for generating physical quantities and boundary conditions for a multiphysics problem and can be associated with operations for modeling various physics phenomena such as those described elsewhere herein. Settings for the various illustrated nodes can be accessed and modified by selecting the desired node. For example the first three child nodes of the physics node may represent a sequence of modeling operations that generates default physical quantities for structural displacements electric potential and temperature in a geometrical domain. The physical quantities are generated by operations that define thermal expansion e.g. Thermal Linear Elastic 1 node conduction of electric current and transport of heat e.g. Joule Heating Model 1 node and resistive heating caused by the electric current e.g. Electromagnetic Heat Source 1 node . The operations generate the default partial differential equations shown for the respective nodes in a selected geometrical domain. The partial differential equations illustrated in provide exemplary parameters that may be associated with the system being modeled such as density a displacement vector u and a stress tensor . The exemplary components of the stress tensor are functions of the derivatives of the displacement vector. Other exemplary material parameters can include specific heat capacity C temperature T thermal conductivity k electric potential and electrical conductivity . These physical quantities may be set to an initial value as illustrated in the exemplary mathematical relationships of . For different model s different parameter s may be used depending on the engineering or physics phenomenon a being simulated the illustrated physical properties are provided by way of example only and thus are non limiting.

The fourth fifth and sixth child nodes of the physics node may represent a sequence of modeling operations that generate the default boundary conditions for the multiphysics problem. For example default boundary conditions may be generated by the operations that define the gradient in the electric potential by setting electric current to zero in the Electrical Insulation 1 node the gradient of the temperature by setting the heat flux to zero in the Thermal Insulation 1 node and the structural constraints by setting no constraints on the structural displacement at the boundaries in the Free 1 node. The modeling operations can include generating default equations for the physical quantities interactions at the selected boundaries.

The last exemplary child node e.g. Initial Values 1 represents an operation that sets the initial values for all physics quantities which in the exemplary illustration of includes temperature electric potential and structural displacements. In certain embodiments the operation may be required as an initial condition for a time dependent simulation or as an initial guess in a stationary nonlinear simulation. The operation can generate equations for the physical quantities at an initial stage in a selected geometrical domain and may be required by methods that solve partial differential equations.

Referring now to an exemplary aspect of a window is illustrated for a model node of a model tree for entering settings that define model operations for a multiphysics problem. More specifically an exemplary window is illustrated for entering accessed settings for the exemplary Thermal Linear Elastic child node see e.g. element in . Again the illustration is non limiting and demonstrates the flexibility of the model tree for accessing and setting features of the multiphysics modeling system. includes an exemplary settings window that is associated with physical quantities for structural displacements that may occur in the modeling of thermal expansion in a selected geometrical domain of a multiphysics problem. In certain embodiments default physical properties such as material properties may be linked to a materials node see e.g. material node in or a user may manually enter the physical properties. For example settings window includes different fields for parameters that can be applicable for generating a contribution to a set of partial differential equations from the Thermal Linear Elastic 1 child node. It is contemplated that the settings window may define material properties that are then used in generating a node contribution to the partial differential equations for a selected geometrical domain in a multiphysics problem. In the example of the material properties may include Young s modulus E Poisson s ratio density and or the coefficient of thermal expansion of a material. Applying the exemplary material properties a node contribution can then be generated as a function of the physical quantities which for the exemplary embodiment may be expressed as displacement vector u. Again as discussed elsewhere for different models different parameters may be used depending on the physics phenomena being simulated the illustrated material or physical properties are provided by way of example only and thus are non limiting.

In certain embodiments it is also contemplated that the setting window also displays informational aspects about certain operations in the model tree. For example information about the author or the source of the operation represented by a particular node in the model tree may be presented or be selectable in the setting window. The setting window may also present information about the date and time e.g. entry of certain information running a certain model or comments regarding the operations about the selected node.

Referring now to an exemplary aspect of a physics node associated with a model node is illustrated. The exemplary physics node has additional nodes for describing selected physical quantities for a multiphysics problem. For example a stress strain relationship similar to the one illustrated in may be altered through the addition of stress tensor . The node denoted Initial Stress and Strain may change an operation that sets the contribution of the Thermal Linear Elastic 1 by changing the stress strain relationship in a selected geometrical domain. More generally the sequence of operations can be altered in a multiphysics problem by adding a node further describing certain physical quantities. In certain embodiments the operation at node may also change the equations of the physical quantities such as for the structural displacements while keeping other equations unchanged. A sequence of operations may be updated by a user by selection of a node such as node which may then generate corresponding change s in partial differential equation s that solve the multiphysics problem. Again as discussed elsewhere for different models different parameters may be used depending on the physics phenomena being simulated the illustrated nodes are provided by way of example only and thus are non limiting.

Referring now to another exemplary aspect of a physics node in a model tree is illustrated. In this aspect an operation representing contributions to physical quantities is illustrated. For example child node e.g. Heat Source 1 may represent an operation that adds a contribution to a partial differential equation for a physical quantity such as temperature in a selected geometrical domain. As illustrates the exemplary partial differential equation also includes the temperature contributions represented by the equations from Joule Heating Model 1 and Electromagnetic Heat Source 1. In certain embodiments child nodes such as node may be added by a user to generate contributions for all or some of the physical quantities such as structural displacements and electric potential as illustrated in the exemplary physics node e.g. Joule Heating and Thermal Expansion . Again as discussed elsewhere for different models different parameters may be used depending on the physics phenomena being simulated the illustrated nodes are provided by way of example only and thus are non limiting.

Referring now to an exemplary aspect of a window for adding contributions to the physical quantities associated with a physics node of a model tree is illustrated. A menu box can be displayed next to a physics node e.g. Joule Heating and Thermal Expansion in response to a system user providing a predetermined input such as a right click via a mouse. The menu box may contain menu items that allow contributions to be added to equations in geometric entities such as domains boundaries edges and points. In the exemplary aspect a Heat Source node contribution may be associated with a heat transfer option in the menu box . For example by selecting Heat Source node a contribution may be added to a partial differential equation for temperature in a selected geometrical domain as illustrated for example in . It is contemplated that other selected contributions may be added to other geometric entities depending on the selections made by the multiphysics modeling user. The addition of contributions may also be predetermined as part of a sequence of operations indirectly associated with other model selections.

It is contemplated that in certain aspects of the present disclosure it may be desirable for a multiphysics modeling system to label or otherwise identify nodes of a model tree that represent certain operations that generate contributions to equations associated with a geometrical domain. For example selecting a node can that represents a load may label or highlight other nodes in the model tree that coexist with that load on any of the load s geometric selections e.g. domain boundary edge point . A label associated with a non exclusive node can be used where the operation can coexist with other contributions. If a node represents a contribution that cannot coexist with other nodes on a geometric selection it can be understood to be an exclusive node. In certain aspects a last or final node in a sequence may be able overwrite the previous node s for the geometric selections where the nodes overlap.

Turning now to an exemplary model tree is illustrated having a plurality of model nodes that include the identification of exclusive operation s associated with a selected node. The exemplary multiphysics model is based on simulating the structural aspects of a structure such as an actuator but can be readily applied to any of numerous physics or engineering phenomena. Exemplary Model 1 node includes a physics node that includes physics quantities and boundary conditions associated with solid mechanics aspects of the virtual structure. In certain exemplary modeling scenarios it may be desirable to constrain the displacement of a particular structure in one or more directions at a boundary of the solid mechanics physics. To simulate this scenario the physics quantities and boundaries of the physics node may include for example a fixed boundary condition node e.g. Fixed Constraint . In certain embodiments selection of node may reveal various exclusive associations or relationships with other physics quantity and or boundary child nodes of the parent physics node . For example selection of the fixed boundary condition node can reveal a settings window that includes exemplary settings for fixed constraints associated with the physics node . Selection of node may also reveal that the fixed boundary condition associated with node overrides certain functions associated with the Prescribed Displacement 1 node .

To highlight or identify that node is overridden by another operation along at least one of its boundaries a first graphical marker such as a solid downward facing arrow may be situated next to the graphical display of node . The settings window for node may also display information about the node and the geometric entity that the node may be acting on. For example node is illustrated and described in the settings window as overriding the Prescribed Displacement 1 node along boundary number .

Selection of fixed boundary condition node can also reveal an association or relationship with another node such as Prescribed Acceleration 1 node . The association can be highlighted by a second graphical marker such as a solid upward facing arrow situated next to the graphical display of node . In certain embodiments the first and second graphical markers may be dynamically displayed in response to a user selecting a particular node such as node . While both nodes and are both associated with node the association between nodes can be different. For example the Prescribed Acceleration 1 node overrides the fixed boundary condition node . This override may be graphically illustrated to the system user by display of an upwardly pointing arrow for second marker when node is selected. Furthermore the settings window that is displayed upon selection of node can also display information about the geometric entity that overrides node . For example node is illustrated and described in the settings window as being overridden by the Prescribed Acceleration 1 node along boundary number .

It is contemplated that in certain aspects of the present disclosure the setting up a model where certain nodes override other nodes for certain domains can be done graphically based on the ordering of nodes. Changes to which node overrides another can be made by reordering the nodes. For example in node is overridden by node based on node being later on the list of child nodes below physics node . Similarly node overrides node based on node being later or the lowest on the list of child nodes below physics node . By allowing the reordering of nodes the model can be adjusted in how one node may or may not override another node.

Based on the exemplary aspects described and illustrated for it is contemplated that a model tree can include one or more exclusive nodes that override other nodes or operations for one or more domains of a multiphysics problem. For contributions added to an equation that are considered exclusive the contributions cannot coexist on a geometric domain or boundary with other generated contributions. It is contemplated that it may be desirable for exclusive contributions in the relationships or associations between the various nodes to be graphically presented to a system user. Then by selecting a particular node e.g. node a system user is quickly presented with information in a model tree window of other nodes e.g. nodes and that are overridden by or that override the selected node e.g. node . These relationships can be illustrated using graphical highlights markers or other identifiers. Furthermore it is contemplated that selection of nodes can also or alternatively include the presentation of a setting windows e.g. setting window that identifies domains e.g. geometric entities and to which the exclusive nature of the various relationships or associations between nodes and or domains may apply.

Referring now to an exemplary model tree is illustrated having a plurality of model nodes that include the identification of non exclusive operation s associated with a selected node. Similar to an exemplary multiphysics model based on simulating the structural aspects of a structure such as an actuator is illustrated but the application can be readily applied to any of numerous physics phenomena. Exemplary Model 1 node includes a physics node that includes physics quantities and boundary conditions associated with solid mechanics aspects for the virtual structure. In the illustrated non limiting example a load can be applied to a boundary such as the boundary represented by Boundary Load 2 node . Selection of node may reveal various non exclusive relationships or associations between node and other nodes such as Boundary Load 1 node and Boundary Load 3 node . The non exclusive relationship may be that Boundary Load 2 contributes a load together with Boundary Load 1 and Boundary Load 3 on a particular boundary of the structure being simulated. To highlight the non exclusive relationship or association between node and node a first graphical marker such as an outline of a downward facing arrow may be situated next to the graphical display of node to symbolize that node contributes together with node on at least one of the boundaries of the model. The arrow can be directed downward to identify that node is below node and that in the sequence of operations the operation for node is after the operation for node . To highlight the non exclusive relationship or association between node and node a second graphical marker such as an outline of an upward facing arrow may be situated next to the graphical display of node to symbolize that node contributes together with node on at least one of the boundaries of the model. The arrow can be directed upward to identify that node is above node and that in the sequence of operations the operation for node is before the operation for node . The settings window for selected node may also display information about the node s and the related non exclusive operation s . For example node is illustrated and described in the settings window as contributing with Boundary Load 1 node along boundary number and as contributing with Boundary Load 3 node along boundary number .

Based on the exemplary aspects described and illustrated for it is contemplated that a model tree can include one or more non exclusive nodes or operations that contribute to the same domain or geometric entity of the multiphysics model. It is contemplated that it may be desirable for the non exclusive contributions in the relationships or associations between the various nodes to be graphically presented to a system user via a GUI. By selecting a particular node e.g. node a system user can be quickly presented with information in the model tree window of other nodes e.g. nodes and that having a contributory affect on the same model domain as the selected node e.g. node . These relationships can be illustrated using graphical highlights markers or other identifiers. Furthermore it is contemplated that selection of nodes can also or alternatively include the presentation of a setting windows e.g. setting window that identifies domains e.g. geometric entities and to which the contributory nature of the various relationships or associations between nodes may apply.

It is contemplated that in certain aspects of the present disclosure the exemplary model tree window illustrated in may include situations in which a node or operation cannot be changed or altered. A system user may also be able to select a particular node or operation and have information associated with the selection displayed such as in the settings window . Similarly the model tree window can allow a system user the ability to review the settings of a multiphysics problem by selecting one geometrical entity at a time which may allow information about all the nodes or operations that contribute to the equations associated with the selected geometric entity to be obtained. In one non limiting example a user may select Boundary Load 2 node and then select Boundary from the boundary selection list in settings window . Upon selecting Boundary nodes and may be highlighted or otherwise identified as contributing to the boundary conditions on Boundary . In certain embodiments a window not shown may also be displayed graphically displaying boundary of multiphysics problem with the boundary being highlighted.

Referring now to an exemplary aspect of a model tree is illustrated comprising a plurality of model nodes for which the settings of each of the model nodes can be accessed to allow the formation and solving of a multiphysics problem on a multiphysics modeling system. The model nodes may generally represent components of a system being modeled in which the components are simulated simultaneously. In certain embodiments each of the plurality of models may share some constituents of the multiphysics problem such as the ones represented by a study node and a results node . For example a first model node e.g. Thermal Actuator may represent a thermal actuator activated by an electric current. The electric current may heat a part of the actuator causing thermal expansion which then yields a desired structural displacement. The electric current may be generated by an amplifier that is also being simulated in the multiphysics problem. The amplifier may be represented in a model tree as a second model node e.g. Amplifier . The physical connection between the thermal actuator and the amplifier may be described by an equation that sets a current output from the model of the amplifier equal to the current that drives the thermal actuator. It may also be represented by using a coupling operator such as an operator that determines the total value of the current at a boundary by integrating the current density over this boundary. The value of this integral representing the total current may then be defined in an equation to be equal to the current output from the amplifier. It is contemplated that in certain embodiments more than two model nodes may be simulated by the multiphysics modeling system. As described multiple times elsewhere herein these exemplary embodiment provide an example only of the model tree features in the multiphysics modeling system and are therefore non limiting.

An exemplary aspect of the present disclosure includes a method for accessing settings for forming and solving multiphysics problems in a multiphysics modeling system using a model tree. Nodes in the model tree may be used to represent the constituents of a multiphysics problem such as the geometrical domain the physical quantities the physical properties the boundary conditions the mesh the solver and the simulation results.

In another exemplary aspect of the present disclosure the model tree may include one or more parent nodes having one or more child nodes. The nodes may represent constituents of the problem to be solved by the modeling. In addition nodes may further represent sequences of modeling operations that generate constituents when the sequences are performed. Branches in the model tree may represent logical relations between operations represented by parent nodes and child nodes.

In another aspect exemplary aspect of the present disclosure a method for generating a model tree is based on input s entered by a user in a GUI associated with the multiphysics modeling system.

In yet another exemplary aspect of the present disclosure a method alters operations in a sequence of modeling operations while keeping other operations unchanged. The sequence of modeling operations may then be performed in order to update a multiphysics problem to reflect the altered operations.

In a further exemplary aspect of the present disclosure a physics node in a model tree may represent a physical quantity and child nodes branching from the physics node may represent operations that add contributions to the physical quantities. The contributions may describe physical properties and boundary conditions.

In another exemplary aspect of the present disclosure the contributions may be added to a multiphysics problem when they are attributed to a geometrical domain.

In yet a further exemplary aspect of the present disclosure method includes several models represented by model nodes in a model tree. The model nodes may represent components that are connected in a system where the several models may be simulated simultaneously. The different models represented in the model tree may share constituents of a multiphysics problem such as a solver and the simulation results.

As discussed elsewhere herein the windows menus engineering and scientific phenomena equations parameters and nodes illustrated in are non limiting examples of model trees contemplated by the present disclosure. It also would be understood in other physics phenomena having different exemplary windows menus equations parameters and nodes are contemplated by the present disclosure as well. The windows menus equations parameters and nodes depend on the components and physics phenomena being modeled. Therefore it would be understood that provide non limiting exemplary relationships for a model tree structure contemplated in a multiphysics modeling system that is capable of simultaneous modeling one or more components having different properties.

According to one exemplary aspect of the present disclosure a method is executable on one or more processors for implementing a bidirectional link between a design system and a multiphysics modeling system. The method includes the acts of establishing via a communications link a connection between the design system and the multiphysics modeling system. Instructions are communicated via the communication link. The instructions are configured to include commands for generating a geometric representation in the design system based on parameters communicated from the multiphysics modeling system.

It is contemplated that in certain aspects communicating instructions includes sending and receiving instructions by both the multiphysics modeling system and by the design system. Communicating instructions can also be implemented via dynamic link libraries. The design system and the multiphysics modeling system may each have a separate dynamic link library.

It is further contemplated that in certain aspects in response to a communicated instruction being received by the design system files are generated files within the design system that contain a geometric representation. In response to another communicated instruction being received by the multiphysics modeling system a geometrical domain is generated in the multiphysics modeling system using the files containing the geometric representation and a determined geometric sequence. A multiphysics problem may be defined using the geometrical domain.

It is also contemplated that in certain aspects in response to a communicated instruction being received by the multiphysics modeling system parameters are sent for a multiphysics problem from the multiphysics modeling system. The parameters may define geometric features for the design system. In certain aspects the communicating of instructions includes sending parameter lists representing variations in geometric features.

It is additional contemplated that in certain aspects physical properties and boundary conditions are determined via associativity for each variation to a defined multiphysics problem.

According to another exemplary aspect of the present disclosure one or more non transitory computer readable storage media encoded with instructions executable on one or more processors associated with a bidirectional link between a design system and a multiphysics modeling system. The instructions include the acts of implementing a bidirectional link between a design system and a multiphysics modeling system. The acts further include detecting the design system and communicating instructions between the detected design system and the multiphysics modeling system. The instructions include commanding the design system to generate a geometric representation based on parameters received from the multiphysics modeling system.

It is contemplated that in certain aspects the communicating of instructions includes sending and receiving instructions by the multiphysics modeling system or the design system. The communicating of instructions may be implemented via dynamic link libraries. The design system and the multiphysics modeling system may each have a separate dynamic link library.

It is further contemplated that in certain aspects in response to a communicated instruction being received by the design system files are generated within the design system that contain a geometric representation. It is also contemplated that in certain aspects physical properties and boundary conditions are determined via associativity for predetermined variations to a defined multiphysics problem.

According to another exemplary aspect of the present disclosure a system is configured to establish a bidirectional link between a design system and a multiphysics modeling system. The system includes one or more memory components configured to store a design system dynamic link library and a multiphysics modeling system dynamic link library. A controller is operative to detect an installation of the design system and implement via the dynamic link libraries bidirectional communications of instructions between the design system and the multiphysics modeling system.

It is contemplated that in certain aspects the controller is further operative to generate files within the design system that contain a geometric representation. The controller may further be operative to send parameter lists representing variations in geometric features. In addition the controller may also be operative to determine via associativity physical properties and boundary conditions for each variation to a defined multiphysics problem. In certain aspects a solution to a defined multiphysics problem may be determined using an iterative process including mapping geometries between each iteration.

According to one exemplary aspect of the present disclosure a method for controlling settings of a design system is executable on one or more processors associated with the design system. The method includes the acts of detecting via a communications interface a multiphysics modeling system. Instructions are transmitted via the communication interface or another interface. The instructions include model settings related to a multiphysics model at least partially residing in the multiphysics modeling system. Model results are received that are at least partially derived from the transmitted model settings. At least a portion of the received model results are displayed in a graphical user interface associated with the design system.

It is contemplated that in certain aspects the transmitting and receiving acts are implemented via a bridge connection established between the multiphysics modeling system and the design system. In certain aspects the multiphysics model is at least partially represented in the graphical user interface via a model tree.

It is further contemplated that in certain aspects a window is generated in the graphical user interface associated with the design system. The window may be least partially linked with the multiphysics modeling system. A window may also be generated in the graphical user interface associated with the design system. The window may be configured to display model settings via a model tree. The model setting can include at least a portion of the transmitted instructions.

It is also contemplated that in certain aspects transmitting instructions can include transmitting geometric features. A geometric representation of the multiphysics model may be generated that is at least partially based on the transmitted geometric features. The geometric representation may be generated in the design system.

According to another exemplary aspect of the present disclosure a method executable on one or more processors associated with a multiphysics modeling system dynamically controls the multiphysics modeling system. The method includes the acts of detecting a design system via a first interface. Instructions are received via one or more interfaces. The instructions include settings related to a multiphysics model associated with the multiphysics modeling system. A solution is determined for the multiphysics model at least partially based on the received instructions. The solution is transmitted to at least one of the one or more interfaces. The solution is configured for display within a design system user interface that is associated with the design system.

It is contemplated that in certain aspects the receiving and transmitting acts are implemented via a bridge connection between the multiphysics modeling system and the design system.

It is further contemplated that in certain aspects in response to receiving an instruction associated with a geometric representation a geometric domain is generated in the multiphysics modeling system. In certain aspects the act of defining a multiphysics problem may include using the generated geometrical domain.

It is also contemplated that in certain aspects parameters are transmitted describing geometric features associated with the generated geometrical domain to the design system. In certain aspects parameter lists are transmitted representing variations in the geometric features.

It is additionally contemplated that in certain aspects physical properties and boundary conditions are determined via associativity for each variation to a defined multiphysics problem.

According to another exemplary aspect of the present disclosure one or more non transitory computer readable storage media are encoded with instructions executable on one or more processors associated with a design system. The instructions include the acts of receiving a signal via a communications interface. The signal is associated with a multiphysics modeling system. Instructions are sent to the communications interface or another interface. The instructions include settings related to a multiphysics model associated with the multiphysics modeling system. Multiphysics model results derived from the settings are received. The multiphysics model result are displayed in a design system user interface.

According to a further exemplary aspect of the present disclosure a method for controlling settings of a design system is executable on one or more processors associated with the design system. The method includes the acts of establishing a communications link between the design system and an associated multiphysics modeling system. Instructions are transmitted via the communications link or another link. The instructions include settings related to a multiphysics model associated with the multiphysics modeling system. Multiphysics model results derived from the settings are received. The multiphysics model results are displayed in a design system user interface.

It is contemplated that in certain aspects the transmitting and receiving acts are executed via a bridge connection.

It is further contemplated that in certain aspects the multiphysics model in the design system user interface is represented using a model tree. In certain aspects a window is generated in the design system user interface that is related to the multiphysics modeling system. The window is associated with the settings and the model tree includes at least a portion of the instructions for the settings.

It is also contemplated that in certain aspects transmitting instructions includes sending geometric features. In certain aspects a geometric representation is generated in the design system.

According to another exemplary aspect of the present disclosure a method for dynamically controlling a multiphysics modeling system is executable on one or more processors associated with the multiphysics modeling system. The method includes the acts of establishing one or more communications channels between the multiphysics modeling system and an associated design system. Instructions are received via the one or more communications channels. The instructions include settings related to a multiphysics model associated with the multiphysics modeling system. An outcome is determined for the multiphysics model based on the received instructions. The outcome is sent to at least one of the one or more communication channels. The outcome is configured for display in a design system user interface.

According to one exemplary aspect of the present disclosure a method executable on one or more processors associated with a multiphysics modeling system generates a model tree structure for the multiphysics modeling system. The multiphysics modeling system is configured to model combined systems having physical quantities represented in terms of partial differential equations. The method includes the acts of receiving an input associated with a selection of space dimensions for at least one of the combined systems. A plurality of selectable physics options for association with at least one of the combined systems are transmitted for display on a user interface. An input associated with a selection of at least one of the plurality of selectable physics options is received. One or more selectable study options for association with the combined systems are transmitted for display on the user interface. An input associated with a selection of at least one of the one or more selectable study options is received. In response to receiving the input associated with the selection at least one of the one or more selectable study options a model tree structure is generated. The model tree structure includes a plurality of selectable nodes and subnodes. The selectable nodes and subnodes include fields for storing physical quantities and operations for modeling the combined systems.

It is contemplated that in certain aspects the selectable nodes and subnodes are configured for display on a user interface associated with the multiphysics modeling system. In certain aspects the model tree structure includes exclusive and non exclusive subnodes. The exclusive and non exclusive subnodes may be labeled with symbols distinguishing the exclusive subnodes from the non exclusive subnodes and distinguishing the exclusive and non exclusive subnodes from other subnodes in the model tree.

It is also contemplated that in certain aspects in response to receiving an input associated with the selection of a node or subnode an identifying setting of a geometric entity associated with the selected node or subnode is displayed. Information about exclusive or non exclusive subnodes related to the selected node or subnode may be further displayed.

According to another exemplary aspect of the present disclosure a method for solving a multiphysics model in a multiphysics modeling system is executed on one or more processor associated with the multiphysics modeling system. a multiphysics modeling system generates a model tree structure for the multiphysics modeling system. The multiphysics model includes combined systems having physical quantities represented in terms of partial differential equations. The multiphysics modeling system is configured to receive model inputs via a model tree. The method includes generating a geometric representation of the combined systems. The geometric representation is at least partially based on data received via a geometry node. Physical properties for the geometric representation of the combined systems are assembled. The physical properties are at least partially based on data received via a materials node. Physics quantities and boundary conditions are assembled for one or both of the geometric representation and the physical properties of the combined systems. The assembling of the physics quantities and boundary conditions are at least partially based on selected physics options received via a physics node. A solution for the multiphysics model of the combined systems is generated. The solution is based on partial differential equations for one or more study steps associated with a set of partial differential equations for the assembled physics quantities and boundary conditions. The study steps are received via a study node. The geometry node materials node physics node and study node are logically associated branches of a model tree for the multiphysics model.

It is contemplated that in certain aspects exclusive and non exclusive contributions to the partial differential equations are generated using operations represented by exclusive and non exclusive child nodes to one or more of the geometry node the materials node or the physics node of the model tree. In certain aspects the exclusive and non exclusive subnodes are labeled with symbols distinguishing the exclusive subnodes from the non exclusive child nodes and distinguishing the exclusive and non exclusive child nodes from other nodes in the model tree.

It is also contemplated that in certain aspects in response to selecting a node an identifying setting of a geometric entity associated with the selected node is displayed and information about exclusive or non exclusive child nodes related to the selected node are further displayed.

It is further contemplated that in certain aspects the solution is displayed on a user interface and is configured to be displayed in a 2 D graphical form. In certain aspects the solution is configured to be displayed in a 3 D graphical form or tabular form. In certain aspects the geometry node the materials node the physics node and the study node are each selectable via a user interface and include fields for storing physical quantities and operations for modeling the combined systems.

According to a further exemplary aspect of the present disclosure one or more non transitory computer readable storage media are encoded with instructions executable on one or more processors associated with a multiphysics modeling system. The instructions include the acts of generating a geometric representation of the combined systems. The geometric representation is at least partially based on data received via a geometry node. Physical properties are assembled for the geometric representation of the combined systems. The physical properties are at least partially based on data received via a materials node. Physics quantities and boundary conditions are assembled for one or both of the geometric representation and the physical properties of the combined systems. The assembling of the physics quantities and boundary conditions are at least partially based on selected physics options received via a physics node. A solution is generated for the multiphysics model of the combined systems. The solution is based on partial differential equations for one or more study steps associated with a set of partial differential equations for the assembled physics quantities and boundary conditions. The study steps are received via a study node. The geometry node materials node physics node and study node are logically associated branches of a model tree for the multiphysics model.

According to another aspect of the present disclosure a method for generating model constituents associated with a multiphysics model via a multiphysics modeling system is executed on one or more processors. The method includes representing a plurality of model constituents as one or more selectable primary nodes of a model tree. Operations that generate the model constituents are represented as one or more selectable secondary nodes to the primary nodes. Physical quantities associated with said model constituents are represented via at least one of the selectable primary nodes of the model tree. Contributions to partial differential equations are generated in the multiphysics modeling system via operations represented as at least one of the selectable secondary nodes to the at least one of the selectable primary nodes.

It is contemplated that in certain aspects the multiphysics model includes a geometrical domain. The partial differential equations are generated only if attributable to the geometrical domain.

It is also contemplated that in certain aspects the method also includes representing combined systems as a plurality of model nodes in the model tree. Equations operable to couple the plurality of model nodes may be generated via operations represented as secondary nodes to the model nodes.

It is further contemplated that in certain aspects contributions to the partial differential equations are generated for each of the model nodes. The partial differential equations may be solved simultaneously by the multiphysics modeling system.

It is also contemplated that in certain aspects the method also includes generating exclusive and non exclusive contributions to the partial differential equations using operations represented by exclusive and non exclusive secondary nodes of the model tree. In certain aspects the exclusive and non exclusive subnodes may be labeled with symbols distinguishing the exclusive subnodes from the non exclusive subnodes and distinguishing the exclusive and non exclusive secondary nodes from other nodes in the model tree. In certain aspects in response to selecting a primary node or secondary node an identifying setting is displayed of a geometric entity associated with the selected node and information about exclusive or non exclusive secondary nodes related to the selected node may further be displayed.

It is additionally contemplated that the informational aspects about certain operations in the model tree may be displayed for the nodes of the model tree. Information about the author or the source of the operation represented by a particular node in the model tree may be presented or be selectable in the setting window.

According to another aspect of the present disclosure one or more physical products or systems e.g. mechanical devices electrical devices electromechanical devices structures electromagnetic devices chemical compounds combinations of one or more of the foregoing are designed and or produced using the design system and or multiphysics modeling system processes and or methods described herein.

According to yet another aspect of the present disclosure one or more non transitory computer readable media are encoded with instructions which when executed by at least one processor associated with a design system or a multiphysics modeling system causes the at least one processor to perform the methods described herein.

Each of these embodiments and obvious variations thereof is contemplated as falling within the spirit and scope of the claimed invention which is set forth in the following claims.

