---

title: Communicating between software environments
abstract: A method for use in communicating between software environments is disclosed. A JavaScript connection is established between a Flex based operating environment and a Java based operating environment. Based on the JavaScript connection, a socket connection between the Flex based operating environment and the Java based operating environment is established. Based on the socket connection, remote procedure calls are executed between the Flex based operating environment and the Java based operating environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08370862&OS=08370862&RS=08370862
owner: EMC Corporation
number: 08370862
owner_city: Hopkinton
owner_country: US
publication_date: 20100930
---
Information services and data processing industries in general have rapidly expanded as a result of the need for computer systems to manage and store large amounts of data. As an example financial service companies such as banks mutual fund companies and the like now more than ever before require access to many hundreds of gigabytes or even terabytes of data and files stored in high capacity data storage systems. Other types of service companies have similar needs for data storage.

Data storage system developers have responded to the increased need for storage by integrating high capacity data storage systems data communications devices e.g. switches and computer systems e.g. host computers or servers into so called storage networks or Storage Area Networks SANs. 

In general a storage area network is a collection of data storage systems that are networked together via a switching fabric to a number of host computer systems operating as servers. The host computers access data stored in the data storage systems of a respective storage area network on behalf of client computers that request data from the data storage systems. For example according to conventional applications upon receiving a storage access request a respective host computer in the storage area network accesses a large repository of storage through the switching fabric of the storage area network on behalf of the requesting client. Thus via the host computer e.g. server a client has access to the shared storage system through the host computer. In many applications storage area networks support hi speed acquisitions of data so that the host servers are able to promptly retrieve and store data from the data storage system.

Conventional storage area network management applications typically include a graphical user interface GUI that enables a network manager to graphically manage control and configure various types of hardware and software resources associated with a corresponding managed storage area network. For example one conventional storage management application generates a graphical user interface utilized by a storage administrator to graphically select interact with and manage local or remote devices and software processes associated with the storage area network. Based on use of the graphical user interface in combination with an input device such as a hand operated mouse and corresponding pointer displayed on a viewing screen or other display a storage administrator is able to manage hardware and software entities such as file systems databases storage devices volumes peripherals network data communications devices etc. associated with the storage area network. Consequently a storage management station and associated management software enables a storage administrator a person responsible for managing the storage network to manage the storage area network and its resources.

A typical computer network being used today that can run object oriented software is a client server network the client being the user GUI or workstation and the server being software discrete or distributed throughout the network which serves the client. In this network a computer system can employ one or more object oriented computer languages such as C XML eXtensible Markup Language Java Flash and or others. Briefly an object in computer software terms is a dedicated area of memory which can be thought of as an impervious container holding both data and instructions within itself both defining itself and its relationships to other objects in the computer system or network. Such object or node can send and receive messages to and from other objects respond and react to such messages e.g. commands but shall normally be impervious to internal scrutiny. For example in a computer data storage system a kind of computer each object system object may describe or relate to a specific tangible detail in the storage system or in the storage system s processor e.g. details such as those describing or relating to aspects of operation of the processor s cooling fan power switch cache memory power supply disk drive interface individual disks etc. .

With respect to networks people today use the World Wide Web for a variety of different and diverse tasks for example locating information ordering and buying goods on line and managing their finances. Many users expect that these applications will operate regardless of what type of computer platform is used.

Java technology which is a trademark of Sun Microsystems Inc helps provide a solution by allowing the creation of computer platform independent programs. The Java technology includes an object oriented programming language and a platform on which to run the Java applications known as Java Runtime Environment or JRE . Java is both a compiled and an interpreted language. The source code that has been written by the application developer is compiled into an intermediate form called a Java bytecode which is a platform independent language. At a client machine the java bytecodes are interpreted by the Java platform and the Java interpreter parses and runs each Java bytecode instruction on the computer. If the Java bytecode is run as a applet it may first be sent over the network to the client machine. 

Java s objected oriented programming language is based on using objects and classes and this paragraph will introduce the reader to a few basic concepts. Just like real world objects software objects consist of a state and a behavior. A software object maintains its state in one or more variables and a variable is an item of data named by an identifier. A software object implements its behavior with methods and a method is a function associated with an object. Just like any other objected oriented programming language objects communicate with each other by passing messages. Further object oriented concepts are well known in the art and will not be described here further.

The Java platform includes the Application Programming Interface API which is a large collection of ready made software components which provide a variety of capabilities and the Java Virtual Machine JVM which will be explained in the paragraph below. Together the JVM and the API sit on top of the hardware based computer platform and provide a layer of abstraction between the Java program and the underlying hardware.

The JVM is made up of software which can run a Java program on a specific computer platform of a client machine. Before a Java program can be run on a JVM the Java program must first be translated into a format that the JVM recognizes which is called a Java class file format. The Java class file format contains all the information needed by a Java runtime system to define a single Java class.

Adobe Flex is a collection of technologies released by Adobe Systems for the development and deployment of cross platform rich Internet applications based on the Adobe Flash platform. Flex provides a workflow and programming model that is familiar to developers. Macromedia XML MXML an eXtensible Markup Language XML based markup language offers a way to build and lay out graphic user interfaces. Interactivity is achieved through the use of ActionScript the core language of Flash Player that is based on the European Computer Manufacturers Association ECMA ECMAScript standard. A Flex software development kit SDK comes with a set of user interface components including buttons list boxes trees data grids several text controls charts graphs and various layout containers. Other features such as web services drag and drop modal dialogs animation effects application states form validation and other interactions round out the application framework.

A Flex application may be a rich internet application RIA . RIAs introduce an intermediate layer of code often called a client engine between the user and the server. This client engine is typically downloaded as part of the instantiation of the application and may be supplemented by further code downloads as use of the application progresses. The client engine acts as an extension of the browser and usually takes over responsibility for rendering the application s user interface and for server communication. What can be done in a RIA may be limited by the capabilities of the system used on the client but in general the client engine is programmed to perform application functions that its designer believes will enhance some aspect of the user interface or improve its responsiveness when handling certain user interactions compared to a standard Web browser implementation. Also while simply adding a client engine does not force an application to depart from the normal synchronous pattern of interactions between browser and server in most RIAs the client engine performs additional asynchronous communications with servers.

In a multi tiered model Flex applications serve as the presentation tier. Unlike page based Hypertext Markup Language HTML applications Flex applications provide a stateful client where significant changes to the view don t require loading a new page. Similarly Flex and Flash Player provide many useful ways to send and load data to and from server side components without requiring the client to reload the view. To incorporate a Flex application into a website one typically embeds Shockwave Flash .SWF file in an HTML JavaServer Pages JSP Adobe ColdFusion or other type of web page. The page that embeds the SWF file is known as the wrapper. A wrapper consists of an tag and an tag that format the SWF file on the page define data object locations and pass run time variables to the SWF file. In addition the wrapper can include support for history management and Flash Player version detection and deployment.

JavaScript is a Web scripting language and JavaScript source code may be directly included in HTML documents. HTML is a language used to create Web documents. JavaScript source code is typically embedded in HTML documents by using a script tag such as . A Web browser executes HTML documents containing JavaScript source code. Unlike compiled languages JavaScript is an interpreted language which means the Web browser executes each line of JavaScript as it comes to it. JavaScript programs run within the Web browser or other JavaScript enabled applications to produce the desired results.

A socket is a software entity that provides a basic building block for interprocess communications and functions as an endpoint of communication between processes. In particular the socket is an object that identifies communication endpoints between two processes. The socket s API typically hides the protocol of the network architecture or the computer software architecture present in the host processors that the application processes are placed on. Thus a socket allows the easy association of an endpoint such as an application process any protocol or protocol implementation. In the case of Java a process may be provided that allows communication between a Java code and an executable software file which permits the Java code to receive access to the internal system resources of the user s computer. The Java code is arranged to be configured as a server in the client s configuration by means of the establishment of a server socket communication channel server socket . Once established that socket communication channel is used for allowing full ordered error free communication between the Java code and the local executable file thereby allowing the Java code to make use of the internal system resources of the user s computer.

Remote procedure calls RPCs are used in many different types of scenarios. In a common scenario RPCs generally enable a client system to request services provided on a server systems RPC server system . In the common scenario the RPC server system is implemented to execute a service upon receiving an RPC request and a client system causes execution of the service by sending the RPC request. The results of execution of the service are then generally provided to the client system sending the RPC request.

XML RPC is an RPC method that uses textual documents to represent data passed in the RPC. Each piece of data is represented using an XML document. XML RPC can be used to facilitate communication between a server e.g. a local server or a central server and a client machine. In particular XML RPC is a simple and portable way to make remote procedure calls over HTTP. It can be used with Perl Java Python C C PHP and many other programming languages. In addition XML RPC allows software running on disparate operating systems running in different environments to make procedure calls over a data network. It is remote procedure calling using HTTP as the transport and XML as the encoding. XML RPC is designed to be as simple as possible while allowing complex data structures to be transmitted processed and returned.

In a broad sense serialization is the conversion of an object from one representation or format to another. Serialization generally implies a two way process converting an object from an initial representation to some other representation and then converting that other representation back to the initial representation. Although at times converting back to the initial representation may be referred to as deserialization serialization is a generic term that encompasses both the initial conversion of the initial representation and the subsequent conversion back to the initial representation.

For example in memory or live objects may be serialized to persistent or transient objects that are suitable for durable storage or transmission over a network. Currently it is common practice to use XML as a serialization format for both storage and data transmission. Once stored or transmitted the XML representation of the object may be serialized or deserialized from the XML representation back to an in memory or live object. The software that performs serialization typically is called a serializer.

A method for use in communicating between software environments is disclosed. A JavaScript connection is established between a Flex based operating environment and a Java based operating environment. Based on the JavaScript connection a socket connection between the Flex based operating environment and the Java based operating environment is established. Based on the socket connection remote procedure calls are executed between the Flex based operating environment and the Java based operating environment.

Described below is a technique for use in communicating between software environments. In at least one implementation the technique may be used to help provide for Flex Java communication enhancements. In at least one implementation using the technique two way remote procedure calls are provided such that messages can be sent between software environments based on Flex and Java respectively. In particular such an implementation includes anonymous two way remote procedure calls and performs a handshake that dynamically determines free ports on client systems that can be used for socket based communication. Information identifying these free ports is passed using JavaScript and future communication uses sockets. This implementation allows for multiple instances of the same application to run without user configuration which is a key advantage for running the implementation as a Web application.

This implementation also takes into consideration that upon startup of the Web application either Java software e.g. Java applet or Flex software e.g. Flex application could load first before the other software. With respect to such load timing each time when the implementation is running as a Web application it is not certain which software will be finished loading and thereby become active and start processing first. As described below since either type of software can make calls to the other it is preferable to avoid forcing the calling software to wait to ensure that the other software is active before beginning to communicate. A respective communication layer on each software side can queue up messages until the other side is ready which allows the calling software to be unaware of the loading status of the other software.

Referring now to shown is an example of an embodiment of a computer system that may be used in connection with performing the technique described herein. The computer system includes one or more data storage systems connected to host systems through communication medium . The system also includes a management system connected to one or more data storage systems through communication medium . In this embodiment of the computer system the management system and the N servers or hosts may access the data storage systems for example in performing input output I O operations data requests and other operations. The communication medium may be any one or more of a variety of networks or other type of communication connections as known to those skilled in the art. Each of the communication mediums and may be a network connection bus and or other type of data link such as a hardwire or other connections known in the art. For example the communication medium may be the Internet an intranet network or other wireless or other hardwired connection s by which the host systems may access and communicate with the data storage systems and may also communicate with other components not shown that may be included in the computer system . In one embodiment the communication medium may be a LAN connection and the communication medium may be an iSCSI or fibre channel connection.

Each of the host systems and the data storage systems included in the computer system may be connected to the communication medium by any one of a variety of connections as may be provided and supported in accordance with the type of communication medium . Similarly the management system may be connected to the communication medium by any one of variety of connections in accordance with the type of communication medium . The processors included in the host computer systems and management system may be any one of a variety of proprietary or commercially available single or multi processor system such as an Intel based processor or other type of commercially available processor able to support traffic in accordance with each particular embodiment and application.

It should be noted that the particular examples of the hardware and software that may be included in the data storage systems are described herein in more detail and may vary with each particular embodiment. Each of the host computers the management system and data storage systems may all be located at the same physical site or alternatively may also be located in different physical locations. In connection with communication mediums and a variety of different communication protocols may be used such as SCSI Fibre Channel iSCSI and the like. Some or all of the connections by which the hosts management system and data storage system may be connected to their respective communication medium may pass through other communication devices such as a Connectrix or other switching equipment that may exist such as a phone line a repeater a multiplexer or even a satellite. In one embodiment the hosts may communicate with the data storage systems over an iSCSI or fibre channel connection and the management system may communicate with the data storage systems over a separate network connection using TCP IP. It should be noted that although illustrates communications between the hosts and data storage systems being over a first connection and communications between the management system and the data storage systems being over a second different connection an embodiment may also use the same connection. The particular type and number of connections may vary in accordance with particulars of each embodiment.

Each of the host computer systems may perform different types of data operations in accordance with different types of tasks. In the embodiment of any one of the host computers may issue a data request to the data storage systems to perform a data operation. For example an application executing on one of the host computers may perform a read or write operation resulting in one or more data requests to the data storage systems .

The management system may be used in connection with management of the data storage systems . The management system may include hardware and or software components. The management system may include one or more computer processors connected to one or more I O devices such as for example a display or other output device and an input device such as for example a keyboard mouse and the like. A data storage system manager may for example view information about a current storage volume configuration on a display device of the management system .

An embodiment of the data storage systems may include one or more data storage systems. Each of the data storage systems may include one or more data storage devices such as disks. One or more data storage systems may be manufactured by one or more different vendors. Each of the data storage systems included in may be inter connected not shown . Additionally the data storage systems may also be connected to the host systems through any one or more communication connections that may vary with each particular embodiment and device in accordance with the different protocols used in a particular embodiment. The type of communication connection used may vary with certain system parameters and requirements such as those related to bandwidth and throughput required in accordance with a rate of I O requests as may be issued by the host computer systems for example to the data storage systems .

It should be noted that each of the data storage systems may operate stand alone or may also be included as part of a storage area network SAN that includes for example other components such as other data storage systems.

Each of the data storage systems of element may include a plurality of disk devices or volumes. The particular data storage systems and examples as described herein for purposes of illustration should not be construed as a limitation. Other types of commercially available data storage systems as well as processors and hardware controlling access to these particular devices may also be included in an embodiment.

Servers or host systems such as provide data and access control information through channels to the storage systems and the storage systems may also provide data to the host systems also through the channels. The host systems do not address the disk drives of the storage systems directly but rather access to data may be provided to one or more host systems from what the host systems view as a plurality of logical devices or logical volumes LVs . The LVs may or may not correspond to the actual disk drives. For example one or more LVs may reside on a single physical disk drive. Data in a single storage system may be accessed by multiple hosts allowing the hosts to share the data residing therein. An LV or LUN logical unit number may be used to refer to one of the foregoing logically defined devices or volumes.

Referring now to shown is an example of a GUI that may be used in connection with the technique described herein and that may be included in the management system . As shown GUI has a section panel that has buttons including REPLICAS button and a backward navigation button and a forward navigation button . GUI also has s subsection panel that has buttons including CLONES button . A system selection area of GUI has a system selection pulldown menu . GUI also has a links table and main body area that has tabs including tab .

In operation system relies on Flex operating environment F on which a Flex service manager F executes and also relies on Java operating environment J on which a Java service manager J executes. Managers F J are applications that are not included in environments F J respectively but that execute on environments F J respectively.

On startup manager F causes startup of other applications that execute on environment F which other applications depending on the implementation. may include for example alert service F scope service F and layout service F. Similarly on startup manager J causes startup of other applications that execute on environment J which other applications depending on the implementation. may include for example alert service J scope service J and layout service J. These other applications are not included in environments F J respectively but execute on environments F J respectively. Alert services F J are used for notifying the user about conditions or events within the storage system scope services F J are used for affecting GUI based on which storage system is selected and layout services F J are used for laying out GUI .

Communications between services running on environment F and services running on environment J may be accomplished as described below using a socket bridge F a JavaScript based JS bridge F and RPC logic F all executing on environment F and a socket bridge J a JS bridge J and RPC logic J all executing on environment F and JavaScript based bridge logic .

Environments F J are started up in system by JavaScript logic e.g. using a same JavaScript wrapper. On startup of environments F J a two stage process is executed to establish support for communications between services running on environment F and services running on environment J. In a first stage JS bridge F is started up and JS bridge J is started up and a handshake procedure is executed between bridge F and J. Bridges F J can communicate with each other because both environments F J support JavaScript such that bridges F J can expose JavaScript methods outside their respective environments F J and can call methods outside their respective environments F J. In the handshake procedure each of bridges F J upon starting up sends off an initial message to the other of bridges F J e.g. through use of logic and awaits the initial message from the other of bridges F J. Thus regardless of which of bridges F J completes startup first inter environment communication i.e. communication between environments F and J can proceed once that bridge receives the initial message from the other of bridges F J. Bridge J or other logic that feeds bridge J determines a set of free ports on system that may be used to form a socket connection described below and sends a message to bridge F identifying the set of free ports as port numbers .

In the second stage of the two stage process the set of free ports is used by socket bridges F J to establish a socket connection. Sockets are supported by both environments F J but in at least one embodiment environment F does not support server sockets so inter environment communications relies on a message identifier system described below to match requests with responses. The socket connection using bridges F J can be used by RPC logic F J to pass messages between environments F and J. RPC logic F and J have respective message queues F J where messages bound for the other environment may be held temporarily awaiting their turns.

With respect to the message identifier system each message used in the inter environment communications has a message identifier so that when the other environment returns a related message the related message includes the same message identifier which allows the contents of the messages to be linked. In particular for example based on a request from alert service F RPC logic F can issue an outgoing message with an identifier XYZ to environment J requesting some information and when RPC logic F receives an incoming message including the same identifier XYZ RPC logic F can reply to alert service F with the contents of message . The message identifier system also works in the other direction in the inter environment communications. For example based on a request from alert service J RPC logic J can issue an outgoing message with an identifier ABC to environment F delivering some information to a service executing on environment F and when RPC logic J receives an incoming message including the same identifier ABC RPC logic J can reply to alert service J with the contents of such incoming message which may include an acknowledgement of successful receipt of the information by the service executing on environment F.

In at least one embodiment the functionality described above may be used as now described in an example. Alert service F may be responsible for making an alert list F available to the user of GUI . Alert list F may include a list e.g. a comprehensive list of conditions or events within a storage system e.g. system A or within a set of storage systems e.g. systems A B and C . Alert service F may be able to populate some of list F based on information that is accessible from environment F e.g. certain information about system A but alert service F may also need to be able to populate some of list F based on information that is accessible only from environment J e.g. certain information about system C. Such information that is accessible only from environment J may be available from alert service J. Thus alert service F uses inter environment communications to retrieve such information from alert service J.

In the example based on a remote procedure call from service F to logic F for such information requested information which call identifies service J as the target of such call logic F issues a message also identifying service J to bridge F which passes the message to bridge J. Bridge J uses a lookup service of manager J to determine a specific running instance of service J. A local procedure call is made to such instance which retrieves the requested information e.g. from local alert list J and returns the requested information in another message delivered through RPC J bridge J and bridge F to logic F which responds to service F with the requested information.

In another example based on a remote procedure call from service J to logic J for modifying list F which call identifies service F as the target of such call logic J issues a message also identifying service F to bridge J which passes the message to bridge F. Bridge F uses a lookup service of manager F to determine a specific running instance of service F. A local procedure call is made to such instance which makes the modification to list F and returns an acknowledgement in another message delivered through RPC F bridge F and bridge F to logic J which responds to service J with the acknowledgement.

One or more implementations may include one or more of the following. Communication between bridges F J may be performed e.g. wrapped in accordance with XML RPC protocol. At least some objects and or data may be serialized e.g. using custom serialization. In particular customized serializers and deserializers i.e. software logic may be registered for use with specific types of objects and when such an object is to be transferred i.e. communicated between environments an appropriate custom serializer is invoked in one environment to prepare e.g. break down the object for transfer and after transfer a corresponding custom deserializer is invoked in the other environment e.g. to reconstruct the object . JS bridge based on bridges F J may continue to be used though it is slower than the socket connection and has a size limit. The socket connection may be used to make RPC calls in both directions. Determining the set of free ports may allow more than once instance of system to be executed in the same computer system e.g. so that multiple instances are not trying to use the same hardcoded port numbers. The remote procedure call may take the form exemplified by rpcclient.call alertservice getalerts parameters callback where alertservice is the service in the other environment getalerts is a method to be invoked on such service parameters is a set of parameters to be used with such method and callback is a local method callback method to be invoked when an incoming message is received in response to the remote procedure call. For example upon receiving the remote procedure call RPC logic may associate a resulting outgoing message s message identifier with the callback method so that later when an incoming message including the message identifier is received RPC logic can invoke the callback method to direct the incoming message s contents to the originator of the remote procedure call. Thus in at least some implementations the callback method need not be included in the outgoing message. Successful inter environment communication may rely on a service in one environment being able to identifying exactly by name another service in the other environment. Client system or one or both environments F J and associated services and other software logic may be executed on a different computing systems such as system A. One of the ports in the set of free ports may be used to navigate a security feature particularly to retrieve a policy file that allows one or both environments to communicate with a local host e.g. instead of or in addition to a source computer such as system A from which the environment was invoked via JavaScript. Queues F J may allow services such as services F J to start issuing messages immediately upon startup which messages are sent out of such queues as soon as inter environment communications are established.

Aside from the Java environment any of different implementation technologies may be used in an embodiment in connection with presenting the GUI to a user. As an example implementation technologies that may be supported include HTML a technology such as Nexweb which uses graphics or drawing commands with a rendering engine AJAX Asynchronous Javascript And XML Adobe Flash or Adobe Flex as well as a Windows based application written in any one or more different programming languages used to render the UI.

Each component described herein may be a means for performing the functions described. Each components described herein includes software hardware or a combination of these. The components can be implemented as software modules hardware modules special purpose hardware e.g. application specific hardware application specific integrated circuits ASICs digital signal processors DSPs etc. embedded controllers hardwired circuitry etc. Software content e.g. data instructions configuration may be provided via an article of manufacture including a machine readable medium which provides content that represents instructions that can be executed. The content may result in a machine performing various functions operations described herein. A machine readable medium includes any mechanism that provides i.e. stores and or transmits information in a form accessible by a machine e.g. computing device electronic system etc. such as recordable non recordable media e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. . The content may be directly executable object or executable form source code or difference code delta or patch code . A machine readable medium may also include a storage or database from which content can be downloaded. A machine readable medium may also include a device or product having content stored thereon at a time of sale or delivery. Thus delivering a device with stored content or offering content for download over a communication medium may be understood as providing an article of manufacture with such content described herein.

While the invention has been disclosed in connection with preferred embodiments shown and described in detail their modifications and improvements thereon will become readily apparent to those skilled in the art. Accordingly the spirit and scope of the present invention should be limited only by the following claims.

