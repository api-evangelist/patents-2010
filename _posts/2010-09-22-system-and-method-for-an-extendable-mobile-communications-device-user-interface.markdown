---

title: System and method for an extendable mobile communications device user interface
abstract: A system and method for an extendable software interface includes a software architecture for use in a mobile device having a processor and a memory device. The software architecture includes a set of first-order controller software instructions configured to interface the application program with a first-order data model, and a first-order data object stored in the memory device in the form of the first-order data model. The first-order data object includes a second-order data object. A second-order set of controller software instructions configured to interact with the second-order data object is also included in the software architecture.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08275844&OS=08275844&RS=08275844
owner: Research In Motion Limited
number: 08275844
owner_city: 
owner_country: CA
publication_date: 20100922
---
This application is a continuation of U.S. patent application Ser. No. 11 237 010 filed on Sep. 28 2005 now U.S. Pat. No. 7 805 729 which is a continuation of U.S. patent application Ser. No. 09 897 207 filed on Jul. 2 2001 now U.S. Pat. No. 6 990 672 which claimed priority from U.S. Provisional Application No. 60 215 605 filed Jun. 30 2000. These prior applications including their entire written descriptions and drawing figures are hereby incorporated into the present application by reference.

This invention relates generally to a software interface for a mobile device. More particularly the invention provides an extendable software interface enabling forward compatibility in a mobile device such that new applications may be easily integrated into the mobile device. This invention is particularly well suited for use in Personal Digital Assistants mobile communication devices cellular phones and wireless two way email communication devices collectively referred to herein as mobile devices .

Typical mobile device interfaces are constrained by resource limitations on the mobile device as compared to those of a desktop system. As a result of these constraints known mobile device interfaces are generally either hard wired or hard coded. In either case the known mobile device interfaces are immutable once the mobile device has been manufactured. For instance in a hard wired mobile device physical components such as push buttons and displays are generally integrated into a user interface by control logic wired into a printed circuit board. Consequently a hard wired mobile device is not capable of being upgraded to support new applications. In a hard coded mobile device a programmable device is typically used for the control logic and the user interface is generally controlled by the firmware and or operating system of the mobile device. New applications can generally be added to a hard coded mobile device but this process typically involves replacing or upgrading the interface software which often involves a risk of breaking compatibility with legacy features of the mobile device. In addition neither hard wired nor hard coded mobile devices typically allow a user to seamlessly interface between an application program and data types associated with other application programs.

A system and method for an extendable software interface includes a software architecture for use in a mobile device having a processor and a memory device. The software architecture comprises a plurality of application programs stored in the memory device and executed by the processor and at least one controller module for interfacing the plurality of application programs with a data model configured to interact with a particular type of data object. Each controller module utilizes one or more generic interfaces with the plurality of application programs and also utilizes a specific interface with the data model.

Referring now to the drawing figures is a block diagram showing a mobile device with an exemplary extendable software interface. The mobile device comprises a processor coupled to a system memory an input device a display and a transceiver . Within the system memory is an operating system that includes a virtual machine . The virtual machine operates using two types of software modules controllers and data models that interface with application programs through a plurality of generic interfaces .

Operationally the software interface of the mobile device is extended using the software modules and and the generic interfaces . The software modules and are executed by the virtual machine which is preferably an object oriented run time environment such as Sun Micro System s J2ME JAVA 2 Micro Edition . The software modules and are preferably constructed using a JAVA compiler capable of enforcing a software application interoperation architecture that takes on the form of a collection of compiled classes and objects along with an application programming interface API .

Data models are classes that represent the various types of data stored on the mobile device . The types of data may include for example e mail messages address book entries calendar items tasks and memos. In addition next generation mobile devices may store data such as SMS messages phone call logs voice mail indicators WAP requests multiple e mail sources HTML content exchanges specialized banking services financial services field server and customer service offerings or downloads from corporate databases.

The data models are preferably stored on the mobile device in the form of Java objects for execution in the J2ME run time environment. Each data model is designed for a particular type of data object and includes specialized functions for retrieving information associated with the data type. For example an e mail message model may have specialized functions for retrieving the subject of the e mail object and for retrieving the body of the e mail object. A calendar entry model on the other hand may include specialized functions specific to a calendar entry object such as a function capable of retrieving the duration of an appointment.

Each type of data model has an associated controller capable of interacting with the specific functions of the data model type and representing the data model in a uniform way to the rest of the software interface system. Operationally the controllers isolate the data models from the generic interfaces and implement the generic interfaces such that each controller can be easily hosted by any application program that supports the generic interfaces . In this manner the controllers present a common standard interface to any application and each application that supports the generic interfaces is able to interact with any arbitrary controller . For example an e mail application using one or more of the generic interfaces can interface with an address book controller to retrieve an e mail address from an address book data model. Moreover existing controllers can be used to interface with any new applications supporting the generic interfaces . In this manner a mobile device user is able to install new applications without having to upgrade his or her operating system or interface software . The flexibility provided by the interoperability of the controllers may also enable the mobile device user to expand the functionality of his or her mobile device by interacting with third party applications such as banking or other commercial services.

The interaction between an application program and any arbitrary controller is primarily made possible by generic interfaces that are implemented each controller . The generic interfaces are generic in the sense that they are object oriented as opposed to being specific to a certain type of data. Put another way each generic interface is preferably programmed to perform a certain operation regardless of the data type. Operationally each application is preferably programmed to query any controller to determine if the controller supports one or more generic interfaces required to perform a given operation. If so the application then interacts with the controller and its associated data model to complete the operation. For instance an application may query a controller to determine whether it supports a generic interface capable of painting an object such as the body of an e mail message onto a screen and if so then interface with an controller to display the object. In this manner the same type of generic interface that is used by an application to display the body of an e mail message could also be used for example to display a clipping from a lengthy SMS message. In another example the same generic interface used to display the e mail message may also be used to receive an e mail address from an e mail controller and interface with an address book application to paint the address into an address file. Preferably new controllers could also be implemented that support new generic interfaces. Therefore new controllers can easily be designed to interface with upgraded applications supporting new functions and still be compatible with older applications as long as the new controller includes the older generic interfaces.

Three exemplary generic interfaces that may be implemented by a controller are briefly described below. It should be understood however that these are just a few examples of the many types of generic interfaces that could be used within the system shown in .

In a preferred embodiment however the persisted list should not identify a controller or for each data object. Rather the appropriate controller or is preferably identified as some action is taken with a data model or . When an application needs to access a data model the application preferably 1 queries the data model for the correct controller 2 calls the controller and then 3 passes in the data model as the first parameter. In this manner the controllers and are stateless objects such that only one instance of a controller or is capable of handling all of the data models of a certain type that are executing in the system. For example in one instance of an e mail message controller interfaces with both instances of the e mail message data model and .

For instance with reference to when a mobile device user positions a cursor in the vicinity of the e mail address ulf bigcompany.com the e mail message controller preferably recognizes that the address is a second order object and calls the specialized second order e mail address controller. Through one of the generic interfaces the e mail address controller then preferably presents a list of functions on a display of the device that can be performed on the e mail address . In addition the function list may preferably include operations involving other applications. For example the function Add Ulf to address book may require the e mail address controller to interface with an address book application. This seamless operation is possible because the generic interfaces enable the e mail address controller to interface with any application within the system.

In step the second order controller preferably provides a list of functions that may be performed on the second order object. Once a function associated with a second order object has been selected by the mobile device user step the second order controller preferably establishes whether the function 1 relates to the current application or 2 requires access to another application installed on the mobile device step . For instance if an address is selected as a second order object within an e mail message then the user may be given the option to 1 insert the address into the To line of a new message or 2 insert the address into an address book. If the user chooses to compose a new message using the selected address in the To line then the second order address controller preferably knows that the selected operation relates to the e mail messaging application that is already executing. Then the first and second order controllers may interface with the currently executing application to perform the selected function step . If however the user chooses to insert the object into an address book file then the e mail message controller and second order address controller need access to an address book application before the function can be completed. Therefore when another application installed on the mobile device is required to perform the selected function the new application is preferably launched by either the first or second order controller step . Then because the first and second order applications utilize generic interfaces both can interface with the new application to perform the selected function steps and .

The embodiments described herein are examples of structures systems or methods having elements corresponding to the elements of the invention recited in the claims. This written description may enable those skilled in the art to make and use embodiments having alternative elements that likewise correspond to the elements of the invention recited in the claims. The intended scope of the invention thus includes other structures systems or methods that do not differ from the literal language of the claims and further includes other structures systems or methods with insubstantial differences from the literal language of the claims.

