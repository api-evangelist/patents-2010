---

title: Diagnostic notification via package update manager
abstract: Embodiments relate to systems and methods for diagnostic notification via a package update manager. A physical or virtual client machine can host a set of installed software packages, including operating system, application, and/or other software. A package manager tracks the set of installed packages and updates available for the installed set. A notification tool, in conjunction with the package manager, can monitor the user's selection of package update options, and compare those updates to a diagnostic database and/or current state of the client machine. Based on those determinations, the notification tool can generate notifications to the user advising them of potential conflicts, faults, or other conditions that may arise due to, or may surround, the prospective package update. The notification can permit the user to continue or terminate selected updates, and the notification tool can re-analyze any potential faults after an update is completed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09116802&OS=09116802&RS=09116802
owner: Red Hat, Inc.
number: 09116802
owner_city: Raleigh
owner_country: US
publication_date: 20100226
---
The present teachings relate to systems and methods for diagnostic notification via a package update manager and more particularly to platforms and techniques for conducting general diagnostic inspections of client or target machines configured to receive a package update by inspecting the state of processes storage services and or other resources on the participating machine comparing the resource state of that machine to conditions reflected in a debugging database and generating corresponding notifications about irregular or faulty software or other conditions on the machine before during or after package installation.

Users of physical or virtual machines commonly install software packages including package updates to physical or virtual machines. The software packages can contain a set of related files chosen to perform a given application or task such as for example a group of software applications drivers and or other resources used to install and use messaging applications. In instances a software package can contain application software operating system software drivers patches and or other software components grouped as a logical set.

Software package update managers exist to help a user initiate and perform software package updates such as for example the yum Yellowdog update manager package update manager available from Red Hat Inc. and others. In general available software package managers are configured to interact with the set of installed packages on a client and with one or more software package repositories to directly connect to those databases and download available package updates.

The process of initiating software package updates can involve however the risk or possibility of software related faults instabilities bugs or other undesirable errors or conditions. A number of those potential faults or irregular conditions can have a tendency to occur during the window of time in which package updates are made. For instance a user who repeatedly downloads and installs updates for a variety of unrelated packages may incur the risk of overwriting copies of files with inconsistent or undesired versions of those files. For further instance a user may choose to initiate a package update process without fully verifying or validating the source of the package update files and retrieve and install those files without any virus scans black list check or other security measures. Because existing package update managers are not configured to conduct broader system wide inspections to scan for conditions that could lead to complications the package update process can involve unintended conflicts faults or other problems whose potential could be enhanced during the updating process. It may be desirable to provide systems and methods for diagnostic notification via a package update manager in which diagnostic logic and user notification can be integrated into the package update process to detect and possibly correct potentially problematic updates and or other system conditions.

Embodiments of the present teachings relate to systems and methods for diagnostic notification via a package update manager. More particularly embodiments related to platforms and techniques for monitoring the process of procuring and initiating software package updates and identify potential conflicts bugs faults and or other undesired conditions that may arise during or surrounding the update process. In aspects a package manager can track and manage the installation of one or more software packages and or updates to those packages which may be referred to together as a software package update on a client host target and or other machine. The package manager can host or interact with a notification tool containing logic to trace the identifies of the software package updates and to communicate with a diagnostic database. The diagnostic database can contain information links and other data to flag or identify potential conflicts bugs faults and or other conditions based on the selected updates the state of client resources and or other variables. The notification tool can inspect or record any potential conflicts bugs faults and or other conditions and generate a notification to the user of those potential package installation issues. In aspects a user can then confirm discontinue change or otherwise process their package update activity. These and other embodiments described herein address the various noted shortcomings in known package update technology and provide a user with enhanced package and system management capability for installing their software package resources with less potential for software conflicts errors or other undesirable results of updating activity.

Reference will now be made in detail to exemplary embodiments of the present teachings which are illustrated in the accompanying drawings. Where possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

In aspects set of installed software packages can be or include packages comprising various types of applications such as for example messaging applications spreadsheet or modeling applications social networking applications word processing applications and or other applications or utilities and can in aspects include an operating system drivers and or components thereof. Set of installed packages can have an associated set of package attributes which records file names versions dates software requirements an or other attributes related to the software package updates installed on client and reflected in set of installed software packages .

In aspects package manager can communicate with a network interface configured to connect to one or more network such as the public Internet or other public or private networks. Package manager can thereby connect to one or more package repository hosting software packages including software package updates and or other software or resources.

In aspects package manager can interact with set of installed packages and one or more package repository via set of communication pipes to configure test update and or otherwise manage set of installed packages operating on client . Package manager can for example provide a user with a set of package update options displayed via user interface such as a graphical user interface or others to select various test configuration and or other management activities on set of installed packages . Set of package update options can include options such as one or more selections to perform to select packages for installation and or update installation options and or other options or parameters for the downloading of package updates from one or more package repositories to set of installed packages . In aspects package manager can also communicate with a notification tool hosted on client to monitor package installation activity and generate predictive and or post installation reports and notifications regarding the compatibility fault status or other conditions of package update activities conducted on client . By examining prospective and or installed package updates and associated resources during or before or after the download activity at a time surrounding the update event s a user can be apprised of potential faults or other conditions that might be caused by potential or actual software packages activity. Notification tool can generate and deliver those notification s at a time when the user may have the greatest chance of intervening to review the package download client settings and resource states and other resources to debug and possibly correct the notified conditions. In aspects the notification tool can contain or access diagnostic logic to examine data generated or hosted by various resources including set of installed packages operating system one or more repository and others to generate one or more user notification and other output to support and manage package update and installation activities.

As illustrated for example more particularly in package manager can connect to one or more package repository via one or more network . Package manager can present and manage set of update options to initiate and conduct download activity for instance to initiate the download of one or more package update . In conjunction with those activities notification tool can examine the user s selected packages options and other settings for download and installation and generate a notification to indicate one or more conditions related to the package activity and status of client . Notification tool can maintain and or access a diagnostic database to identify faults errors and or other conditions which will be notified to the user or other party via notification and or other communication.

Notification tool can for instance access an event log maintained or generated by operating system to determine any recent process related or other events or conditions associated with the resources of client that may present an issue for the downloading or installation of one or more package update . For instance event log or other records may indicate that client contains a certain amount of storage or memory resources which resources may or may not permit the proper installation of one or more package update . For instance notification generated by notification tool can indicate or report to the user indications such as the number or type of plug ins installed in client the total number of packages installed in client the amount of up time recorded for client a record of conditions such as force and or no deps located in a a .bash history directory and or the status or condition of other resources on client . For further example notification can contain information regarding the activation and or disablement of various services or utilities on client such as gpg signature checking or other security features as well as the number location type and or other attributes of repositories enabled for update activity on client . Notification can likewise contain warnings or indications regarding the number and or identity of various versions of application or operating system software. Other types of conditions related to the state of client and its resources as well as set of installed packages and other resources can be identified and reported to the user via one or more notification . Due in some regards to the inspection of the resource health of client at or around the time that package update activity takes place the user may have an enhanced ability to avoid faults or other complications related to or caused by attempted package updates installations and or configurations. It may be noted that notification tool can in aspects analyze client and target package files and or other resources before during and or after actual download and or installation of one or more package update . It may also be noted that according to aspects notification tool can identify and generate notifications automatically and or can generate notification repair and or other activity based on user configuration settings such as selections to display or suppress the display of selected notifications and or to automatically perform selected repair actions or other processes as described herein.

According to aspects notification tool and or other logic can examine prospective update activity and generate one or more notification on a predictive basis before the user has downloaded and or installed one or more package update . In a pre download or pre installation stage notification tool and or other logic can for instance analyze resource constraints on client prior to downloading and or updating any package update s and or associated files such as memory storage security and or other constraints that may determine what package s client can or can not accept. For instance one or more package update that requires more storage than client has available can be notified via notification . When generating predictive notifications notification tool can likewise access other data resources such as diagnostic database which may contain for instance reports or lists of software package update versions which are known to be incompatible with other software such as applications or operating systems and or versions thereof. It may be noted that in aspects diagnostic database can likewise contain executable code and or other resources for performing diagnostic tests in addition to or instead of bug lists or other data. Other data can be examined by notification tool to generate one or more notification on a pre download and or pre installation basis. Conversely notification tool can also or instead generate one or more notification after installation of one or more package update to set of installed packages of client . According to aspects in addition to or instead of the types of data analyzed on a predictive basis in this case notification tool can examine data such as lists or records of executing processes on client via operating system and or other resources to determine for instance whether an installed package and or one or more of its executable files has caused or experienced a fault state such as a conflict hang and or other condition. In aspects notification tool can probe and identify conflicts with other software and or hardware executing or running on client to determine fault conditions that may arise after an installed package and or update begins to run. The status or condition of other hardware software services and or other resources can be examined during either a pre download pre installation and or post installation stage of package update activities.

In aspects instead and or in addition to performing an analysis and identification of potential faults or other conditions in the hardware software services and or other state of the resources of client notification tool package manager and or other logic can generate one or more software repair actions in response to the detected state of client and its set of installed packages and or other resources. In aspects notification tool can for instance detect and identify one or more corrupted damaged and or missing files in connection with one or more package update and or other files. In instances where a damaged or missing file or files is discovered notification tool can initiate a downloading and re installation of that missing file or files. Replacement files can for instance be accessed and or downloaded from one or more repository and or from other data stores locations or sites. In aspects notification tool and or other logic can detect or identify other conditions requiring or permitting software re installation or other repair. For example notification tool can determine that an identified file is located on client but is stored in an incorrect location on that machine such as for example in an incorrect directory or library. In cases of incorrect file locations or storage notification tool and or other logic can transfer and or copy the incorrectly stored file to a correct location. Notification tool and or other logic can for instance interact with operating system to effect a copy or move command to place the subject file in a different directory library and or other location or destination.

Notification tool and or other logic can perform other software repair activities in connection with actual or prospective package download activity. For example notification tool and or other logic can perform version control to ensure that the versions of any of one or more package update set of installed packages operating system and or other applications drivers utilities and or other software conforms to versions necessary or compatible with proper operation of client . In aspects notification tool and or other logic can perform version management by accessing remote stored databases and or other sites which record compatibility lists or records for operating system application and or other software. In connection with any software repair activity notification tool and or other logic can also inspect local resources of client such as operating system including its registry or other components. In aspects notification tool and or other logic can perform one software repair or correction or can perform a series or sequences of repair actions or corrections. In embodiments where multiple corrections are performed notification tool and or other logic can re test client set of installed packages and or resources of client to determine the set of changes caused by the repair action and possibly modify any additional repair actions that may be required.

In package manager can identify a set of installed software packages hosted in client for instance by calling an application programming interface API of operating system of client to enumerate installed packages and related resources such as files directories and or other resources. Package manager can in addition or instead identify available package updates via communication with one or more repository hosting one or more sets of software package updates for application operating system and or other software. In a user can select one or more package update options via package manager and or other resources such as to select for instance the name or version of a software package to download and install on client the time of that installation any security features to be used for that update activity and or other configuration options.

In notification tool package manager and or other logic can check for potential faults conflicts bugs and or other conditions that may occur or develop upon downloading software package s based on the selected download options the current state of the resources of client and or other factors. For instance notification tool package manager and or other logic package can determine that the existence or location of a file library or directory reflected in the pending but not yet performed package update does not match download option information directories currently maintained by client and or other data or specifications. In aspects notification tool can generate a notification to the user of any potential conflicts faults and or other conditions or information as appropriate. For instance notification tool can can generate a list of potentially fault inducing files or packages and present the user with a checklist of files or packages to include or exclude from the updating event. Other notifications are possible.

In package manager can perform any selected package package updates selected by the user after receiving any notifications as appropriate. In notification tool package manager and or other logic can check for potential faults conflicts bugs and or other conditions based on the updated package installation updated state of resources on client and or other factors or data. In notification tool and or other logic can initiate and or perform software repair activity such as replacing updating and or moving missing damaged and or outdated files including files in set of installed packages or otherwise. In the user can use package manager notification tool and or other logic to debug configure further update and or otherwise manipulate or manage the set of installed packages as appropriate. In processing can return to a prior processing point jump to a further processing point or end.

The foregoing description is illustrative and variations in configuration and implementation may occur to persons skilled in the art. For example while embodiments have been described in which a unitary package manager is configured to control package update activity in embodiments multiple applications or software can interact to control the downloading installation testing and other management of software packages. For further example while embodiments have been described in which package update activity is conducted on one client in embodiments multiple local or remote targets clients and or other machines can register to package manager and or other logic or resources to receive or perform package update activity. Similarly while embodiments have been described in which one diagnostic database is accessed by notification tool package manager and or other logic to identify potential faults or issues in embodiments multiple diagnostic or debugging databases can be used. Other resources described as singular or integrated can in embodiments be plural or distributed and resources described as multiple or distributed can in embodiments be combined. The scope of the present teachings is accordingly intended to be limited only by the following claims.

