---

title: System, method and computer program product for a collaborative decision platform
abstract: A decision making system, method and computer program product are provided. Initially, a plurality of attributes is defined. Thereafter, first information regarding the attributes is received from a receiving business. Second information is then received regarding proposed products or services in terms of the attributes. Such second information is received from a supplying business. In use, a decision process is executed based on the first information and the second information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08160988&OS=08160988&RS=08160988
owner: Aloft Media, LLC
number: 08160988
owner_city: Longview
owner_country: US
publication_date: 20100727
---
This is a continuation of co pending prior application Ser. No. 12 615 250 filed on Nov. 9 2009 which is a continuation of application Ser. No. 11 828 129 filed on Jul. 25 2007 which is a continuation of application Ser. No. 11 045 543 filed on Jan. 28 2005 which has issued under U.S. Pat. No. 7 401 059 which is a continuation of application Ser. No. 09 708 154 filed on Nov. 7 2000 which has issued under U.S. Pat. No. 6 876 991 and which claims the priority of a previously filed provisional application with the title Collaborative Decision Platform filed Nov. 8 1999 under Ser. No. 60 163 984 which are each incorporated herein by reference in their entirety.

The present invention relates to decision making logic and more particularly to a computer based platform which supports a decision making process.

One of the first recorded decision making processes was proposed in the 18century when Benjamin Franklin suggested a process by which one of two decision alternatives could be selected through listing advantages of the alternatives side by side and canceling out advantages or groups of advantages judged to be equal on both sides. Subsequently many decision processes have been proposed and are in use today. These include popular ones such as Kepner Tregoe where criteria for making the decision are listed and the alternatives are assessed on a scale from 1 to 10 as to how they perform on each of the criteria. The criteria are also weighted on a similar scale and the best alternative is judged to be the highest dot product of the criteria weights and the respective assessments for the alternative against the criteria. Various modifications to this basic process in order to take into account complexities of having multiple decision makers refining the assessment process through pair wise comparison etc. have resulted in many other such decision processes such as Value Management Analytic Hierarchy Process and others. There are also several methodologies such as decision analyses using decision trees and probability methods aimed at assisting a decision maker think through the options one has in making a decision and potential outcomes of each option. However ninny of these decision processes are in fact not processes but only individual tools to compare pre defined alternatives within a pre specified problem frame.

In order to create a process which enables multiple decision makers to make strategic decisions in organizationally and technically complex circumstances the Dialogue Decision Process DDP was proposed as a sequence of four steps framing alternatives analysis connection and is well described in literature Barabba V. P. Harvard Business Press and other sources .

However to date a short coming of the process above as well as other processes is that there has been no way to ensure that it can be applied to any decision regardless of type complexity or number of decision makers. Furthermore there has been no software that supports the complete sequence of these steps since each decision tends to be unique. This has resulted in each instantiation of decision processes being tailored to a particular decision. In the case of DDP this has resulted in the process being a relatively sophisticated tool only used in certain circumstances and only when facilitated by experienced practitioners.

There is therefore a need for a computer implemented method which may be utilized for implementing DDP in different environments in a universal manner.

A decision making system method and computer program product are provided. Initially a plurality of attributes is defined. Thereafter first information regarding the attributes is received from a receiving business. Second information is then received regarding proposed products or services in terms of the attributes. Such second information is received from a supplying business. In use a decision process is executed based on the first information and the second information.

Information is then retrieved from a database in accordance with the decision logic as indicated in operation . Information is then delivered to and received from a user in accordance with the decision logic utilizing a user interface. Note operation . The information is then processed in operation utilizing the decision logic.

In use the foregoing steps are carried out by a collaborative decision platform capable of retrieving and receiving the information and processing such information for different purposes by executing different applications each capable of performing different decision logic. Note operation . It should be noted that the various steps set forth hereinabove may be carried out using universal modules capable of interfacing with different applications.

As set forth earlier the various steps of may be carried out using universal modules capable of interfacing with different applications. Such different applications may be capable of performing decision logic relating to any type of decision making process e.g. financial medical buying a house selecting a corporate strategy etc. . In use the collaborative decision platform enables decision making processes through the sequence and connectivity of a set of common displays which describes the decision to be made. The collaborative decision platform further enables asynchronous remote decision making processes i.e. the ability to have different people input data into the set of common displays at different times and from different places. Further the database may take the form of any one or a plurality of databases which may or may not be interconnected via a network such as the Internet. To this end the present embodiment is designed to foster clear and conscientious decision making.

The workstation shown in includes a Random Access Memory RAM Read Only Memory ROM an I O adapter for connecting peripheral devices such as disk storage units to the bus a user interface adapter for connecting a keyboard a mouse a speaker a microphone and or other user interface devices such as a touch screen not shown to the bus communication adapter for connecting the workstation to a communication network e.g. a data processing network and a display adapter for connecting the bus to a display device .

The workstation typically has resident thereon an operating system such as the Microsoft Windows NT or Windows 95 Operating System OS the IBM OS 2 operating system the MAC OS or UNIX operating system. Those skilled in the art will appreciate that the present invention may also be implemented on platforms and operating systems other than those mentioned.

A preferred embodiment is written using JAVA C and the C language and utilizes object oriented programming methodology. Object oriented programming OOP has become increasingly used to develop complex applications. As OOP moves toward the mainstream of software design and development various software solutions require adaptation to make use of the benefits of OOP. A need exists for these principles of OOP to be applied to a messaging interface of an electronic messaging system such that a set of OOP classes and objects for the messaging interface can be provided.

OOP is a process of developing computer software using objects including the steps of analyzing the problem designing the system and constructing the program. An object is a software package that contains both data and a collection of related structures and procedures. Since it contains both data and a collection of structures and procedures it can be visualized as a self sufficient component that does not require other additional structures procedures or data to perform its specific task. OOP therefore views a computer program as a collection of largely autonomous components called objects each of which is responsible for a specific task. This concept of packaging data structures and procedures together in one component or module is called encapsulation.

In general OOP components are reusable software modules which present an interface that conforms to an object model and which are accessed at run time through a component integration architecture. A component integration architecture is a set of architecture mechanisms which allow software modules in different process spaces to utilize each other s capabilities or functions. This is generally done by assuming a common component object model on which to build the architecture. It is worthwhile to differentiate between an object and a class of objects at this point. An object is a single instance of the class of objects which is often just called a class. A class of objects can be viewed as a blueprint from which many objects can be formed.

OOP allows the programmer to create an object that is a part of another object. For example the object representing a piston engine is said to have a composition relationship with the object representing a piston. In reality a piston engine comprises a piston valves and many other components the fact that a piston is an element of a piston engine can be logically and semantically represented in OOP by two objects.

OOP also allows creation of an object that depends from another object. If there are two objects one representing a piston engine and the other representing a piston engine wherein the piston is made of ceramic then the relationship between the two objects is not that of composition. A ceramic piston engine does not make up a piston engine. Rather it is merely one kind of piston engine that has one more limitation than the piston engine its piston is made of ceramic. In this case the object representing the ceramic piston engine is called a derived object and it inherits all of the aspects of the object representing the piston engine and adds further limitation or detail to it. The object representing the ceramic piston engine depends from the object representing the piston engine. The relationship between these objects is called inheritance.

When the object or class representing the ceramic piston engine inherits all of the aspects of the objects representing the piston engine it inherits the thermal characteristics of a standard piston defined in the piston engine class. However the ceramic piston engine object overrides these ceramic specific thermal characteristics which are typically different from those associated with a metal piston. It skips over the original and uses new functions related to ceramic pistons. Different kinds of piston engines have different characteristics but may have the same underlying functions associated with it e.g. how many pistons in the engine ignition sequences lubrication etc . To access each of these functions in any piston engine object a programmer would call the same functions with the same names but each type of piston engine may have different overriding implementations of functions behind the same name. This ability to hide different implementations of a function behind the same name is called polymorphism and it greatly simplifies communication among objects.

With the concepts of composition relationship encapsulation inheritance and polymorphism an object can represent just about anything in the real world. In fact one s logical perception of the reality is the only limit on determining the kinds of things that can become objects in object oriented software. Sonic typical categories are as follows 

With this enormous capability of an object to represent just about any logically separable matters. OOP allows the software developer to design and implement a computer program that is a model of some aspects of reality whether that reality is a physical emit a process a system or a composition of matter. Since the object can represent anything the software developer can create an object which can be used as a component in a larger software project in the future.

If 90 of a new OOP software program consists of proven existing components made from preexisting reusable objects then only the remaining 10 of the new software project has to be written and tested from scratch. Since 90 already came from an inventory of extensively tested reusable objects the potential domain from which an error could originate is 10 of the program. As a result OOP enables software developers to build objects out of other previously built objects.

This process closely resembles complex machinery being built out of assemblies and sub assemblies. OOP technology therefore makes software engineering more like hardware engineering in that software is built from existing components which are available to the developer as objects. All this adds up to an improved quality of the software as well as an increased speed of its development.

Programming languages are beginning to fully support the OOP principles such as encapsulation inheritance polymorphism and composition relationship. With the advent of the C language many commercial software developers have embraced OOP. C is an OOP language that offers a fast machine executable code. Furthermore. C is suitable for both commercial application and systems programming projects. For now C appears to be the most popular choice among many OOP programmers but there is a host of other OOP languages such as Smalltalk Common Lisp Object System CLOS and Eiffel. Additionally OOP capabilities are being added to more traditional popular computer programming languages such as Pascal.

Class libraries are very flexible. As programs grow more complex more programmers are forced to reinvent basic solutions to basic problems over and over again. A relatively new extension of the class library concept is to have a framework of class libraries. This framework is more complex and consists of significant collections of collaborating classes that capture both the small scale patterns and major mechanisms that implement the common requirements and design in a specific application domain. They were first developed to free application programmers from the chores involved in displaying menus windows dialog boxes and other standard user interface elements for personal computers.

Frameworks also represent a change in the way programmers think about the interaction between the code they write and code written by others. In the early days of procedural programming the programmer called libraries provided by the operating system to perform certain tasks but basically the program executed down the page from start to finish and the programmer was solely responsible for the flow of control. This was appropriate for printing out paychecks calculating a mathematical table or solving other problems with a program that executed in just ORB way.

The development of graphical user interfaces began to turn this procedural programming arrangement inside out. These interfaces allow the user rather than program logic to drive the program and decide when certain actions should be performed. Today most personal computer software accomplishes this by means of an event loop which monitors the mouse keyboard and other sources of external events and calls the appropriate parts of the programmer s code according to actions that the user performs. The programmer no longer determines the order in which events occur. Instead a program is divided into separate pieces that are called at unpredictable times and in an unpredictable order. By relinquishing control in this way to users the developer creates a program that is much easier to use. Nevertheless individual pieces of the program written by the developer still call libraries provided by the operating system to accomplish certain tasks and the programmer must still determine the flow of control within each piece after it s called by the event loop. Application code still sits on top of the system.

Even event loop programs require programmers to write a lot of code that should not need to be written separately for every application. The concept of an application framework carries the event loop concept further. Instead of dealing with all the nuts and bolts of constructing basic menus windows and dialog boxes and then making these things all work together programmers using application frameworks start with working application code and basic user interface elements in place. Subsequently they build from there by replacing some of the generic capabilities of the framework with the specific capabilities of the intended application.

Application frameworks reduce the total amount of code that a programmer has to write from scratch. However because the framework is really a generic application that displays windows supports copy and paste and so on the programmer can also relinquish control to a greater degree than event loop programs permit. The framework code takes care of almost all event handling and flow of control and the programmer s code is called only when the framework needs it e.g. to create or manipulate a proprietary data structure .

A programmer writing a framework program not only relinquishes control to the user as is also true for event loop programs but also relinquishes the detailed flow of control within the program to the framework. This approach allows the creation of more complex systems that work together in interesting ways as opposed to isolated programs having custom code being created over and over again for similar problems.

Thus as is explained above a framework basically is a collection of cooperating classes that make up a reusable design solution for a given problem domain. It typically includes objects that provide default behavior e.g. for menus and windows and programmers use it by inheriting some of that default behavior and overriding other behavior so that the framework calls application code at the appropriate times.

Thus through the development of frameworks for solutions to various problems and programming tasks significant reductions in the design and development effort for software can be achieved. A preferred embodiment of the invention utilizes HyperText Markup Language HTML to implement documents on the Internet together with a general purpose secure communication protocol for a transport medium between the client and the Newco. HTTP or other protocols could be readily substituted for HTML without undue experimentation. Information on these products is available in T. Berners Lee D. Connoly RFC 1866 Hypertext Markup Language 2.0 November 1995 and R. Fielding. H. Frystyk T. Berners Lee J. Gettys and J. C. Mogul Hypertext Transfer Protocol HTTP 1.1 HTTP Working Group Internet Draft May 2 1996 . HTML is a simple data format used to create hypertext documents that are portable from one platform to another. HTML documents are SGML documents with generic semantics that are appropriate for representing information from a wide range of domains. HTML has been in use by the World Wide Web global information initiative since 1990. HTML is an application of ISO Standard 8879 1986 Information Processing Text and Office Systems Standard Generalized Markup Language SGML .

To date Web development tools have been limited in their ability to create dynamic Web applications which span from client to server and intemperate with existing computing resources. Until recently HTML has been the dominant technology used in development of Web based solutions. However HTML has proven to be inadequate in the following areas 

Suns Java language has emerged as an industry recognized language for programming the Internet. Sun defines Java as a simple object oriented distributed interpreted robust secure architecture neutral portable high performance multithreaded dynamic buzzword compliant general purpose programming language. Java supports programming for the Internet in the form of platform independent Java applets. Java applets are small specialized applications that comply with Sun s Java Application Programming Interface API allowing developers to add interactive content to Web documents e.g. simple animations page adornments basic games etc. . Applets execute within a Java compatible browser e.g. Netscape Navigator by copying code from the server to client. From a language standpoint Java s core feature set is based on C . Sun s Java literature states that Java is basically. C with extensions from Objective C for more dynamic method resolution. 

Another technology that provides similar function to JAVA is provided by Microsoft and ActiveX Technologies to give developers and Web designers wherewithal to build dynamic content for the Internet and personal computers. ActiveX includes tools for developing animation 3 D virtual reality video and other multimedia content. The tools use Internet standards work on multiple platforms and are being supported by over 100 companies. The group s building blocks are called ActiveX Controls small fast components that enable developers to embed parts of software in hypertext markup language HTML pages. ActiveX Controls work with a variety of programming languages including Microsoft Visual C Borland Delphi Microsoft Visual Basic programming system and in the future Microsoft s development tool for Java code named Jakarta. ActiveX Technologies also includes ActiveX Server Framework allowing developers to create server applications. One of ordinary skill in the art readily recognizes that ActiveX could be substituted for JAVA without undue experimentation to practice the invention.

It should be noted that in one embodiment the information database and the common displays may all be treated as objects by the platform. As such the foregoing technology may be utilized in the implementation of the overall system as embodied in

The platform of the present embodiment acts as a decision engine which drives the decision process through a sequence of logical steps to a conclusion. The users interface during these steps is the set of common displays exhibited by the platform. The users receive and provide specific decision information to the platform by entering or modifying the structure of the decision and the decision relevant information in the display areas where appropriate. In order to start the process the platform hosts a decision application which provides the structure for the type of decision that the user wants to make. The application and platform communicate through a standard interlace protocol. The platform guides the user through four steps framing alternatives analysis and connection but these are tailored to the decision at hand through the decision application.

The Framing process using this key input from the decision application in the specific format generates visual displays of a decision hierarchy and an influence diagram to be confirmed or modified by the users. The users information is seen as an input to the framing process because the users interact with the platform to produce a resultant decision hierarchy and the influence diagram that capture their collective view of the decision problem.

Note the two headed arrow representing the users interface with the collaborative decision platform to indicate the interaction while the single arrow head of the interface indicates input. In the event that the users are unable to successfully represent the decision problem as they see it with the initial decision application they will select another application and repeat the Framing process .

Working in parallel with the first Framing module is a second Framing module . Such second Framing module receives as input pertinent uncertainties or risks uncontrollables information sources and values that further describe the capabilities of the decision application . The second Framing module also receives as input the decisions identified by the first Framing module and users confirmation or modification of the values information sources and uncertainties. With such the second Framing module structures a relationship of decisions values and uncertainties in form of the influence diagram and a corresponding directory to sources of information .

A second Alternatives module combines the strategy table output of the first Alternatives module with strategy descriptions from the decision application . The strategy descriptions include a strategy name and the selection of one alternative for each of the decisions that comprise the column headings in the strategy table . The second Alternatives module can then display the strategies on a strategy table and incorporate the users confirmation or modifications . For example the users may want to define their own strategy which they would do by providing the second Alternatives module with a strategy name and the selection of and alternative in each column of the strategy table .

Using the information generated previously and the model structure of the decision application the platform makes the necessary calculations to output tornado diagrams and decision sensitivity output displays for each of the alternative strategies . The users confirm or modify the input information and structure from the decision application . The tornado diagrams identify the sources of significant risk in each alternative strategy and the decision sensitivity identifies the sources of significant value in each alternative strategy.

The output of the first Analysis module is further used by a second Analysis module . The second Analysis module takes as input the structural relationship of decisions values and uncertainties from the decision application . An example of such a structural relationship is a spreadsheet comprised of equations relating decisions values and uncertainties. This output is in turn used to generate the tornado diagram by varying each of the uncertainties over its range and recording the effect on value.

In parallel with the first and second Analysis modules is a third Analysis module that takes as input the strategies defined on the strategy table the output of the first Analysis module and the structural relationship of decisions values and uncertainties from the decision application . With such input the third Analysis module identifies a contribution to the total value of each alternative for each decision that comprises each strategy. Given this information a decision sensitivity table may be constructed.

In the Framing process the collaborative decision platform uses input from the decision application to present the users with an initial decision hierarchy which the users confirm or modify. The collaborative decision platform produces the resulting decision hierarchy shown in as an output which identifies the decisions that are within the scope of the current decision making process.

The collaborative decision platform also uses input from the decision application to present the users with an initial influence diagram which the users confirm or modify. The influence diagram identifies the critical uncertainties or risks the decisions and the values that are important to the users and it displays the relationships among them. The users confirm or modify the influence diagram. The collaborative decision platform produces the resulting influence diagram shown in as another output. Note that a directory of information sources is included with the influence diagram.

The users are allowed to modify the influence diagram and the decision hierarchy only to the extent that the modifications were anticipated by the author of the application. This restriction assures that the alternative strategies that are defined in the Alternatives process can be analyzed with the spreadsheet provided by the decision application.

In the Alternatives process the collaborative decision platform uses input from the decision application to present the users with an initial strategy table that is consistent with the decision hierarchy which the users confirm or modify. One or more strategy names and their corresponding definitions on the strategy table are also presented to the users. The users may confirm or modify the strategies including developing new strategies. The resulting strategy alternatives are displayed on strategy tables as shown in and

In the Analysis process ranges on each uncertainty or risk as shown in are input from the specified decision relevant databases of . The users may confirm or modify the ranges. The collaborative decision platform takes as input the spreadsheet residing in the decision application that includes equations and data relating the decisions and uncertainties to the value which in this case is profit. The collaborative decision platform uses the spreadsheet strategies and uncertainty ranges to produce the tornado diagram and decision sensitivity shown in and

In the connection process the users define on the strategy table a new more valuable hybrid strategy that combines the most valuable alternatives from each of the initially defined alternative strategies as shown in . In defining this hybrid strategy the users are relying heavily on the shared insight and understanding from the tornado diagram and decision sensitivity. The collaborative decision platform uses the spreadsheet from the decision application to calculate the value or the hybrid as shown on

Initially in operation a minimum set of attributes is defined. Thereafter first information regarding each of the minimum set of attributes is received from a receiving business. Note operation . Second information is then received regarding proposed products or services in terms of the minimum set of attributes as indicated in operation . Such second information is received from a supplying business.

In use a decision process is executed based on the first information and the second information as to which products or services is suitable for the receiving business. Note operation . The present embodiment thus provides a customer centric collaborative protocol that defines the minimum informational requirement for collaborative decision making between enterprises B2B .

The customer centric collaborative protocol exploits a commonality in the attributes of the value structure of many enterprises that is sufficient to assess the implications of many decisions. An illustrative minimum set of attributes could include price sales variable cost fixed cost and investment. For many strategic decisions knowing the affect of the decision on these attributes enables the enterprise to make an informed decision.

There are well defined algorithms for the hierarchical expansion of each of the attributes in the minimum set in the event additional detail is required. When more detail is required it may be nested within the higher level attributes. An expanded set of attributes could include price market share market size labor cost material cost administrative cost annual expenses working capital plant and equipment etc. The protocol or structure of the informational requirement is identical for a wide range of enterprises and many decisions within those enterprises but the relative value of each attribute will be different. illustrates a table showing various customer centric collaborative C attributes and the value of a one percent increases of such attributes in two different industries.

In accordance with the present invention the supplying enterprise is required to describe its alternatives in terms of their effect on the value attributes that matter to the receiving enterprise. illustrates a table showing such an effect on the value attributes.

As shown in the alternative attribute bundles can be offered by different enterprises and need not be commodities but rather may differ on the level offered of every attribute. It should be understood that commodities are goods and services that can be defined without the information about or the interaction of the customer. As shown in the customer centric collaborative protocol and an architecture or process that supports collaborative decision making such as the collaborative decision platform together enable an industry independent open and scalable platform for the real time B2B exchange of existing goods and services that are not commodities.

As shown in the customer centric collaborative protocol and publicly available information may together enable a new business design that assists B2B enterprises in measuring the prospective value creation for its customers. With reference to a particular embodiment of that business design could include the customer centric collaborative protocol publicly available information and a collaborative decision platform which together enable a new business design that assists B2B enterprises in measuring the retrospective value creation for its customers.

An exemplary application of a customer centric collaborative protocol utilizing the collaborative decision platform for the selection of a strategy for Customer Relationship Management CRM will now be set forth. In particular the present B2B example relates to a receiving enterprise desirous of an improved CRM strategy and a supplying enterprise capable of delivering alternative CRM strategies.

In this case during the Framing process the receiving enterprise provides the policies which constrain the strategic alternatives. The supplying enterprise demonstrates its experience by offering a list of strategic decisions. The receiving enterprise believes that two of the decisions are tactical i.e. can be made later. illustrates the resulting decision hierarchy developed collaboratively and asynchronously. shows the influence diagram which identifies the critical uncertainties the strategic decisions and the attributes that are of value to the receiving enterprise and which display the relationship among them. For two of the attributes more detail is required and the higher level attributes are expanded hierarchically in those areas and as shown in respectively.

During the Alternatives process three alternative strategies and are defined collaboratively on a strategy table in terms of the strategic decisions as shown in and respectively. The strategy table developed remotely and asynchronously. The strategies are developed in the physical presence of both enterprises.

in the Analysis process the supplying enterprise uses information from its database to assess the range of effect that the Revenue Growth strategy will have on each of the attributes . Note in . Similar assessments are made for each of the other strategies. The receiving enterprise may establish its value for changes in each of the attributes as shown in the table of .

The table in shows the calculations performed inside the collaborative decision platform when the customer centric collaborative protocol is used. As shown the value of an alternative to the client can be estimated by multiplying the improvement in each attribute by the customer s value for changes in that attribute.

The remarkable simplicity of these calculations enables shared insight into the sources of risk and sources of value which is displayed in the tornado diagram and decision sensitivity for each of the alternative strategies as shown in respectively. It should be noted that different solutions might be appropriate for clients in different industries because of different client values for the Cattributes.

Using the shared understanding of the sources of risk and value in the initially defined alternative strategies the supplying and receiving enterprise collaborate in developing a new more valuable hybrid strategy as shown in . Its corresponding decision sensitivity of compares the total value of the hybrid strategy with the initially defined alternatives and identifies its sources of value.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of to preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

