---

title: Assigning a network address for a virtual device to virtually extend the functionality of a network device
abstract: Virtually extending the functionality of a network device to a server is provided. A virtual device which virtually represents functionality of the network device is created. An association is stored between the network device and a user or a group for the network device. A determination is made as to whether the network device and the user or the group for the network device correspond to a local network or to a disparate network, based on the stored association. A network address for the virtual device is assigned based on the determination. Functionality of the network device is accessed via the virtual device, using the assigned network address for the virtual device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08667574&OS=08667574&RS=08667574
owner: Canon Kabushiki Kaisha
number: 08667574
owner_city: Tokyo
owner_country: JP
publication_date: 20100510
---
The invention relates to the field of network device functionality and more particularly relates to virtually extending the functionality of a network device to a server by assigning a network address to a virtual device.

Cloud computing is a technology that uses the internet and central remote servers to maintain data and applications. Cloud computing typically allows consumers and businesses to use applications without installation and to access data at a given computer with internet access. This technology typically allows for more efficient computing by centralizing storage memory processing and bandwidth.

The advent of cloud computing has encouraged IT infrastructure to be pushed to servers in data centers managed by external entities. Thus besides the outsourcing of physical servers the applications that typically ran within a company s walls have been pushed out to the cloud. However these applications may need access to network device functionality at the enterprise level. Such access can be affected by firewalls and by communication delay between the application and a network device.

When an application is hosted in the cloud an enterprise firewall may separate a network device from a server in the cloud. In such instances the network device can typically cross the enterprise firewall to access the server. However the server typically cannot penetrate the firewall to access functionality of the network device.

While it is possible to configure the firewall to have traffic to a specific port be forwarded to a specific device or to use IPv6 to address a specific device each of these approaches requires that the firewall be configured to enable the incoming traffic. Further while a protocol such as UPnP can be used to automatically reconfigure the firewall not all routers support UPnP and the firewall must be compromised for this approach to work.

In addition to firewall barriers the flow of data between a network device and an application can be a time consuming piece of the application s flow. Reducing the amount of data transferred between the network device and the application may provide for more efficient application flow.

Additionally problems can be encountered when attempting to bridge network devices communicating over otherwise disconnected networks. For example an environment can be considered which includes a smart phone that communicates with the Internet through the 3G network and a projector that communicates with the Internet through a Wi Fi network. Both devices may be able to access the same resources on the Internet but the devices are not typically able to access each other s resources directly outside of file transfer via Bluetooth or Infrared.

Thus for an application in a cloud there is a desire to provide improved access to functionality of a network device. In addition there is a desire to provide improved bridging of network devices.

Disclosed embodiments describe devices and methods for virtually extending the functionality of a network device to a server. A virtual device is created which virtually represents functionality of the network device. An association is stored between the network device and a user or a group for the network device. A determination is made whether the network device and the user or the group for the network device correspond to a local network or to a disparate network based on the stored association. A network address is assigned for the virtual device based on the determination. Functionality of the network device is accessed via the virtual device using the assigned network address for the virtual device.

Thus in an example embodiment described herein a method for virtually extending the functionality of a network device to a server is provided. The method includes the steps of creating a virtual device which virtually represents functionality of the network device storing an association between the network device and a user or a group for the network device and determining whether the network device and the user or the group for the network device correspond to a local network or to a disparate network based on the stored association. The method further includes the steps of assigning a network address for the virtual device based on the determination and accessing functionality of the network device via the virtual device using the assigned network address for the virtual device.

In a further example embodiment a virtual device for virtually extending the functionality of a network device to a server is provided. The virtual device includes a computer readable memory constructed to store computer executable process steps and a processor constructed to execute the computer executable process steps stored in the memory. The process steps include storing an association between the network device and a user or a group for the network device and determining whether the network device and the user or the group for the network device correspond to a local network or to a disparate network based on the stored association. The process steps further include assigning a network address based on the determination and accessing functionality of the network device using the assigned network address.

In yet a further example embodiment a computer readable memory medium on which is stored computer executable process steps for virtually extending the functionality of a network device to a server is provided. The process steps include creating a virtual device which virtually represents functionality of the network device storing an association between the network device and a user or a group for the network device and determining whether the network device and the user or the group for the network device correspond to a local network or to a disparate network based on the stored association. The process steps further include assigning a network address for the virtual device based on the determination and accessing functionality of the network device via the virtual device using the assigned network address for the virtual device.

The server and the network device can be separated by a firewall. The network device can be remote to the server and an application on the server can access functionality of the network device via the virtual device in a transparent manner such that the application does not recognize that the network device is remote.

Network interfaces for the network device can be replicated on the virtual device. The replicated network interfaces on the virtual device can correspond to a virtual network device driver which is directly or indirectly connected to the network device using a tunneling mechanism. The virtual network device driver can have an IP address accessible to applications residing on the server. The assigning step can assign the network address for the virtual device by assigning the IP address for the virtual network device driver.

The IP address for the virtual network device driver can be assigned the IP address for the network device in a case where the determining step determines that the network device and the user or the group for the network device correspond to a local network. The IP address for the virtual network device driver can be assigned an arbitrary local subnet address in a case where the determining step determines that the network device and the user or the group for the network device correspond to a disparate network.

A virtual environment can be created which virtually extends the functionality of plural network devices to a server. In this regard for each of the plural network devices the functionality of the network device can be virtually extended to the server with a respective virtual device.

This brief summary has been provided so that the nature of this disclosure may be understood quickly. A more complete understanding can be obtained by reference to the following detailed description and to the attached drawings.

However the server typically cannot penetrate the firewall to access device functionality. One solution can be to configure the firewall router to have traffic to a specific port be forwarded to a specific device. Alternatively Internet Protocol version 6 IPv6 can be used to address a specific device. However with these approaches the firewall must typically be configured to enable this incoming traffic. In addition while a protocol such as Universal Plug and Play UPnP can be used to automatically reconfigure the firewall not all routers support UPnP. Further the firewall must typically be compromised for this approach to work.

As such applications in a cloud may need access to network devices at the enterprise level but these network devices may exist on networks protected by firewalls which typically prevent the applications from directly contacting the network devices. In this regard the network devices may need to initiate the establishment of the communication path.

As can be seen in network environment can correspond to an internet cloud computing environment where server can be included in cloud . Server can access network devices such as network camera network cellular phone and network printer . Server may have direct access to network devices to . Alternatively there may be firewalls and which can impede direct connection between server and network devices and respectively. In this case server must typically traverse the appropriate firewall to access functionality of the respective network device.

Cloud can further include virtual devices such as virtual camera virtual cellular phone and virtual printer . Virtual devices to can be accessible by server . In addition each of virtual devices to can correspond to a respective one of network devices and and access the respective functionality for that network device. For example virtual camera can access the functionality of network camera virtual cellular phone can access the functionality of network cellular phone and virtual printer can access the functionality of network printer . Virtual devices to can reside on server .

Cloud can further include an application which may require access to the functionality of one or more of network devices to . A user can access application via a user device which can be outside or inside cloud . In turn application can access the required functionality for network devices to via respective virtual devices to . User device can correspond to a personal computer web browser cellular phone or another type of device requiring access to network device functionality.

The flow of data between network devices to and application in cloud can be a time consuming piece of the application s flow. In this regard some data is typically available on a network device before application requests it for example the device name device model and current status. The flow of data to application can be improved by uploading pertinent device data to virtual devices to ahead of any application request. Virtual devices to can monitor network packets sent to network devices to and can intercept those requests which they are capable of handling.

Each of virtual devices to can be viewed as an application running on server networked between an actual network device to and an application that needs to communicate with network device to . Virtual device to can act as a middle man between application and network device to to aid in the flow of data. Each of virtual devices to can also be used for other purposes related to network device interaction.

Virtual devices to can be used to improve the security and performance of network environment . Implementing virtual devices to can allow for control over the packets application is trying to send to respective network devices to . For example virtual device to may find a request to retrieve a file from network device to that it had previously stored locally on server . Virtual device to can return the file to application without involving the network device itself.

Thus network environment can be used to more securely tunnel network traffic between server on the internet and network devices to which can be located behind respective firewalls to . This network traffic can correspond for example to requests from application for network device functionality.

As noted above illustrates an example high level design of how a virtual device model may be implemented in a SSH TUN Secure Shell TUNnel network system. In a SSH TUN network system actual device status can be retrieved using SNMP a non encrypted protocol. If SNMP is used remotely through the Internet it may be possible for another user on the connection to access device information. Thus to more securely obtain device status an SSH tunnel can be established to route all SNMP traffic to the remote networked device through an encrypted channel. Even though the SNMP protocol itself typically contains no encryption the encrypted SSH channel through which it travels can offer security.

However it should be noted that other networking techniques besides SSH TUN can be used to allow cloud applications direct access to network devices. One example is a reverse port forwarding technique which can use SSH and a proprietary HTTP based protocol. Another example is to setup a Virtual Private Network VPN between a server in the cloud and the device or a server in the enterprise as will be described in greater detail later.

ROM can store invariant instruction sequences such as start up instruction sequences for CPU or basic input output operating system BIOS sequences for the operation of network devices which may be attached to server . Network interface can contain several modules to provide the appropriate interface functionality for server . For example network interface can contain network interface layer which is typically a low level protocol layer. TCP IP layer can be provided above network interface layer for communicating over a network with network devices to or user device via TCP IP a standard network protocol. Other protocols can also be provided to allow server to communicate to over the network using other conventional protocols. In this regard it is possible for HTTP protocol SNMP protocol and LDAP protocol to be provided in network interface for allowing server to communicate to over a network using HTTP SNMP and LDAP respectively. However it should be noted that HTTP SNMP and LDAP protocols along with other conventional protocols can instead be provided by operating system . The foregoing protocols can allow for server to communicate over a network e.g. the Internet with other devices e.g. network devices to or user device .

Fixed disk is one example of a computer readable medium that stores program instruction sequences executable by CPU so as to constitute operating system network interface driver virtual device module and other files . Operating system can be an operating system such as DOS Windows 95 Windows 98 Windows 2000 Windows XP Windows 7 Windows NT UNIX or other such operating system. Network interface driver can be utilized to drive network interface for interfacing server to network devices to or user device . Virtual device module can be utilized to implement the architecture for virtual devices which as described above can virtually extend the functionality of network devices to to server . Other files can contain other files or programs necessary to operate server and or to provide additional functionality to server .

As can be seen in network printer can contain a central processing unit CPU such as a programmable microprocessor which can be interfaced to printer bus . Also coupled to printer bus can be control logic which can be utilized to control a printer engine not shown of network printer I O ports which can be used to communicate with various input output devices not shown of network printer and network interface which can be utilized to interface network printer to a network for example to connect to server . Network interface can contain several modules to provide the appropriate interface functionality for network printer .

In particular network interface can contain network interface layer which is typically a low level protocol layer to interface with a network. TCP IP layer can be provided above network interface layer for communicating over the network via TCP IP a standard network protocol. In the next layer of network interface it is possible for HTTP protocol SNMP protocol and LDAP protocol to be provided for allowing network printer to communicate with server using HTTP SNMP and LDAP protocols. However it should be noted that HTTP SNMP and LDAP protocols along with other conventional protocols can instead be provided in printer memory . The foregoing protocols can allow for printer to communicate over a network e.g. the Internet with other devices e.g. server . In addition other protocols can be provided to allow network printer to communicate with server .

Also coupled to printer bus can be EEPROM for containing nonvolatile program instructions random access memory RAM printer memory and read only memory ROM . RAM can interface to printer bus to provide CPU with access to memory storage thereby acting as the main run time memory for CPU . In particular when executing stored program instruction sequences CPU can load those instruction sequences from printer memory or other memory media into RAM and execute those stored program instruction sequences out of RAM . ROM can store invariant instruction sequences such as start up instruction sequences for CPU or BIOS sequences for the operation of various network device devices not shown of network printer .

Printer memory is one example of a computer readable medium that can store program instruction sequences executable by CPU so as to constitute printer engine logic control logic driver I O port drivers network e mail server module and other files . Printer engine logic and control logic driver can be utilized to control and drive a printer engine not shown of network printer so as to print an image according to image data received by network printer . I O port drivers can be utilized to drive the input and output devices not shown connected through I O ports . Network e mail server module can be provided to support a network e mail application for e mail printing capability and the like. Server communication module can be provided for communication between network printer and server . In addition other files can be used to provide other information and programs necessary for the operation and functionality of network printer .

Personal computer can be used in the network environment of to access functionality of network devices to . As can be seen in personal computer can include central processing unit CPU such as a programmable microprocessor which can be interfaced to computer bus . Also coupled to computer bus can be keyboard interface for interfacing to a keyboard mouse interface for interfacing to a pointing device such as a mouse floppy disk interface for interfacing to a floppy disk display interface for interfacing to a display and network interface for interfacing to a network for example to connect to server . Network interface can contain several modules to provide the appropriate interface functionality for personal computer .

In particular network interface can contain network interface layer which can be a low level protocol layer to interface with a network e.g. to communicate with server . TCP IP layer can be provided above network interface layer for connecting to a network via TCP IP a standard network protocol. Other protocols can also be provided to allow personal computer to communicate over a network using other conventional protocols. In this regard it is possible for HTTP protocol SNMP protocol and LDAP protocol to be provided in network interface for allowing personal computer to communicate over a network via HTTP SNMP and LDAP protocols. However it should be noted that HTTP SNMP and LDAP protocols along with other conventional protocols can instead be provided by operating system .

Random access memory RAM can interface to computer bus to provide central processing unit CPU with access to memory storage thereby acting as the main run time memory for CPU . In particular when executing stored program instruction sequences CPU can load those instruction sequences from fixed disk or other memory media into random access memory RAM and execute those stored program instruction sequences out of RAM . It should also be noted that standard disk swapping techniques available under windowing operating systems can allow segments of memory to be swapped to and from RAM and fixed disk . Read only memory ROM can store invariant instruction sequences such as start up instruction sequences for CPU or basic input output operation system BIOS sequences for the operation of network device devices attached to personal computer .

Fixed disk is one example of a computer readable medium that can store program instruction sequences executable by central processing unit CPU so as to constitute operating system keyboard interface driver for driving keyboard interface mouse interface driver for driving mouse interface floppy disk interface driver for driving floppy disk interface display interface driver for driving display interface network interface driver for driving network interface and other files . Operating system can be a windowing operating system such as Windows 95 Windows 98 Windows 2000 Windows XP Windows 7 Windows NT or other such operating system although other types of operating systems such as DOS UNIX and LINUX may be used with the present invention. Other files contain other information and programs necessary for personal computer to operate and to add additional functionality to personal computer .

User device can be used to access application which may require access to the functionality of network devices to . Application can be used in conjunction with virtual device module to exchange data between network devices to even if server and network devices to are separated by one or more firewalls to . In this regard application can be in cloud or alternatively outside of cloud . For example application can be stored in memory in user device .

SSH can be used to allow for data exchange between network device and server . As such network device typically requires an SSH client and a TUN driver. A TUN driver can correspond to a virtual network kernel driver that creates a network device completely in software so that there is no associated hardware network adapter. A TUN typically operates on layer packets such as IP packets and is used in routing traffic. In this regard a TUN for network device can be represented by tun0 and can be used as a virtual network tunnel device. Furthermore network device can include a TCP IP stack and a network interface card represented by eth0 .

As mentioned above SSH can be used to allow for data exchange between network device and server . Network device can be capable of hosting an SSH client and a TUN driver and server can be capable of hosting an SSH server and TUN driver. By utilizing SSH network device can access server .

As part of the network device initialization a TUN device tun0 can be setup and a connection . can made between it and SSH client . For example tun0 can be given the IP address 10.254.254.2. Furthermore tun0 can be setup with target point to point IP address of 10.254.254.1 which can be the tun0 IP address on server .

Upon initialization of SSH server from SSH client a virtual device instance can be started. Alternatively virtual device instance may be created at initial device registration. As noted above virtual device can be in communication with network device and virtually represents functionality of network device . For example virtual device can correspond to virtual devices to of .

When network device is disconnected from server the virtual device TUN tun0 is typically disabled and hence cannot be accessed through its IP address. However information about the registered network device can be retrieved from other API provided by server . For example the serial number of network device can be used to identify network device .

As part of the virtual device initialization tun0 can be setup and a connection can be made between it and virtual device . For example tun0 can be given the IP address 10.254.254.1 as noted above. Furthermore tun0 can be setup with target point to point IP address of 10.254.254.2 which can be the tun0 IP address on network device .

By virtue of the foregoing setup in this example an application e.g. application of on server can communicate with network device using IP address 10.254.254.2. Further SNMP browser application can send a command via connection to port on 10.254.254.2. For connection . TCP IP stack can transfer that request to tun0 which can be monitored by virtual device . Virtual device can then take the IP network traffic from tun0 via connection . and pass it to SSH server via connection . The request can in turn get tunneled to SSH client on network device passed to tun0 via connection . and then on to TCP IP stack via connection . . The request can then get passed via connection to an application monitoring port e.g. UDP port for SNMP server . A response by SNMP server can then follow the reverse path back to SNMP browser . As such functionality of network device can be accessed by server even if network device is positioned behind firewall .

As can be seen in virtual device typically includes an application programming interface API . API can be used to communicate with application for example. Virtual device can further include a database . In addition virtual device can include other modules for implementing additional features including virtual packet handler virtual mimic and virtual switch . The functionality of modules to will be described in further detail below.

At the startup of virtual switch any required initialization including configuration can be performed. There may be static or dynamic configuration information stored in a database e.g. database and virtual device can load this information at startup. Virtual device may also register itself in a database for example with the identity of the network device to which it is connected the local and remote IP addresses for network device the real and virtual capabilities of network device and other necessary registration information.

Virtual switch can be used to provide inbound and outbound functions and methods for communicating incoming and outgoing IP traffic. As can be seen in sequence step of the TUN tun0 can be opened for reading an IP packet from TCP IP stack or writing an IP packet to TCP IP stack .

In sequence step a connection to the SSH server can be opened for reading an IP packet from SSH server or writing an IP packet to SSH server . Regarding sequence steps and registration for events can be performed. For example such registration can be for receiving notification e.g. a select call from the TUN tun0 and SSH server that there is a need to handle an outgoing IP packet from TUN tun0 or an incoming IP packet from SSH server . This will be described in further detail below.

Event loop waiting for notification from TUN tun0 or SSH server will now be described. For performance reasons this can alternatively be a kernel task as described later with reference to .

From sequence step upon notification from TUN tun0 an outgoing IP packet from TUN tun0 can be read at sequence step . At sequence step an outgoing IP packet can be written to SSH server .

In addition from sequence step upon notification from SSH an incoming IP packet can be read from SSH server at sequence step and an incoming IP packet can be written to TUN tun0 at sequence step .

Furthermore when the event loop exits a shutdown procedure can be performed including sequence step for closing connection to TUN tun0 and sequence step for closing connection to SSH server .

For example virtual device can include virtual mimic module . In this regard discussion of the mimicking of network devices can be found in U.S. Pat. No. 7 552 239 filed May 14 2001 titled Network Device Mimic Support by Sebastien Jean et al. the contents of which are incorporated by reference herein.

U.S. Pat. No. 7 552 239 describes receiving an incoming message from a client network device residing on an external network the incoming message being directed to a legacy network device residing on the local network and determining if the incoming message requires a function provided by an application module residing in the computing device. In the case that the incoming message requires a function provided by the application module the incoming message is redirected to the application module which performs the required function in response to the incoming message. In the case that the incoming message does not require a function provided by the application module the incoming message is passed through the local network to the legacy network device residing on the local network.

Thus U.S. Pat. No. 7 552 239 is seen to describe the monitoring of network packets between two interface cards one of which is wired to the device itself. However for the virtual mimic described herein the monitoring of network packets can take place on a virtual network located off the network device.

For example virtual mimic module can monitor network packets on the virtual network located off network device . The virtual mimic functionality can be added in the event loop of above design described for virtual switch i.e. the loop defined by sequence steps to of . In addition the configuration of virtual mimic and its rules processing can be handled from a database e.g. database .

The value in virtual mimic can be in the implementation of a faster rules engine used to process the packets. If a packet fails all rules it can be quickly put back on the virtual wire to network device . The basic design of the addition of virtual mimic and virtual packet handler will now be described with reference to .

At sequence step event loop waiting for notification from TUN tun0 or SSH server can be entered into. Upon notification from TUN tun0 an outgoing IP packet can be read from TUN tun0 at sequence step . In sequence step virtual mimic can determine whether the packet should be intercepted based on whether the packet passes rules corresponding to fast rules engine processing. If the packet passes a rule the packet can be written to virtual packet handler at sequence step . In sequence step virtual packet handler can send a response packet to TUN tun0 .

Upon notification from SSH server an incoming IP packet can be read from SSH server at sequence step . In sequence step virtual mimic can determine whether the packet should be intercepted based on whether the packet passes rules corresponding to fast rules engine processing. If the packet fails all rules at sequence step the packet can be written to SSH server . In sequence step SSH server can send a response packet to TUN tun0 . In other words if the packet fails all rules it can be sent normally to network device .

Thus by monitoring and mapping outgoing requests and incoming responses virtual device can process outgoing IP packets to see if it can respond in place of network device to improve performance or cover for when a network device e.g. network devices to might be temporarily disconnected.

For example the request may be a command to retrieve status. Virtual device can realize that network device has not responded recently and virtual device can respond to the request with the last known status or a status indicating that the network device is disconnected.

Upon initialization virtual device can also contact network device itself to gather data such as network device identification type features and other pertinent information. Virtual device can then tailor itself to the specific network device or type. For example knowing that network device is a multi function product MFP frequently used for uploading scanned images virtual device can check for recently scanned files and start uploading them to temporary storage in anticipation of an application request to upload the scanned files.

In sequence step entry into the event loop and waiting for notification from TUN tun0 or SSH can occur. Upon notification from TUN tun0 at sequence step an outgoing IP packet can be read from TUN tun0 . In sequence step virtual mimic can determine whether the packet should be intercepted based on whether the packet passes rules corresponding to fast rules engine processing. If the packet passes a rule the packet can be written to virtual packet handler at sequence step .

As can be seen in virtual packet handler can have the capability to process the packet and coordinate additional functionality with network device . For example virtual packet handler can write response packet s to the application at sequence step .

Alternatively if the IP packet fails all rules the packet can be written to SSH server . Upon notification from SSH server at sequence step a modified packet can be written to SSH server . In this regard virtual mimic can intercept packets that need to be modified from network device before sending those packets to the application. At sequence step SSH server can provide a response packet to virtual packet handler . The modified response packet can then be written to TUN tun0 at sequence step .

As such illustrates that an IP packet can be intercepted and processed by virtual device . The processing can include virtual device communicating with network device to execute some advanced functionality. An example can be a request to print a PDF document where network device may not support PDF document printing. In this example virtual device can intercept the request convert the PDF document into something that network device can handle and send it to network device for processing. In this regard virtual mimic can monitor responses from network device and intercept or adjust them accordingly for the application.

With the foregoing arrangement virtual device plug ins can be used to add functionality to network device . For example a plug in can mimic functionality that a device does not support e.g. SNMP . An application can send an SNMP packet to port . A fast rule under virtual mimic can intercept all packets to port and pass them up the chain to the virtual plug in that handles SNMP. The virtual plug in can then interpret the SNMP request and respond directly or communicate to network device behind the scenes to fulfill the request possibly using some network device supported means.

In this way performance can be improved since network device has a chance to respond before virtual device . When possible virtual device can respond before network device thus increasing response performance to the application.

In scenario A a case where virtual device cannot handle the packet is illustrated. In this case network device can provide the response packet. This is illustrated in sequence step where SSH server provides the response packet to TUN tun0 .

Scenario B illustrates a case where virtual device can handle the packet and responds before network device . This is illustrated by sequence step where virtual packet handler provides a virtual response packet to TUN tun0 before SSH server sends a response packet in sequence step .

In scenario C a case where virtual device can handle the packet but network device responds first is illustrated. This is illustrated by sequence step where SSH server sends a response packet to TUN tun0 before virtual packet handler sends a response packet in sequence step .

API can manage rules and plug ins. In addition API can allow for external management of the rules plug ins and various components of virtual device . Configuration and meta data can be stored in a database for persistence and management.

As can be seen in a connection can be opened at sequence . Registration for events can occur at sequence step followed by packet waiting at sequence step . A packet can be read from VD TUN at sequence step and SSH Server can send a write packet to VD TUN at sequence step . The connection can be closed at sequence step .

In view of the use of a virtual device model can be helpful in extending functionality of a network device in a server. The virtual device may or may not be a simple pass through to an actual network device.

To increase network efficiency cacheable information such as device configuration and status may be retained so that the virtual device can respond directly to requests on behalf of the network device. This can provide for an environment in which the real device status and configuration is accessible by server side applications via the cache. Furthermore data and commands meant for consumption by a real device can be cached by the server until the network device becomes available.

The virtual device can also expose network interfaces that are not actually on the network device. For example if the network device only supports control through a proprietary protocol but a new standard emerges for device control the virtual device can expose the new standard internally translate requests to the proprietary protocol and send the request to the real device.

In addition network devices can be made to appear online when they are actually disconnected from the network. In this regard data sent to the virtual device can be cached at the server and when the device returns online synchronized. For example a camera s pictures may be uploaded to its virtual counterpart and an application can retrieve the pictures even if the actual camera is turned off. Alternatively a networked camera s settings can be adjusted by an application via the virtual device so that the network camera can pick up these new settings the next time it is turned on.

In this regard the advent of cloud computing has encouraged IT infrastructure to be pushed to servers in data centers managed by external entities. Thus besides the outsourcing of physical servers the applications that typically ran within a company s walls have also been pushed out to the cloud. By further applying multi tenancy to applications Software as a Service Saas can be achieved. In this regard Managed Device Services can be considered a candidate for a SaaS. However in the cloud environment the server running the management software is typically separated from the devices by firewalls. Thus as mentioned above it may be beneficial to create a system that virtually recreates the nodes found on a local network so that traditional software can more easily be moved to the cloud.

Another scenario involves unifying devices communicating over otherwise disconnected networks in order to create a more seamless user experience. For example an environment which includes a smart phone that communicates with the Internet through the 3G network and further includes a projector that communicates with the Internet through a Wi Fi network can be considered. Both the smart phone and projector may be able to access the same resources on the Internet but they are typically not able to access each other s resources directly outside of file transfer via Bluetooth or Infrared. Thus it may be beneficial to create a system that virtually recreates the nodes found on disparate networks for easier bridging of network devices.

It should be noted that the devices can be participants in a system which can include for example a central server which establishes a mutual trust with a network device. The central server can remotely monitor and control connected devices and the network device can send data to and receive data from the central server.

With reference to the central server can have means of creating a virtual device as described above. The virtual device can correspond to an object that virtualizes various aspects of a network device such as network interfaces.

As also described above the virtualized network interface of the virtual device can take the form of a TUN e.g. a virtual network device driver that is directly or indirectly connected to the network device using a tunneling mechanism such as SSH. An application residing on the central server or that has remote access to the network devices can access the TUN s IP address instead of determining how to breach a firewall and communicate with the actual network device. As an alternative to SSH TUN a virtual private network VPN can be set up between the server in the cloud and the network device in the enterprise as will be described later.

In the examples of the server can store associations between network devices and users groups in a database. In this regard the virtual devices for a given user group can be grouped into a Virtual Device Environment VDE . In the following examples three modes of assigning IP addresses to the TUNs in the VDE will be described.

A first mode of assigning IP addresses will be described with reference to . This mode can correspond to recreating network addresses of a user s local network. As can be seen in this diagram VDE can include a cloud a server which corresponds to a central server a database an application accessible by a user device virtual devices and firewalls and and network devices and .

VDE is an example where server can have information on the user group s local network environment based on associations and configurations that can be stored in database . In this arrangement TUNs associated with the user can be assigned the IP address that the corresponding actual network device e.g. network devices to is assigned. As can be seen in the IP addresses for virtual devices to respectively match with those of network devices to . In addition IP subnet and VLAN techniques can be used to isolate the VDE subnet from other VDE subnets.

A second mode of assigning IP addresses will be described with reference to which is a depiction of a network environment according to another example embodiment. This second mode can correspond to bridging multiple user devices that are located on disparate networks. As can be seen in this diagram VDE can include a cloud a server a database an application accessible by a user device virtual devices and firewalls and and network devices and .

VDE is an example of bridging disparate networks where there is no common IP subnet based on associations and configurations that can be stored in database . In this arrangement the TUNs can be assigned an arbitrary local subnet address. As can be seen in the IP addresses for virtual devices to do not match with those of network devices to .

For example smart phone and camera may be able to access the same resources on the Internet but may not able to access each other s resources directly outside of file transfer via Bluetooth or Infrared. To address this VDE can virtually recreate the nodes found on disparate networks so that network devices such as smart phone and camera can be more easily bridged.

A third mode of assigning IP addresses will be described with reference to which is a depiction of a network environment according to another example embodiment. This mode can correspond to a combination of the above described first and second modes. As can be seen in this diagram a VDE can include a cloud a server a database an application accessible by a user device virtual devices and firewalls and and network devices and .

VDE is an example of a combination of the first and second modes for assigning IP addresses. In particular server can have information on the user group s local network environment for certain network devices and bridging disparate networks can be performed for other network devices where there is no common IP subnet based on associations and configurations that can be stored in database . In this arrangement the plurality of IP subnets can be configured so that they are reachable through a gateway.

As can be seen in the IP addresses for virtual devices to respectively match with those of network devices to . On the other hand the IP addresses for virtual devices and do not match with those of network devices and .

Hence the foregoing first to third modes for assigning an IP addresses for the virtual devices allow for creation and maintenance of a virtual environment for devices within a central server that can recreate the network addresses of a user s local network and or bridge multiple user devices located on disparate networks.

An application can send out a discovery broadcast for example to which the TUNs will be able to respond to. The application upon discovering the devices the user has access to based on associations and configurations stored in a database can directly address requests to specific virtual devices thereafter.

As described above the virtual device may or may not be a simple pass through to an actual network device. To increase network efficiency cacheable information such as device configuration and status may be retained so that the virtual device can respond directly to requests on behalf of the network device.

The virtual device can also expose network interfaces that are not actually on the network device. For example if the network device only supports control through a proprietary protocol but a new standard emerges for device control the virtual device can expose the new standard internally translate requests to the proprietary protocol and send the request to the real device.

In addition network devices can be made to appear online when they are actually disconnected from the network. In this regard data sent to the virtual device can be cached at the server and when the device returns online synchronized.

A determination can be made as to whether a VDE instance is up to date decision diamond . If the answer to this inquiry is no the VDE engine can update the VDE instance block . More particularly the VDE engine can check the device user group association database and determine an appropriate addressing mode. In addition an arbitrary IP subnet can be generated if necessary. A VDE instance can also be created if one does not already exist.

A determination can then be made as to whether the virtual devices are up to date decision diamond . If the answer to this inquiry is no the VDE engine can update each virtual device instance block . More particularly the VDE engine can update the TUN addresses as necessary e.g. if the IP subnet was changed as described above . The virtual device can also be updated to reflect the latest status and configuration of the actual network device. In addition the VDE engine can update cloud based attributes and functionality if changed.

A determination can then be made as to whether the virtual device is caching information for the network device decision diamond . If the answer to this inquiry is yes the virtual device can send the cache information to the network device block . A determination can then be made as to whether the virtual device is caching information for an application decision diamond . If the answer to this inquiry is yes the virtual device can send the cache information to the application block . The application and infrastructure requests can then be processed block and flow can continually loop back to block .

Example configurations will now be described with reference to . As noted above correspond to using a virtual device within an SSH TUN network system. Tables 1 and 2 together with their corresponding descriptions are example configurations and settings for such an SSH TUN network system. Of course it should be noted that other configurations and settings can be used.

Table 1 illustrates example software products which can be used for implementation of a server for use in a virtual network environment as follows 

Table 2 illustrates example software products which can be used for implementation of network device for use in a virtual network environment as follows 

With reference to an example configuration of a SSH TUN System will now be described. More particularly this example configuration will describe how a cloud side server and enterprise side network device can be set up to create a virtual network using SSH and TUN. This configuration can allow an application on the server side to discover the network device and communicate with it using IP protocols such as TCP and UDP.

For this configuration two IPv4 addresses can be selected from a private network range that is unused. In this example 10.254.254.1 can be selected for the server and 10.254.254.2 for the network device.

Configuration of the SSH server for the server will now be described. In this regard Linux servers may come with SSH installed. The actual process of setting SSH up for a virtual network will not be described in great detail since there are general techniques for setting up an SSH. Rather only some of the areas and settings for the particular setup which can incorporate the virtual device model will be described.

The security configuration of the SSH server and client is preferably configured to use Public Key Authentication and disable username password ability. Setup of the server and network device are abbreviated as details are readily available.

Next configuration of the TUN Interface for the server will be described. First a TUN device is installed into the Linux kernel. The TUN device node is then created followed by creation of the TUN interface. Again setup of the TUN is abbreviated as details are readily available.

It should be noted that incoming SSH connections can be restricted to a specified tunnel by configuring SSH to use a specific TUN interface.

Configuration of the firewall for the server will now be described. For inbound traffic the SSH port e.g. port should be opened to the network device.

Finally server networking should be setup to forward IP packets by configuring the system file appropriately.

Following configuration of the server discussion will now turn to configuration of the network device. The actual process of setting SSH up for a virtual network will not be described in great detail since there are general techniques for setting up an SSH. The SSH Client should be configured based on the configuration of the SSH server as described above.

Next configuration of the TUN Interface for the server will be described. First a TUN device is installed into the Linux kernel. The TUN device node is then created followed by creation of the TUN interface. Again setup of the TUN is abbreviated as details are readily available.

Configuration of the firewall for the network device will now be described. For inbound traffic connections should at least be allowed from host 10.254.254.1 or the IP address that was picked for the server s tun0.

Following configuration of the network device discussion will now be turned to execution of the virtual network. To create the virtual network the TUNs on both the server and the network device should be brought up so that the SSH tunnel between the network device and server can be established. Once the tunnel is established applications from the server can access the network device through the IP address assigned to its TUN e.g. 10.254.254.2 .

As noted above one purpose of the virtual network can be to give applications on the server side access to the network device through its firewall. It is also possible for applications on the network device to access the server using this setup too. In this regard access can be controlled through firewall settings on the server. In general once the tunnel is established applications from the network device can access the server through the IP address assigned to its TUN e.g. 10.254.254.1 .

Accordingly use of SSH with a TUN device can be considered for on demand dynamic secure and possible short lived connections. In addition an SSH TUN arrangement is typically reliable relatively easy to setup and can provide proven security and performance.

Tunneling TCP over TCP can be an issue for lossy networks or networks prone to lose packets for example when they become highly loaded. In addition packet delivery dynamics can be affected. An SSH TUN arrangement can provide network support for IP traffic such as TCP and UDP and can support lower layer Ethernet traffic with more a slightly more complicated setup using a TAP device.

As mentioned above and Tables 1 and 2 illustrate examples of using a virtual device within a SSH TUN network system and the corresponding configurations. However other examples of networking techniques can be used to allow cloud applications direct access to network devices. One example is to setup a Virtual Private Network VPN between a server in the cloud and the network device or server in the enterprise.

Thus in addition to the SSH TUN network system a VPN can provide for a network environment which uses one or more virtual devices. Using this virtual device model a virtual device in the VPN can correspond to an application running on a server networked between an actual network device and applications that need to communicate with the network device. The virtual device can act as a middle man between the application and network device to aid in the flow of data. In addition the virtual device can be used for other purposes related to network device interaction. Of course use of the virtual device is not limited to a SSH TUN network system or a VPN and other network systems can be configured to implement the virtual device model.

VPN typically corresponds to a software based private network link between two or more nodes separated by an open network such as the internet. The software can secure the network traffic over the open network. VPN can be a more complicated solution for creating a virtual network than using SSH TUN but can support a larger set of features.

Table 3 illustrates an example software product for implementation of a server and a network device as follows 

With reference to Table 3 an example configuration of a VPN system will now be described. More particularly this example configuration will describe how a cloud side server and enterprise side network device can be set up to create a virtual network using VPN. This configuration can allow an application on the server side to discover the network device and communicate with it.

Configuration of the server in general will be described starting with configuration of the VPN server. The actual process of setting a VPN up will not be described in great detail since there are general techniques for setting up a VPN. Rather only some of the areas and settings for the particular setup which can incorporate the virtual device model will be described. Note the VPN software should be enabled with SSL support as well as compression software to enable real time data compression.

First the VPN server should be configured to use either TCP or UDP. This should be performed using the means appropriate for the software package used.

Next configuration of the TUN Interface for the server will be described. First a TUN device is installed into the Linux kernel. The TUN device node is then created. Again setup of the TUN is abbreviated as details are readily available.

Configuration of the firewall for the server will now be described. For inbound traffic the OpenVPN port e.g. port 1194 should be opened up to the network device.

Finally server networking should be setup to forward IP packets by configuring the system file appropriately.

Discussion will now turn from configuration of the server to configuration of the network device. Configuration of the VPN client for the network device will now be described. The actual process of setting the VPN client up will not be described in great detail since there are general techniques readily available. The VPN Client should be configured based on the configuration of the VPN server as described above.

Next configuration of the TUN Interface for the server will be described. First a TUN device is installed into the Linux kernel. The TUN device node is then created. Again setup of the TUN is abbreviated as details are readily available.

Configuration of the firewall for the network device will now be described. For inbound traffic connections should at least be allowed from host 10.8.0.1 or whatever IP address was selected for the server s tun1.

As noted above one purpose of the virtual network can be to give applications on the server side access to the network device through its firewall. It is also possible for applications on the network device to access the server over this setup too. In this regard access can be controlled through firewall settings on the server. In general once the VPN is established applications from the network device can access the server.

Accordingly VPN can be used for a static long lived connection. A VPN arrangement can also be reliable. However such an arrangement can be more complicated to setup than an SSH TUN arrangement can have more networking options and can provide proven security and performance.

A VPN arrangement can provide network support for broader Ethernet traffic if that is a requirement. However it may be difficult to get a client built for network devices. For a VPN arrangement an IP Security Protocol IPSec solution can be examined for robust and permanent connections. This may require more resources and more control over the end to end system and this may not be possible with some customer networks.

Thus a virtual device model can be implemented using an SSH TUN network a VPN or another type of virtual network. By creating a virtual device that represents the network device to be accessed direct access to network device functionality and events can be available and thus applications can more readily be developed.

As noted above different levels of representation are possible. A server side API can be created that abstracts away network device specifics. For example an API for obtaining the network device status can be called by the application. How the actual status is obtained by the virtual device e.g. a web service call SNMP monitoring a proprietary method or other methods can be hidden from the application.

In addition device network interfaces can be replicated within the server environment. In other words an application can initiate a service for scanning which would normally be called by issuing a request directly to the device. This can trigger the virtual device to use port forwarding technology to invoke the scan e.g. via a scan web service of the network device.

This disclosure has provided a detailed description with respect to particular representative embodiments. It is understood that the scope of the appended claims is not limited to the above described embodiments and that various changes and modifications may be made without departing from the scope of the claims.

