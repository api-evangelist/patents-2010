---

title: Multimedia processing control apparatus and multimedia processing control method
abstract: A multimedia processing control apparatus according to embodiments has a holding section which holds groups of information for management of a plurality of components generated in a first address space, and a plurality of groups of first address information, and also holds a plurality of groups of second address information in a second address space; a control section request issue section which converts, when a processing request is issued, each of the plurality of groups of second address information into the plurality of groups of first address information by referring to the holding section, and issues the processing request; a processing section request issue section which issues from the first address space the processing request; and a component processing section which controls the plurality of components on the basis of the plurality of groups of first address information the processing request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08386584&OS=08386584&RS=08386584
owner: Kabushiki Kaisha Toshiba
number: 08386584
owner_city: Tokyo
owner_country: JP
publication_date: 20100727
---
This application is based upon and claims the benefit of priority from the prior Japanese Patent Application No. 2009 189248 filed on Aug. 18 2009 the entire contents of which are incorporated herein by reference.

Embodiments described herein relate generally to a multimedia processing control apparatus and a multimedia processing control method.

In the field of image processing technique for example a multimedia processing control apparatus has been used in which a plurality of functional blocks are used to realize a desired function. For example in the OpenMAX standard each of a plurality of functional blocks realizing recording or playing a moving image is defined as a component. Each of the plurality of components has a port for data communication and setting of data communication port connections between the components is performed to enable data transfer between the components via the ports.

According to the OpenMAX standard a client module hereinafter referred to simply as client calls up a specified interface and controls each component. Control of each component includes for example generation of a plurality of components for playing a moving image the above described port connection setting and issue of requests for data processing to the generated components. A multimedia processing control apparatus can perform processing such as playing a moving image by using a plurality of components as described above. Conventionally in such a case a client as a component control section that generates and controls components and the components exist on one chip.

In a case where components and a specified interface are mounted in one chip and a client is to control the components from the outside of the chip the client cannot refer to information on the components through the specified interface. That is in a case where a client is in a chip different from a chip containing components the client cannot control the components.

This is because the address space in which the client exists is different from the address space in which the components and the specified interface exist. Therefore in a remote system in which a client exists in an address space different from an address space in which components and a specified interface exist the client cannot generate and control the components.

Also for example a system in which a client and components are connected to each other through a communication network has been proposed see for example Japanese Patent Application Laid Open Publication No. 11 338841 . In this proposed system however a client designates a node by using an IP address of a component host at which components exist and the client cannot generate and control components.

According to an embodiment of the present invention a multimedia processing control apparatus has a holding section a control section request issue section a processing section request issue section and a component processing section. The holding section holds groups of information for management of a plurality of components generated in a first address space and each configured to execute predetermined processing and a plurality of groups of first address information respectively designating the groups of information for management of the plurality of components and also holds a plurality of groups of second address information respectively corresponding to the plurality of groups of first address information in a second address space in which a component control section configured to control the plurality of components exists. When a processing request is issued from the component control section the control section request issue section converts each of the plurality of groups of second address information in the second address space designated by the component control section into the plurality of groups of first address information in the first address space by referring to the holding section and issues the processing request. The processing section request issue section issues from the first address space the processing request from the component control section issued from the control section request issue section. The component processing section controls the plurality of components on the basis of the plurality of groups of first address information in the first address space of the processing request issued from the processing section request issue section.

Embodiments of the present invention will be described below in detail with reference to the drawings.

The configuration of a multimedia processing control system according to a first embodiment of the present invention will be described with reference to . is a diagram showing the configuration of a multimedia processing control system according to the first embodiment of the present invention.

As shown in the multimedia processing control system includes a node a node which is a one chip semiconductor device and a bus . The node and the node are connected to each other by the bus . The node the node and the bus are laid on a circuit board not shown .

The node is for example an external CPU which controls the node . The node includes a CPU a ROM a RAM a bus interface hereinafter referred to as bus I F and a local bus . The CPU the ROM the RAM and the bus I F are connected to each other by the local bus .

A component control program and a control section oriented API are stored in the ROM . The CPU reads out these programs from the ROM loads the programs into the RAM and executes the programs. The component control program and the control section orientated API are executed by the CPU to form a component control section and a control section oriented API each described below.

On the other hand the node is configured as one chip semiconductor device. The node performs for example playing or recording of a moving image under the control of the node . The node includes a CPU a ROM a RAM a bus I F and a local bus . The CPU the ROM the RAM and the bus I F are connected to each other by the local bus .

A processing section oriented API a component processing program and a plurality of component programs are stored in the ROM . The CPU reads out these programs from the ROM loads the programs into the RAM and executes the programs. The processing section oriented API the component processing program and the plurality of component programs are executed by the CPU to form a processing section oriented API a component processing section and a plurality of components each described below.

Each of the component programs is a program to perform a single function processing e.g. video decoding processing or filtering processing. By combining such kinds of single function processing the desired data processing e.g. recording or playing a moving image is performed and processing results are displayed on a display device not shown .

Thus in the configuration of multimedia processing control system the node and the node are connected to each other by the bus . In this configuration therefore the address space of the component control program stored in the node and the address space of the component programs stored in the node are different from each other.

The multimedia processing control system is not limited to the above described configuration in which the node and the node are connected to each other by the bus as long as the address space of the component control program in the node and the address space of the component programs in the node are different from each other. For example a configuration may be adopted in which each of the nodes and is a personal computer and the personal computers as the nodes and are connected to each other via a network instead of being connected by the bus . In this configuration a component control program and a control section oriented API are stored in one of the two personal computers while a processing section oriented API a component processing program and a plurality of component programs are stored in the other of the two personal computers.

The component control program and the control section oriented API are executed on the CPU and the processing section oriented API the component processing program and the plurality of component programs are executed on the CPU thus configuring a multimedia processing control apparatus shown in .

The configuration of the multimedia processing control apparatus thus configured will be described. is a diagram showing the configuration of the multimedia processing control apparatus according to the first embodiment of the present invention.

As shown in the multimedia processing control apparatus includes a component control section a control section oriented API hereinafter referred to as control section API a processing section oriented API hereinafter referred to as processing section API a component processing section and a plurality of components three components in this description to .

The illustrated state of the multimedia processing control apparatus is a state when processing for playing a moving image is designated. For example a component is a functional block configured to execute video decoding processing a component is a functional block configured to execute filtering processing and a component is a functional block configured to execute processing for output to a screen. The multimedia processing control apparatus plays a moving image by combining these components to . The multimedia processing control apparatus may have a plurality of components not shown other than the three components to . When receiving a command to perform processing for recording of the moving image for example the multimedia processing control apparatus performs recording of the moving image by combining these components.

In the illustrated example of the operation the component control section is operating in the node while the component processing section and the components to are operating in the node . The nodes and are connected to each other by the bus as described above and can perform data communication therebetween.

In the node in which the component control section is operating the control section API that provides an interface for controlling the components to is operating. In the node in which the component processing section and the components to are operating the processing section API is operating. The control section API which is the control section request issue section and the processing section API which is the processing section request issue section are pieces of software which operate while communicating with each other. The control section API behaves like the component processing section and the components to toward the component control section while the processing section API behaves like the component control section toward the component processing section and the components to .

The component control section makes a request to the component processing section or the components to by calling up the interface formed by the control section API . The control section API receiving a request from the component control section notifies the processing section API of the request from the component control section by data communication using the bus . At this time data communication between the control section API and the processing section API is performed by using a data communication protocol defined in advance.

The processing section API receives the request from the control section API and converts the received request into a request to the component processing section or the components to and issues the request to the component processing section or the components to .

When a notice of a result or a notice of an event from the component processing section or the components to occurs the processing section API receives the notice and gives this notice to the control section API . The control section API receives the notice from the processing section API and gives this notice to the component control section .

The components to perform transmission and reception of data between the components to to perform processing for playing a moving image. The components to therefore have ports for performing transmission and reception of data.

As shown in the component has three ports to the component has four ports to and the component has two ports and . When connections are set between the ports to held by the component and the ports held by one of the other components and data transfer is realized between the ports.

In the example shown in connections are respectively set between the ports and held by the component and the ports and held by the component . The multimedia processing control apparatus performs data transfer between the component and the component by using these ports and or and . Similarly connections are respectively set between the ports and held by the component and the ports and held by the component . The multimedia processing control apparatus performs data transfer between the component and the component by using these ports and or and

The component control section can set a connection to each of the ports of the components to . In the example shown in a connection is set between the component control section and the port held by the component thereby enabling data transfer between the component control section and the component .

The components to respectively hold buffers to . The above described port connection enables data sharing between the component control section and one of the components to connected to each other or between two of the components to by using the corresponding one of the buffers to . In the example shown in data in the buffer is shared between the component control section and the component . In this case the component control section can control data stored in the buffer . Similarly data in the buffer is shared between the components and and data in the buffer is shared between the components and .

The component control section issues a request command for generation and disposition of the components to according to a function to be realized to the component processing section through the control section API and the processing section API to generate the components to and to set in advance the connections between the ports held by the generated components to . The component control section then issues for example a request command for playing a moving image to the component processing section through the control section API and the processing section API to control the generated components to so that the moving image is played.

The component control section makes a request of the control section API for generation of components according to a function to be realized. It is assumed here that the component control section has issued a request for generation of the components to in order to play a moving image.

The control section API converts the request from the component control section into data packets and sends a notice to the processing section API through the bus .

The processing section API calls up the component processing section according to the request from the control section API .

The component processing section generates instances of the components to according to the request from the processing section API . The instances of the components to include groups of information for management of the components to and identifiers for the components to . The groups of information for management of the components to include names of the components to the conditions of the components to the number of ports and the conditions of the ports. The identifiers for the components to are pointers to the groups of information for management of the components to in the address space for the node . That is these pointers respectively designate the heads of the addresses at which the groups of information for management of the components to are stored.

The component processing section stores in the RAM the instances of the components to i.e. the management information and the identifiers for the components to in this description. Also the component processing section notifies the processing section API of execution results the management information and the identifiers for the components to in the node . The processing section API notifies the control section API of the execution results the management information and the identifiers for the components to in the node through the bus .

The control section API generates identifiers for the components to in the node respectively corresponding to the identifiers for the components to in the node . The control section API returns the generated identifiers for the components to in the node to the component control section . Also the control section API holds and manages component information in which the identifiers for the components to in the node and the management information and the identifiers for the components to in the node are associated with each other. The control section API stores in the RAM this component information as a table shown in and described below and holds and manages this component information.

The component control section makes a request of the control section API to set parameters to the components or to make state transitions in the components to . As parameter setting setting of for example the format of data to be decoded and the size of an image to be output is performed. As state transitions in the components to transitions to securing of a memory and execution of processing for example are made.

The control section API converts the request from the component control section into data packets and sends a notice to the processing section API through the bus . The control section API converts the identifiers for the components to in the node respectively into the identifiers for the components to in the node and notifies the processing section API of the converted identifiers for the components to in the node . This conversion is made by using a table shown in and described below i.e. a table held and managed by the control section API at the time of generation of the components to .

The processing section API calls up the component processing section according to the command from the control section API .

The component processing section accesses data structures showing the information for management of the components to in the node on the basis of the identifiers for the components to in the node and issues processing requests to the components to . The component processing section notifies the processing section API of processing results and output data. The processing section API notifies the control section API of the processing results and the output data through the bus .

The control section API notifies the component control section of the processing results and the output data. The component control section repeatedly issues a request such as that described above to perform predetermined data processing i.e. processing for playing a moving image in this description.

The table held and managed by the control section API will be described. is a diagram showing an example of the table held and managed by the control section API .

As shown in a table as the holding section held and managed by the control section API contains two sorts of information component information and buffer meta information .

In the component information the identifiers for the components to in the node and the management information and the identifiers for the components to in the node are associated with each other. In the buffer meta information an identifier for the buffer in the node and an identifier for the buffer in the node are associated with each other.

As described above when the component control section makes a request of the component processing section to generate the components to the component processing section generates instances of the components to i.e. management information and identifiers in this description. The component processing section holds and manages the management information and the identifiers for the components to on the RAM . However the address space in the RAM in the node in which the component processing section exists is different from the address space in the RAM for the component control section . Therefore the component control section cannot control the components to by using the management information and the identifiers for the components to held by the component processing section .

The component processing section then notifies the control section API of the management information and the identifiers for the components to in the node through the processing section API . The control section API generates identifiers for the components to in the node respectively corresponding to the management information and the identifiers for the components to in the node and holds the generated identifiers as the table . Further the identifiers for the components to in the node are returned to the component control section .

Control of the components to is performed by using addresses which are the identifiers for the components to in the node between the component control section and the control section API . When the component control section makes a processing request of the components to the control section API searches the managed component information i.e. the table to identify the components to to which the component control section should issue the request. Thereafter the control section API converts the identifiers for the components to in the node issued from the component control section into identifiers for the components to in the node managed by the component processing section delivers the converted identifiers to the processing section API and issues the processing request.

Referring to data is shared between the component control section and the component by using the buffer . However the address space in the RAM for the node in which the component processing section exists is different from the address space in the RAM for the component control section . Therefore the component control section cannot control the buffer by using the identifier for the buffer held by the component processing section . The control section API then generates identifier for the buffer in the node corresponding one to one to the identifier for the buffer in the node and returns the generated identifier for the buffer in the node to the component control section . Further the control section API associates the identifier for the buffer in the node and the identifier for the buffer in the node with each other and holds the identifiers as buffer meta information in the table .

When controlling the buffer the component control section notifies the control section API of the identifier for the buffer in the node . The control section API converts the identifier for the buffer in the node into the identifier for the buffer in the node by referring to the buffer meta information in the table and notifies the processing section API of this identifier thereby enabling sharing of data using the buffer between the component control section and the component .

In the present embodiment the buffer is shared between the components and and the buffer is shared between the components and . It is therefore not necessary for the control section API to manage the buffer meta information about the buffers and . In the buffer meta information in the table shown in the identifier for the buffer in the node and the identifier for the buffer in the node are associated with each other. If the buffer is shared between the component control section and the component the control section API associates an identifier for the buffer in the node and an identifier for the buffer in the node with each other and adds the identifiers as buffer meta information to the table .

The description has been made by assuming that the control section API holds and manages component information and buffer meta information as the table . However the processing section API may hold and manage the table in place of the control section API .

First the component control section makes a request of the control section API for generation of the components to step S . The control section API converts the request from the component control section into data packets and transmits the data packets to the processing section API through the bus step S . The processing section API determines the request from the component control section from the received data packets and issues a processing request to the component processing section step S . The component processing section newly generates the components to according to the issued processing request step S . The component processing section notifies the processing section API of execution results information for management of the components to and identifiers for the components to step S . The processing section API notifies the control section API of the execution results the information for management of the components to and the identifiers for the components to in the node step S . The control section API stores the information for management of the components step S . The control section API newly generates identifiers for the components to in the node corresponding one to one to the identifiers for the components to in the node and returns the newly generated identifiers for the components to in the node to the component control section step S . The identifiers for the components to in the node are pointers to the information for management of the components to stored in step S.

First the component control section makes a request of the control section API for control of the components to step S . To designate at the time of issue of the request the components to to be operated at the request the component control section designates the identifiers for the components to in the node . The control section API converts the identifiers for the components to to be operated at a processing request from the identifiers in the node to the identifiers in the node step S . The control section API then converts the request from the component control section into data packets and transmits the data packets to the processing section API through the bus step S . The processing section API determines the request from the component control section from the received data packets and issues processing requests to the component processing section step S . The component processing section issues processing requests to the components to and notifies the processing section API of execution results and output data step S . The processing section API notifies the control section API of the execution results and the output data step S . The control section API notifies the component control section of the execution results and the output data step S . If there is simulated data such as buffer meta information the control section API converts data in the node into data in the node and notifies the component control section of the converted data step S .

As described above the control section API converts a request from the component control section into data and notifies the processing section API of the converted data. The processing section API notifies the control section API of management information and identifiers for generated components to in the node . The control section API generates identifiers in the node corresponding to the identifiers for the components to in the node and notifies the component control section of the generated identifiers. In consequence when the component control section sends a request to the control section API by using the identifiers for the components to in the node at the time of controlling the components to existing in the different address space the control section API converts the identifiers for the components to in the node into the identifiers for the components to in the node . The converted identifiers for the components to in the node are supplied to the component processing section through the processing section API to enable the component processing section to control the components to by designating the corresponding information for management of the components to on the basis of the identifiers for the components to in the node .

Thus in the multimedia processing control apparatus according to the present embodiment the component control section can control components even in a case where the address space in which the component control section exists is different from the address space in which the components exist.

A second embodiment of the present invention will be described. In a conventional remote system in which the address space for a component control section and the address space for components are different from each other the components cannot be shared by a plurality of component control sections. The multimedia processing control apparatus in the present embodiment is configured so that even in a case where a component control section exists in each of a plurality of nodes the component control sections in the plurality of nodes can control components and can also share generated instances of the components.

As shown in a multimedia processing control system includes a node in addition to the node the node and the bus shown in . The node the node and the node are connected to each other by the bus .

The node has the same configuration as that of the node . The node includes a CPU a ROM a RAM a bus I F and a local bus . The CPU the ROM the RAM and the bus I F are connected to each other by the local bus

A component control program and a control section API are stored in the ROM as in the ROM . The CPU reads out these programs from the ROM loads the programs into the RAM and executes the programs.

The node controls components to in the node through the bus . That is in the multimedia processing control system the two component control sections can share the components to .

The multimedia processing control system configured by having two nodes and may alternatively be configured by having three or more nodes. That is the multimedia processing control system may be configured so that three or more component control sections share components to .

As shown in a multimedia processing control apparatus is configured by adding a component control section and a control section API to the multimedia processing control apparatus shown in .

When issuing a request to newly generate a component or the component control section in the node determines whether or not any instance sharing setting has been made with respect to the component or scheduled to be generated. If an instance sharing setting has been made the component control section inquires of any other node the node in this description whether there is any instance of the same component or as the component or scheduled to be generated. That is when generating for example the component the component control section inquires of the node whether there is any instance of the component . In other words the component control section makes an inquiry about whether or not the component control section in the node has generated the component . In a case there is an instance of the component in the node that is the component control section has generated the component the component control section shares the management information and the identifier for the component without generating the component . Accordingly the control section API holds and manages sharing information and reference destination address information described below and returns the identifier for the component in the node to the component control section . The control section API performs the same processing with respect to each of the components and .

On the other hand in a case where no instance sharing setting has been made with respect to the component or scheduled to be generated the component control section executes the above described generation processing shown in . Similarly also in a case where no instance of the component or scheduled to be generated has been generated by the component control section the component control section executes the above described generation processing shown in .

A table managed and held by the control section API will be described. The control section API also holds and manages a similar table. is a diagram showing an example of the table held and managed by the control section API

As shown in a table managed by the control section API has component information and buffer meta information . The component information is formed by adding sharing information and reference destination address information about the components to to the component information shown in .

As sharing information information as to whether or not there is any instance of the component in any other node the node in this description is stored. As reference destination address information if there is the sharing information information on the addresses of the management information and the identifier for the component in the node held by the node is stored.

When controlling the components to the component control section outputs identifiers for the components to in the node to the control section API . If information indicating the existence of an instance of one of the components to in the different node exists in the sharing information about the components to the control section API refers to the reference destination address information about the one of the components to . The control section API controls the components to while referring to the management information and the identifier for the one of the components to in the node managed by the node on the basis of the reference destination address information about the one of the components to .

As described above the control section API holds as component information sharing information and reference destination addresses as well as the identifiers for the components to in the node the management information and the identifiers for the components to in the node . The plurality of component control sections and connected by the bus and existing in different address spaces are thereby enabled to share and control through the bus the components to existing in different address spaces.

In the multimedia processing control apparatus la according to the present embodiment even in a case where a component control section exists in each of a plurality of nodes the component control sections in the plurality of nodes can control components and can also share generated instances of the components.

 Sections referred to in the present specification are conceptual components which correspond to certain functions in the embodiments and which do not necessarily correspond one to one to concrete pieces of hardware or software routines. In the present specification therefore the embodiments have been described with reference to virtual circuit blocks sections assumed to have the functions according to the embodiments. The steps in the flowcharts referred to in the present specification may be rearranged into any other sequence e.g. one formed by changing the execution order one in which two or more of the steps are executed simultaneously with each other or one in which the execution order is changed in every execution provided that their essential characters are maintained.

The whole or part of the program for execution of the above described operation is recorded or stored as a computer program product on a movable medium such as a flexible disk or a CD ROM or a storage medium such as a hard disk. The program code of the program is read with a computer to execute the entire operation or part of the operation. Alternatively the whole or part of the program code can be distributed or provided through a communication network. A user can easily implement the multimedia processing control apparatus of the present invention by downloading the computer program through a communication network and installing the program in a computer or by installing the program in a computer from a recording medium.

The present invention is not limited to the above described embodiments. Various changes and modifications can be made in the described embodiments without departing from the gist of the invention.

While certain embodiments have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the inventions. Indeed the novel embodiments described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the embodiments described herein may be made without departing from the spirit of the inventions. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of the inventions.

