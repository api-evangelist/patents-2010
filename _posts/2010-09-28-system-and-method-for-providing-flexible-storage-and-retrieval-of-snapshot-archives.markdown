---

title: System and method for providing flexible storage and retrieval of snapshot archives
abstract: A group of computers is configured to implement a block storage service. The block storage service includes a block-level storage for storing data from a set of distinct computing instances for a set of distinct users. An interface is configured to allow the set of distinct users to specify respective destinations for storing backup copies of respective data stored in the block-level storage for the distinct users. At least some of the respective destinations are for different storage systems remote from one another. A backup copy function is provided for creating backup copies of data stored in the block-level storage by the set of distinct computing instances for the set of distinct users. The backup copies are stored in different destination locations specified by respective ones of the plurality of distinct users via the interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09304867&OS=09304867&RS=09304867
owner: Amazon Technologies, Inc.
number: 09304867
owner_city: Reno
owner_country: US
publication_date: 20100928
---
The recent revolution in technologies for dynamically sharing virtualizations of hardware resources software and information storage across networks has increased the reliability scalability and cost efficiency of computing. More specifically the ability to provide virtual computing resources on demand through the advent of virtualization has enabled consumers of processing resources to flexibly structure their computing costs in response to immediately perceived computing needs. Such virtualizations allow customers to purchase processor cycles and related resources at the instant of demand rather than buying or leasing fixed hardware in provisioning cycles that are dictated by the delays and costs of manufacture and deployment of hardware. Rather than depending on the accuracy of predictions of future demand to determine the availability of computing users are able to purchase the use of computing resources on a relatively instantaneous as needed basis.

In virtualized environments that provide computing resources on demand however difficulties and inflexibility still exist in the importation of data to and exportation of data from virtualized computing systems such as in backup operations. Current solutions for importing and exporting large segments of data consist of cumbersome work arounds that have proven frustratingly slow and unreliable. While access to computing power has become more flexible the methods available to bring data to the computing process and export data from the computing process have not advanced to a satisfactory state.

While the technology described herein is susceptible to various modifications and alternative forms specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood however that the drawings and detailed description thereto are not intended to limit the disclosure to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present disclosure as defined by the appended claims.

In an environment providing on demand storage associated with a cloud computing service or other virtualized computing a block storage service provides block level storage to a set of distinct computing instances for a set of distinct users. The computing instances need not be co resident with either the block level storage or one another. Embodiments provide both a backup copy function for creating backup copies of data stored in the block level storage by the set of distinct computing instances for the set of distinct users and a storage function for storing the backup copies in different destination locations specified by respective ones of the set of distinct users.

Embodiments thus help to alleviate the difficulties previously associated with exporting data from the block level storage used by the distinct computing instances of a cloud computing service. Embodiments provide the flexibility to route backup copies of data from the block level storage to multiple storage destinations. In some embodiments the multiple storage locations are remote from the block level storage and from one another. In one embodiment the block storage service receives input from a particular one of the set of distinct users specifying a particular destination for storing a backup copy of at least a portion of data stored in the block level storage for the particular one of the set of distinct users. The block storage service creates the backup copy of the portion of data stored in the block level storage for the particular one of the plurality of distinct users and stores to the particular destination the backup copy of the portion of data stored in the block level storage for the particular one of the set of distinct users.

Similarly in response to the block storage service receiving input from another one of the set of distinct users specifying a different destination for storing a backup copy of a portion of data stored in the block level storage for the another one of the set of distinct users the block storage service creates the backup copy of the portion of data stored in the block level storage for the another one of the set of distinct users and stores to the different destination the backup copy of the portion of data stored in the block level storage for the another one of the set of distinct users. In some embodiments the particular destination and the different destination are different storage systems remote from one another.

Generally speaking virtualized computing which may also be referred to as virtual computing or virtualization may refer to techniques for configuring a physical computer system so that it appears from a software perspective to behave like multiple independent virtual computer systems. Virtualized computing may be distinguished from a conventional multitasking operating system OS . A typical OS may provide a number of protected memory spaces in which different processes may execute without interfering with one another as well as a common set of privileged routines to manage execution of those processes and coordinate access to system resources. By contrast virtualized computing techniques may be employed to configure multiple virtual machines each of which may execute its own operating system which may be different for different virtual machines. Access to these machines may then be distributed to different users over a network.

By decoupling the configuration and operation of a virtual machine from the underlying physical hardware on which the virtual machine executes virtualized computing may enable a user to configure a virtual machine according to a defined set of specifications and to recreate the previously configured virtual machine at a later time all without altering the configuration of the underlying physical hardware. Embodiments discussed below allow among other uses of an importable snapshot the importation of a snapshot image to for use in recreating a volume used by a virtual machine.

An example of a system that may be configured to implement virtualized computing is illustrated in . In the illustrated embodiment physical system includes a processor coupled to a system memory . For example processor may correspond to any type of microprocessor configured to execute instructions defined by a particular instruction set architecture ISA such as the x86 x64 ISA the PowerPC ISA the SPARC ISA the ARM ISA or any other suitable ISA. System memory may correspond to any type of storage device configured to store data and instructions executable by processor . For example system memory may include any of various types of random access memory RAM read only memory ROM non volatile memory e.g. flash memory magnetic memory or any other suitable type of memory.

System memory may be configured to store instructions and data that when executed by processor or another processor are configured to implement an operating system and virtualization module . Generally speaking operating system may correspond to any suitable type of operating system such as a version of Microsoft Windows Apple MacOS Unix Linux or another operating system. Typically operating system may be configured to serve as an interface between applications and the resources provided by the computer system such as memory mass storage devices communications devices system services and the like.

Virtualization module may be configured to implement an environment within which multiple different virtual machines may operate. Virtualization module may also be referred to as a hypervisor or a virtual machine monitor. In the illustrated embodiment virtualization module may be implemented as a distinct layer of software from operating system a configuration that may be referred to as a hosted hypervisor. In other embodiments rather than running in a distinct layer virtualization module may be integrated with operating system in a configuration that may be referred to as a native hypervisor. Some examples of hosted hypervisor implementations of virtualization module may include VMware ESX ESXi VMware Fusion Microsoft Virtual PC VirtualBox and Parallels Desktop Some examples of native hypervisor implementations may include Xen VMware Infrastructure Logical Domains Hypervisor and Parallels Server . Other examples are possible and contemplated.

In the illustrated embodiment virtualization module is configured to implement a number of virtual machines as well as a virtual network virtual storage and a web services interface . Examples of each of these elements will be discussed in turn it being noted that numerous variations and alternative configurations are possible. In various embodiments various elements may be referred to using alternative terminology. For example individual virtual machines may correspond to instances and the state of various virtual machines e.g. their applications data and configuration may correspond to Machine Images or MIs. These instances can support distinct users.

It is noted that processes that implement various virtualized elements such as virtual machines virtual network and virtual storage may be configured to execute on different physical hardware than virtualization module itself. For example virtualization module may be configured to employ remote procedure calls or other techniques to cause a process or thread corresponding to a particular virtual machine or any other virtualized element to be executed on a different physical system that possibly may have a different configuration than physical system .

Any number of virtual machines may be deployed depending on the resource capabilities of the underlying physical system as well as virtualization module . Generally speaking each of virtual machines may be configured to host its own copy of an operating system and applications which may execute independently of the other virtual machines . For example illustrates virtual machine as including a virtual operating system as well as one or more applications . Virtual operating system may correspond to any suitable operating system which may include any of the types of operating systems mentioned above with respect to operating system . Virtual operating system may also be distinct from the underlying operating system that executes on physical computer system . For example virtual operating system and operating system may be completely different operating systems. Alternatively they may correspond to the same type of operating system but may each have distinct copies of data structures and or executable code and may be configured to execute separately from one another.

Each virtual machine may be configured to operate as though it were an independent physical machine possessing those resources of physical system that have been allocated to the virtual machine . For example virtual machine may be configured to execute a version of Microsoft Windows and one or more Windows applications while virtual machine may be configured to execute a version of Linux and one or more Linux applications. In some embodiments the operating systems and applications executing on a given virtual machine may be incapable of discerning that they are running in a virtual rather than a physical system. Thus virtualization may be performed transparently with respect to each virtual machine .

In various embodiments virtualization module may be configured to cause virtual machines to be instantiated and destroyed in response to configuration requests received by virtualization module e.g. from clients that may be external to physical system . The client may correspond to a process executing on behalf of a user either on physical system or on a different system configured to communicate with physical system e.g. via a network.

In various embodiments the client s request may include configuration parameters for the requested given virtual machine . For example the client may specify particular resources for the given virtual machine such as an amount of memory a particular level of processor performance or the like. Alternatively the client may specify a particular type or class of virtual machine from among a set of available configurations. For example virtualization module may present generic small medium large and or other types of virtual machine configurations for selection by the client each having defined memory performance and or other characteristics. In some embodiments these characteristics may include a destination location or destination locations for storing backup copies of portions of virtual storage or other data structures associated with a virtual machine . In some embodiments these characteristics may include a source location or source locations for retrieving backup copies of portions of virtual storage or other data structures associated with a virtual machine . Such source and destination locations can be locally hosted within physical system or accessed remotely e.g. via a network.

In some embodiments the client s request may also include information regarding how the state of the given virtual machine should be initialized. For example the request may specify the operating system that should be booted the application s that should be available and or any data libraries or other inputs that may be needed to perform the client s computation. In various embodiments the client may select an initialization state from a number of options e.g. may select from a list of available operating systems may provide a detailed memory image reflecting the desired initial state of the given virtual machine e.g. reflecting executable code and or data or a combination of these or other techniques. In various embodiments the initial state may be retrieved from a backup copy stored at an importation location or importation locations for storing backup copies of portions of virtual storage or other data structures associated with a virtual machine .

In response to a request to create or initialize a given virtual machine virtualization module may be configured to allocate resources of physical system to the given virtual machine such as by setting aside a certain amount of system memory to be used by the given virtual machine as its own virtual system memory. Virtualization module may also initialize the given virtual machine . For example the given virtual machine may be initialized according to the client s specification or to a default state.

Once configured and initialized which may occur concurrently or as part of the same operation given virtual machine may then begin operating. For example operating system may boot or resume from a previously defined state. Application s may execute either in an interactive fashion i.e. receiving input from the client during operation or autonomously. In various embodiments as described below virtualization module may provide given virtual machine with access to storage as well as a virtual network that may allow given virtual machine to communicate with other virtual machines .

At some point a request to terminate given virtual machine may occur. For example a client may initiate such a request when the task for which given virtual machine was configured has completed or for some other reason. Alternatively virtualization module may initiate such a request for example in the event that the machine becomes unstable or violates some aspect of the client s terms of use. In response given virtual machine may be terminated and its resources freed for use by other virtual machines. For example virtualization module may attempt to perform an orderly shutdown of given virtual machine if possible. Virtualization module may archive or otherwise preserve the state of given virtual machine information about its configuration within the virtual computing environment and or any other salient information. Once these or any other housekeeping tasks have completed given virtual machine may cease to exist as an entity.

In addition to providing for the configuration and operation of virtual machines virtualization module may be configured to provide for virtualized network connectivity among virtual machines via virtual network . For example virtual network may be configured to emulate a local area network LAN or any other suitable type or topology of network. Through virtual network virtual machines may be configured to communicate with one another as though they were physical machines connected to a physical network.

In some embodiments virtualization module may be configured to bridge virtual networks implemented on different physical systems in order to implement virtual networks of large scale. For example virtual machines implemented on distinct physical systems may nonetheless be able to communicate with one another as part of the same general virtual network . In such embodiments different instances of virtualization module may be configured to communicate information with one another via a physical network connecting their respective physical systems in order to implement virtual network communication among their virtual machines .

Virtualization module may also be configured to provide virtual machines with access to mass storage shown as virtual storage . For example virtual storage may be configured as a block storage device e.g. a logical storage volume a file system a database or any other suitable type of mass storage that may be presented to a computer system. Embodiments of virtual storage may also be referred to generically as mass storage resources. In some embodiments virtual storage may be implemented as a virtual network connected device accessible to virtual machines via virtual network . For example virtual storage may be configured as a virtualized network attached storage NAS device as a virtualized storage area network SAN as a storage service accessible through Internet protocols e.g. as a web services based storage service or in any other suitable fashion. In some embodiments virtual storage may be implemented via a service either locally implemented or remotely accessible across a network.

In some embodiments management of virtual storage may be handled by virtualization module directly. For example virtualization module may include the functionality necessary to implement a virtualized volume server file server or other type of mass storage architecture. In other embodiments virtualization module may instead provide interfaces through which virtual machines may access storage that exists and is managed externally to virtualization module . For example some other software component executing on physical system or another system may be configured to provide mass storage as well as an application programming interface API through which to access storage. Virtualization module may then be configured to pass storage access requests from virtual machines to this external API.

Virtualization module may be configured to support a number of different types of interfaces through which a client may interact with a particular virtual machine . For example virtualization module may be configured to perform basic terminal emulation to allow a client to provide textual input to virtual machines and to return textual output for display to the client. In cases where a given virtual machine supports more sophisticated user interfaces such as windowing systems or other types of graphical user interfaces GUIs that may be hosted by software executing within given virtual machine virtualization module may be configured to pass input from the client s input devices e.g. keyboard pointing device etc. to given virtual machine and to pass graphical output to the client.

In some embodiments virtualized computing may be offered as an on demand paid service to clients. For example an enterprise may assemble and maintain the various hardware and software components used to implement virtualized computing and may offer clients access to these resources according to various pricing models e.g. usage based pricing subscription pricing etc. . Thus clients may have access to a range of virtual computing resources without having to incur the costs of provisioning and maintaining the infrastructure needed to implement those resources. Generally speaking to provide virtualized computing services to clients virtualization module may be configured to present a virtualized computing service API to clients through which the clients may submit various types of requests for virtualized computing services. For example as described in greater detail below clients may submit requests via the virtualized computing service API for virtualized computing resources to be instantiated initialized and or deleted. Clients may also submit requests for various computations to be performed by virtualized computing resources.

In the embodiment illustrated in virtualization module may be configured to present virtualized computing resources such as virtual machines to clients as part of a web service via web services interface . Generally speaking a web service may refer to computing functionality that is made available to clients through calls made by clients to one or more web services endpoints where the web services endpoints are addressable by the clients according to an application level Internet based transport protocol such as the Hypertext Transfer Protocol HTTP . For example a web services endpoint may implement a particular API that defines the web services operations that clients may request. In some embodiments web services interface may be configured to implement the addressable web services endpoint s and may include functionality configured to receive and send web services request and response information with respect to clients.

To request that the web service perform a particular operation clients may format the request in the manner specified by the API and convey the request to the addressable endpoint. For example the endpoint may be addressable according to a Uniform Resource Indicator URI of the form endpoint.domainname.toplevel such as e.g. virtualcomputing.company.com. Alternatively the endpoint may be addressable according to a numeric form address such as e.g. an IP address.

In various embodiments web services interface may be configured to be invoked by clients in any of a number of suitable ways. For example web services interface may be configured to implement a Representational State Transfer REST style web services architecture. Generally speaking in a REST architecture the requested web services operation and its various parameters may be appended to the web services call that is made to the web services endpoint according to the transport protocol. For example the details of the requested operation may be included as parameters of an HTTP request method such as GET PUT or POST. Alternatively web services interface may be configured to implement a document or message oriented architecture. For example the details of the requested operation may be formatted by the client as an eXtensible Markup Language XML document and encapsulated using a version of the Simple Object Access Protocol SOAP . Upon receiving such a document web services interface may be configured to extract the details of the requested web services operation and attempt to perform the operation.

In the context of virtualized computing as a web service it is contemplated that the API implemented by web services interface may support any or all of the types of operations made available to clients by virtualization module including storage operations such as the execution of requests to make a backup copy of a volume or restore a volume from a backup copy. For example the API may support the configuration initialization and termination of virtual machines as discussed above. Additionally in some embodiments the API may support the exchange of input and output textual graphical audio or otherwise between the client and virtual machines or other virtualized resources.

Referring now to a network diagram for an example embodiment in which multiple computing systems execute programs and access storage is depicted. A program execution service manages the execution of programs on various host computing systems located within a data center and a block storage service works in conjunction with multiple other storage systems at the data center to provide block level storage to those executing programs. Multiple remote and local storage systems are used to store additional copies such as backup copies of at least some portions of at least some block data storage volumes.

In this example embodiment data center includes a number of racks and each rack includes a number of host computing systems as well as an optional rack support computer system . Host computing systems on the illustrated rack each host one or more virtual machines as well as a distinct node manager module associated with the virtual machines on that host computing system. Node manager module manages the virtual machines associated with the host computing system on which node manager module resides. One or more other host computing systems also each host one or more virtual machines in this example. Each virtual machine may act as an independent computing instance for executing one or more program copies not shown for a user not shown such as a customer of a program execution service accessed through a web services interface such as the web services interface discussed with respect to .

In addition the example data center of includes host computing systems that do not include distinct virtual machines but may nonetheless each act as a computing node for one or more programs not shown being executed for a user. A node manager module executing on a computing system not shown distinct from host computing systems and is associated with host computing systems and to manage computing nodes provided by those host computing systems in a manner similar to the node manager modules for host computing systems . Rack support computer system may provide various utility services for other computing systems local to its rack e.g. long term storage metering and other monitoring of program execution and or non local block data storage access performed by other computing systems to the local rack etc. as well as possibly to other computer systems located in the data center. Each of computing system and may also have one or more local attached storage devices not shown such as to store local copies of programs and or data created by or otherwise used by the executing programs a well as various other components.

An optional program execution service PES system manager is also illustrated. PES system manager is a computing system executing a PES system manager module to provide assistance in managing the execution of programs on the computing nodes provided by host computing systems and or optionally on computing systems not shown located within one or more other data centers or other remote computing systems not shown available over a network . PES system manager may provide a variety of services in addition to managing execution of programs including the management of user accounts e.g. creation deletion billing collection of payment etc. . PES system manager may further provide the registration storage and distribution of programs to be executed as well as the collection and processing of performance and auditing data related to the execution of programs. In some embodiments PES system manager may coordinate with node manager modules and to manage program execution on computing nodes associated with node manager modules and .

Data center also includes a block storage service which is discussed in greater detail below with respect to for providing block level data storage to programs executing on computing nodes provided by host computing systems and located within data center or optionally computing systems not shown located within one or more other data centers or other remote computing systems not shown available over a network .

In one embodiment data center communicates with a remote storage system which includes an operating system supporting a data store manager . Remote storage system may be under the control of the same entity as local storage system or under the control of a different entity. Data store manager receives and stores snapshot copies from block storage service . In some embodiments a block storage adapter is executed within remote storage system to facilitate communication with block storage service .

Returning to block level storage manager also contains a backup manager . Backup manager provides an interface for creating storing managing and importing snapshots and other backup images of data stored in volumes of block storage service . In one embodiment backup manager module stores snapshots to storage systems such as snapshot copies on local storage system and snapshot copies on remote storage system . Backup manager may provide a variety of services related to providing backup storage functionality including the management of user accounts e.g. authorization creation deletion billing collection of payment etc. . In one embodiment backup manager requires proof of authorization before allowing remote storage system to become associated with a computing instance. Further backup manager may provide pricing influenced selection in which billing rates associated with performance particular operations on particular storage systems influence the choice of a storage system for the performance of a particular task. For example backup manager may be programmed to preferentially perform storage of snapshot copies on remote storage system over storage of snapshot copies on local storage system on the basis of higher prices associated with storage of snapshot copies on local storage system .

Backup manager module includes a backup manager interface for receiving requests from computing instances or users of a web service interface such as web services interface of requesting the performance of backup operations. Such requests will in one embodiment specify a destination such as local storage systems and other configuration parameters for storing snapshot copies of at least a portion of data stored in volumes of block level storage provided by block storage service for the user of a computing instance such as one of virtual machines . Such requests may be embodied as API calls from a web services interface such as web services interface of . The requests can specify a storage location and a storage granularity or other parameters as discussed below. Backup manager interface is also configured to receive requests to restore volumes in block storage service from snapshots such as snapshot copies or other backup copies on remote storage system and snapshot copies on local storage system .

A storage granularity refers to the number frequency size or comprehensiveness of a backup or backup series requested to be created and stored at a particular location. At one setting of granularity a full series of full backup snapshots of a selected volume can be stored at a particular location. Alternatively at another setting of granularity portions of snapshots of a volume can be created and stored at a location. These portions of data can include a particular data structure such as a file or a block range defined to meet particular backup parameters such as an arbitrary block scheme or only the block ranges where data has been modified since a last backup . Additionally the ability to flexibly specify storage granularities includes the ability specify that a first snapshot representing a volume or a portion of a volume will be stored at a first storage location and that a second snapshot of the same volume or portion of a volume or a different portion of the volume will be routed to a second location. A configuration file includes the details associated with performing various backup and restore operations. Such details can include the format of APIs associated with a particular storage system the location of a storage system at a particular storage destination or importation location or information specifying features of a backup such as backup granularity.

Backup manager module further includes a backup creation module for creating snapshots of volumes or portions of volumes as specified by the input received through backup manager interface . The backup manager module also includes a backup storage manager . Backup storage manager performs the transmission and storage of snapshots such as snapshot copies in local storage system or snapshot copies in remote storage system . Backup storage manager may be configured to communicate with local storage system and remote storage system using any of a wide variety of transport layer protocols e.g. TCP UDP etc. and application layer protocols e.g. HTTP FTP XML RPC SOAP etc. which will vary from embodiment to embodiment. In some embodiments backup storage manager transmits snapshot copies to local storage systems across local network . Similarly backup storage manager transmits snapshot copies to remote storage system over network .

In some embodiments backup storage manager is configured to communicate directly with data store manager using an API protocol for storage calls that is supported on both backup storage manager and data store manager . In other embodiments the API protocol for storage calls that is used by backup storage manager is not directly supported on data store manager and a block storage adapter or a backup storage adapter is used to facilitate the interoperability of data store manager and backup storage manager . In some embodiments different computing instances on the same host node will communicate with storage systems for different storage transactions using distinct API protocols. Backup manager additionally includes a data import manager for restoring or importing volumes or portions of volumes as received as snapshot copies from local archival storage system or snapshot copies received from remote archival storage system .

The processes steps described below with respect to illustrate various steps performed by an embodiment of a system for providing backup services for copies of data stored in block level storage to computing instances supporting a group of distinct users. An embodiment of such a system provides backup copy functions for creating backup copies of data stored in the block level storage by the computing instances for the distinct users and for storing the backup copies in different destination locations specified by respective ones of the distinct users.

The process of is portrayed for the sake of clarity as a linear series of operations. Those skilled in the art will in light of having read the present disclosure however discern that the operations of may be performed in an iterative fashion in order to process multiple requests. As an example of operations that may be performed iteratively the requesting receiving and importing operations may be performed in an iterative loop until all requested data is received. Embodiments providing such iterative performance do not depart from the scope of the current disclosure.

Further some operations omitted for the sake of clarity from the discussion of will be implemented as part of embodiments. As an example of operations omitted from in the interest of clarity one skilled in the art will realize in light of having read the present disclosure that the procedure of may include receipt verification steps and may include the ability to select importation from alternative data sources in response to a failure to receive data from a selected source or in response to a suboptimal delay in receiving data from the source. Embodiments providing such additional operations do not depart from the scope of the current disclosure.

Storage system is in one embodiment similar to local storage system of . Storage system communicates with block storage service using internal network . Similarly storage system stores snapshot copy and snapshot copy . Storage system is in one embodiment similar to storage system of . Storage system communicates with block storage service using network and internal network . In one embodiment a block storage adapter provides the ability for storage system to receive and respond to storage API calls from block storage system using an API that is supported by storage system while storage system uses an API that is different from the API used by storage system and is used by block storage service .

A series of snapshot copies such as snapshot copies stored on storage system will in one embodiment result from input such as a set of backup requests from user of a computing instance attached to one or more volumes supported by block storage service . Such a backup request can specify a particular destination such as storage system for storing all of a set of backup copies of data stored in volume A on the block level storage of block storage service . The series of snapshot copies portrayed as snapshot copies results from a user requesting a series of whole volume snapshots wherein each of snapshot copies represents the complete state of volume A at a particular point in time.

Responsive to such a request block storage service using a backup creation module such as backup creation module of discussed above creates snapshot A at a time tand stores snapshot A copy on storage system over internal network using a backup storage manager such as backup storage manager of . Snapshot copy A is thereby preserved as a backup copy of the state of volume A at time t. In some embodiments block storage service then deletes or releases snapshot A to conserve space on block storage service .

Subsequently at a time t block storage service creates snapshot A and stores snapshot A copy on storage system over internal network . Snapshot A copy is thereby preserved as a backup copy of the state of volume A at time t. In some embodiments block storage service then deletes or releases snapshot A to conserve space on block storage service .

Subsequently at a time t block storage service creates snapshot An and stores snapshot An copy on storage system over internal network . Snapshot An copy is thereby preserved as a backup copy of the state of volume A at time t. In some embodiments block storage service then deletes or releases snapshot An to conserve space on block storage service . Thus the user request for a series of whole volume backup copies on storage system is fulfilled by the creation and storage of snapshot copies . Each of snapshot copies represents the complete state of volume A at a particular point in time.

Additionally a series of snapshot copies such as snapshot copy stored on storage system and snapshot copy stored on storage system will in one embodiment result from input such as a backup request from another user employing another computing instance supported by block storage service . Such a backup request can specify a group of destinations such as storage system and storage system for storing alternating members of a set of backup copies of data stored in volume B on the block level storage of block storage service . The series of snapshot copies portrayed as snapshot copies results from a user requesting a series of whole volume snapshots wherein each of snapshot copies represents the complete state of volume B at a particular point in time. The creation of snapshot copies thereby results in a backup copy set that alternates loading between to multiple destinations e.g. storage system and storage system .

Responsive to such a request block storage service creates snapshot B at a time tand stores snapshot B copy on storage system over internal network . Snapshot B copy is thereby preserved as a backup copy of the state of volume B at time t. In some embodiments block storage service then deletes or releases snapshot B to conserve space on block storage service .

Subsequently at a time t block storage service creates snapshot B and stores snapshot B copy on storage system over internal network and network . Snapshot B copy is thereby preserved as a backup copy of the state of volume B at time t. In some embodiments block storage service then deletes or releases snapshot B to conserve space on block storage service . Thus the user request for a series of whole volume backup copies on storage system and storage system is fulfilled by the creation and storage of snapshot copies . Each of snapshot copies represents the complete state of volume B at a particular point in time.

Further a series of snapshot copies such as snapshot N copy stored on storage system and snapshot N copy stored on storage system will in one embodiment result from input such as a backup request from yet another user employing another computing instance supported by block storage service . Such a backup request can specify a group of destinations such as storage system and storage system for storing duplicate members of a set of backup copies of data stored in volume N on the block level storage of block storage service . The series of duplicate snapshot copies portrayed as snapshot copies results from a user requesting a series of whole volume snapshots wherein each of snapshot copies represents the complete state of volume N at the same point in time. The creation of snapshot copies thereby results in a backup copy set that provides redundant availability between storage system and storage system .

Responsive to such a request block storage service creates snapshot N at a time tand stores snapshot N copy on storage system over internal network and network . Snapshot copy N is thereby preserved as a backup copy of the state of volume N at time t. Block storage service then stores snapshot N copy on storage system over internal network . Snapshot N copy is thereby preserved as a backup copy of the state of volume N at time t. In some embodiments block storage service then deletes or releases snapshot N to conserve space on block storage service .

Storage system stores chunk copies from snapshot as well as file copies from snapshot . Storage system is in one embodiment similar to storage system of . Storage system communicates with block storage service using network . Similarly storage system stores chunk copies from snapshot and file copies from snapshot . Storage system is in one embodiment similar to storage system of . Storage system communicates with block storage service using network . In one embodiment a backup storage adapter provides the ability for block storage service to send requests as API calls to and receive responses to storage API calls from storage system in a storage API format that is used by storage system but is not used by storage service without the presence of storage adapter . In one embodiment storage system and block storage service can communicate using a common API format without the services of backup storage adapter . In an alternative embodiment backup storage adapter provides the ability for block storage service to send requests as API calls to and receive responses to storage API calls from storage system in a storage API format that is used by storage system but is not used by storage service without the presence of storage adapter . Storage system and storage system may be controlled by the same or different entities.

A series of chunk copies such as chunk copies stored on storage system and storage system will in one embodiment result from input such as a backup request from a user of a computing instance attached to one or more volumes providing access to files or data chunks such as those supported by block storage service . Such a backup request can specify destinations such as storage system and storage system for storing respective ones of a set of backup copies of portions of data stored in volume A on the block level storage of block storage service . Chunk copies result from a user requesting that parts of a snapshot defined by block ranges are distributed to multiple storage systems. Taken together chunk copies represent the complete snapshot of a state of volume A at a particular point in time.

Responsive to such a request block storage service creates snapshot A at a time tand stores both chunks on storage system and chunks on storage system . Chunks are thereby preserved as a backup copy of the state of volume A at time t. In some embodiments block storage service then deletes or releases snapshot A to conserve space on block storage service .

Additionally a series of backup file copies such as file copies stored on storage system and file copies stored on storage system will in one embodiment result from input such as a backup request from a users of computing instances attached to one or more volumes supported by block storage service . Such a backup request can specify a group of destinations such as storage system and storage system for duplicate members of a set of backup copies of data stored in volume B on the block level storage of block storage service . The series of backup copies portrayed as file copies and file copies results from a user requesting the creation of a snapshot wherein storage of each file within the snapshot is individually duplicated at two locations and both the set of file copies and the set of file copies represents the complete state of volume B at a particular point in time. The creation of file copies and file copies thereby results in a backup copy set that provides redundant backup of volume B

Responsive to such a request block storage service creates snapshot B at a time tand stores file copies on storage system over network . Block storage service stores file copies on storage system over network . File copies and file copies are thereby preserved as redundant backup copies of the state of volume B at time t. In some embodiments block storage service then deletes or releases snapshot B to conserve space on block storage service .

A user of a computing instance supported by block storage service can request restoration of volume A from one of snapshot copies selecting a particular one of snapshot copies based for instance on the point in time to which the user of the computing instance would like to see volume A restored. Responsive to such a request block storage service determines required configurations for creating volume A such as the importation location of the preferred one of snapshot copies e.g. snapshot An copy . Block storage service creates an empty recipient volume labeled as Volume A . Block storage service then sends retrieval requests to storage system requesting that the content of snapshot An copy be sent to block storage service . In one embodiment as content of snapshot An copy is received on block storage service content of snapshot copy is deposited as snapshot AN and then transferred to volume A . In one embodiment content received and transferred to volume A may be made available and supplied to a user of a computing instance prior to completion of receipt of all data from snapshot copy into snapshot AN . Additionally in one embodiment storage system and block storage system can communicate using a shared API protocol.

Similarly storage system holds snapshot copy and storage system holds snapshot copy each of which represents a complete state of a Volume B at a particular point in time. In one embodiment snapshot copies are created in a manner similar to that discussed above with respect to snapshot copies of .

A user of a computing instance supported by block storage service can request restoration of volume B from one of snapshot copies selecting a particular one of snapshot copies based for instance on the point in time to which the user of the computing instance would like to see volume B restored. Responsive to such a request block storage service determines required configurations for creating volume B such as the importation location of an appropriate one of snapshot copies . Block storage service creates an empty recipient volume labeled as Volume B . Block storage service then sends retrieval requests to storage system requesting that the content of snapshot copy be sent to block storage service . In one embodiment as content of snapshot copy is received on block storage service content of snapshot copy is deposited as snapshot B and then transferred to volume B

Additionally storage system holds snapshot copies each of which represents a complete state of a Volume N at a particular point in time. In one embodiment snapshot copies are created in a manner similar to that discussed above with respect to snapshot copies of .

A user of a computing instance supported by block storage service can request restoration of volume N from one of snapshot copies selecting a particular one of snapshot copies based for instance on the point in time to which the user of the computing instance would like to see volume N restored. Responsive to such a request block storage service determines required configurations for creating volume N such as the importation location of snapshot copies . Block storage service creates an empty recipient volume labeled as Volume N . Block storage service then sends retrieval requests to storage system requesting that the content of snapshot N copy be sent to block storage service . In one embodiment as content of snapshot N copy is received on block storage service content of snapshot copy is deposited as snapshot N and then transferred to volume N . In one embodiment storage system and block storage system can communicate using a block storage adapter to translate API requests formatted for a protocol used by block storage system into API requests formatted for a protocol used by storage system

A user of a computing instance supported by block storage service can request restoration of volume A from a snapshot constructed from chunk copies . Responsive to such a request block storage service determines required configurations for creating volume A such as the importation location of chunk copies on storage system and storage system . Block storage service creates an empty recipient volume labeled as Volume A . Block storage service then sends retrieval requests to storage system and storage system requesting that the content of chunk copies be sent to block storage service .

In one embodiment as content of chunk copies is received on block storage service content of chunk copies is deposited as snapshot A containing chunks and then transferred to volume A as chunks . In one embodiment content received and transferred to volume A may be made available and supplied to a user of a computing instance prior to completion of receipt of all data from chunk copies into snapshot A A.

A user of a computing instance supported by block storage service can request restoration of volume B from snapshot B constructed from file copies and . Responsive to such a request block storage service determines required configurations for creating volume B such as the importation location of file copies and on storage system and storage system . In one embodiment locations from which to import individual ones of file copies and can be chosen on the basis of distribution of loading to storage system and storage system or other criteria such as server reliability or responsiveness.

Specifically the ability to restore volume B from snapshot B constructed from file copies residing on storage system and file copies residing on storage system provides several forms of storage flexibility. For instance if retrieval of file copies residing on storage system becomes slowed or if storage system become entirely non responsive importation of data for snapshot B can be accelerated through retrieval of file copies residing on storage system . Alternatively the existence of both file copies residing on storage system and file copies residing on storage system may allow storage management in which file copies are initially created on a faster storage server and slowly copied to a slower server eventually being deleted from the faster server over time which may in some embodiments be measured from a time of last use or a time of creation. Similarly embodiments without departing from the scope of the present disclosure execute multiple copy chunk distribution analogous to the distribution and use of file copies residing on storage system and file copies residing on storage system

Block storage service creates an empty recipient volume labeled as Volume B . Block storage service then sends retrieval requests to storage system and storage system requesting that the content of selected ones of storage system and storage system be sent to block storage service .

In one embodiment as content of the selected ones of file copies and is received on block storage service content of the selected ones of file copies and is deposited as snapshot B containing files and then transferred to volume B as files . In one embodiment content received and transferred to volume B may be made available and supplied to a user of a computing instance prior to completion of receipt of all data from the selected ones of file copies and into snapshot B B.

It is contemplated that in some embodiments any of the methods techniques or components described above may be implemented as instructions and data capable of being stored or conveyed via a computer accessible medium. Such methods or techniques may include for example and without limitation the various methods of a block storage service providing block level storage to a set of distinct computing instances for a set of distinct users in which embodiments provide both a backup copy function for creating backup copies of data stored in the block level storage by the set of distinct computing instances for the set of distinct users and a storage function for storing the backup copies in different destination locations specified by respective ones of the set of distinct users such as those performed by the elements and methods described above and shown in or suitable variations of such elements and methods. Such instructions may be executed to perform specific computational functions tailored to specific purposes e.g. processing web services traffic performing high precision numerical arithmetic etc. as well as higher order functions such as operating system functionality virtualization functionality network communications functionality application functionality and or any other suitable functions.

One example embodiment of a computer system including computer accessible media is illustrated in . Computer system may correspond to an example configuration of physical computer system shown in . Correspondingly in various embodiments the functionality of any of the various modules or methods described above e.g. as provided by operating system virtualization module virtual machines and or other elements described above may be implemented by one or several instances of computer system . Similarly the various elements of data center such as nodes computing systems block storage service local storage systems and other functional units of data center may be implemented by one or several instances of computer system .

In particular it is noted that different elements of the system shown in may be implemented by different computer systems . For example virtualization module may be implemented on one computer system while virtual machines may execute on a different computer system under the control of virtualization module . Similarly each of several nodes and several computing systems may be implemented by different computer systems while each of block storage service remote storage systems and local storage systems may also be implemented by different computer systems . In varying computing system embodiments individual computing systems will be constructed that will omit various of the parts show in and include others omitted in .

In the illustrated embodiment computer system includes one or more processors coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface . In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processor capable of executing instructions. For example in various embodiments processors may be a general purpose or embedded processor implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store instructions and data accessible by processor . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment instructions and data implementing desired functions methods or techniques such as those described above are shown stored within system memory as code . It is noted that in some embodiments code may include instructions and data implementing desired functions that are not directly executable by processor but are represented or encoded in an abstract form that is translatable to instructions that are directly executable by processor . For example code may include instructions specified in an ISA that may be emulated by processor or by other code executable on processor . Alternatively code may include instructions procedures or statements implemented in an abstract programming language that may be compiled or interpreted in the course of execution. As non limiting examples code may include code specified in a procedural or object oriented programming language such as C or C a scripting language such as perl a markup language such as HTML or XML or any other suitable language.

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to network such as other computer systems for example. In various embodiments network interface may support communication via wired or wireless general data networks such as any suitable type of Ethernet network for example via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

In some embodiments system memory may be one embodiment of a computer accessible storage medium configured to store instructions and data as described above. However in other embodiments instructions and or data may be received sent or stored upon different types of computer accessible storage media. Generally speaking a computer accessible storage medium may include storage media or memory media such as magnetic or optical media e.g. disk or CD DVD ROM coupled to computer system via I O interface . A computer accessible storage medium may also include any volatile or non volatile storage media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc that may be included in some embodiments of computer system as system memory or another type of memory. A computer accessible storage medium may generally be accessible via transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface .

Although the embodiments above have been described in considerable detail numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

