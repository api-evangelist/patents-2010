---

title: Minimizing latency in live virtual server migration
abstract: Techniques are provided to facilitate faster live migration of a virtual server from one physical server to another physical server by pausing IO activity of the virtual server and slowing memory state changes for CPU-bound activity of the virtual server during the live migration.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745204&OS=08745204&RS=08745204
owner: Cisco Technology, Inc.
number: 08745204
owner_city: San Jose
owner_country: US
publication_date: 20100312
---
The present disclosure relates to live migration of a virtual server from one physical server to another physical server.

Live virtual server migration between physical servers is a very valuable feature made possible by virtualization. The ability to copy the running state of a virtual server from one physical server to another without dropping existing sessions of the virtual server enables capabilities such as physical server shutdown localization of virtual servers where the optimal virtual server performance is possible etc.

For live migration a virtual server disk image is made accessible to the source and target physical servers. For faster copy of the image and the memory state of the virtual server a common practice is to deploy a dedicated 1 Gigabit G or 10 G link between the physical servers in order to copy the image and or the memory state from the source physical server to the target physical server.

Once the memory state is migrated the virtual server does not immediately become active at the new location since while the migration is occurring the state on the server is changing. Therefore the migration process copies the image at a point in time and then the changes on the source physical server are monitored. These changes are then replicated at the target physical server. The continuous change in state delays the live virtual server migration.

Techniques are provided herein to manage live migration of a virtual server from a first computing apparatus to a second computing apparatus. At the first computing apparatus in which a virtual server is running and is to be migrated to the second computing apparatus processes of the virtual server are managed during live migration so as to expedite transition of the virtual server from the first computing apparatus to the second computing apparatus. Input output activity of the virtual server for input output intensive processes is paused during the live migration and memory state changes for the virtual server are slowed for processor intensive processes during the live migration.

Reference is first made to . shows a computing environment comprising a plurality of physical servers N . The physical servers N are connected to a network e.g. a local area network or one or more local area networks and wide area networks i.e. the Internet.

Each physical server is a computing apparatus and comprises one or more data processors a network interface unit and memory . There may be other components in each physical server as would appreciated by one with ordinary skill in the art but for purposes of describing the virtual server migration techniques these components need not be shown and described.

The processor s in each physical server is for example one or more microprocessors suitable for a virtual computing environment to support multiple processes. Stored in the memory of physical server are instructions and data associated with one or more virtual servers K . In addition instructions are stored or encoded in memory of physical server for a migration management process . The instructions for the migration management process may be referred to herein as migration management process logic. The migration management process manages the migration of a virtual server e.g. one of the virtual servers K to another physical server. The processor s execute the instructions stored in memory for the migration management process to perform the management of a live migration of a virtual server as described herein.

The processor s may be a programmable processor or a fixed logic processor. In the case of a programmable processor the memory is any type of tangible processor readable memory e.g. random access read only etc. that is encoded with or stores instructions. Alternatively the processor s may a fixed logic processing device such as an application specific integrated circuit or digital signal processor that is configured with firmware comprised of instructions that cause the processor s to perform the functions described herein. Thus instructions for the migration management process may take any of a variety of forms so as to be encoded in one or more tangible media for execution such as with fixed logic or programmable logic e.g. software computer instructions executed by a processor and the processor s may be a programmable processor programmable digital logic e.g. field programmable gate array or an application specific integrated circuit ASIC that comprises fixed digital logic or a combination thereof. In general the instructions for the migration management process may be embodied in a processor readable medium that is encoded with instructions for execution by a processor e.g. processor that when executed by the processor s are operable to cause the processor to perform the functions described herein in connection with process .

The operations of the migration management process are described hereinafter in connection with . In the example described herein the migration management process is executed to migrate virtual server K from physical server to physical server . In this example physical server is referred to as a source physical server and physical server is referred to as a target or destination physical server with respect to the migration of virtual server K . The virtual server K could just as well be migrated to any of the other physical servers but physical server is chosen as one example. Moreover the physical servers N may be within one local area network or in different local area networks that are remote from each other or a combination thereof and connected to each other via the Internet.

Each of the other physical servers N may support one or more virtual servers. For example physical server executes virtual servers M and physical server N executes virtual servers P .

A virtual server may serve operations for one or more clients. Those clients may be local or remote to the physical server in which the virtual server is running. To this end shows a plurality of clients L connected to network . The clients may be software applications running on a personal computer a hand held computing device with network connectivity a wireless mobile communication device or a server computer. Any given virtual server on any of the physical servers N may be serving one or more of the clients L .

Reference is now made to . shows a more detailed software block diagram for memory of a physical server e.g. physical server . Within a given physical server the memory comprises a working memory area that is allocated for use by various processes running on the physical server. In addition the memory stores instructions for the migration management process . As depicted in some or all of the operations of the migration management process described herein may be part a virtual server manager process also known as a Hypervisor.

A scheduler process controls the allocation of various processes running on the physical server to the working memory area . For example the scheduler process controls the memory allocation also called a memory time slice that is allocated to each virtual server K . The time slice of memory allocation for a virtual server is the amount of time a virtual server is allowed to use the working memory area . The distributed resource scheduler DRS controls allocation of virtual servers across multiple physical servers and is the software entity that may trigger in response to an automated command or a manual command of a system administrator migration of a virtual server to another physical server and also to respond to commands for migrated an incoming virtual server to this physical server.

A virtual server is essentially a collection of data and can be thought of as a data file or in other words a disk image. However the data file is constantly changing according to changes in connections with clients that the virtual server serves and changes in accordance with central processing unit CPU intensive operations performed by the virtual server.

For live migration of a virtual server the virtual server disk image needs to be accessible to both the source physical server and the target physical server. The states of the virtual server which are changing according to ongoing live activity of the virtual server are copied from the source physical server to the target physical server.

The continuous changes in the states of the virtual server can delay the live virtual server migration. The existing connections and running states of processes on the virtual server changes the running state of the virtual server. These changes in server state can be classified as those that are the result of input output TO processes referred to herein as IO bound IO related or IO intensive processes or those that are the result of CPU processes referred to herein as CPU bound processor bound or processor related or processor intensive processes.

For IO bound changes in a virtual server the updates in the state of the virtual server occur due to existing communications between the virtual server and the clients connected to it communications with another virtual server and or communications with other backend servers. In addition other IO intensive activity are those associated with disk IO or storage IO that do not necessarily require network communications. For example a virtual server may be writing to or reading from disk or other storage devices that should be slowed down or paused similar to network IO activity in order to expedite live virtual server migration. The pausing of IO activity may also be used for disk IO. In a virtual computing environment disk IO is not local insofar as the disks are remote and accessed via a network using for example an Internet Small Computer System Interface iSCSI over TCP an Internet Protocol IP based storage networking standard for linking data storage facilities. By carrying SCSI commands over IP networks iSCSI is used to facilitate data transfers over intranets and to manage storage over long distances. iSCSI can be used to transmit data over local area networks LANs wide area networks WANs or the Internet and can enable location independent data storage and retrieval. Other disk IO methods include Fiber Channel or Fiber Channel over Ethernet. In each of these cases the IO can be delayed or slowed down as described herein.

For processor bound processes running on the virtual server the changes in state can occur when the applications on the virtual server are run when the virtual server is scheduled for execution that is when the virtual server is allocated memory on the physical server.

This migration management process is configured to speed up the transition of a virtual server from the source physical server to its target or destination physical server. For IO bound processes of the virtual server the network activity for virtual server is slowed to thereby minimize the changes due to incoming outgoing packets or messages. When network activity is slowed down changes as a result of IO bound processes are slowed down thereby reducing changes between the virtual server image file at the source physical server and the virtual server image file at the target physical server. Similarly for CPU bound virtual machines of the virtual server the scheduling of the virtual server for memory allocation is slowed down in order to deprive the virtual server of execution time thereby slowing down and reducing the changes due to CPU bound processes and consequently speeding up the migration. By managing the IO bound processes and the CPU bound processes of a virtual server during live migration in this manner the image file at the target physical server can more quickly catch up to and match the image file at the source physical server even as the virtual server is continuing to run. Once the two image files are the same that is they have converged then the migration is said to be complete and normal IO bound and CPU bound processing can resume.

A given virtual server may comprise predominantly IO bound processes e.g. a web server predominantly CPU bound processes e.g. a scientific modeling or simulation application or a combination of both IO bound and CPU bound processes. The migration management process is configured to monitor the behavior of a virtual server to determine whether it involves predominantly CPU bound processes predominantly IO bound processes or a combination of both IO bound and CPU bound processes.

The migration management process or the Hypervisor can monitor the clients and server state once the DRS indicates intent to migrate a virtual server to another physical server. As shown in the migration management process or the hypervisor can observe the existing flow of packets to and from the virtual server VS and detect or sniff the incoming and outgoing sequence numbers of the packets. For example a significant amount of traffic inbound packets to virtual server and outbound packets from the virtual server within a given period of time is indicative of IO bound activity. On this basis it can be determined whether the virtual server to be migrated e.g. virtual server K has IO bound characteristics. In addition the migration management process can monitor changes in state of memory allocated to the virtual server in order to determine whether it is changing sufficiently to indicate that the virtual server to be migrated has CPU bound characteristics. In addition or as an alternative the application programming interface API between the virtual server and the Hypervisor may be monitored to determine whether the API calls are indicative of CPU intensive activity of the virtual server.

Reference is now made to for a description at a high level of the operations of the migration management process . At the behaviors of the one or more virtual servers are monitored to determine CPU bound and IO bound characteristics of each virtual server. The operation may be performed on a continuous basis for any virtual server in a physical server that may be subjected to migration to another physical server at some point in time. The hypervisor may perform the operation on a continuous basis. At a command is received to perform live migration of a virtual server to another physical server. At this point the status of the virtual server changes from being active on the source physical server to a migrate state. This command may originate from the DRS described above in connection with and received by the migration management process or the hypervisor. At the migration of the virtual server is managed to expedite its transition to the target physical server by slowing the memory state changes for the CPU bound processes and pausing the IO bound processes during the migration. The management operations are described in further detail hereinafter in connection with . At a determination is made as to whether the migration is complete. This determination may be made by a comparison between the image file for the virtual server at the source physical server and the image file for the virtual server at the target physical server. When the image file for the virtual server at the source physical server and the image file for the virtual server at the target physical server converges i.e. there is no difference between them the migration is said to be complete. When migration is complete then at the virtual server on the target physical server goes active with normal full speed IO bound and CPU bound processes.

Turning to a timeline is shown that illustrates operations in connection with migration of a virtual server. Prior to migration the virtual server operates with normal IO activity for IO bound processes and normal memory time slice allocation for CPU bound processes. However during this time the Hypervisor or the migration management process is monitoring IO bound and CPU bound activity of the virtual server or of each virtual server on the target physical server to determine the IO bound and CPU bound characteristics of the virtual server. This information is used to determine which or both of the IO bound and CPU bound processes to slow down during the migration of the virtual server when and if a command is received to migrate the virtual server. When the live migration begins then the migration management process in the source virtual server pauses IO activity and reduces the memory time slice allocation for CPU bound activity to slow memory state changes during the migration. When migration is complete to the target physical server then normal IO activity and memory time slice allocation activity resumes for the virtual server at the target physical server.

Reference is now made to for a description of a process that is useful to pause IO bound activity in the source physical server during a migration. The process is invoked during operation of the migration management process described above in connection with when the status of the virtual server goes from active to migrate. Furthermore the process is particularly useful for pausing processes that comprise virtual server incoming and outgoing traffic that involves TCP connection like protocols. At the migration management process determines the entities that are sending traffic using TCP connection type protocols to the virtual server and those entities receiving TCP type traffic from the virtual server. These entities may be clients other virtual servers running on the same physical server or another physical server or other processes running on any computing device with network or other connectivity to the source physical server on which the virtual server to be migrated is currently hosted.

At for incoming packets received from a sending entity to the virtual server the migration management process generates an acknowledgement ACK message for the last received packet or packet with a sequence number prior to the last received packet in the stream of TCP packets received from that sending entity and includes information in the ACK message that advertises a zero window size to indicate to the sending entity that the receive buffer on the virtual server is full. The receive buffer on the virtual server need not necessarily be full at this point in time. At the ACK message so configured is sent back to the sending entity in order to upon reception of this ACK message cause the sending entity to pause temporarily stop from sending packets to the virtual server. Thus the migration management process spoofs an ACK message with an indication that the virtual server cannot receive any further packets in order to apply back pressure to the sending entity to stop sending packets to the virtual server until the virtual server sends an ACK message with a larger window size indicating that the receive buffer on the virtual server has capacity is no longer full . The migration management process performs operations and for each entity sending TCP like traffic to the virtual server. This is depicted graphically in where for a corresponding incoming TCP packet flow TCP TCP Q from different entities Q an ACK message with information indicating zero window size on the virtual server ACK ACK Q is sent.

In addition at the migration management process on behalf of each destination entity of traffic from the virtual server generates and sends to the virtual server a message packet comprising information that advertises to the virtual server a zero window size at the receiving entity so that upon receiving this message the virtual server will pause temporarily stop from sending messages to that entity because the virtual server will believe that the receiving entity is not able to receive and buffer TCP like traffic. The migration management process performs this operation for each entity receiving TCP like traffic from the virtual server. This is depicted graphically in where for each of a plurality of destination entities R which may or may not correspond with a sending entity the migration management process sends a packet advertising zero window size on behalf of the destination entity IN IN R to the virtual server K being migrated.

The operations and are performed to allow time for the virtual server at the target physical server to catch up with the virtual server at the source physical server. This allows the virtual server at the target physical server to take over all connections to and from the virtual server being migrated with gradually increasing window sizes in ACK messages and internally sent messages to the virtual server on behalf of destination entities of the virtual server .

At a determination is made as to whether the migration is complete the difference between the virtual server at the target physical server and the virtual server at the source physical server is zero . When migration is complete then the virtual server at the target physical server can go active. Otherwise operations and continue to be executed until migration is complete.

At normal protocol operations at the virtual server on the target physical server can recover existing connections for the virtual server. Alternatively as an option the migration management process on the source physical server stops sending spoofed packets with zero window size to the virtual server to resume normal outgoing traffic from the virtual server and also sends a message to the target physical server to indicate which TCP flows were paused i.e. were advertised with zero window size and forwards the last cached packet for each incoming TCP flow. This will help the virtual server running at the target physical server to recover the existing TCP connections.

Turning now to a description of a process is provided. The process is invoked during operation of the migration management process described above in connection with and is useful for other types of connections such as Universal Datagram Protocol UDP traffic. At a determination is made for an incoming UDP packet as to whether the UDP packet is a Ping packet. A UDP Ping is a tool using application layer UDP packets to provide configurable ping intervals and packet sizes. The UDP Ping uses a server and a client where a UDP Ping client writes a sequence number and current timestamp into a UDP packet and sends it to the UDP Ping server which echoes the packet data back to the client. The client then reports the round trip time and calculates the packet loss rate. A UDP packet that is part of a Ping process can be detected by because Ping related packets often use the Internet Control Messaging Protocol ICMP for Echo request and Echo reply messages which when present are indicative of a UDP Ping. At when the UDP packet is not a UDP Ping packet then the incoming or outgoing UDP packet is simply dropped or ignored. At when the received UDP packet is a Ping packet then the migration management process generates and sends a response to it as the virtual server normally would. At a determination is made as to whether the migration is complete the difference between the virtual server at the target physical server and the virtual server at the source physical server is zero . When migration is complete then the virtual server at the target physical server can go active and normal handling of received UDP packets by the virtual server at the target physical server resumes as indicated at . Otherwise operations continue to be executed until migration is complete.

Reference is now made to for a description of a process for managing processor CPU bound operations of the virtual server during migration. Again the process is invoked when operation shown in is being executed by the migration management process . At a command is generated to the scheduler process shown in to reduce the size of the time slice of the memory allocation to the virtual server to be migrated and or to delay the memory allocation to the virtual server to be migrated. Reducing the memory time slice allocated to the virtual server and or delaying the memory allocation to the virtual server has the effect of reducing computation time allocated to the virtual server. This in turn slows down the changes in memory state for the virtual server. This is graphically depicted in . Furthermore the frequency at which memory resources are allocated to the virtual may be reduced to similarly slow down the memory state changes of the virtual server.

At a determination is made as to whether the migration is complete the difference between the virtual server at the target physical server and the virtual server at the source physical server is zero . When migration is complete then at a command is generated to allow the scheduler process to resume normal scheduling of memory allocation to the virtual server in the target physical server .

The techniques described herein facilitate faster live migration of a virtual server from one physical server to another physical server by pausing activity of the virtual server and slowing memory state changes for CPU bound activity of the virtual server during the live migration. In so doing live virtual server migration is achieved in a manner that makes the migration transparent to devices and processes that rely on the virtual server.

Accordingly an apparatus is provided comprising a network interface device configured to send and receive packets over a network and a processor configured to be coupled to the network interface. The processor executes at least one virtual server and is configured to manage processes of the virtual server during live migration to an other computing apparatus so as to expedite transition of the virtual server to the other computing apparatus.

Likewise a tangible processor readable medium is provided that is encoded with instructions that when executed by a processor cause the processor to at a computing apparatus configured to support one or more virtual servers manage processes of the virtual server during live migration to an other computing apparatus in order to slow changes in the virtual server during migration so as to expedite transition of the virtual server to the other computing apparatus.

Furthermore a method is provided comprising at a first computing apparatus in which a virtual server is running and is to be migrated to a second computing apparatus managing processes of the virtual server during live migration so as to expedite transition of the virtual server from the first computing apparatus to the second computing apparatus.

