---

title: Automated deployment of computer-specific software updates
abstract: A software update system automatically deploys software updates, approved by a provider of a process control system, to computer hosts that execute the process control system. The software update system includes a client application that generates a request for software updates applicable to the computer hosts and initiates automatic deployment of the software update to the host, and a server application that provides software update data to the client application in response to the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09003387&OS=09003387&RS=09003387
owner: Fisher-Rosemount Systems, Inc.
number: 09003387
owner_city: Round Rock
owner_country: US
publication_date: 20100916
---
This application is based on and claims the benefit of priority to U.S. Provisional Patent Application No. 61 246 008 entitled Automated Deployment of Computer Specific Software Updates filed Sep. 25 2009 the entire disclosure of which is hereby expressly incorporated herein by reference.

The present disclosure relates generally to distributing computer updates on target hosts and in particular to automating the deployment of such updates to a process control system.

Providers of operating systems widely used applications or specialized complex software packages etc. often frequently release updates or fixes upon discovering problems such as potentially serious programming mistakes security deficiencies and other issues. For example the vendor of an operating system may discover that a certain version of the operating system does not properly handle a particular event or that a certain communication port may not be protected from unauthorized access. Rather than preparing a new release of the operating system that may span tens of thousands of files the vendor typically prepares one or several objects such as dynamic link libraries DLLs to replace or complement objects in the released version of the operating system. Similarly a provider of a software solution implemented as an application on a standard operating system for example may sometimes discover an issue only after the software solution has been released to one or several customers and accordingly may wish to release a patch directly to the customers. The ever increasing complexity of operating systems and specialized software solutions ensures that the number of updates required in a typical environment remains high.

Moreover threats of electronic attacks have necessitated periodic updates of antivirus databases. These databases as is generally known often store data patterns which antivirus software may detect in network traffic and flag packets or frames carrying such patterns. Because new forms of malware e.g. viruses worms trojan horses spyware are generated almost daily antivirus databases require frequent updates for the corresponding antivirus software to remain effective. Further as more and more hosts communicate over the Internet the importance of cyber protection continues to increase.

In short many software manufacturers today require or at least recommend regular updates to software products already released to customers. To simplify the process of delivering and installing such updates some software manufacturers provide so called Commercial Off The Shelf COTS deployment applications. For example Microsoft Corporation has developed a Windows Server Update Service WSUS . Generally speaking WSUS includes a downloadable client component that runs on a host in a local network contacts an external server component to receive updates and installs updates received from the server component on multiple computers running a version of the Windows operating system. In this manner WSUS eliminates the necessity to separately install updates on each individual computer.

Whereas users of personal computers can safely obtain updates directly from dedicated websites maintained by providers of the corresponding software e.g. using the Windows Update application corporations and other organizations that support relatively large local area networks typically roll out updates via one or several intermediate servers. Network administrators sometimes may wish to review the lists of available updates determine when the available updates should be installed and distribute the selected updates to hosts within the local network. Moreover WSUS supports parent child topologies so that a WSUS host on the corporate network in the role of a parent can receive one or several updates and provide these updates to one or several child WSUS hosts for subsequent distribution to user workstations.

Approval by network administrators is particularly relevant for those organizations or parts of organizations that run specialized software systems sensitive to changes in the operating system environment. The effect of updates on specific systems and applications running on hosts is frequently unknown. For example a security update may adversely affect a communication channel or port used by the software system. Thus in many cases the manufacturer of the software system is better positioned to approve or reject an operating system update.

One example of such complex software system is a Windows based DeltaV control system sold by Emerson Process Management. Generally speaking DeltaV is a digital automation system for managing and controlling industrial processes. As is generally known many modern industrial processes are instrumented with controllers and various devices that automatically perform physical functions in a field according to a certain control strategy. Many control strategies are highly complex and teams of engineers operators and technicians require comprehensive software solutions such as DeltaV to manage process plants that implement such control strategies. Today plant operators in such diverse industries as life sciences biotechnologies petroleum gas chemicals pulp and paper and food and beverage run DeltaV in numerous process plants.

DeltaV includes multiple applications stored within and executed by different hosts such as workstations located at diverse places within a process plant. If desired DeltaV applications also may be networked across several facilities or process control plants. For example a configuration application which resides in one or more operator workstations enables users to create or change process control modules and download these process control modules via a data highway to dedicated distributed controllers. As another example viewing applications which may be run on one or more operator workstations receive data from a controller application via a data highway and display this data to process control system designers operators or users using the user interfaces.

Because a process control system such as DeltaV may be compatible with a standard operating system OS such as Windows for example it may be appropriate to install some of the OS updates on workstations running the process control system. However some of the other OS updates may be unnecessary for proper operation of the process control system while yet others are potentially harmful to the process control system. Further the antivirus updates may similarly fall into several categories according to the requirements of the process control system. Still further the manufacturer may sometimes wish to update the process control system workstations at a plant operator site. For these and other reasons hosts running the process control system may require a very specific combination of software updates. However COTS applications such as WSUS are not set up for deployment of updates to specialized software applications such as process control systems. With respect to OS updates operators of process control systems at best can use a COTS application with manual approval or rejection of updates.

Moreover because process control system workstations typically define only a portion of a larger network of a plant operator the updates suitable for such workstations may not be the same as the updates installed on hosts operating in the plant operator s network but unrelated to the process control system. Network administrators thus may be required to keep track of different requirements for different hosts in the local network even though each host has the same version of the operating system. In other organizations a process control system operator may be responsible for network administration of the process control network that includes dedicated workstations while corporate network administrators may be responsible for other portions of the network. However this division of responsibilities may not be practical. For example WSUS updates to process control system workstations typically proceed through a WSUS host in the corporate network. The WSUS host may notify a corporate network administrator that certain hosts i.e. process control system workstations have not been properly upgraded and process control system operators subsequently may have to explain why some of the upgrades have been omitted in the process control network.

These and other factors lead to loss of productivity lack of clarity and increased complexity of network administration. As a more trivial matter corporate or local network administrators may make mistakes in selecting or applying software updates or may not always treat software updates as a high priority task. As a result many important updates remain uninstalled for long periods of time. Meanwhile process control systems remain exposed to threats to security or system integrity as is often the case with updates that fix system crashes. As operators move away from proprietary technology to more open and interoperable standards and systems the threat of cyber attacks in the process control industry becomes more relevant. Further in many cases updates unrelated to security threats are equally important inasmuch as such updates address issues related to system stability and reliability.

A software update system automatically deploys approved software updates or metadata related to such updates to a customer system so that the approved software updates can be safely installed on one or several target computers without a manual approval by an operator of the customer system. The software update system may include a client application downloadable to a host operating in the customer system and a server application operating outside the customer system to manage metadata and in some cases software updates determine which software updates should be installed in the customer system and deliver the appropriate metadata and or the software updates to the client application.

In some embodiments the customer system includes an intermediate network layer e.g. a so called demilitarized zone or DMZ exposed to a larger network e.g. the Internet and a specialized network layer to execute applications specific to business activities of the customer operating the customer system. The client application in at least some of these embodiments includes a front end module operating in the DMZ and a back end module operating in the specialized network layer. The front end module communicates with the server application to request information regarding the available software updates and or the actual software updates as downloadable objects. In some situations the front end module communicates with other applications such as an antivirus update application or an upstream OS specific deployment application running on the same server or another server in the DMZ to specify which antivirus or OS software updates have been approved for installation in the specialized network layer. The back end module in turn communicates with the front end module to retrieve the software updates and the metadata from the DMZ decrypt and decompress the retrieved software updates and the metadata if required and initiate automatic installation of the software updates in the specialized network layer. In an embodiment the back end module triggers the automatic installation by issuing appropriate commands to a COTS deployment application running in the specialized network layer.

In some embodiments the specialized network layer is a process control layer in which a software based process control system runs on one or several operator workstations to manage and control a process plant having one or several controllers and multiple field devices that perform respective physical steps to carry out a process control strategy of the process plant. The manufacturer or vendor of the process control system may manage the software update system to generate and classify updates specific to the process control system and identify which of the updates published by the respective manufactures of the antivirus software and the operating system are suitable for various versions of the process control system. Accordingly in response to a query from the client application the server application may generate a report of potential updates to the process control system the antivirus database and the operating system and transmit the report to the client application. In some embodiments the client application applies the report to a COTS deployment application such as WSUS to trigger a download and or installation of updates to the operating system.

In some embodiments the server application or the client application applies a wrapper to updates to the process control system so that a COTS deployment application for the corresponding operating system can install these updates on behalf of the manufacturer of the process control system. To this end the server application or the client application may apply an application programming interface API provided by the manufacturer of the COTS. The wrapper may specify one or multiple locations to which the wrapper update should be distributed as well as other installation parameters. If desired the wrapper may include a digital signature of the manufacturer of the process control system to assure security.

In some embodiments the client application is configurable to query the server application according to a certain schedule in response to a user command or based on any other specified principle. The client application may report the version of the software running in the specialized network layer e.g. the process control network to the server application and the server application may identify which updates if any should be downloaded to the customer system. In other embodiments the client application reports the identity of the customer to the server application and the server application identifies the version of the specialized software running in the customer system based on the customer identity.

The plant LAN layer includes several workstations and connected to a communication link consistent with any suitable communication standard such as the IEEE 802.3 Ethernet for example. As is typical the workstations and share an operating system having networking capabilities such as for example Windows manufactured by the Microsoft Corporation. Users in various organizational roles operate the workstations to carry out day to day activities of the plant operator. For example the plant operator may employ engineers accountants marketing staff and other personnel. Users who operate the workstations may have a certain set of permissions that typically do not permit these users to access the process control layer . On the other hand these users have a mostly unrestricted access to hosts on the Internet and as a result a relatively high risk of exposure to viruses malware hijacking attempts and other cyber threats.

To protect computer hosts disposed at or below the plant LAN layer network administrators also referred to as IT personnel may operate the workstation to monitor traffic on the communication link configure firewall applications running on the router firewall or locally on the workstations and assign permissions to various users identify and eliminate malicious software in the plant LAN layer etc. Additionally network administrators may install operating system and antivirus updates on the workstations and typically upon receiving corresponding notifications from the respective vendors of the operating system and the antivirus software.

The plant DMZ layer may include several servers such as an anti virus server a data server and a historian server . As is known a DMZ layer generally provides additional security to a local network by limiting direct exposure to a larger network such as the Internet to only several hosts i.e. the servers a DNS server not shown a web server not shown etc. . Additionally an upstream update server may execute the front end module of the client application to support automated deployment of software updates and or propagation of metadata related to software updates as discussed in more detail below. It will be noted that the DMZ layer in general may be any intermediate network layer that improves the security of the customer system by directing all incoming and outgoing internet traffic via one or several hosts.

With continued reference to the process control layer may include several operator workstations and each running the operating system and a process control system such as DeltaV for example for controlling a process plant . The process control layer may also include several servers such as an application server and a configuration server . Further a downstream server in this example configuration executes a back end module of the client application . Because the downstream server performs the actual deployment of software updates to hosts in the process control layer the downstream server may also be referred to as an update server. In some embodiments the downstream server is configured to operate as a gateway only and does not run the process control system .

In operation the front end of the client application is activated in response to a command from a user interface or according to a pre configured event such as an expiration of a timer for example. Upon activation the client application requests a list of available updates to the process control system and the operating system from the server application that may run in a process control system vendor layer on a vendor update server for example. In response to the request from the client application the server application determines whether software updates are available and which of the available updates are compatible with the respective versions of process control system and the operating system in the customer system . The server application then transmits a lists of available updates to the client application . Next the client application checks whether any of the available listed updates have not yet been downloaded to the file system in the plant DMZ layer . If the client application determines that software updates are needed the client application formats and transmits a corresponding request to the server application .

In response to the request from the client application the server application transmits appropriate software updates and or metadata related to the software updates to the client application so that the software and or the metadata may be stored in a certain location in the DMZ layer . The front end module then works with the back end module to securely deliver the software updates and the metadata to the downstream server and ultimately to various hosts in the process control layer e.g. workstations and . Moreover as discussed in more detail the client application in some embodiments automatically configures one or several COTS applications such as WSUS to obtain software updates from the respective vendor or manufacturer in accordance with the list of approved software updates received from the server application .

Still referring to the upstream update server may run an upstream WSUS and an antivirus soliciting application such as the Symantec Live Update Administrator LUA in addition to the front end module of the client application . Further the downstream server may run a downstream WSUS and an antivirus deployment application such as the Symantec End Point Protection Manager SEPM for example. The antivirus soliciting application solicits antivirus updates from the corresponding manufacturer e.g. Symantec and generally may reside on any host in the DMZ layer or the plant LAN layer . On the other hand the antivirus deployment application deploys antivirus updates retrieved by the antivirus soliciting application to hosts in the process control layer . Similarly the upstream WSUS and the downstream WSUS implement a parent child topology. In particular the upstream WSUS solicits software updates from the OS manufacturer e.g. Microsoft and the downstream WSUS is configured to distribute updates to hosts in the process control layer . It will be further noted that the process control layer may be coupled to the DMZ layer via the downstream or update server thereby providing another level of protection to the process plant .

In some embodiments the back end module retrieves updates from a location in the DMZ layer following a query of the front end module . The back end module may be a relatively light weight application that performs a file transfer function decompresses the retrieved objects as necessary and applies a decryption algorithm to verify the integrity and security of the retrieved objects. To this end the back end module may apply any suitable techniques known in the art e.g. applying digital certificates . The back end module may then convert objects specific to the process control system to a format recognized by the downstream WSUS or another suitable COTS deployment application i.e. wrap the objects and provide these converted or wrapped objects to the downstream WSUS for distribution. If desired the back end module may further communicate with the downstream WSUS to specify that the wrapped objects have been approved for distribution thereby triggering a subsequent and if necessary immediate distribution of the converted objects through the process control layer . For example Microsoft Corporation provides an API for wrapping objects unrelated to the Windows operating system to make these objects compatible with deployment via a WSUS application. In some embodiments objects may be wrapped at the process control vendor layer .

In effect the back end module in these embodiments programmatically injects software objects and approval data into the downstream WSUS for distribution and installation and thus carries out an indirect deployment of software updates. For this reason the back end module need not support the complex logic of actual distribution or installation of software updates and may instead operate as an add on to the WSUS . In alternative embodiments however it is possible to include the distribution and installation logic in the back end module thus making the back end module a full blown deployment application.

As indicated above the software update system can be configured to automatically deploy in a direct and or indirect manner updates related to the process control system the operating system the antivirus software used in the customer system and if desired other software products installed or installable in the process control layer . In this manner the manufacturer or vendor of the process control system can simplify the process of deploying updates as well as ensure that the process control system continues to operate properly after each update has been installed. Of course the vendor of the process control system may operate a single update server such as the vendor update server to interact with multiple customer systems. Thus the software update system can include one server application and multiple client applications . To simplify user experience the vendor update server may store a copy of the client application as a downloadable and easily installable object . If desired the object may be compressed. It will be further appreciated that in order to properly deploy updates the software update system preferably includes or cooperates with one or several databases storing data related to each customer each version of the process control system being used and other information necessary to roll out a customer specific software update.

As illustrated in the vendor update server is communicatively coupled to a configuration repository that stores information related to the configuration of customer systems such as the customer system . For each customer system the configuration repository may store an identifier of the version of the process control system installed in the process control layer an identifier of the version of the operating system the date of the last update of the antivirus software or database in the process control system etc.

The vendor update server may also be connected to an update repository in which the vendor stores software objects for each software update of the process control system . Because each version of the process control system typically require different software updates the update repository accordingly may maintain version specific lists of updates. The update repository may also store metadata related to both updates to the process control system and updates to software components from other vendors e.g. the operating system . Each of the update repositories and may be implemented in any desired manner such as in a separate data server in a relational database stored in the file system of the vendor update server as a collection of files or records stored on a computer readable medium such as a Compact Disc CD or a Digital Versatile Disc DVD . If desired the update repositories and may be implemented as one integral repository.

Generally speaking metadata is electronic information that a deployment application such as the downstream WSUS uses to target proper computers or other nodes for installation. For example metadata used in the communication system can include identity of the process control system used by the customer e.g. a unique number assigned by the vendor of the process control system . Depending on the embodiment the identity can be assigned at the level of the process control layer or the customer system for example. The downstream WSUS may compare corresponding locally stored parameters at the downstream server to verify that a certain software update has been properly routed to the downstream WSUS . As other examples metadata may include names or identifiers of target computers names of software objects included in an update update behavior e.g. reboot requirement service disruption file size description of the update installation instructions.

It is possible for the update repository to store metadata related to updates both for the process control system and other software whereas actual software objects in the update repository typically correspond only to the process control system . In other embodiments the update repository may include software objects for other software products. In these embodiments the vendor of the process control system in effect becomes a single direct source of all software updates. However it will be noted that although some customers may find this arrangement convenient other customers may prefer not to expose the network structure of the organization e.g. the plant LAN layer and the DMZ layer to the vendor of specialized software such as the process control system .

To further improve the security of the data managed in the process control system vendor layer a secure internet facing host may be disposed between a router connected to the Internet and the vendor update server and the data servers storing repositories and . A potential intruder would thus find it more difficult to access information regarding private facilities such as the customer system stored in the repositories and .

With continued reference to the process control layer includes a primary switch and a secondary switch through which the workstations and may access the process plant . As is typical the process plant implements distributed process control using one or more controllers each connected to one or more field devices or smart devices via input output I O devices or cards which may be for example Fieldbus interfaces Profibus interfaces HART interfaces standard 4 20 mA interfaces etc. The field devices and may be any types of devices that perform respective physical functions in the process plant e.g. sensors valves pumps transmitters positioners.

For the purposes of clarity illustrates some of the components discussed above in a block diagram. The arrows connecting various blocks in need not correspond to direct connections and are provided only to illustrate how information propagates between the software update system the WSUS components and the antivirus application components and a vendor of the operating system and a vendor of the antivirus software used in the customer system . In general the software update system may interact with any number of software manufactures or vendors. Also the client application need not necessarily include two separate modules as is the case in the example embodiments illustrated in . For example some customer systems may not implement a secure network layer such as the DMZ layer at all and the client application in these embodiments could include a single module with the combined functionality of the modules and discussed above.

Referring to the vendors and may supply software updates metadata or both to the software update system . For reasons discussed above a customer may prefer to retrieve software updates from the corresponding vendors rather than from a single entity. However the vendor of specialized software may to test and approve interactions between the specialized software and the updates offered by the vendors and for example. The necessary testing may be conducted manually or automatically using a compatibility testing module . Of course the vendor of specialized software may also identify which of the software updates from the vendors and should be approved in any suitable manner. In those situations where the server application does not directly provide software updates on behalf of the vendors and the vendor of the specialized software provides a list of approved updates and optionally metadata associated with the approved updates which the client application can use to configure the downstream WSUS and the antivirus deployment application for example.

Next an example exchange of messages between several components that operate to automatically deploy software updates is illustrated in . Further to better explain how a system for automatically deploying software updates such as the software update system manages updates and metadata from one or several software vendors schematically depicts interactions between several messages and data structures at the process control system vendor layer see . then illustrate block diagrams of example server and client applications respectively that may operate in the communication system illustrated in .

Referring to a SUDS server a SUDS front end client a SUDS back end client and a COTS deployment application operate in different portions of the corresponding communication system to automatically and securely deploy software updates to a customer system. For example the components may operate in the communication system of to deploy updates to the customer system and the messaging illustrated in accordingly may be implemented by the components and . As a security measure the SUDS front end client may run in a DMZ of the corresponding computer network and the SUDS back end client may run in a specialized network layer such as a process control layer or on a server communicatively coupled to the specialized network layer . The SUDS server may run in a computer network of a vendor of the specialized software system installed in the customer system. In general however it is possible for the components to operate in a communication network having any suitable topology any number of network layers etc. Further the SUDS server may interact with multiple instances of SUDS front end clients operating in respective customer systems. Still further the components are not limited to a network that includes a process control layer for controlling a process plant. Thus some or all of the components may deploy updates in any computer system although it is contemplated that the components are particularly helpful in those systems that run specialized software applications on at least some of the computer hosts.

In block the SUDS front end client may be configured to initiate software updates to a specialized software system installed in the customer system and to other software systems e.g. the OS the antivirus software according to any desired scheme which a corresponding administrator could defined in view of technical and business factors. For example the SUDS front end client may be scheduled to wake up weekly to query the SUDS server for updates. In response to a timer expiration event the SUDS front end client formats and transmits a Check for Updates message to the SUDS server to request a list of available updates. If desired the SUDS front end client can be configured to display a dialogue screen at one of the workstations or after receiving the timer expiration event but prior to transmitting the message to solicit an explicit confirmation from a human operator.

The message may include authentication information such as a login and a password to prevent unauthorized users from contacting the SUDS server . In some embodiments the message also includes an identity of an operator of the customer system e.g. ACME Corporation so that the SUDS server can identify versions of various software systems currently installed in the customer system. In other embodiments the message identifies a version of a specialized software installed in the customer system e.g. DeltaV version 9.0 . If desired the message in these embodiments can also identify the version of the operating system e.g. OS version Windows XP along with the patches already installed in the customer system as well as the version of the antivirus database and any other relevant software applications. To this end the SUDS front end client may check local configuration data when formatting the message . In yet another embodiments the message may include a unique identity of the customer system assigned by the vendor that operates the SUDS server .

In response to receiving the message the SUDS server may identify in block which versions of relevant software are installed in the customer system from which the message has been received. As discussed above the message in some embodiments already specifies most or all of the information which the SUDS server retrieves in block . Next in block the SUDS server identifies which updates related to some or all of the specialized software system e.g. a process control system operating system antivirus software etc. are recommended and or have been approved for the customer system. Several examples of operation of the SUDS server in blocks and is discussed in more detail with respect to .

With continued reference to the SUDS server may generate a List of Available Updates message and transmit this message to the SUDS front end client . In some embodiments the message may be formatted according to XML rules. The SUDS front end client may then compare the list of available updates to a local repository to determine which of the listed updates if any are not yet present in a network or sub network in which the SUDS front end client operates block . As an example the SUDS server may indicate that several OS patches should be downloaded and the SUDS front end client may check whether a WSUS application running in the same DMZ has already retrieved these OS updates and stored the updates in a local folder. Similarly the SUDS front end client may check whether updates for the specialized computer system have been previously downloaded. Alternatively the SUDS server may keep track of updates that have been previously delivered to each SUDS front end client .

The SUDS front end client may then format an Update Request message that lists which updates are being requested for download. The SUDS server may parse the message and prepare update data including software objects and or metadata and forward the update data to the SUDS front end client in a message . In some embodiments the update data includes actual software objects for patching upgrading and otherwise modifying the specialized software system with whose vendor the SUDS server is associated. For example the message may include a DLL for addressing a recently discovered flaw in the process control system which the customer system runs in the process control layer. The update data may also include metadata related to such one or several objects. However for reasons discussed above the message need not necessarily include actual software objects for patching an operating system or data objects for upgrading an antivirus database. Instead the message may include only the metadata related to objects non native to the SUDS server or alternatively only the identity of these objects.

In response to a timer expiration event the SUDS back end client transmits a Check for Objects and Metadata message to the SUDS front end client . If the update data has been received and stored in a certain location accessible to the SUDS back end client the SUDS front end client notifies the SUDS back end client that updates are available and initiates a transfer of the update data to an update server message from which the update data can be installed in a sub network serviced by the SUDS client applications and e.g. a process control network . The SUDS back end client may decompress and decrypt the update files as necessary as well as apply wrappers to make update objects compatible with the COTS deployment application block . A message notifies the COTS deployment application that one or several wrapped objects are available and the COTS deployment application installs the updates in block .

In some case the message may include metadata and or approval information for updates to an application for which the COTS deployment application is provided. For example the COTS deployment application may be a WSUS application and the message may specify which Windows updates have been approved as compatible with the current version of the specialized software system. Referring back to it will be appreciated that the techniques discussed with reference to eliminate the need to secure manual approval of updates specific to a specialized network layer form a corporate network administrator. In particular the back end module effectively configures the downstream WSUS to request and obtain from the upstream WSUS only those OS specific updates that have been approved by the vendor of the process control system . Irrespective of which updates are distributed to other portions of the network in the customer system the downstream WSUS reports compliance to the upstream WSUS as long as the approved updates are properly installed in the process control layer . Thus a corporate network administrator monitoring software updates will not see a false alert reporting lack of compliance in the process control layer even though the updates actually applied in the process control layer may be different from the updates applied in the plant LAN layer for example.

Referring again to the SUDS front end client in other embodiments may transmit the message only once in a relatively long period of time e.g. upon installation of a new version of the specialized software system. The message may include for example the authentication information of the SUDS front end client the identifier of the version of the specialized software system and an indication of a method and frequency for automatic notification regarding new software updates. In these embodiments the SUDS server may maintain a list of SUDS clients that wish to be notified automatically when new updates become available check the list once new updates are approved and generate the respective messages for the SUDS front end clients if appropriate. If desired the SUDS server may also notify customer systems whose credentials have not yet been provided to the SUDS server . In other words the message may be optional in some embodiments as the SUDS server or the server application discussed with reference to can support vendor initiated software updates as well as client initiated software updates.

Now referring to a vendor of a process control system software system may maintain a repository that stores configuration data related to customers running various versions of the process control system update related to the specialized software system and data related to software updates to other software products or systems which the vendor s customers may use. The repository may be data stored on a computer readable medium. As one example the repository may be implemented as the configuration repository and the update repository illustrated in . As illustrated in the repository may interact with software or hardware components which may be for example the components of the server application or the SUDS server .

The repository includes a user table an update table control system updates and operating system updates . For the purposes of clarity the repository is illustrated without antivirus update objects although in general it is possible for the repository to include related to any number of software products. In this example embodiment the table specifies which version of the process control system a particular customer is currently using and the table lists updates approved for each version. Thus if the message identifies a customer with the user identity 456547567 the table indicates that version 2.1 of the process control system is installed at this customer s site and the table lists an operating system update identifier OS and a process control system update identifier CS. In this example the control system updates are stored as software objects along with the corresponding metadata. The software objects may be DLLs data files or groups of files installable in one or several target directories. In some embodiments the control system updates further include data required to generate a wrapper for use by a COTS deployment application such as the downstream WSUS or the COTS deployment application . On the other hand the operating system update data includes only metadata or if desired only the identity of the software update objects e.g. OS OS OS . In the example illustrated in the update OS including the software objects and the metadata and the update CS including only metadata are communicated to the client application in the message .

The server application also includes a user authenticator implemented using the techniques known in the art to verify login and password information of customers requesting software updates. A control system identifier may query the local repository for example to determine which software the customer entity is currently using. If desired the control system identifier may also check what type and version of the operating system and or the antivirus database the customer is currently using.

Further an update list generator may be coupled to the control system interface to report to the corresponding client application which software updates have been approved. Still further the server application includes a control system update wrapper to optionally apply wrappers to process control system objects to make these objects compatible with a COTS deployment service. Alternatively the control system update wrapper may reside in the corresponding client application. Still further an update package generator may generate software update packages for client applications including some or all of software objects metadata and software object identifiers.

Now referring to a client application includes a front end application and a back end application . In an embodiment the client application discussed above with reference to implements the architecture of the client application . The front end application includes a vendor interface to communicate with an application running in the computer network of the process control vendor. For example the front end application may communicate with the server application . The front end application further includes a scheduler to implement a scheme according to which the client application queries the corresponding server application regarding software updates. Further the front end application includes an update list processor that checks which of the reported available updates are missing from the DMZ or other type of network in which the front end application is running and a message generator to format messages such as the messages and illustrated in .

Further the client application includes an operator interface to receive user commands such as a command to query the server application regarding the available updates or a command to initiate a download of the available software updates to the DMZ display information regarding the available software updates display reports listing previous updates etc.

An update folder may be disposed in the file system of the computer host in which the front end application is running in a shared network location such as the file system of another host in the DMZ or in any other location accessible to both the front end application and the back end application . The update list processor may store software objects and metadata received from the server application in the update folder for subsequent deployment and installation by the back end application and in at least some of the embodiments a COTS deployment application . The back end application may retrieve decrypt and unzip files in the update folder using a file transfer module .

A format conversion module may inject software objects not recognized by the COTS deployment application . If for example the COTS deployment application is a downstream WSUS application the format conversion module applies the one or several API functions provided by the Microsoft Corporation to the process control objects in order to make these objects compatible with WSUS. For other software updates the file transfer module may directly apply identifiers and or metadata to the COTS deployment application . To continue with the example of a downstream WSUS the file transfer module may directly apply identifiers or metadata related to Windows updates as configuration data so that the downstream WSUS requests only these identified updates from the upstream WSUS.

Generally with respect to it will be noted that the blocks and can be implemented as hardware software firmware or any desired combination thereof. It is also possible to combine some of the blocks and together or conversely partition some of these blocks into smaller modules. Moreover it is possible to distribute some of the blocks and among more than computer host.

Next illustrates an example interface screen which an operator of a process control system may see when operating the client application see . In some situations an operator may prefer to fully automate the process of detecting downloading and deploying software updates and accordingly may disable the interface screen . In other situations however an operator may wish to manually check whether updates are available using a control Download List initiate a download using a control Download Now test network connectivity using a control Test Connection etc. As further illustrated in the interface screen may indicate which version of the process control system is currently installed in the process control layer when the last download of updates has occurred where the downloads should be stored how much memory is available for the downloads etc. Additionally the operator may click on a control Configure to specify an automated update schedule to configure the interaction between the front end and the back end components of the client application etc. Moreover a View Logs control allows the operator to access the history of previous downloads and the associated events.

Referring to the server application may receive a request to check for updates in block authenticate the corresponding customer in block and identify software updates required for the operating system and the process control system used in the customer system in blocks and respectively. As discussed above the server application may maintain a list of updates to the operating system that have been tested and approved by the technical staff of the process control system vendor. The technical staff may similarly check and approve or reject updates to one or several antivirus applications. As discussed in detail above the server application may recommend software updates to the client application in view of at least the version of the operating system being used at the customer system and the current version of the process control system . In block the server application may report the list of available and approved updates to the client application .

Now referring to the server application may receive a request specifying one or several software updates in block . The server application may then retrieve the requested software objects and or metadata in block and generate an update package for the client application in block . The server application may then transmit the update package to the client application in one or multiple messages using any known techniques such as via HTTP using an FTP client server pair or via any other suitable protocol block .

With reference to the client application may wait for a wake up event in block . In response to a wake up event e.g. a user command timer expiration the client application may request a list of available software updates in block receive the list from the server application and compare the list to the updates already available in the network in block . If the client application determines that at least one software update is required at block the method proceeds to block otherwise the method returns to block .

At block the client application generates and transmits a message specifying which updates are being requested from the server application . The client application then receives the software updates as software objects metadata or identifiers of software updates managed by another application e.g. WSUS in block . In block the client application initiates a direct or indirect deployment of the downloaded software updates. More specifically the client may include a component that distributes and installs software objects in accordance with the metadata that describes the location update behavior and installation parameters for each object. Alternatively the client application may interact with a separate deployment application to request the installation of process control updates on behalf of the client application and control the deployment of software updates to the operating system by configuring the deployment application.

From the foregoing it will be appreciated that the software update system and the associated techniques discussed above provide numerous advantages to customers that use software systems in general and complex specialized software systems such as process control systems in particular. To specifically consider the process control industry in which a plant operator typically relies on a process control system to safely and reliably manage the corresponding process plant these advantages include but are not limited to the following a significant reduction of the risk of installing a software update that conflicts with a critical function of the process control system thereby threatening operators safety or causing a plant shutdown elimination of the requirement that a process control operator sometimes perform network administration at the expense of other tasks deployment of updates immediately upon approval by the vendor of the process control system thus eliminating dangerous delays in deployment of important software updates and elimination of unnecessary or even harmful updates that require operators time and effort as well as network downtime. Moreover the techniques discussed above allow the process control system vendor to deploy process control system upgrades or patches at the same time as updates to the operating system thus saving operator effort and improving the overall user experience. In yet another aspect these techniques seamlessly integrate familiar COTS update and deployment applications such as upstream and downstream WSUS applications into the process of updating process control systems. Still further because these techniques allow presenting non native process control system updates as native updates to COTS applications e.g. by wrapping software objects corporate IT personnel can monitor security update compliance of a network layer in which the process control system is implemented without manually checking memoranda from the process control vendor or confirming the requirements with process control operators.

While the present system and methods have been described with reference to specific examples which are intended to be illustrative only and not to be limiting of the disclosure it will be apparent to those of ordinary skill in the art that changes additions and or deletions may be made to the disclosed embodiments without departing from the spirit and scope of the disclosure.

