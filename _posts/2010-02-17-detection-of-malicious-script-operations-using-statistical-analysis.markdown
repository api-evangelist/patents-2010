---

title: Detection of malicious script operations using statistical analysis
abstract: A security server renders a plurality of web pages. The security server logs script operations of the plurality of web pages that are performed when the web pages are rendered. Sequences of script data values that result from the script operations are determined. The sequences of script data values are tagged as either malicious or non-malicious based on whether the script operations associated with the sequence of script data values resulted in abnormal behavior in the computer. A statistical analysis is performed on the malicious and non-malicious script data values to determine likelihoods that identified sequences of script data values represent malicious behavior. The security server generates security data based on the statistical analysis. The security data are provided to clients. The clients monitor script operations of web pages accessed by the clients, and use the security data to identify malicious script operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09038184&OS=09038184&RS=09038184
owner: Symantec Corporation
number: 09038184
owner_city: Mountain View
owner_country: US
publication_date: 20100217
---
This invention pertains in general to computer security and in particular to the development of security data that protects against execution of malicious script operations by websites.

There is a wide variety of malicious software malware that can attack modern computers. One type of malware threat includes malicious websites that exploit security vulnerabilities in browsers that load web pages from the websites. When a web page from a malicious website is loaded a malicious script e.g. JavaScript or VBScript in the page manipulates a scriptable object on the page such as a text box form field or table in a manner that is inconsistent with the object s intended operation. For example the script can provide a form field object with a value that exceeds an expected range such as a number or string that is too large. Similarly the script can perform an inconsistent sequence of operations such as attempting to delete rows of an empty table. Additionally the malicious script may manipulate a browser add on or extension object e.g. an ActiveX control plug in or extension in a manner that is inconsistent with the object s intended operation.

Some of these manipulations allow a security vulnerability in the browser or browser add on and extension object to be exploited. Thus malicious actors can create web pages having malicious scripts that perform the manipulations in order to compromise computers of website visitors. Once the computers are compromised the malicious actors can perform additional malicious actions such as stealing data and executing malicious code on the compromised computers.

Accordingly there is a need in the art for ways to detect scripts attempting to perform malicious actions.

The above and other needs are met by a computer implemented method and a computer system for generating sequences of operations performed by malicious scripts and a non transitory computer readable storage medium storing executable code for providing security to a client. One embodiment of the computer implemented method comprises rendering a plurality of web pages received from a plurality of websites where at least some of the plurality of web pages have associated scripts. The computer implemented method determines whether sequences of script operations performed by the scripts produce abnormal behaviors responsive to the rendering of the plurality of web pages. The computer implemented method tags the sequences of script operations performed by the scripts as malicious responsive to whether the sequences of script operations produce abnormal behaviors. Security data is generated based at least in part on the tagged sequences of script operations performed by the scripts where the security data describes sequences of malicious script operations. The computer implemented method stores the security data.

Embodiments of a non transitory computer readable storage medium storing executable code for providing security to a client. The code comprises a security database adapted to store security data indicating likelihoods that sequences of script operations are malicious. A monitoring module is adapted to monitor script operations performed responsive to a web page being rendered by the client to produce a monitored sequence of script operations. The monitoring module is also adapted to use the security data to determine a likelihood that the monitored sequence of script operations is malicious. A security action module is adapted to perform a security action on the client responsive to the determined likelihood that the monitored sequence of script operations is malicious.

Embodiments of a computer system for generating security data describing sequences of operations performed by malicious scripts comprises a computer processor and a non transitory computer readable storage medium storing computer code the code when executed by the processor performs steps comprising rendering a plurality of web pages received from a plurality of websites where at least some of the plurality of web pages have associated scripts. Sequences of script operations performed by the scripts that produce abnormal behaviors are determined responsive to the rendering of the plurality of web pages. The sequences of script operations performed by the scripts are tagged as malicious responsive to whether the sequences of script operations produce abnormal behaviors. Security data is generated based at least in part on the tagged sequences of script operations performed by the scripts where the security data describes sequences of malicious script operations. The security data is stored.

The features and advantages described in this summary and the following detailed description are not all inclusive. Many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims hereof.

The figures depict an embodiment of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

Generally the security server generates security data that describe whether a sequence of script operations performed by a script object s on a web page or whether script operations performed by a browser add on or extension object e.g. an ActiveX control or plug in will cause a browser security vulnerability. Note that for ease of understanding the following description refers to script operations performed by a script object on a web page. However one skilled in the art will recognize that the teachings herein can be applied to script operations performed by a browser add on or extension object or any other object that can execute scripts on web pages.

In one embodiment the security server executes scripts i.e. code from a wide variety of websites. The scripts perform sequences of script operations to render pages from the websites. In one embodiment the security server generates a sequence of script data values that describe the script operations. In one embodiment the script data values for a script indicate the scriptable objects interfaces methods and properties accessed by the script as well as the argument types and arguments supplied during the accesses. The security server classifies i.e. records the sequence of script data values as malicious or non malicious based on whether the sequence of script data values caused abnormal browser behaviors. Thus by classifying sequences of script data values the security server is indirectly tracking whether the script operations that generated the sequences are malicious or non malicious. The security server performs a statistical analysis on the script data values in order to identify sequences that are associated with malicious behavior. The security server uses these malicious sequences to generate security data which are provided to the clients and used to identify malicious scripts. One or more of the functions of the security server can be provided by a cloud computing environment. As used herein cloud computing refers to a style of computing in which dynamically scalable and often virtualized resources are provided as a service over the network .

In one embodiment the security server visits various web pages of websites on the network and renders the pages using a web browser. While rendering a web page the security server logs i.e. tracks the sequences of script operations executed by a script on the page. In one embodiment the security sever tracks the sequences of script operations indirectly by tracking the script data values generated from the script operations. The security server also determines whether executing the script operations results in abnormal browser behavior such as crashing the browser performing an illegal access of local resources causing memory corruption memory buffer overflows or downloading of files that have not been requested or authorized by a user. These abnormal behaviors are presumed to result from malicious intent to exploit a security vulnerability and scripts that cause these abnormal behaviors are deemed malicious.

The security server tags sequences of script data values that result in abnormal behaviors as malicious and sequences that do not result in abnormal behaviors as non malicious. The security server performs a statistical analysis on the malicious and non malicious sequences of script data values in order to determine the likelihoods that given sequences are malicious. The security server compiles the result of the statistical analysis into the security data that can be used to determine the likelihood that an observed sequence of script data values is malicious.

The security server provides the security data to the clients via the network . In one embodiment a client is a computer used by one or more users to perform activities including downloading installing and or executing software applications. The client for example can be a personal computer comprising a web browser such as MICROSOFT INTERNET EXPLORER MOZILLA FIREFOX APPLE SAFARI and GOOGLE CHROME that allows the user to retrieve and display content from web servers and other computers on the network . In other embodiments the client is a network capable device other than a computer such as a personal digital assistant PDA a mobile telephone a pager a television set top box etc. For purposes of this description the term client also includes computers such as servers and gateways that encounter software applications or other entities that might constitute malware or other threats. For example a client can be a network gateway located between an enterprise network and the Internet.

The clients include security modules that use the security data to protect the clients. A security module monitors web pages being loaded by the browser on its associated client and observes the sequences of script data values generated by script operations defined by scripts on the pages. By observing the script data values the security module indirectly observes the script operations since the script data values are a result of the execution of the script operations. The security module analyzes the sequences using the security data to identify sequences of script data values generated by web pages that are likely to be malicious. Responsive to the security module determining that a sequence is likely to be malicious the security module performs a security action such as terminating the script or browser and notifying the user of the client that a malicious script was detected.

The network enables communications between the security sever and the clients . In one embodiment the network uses standard communications technologies and or protocols. Thus the network can include links using technologies such as Ethernet 802.11 worldwide interoperability for microwave access WiMAX 3G digital subscriber line DSL asynchronous transfer mode ATM InfiniBand PCI Express Advanced Switching etc. Similarly the networking protocols used on the network can include multiprotocol label switching MPLS the transmission control protocol Internet protocol TCP IP the User Datagram Protocol UDP the hypertext transport protocol HTTP the simple mail transfer protocol SMTP the file transfer protocol FTP etc. The data exchanged over the network can be represented using technologies and or formats including the hypertext markup language HTML the extensible markup language XML etc. In addition all or some of links can be encrypted using conventional encryption technologies such as secure sockets layer SSL transport layer security TLS virtual private networks VPNs Internet Protocol security IPsec etc. In another embodiment the entities can use custom and or dedicated data communications technologies instead of or in addition to the ones described above. Depending upon the embodiment the network can also include links to other networks such as the Internet.

The storage device is any non transitory computer readable storage medium such as a hard drive compact disk read only memory CD ROM DVD or a solid state memory device. The memory holds instructions and data used by the processor . The pointing device may be a mouse track ball or other type of pointing device and is used in combination with the keyboard to input data into the computer system . The graphics adapter displays images and other information on the display . The network adapter couples the computer system to a local or wide area network.

As is known in the art a computer can have different and or other components than those shown in . In addition the computer can lack certain illustrated components. In one embodiment a computer acting as a security server lacks a keyboard pointing device graphics adapter and or display . Moreover the storage device can be local and or remote from the computer such as embodied within a storage area network SAN .

As is known in the art the computer is adapted to execute computer program modules for providing functionality described herein. As used herein the term module refers to computer program logic utilized to provide the specified functionality. Thus a module can be implemented in hardware firmware and or software. In one embodiment program modules are stored on the storage device loaded into the memory and executed by the processor .

The web browsing module renders web pages from websites on the network . In one embodiment the web browsing module includes a web browser emulator that downloads interprets and executes scripts of web pages on the network . In some embodiments the web browsing module includes multiple instances of web browser emulators executing in parallel in order to simultaneously render web pages from many websites. The list of websites accessed by the web browsing module is provided by a security analyst associated with the security server and or derived by crawling links of already accessed websites. The websites can include popular sites that are known to be non malicious as well as sites known to be malicious or likely to be malicious.

In one embodiment the script action logging module logs i.e. tracks script operations executed by the web browsing module when rendering web pages. As a web page is being rendered by the web browsing module the script action logging module observes the sequence i.e. stream of script data values generated when the script of the web page executes. The script data values generally describe the sequence of script operations performed by the script. Thus the script action logging module indirectly monitors the script operations by tracking the script data values resulting from the operations. In one embodiment each script data value in the stream identifies the associated scriptable object an interface of that object and a method called or property accessed by the script. In addition the script data value describes the argument types and the argument values supplied to the method property. For example scriptable objects can be identified by class globally unique identifiers GUID the interfaces can be identified by interface GUIDs and the methods and properties can be identified by dispatch identifiers DISPIDs . The argument types are specified as string numeric etc. and the argument values are recorded directly. Thus the script action logging module produces sequences of data script values describing the behaviors of script operations on web pages when the pages are rendered.

In one embodiment the script analysis module analyzes the execution of script operations of a script on a web page to determine whether a script operation of the web page s script produces abnormal behavior in the web browser module . As mentioned above abnormal behaviors can include crashing the browser performing an illegal access of local resources causing memory corruption memory buffer overflows or downloading of files that have not been requested or authorized by a user. The abnormal behaviors can also include execution of child processes or calls to the Application Programming Interface API which start or stop other processes on the system. Other embodiments can identify additional and or different abnormal behaviors. If the script analysis module observes the web browser module performing an abnormal behavior during execution of a script operation the sequence of script data values associated with the script that caused the abnormal behavior is tagged as malicious. In one embodiment only the sequence of script data values that resulted in the abnormal behavior is tagged as malicious. In other embodiments additional script data values in addition to the sequence of script data values that resulted in the abnormal behavior are tagged as malicious. For example the entire sequence of script data values of the web page including the script data values that lead to the abnormal behavior is tagged as malicious. The sequence is malicious because it represents an attempt to exploit vulnerability in the web browser or at least a possible vulnerability that might be exploited in the future. If the web page finishes i.e. completes rendering without causing any abnormal behaviors the sequence s of script data values associated with the scripts on the page are tagged as non malicious. 

In one embodiment the statistical analysis module analyzes the sequences of malicious and non malicious script data values to identify sequences that are likely to be malicious. In one embodiment the statistical analysis module performs a statistical classification of the script data values into likely malicious and likely non malicious sequences using a statistical algorithm such as C4.5 or C5.0. The statistical analysis module uses the algorithm to identify sequences of script data values that are highly likely to represent malicious behavior and correspondingly unlikely to represent non malicious behavior.

In one embodiment the statistical analysis module generates security data that represent the result of the statistical analysis of the script data value sequences. The security data can be used to determine the likelihood that an observed sequence of script data values at a client is likely to represent malicious or non malicious behavior. In one embodiment the security data are represented as a decision tree classifier having a plurality of branches. Branches of the decision tree describe sequences of script data values and indicate whether the sequences are likely to be malicious or non malicious. The decision tree can indicate for example the likelihood that the sequence represented by a particular node in the tree is malicious. This likelihood can be specified as a percentage e.g. the likelihood can indicate that the sequence represented by a given node was malicious in 70 of the observed instances of the sequence.

In one embodiment the security database stores the security data generated by the statistical analysis module . The security database may also store the sequences of script data values and other associated information in some embodiments. The security server provides the security data included in the security database to clients in order to initialize or update security software at the clients .

The security database stores the security data provided by the security server . In one embodiment the security data in the security database are updated at regular intervals as scheduled by the security server and or client . In alternative embodiments the security data in the security database are updated upon request by the user of client .

In one embodiment the web page monitoring module monitors web pages loaded into the web browser at the client . The web page monitoring module analyzes the script operations of a web page as the web page is rendered by the web browser . Specifically the web page monitoring module monitors the same script data points observed by the script action logging module of the security server such that the web page monitoring module generates a sequence of script data values for the web page as a result of the execution of the script operations specified by the web page s script.

The web page monitoring module compares the sequence of script data values of the web page to the security data stored in the security database . In one embodiment the web page monitoring module uses the security data to determine whether a sequence of script data values produced while rendering a web page at the client is likely to lead to an exploit of a security vulnerability at the client . That is the web page monitoring module uses the security data to determine whether the script operations of the web page at the client is likely to lead to a security vulnerability at the client .

In the embodiment where the security data is represented by a decision tree classifier the web page monitoring module traverses nodes of the decision tree according to the monitored sequence of script data values until it reaches a node indicating either that the sequence is malicious or is not malicious. The web page monitoring module can use thresholds to determine whether a sequence is malicious. For example a threshold can specify that a sequence is classified as non malicious if it has less than a 10 chance of resulting in an exploit of a security vulnerability. Similarly a threshold can specify that a sequence is classified malicious if it has greater than an 80 chance of resulting in an exploit.

In one embodiment the security action module performs a security action to prevent an exploitation of security vulnerability on client . In one embodiment the security action module performs the security action based on whether the monitoring module classifies a sequence of script data values from a web page as malicious or non malicious. That is the security action module performs the security action if the sequence is classified as malicious. In another embodiment the security action module uses the classification produced by the web page monitoring module as a heuristic that is combined with other heuristics to reach a determination as to whether a security action should be performed. For example the security action module can consider other factors such as the reputation of the website that provided the web page in combination with the classification produced by the monitoring module to determine whether to perform a security action.

The security action module can perform one or more of a variety of security actions. For example the security action module can terminate the script or scripts on the web page restrict actions that the web browser can perform notify the user of the client that an attempted exploit was detected etc. If the security data indicate that the web page s sequence of script data values is non malicious the security action module allows the web browser to render the web page.

In one embodiment the security server visits various web pages of websites and renders the web pages. The security server logs a sequence of script data values for each web page that is generated as a result of the script on the web page executing. For each web page the security server determines whether the execution of the script operations on the web page produces abnormal behavior in the web browser. The security server tags the sequence of script data values associated with the script operations of each web page as either malicious or non malicious responsive to whether the script operations produced abnormal behavior in the web browser. The security server performs a statistical analysis on the malicious and non malicious sequences of script data values from the web pages to determine sequences of script data values that are likely to be malicious. The security server generates security data based on the result of the statistical analysis that are used at clients to prevent exploits of security vulnerabilities.

In one embodiment the security module analyzes script operations performed by a script of a requested web page. The security module compares the sequence of script data values produced when executing the script operations of the web page with the security data. The security module determines whether the security data indicate that the script data values produced while rendering the web page are likely to attempt an exploit of a security vulnerability on the client . If the security data indicate that the web page s sequence of script data values is malicious the security module performs a security action. Responsive to the security data indicating that the web page s script data values are non malicious the security module allows the web page to continue rendering at the client .

The above description is included to illustrate to a security server and a security module of a client according to one embodiment. Other embodiments the operation of certain embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion many variations will be apparent to one skilled in the relevant art that would yet be encompassed by the spirit and scope of the invention.

