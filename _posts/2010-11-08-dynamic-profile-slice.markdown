---

title: Dynamic profile slice
abstract: Systems and methods are provided for maintaining a dynamic profile slice of a user profile of a user. In one embodiment, a real-time user-generated context of the user is monitored over time to accumulate keywords in the dynamic profile slice of the user that are representative of dynamic interests of the user. Weights are assigned to the keywords in the dynamic profile slice using a time and/or location weighting function.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08473512&OS=08473512&RS=08473512
owner: Waldeck Technology, LLC
number: 08473512
owner_city: Portsmouth
owner_country: US
publication_date: 20101108
---
This application claims the benefit of provisional patent application Ser. No. 61 258 838 filed Nov. 6 2009 the disclosure of which is hereby incorporated herein by reference in its entirety.

The present disclosure relates to maintaining and using a dynamic profile slice of a user profile of a user.

Social network profile information is relatively static in nature. For example after a Facebook user sets up his profile the first time he often does not edit his profile for a long time. In other words typical social network user profiles tend to represent static attributes of their owners. As such when using the user profiles dynamic attributes of the users may not be adequately represented.

The present disclosure relates to maintaining a dynamic profile slice of a user profile of a user. In one embodiment a real time user generated context of the user is monitored over time to accumulate keywords in the dynamic profile slice of the user that are representative of dynamic interests of the user along with for each keyword in the dynamic profile slice a corresponding timestamp defining a time at which the keyword was most recently obtained from the real time user generated context of the user. A weight is assigned to each keyword in the dynamic profile slice based on an amount of time that has elapsed since the most recent time at which the keyword was obtained from the real time user generated context of the user as indicated by the timestamp for the keyword.

In another embodiment a real time user generated context of the user is monitored over time to accumulate keywords in the dynamic profile slice of the user that are representative of dynamic interests of the user along with for each keyword in the dynamic profile slice a location stamp that defines a location at which the user was located when the keyword was obtained from the real time user generated context of the user. A weight is assigned to each keyword in the dynamic profile slice based on a distance between a current location of the user and the location at which the user was located when the keyword was obtained from the real time user generated context of the user as indicated by the location stamp for the keyword.

In yet another embodiment a real time user generated context of the user is monitored over time to accumulate keywords in the dynamic profile slice of the user that are representative of dynamic interests of the user along with for each keyword in the dynamic profile slice a corresponding timestamp defining a time at which the keyword was most recently obtained from the real time user generated context of the user and a location stamp that defines a location at which the user was located when the keyword was obtained from the real time user generated context of the user. A weight is assigned to each keyword in the dynamic profile slice based on an amount of time that has elapsed since the most recent time at which the keyword was obtained from the real time user generated context of the user as indicated by the timestamp for the keyword and a distance between a current location of the user and the location at which the user was located when the keyword was obtained from the real time user generated context of the user as indicated by the location stamp for the keyword.

Those skilled in the art will appreciate the scope of the present disclosure and realize additional aspects thereof after reading the following detailed description of the preferred embodiments in association with the accompanying drawing figures.

The embodiments set forth below represent the necessary information to enable those skilled in the art to practice the embodiments and illustrate the best mode of practicing the embodiments. Upon reading the following description in light of the accompanying drawing figures those skilled in the art will understand the concepts of the disclosure and will recognize applications of these concepts not particularly addressed herein. It should be understood that these concepts and applications fall within the scope of the disclosure and the accompanying claims.

Specifically the network may include wired components wireless components or both wired and wireless components. In one exemplary embodiment the network is a distributed public network such as the Internet where the mobile devices are enabled to connect to the network via local wireless connections e.g. Wi Fi or IEEE 802.11 connections or wireless telecommunications connections e.g. 3G or 4G telecommunications connections such as GSM LTE W CDMA or WiMAX connections .

As discussed below in detail the MAP server operates to obtain current locations including location updates and user profiles of the users of the mobile devices . The current locations of the users can be expressed as positional geographic coordinates such as latitude longitude pairs and a height vector if applicable or any other similar information capable of identifying a given physical point in space in a two dimensional or three dimensional coordinate system. Using the current locations and user profiles of the users the MAP server is enabled to provide a number of features such as but not limited to forming crowds of users using current locations and or user profiles of the users generating aggregate profiles for crowds of users and tracking crowds. Note that while the MAP server is illustrated as a single server for simplicity and ease of discussion it should be appreciated that the MAP server may be implemented as a single physical server or multiple physical servers operating in a collaborative manner for purposes of redundancy and or load sharing.

In general the one or more profile servers operate to store user profiles for a number of persons including the users of the mobile devices . For example the one or more profile servers may be servers providing social network services such as the Facebook social networking service the MySpace social networking service the LinkedIN social networking service or the like. As discussed below using the one or more profile servers the MAP server is enabled to directly or indirectly obtain the user profiles of the users of the mobile devices . The location server generally operates to receive location updates from the mobile devices and make the location updates available to entities such as for instance the MAP server . In one exemplary embodiment the location server is a server operating to provide Yahoo s FireEagle service.

The mobile devices may be mobile smart phones portable media player devices mobile gaming devices or the like. Some exemplary mobile devices that may be programmed or otherwise configured to operate as the mobile devices are the Apple iPhone the Palm Pre the Samsung Rogue the Blackberry Storm the Motorola DROID or similar phone running Google s Android Operating System an Apple iPad and the Apple iPod Touch device. However this list of exemplary mobile devices is not exhaustive and is not intended to limit the scope of the present disclosure.

The mobile devices through N include MAP clients through N generally referred to herein collectively as MAP clients or individually as MAP client MAP applications through N generally referred to herein collectively as MAP applications or individually as MAP application third party applications through N generally referred to herein collectively as third party applications or individually as third party application and location functions through N generally referred to herein collectively as location functions or individually as location function respectively. The MAP client is preferably implemented in software. In general in the preferred embodiment the MAP client is a middleware layer operating to interface an application layer i.e. the MAP application and the third party applications to the MAP server . More specifically the MAP client enables the MAP application and the third party applications to request and receive data from the MAP server . In addition the MAP client enables applications such as the MAP application and the third party applications to access data from the MAP server .

The MAP application is also preferably implemented in software. The MAP application generally provides a user interface component between the user and the MAP server . More specifically among other things the MAP application enables the user to initiate crowd search requests or requests for crowd data from the MAP server and presents corresponding data returned by the MAP server to the user . The MAP application also enables the user to configure various settings. For example the MAP application may enable the user to select a desired social networking service e.g. Facebook MySpace LinkedIN etc. from which to obtain the user profile of the user and provide any necessary credentials e.g. username and password needed to access the user profile from the social networking service.

The third party applications are preferably implemented in software. The third party applications operate to access the MAP server via the MAP client . The third party applications may utilize data obtained from the MAP server in any desired manner. As an example one of the third party applications may be a gaming application that utilizes crowd data to notify the user of Points of Interest POIs or Areas of Interest AOIs where crowds of interest are currently located. It should be noted that while the MAP client is illustrated as being separate from the MAP application and the third party applications the present disclosure is not limited thereto. The functionality of the MAP client may alternatively be incorporated into the MAP application and the third party applications .

The location function may be implemented in hardware software or a combination thereof. In general the location function operates to determine or otherwise obtain the location of the mobile device . For example the location function may be or include a Global Positioning System GPS receiver. In addition or alternatively the location function may include hardware and or software that enables improved location tracking in indoor environments such as for example shopping malls. For example the location function may be part of or compatible with the InvisiTrack Location System provided by InvisiTrack and described in U.S. Pat. No. 7 423 580 entitled Method and System of Three Dimensional Positional Finding which issued on Sep. 9 2008 U.S. Pat. No. 7 787 886 entitled System and Method for Locating a Target using RFID which issued on Aug. 31 2010 and U.S. Patent Application Publication No. 2007 0075898 entitled Method and System for Positional Finding Using RF Continuous and or Combined Movement which published on Apr. 5 2007 all of which are hereby incorporated herein by reference for their teachings regarding location tracking.

The subscriber device is a physical device such as a personal computer a mobile computer e.g. a notebook computer a netbook computer a tablet computer etc. a mobile smart phone or the like. The subscriber associated with the subscriber device is a person or entity. In general the subscriber device enables the subscriber to access the MAP server via a web browser to obtain various types of data preferably for a fee. For example the subscriber may pay a fee to have access to crowd data such as aggregate profiles for crowds located at one or more POIs and or located in one or more AOIs pay a fee to track crowds or the like. Note that the web browser is exemplary. In another embodiment the subscriber device is enabled to access the MAP server via a custom application.

Lastly the third party service is a service that has access to data from the MAP server such as aggregate profiles for one or more crowds at one or more POIs or within one or more AOIs. Based on the data from the MAP server the third party service operates to provide a service such as for example targeted advertising. For example the third party service may obtain anonymous aggregate profile data for one or more crowds located at a POI and then provide targeted advertising to known users located at the POI based on the anonymous aggregate profile data. Note that while targeted advertising is mentioned as an exemplary third party service other types of third party services may additionally or alternatively be provided. Other types of third party services that may be provided will be apparent to one of ordinary skill in the art upon reading this disclosure.

Before proceeding it should be noted that while the system of illustrates an embodiment where the one or more profile servers and the location server are separate from the MAP server the present disclosure is not limited thereto. In an alternative embodiment the functionality of the one or more profile servers and or the location server may be implemented within the MAP server .

The business logic layer includes a profile manager a location manager a history manager a crowd analyzer and an aggregation engine each of which is preferably implemented in software. The profile manager generally operates to obtain the user profiles of the users directly or indirectly from the one or more profile servers and store the user profiles in the persistence layer . In addition as described below in detail the profile manager also operates to maintain dynamic profile slices in the user profiles of the users that reflect dynamic interests of the users by monitoring real time user generated contexts of the users . As described below the real time user generated contexts of the users are preferably search terms entered in a crowd search feature provided by the system . However the present disclosure is not limited thereto. Other types of real time user generated contexts may be monitored in addition to or as an alternative to the search terms entered into the crowd search feature. Some exemplary real time user generated contexts are but are not limited to search terms entered into a third party search feature topics of conversation on a message board instant messaging or other platform posts to a blog posts to a microblog or the like. In addition to using real time user generated contexts other types of contextual information may be used such as but not limited to data obtained by one or more sensors of the mobile devices of the users . The location manager operates to obtain the current locations of the users including location updates. As discussed below the current locations of the users may be obtained directly from the mobile devices and or obtained from the location server .

The history manager generally operates to maintain a historical record of anonymized user profile data by location. Note that while the user profile data stored in the historical record is preferably anonymized it is not limited thereto. The crowd analyzer operates to form crowds of users. In one embodiment the crowd analyzer utilizes a spatial crowd formation algorithm. However the present disclosure is not limited thereto. In addition the crowd analyzer may further characterize crowds to reflect degree of fragmentation best case and worst case degree of separation DOS and or degree of bi directionality. Still further the crowd analyzer may also operate to track crowds. The aggregation engine generally operates to provide aggregate profile data in response to requests from the mobile devices the subscriber device and the third party service . The aggregate profile data may be historical aggregate profile data for one or more POIs or one or more AOIs or aggregate profile data for crowd s currently at one or more POIs or within one or more AOIs. For additional information regarding the operation of the profile manager the location manager the history manager the crowd analyzer and the aggregation engine the interested reader is directed to U.S. patent application Ser. No. 12 645 532 entitled FORMING CROWDS AND PROVIDING ACCESS TO CROWD DATA IN A MOBILE ENVIRONMENT which was filed Dec. 23 2009 U.S. patent application Ser. No. 12 645 539 entitled ANONYMOUS CROWD TRACKING which was filed Dec. 23 2009 U.S. patent application Ser. No. 12 645 535 entitled MAINTAINING A HISTORICAL RECORD OF ANONYMIZED USER PROFILE DATA BY LOCATION FOR USERS IN A MOBILE ENVIRONMENT which was filed Dec. 23 2009 U.S. patent application Ser. No. 12 645 546 entitled CROWD FORMATION FOR MOBILE DEVICE USERS which was filed Dec. 23 2009 U.S. patent application Ser. No. 12 645 556 entitled SERVING A REQUEST FOR DATA FROM A HISTORICAL RECORD OF ANONYMIZED USER PROFILE DATA IN A MOBILE ENVIRONMENT which was filed Dec. 23 2009 U.S. patent application Ser. No. 12 645 560 entitled HANDLING CROWD REQUESTS FOR LARGE GEOGRAPHIC AREAS which was filed Dec. 23 2009 and U.S. patent application Ser. No. 12 645 544 entitled MODIFYING A USER S CONTRIBUTION TO AN AGGREGATE PROFILE BASED ON TIME BETWEEN LOCATION UPDATES AND EXTERNAL EVENTS which was filed Dec. 23 2009 all of which have been incorporated herein by reference in their entireties.

The persistence layer includes an object mapping layer and a datastore . The object mapping layer is preferably implemented in software. The datastore is preferably a relational database which is implemented in a combination of hardware i.e. physical data storage hardware and software i.e. relational database software . In this embodiment the business logic layer is implemented in an object oriented programming language such as for example Java. As such the object mapping layer operates to map objects used in the business logic layer to relational database entities stored in the datastore . Note that in one embodiment data is stored in the datastore in a Resource Description Framework RDF compatible format.

In an alternative embodiment rather than being a relational database the datastore may be implemented as an RDF datastore. More specifically the RDF datastore may be compatible with RDF technology adopted by Semantic Web activities. Namely the RDF datastore may use the Friend Of A Friend FOAF vocabulary for describing people their social networks and their interests. In this embodiment the MAP server may be designed to accept raw FOAF files describing persons their friends and their interests. These FOAF files are currently output by some social networking services such as LiveJournal and Facebook . The MAP server may then persist RDF descriptions of the users as a proprietary extension of the FOAF vocabulary that includes additional properties desired for the system .

At some point after authentication is complete a user profile process is performed such that a user profile of the user is obtained from the profile server and delivered to the MAP server step . In this embodiment the MAP client of the mobile device sends a profile request to the profile server step A . In response the profile server returns the user profile of the user to the mobile device step B . The MAP client of the mobile device then sends the user profile of the user to the MAP server step C . Note that while in this embodiment the MAP client sends the complete user profile of the user to the MAP server in an alternative embodiment the MAP client may filter the user profile of the user according to criteria specified by the user . For example the user profile of the user may include demographic information general interests music interests and movie interests and the user may specify that the demographic information or some subset thereof is to be filtered or removed before sending the user profile to the MAP server .

Upon receiving the user profile of the user from the MAP client of the mobile device the profile manager of the MAP server processes the user profile step D . More specifically in the preferred embodiment the profile manager includes social network handlers for the social network services supported by the MAP server that operate to map the user profiles of the users obtained from the social network services to a common format utilized by the MAP server . This common format includes a number of user profile categories or user profile slices such as for example a demographic profile category a social interaction profile category a general interests category a music interests profile category and a movie interests profile category. In addition as discussed below the user profiles of the users maintained by the MAP server include a dynamic profile slice that is automatically updated by the MAP server based on real time user generated contexts of the users e.g. search terms entered by the users .

For example if the MAP server supports user profiles from Facebook MySpace and LinkedIN the profile manager may include a Facebook handler a MySpace handler and a LinkedIN handler. The social network handlers process user profiles from the corresponding social network services to generate user profiles for the users in the common format used by the MAP server . For this example assume that the user profile of the user is from Facebook . The profile manager uses a Facebook handler to process the user profile of the user to map the user profile of the user from Facebook to a user profile for the user for the MAP server that includes lists of keywords for a number of predefined profile categories or profile slices such as for example a demographic profile category a social interaction profile category a general interests profile category a music interests profile category and a movie interests profile category. As such the user profile of the user from Facebook may be processed by the Facebook handler of the profile manager to create a list of keywords such as for example liberal High School Graduate 35 44 College Graduate etc. for the demographic profile category a list of keywords such as Seeking Friendship for the social interaction profile category a list of keywords such as politics technology photography books etc. for the general interests profile category a list of keywords including music genres artist names album names or the like for the music interests profile category and a list of keywords including movie titles actor or actress names director names movie genres or the like for the movie interests profile category. In one embodiment the profile manager may use natural language processing or semantic analysis. For example if the Facebook user profile of the user states that the user is 20 years old semantic analysis may result in the keyword of 18 24 years old being stored in the user profile of the user for the MAP server .

After processing the user profile of the user the profile manager of the MAP server stores the resulting user profile for the user step E . More specifically in one embodiment the MAP server stores user records for the users through N in the datastore . The user profile of the user is stored in the user record of the user . The user record of the user includes a unique identifier of the user the user profile of the user and as discussed below a current location of the user . Note that the user profile of the user may be updated as desired. For example in one embodiment the user profile of the user is updated by repeating step each time the user activates the MAP application .

Note that while the discussion herein focuses on an embodiment where the user profiles of the users are obtained from the one or more profile servers the user profiles of the users may be obtained in any desired manner. For example in one alternative embodiment the user may identify one or more favorite websites. The profile manager of the MAP server may then crawl the one or more favorite websites of the user to obtain keywords appearing in the one or more favorite websites of the user . These keywords may then be stored as the user profile of the user .

At some point a process is performed such that a current location of the mobile device and thus a current location of the user is obtained by the MAP server step . In this embodiment the MAP application of the mobile device obtains the current location of the mobile device from the location function of the mobile device . The MAP application then provides the current location of the mobile device to the MAP client and the MAP client then provides the current location of the mobile device to the MAP server step A . Note that step A may be repeated periodically or in response to a change in the current location of the mobile device in order for the MAP application to provide location updates for the user to the MAP server .

In response to receiving the current location of the mobile device the location manager of the MAP server stores the current location of the mobile device as the current location of the user step B . More specifically in one embodiment the current location of the user is stored in the user record of the user maintained in the datastore of the MAP server . Note that in the preferred embodiment only the current location of the user is stored in the user record of the user . In this manner the MAP server maintains privacy for the user since the MAP server does not maintain a historical record of the location of the user . Any historical data maintained by the MAP server is preferably anonymized by the history manager in order to maintain the privacy of the users .

In addition to storing the current location of the user the location manager sends the current location of the user to the location server step C . In this embodiment by providing location updates to the location server the MAP server in return receives location updates for the user from the location server . This is particularly beneficial when the mobile device does not permit background processes. If the mobile device does not permit background processes the MAP application will not be able to provide location updates for the user to the MAP server unless the MAP application is active. Therefore when the MAP application is not active other applications running on the mobile device or some other device of the user may directly or indirectly provide location updates to the location server for the user . This is illustrated in step where the location server receives a location update for the user directly or indirectly from another application running on the mobile device or an application running on another device of the user step A . The location server then provides the location update for the user to the MAP server step B . In response the location manager updates and stores the current location of the user in the user record of the user step C . In this manner the MAP server is enabled to obtain location updates for the user even when the MAP application is not active at the mobile device .

At some point after authentication is complete a user profile process is performed such that a user profile of the user is obtained from the profile server and delivered to the MAP server step . In this embodiment the profile manager of the MAP server sends a profile request to the profile server step A . In response the profile server returns the user profile of the user to the profile manager of the MAP server step B . Note that while in this embodiment the profile server returns the complete user profile of the user to the MAP server in an alternative embodiment the profile server may return a filtered version of the user profile of the user to the MAP server . The profile server may filter the user profile of the user according to criteria specified by the user . For example the user profile of the user may include demographic information general interests music interests and movie interests and the user may specify that the demographic information or some subset thereof is to be filtered or removed before sending the user profile to the MAP server .

Upon receiving the user profile of the user the profile manager of the MAP server processes the user profile step C . More specifically as discussed above in the preferred embodiment the profile manager includes social network handlers for the social network services supported by the MAP server . The social network handlers process user profiles to generate user profiles for the MAP server that include lists of keywords for each of a number of profile categories or profile slices.

After processing the user profile of the user the profile manager of the MAP server stores the resulting user profile for the user step D . More specifically in one embodiment the MAP server stores user records for the users in the datastore . The user profile of the user is stored in the user record of the user . The user record of the user includes a unique identifier of the user the user profile of the user and as discussed below a current location of the user . Note that the user profile of the user may be updated as desired. For example in one embodiment the user profile of the user is updated by repeating step each time the user activates the MAP application .

Note that while the discussion herein focuses on an embodiment where the user profiles of the users are obtained from the one or more profile servers the user profiles of the users may be obtained in any desired manner. For example in one alternative embodiment the user may identify one or more favorite websites. The profile manager of the MAP server may then crawl the one or more favorite websites of the user to obtain keywords appearing in the one or more favorite websites of the user . These keywords may then be stored as the user profile of the user .

At some point a process is performed such that a current location of the mobile device and thus a current location of the user is obtained by the MAP server step . In this embodiment the MAP application of the mobile device obtains the current location of the mobile device from the location function of the mobile device . The MAP application then provides the current location of the user of the mobile device to the location server step A . Note that step A may be repeated periodically or in response to changes in the location of the mobile device in order to provide location updates for the user to the MAP server . The location server then provides the current location of the user to the MAP server step B . The location server may provide the current location of the user to the MAP server automatically in response to receiving the current location of the user from the mobile device or in response to a request from the MAP server .

In response to receiving the current location of the mobile device the location manager of the MAP server stores the current location of the mobile device as the current location of the user step C . More specifically in one embodiment the current location of the user is stored in the user record of the user maintained in the datastore of the MAP server . Note that in the preferred embodiment only the current location of the user is stored in the user record of the user . In this manner the MAP server maintains privacy for the user since the MAP server does not maintain a historical record of the location of the user . As discussed below in detail historical data maintained by the MAP server is preferably anonymized in order to maintain the privacy of the users .

As discussed above the use of the location server is particularly beneficial when the mobile device does not permit background processes. As such if the mobile device does not permit background processes the MAP application will not provide location updates for the user to the location server unless the MAP application is active. However other applications running on the mobile device or some other device of the user may provide location updates to the location server for the user when the MAP application is not active. This is illustrated in step where the location server receives a location update for the user from another application running on the mobile device or an application running on another device of the user step A . The location server then provides the location update for the user to the MAP server step B . In response the location manager updates and stores the current location of the user in the user record of the user step C . In this manner the MAP server is enabled to obtain location updates for the user even when the MAP application is not active at the mobile device .

First the crowd analyzer establishes a bounding box for the crowd formation process step . Note that while a bounding box is used in this example other geographic shapes may be used to define a bounding region for the crowd formation process e.g. a bounding circle . In one embodiment if crowd formation is performed in response to a specific request the bounding box is established based on the POI or the AOI of the request. If the request is for a POI then the bounding box is a geographic area of a predetermined size centered at the POI. If the request is for an AOI the bounding box is the AOI. Alternatively if the crowd formation process is performed proactively the bounding box is a bounding box of a predefined size.

The crowd analyzer then creates a crowd for each individual user in the bounding box step . More specifically the crowd analyzer queries the datastore of the MAP server to identify users currently located within the bounding box. Then a crowd of one user is created for each user currently located within the bounding box. Next the crowd analyzer determines the two closest crowds in the bounding box step and determines a distance between the two crowds step . The distance between the two crowds is a distance between crowd centers of the two crowds. Note that the crowd center of a crowd of one is the current location of the user in the crowd. The crowd analyzer then determines whether the distance between the two crowds is less than an optimal inclusion distance step . In this embodiment the optimal inclusion distance is a predefined static distance. If the distance between the two crowds is less than the optimal inclusion distance the crowd analyzer combines the two crowds step and computes a new crowd center for the resulting crowd step . The crowd center may be computed based on the current locations of the users in the crowd using a center of mass algorithm. At this point the process returns to step and is repeated until the distance between the two closest crowds is not less than the optimal inclusion distance. At that point the crowd analyzer discards any crowds with less than three users step . Note that throughout this disclosure crowds are only maintained if the crowds include three or more users. However while three users is the preferred minimum number of users in a crowd the present disclosure is not limited thereto. The minimum number of users in a crowd may be defined as any number greater than or equal to two users.

Next the crowd analyzer determines whether the new and old bounding boxes overlap step . If so the crowd analyzer creates a bounding box encompassing the new and old bounding boxes step . For example if the new and old bounding boxes are 40 40 meter regions and a 1 1 meter square at the northeast corner of the new bounding box overlaps a 1 1 meter square at the southwest corner of the old bounding box the crowd analyzer may create a 79 79 meter square bounding box encompassing both the new and old bounding boxes.

The crowd analyzer then determines the individual users and crowds relevant to the bounding box created in step step . The crowds relevant to the bounding box are crowds that are within or overlap the bounding box e.g. have at least one user located within the bounding box . The individual users relevant to the bounding box are users that are currently located within the bounding box and not already part of a crowd. Next the crowd analyzer computes an optimal inclusion distance for individual users based on user density within the bounding box step . More specifically in one embodiment the optimal inclusion distance for individuals which is also referred to herein as an initial optimal inclusion distance is set according to the following equation 

The crowd analyzer then creates a crowd for each individual user within the bounding box that is not already included in a crowd and sets the optimal inclusion distance for the crowds to the initial optimal inclusion distance step . At this point the process proceeds to where the crowd analyzer analyzes the crowds relevant to the bounding box to determine whether any of the crowd members i.e. users in the crowds violate the optimal inclusion distance of their crowds step . Any crowd member that violates the optimal inclusion distance of his or her crowd is then removed from that crowd step . The crowd analyzer then creates a crowd of one user for each of the users removed from their crowds in step and sets the optimal inclusion distance for the newly created crowds to the initial optimal inclusion distance step .

Next the crowd analyzer determines the two closest crowds for the bounding box step and a distance between the two closest crowds step . The distance between the two closest crowds is the distance between the crowd centers of the two closest crowds. The crowd analyzer then determines whether the distance between the two closest crowds is less than the optimal inclusion distance of a larger of the two closest crowds step . If the two closest crowds are of the same size i.e. have the same number of users then the optimal inclusion distance of either of the two closest crowds may be used. Alternatively if the two closest crowds are of the same size the optimal inclusion distances of both of the two closest crowds may be used such that the crowd analyzer determines whether the distance between the two closest crowds is less than the optimal inclusion distances of both of the two closest crowds. As another alternative if the two closest crowds are of the same size the crowd analyzer may compare the distance between the two closest crowds to an average of the optimal inclusion distances of the two closest crowds.

If the distance between the two closest crowds is less than the optimal inclusion distance the two closest crowds are combined or merged step and a new crowd center for the resulting crowd is computed step . Again a center of mass algorithm may be used to compute the crowd center of a crowd. In addition a new optimal inclusion distance for the resulting crowd is computed step . In one embodiment the new optimal inclusion distance for the resulting crowd is computed as 

At this point the crowd analyzer determines whether a maximum number of iterations have been performed step . The maximum number of iterations is a predefined number that ensures that the crowd formation process does not indefinitely loop over steps through or loop over steps through more than a desired maximum number of times. If the maximum number of iterations has not been reached the process returns to step and is repeated until either the distance between the two closest crowds is not less than the optimal inclusion distance of the larger crowd or the maximum number of iterations has been reached. At that point the crowd analyzer discards crowds with less than three users or members step and the process ends.

Returning to step in if the new and old bounding boxes do not overlap the process proceeds to and the bounding box to be processed is set to the old bounding box step . In general the crowd analyzer then processes the old bounding box in much the same manner as described above with respect to steps through . More specifically the crowd analyzer determines the individual users and crowds relevant to the bounding box step . The crowds relevant to the bounding box are crowds that are within or overlap the bounding box e.g. have at least one user located within the bounding box . The individual users relevant to the bounding box are users that are currently located within the bounding box and not already part of a crowd. Next the crowd analyzer computes an optimal inclusion distance for individual users based on user density within the bounding box step . More specifically in one embodiment the optimal inclusion distance for individuals which is also referred to herein as an initial optimal inclusion distance is set according to the following equation 

The crowd analyzer then creates a crowd of one user for each individual user within the bounding box that is not already included in a crowd and sets the optimal inclusion distance for the crowds to the initial optimal inclusion distance step . At this point the crowd analyzer analyzes the crowds for the bounding box to determine whether any crowd members i.e. users in the crowds violate the optimal inclusion distance of their crowds step . Any crowd member that violates the optimal inclusion distance of his or her crowd is then removed from that crowd step . The crowd analyzer then creates a crowd of one user for each of the users removed from their crowds in step and sets the optimal inclusion distance for the newly created crowds to the initial optimal inclusion distance step .

Next the crowd analyzer determines the two closest crowds in the bounding box step and a distance between the two closest crowds step . The distance between the two closest crowds is the distance between the crowd centers of the two closest crowds. The crowd analyzer then determines whether the distance between the two closest crowds is less than the optimal inclusion distance of a larger of the two closest crowds step . If the two closest crowds are of the same size i.e. have the same number of users then the optimal inclusion distance of either of the two closest crowds may be used. Alternatively if the two closest crowds are of the same size the optimal inclusion distances of both of the two closest crowds may be used such that the crowd analyzer determines whether the distance between the two closest crowds is less than the optimal inclusion distances of both of the two closest crowds. As another alternative if the two closest crowds are of the same size the crowd analyzer may compare the distance between the two closest crowds to an average of the optimal inclusion distances of the two closest crowds.

If the distance between the two closest crowds is less than the optimal inclusion distance the two closest crowds are combined or merged step and a new crowd center for the resulting crowd is computed step . Again a center of mass algorithm may be used to compute the crowd center of a crowd. In addition a new optimal inclusion distance for the resulting crowd is computed step . As discussed above in one embodiment the new optimal inclusion distance for the resulting crowd is computed as 

At this point the crowd analyzer determines whether a maximum number of iterations have been performed step . If the maximum number of iterations has not been reached the process returns to step and is repeated until either the distance between the two closest crowds is not less than the optimal inclusion distance of the larger crowd or the maximum number of iterations has been reached. At that point the crowd analyzer discards crowds with less than three users or members step . The crowd analyzer then determines whether the crowd formation process for the new and old bounding boxes is done step . In other words the crowd analyzer determines whether both the new and old bounding boxes have been processed. If not the bounding box is set to the new bounding box step and the process returns to step and is repeated for the new bounding box. Once both the new and old bounding boxes have been processed the crowd formation process ends.

The crowd analyzer then identifies the two closest crowds and in the new bounding box and determines a distance between the two closest crowds and . In this example the distance between the two closest crowds and is less than the optimal inclusion distance. As such the two closest crowds and are merged and a new crowd center and new optimal inclusion distance are computed as illustrated in . The crowd analyzer then repeats the process such that the two closest crowds and in the new bounding box are again merged as illustrated in . At this point the distance between the two closest crowds and is greater than the appropriate optimal inclusion distance. As such the crowd formation process is complete.

Since the old bounding box and the new bounding box overlap the crowd analyzer creates a bounding box that encompasses both the old bounding box and the new bounding box as illustrated in . In addition the crowd analyzer creates crowds through for individual users currently located within the bounding box . The optimal inclusion distances of the crowds through are set to the initial optimal inclusion distance computed by the crowd analyzer based on the density of users in the bounding box .

Next the crowd analyzer analyzes the crowds and through to determine whether any members of the crowds and through violate the optimal inclusion distances of the crowds and through . In this example as a result of the user leaving the crowd and moving to his new location both of the remaining members of the crowd violate the optimal inclusion distance of the crowd . As such the crowd analyzer removes the remaining users from the crowd and creates crowds and of one user each for those users as illustrated in .

The crowd analyzer then identifies the two closest crowds in the bounding box which in this example are the crowds and . Next the crowd analyzer computes a distance between the two crowds and . In this example the distance between the two crowds and is less than the initial optimal inclusion distance and as such the two crowds and are combined. In this example crowds are combined by merging the smaller crowd into the larger crowd. Since the two crowds and are of the same size the crowd analyzer merges the crowd into the crowd as illustrated in . A new crowd center and new optimal inclusion distance are then computed for the crowd .

At this point the crowd analyzer repeats the process and determines that the crowds and are now the two closest crowds. In this example the distance between the two crowds and is less than the optimal inclusion distance of the larger of the two crowds and which is the crowd . As such the crowd is merged into the crowd and a new crowd center and optimal inclusion distance are computed for the crowd as illustrated in . At this point there are no two crowds closer than the optimal inclusion distance of the larger of the two crowds. As such the crowd analyzer discards any crowds having less than three members as illustrated in . In this example the crowds and have less than three members and are therefore removed. The crowd has three or more members and as such is not removed. At this point the crowd formation process is complete.

More specifically as illustrated in as a result of the movement of the user from the old location to the new location the remaining users in the crowd no longer satisfy the optimal inclusion distance for the crowd . As such the remaining users in the crowd are removed from the crowd and crowds and of one user each are created for the removed users. In this example no two crowds in the old bounding box are close enough to be combined. As such the crowd analyzer discards any crowds having less than three members as illustrated in and processing of the old bounding box is complete. The crowd analyzer then proceeds to process the new bounding box .

As illustrated in processing of the new bounding box begins by the crowd analyzer creating a crowd of one user for the user. The crowd analyzer then identifies the crowds and as the two closest crowds in the new bounding box and determines a distance between the two crowds and . In this example the distance between the two crowds and is less than the optimal inclusion distance of the larger crowd which is the crowd . As such the crowd analyzer combines the crowds and by merging the crowd into the crowd as illustrated in . A new crowd center and new optimal inclusion distance are then computed for the crowd . At this point the crowd formation process is complete. Note that the crowd formation processes described above with respect to are exemplary. The present disclosure is not limited thereto. Any type of crowd formation process may be used.

In addition to search terms the crowd search request may include a POI or AOI for the crowd search request. Note that the POI or AOI for the crowd search request may be the current location of the user or a geographic region of a predetermined shape and size centered at or otherwise encompassing the current location of the user . Alternatively the POI or AOI for the crowd search request may be a POI or AOI selected by the user . For example the user may be enabled to select a desired POI or AOI from a map select a desired POI or AOI from a predefined list of POIs and or AOIs or the like.

In response to receiving the crowd search request the MAP server updates the dynamic profile slice of the user which is also referred to as the requesting user step . As discussed below in detail the search terms or keywords included in the crowd search request are added to the dynamic profile slice of the user . In addition the time at which the crowd search request is received by the MAP server or sent by the mobile device and or the current location of the user at the time at which the crowd search request is received by the MAP server or sent by the mobile device are preferably stored in association with the keywords in the dynamic profile slice of the user . In this manner as the user initiates new crowd search requests over time the search terms or keywords included in the crowd search requests are accumulated in the dynamic profile slice of the user . As a result the dynamic profile slice of the user is automatically updated and operates to reflect the dynamic or changing interests of the user over time and or location.

In addition to updating the dynamic profile slice of the user the MAP sever and specifically the crowd analyzer identifies one or more crowds that satisfy the crowd search request step . As discussed below in detail the one or more crowds that satisfy the crowd search request are crowds that include users with user profiles that match the search terms or keywords included in the crowd search request. The MAP server then returns results of the crowd search to the MAP client of the mobile device step which in turn sends the results to the MAP application step where the results are presented to the user step . The results of the crowd search generally include crowd data for each of the one or more crowds identified as matching the crowd search request. Preferably the crowd data includes the current locations of the one or more crowds e.g. the crowd centers of the one or more crowds . In addition the crowd data may include aggregate profiles of the crowds based on a comparison of the user profiles of the users in the crowds to one another or to the search terms.

If a matching keyword is not already in the dynamic profile slice of the user profile of the user the profile manager adds the keyword from the crowd search request to the dynamic profile slice of the user profile of the user step . In this embodiment the profile manager also adds a timestamp and location stamp for the keyword to the dynamic profile slice of the user profile of the user step . The timestamp is the time at which the crowd search request was received by the MAP server . The location stamp is the current location of the user at the time at which the crowd search request was received by the MAP server . Returning to step if a matching keyword does exist in the dynamic profile slice of the user profile of the user the profile manager proceeds to step in order to add a timestamp and location stamp for the matching keyword in the dynamic profile slice of the user profile of the user . Using the process of the dynamic profile slice of the user profile of the user includes an accumulated list of keywords from crowd search requests issued by the user . In addition for each keyword in the accumulated list of keywords the dynamic profile slice includes either the timestamp and location stamp for the most recent occurrence of the keyword in a crowd search request from the user or a list of timestamps and location stamps for a number of previous occurrences of the keyword in previous crowd search requests from the user .

Next the crowd analyzer identifies one or more crowds that are relevant to the bounding region for the crowd search request step . The one or more crowds relevant to the bounding region are one or more crowds that are located within or that overlap the bounding region. For example the one or more crowds may be one or more crowds having crowd centers located within the bounding region one or more crowds having at least one user located within the bounding region one or more crowds having crowd perimeters that are within or overlap the bounding region or the like. Then for each relevant crowd identified in step the crowd analyzer obtains an aggregate profile for the relevant crowd where the aggregate profile is based on a comparison of the user profiles of the users in the crowd to one another step . In one embodiment the aggregate profile of a relevant crowd obtained in step includes for each keyword that appears in the user profile of at least one user in the crowd a number of user matches for the keyword. The number of user matches for a keyword is the number of users in the crowd that have user profiles that include a matching keyword.

Lastly the crowd analyzer compares the aggregate profiles of the one or more crowds identified in step to the search terms or keywords in the crowd search request to identify the one or more crowds that satisfy the crowd search request step . In one embodiment the one or more crowds that satisfy the crowd search request are those crowds from the one or more crowds identified in step that have aggregate profiles that include keywords that match all of the search terms or keywords in the crowd search request. In another embodiment the crowd analyzer identifies those crowds from the one or more crowds identified in step that have aggregate profiles that include keywords that match all of the search terms or keywords in the crowd search request. The crowd analyzer then selects a predetermined number of the crowds having the highest number of user matches for the keywords in the crowd search request as the crowds that satisfy the crowd search request. Alternatively the crowd analyzer may then select crowds having at least a predefined threshold number of user matches for each of the keywords in the crowd search request as the one or more crowds that satisfy the crowd search request.

First the MAP application sends a crowd request to the MAP client step . The crowd request is a request for crowd data including aggregate profile data for crowds currently formed near a specified POI or within a specified AOI. The crowd request may be initiated by the user of the mobile device via the MAP application or may be initiated automatically by the MAP application in response to an event such as for example start up of the MAP application movement of the user or the like. In one embodiment the crowd request is for a POI where the POI is a POI corresponding to the current location of the user a POI selected from a list of POIs defined by the user a POI selected from a list of POIs defined by the MAP application or the MAP server a POI selected by the user from a map a POI implicitly defined via a separate application e.g. the POI is implicitly defined as the location of the nearest Starbucks coffee house in response to the user performing a Google search for Starbucks or the like. If the POI is selected from a list of POIs the list of POIs may include static POIs which may be defined by street addresses or latitude and longitude coordinates dynamic POIs which may be defined as the current locations of one or more friends of the user or both. Note that in some embodiments the user may be enabled to define a POI by selecting a crowd center of a crowd as a POI where the POI would thereafter remain static at that point and would not follow the crowd.

In another embodiment the crowd request is for an AOI where the AOI may be an AOI of a predefined shape and size centered at the current location of the user an AOI selected from a list of AOIs defined by the user an AOI selected from a list of AOIs defined by the MAP application or the MAP server an AOI selected by the user from a map an AOI implicitly defined via a separate application e.g. the AOI is implicitly defined as an area of a predefined shape and size centered at the location of the nearest Starbucks coffee house in response to the user performing a Google search for Starbucks or the like. If the AOI is selected from a list of AOIs the list of AOIs may include static AOIs dynamic AOIs which may be defined as areas of a predefined shape and size centered at the current locations of one or more friends of the user or both. Note that in some embodiments the user may be enabled to define an AOI by selecting a crowd such that an AOI is created of a predefined shape and size centered at the crowd center of the selected crowd. The AOI would thereafter remain static and would not follow the crowd. The POI or the AOI of the crowd request may be selected by the user via the MAP application . In yet another embodiment the MAP application automatically uses the current location of the user as the POI or as a center point for an AOI of a predefined shape and size.

Upon receiving the crowd request the MAP client forwards the crowd request to the MAP server step . Note that in some embodiments the MAP client may process the crowd request before forwarding the crowd request to the MAP server . For example in some embodiments the crowd request may include more than one POI or more than one AOI. As such the MAP client may generate a separate crowd request for each POI or each AOI.

In response to receiving the crowd request from the MAP client the MAP server updates weights assigned to the keywords in the dynamic profile slice of the user profile of the user step . In one embodiment the weights assigned to the keywords in the dynamic profile slice are determined using a time weighting function such that the weights decrease as the amount of time that has elapsed between the most recent timestamps for the keywords and the current time increases. Specifically in one exemplary embodiment the weight of each keyword in the dynamic profile slice is determined based on the following equations 

In another embodiment the weights assigned to the keywords in the dynamic profile slice are determined using a location weighting function such that the weights decrease as a distance between the current location of the user and the most recent location stamps for the keywords increases. Rather than using the most recent location stamps for the keywords the closest location stamps stored for the keywords in the dynamic profile of the user profile of the user may be used. Specifically in one exemplary embodiment the weight of each keyword in the dynamic profile slice is determined based on the following equations 

In yet another embodiment the weights of the keywords in the dynamic profile slice of the user may be determined using a time and location weighting function. More specifically as an example the weight for each keyword in the dynamic profile slice of the user may be determined based on the following equations 

In addition to updating the weights the MAP server identifies one or more crowds relevant to the crowd request step . More specifically in one embodiment the crowd analyzer performs a crowd formation process such as that described above in to form one or more crowds relevant to the POI or the AOI of the crowd request. In another embodiment the crowd analyzer proactively forms crowds using a process such as that described above in and stores corresponding crowd records in the datastore of the MAP server . Then rather than forming the relevant crowds in response to the crowd request the crowd analyzer queries the datastore to identify the crowds that are relevant to the crowd request. The crowds relevant to the crowd request may be those crowds within or intersecting a bounding region such as a bounding box for the crowd request. If the crowd request is for a POI the bounding region is a geographic region of a predefined shape and size centered at or otherwise encompassing the POI. If the crowd request is for an AOI the bounding region is the AOI.

Once the crowd analyzer has identified the crowds relevant to the crowd request the MAP server generates crowd data for the identified crowds step . In this embodiment the crowd data includes aggregate profiles for the identified crowds. As discussed below in detail here the aggregate profiles for the crowds are generated based on the dynamic profile slice of the user . In one specific embodiment the user is enabled to select one or more profile categories or profile slices from his user profile to be used to generate aggregate profile data in response to crowd requests from the user . In this example the user has selected at least his dynamic profile slice. The crowd data for the identified crowds may also include information characterizing the crowds spatial information defining the locations of the crowds the number of users in the crowds the amount of time the crowds have been located at or near the POI or within the AOI of the crowd request or the like. The MAP server then returns the crowd data to the MAP client step .

Upon receiving the crowd data the MAP client forwards the crowd data to the MAP application step . Note that in some embodiments the MAP client may process the crowd data before sending the crowd data to the MAP application . The MAP application then presents the crowd data to the user step . The manner in which the crowd data is presented depends on the particular implementation of the MAP application . In one embodiment the crowd data is overlaid upon a map. For example the crowds may be represented by corresponding indicators overlaid on a map. The user may then select a crowd in order to view additional crowd data regarding that crowd such as for example the aggregate profile of that crowd characteristics of that crowd or the like.

More specifically after the crowd analyzer has identified the crowds relevant to the crowd request the identified crowds are passed to the aggregation engine . The aggregation engine selects a next crowd to process which for the first iteration is the first crowd step . The aggregation engine then selects the next user in the crowd step . Next the aggregation engine compares the user profile of the user in the crowd to the dynamic profile slice of the user profile of the requesting user which for this example is the user of the mobile device step . Notably in this example the user has selected the dynamic profile slice of his user profile as the profile category or profile slice to be used for generating the aggregate profiles of the crowds in response to the crowd request. However the present disclosure is not limited thereto. For instance in another embodiment the entire user profile of the user including the dynamic profile slice may be compared to the user profile of the user in the crowd. In one embodiment when comparing the user profile of the user in the crowd to the dynamic profile slice of the user profile of the user the aggregation engine identifies matches between the user profile of the user in the crowd and the dynamic profile slice of the user profile of the user . More specifically the aggregation engine may make a list of keywords from the user profile of the user in the crowd that match keywords in the dynamic profile slice of the user profile of the user .

Next the aggregation engine determines whether there are more users in the crowd step . If so the process returns to step and is repeated for the next user in the crowd. Once all of the users in the crowd have been processed the aggregation engine generates an aggregate profile for the crowd based on data resulting from the comparisons of the user profiles of the users in the crowd to the dynamic profile slice of the user profile of the user step . In one embodiment the data resulting from the comparisons is a list of matching keywords for each of the users in the crowd. The aggregate profile may then include an overall match strength or score computed based on the number of user matches for each keyword in the dynamic profile slice of the user profile of the user and the corresponding weights assigned to the keywords. For example the overall match strength may be a weighted average of the number of user matches across all keywords in the dynamic profile slice of the user profile of the user which may be computed based on the following equation 

In addition or alternatively the aggregate profile may include a match strength or score for each individual keyword in the dynamic profile slice that is based on the number of user matches for the keyword and the weight assigned to the keyword. For example for each keyword in the dynamic profile slice the match strength for the keyword may be the product of the number of user matches for the keyword and the weight assigned to the keyword which is expressed as the following equation MatchStrength weight UserMatches Eqn. 22 where MatchStrength is the match strength for the i th keyword in the dynamic profile slice weight is the weight assigned to the i th keyword in the dynamic profile slice and UserMatches is the number of user matches for the i th keyword in the dynamic profile slice. As another example for each keyword in the dynamic profile slice the match strength of the keyword may be based on a ratio of the product of the number of user matches for keyword and the weight assigned to the keyword over the total number of users in the crowd which may be computed based on the following equation 

Once the aggregate profile of the crowd is generated the aggregation engine determines whether there are more crowds to process step . If so the process returns to step and is repeated for the next crowd. Once aggregate profiles have been generated for all of the crowds relevant to the crowd request the aggregate profiles for the crowds are returned step . More specifically the aggregate profiles are included in the crowd data returned to the MAP client in response to the current request as described above with respect to step of .

Once it is time to update the weights the profile manager sets a first counter i to a value of 1 step . Next the profile manager gets the dynamic profile slice of user i step . The profile manager next sets a second counter j to a value of 1 step . The profile manager then gets the keyword j from the dynamic profile slice of user i step . Next the profile manager computes and stores a weight for keyword j using a time and or location weighting function step . More specifically in one embodiment the weight is computed using a time weighting function such that the weight assigned to the keyword is inversely related to the amount of time that has elapsed since the keyword was last detected for user i as indicated by the most recent timestamp stored for keyword j in the dynamic profile slice of user i. For example the weight may be computed using Equations 7 through 9 described above. In another embodiment the weight is computed using a location weighting function such that the weight assigned to the keyword is inversely related to the distance between the current location of user i and the most recent location or alternatively the nearest location at which keyword j has been detected for user i as indicated by the timestamp and location stamp information stored for keyword j in the dynamic profile slice of user i. For example the weight may be computed using Equations 10 through 13 described above. In yet another embodiment the weight is computed based on a time and location weighting function. For example the weight may be computed using Equations 14 through 19 described above.

Once the weight for keyword j in the dynamic profile slice of user i is computed and stored in the dynamic profile slice of user i the profile manager determines whether the last keyword in the dynamic profile slice of user i has been processed step . If not the second counter j is incremented step and the process returns to step and is repeated for the next keyword. Once the last keyword has been processed the profile manager determines whether the last user has been processed step . If not the first counter i is incremented step and the process returns to step and is repeated for the next user . Once the last user has been processed the process returns to step and is repeated.

First the MAP application sends a crowd request to the MAP client step . Again the crowd request is a request for crowd data including aggregate profile data for crowds currently formed near a specified POI or within a specified AOI. The crowd request may be initiated by the user of the mobile device via the MAP application or may be initiated automatically by the MAP application in response to an event such as for example start up of the MAP application movement of the user or the like. In one embodiment the crowd request is for a POI where the POI is a POI corresponding to the current location of the user a POI selected from a list of POIs defined by the user a POI selected from a list of POIs defined by the MAP application or the MAP server a POI selected by the user from a map a POI implicitly defined via a separate application e.g. the POI is implicitly defined as the location of the nearest Starbucks coffee house in response to the user performing a Google search for Starbucks or the like. If the POI is selected from a list of POIs the list of POIs may include static POIs which may be defined by street addresses or latitude and longitude coordinates dynamic POIs which may be defined as the current locations of one or more friends of the user or both. Note that in some embodiments the user may be enabled to define a POI by selecting a crowd center of a crowd as a POI where the POI would thereafter remain static at that point and would not follow the crowd.

In another embodiment the crowd request is for an AOI where the AOI may be an AOI of a predefined shape and size centered at the current location of the user an AOI selected from a list of AOIs defined by the user an AOI selected from a list of AOIs defined by the MAP application or the MAP server an AOI selected by the user from a map an AOI implicitly defined via a separate application e.g. the AOI is implicitly defined as an area of a predefined shape and size centered at the location of the nearest Starbucks coffee house in response to the user performing a Google search for Starbucks or the like. If the AOI is selected from a list of AOIs the list of AOIs may include static AOIs dynamic AOIs which may be defined as areas of a predefined shape and size centered at the current locations of one or more friends of the user or both. Note that in some embodiments the user may be enabled to define an AOI by selecting a crowd such that an AOI is created of a predefined shape and size centered at the crowd center of the selected crowd. The AOI would thereafter remain static and would not follow the crowd. The POI or the AOI of the crowd request may be selected by the user via the MAP application . In yet another embodiment the MAP application automatically uses the current location of the user as the POI or as a center point for an AOI of a predefined shape and size.

Upon receiving the crowd request the MAP client forwards the crowd request to the MAP server step . Note that in some embodiments the MAP client may process the crowd request before forwarding the crowd request to the MAP server . For example in some embodiments the crowd request may include more than one POI or more than one AOI. As such the MAP client may generate a separate crowd request for each POI or each AOI.

In response to receiving the crowd request from the MAP client the MAP server identifies one or more crowds relevant to the crowd request step . More specifically in one embodiment the crowd analyzer performs a crowd formation process such as that described above in to form one or more crowds relevant to the POI or the AOI of the crowd request. In another embodiment the crowd analyzer proactively forms crowds using a process such as that described above in and stores corresponding crowd records in the datastore of the MAP server . Then rather than forming the relevant crowds in response to the crowd request the crowd analyzer queries the datastore to identify the crowds that are relevant to the crowd request. The crowds relevant to the crowd request may be those crowds within or intersecting a bounding region such as a bounding box for the crowd request. If the crowd request is for a POI the bounding region is a geographic region of a predefined shape and size centered at or otherwise encompassing the POI. If the crowd request is for an AOI the bounding region is the AOI.

Once the crowd analyzer has identified the crowds relevant to the crowd request the MAP server generates crowd data for the identified crowds step . In this embodiment the crowd data includes aggregate profiles for the identified crowds generated based on the dynamic profile slice of the user profile of the user in the manner described above. The crowd data for the identified crowds may also include information characterizing the crowds spatial information defining the locations of the crowds the number of users in the crowds the amount of time the crowds have been located at or near the POI or within the AOI of the crowd request or the like. The MAP server then returns the crowd data to the MAP client step .

Upon receiving the crowd data the MAP client forwards the crowd data to the MAP application step . Note that in some embodiments the MAP client may process the crowd data before sending the crowd data to the MAP application . The MAP application then presents the crowd data to the user step . The manner in which the crowd data is presented depends on the particular implementation of the MAP application . In one embodiment the crowd data is overlaid upon a map. For example the crowds may be represented by corresponding indicators overlaid on a map. The user may then select a crowd in order to view additional crowd data regarding that crowd such as for example the aggregate profile of that crowd characteristics of that crowd or the like.

Those skilled in the art will recognize improvements and modifications to the preferred embodiments of the present disclosure. All such improvements and modifications are considered within the scope of the concepts disclosed herein and the claims that follow.

