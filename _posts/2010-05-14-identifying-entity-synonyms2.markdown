---

title: Identifying entity synonyms
abstract: Embodiments for identifying an entity synonym of an entity are described. A query log is stored in a database located on at least one computing device. A candidate generation module can select a candidate query in the query log that shares a click on a URL with the entity. A correlated tag module can generate a set of phrase-tag pairs for the entity and the candidate query and measure a mutual information value for each phrase-tag pair. A candidate filtering module can determine a click similarity value between the candidate query and the entity based on a set of URLs selected in the search engine results and a tag similarity value based on the mutual information values. A candidate query is selected as an entity synonym if the click similarity value and the tag similarity value are greater than predetermined thresholds respectively.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600566&OS=09600566&RS=09600566
owner: Microsoft Technology Licensing, LLC
number: 09600566
owner_city: Redmond
owner_country: US
publication_date: 20100514
---
Search engines on the internet enable users to quickly locate a desired internet site subject good or service. Large databases are often used to connect a search query with a desired result. For example vertical search engines such as shopping search engines rely heavily on a product database. When a user searches for a desired product such as an Acme Products Inc. 10 Zoom Camera 350i that product is located in the product database to provide the user with detailed information regarding the product. However most users do not provide the entire product s name to a search engine. This can make it more difficult to locate in a database requiring more complex and timely searches.

One approach to provide better search results is to expand a database with synonyms of product names that then match the query such as various portions of the full product s title. However many users often enter information that is not even part of a product s actual name. For example the hypothetical new Acme Products camera used in the example above may have the ability to take pictures in infrared wavelengths. A user may learn this feature and enter a search query such as Acme camera infrared hoping to find out more information about the Acme 350i.

Providing an exhaustive list of descriptions of each product in a database can be laborious and expensive. In addition significantly increasing the number of entries in a database to cover each possible product description can cause an exponential increase in the amount of computing time needed to search the database. This can limit the usefulness of using databases to respond to search queries.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. While certain disadvantages of prior technologies are noted above the claimed subject matter is not to be limited to implementations that solve any or all of the noted disadvantages of the prior technologies.

Various embodiments are provided for identifying queries that are submitted to a search engine that are synonyms of a real world object or service or search target. A query log is stored in a database located on at least one computing device. The query log contains information relating to queries submitted to the search engine the output of the search engine in response to each query and the URL selected in the output. An entity is a canonical name submitted to the search engine for a real world object or service. A candidate generation module can select a candidate query in the query log that shares a click on a URL with the entity. A correlated tag module can divide the candidate query and the entity into subsets of the original query. The subsets are referred to as a set of phrase tag pairs. A correlation measure referred to as a mutual information value can be made between the set of phrase tag pairs for the candidate query and the set of phrase tag pairs for the entity. A candidate filtering module can determine a click similarity value between the candidate query and the entity based on a set of URLs selected in the search engine in response to the outputs of the search engine for the candidate query and the entity. A tag similarity value is determined based on the mutual information values. A candidate query is selected as an entity synonym if the click similarity value and the tag similarity value are greater than predetermined thresholds respectively. The entity synonym is stored in an entity database to enable the entity synonym to be associated with the entity in search engine applications.

In an additional embodiment a plurality of candidate synonym strings for an entity string is selected from a document collection. A set of phrase tag pairs are identified for each string. A tag mutual information value is calculated for each phrase tag pair in the set for each candidate synonym string. A tag similarity is measured between the tag mutual information values for the entity string and for the set for each candidate synonym string. Candidate synonym strings having a tag similarity value greater than a threshold value are selected as entity synonyms. As in the previous embodiment the entity synonym is stored in an entity database to enable the entity synonym to be associated with the entity in search engine applications.

Reference will now be made to the exemplary embodiments illustrated in the drawings and specific language will be used herein to describe the same. It will nevertheless be understood that no limitation of the scope of the technology is thereby intended. Alterations and further modifications of the features illustrated herein and additional applications of the embodiments as illustrated herein which would occur to one skilled in the relevant art and having possession of this disclosure are to be considered within the scope of the description.

As more commerce and business is accomplished using the internet the ability to quickly locate goods and services on the web is becoming increasingly important. In addition searching the web and providing advertising for products are valuable businesses on the web in themselves. The type of search query used can effect payment for advertising the location of advertising the location of a product in a search engine s results and so forth.

For example when Acme Products Inc. releases a new 10 zoom camera 350i the company may use an advertising campaign on the internet to sell the product. Payments may be made to search engines to list the product high in a search for camera related searches. Payments may also be made to advertisers. For example an advertiser may be paid to place a banner ad when certain keywords are entered in a search engine query such as Acme 350i. In some search engines the location of a result in the search may also depend on the popularity of the search language i.e. how often a product or term is searched. However when a wide number of different search queries are used to search for a single product it can be difficult to link the multiple searches as being related to the single product.

The difficulty in associating a product with synonyms for the product can affect both the efficiency and placement of advertising on the internet as well as the payment received by those providing advertising. For instance when a fairly obscure search term for the Acme camera is used web sites that sell the camera may be positioned low in the search results. In addition a banner advertisement may not be displayed if the search query is not recognized as being related to the product. This can limit the income of both the seller of the product and the advertiser.

Determining when a search query is intended to refer to a selected product allows web search engines to provide special treatment by providing statistics and information about the product. For example vertical search engines such as the Microsoft Bing shopping search engine provide this functionality for a variety of queries. The ability to recognize synonyms of products enables the products to be identified in a significantly larger percentage of search queries. This also enables a search engine to alter the query and include a canonical version of the product name found in a database to obtain more accurate results.

An initial overview of technology embodiments is provided below and then specific technology embodiments are described in further detail later. This initial summary is intended to aid readers in understanding the technology more quickly but is not intended to identify key features or essential features of the technology nor is it intended to limit the scope of the claimed subject matter. The following definitions are provided for clarity of the overview and embodiments described below.

The term canonical is used herein to refer to a standard or accepted phrase for a searched entity. However it is possible that an entity may have a number of different canonical phrases or different canonical terms depending on the search engine or web page that is marketing displaying or selling the entity. The canonical entity may be selected from a search engine query log.

The term entity is defined herein as a text string that refers to a real world object or service or search target. For example the text string Acme Products Inc. 10 Zoom Camera 350i may be the canonical entity for an object marketed by Acme Products Inc. In another example the term Acme Insurance Inc. OneHealth Insurance Plan may be the canonical entity for a service provided by Acme Insurance Inc. There may be many different accepted canonical entities for each real world object or service. For instance an object may have both a name and a part number that are considered canonical. An object may also have multiple different names that are considered canonical.

The term synonym is defined herein as a query text string that is intended to refer to the same entity as another query text string. For example Acme Products Inc. 10 Zoom Camera 350i Acme 10 Zoom Camera Acme 350i and Acme Camera Infrared are all search terms that intend to refer to the fictitious 350i model camera marketed by Acme Products.

The term token is defined herein as a single word number or symbol in a query text string. A token is typically separated from other tokens in a query text string by spaces but may also be separated by other means such as tabs semicolons commas and so forth. A search string may include several tokens that are not separated. For example a canonical search string may be Acme Products Inc. 10 Zoom Camera 350i containing the tokens Acme Products Inc. 10 Zoom camera and 350i while a synonym search string may be Acme350i containing the tokens Acme and 350i .

The term subset synonym is defined herein as a synonym that contains only tokens that are in the canonical entity. For example Acme 350i is a subset synonym of Acme Products Inc. 10 Zoom Camera 350i .

The term non subset synonym is defined herein as a synonym that contains tokens that are not in the canonical entity. For instance Acme camera infrared is a non subset synonym of Acme Products Inc. 10 Zoom Camera 350i .

The term click or clicked as used herein refers to a selection of a URL in an output of the search engine by a person or machine.

Various embodiments are described for identifying an entity synonym in a query text string using a query log of a search engine. The entity synonym can include non subset synonyms as well as subset synonyms of a selected entity. An entity can be any query string in the query log that is determined to refer to a selected real world object or service. Once an entity has been determined synonyms of the entity can be identified. An exemplary system can include a query log stored in a database located on at least one computing device. The query log can contain information regarding text strings i.e. queries entered into a search engine. The search engine typically responds to a query that has been entered into the search engine with an output comprising a list of hyperlinks. Each hyperlink is associated with a Uniform Resource Locator URL . The URL that is selected by a user or machine can be associated with the query i.e. the text string in the query log. Thus a relationship between the query and the corresponding URL that is selected as a result of the query can be related using the query log. When a different query is made and the same URL is selected in response to the different query it is referred to as sharing at least one click on a URL with the first query. A query that shares at least one click on a URL with an entity query is referred to as a candidate query that may be a synonym of the entity query. Thus candidate queries in the query log can include subset synonyms such as Acme 350i from the canonical entity Acme Products Inc. 10 Zoom Camera 350i as well as non subset synonyms such as Acme camera infrared .

The challenge however is that a large number of queries in the query log may share a click on a URL with any given entity query. Out of these a very small fraction of candidate queries may actually contain references to a synonym of the entity. To identify the relatively small fraction of candidate queries which also correspond to synonyms of an entity two measures can be performed. One measure is to determine how related the candidate query is with an entity query. This can be accomplished by measuring the click similarity in the query log between the candidate query and the entity query. Second a measurement can be made to determine how highly correlated the context of the candidate query string and the entity query string are.

To measure the context between the entity query and the candidate query both the entity query and the candidate query can be divided into a set of phrase tag pairs where the tag is a portion of a candidate query and the phrase is the remainder of the candidate query. A statistical correlation measure of the context that is common between the entity query and the candidate query is then determined. In one embodiment the context can be measured between each phrase tag pair in the set of phrase tag pairs for the entity query and each phrase tag pair in the set of phrase tag pairs in the candidate query as shown in the equations below. One type of statistical correlation measure that can be made is to determine the mutual information in the sets. An equation to calculate the mutual information in the sets is shown below.

A tag similarity is measured based on the mutual information for the entity query and the candidate query. A click similarity is also measured between the entity query and the candidate query. The two queries are then determined to be synonyms if the measured similarity values are greater than a predetermined click threshold value and a tag threshold value.

Additional rule based filtering may also be conducted. When the entity query and the candidate query meet selected rule based filtering criteria the threshold values for the click similarity and the tag similarity can be decreased while still providing a high probability that the candidate query is a synonym of the entity query.

Example similarity functions are now defined which can be used to characterize candidate synonym queries relative to an entity query.

Information contained in one or more query logs for a search engine can be modeled as follows. The query log can consist of a set of triples where q is the query text string that a user or machine sends to a search engine u is the Uniform Resource Locator URL string that is selected by the user or machine based on an output of search results by the search engine after the user or machine input the query q and f q u is the number of times that the u is clicked for the query q as stored in the search log. Each time the URL is selected i.e. clicked after the query was input to the search engine the search may have been performed by the same user or machine or a different user or machine. The triples are aggregated information of multiple searches which can be derived from search engine raw log data. The information may be obtained from one or more different databases containing the search engine data.

For each query q a set of clicked URLs is denoted as U q . A similarity between the set of clicked URLs for an entity query U q and the set of clicked URLs for a candidate query U q can be determined using a statistical method for comparing the similarity and diversity of sample sets. For example a Jaccard index also known as a Jaccard similarity coefficient can be used to compare the similarity of the sets U q and U q .

In one embodiment a cosine similarity function can be used to determine a similarity between the set of clicked URLs for queries. The cosine similarity function is used to measure the similarity between two vectors of n dimensions by finding the angle between them. For a pair of queries q and q the cosine similarity function can be used to measure the click similarity using the following equation 

In the example equation above the output is normalized to have a value between 0 and 1. In other types of similarity functions the output value may be an angle between the vectors.

The set of triples can be aggregated to by summing up all f q u for each distinct q over all u. The pairs are referred to as an aggregated query log.

For each aggregated query log the query string can be divided into two parts a phrase p and a tag t. In one embodiment the tag t can be selected as an n token prefix or an n token suffix of the query string n is an integer that is greater than zero n 1 2 3 . . . representing the number of tokens in a tag and p can be selected as the remaining tokens in the query after removing the tag tokens. In other words the tag comprises the first or the last n tokens in a query string and the phrase is the remainder of the query string. If n is set to 1 and then 2 there are four different tags 2 prefix and 2 suffix . For example for the query string Acme Products Inc. 10 Zoom Camera 350i the following set of phrase tag pairs are derived for n 1 and 2 there are four phrase tag pairs as shown in Table A.

For each phrase tag pair the aggregated query log can be re written as . The number of URL clicks for each URL in the query data log is summed for each distinct phrase tag pair p t to form . It should be noted that although the phrase p is a substring of a query q the phrase p itself may be another query. For simplicity the variable p can be replaced with q so that can be rewritten as .

For each query the set of tags can be denoted as T q . For each tag the set of phrases can be denoted as Q t . The sum of the frequency of clicks for all phrase tag pairs in the query log can be denoted as 

In one embodiment a correlation measure can be made by determining a mutual information mi value for each phrase tag q t pair for each of the query strings. For example the mutual information value between each phrase tag pair for a query string can be determined using the following example equation 

Using an example of phrase tag pairs shown in Table B a hypothetical number of clicks for each phrase q tag t and pair f q t is provided for an example illustration. The f q t value is the number of clicks for each URL in the database for the phrase q and the tag t pair. This information can then be used to measure the mutual information between each phrase tag pair in the example query using the equation above.

Applying the numbers above for the phrase tag pairs in the first row of Table B the number of URL clicks f q t in the query log for the phrase tag pair Acme 350i camera is 60. The sum of the frequency of clicks for all phrase tag pairs in the query log F is equal to 60 55 61 63 103 98 440 in this example The sum of the frequency of clicks f q t where t is an element of the set of tags T q for the query is equal to the number of clicks for each time the tag camera appears in the table. Thus it is equal to 65 65 130. The sum of the frequency of clicks f q t where q is an element of the set of phrases Q t is equal to the clicks for each time the phrase Acme 350i is listed in the table. This is equal to 62 62 62 186. Using these values the equation above becomes 

The actual value attained in the example illustration above is not intended to be exemplary of a real world situation. Rather it is only used to show an application of the equation. Additional types of correlation equations can also be used to measure the mutual information of the phrase tag pairs. A mutual information value is calculated for each phrase tag pair for a selected query.

A similarity between the mutual information values obtained for a pair of queries q and q can be determined using a statistical method for comparing the similarity and diversity of sample sets. For example a Jaccard index also known as a Jaccard similarity coefficient can be used to compare the similarity of the mutual information values for the tags of the pair of queries q and q .

In one embodiment a cosine similarity function can be used to determine a similarity between the pair of queries. The cosine similarity function is used to measure the similarity between two vectors of n dimensions by finding the angle between them. For a pair of queries q and q a cosine similarity function such as the equation below can be used to measure the similarity of the mutual information values for the tags in the query.

As in the Simequation the output in the Simexample above is normalized to have a value between 0 and 1. In other types of similarity functions the output value may be an angle between the vectors.

Assuming four tags are derived from a first query q and four tags from a second query q hypothetical mutual information values for each phrase tag pair for the queries are shown in the table below. While the tags are each labeled tthrough t it is assumed that the tags for each query may be different. In this example it is assumed that the tags tand tfor each query are the same while tags tand tare different.

Applying the Simequation above the nominator is obtained by determining the sum of the intersection of T q and T q for mi q t multiplied by mi q t . The intersection of T q and T q is the set that contains all elements of T q that also belong to T q . The intersection of the sets T q and T q is the mi q t values of tand tin this example. So the nominator is equal to the sum of tq tq tq tq or 80 32 80 32 5120. The denominator is the square root of the sum of each mi q t value squared where t is an element of the set T q multiplied by the sum of each mi q t value squared where t is an element of the set T q . The denominator becomes the square root of 70 80 60 32 95 80 70 32 15 924 21 349 18 438. Thus the Sim q q 5120 18 438 0.28. A determination can be made as to whether the query q and the query q are synonyms based on the values of the Simand Simequations. If the calculated similarity values are greater than the selected threshold values then it is assumed that that the two queries are synonyms.

An example architecture for identifying an entity synonym in a query log is illustrated in . An overview of the architecture is described prior to discussing each of the components in detail. The architecture is comprised of three components. A candidate generation module generates candidate phrases which may be synonyms of any one of a given set of entities. A correlated tag computation module generates triples where the phrase and tag are correlated and mi denotes their mutual information. The phrase and tag may be correlated with respect to a query log or with respect to a document collection . The triples are output to a correlated tag module where they are filtered based on their mutual information value. The candidate filtering module can identify the synonyms from among the candidates generated by the candidate generation module.

The query logs can be exploited to generate candidates for a given set E of entities. As previously discussed if a candidate query q is a synonym of an entity e then there is a good probability that there are queries in the logs corresponding to each of the queries e and q which will share at least one click on a URL. Candidate queries can be located in the query logs .

The query log can be modeled as a set of triples . The query log may be stored in a database. Candidate queries that may contain synonyms of the given set E of entities can be selected from the query log using a declarative computer language such as a structured query language SQL . Other types of query languages may also be used to perform functions and queries on the query log such as Java Persistence Query Language JPQL or Hibernate Query Language.

In one example implementation a SQL query can be used to select the candidate queries from the query log for the given set E of entities. The SQL query can be implemented in a map reduce system such as Cosmos . Other types of distributed computing systems configured to work with large data sets on clusters of computers such as Teradata may also be used. In this example it can be assumed that the query log Q is a relation Q q u f and the entity set E is a relation E name .

The output of the candidate generation module is a relation C Candidate Entity . The similarity equations can then be used to determine which pairs are synonyms.

The correlated tag computation module is configured to compute correlated phrase and tag pairs. The output is a relation T p t mi where t mi is the mutual information between a phrase and a tag t. The correlated phrase and tag pairs may be filtered based on the mutual information value. The pairs which have a mutual information value that is less than a specified threshold may be discarded as having a very low probability of being an entity synonym. For instance in one example the mutual information values having a threshold less than zero can be discarded. Only those phrase and tag pairs which have positively correlated mutual information value may be kept. The actual threshold level can be selected based on system needs.

In general the query logs or a document collection such as Wikipedia or other documents available on the Internet can be used to identify such correlated phrases and tags. An example technique for determining a mutual information value for phrase tag pairs is described with respect to a query log and then extended for use with a document collection.

For instance each query in a query log can be divided into phrase tag pairs. The distinct phrases and tags can be identified in the query log. The occurrences of the phrases and tags can then be identified in the document collection. When a phrase and a tag both occur within the proximity of a document a phrase tag pair can be generated. This can be used to augment the phrase tag pairs generated from the query log.

In one embodiment a SQL query can be used to determine phrase tag pairs for the candidate queries output by the candidate generation module . A mutual information value can then be determined for the phrase tag pairs. The relation AggQ q f can denote the aggregated query log. The set of triples can be aggregated to by summing up all f q u for each distinct q over all u to form the aggregated query log. As previously discussed q is the query text string that a user or machine sends to a search engine u is the Uniform Resource Locator URL string that is selected based on an output of the search engine after inputting the query q and f q u is the number of times that u is clicked for the query q.

A relation Q p t f is generated from the aggregated query log where p is a phrase of the query q t is a tag of the query q and f is the number of times that a URL in the aggregated query log has been clicked for the phrase tag pair. For each tuple q f in AggQ the tuples p t f are generated where i either concat p t or concat t p is equal to q and ii t is non empty and contains at most a constant number of tokens. For example t may contain one or two tokens. Q can be aggregated by summing up all of the f values for each phrase tag pair. The summation provides the relation AggP p t f p t .

The summation AggP p t f p t can then be filtered to retain the phrase tag p t pairs having a mutual information value greater than a selected threshold value. An example SQL query labeled SQL2 follows. The SQL2 query describes the computation of the phrase tag pairs with high mutual information to obtain the relation PTmi p t mi . The SQL2 query is first used to obtain the sum of f p t in AggP.

An example is now provided to show how to filter the candidate synonyms for a given entity e. As previously discussed two similarity measurements are used click similarity and tag similarity to filter the candidate synonyms. Other filtering mechanisms that can be used include rule based filtering and subset superset filtering.

Similarity based filtering uses two thresholds to determine if a candidate synonym is a synonym of a given entity e. The two threshold values as previously discussed are click similarity th and tag similarity th . For each candidate pair e e the click similarity Sim e e is first computed. If Sim e e ththen the tag similarity value Sim e e is computed using the mutual information values obtained from the correlated phrase tag pairs. If Sim e e ththen the candidate synonym e is considered to be a synonym of e.

A set of rules can also be applied to quantify rule based synonyms. If the candidate pair e e satisfy one or more of the rules then this provides additional evidence that the candidate synonym is a synonym of the entity e. With this additional evidence the corresponding threshold values thand thcan be reduced. For example with no additional rule based filtering the threshold values may each be 0.95. These threshold values may be reduced by a selected amount such as 0.025 for each rule that the candidate pair e e satisfies. The values listed here are provided as examples and are not intended to infer an actual value to the threshold levels or the reduction amount for the rule based filtering. The actual threshold values can be selected based on the level of accuracy desired in determining a candidate synonym is a synonym of the entity e.

In one embodiment different types of rules used in rule based filtering may result in different reduction levels. Rules that provide a high level of probability that the candidate synonym is a synonym of the entity may enable a greater reduction in the threshold values than a rule that only provides a relatively small increase in the probability for the candidate synonym to be an actual synonym of the entity.

In one embodiment the rules can be classified into categories. Several example rules are provided as follows.

Additional rules can also be applied to provide further evidence that the candidate synonym is a synonym of the entity e. The actual number of rules that are applied in rule based filtering can be determined based on system needs. Systems having a need for greater accuracy in the determination of synonyms can use more rule based filtering to increase the probability that a candidate synonym is an actual synonym of an entity e.

Candidate generation and filtering techniques can be implemented for both lookup and batch processing scenarios.

In the lookup scenario a user or machine can input a single entity name e and query all potential candidates synonyms e . In order to enable efficient lookup of potential candidate synonyms online the relation Q q u f q u can be pre processed. This relation is used for candidate generation to determine if the candidate synonym shares at least one click on a URL with an entity query. The pre processing is used to output a new relation NormQ q u nf q u from the query log where nf q u is a normalized weight of q u which provides efficient computing of the cosine similarity. In one embodiment nf q u can be found using the equation 

Using this equation the computation of click similarity does not require retrieving all u that co occur with q. Instead only u that co occur with both q and q are needed. A SQL query can be used to normalize the weight to generate the relation NormQ. One example of such a SQL query is shown as SQL3.

The output of SQL4 is a relation C e e SimClick . It can be observed that SQL4 combines two operations together the candidate generation operation and the click similarity filtering operation. The results can be further filtered by tag similarity.

The relation PTmi p t mi can be pre processed to for a normalized weight of the mutual information value mi. One example of pre processing and normalization can be accomplished using the following equation.

An example of a SQL query to find the normalized mutual information value for a phrase tag pair nmi p t is shown as SQL5.

The normalized relation can be NormPTmi p t nmi p t . The tag similarity filtering can also be achieved using a SQL query. One example of a SQL query to filter the tag similarity results is shown as SQL6.

The difference between batch processing and the lookup scenario is that in batch processing the input is a set of entities E instead of one single entity e as in the lookup case. The input entity set can be denoted as a relation E e . In order to use batch processing SQL4 can be changed to SQL7 as follows.

The SQL6 query can also be used to provide filtering on tag similarities for phrase tag pairs of potential candidate synonyms for the set of entities E.

In accordance with the example embodiment illustrated in a system for identifying an entity synonym of an entity is disclosed. The system is comprised of a query log stored in a database located on at least one computing device . In one embodiment the database may be distributed on a computing system configured to work with large data sets on clusters of computers. The entity can be a selected query in the query log. A candidate generation module is configured to select a candidate query in the query log which shares at least one click on a URL with the entity. In another embodiment the candidate generation module can receive a set of entities and select each candidate query in the query log which shares at least one click on a URL with one of the entities in the set of entities. A correlated tag computation module is configured to generate a set of phrase tag pairs for the entity query and the candidate query. A mutual information value is measured for each phrase tag pair as previously discussed.

A candidate filtering module is configured to determine a click similarity value between the candidate query and the entity based on a set of URLs that were selected in response to an output of the search engine for each of the candidate query and the entity. The candidate filtering module is also configured to determine a tag similarity value based on the mutual information values of the set of phrase tag pairs for the candidate query and the entity. In one embodiment the click similarity and the tag similarity values can be calculated using a cosine similarity function. The candidate query can then be selected as an entity synonym if the click similarity value and the tag similarity value are greater than a predetermined click threshold value and tag threshold value respectively.

In one embodiment the information in the query log can be pre processed to determine a normalized weight for the number of clicks on a URL for a query in the query log to enable efficient lookup of potential candidate synonyms. The normalized weight for the number of clicks may then be used in the cosine similarity function to determine the click similarity value for each candidate query. Similarly the phrase tag pairs can be preprocessed to determine a normalized weight of the mutual information value. The tag similarity value for each candidate query can be determined using the normalized weight of the mutual information value.

A number of rules can also be applied to a candidate query and the entity as previously discussed. The click threshold values and the tag threshold value can be selected based on the number of rules that the candidate query and the entity satisfy.

In block a set of Uniform Resource Locators URLs are acquired for each of the first and second queries. For each query the set of URLs are categorized that were selected in response to an output of the search engine for each of the first and second queries. For example a user or a machine may enter a search query into a search engine. The search engine will then return a set of hyperlinks to sites that are determined by the search engine to be relevant to the search query. Each hyperlink is associated with a URL. The URL that is selected by the user or machine in response to the query is typically stored in the query log. The set of URLs that were selected in response to the outputs of the search engine for each of the first and second queries can be determined.

A click similarity between the first and second queries can be measured based on the acquired set of URLs for each of the first and second queries as depicted in block . In one embodiment the click similarity can be determined based on the number of times that a selected URL in the set of URLs was clicked for the first query and the number of times the selected URL was clicked for the second query. This determination can be made for each URL in the set of URLs for each of the first and second queries. A cosine similarity function can be used to determine a similarity between the set of clicked URLs for the first and second queries as previously discussed.

In block a set of phrase tag pairs can be identified for the first query and a set of phrase tag pairs can be identified for the second query. Each tag is comprised of a selected number of tokens in the query. The phrase contains the remaining tokens in the query. In one embodiment each tag is comprised of one of n prefix tokens or n suffix tokens in the query where n is an integer value greater than zero. The phrase is the remaining tokens in the query. Thus for n 1 the tag can be the first token of the query or the last token of the query and the phrase is the remaining tokens in the query. For n 2 the tag can be the first two tokens of the query or the two last tokens of the query and the phrase is the remaining tokens in the query. The set may be comprised of phrase tag pairs that include both the suffix tags and the prefix tags. Thus for n 1 and n 2 the set can comprise four different phrase tag pairs.

In block the tag similarity between phrase tag pairs for the first and second queries is measured. In one embodiment the tag similarity can be measured using a cosine similarity function. Measuring the tag similarity can further comprise calculating a tag mutual information value for each phrase tag pair in the set of phrase tag pairs for each of the first and second queries. In one embodiment measuring the tag similarity involves calculating a tag similarity value between the tag mutual information values for the set of phrase tag pairs for the first query and the tag mutual information values for the set of phrase tag pairs for the second query as previously discussed.

A determination can be made as to whether the first and second queries are synonyms if the click similarity and the tag similarity measurements are each greater than a predetermined threshold value as depicted in block . In block a query that is determined as a synonym can be stored in an entity database. The entity database may be located on at least one computing device to enable the query synonym to be associated with the entity.

The ability to determine whether a query is a synonym of an entity enables more accurate search results to be displayed by the search engine. The location of the entity in the output of the search may be based on the number of times the entity has been entered in the search engine. By creating a more complete database of synonyms for the entity containing both subset and non subset synonyms a more accurate accounting can be made of the true number of searches for the entity by taking into account searches for synonyms of the entity. In other words by summing all of the queries made for the entity and the query synonyms of the entity a determination can be made as to the placement of the entity in the output of the search engine when placement is based on the number of queries made.

Similarly advertisements in search engines are often associated with key words entered as queries in the search engine. By creating the more complete database of synonyms an advertisement for the entity can be displayed at the output of the search engine when the query is a synonym query for the entity. This enables the entity to be better advertised and the advertisement agency to profit more by displaying the advertisement for a broader range of entity synonyms.

The number of phrase tag pairs can be reduced by eliminating those that have a mutual information value less than a selected threshold. For example phrase tag pairs having a negative mutual information value may be discarded. Moreover additional phrase tag pairs can be formed using a document collection such as Wikipedia or other documents available on the Internet. For example in one embodiment if a document contains both a selected phrase from the set of phrase tag pairs as well as a tag then an additional phrase tag pair can be formed. The location of the phrase and tag relative to one another can be limited to a specific window size such as within 10 tokens of each other. By increasing the number of phrase tag pairs the accuracy of the mutual information values can be increased.

In block a click similarity is measured between the entity query and each candidate query based on an acquired set of URLs selected for the entity query and each candidate query. Each URL that was selected in response to an output of the search engine for the entity query is contained in one set. Each URL that was selected in response to an output of the search engine for a candidate query is contained in a set for that candidate query. The similarity between the sets is measured. In block a tag similarity is measured between the phrase tag pairs for the entity query and each of the candidate queries based on the calculated mutual information values. In bock the entity query and a selected candidate query are determined to be synonyms when the click similarity and the tag similarity measurements between the entity query the selected candidate query are greater than a tag similarity threshold and a click similarity threshold. In block the candidate query that is determined to be a synonym to the entity query is stored in an entity database located on at least one computing device to enable the candidate query to be associated with the entity query.

Some of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Various techniques or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the various techniques. In the case of program code execution on programmable computers the computing device may include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the various techniques described herein may use an application programming interface API reusable controls and the like. Such programs may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s may be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more blocks of computer instructions which may be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which comprise the module and achieve the stated purpose for the module when joined logically together.

Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices. The modules may be passive or active including agents operable to perform desired functions.

Furthermore the described features structures or characteristics may be combined in any suitable manner in one or more embodiments. In the preceding description numerous specific details were provided such as examples of various configurations to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components devices etc. In other instances well known structures or operations are not shown or described in detail to avoid obscuring aspects of the invention.

Although the subject matter has been described in language specific to structural features and or operations it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features and operations described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims. Numerous modifications and alternative arrangements can be devised without departing from the spirit and scope of the described technology.

