---

title: Scoped code fly-out editor for domain languages
abstract: A method for generating a model diagram includes registering a scoped domain editor extender with a domain model element, retrieving a domain model and sending the domain model to the registered scoped domain editor extender, generating a modeling language model and mapping the modeling language model to the domain model, retrieving a domain model element from the domain model, generating a modeling language model element and associating the modeling language model element with the domain model, generating a graphical diagram including a shape corresponding to the modeling language model element, generating a user input item and associate the user input item with the modeling language model element, and displaying the shape and the user input item to a user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08561016&OS=08561016&RS=08561016
owner: International Business Machines Corporation
number: 08561016
owner_city: Armonk
owner_country: US
publication_date: 20100702
---
This application claims priority to Canadian Patent Application No. 2706747 filed 29 Jun. 2010 and all the benefits accruing therefrom under 35 U.S.C. 119 the contents of which in its entirety are herein incorporated by reference.

The present invention relates to computer code editors and more specifically to visual code editors and domain language visual scoped editors.

Visual code editors for programming codes such as Java may include visualizing features that present Java methods as a Unified Modeling Language UML diagram that visually represents elements of the code. The diagram represents a domain language for example Java and typically includes code blocks that represent programming elements such as loops and if else statements however the code blocks do not include details of the code represented by the blocks. It is useful for a user to have the ability to easily review specific code details represented by the blocks when analyzing a diagram.

According to one embodiment of the present invention a method for generating a model diagram includes registering a scoped domain editor extender with a domain model element retrieving a domain model and sending the domain model to the registered scoped domain editor extender generating a modeling language model and mapping the modeling language model to the domain model retrieving a domain model element from the domain model generating a modeling language model element and associating the modeling language model element with the domain model generating a graphical diagram including a shape corresponding to the modeling language model element generating a user input item and associate the user input item with the modeling language model element and displaying the shape and the user input item to a user.

According to another one embodiment of the present invention a method for generating a fly out editor window includes receiving an input from a user selecting an input item identifying and retrieving a modeling language model element associated with the selected input item retrieving a domain model element associated with the modeling language model element from a domain model determining whether a scoped editor is registered for the domain model element sending the domain model and the domain model element to an extender responsive to determining that the scoped editor is registered for the domain model element generating a scoped code editor and displaying text associated with the domain model element in a fly out editor window to a user.

According to yet another one embodiment of the present invention a system for generating a diagram including a processor operative to register a scoped domain editor extender with a domain model element retrieve a domain model and sending the domain model to the registered scoped domain editor extender generate a modeling language model and mapping the modeling language model to the domain model retrieve a domain model element from the domain model generate a modeling language model element and associating the modeling language model element with the domain model generate a graphical diagram including a shape corresponding to the modeling language model element generate a user input item and associate the user input item with the modeling language model element and send the shape and the user input item to a display.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with the advantages and the features refer to the description and to the drawings.

The illustrated exemplary embodiments include the use of the UML as modeling language however the use of UML in the exemplary embodiments is merely illustrative. Any suitable alternative abstract modeling language modeling language and modeling language models may be similarly used in alternate embodiments.

In operation the diagram includes any number of graphical shapes similar to the graphical shapes and . A user may use diagram to analyze and manipulate computer code. The hot spot is selectable by the user who may for example select the hot spot using an input device that sends an input to the system of . Once selected the code associated with the hot spot is presented in a fly out editor window . The user may view and manipulate or edit the code in the fly out editor window . If the user edits the code the edited code is synchronized with and saved in the corresponding API of . The fly out editor window is similar to the fly out editor window .

The technical effects and benefits of the methods and systems described above allow a diagram that includes elements from any number and variety of source code domains and API s to be presented simultaneously to a user. The user may select one or more elements including elements with dissimilar source code domain types in the presented diagram which generates a fly out editor corresponding to the selected element. The fly out editor only displays source code associated with the selected element scoped code allowing the user to quickly and easily analyze and edit the source code for the element in the context of the entire domain model. If the user edits the scoped code the edited code is returned to the associated domain model where the code is synchronized. The user may also save the edited code in an updated domain model.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations element components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated

The flow diagrams depicted herein are just one example. There may be many variations to this diagram or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

While the preferred embodiment to the invention had been described it will be understood that those skilled in the art both now and in the future may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described.

