---

title: Enhancement of efficiency in power failure handling in flash memory
abstract: A method and system for enhancing efficiency in power failure handling in flash memory devices is disclosed. The method includes the controller of a storage device receiving a page of data, selecting a block having a desired back-up cost and copying previously stored data in the selected block to a back-up block prior to writing the received page to the selected block based on a category of the previously stored data. The system includes non-volatile memory having a plurality of operative blocks, at least one spare block and a controller. The controller is configured to receive a page of data, select an operative block in the memory having a desired back-up cost, and copy previously stored data in the selected block to a spare block based on a category of the previously stored data prior to writing the received page to the selected block.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09098396&OS=09098396&RS=09098396
owner: SanDisk IL Ltd.
number: 09098396
owner_city: Kfar Saba
owner_country: IL
publication_date: 20100216
---
This application claims the benefit of U.S. Provisional App. No. 61 207 679 filed Feb. 13 2009 the entirety of which is incorporated herein by reference.

This application relates generally to managing data in a memory system. More specifically this application relates to the operation of a memory system to improve efficiency with handling power failures.

NAND Flash storage devices are used as non volatile storage and are characterized among other properties by a writing process in which data is being written in units of pages into larger units of blocks. The nature and physics of such writing process and the risk to data associated with it are generally understood. The data at risk is likely to be damaged when the power to the storage device fails in the midst of writing and the power applied to the memory is not stable. A power failure in portable devices such as mobile phone happens whenever the host unexpectedly turns the device off to save on battery life or the user removes the device.

One technique for reducing the risk of losing or corrupting data when power failures occur defines risk zones and manages the writing process to minimize the risk by avoiding risky areas or by backing up data in risky areas. However this method of reducing the risk is wasteful in energy consumption and performance because of the amount of data that may need to be backed up. The backup process consumes a high amount of energy being a writing process and reduces the performance as the extra data writing takes time of the storage device. Both the extra amount of time and the extra amount of energy are directly proportional to the amount of data needs to be backed up.

In order to address the potential data loss posed by power failures a storage system and a method are disclosed for planning the writing process by taking into account the context of the data being written and minimizing the amount of data back up that is required for power failure immunity during a write process.

According to a first aspect a method of managing backup of physical blocks in a storage system is disclosed the method includes receiving a page of data for writing to a non volatile memory in the storage system selecting a block in the non volatile memory having a desired back up cost and copying previously stored data in the selected block to a back up block based on a category of the previously stored data prior to writing the received page of data to the selected block. The back up cost may be determined by the amount of pages to copy into the back up block based on the category of the previously stored data in each block. In alternative embodiments selecting the block having the desired back up cost may include selecting a block containing a fewest number of pages to copy into the back up block based on the category of the previously stored data in each block or selecting a first block determined to contain less than a threshold number of pages that need copying into the back up block based on the category of the previously stored data in the first block. The category of data may be a type of data that is always required to be backed up or not required to be backed up. The category of data may include file identifying information associating a page of data with a particular host file or a file type. The file types may include one of an ordinary file a log file or a temporary file. Also the data may be tagged in an implicit or virtual manner in another embodiment where the storage device does not receive a separate flag or piece data explicitly associating the page of data with a category file or file type. Instead the storage device may be preconfigured to know that data received from the host in specific address ranges are to be treated with a particular back up policy such as always back up or do not back up. 

According to another aspect a method of managing backup of physical blocks in a storage system includes a controller of the storage system receiving a page of data for writing to a non volatile memory in the memory system. When an empty block is available the controller writes the received page to the empty block. When no empty blocks are available the controller writes the received page of data to a block only containing data of a same category as the received page of data and when no empty blocks and no block only containing data of the same category as the received page of data are available the controller selects a block in the non volatile memory having a desired back up cost and copies previously stored data in the selected block to a back up block based on a category of the previously stored data prior to writing the received page of data to the selected block.

In yet another aspect a storage system is disclosed that includes non volatile memory having a plurality of operative blocks and at least one spare block as well as a controller. The controller is configured to receive a page of data for writing to the non volatile memory select an operative block in the non volatile memory having a desired back up cost and copy previously stored data in the selected block to a spare block prior to writing the received page of data to the selected block based on a category of the previously stored data.

Back up cost the time and energy needed to back up data. This extra time and energy is proportional to the number of pages of data needing to be backed up.

Classifying tag an identification of a page of data that differentiates its context from other pages.

Log file a log file is a file that does not lose its total value if part of it is corrupted. An example of a log file is a file that is written by appending data to its end.

Ordinary file an ordinary file is one where the whole file is considered useless if part of it is damaged. One example of an ordinary file is an executable file.

Temporary file a file that will not if corrupted result is any user data or critical system resource loss. Therefore it does not need any backup. One example of a temporary file may be a document editor temp file if the file is corrupted the editing application will need to be closed and re opened but user data will not be affected.

Spare block a physical block that not currently presented by the storage to the host as a logical block in an ordinary block device interface. These blocks can optionally be used internally by the storage device for housekeeping purposes.

Block a group of pages in a flash storage device where writing into one of the pages of a block can affect data in one or more other pages in the block especially during a power failure.

Back up writing the process of reading the data from an operative block and writing it to a spare block.

A non volatile memory system suitable for use in implementing aspects of the invention is shown in . A host of stores data into and retrieves data from a storage device . The storage device may be flash memory embedded within the host such as in the form of a solid state disk SSD drive installed in a personal computer. Alternatively the storage device may be in the form of a card or a USB storage that is removably connected to the host through a mechanical and electrical connector.

The host of may include a processor that runs one or more application programs . The application programs when data is to be stored on or retrieved from the storage device communicate through a file system application programming interface API with the file system manager HOST . The FSM manages the files in the storage device . Common operations executed by a FSM include operations to create open move copy and delete files. The FSM may be circuitry software or a combination of circuitry and software. Accordingly the FSM may be a stand alone chip or software executable by the processor of the host . A block device host driver translates instructions from the FSM for transmission over an interface between the host and storage device . The block device interface may be any of a number of known interfaces such as SD MMC USB flash storage SATA and SCSI interfaces.

A block device device driver executed by the controller of the storage device manages communication with the host over the interface . The controller of the storage device manages the memory . The controller may convert between logical addresses of data used by the FSM and physical addresses of the memory during data programming and reading. The memory includes physical blocks of flash memory that each consist of a group of pages where a block is a group of pages in a flash storage device where writing into one of the pages of a block can affect data in one or more other pages in the block and a page is a smallest unit of writing in the memory . The blocks in the memory include operative blocks that are represented as logical blocks to the host . Some of the blocks are bad blocks that have been found to be bad or unusable and marked as such so that they are unavailable to the host . Others of the blocks are spare blocks that are not available to the host and are used by the controller to replace bad blocks . A page index identifying data attributes of each page of data in the blocks is maintained in non volatile memory on the controller .

In another embodiment as shown in the non volatile memory system may be arranged with the FSM in the storage device . In this embodiment a host utilizes a file system API that can communicate with the FSM on the storage device over a file system interface rather than a block device interface. Examples of suitable file system interfaces include SMB NFS and Internet Protocol IP interfaces. The block device device driver executed by the controller of the storage device manages communication between the FSM and memory . A page index identifying data attributes of each page of data in the blocks is maintained in non volatile memory on the controller .

The memory in this embodiment may be arranged in the same manner as illustrated in the embodiment of . An advantage of the FSM being positioned on the storage device is the ability to design a storage device with any desired file system while not requiring a host device to use anything other than a standard file system API and file system interface. Although the description below may refer to the non volatile memory system of either of the embodiments of or may implement the methods described.

Using either of the systems described above a method for enhancing efficiency in power failure handling may be implemented. The method includes planning a write operation so that a minimum amount of data needs to be backed up. Because the back up process is a data writing process it reduces performance and takes up energy. Both the amount of time and the amount of energy are directly proportional to the amount of writing for back up. This extra time and energy may be characterized as a back up cost to be minimized.

Referring to one process for improving efficiency in power failure handling is illustrated. When a new page of data is received at the storage device for writing the controller of the storage device determines a back up cost for each operative block in memory based on an analysis of the number of pages that will have to be backed up in each block if the new page is to be written into that block at . The fewer the number of pages needing to be backed up the lower the back up cost. In one implementation the controller selects the block determined to have the lowest back up cost for accommodating the new page at .

Once a block is selected to receive the new page any page already in that selected block that needs to be backed up are copied to an unused block at and then the new page is written into the selected block at . If the writing operation of the new page to the selected block was successful at the process ends. If the writing operation fails typically due to interruption by a power failure then the selected block is erased at the backed up pages are copied from the back up block to the selected block at and the attempt to write the new block is repeated at .

In order to determine what the back cost will be for a block the controller looks at the type of data in the received page and of the pages already stored in a particular block. The identity of the file being written can be obtained from the host which may tag all the pages that belong to the same file or can be guessed by the controller of the storage device from the circumstances for example by reading the stored file system structures or by tracking the continuum of pages in a sequential write process. The file tag information provided by the host or determined by the controller of the storage device may include specific data identification information data type information or a combination of both. All pages of an ordinary file share a unique tag differentiating them from pages that belong to other files. Examples of data tagging techniques that may be utilized in the disclosed systems and methods are set forth in U.S. application Ser. No. 12 030 018 filed Feb. 12 2008 and published as US Pub. No. 2008 0307158 as well as in U.S. application Ser. No. 11 760 480 filed Jun. 8 2007 and published as US Pub. No. 2008 0307156 wherein the entirety of each of these references is incorporated herein by reference.

Referring to a simplified diagram of a portion of the memory of the storage device of is shown where a common back up method is implemented. illustrates several operative blocks and a spare block separated by line for ease of reference. Each of the blocks includes a plurality of pages. The example of shows three files distinguishable by the pattern of hatching. Block contains empty pages and written pages that belong to file A. Block is an empty block containing only empty pages . Block contains written pages that belong to file B and written pages that belong to file C. Block also contains written pages of file B and written pages of file C. shows an example of one approach of backing up at risk data. In this example new page is to be written to a free page in block . As page belongs to file A the data in block is at risk of being lost. If power fails for the storage device during the writing process the data in all the other pages in the block are at risk. One way to reduce this risk is to back up all the pages that may be corrupted prior to the writing of the new page into a spare block. Arrow represents all of the written pages of block being copied to spare block .

As illustrated in after block is copied into back up block page is written to empty page in block . If no power failure occurred during the writing of page then page becomes part of block and the backup block may be abandoned. If a power failure did occur during writing as soon as the power is restored block is erased and the back up block is copied back into block as indicated by line where all the original data of the block i.e. not including the page is recovered. In this example no back up policy relating to minimizing the back up cost was implemented and thus the cost was relatively high 11 pages had to be backed up for block .

As an improvement to the prior art example of when selecting a block for use in writing the received page the storage device can implement a back up policy where it will prefer to write pages only into blocks that are legitimate blocks . These legitimate blocks can be either empty blocks or blocks that contain only pages that belong to the same file as the newly received page. The storage device can recognize the file identity of pages in the block using tags that are attached to the pages or are pointing at the pages and relate the page to a specific file. This can be achieved by keeping a page index on the storage device that lists all the tag numbers that are represented in each page and referring to this index when deciding where to write each page.

According to different implementations discussed below the controller of the storage device will minimize the number of pages that need to be backed up during operation of the storage device by implementing one or the other of the above noted techniques as a back up policy. One example of such a policy is shown in where the controller operates to preferentially route a received page of data to a block having only data that belongs to the same file. Referring to the same simplified diagram of a portion of the memory of the storage device of is shown as in . Operative blocks and a spare block separated by line for ease of reference are illustrated and pages for three different ordinary files are illustrated with different hashing in the same manner as in .

In a back up policy is illustrated where when such a block is available pages of a file are written to a block only containing pages of that same file. Implementing this policy the controller automatically routes the received page to an available page in operative block as shown by line based on the data tag information associated with the received page and the previously written pages. The remaining blocks and all either contain pages for more than one file or no data. When all the data in the block belongs to the same file as the newly received page of data as is the case with page and block none of the data in the block needs to be backed up. This is illustrated in which shows the status of the memory immediately after writing page into block . Unlike the situation in where all the data needed to be backed up nothing is backed up when writing page to block . The assumption here is that for some files such as ordinary files if a part of a file is damaged then the whole file is considered damaged and has to be re written. Therefore there is no need to backup parts of such a file that is currently being written. Accordingly by writing such file only into blocks that do not contain other files there is no need to back up the block prior to writing the page. In order to take advantage of this feature a back up policy such as illustrated in may be implemented to direct incoming pages of an ordinary file to a block only containing pages of that same file so that unnecessary backups may be avoided.

An embodiment of another back up policy is shown in B where the controller is configured to write a newly received page to an empty block. illustrates the same initial arrangement of blocks and as in the portion of memory shown in however the controller of the storage device writes the newly received page to empty block in this embodiment as shown by line . The resulting arrangement of the illustrated portion of memory after the write operation is then seen in where no data has been backed up to the spare block that would be used to back up. Because there was no valid data present in the empty block no data required back up. As a result of the back up policies illustrated in the back up cost in each instance was significantly lower no data needed to be copied than the prior art method of that did not apply a policy for reduce back up cost and necessitated the back up of a number of pages of user data.

The back up policies illustrated in may be used separately or in combination. For example a combined back up policy utilizing both techniques may give preference to the controller first trying to locate an operative block that is empty and if no such block is available then the controller will look to write the newly received page of data to an operative block that only has pages that belong to the same file as the newly received page. If neither option is available then to the block containing the fewest pages of valid data may be selected in one embodiment.

It should be noted that the above description of applies to blocks that store ordinary files only. If data of multiple types is written to the operative blocks in memory the back up policy may be different. For example a back up policy may be applied that is based on one or both the file associated with the data and the data type. One embodiment of a back up policy for reducing back up cost during write operations where different data types are considered is illustrated in which shows a table listing the back up policy in certain contexts. This back up policy table may be stored in non volatile memory in the controller of the storage device as a table or a set of executable instructions. The back up policy of may be used independently of or in conjunction with other back up policies such as one or both of the back up policies illustrated in . For example the controller may look for the lowest back up cost solution by first looking for an empty block then looking for a block only having pages of information of the same type as the received page of data if no empty block is available and then looking for a block requiring the least number of pages needing back up according to the back up policy of if the empty block or block with only the same type of data is not available. Other combinations of back up policy preferences are also contemplated to minimize the back up cost.

Referring to the back up policy illustrated in the cells of the first column describe the type of file that a newly received page of data belongs to. The cells of row head columns that describe the back up action executed by the controller of the storage device before the new page identified in column is written. Cell heads the column listing the types of files that need to be backed up cell heads the column listing the types of files that do not need to be backed up and cell heads the column identifying the type of marking the newly received page will receive in the storage device. In the embodiment of the controller may execute back up and marking operations differently depending on the type of file received.

If the received new page is a page of an ordinary file cell then the controller will back up pages of log files and closed ordinary files will not back up any temporary or open files and will mark the new page with a specific tag in the table or other data array maintained in the storage device identifying the category or type of file for each page of data. The phrase closed ordinary files refers to any pages of ordinary files that are not actively being written to which in most cases will refer to any files other than the file corresponding to the new page currently being written. An open ordinary file is generally the file that corresponds to the file of the new page being written to the selected block.

If the received new page is a page of a temporary file cell then the controller will back up pages of log files and ordinary files will not back up any temporary or open files and will mark the new page with a specific tag in the table or other data array maintained in the storage device identifying the category or type of file as temporary. All temporary files may have the same global tag. In this implementation a page of a temporary file is generally categorized as never to be backed up and is considered expendable. Cell refers to avoidance from backing up of some files when an ordinary file is written ordinary files that belong to one of the files open for writing and temporary files.

If the received new page belongs to a log file cell the back up policy requires log files to be backed up. Only log files and ordinary files should be backed up while temporary files will not be backed up. Also log files will be tagged with the same global tag.

In another embodiment rather than categorizing pages of data with a classifying tag that refers to the file type e.g. ordinary temporary and log the host may tag pages of data according to address region in the memory the host assigns the data to. For example the address space accessible by the host may be sub divided in different segments where each segment is already associated with a back up policy. In other words by writing a page of data to a specific address the host can tell the storage device to back up or not back up the data without providing an explicit tag over the interface. This virtual or implicit tagging technique may be implemented by designating segments in the memory with unique defined address ranges as back up or non back up regions that the controller is aware of. The controller on the storage device will automatically apply the predetermined back up policy for any data received in the designated segments. The information regarding back up policy and associated ranges may be preconfigured in the storage device upon manufacture or configured by the host. A back up policy and address range table may be maintained in non volatile memory in the controller.

Accordingly the tag that has been described in other embodiments as indicating the type and identity of the file of the page may be a virtual tag that the FSM does not have to specify explicitly. In this embodiment of implicit or virtual data tagging the host allocates the virtual tag according to available storage area segments and writes clusters of data from a file or file type only to a segment associated with that file or file type.

As has been described above methods and systems for minimizing the amount of back ups necessary to protect against data losses due to power failure may use of the category of data received as well as the category of data already written to blocks in memory to minimize the amount of data that needs to be backed up by avoiding the writing of a page in a block that contains data of other files. The information on the category of data may be provided by the host tagging pages of data and the controller of the storage device may record the data category information in a table or index that maps the category of each page in each block. The tag information can be obtained from a FSM or any other executable module which may be located on a host device or incorporated into the controller in different embodiments. The tag may be indicative of the page category where the category may represent data considered to be always disposable after a power failure and never requiring backup prior to writing a new page or data considered to always be non disposable and requiring backup whenever a new page can be written to the block. The category of the data in a previously received page may also represent data that may or may not require back up depending on the category of the data in the newly received page of data.

The category of data in the received page and of data already residing in the block being examined which may include one or more of file identifying information or file type information may be used to determine how many pages will need backing up from the block. If the blocks contain pages of different types such as log files and or temporary files then the back up policy may be different. The storage device may be configured to write received pages to empty blocks to use the tagging information to write received pages only to blocks that only have other pages from the same file and or use the tagging information to apply a more sophisticated back up policy that allows the storage device to determine the back up cost of writing a page of data into various blocks in memory and choose the block having the lowest back up cost e.g. the fewest number of pages that would need to be backed up . In this manner the embodiments described above permit a storage device to minimize data loss in case of a power failure during a write operation while also minimizing the time and energy necessary to back up data during the write operation.

It is therefore intended that the foregoing detailed description be regarded as illustrative rather than limiting and that it be understood that it is the following claims including all equivalents that are intended to define the spirit and scope of this invention.

