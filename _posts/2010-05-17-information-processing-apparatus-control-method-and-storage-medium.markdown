---

title: Information processing apparatus, control method, and storage medium
abstract: To provide a system capable of preventing unintended update of default values of print settings and capable of improving the usability in image forming processing, an information processing apparatus according to the present invention includes a CPU that accepts a display instruction from a user to display an interface of a printer driver and does not permit the user to update the default values in a case where the accepted display instruction is a first display instruction for updating the default values relating to the print settings of the printer driver and the update of the default values is not permitted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08427683&OS=08427683&RS=08427683
owner: Canon Kabushiki Kaisha
number: 08427683
owner_city: Tokyo
owner_country: JP
publication_date: 20100517
---
The present invention relates to an information processing apparatus that can control processing for enabling users to update default values of print settings for a printer driver. The present invention further relates to a control method and a computer executable storage medium which are usable to control the information processing apparatus.

When users want to print document data and graphics data after the users have generated the data on a computer it is general to activate a printer driver installed on the computer to convert print data i.e. data to be rendered into printer language data and transmit the printer language data to a printer. When a user changes and or inputs setting values via a user interface that can be provided by an application or a printer driver print settings sheet type two sided printing color printing selections of sheet feeding cassette etc. are written in a printer language based on the setting values determined by the user and transmitted as printer language data.

The print settings initially set when a printer driver is installed are standard default values that are stored in the printer driver beforehand. The standard default values are fundamental values usable for a reset to default function of a user interface provided by the printer driver. Further according to Windows OS provided by Microsoft Corporation print settings are stored in a registry database. In this case not only the print settings dedicated to each user but also the standard default values are stored in the registry. The standard default values stored in the registry can be changed by an administrator who can change standard settings. The standard default values are usable for initial print settings in a case where a printer driver of a shared printer is downloaded from a server to a client.

It is generally required to complete the print settings every time when each user instructs a printer to perform printing. Alternatively users can update default values of the print settings beforehand. According to Windows users can open various user interfaces of a printer driver from a printer folder to perform settings. The print setting values having been set by a user are stored in the registry and can be used as default values of print settings usable in an application. For example when a user wants to fix the sheet size to a predetermined size e.g. B5 and further when the user wants to constantly perform monochrome printing the user generally performs print settings using a printer folder beforehand and updates the default values of the print settings.

When an IT administrator distributes a printer driver from a print server the IT administrator may want to designate predetermined default values of print settings beforehand. For example the IT administrator may request users to always select 2UP or two sided printing for the purpose of decreasing the consumption amount of sheets. In such cases the IT administrator changes the values of the above described standard settings and prepares a shared printer driver based on the changed print settings to let each client download and install the shared printer driver.

However each user can freely opens user interfaces of a printer driver from a printer folder and update the default values according to user s preference. Therefore a print result obtained by each client may not the one that was initially intended by the IT administrator. To solve the above described problem as discussed in Unexamined Patent Application Laid Open No. 2004 192219 there is a conventional method for enabling an administrator to lock print setting data of a printer driver to prevent the setting values from being changed by users.

The above described method is useful to surely fix the values of the print settings. However there may be a lesser degree of freedom for individual users. For example in a case where some documents to be distributed for common use in an office are printed by N up or two sided monochrome printing and another documents to be delivered to individual clients are printed by one sided and color printing it is necessary to install two printer drivers because print settings need to be fixed and cannot be changed. Hence according to a conventional method discussed in Unexamined Patent Application Laid Open No. 2007 122137 even in a case where a user updates default values stored in a registry having been set by a user print setting contents of the standard settings are rewritten in synchronization with the registry having been set by the user at predetermined timing.

However there may be a problem if the print settings of the standard settings are forcibly synchronized at predetermined timing. For example a user may perform print settings before generating a document. In such a case according to the above described method the print settings will be changed at timing not intended by the user while the user is still writing the document. As a result the user will not be able to obtain a printed product according to the print settings that the user has designated.

Further even in a case where the above described synchronization timing is arbitrarily changeable if a synchronization time is long or the frequency of the synchronization is lower a state where the default values have been updated by a user will last for a long time. It becomes difficult to force users to use the print settings that are designated by the IT administrator. On the other hand if the synchronization time is short or the frequency of the synchronization is higher the standard settings will soon return to the original values and therefore it becomes difficult for users to freely change the default values of the print settings.

According to an aspect of the present invention an information processing apparatus includes a printer driver that can generate print data to be transmitted to a printing apparatus according to a print instruction of an application. The information processing apparatus according to the present invention includes a reception unit configured to accept a display instruction from a user to display a user interface of the printer driver a determination unit configured to determine whether the display instruction accepted by the reception unit is a first display instruction for updating default values relating to print settings of the printer driver or a second display instruction corresponding to the print instruction of the application and a control unit configured to cause a display unit to display a user interface that can accept an update instruction for updating the default values from the user in a case where the determination unit determines that the display instruction is the first display instruction and the update of the default values is permitted cause the display unit to display a user interface that does not accept the update instruction in a case where the determination unit determines that the display instruction is the first display instruction and the update of the default values is not permitted and cause the display unit to display a user interface that can accept a change instruction from the user to change the print settings from the default values to other values and does not permit the user to update the default values in a case where the determination unit determines that the display instruction is the second display instruction.

The present invention can provide a system capable of preventing unintended update of default values of print settings and capable of improving the usability in image forming processing.

Further features and aspects of the present invention will become apparent from the following detailed description of exemplary embodiments with reference to the attached drawings.

Various exemplary embodiments features and aspects of the invention will be described in detail below with reference to the drawings.

A central processing unit CPU can control various operations to be performed by the information processing apparatus according to software programs stored in a read only memory ROM or a random access memory RAM provided in a main storage apparatus or in an auxiliary storage apparatus . The RAM can function as a work area when the CPU performs various processing.

The auxiliary storage apparatus stores applications utilities printer drivers and an operating system OS . A keyboard and a pointing device which is represented by a mouse and a touch panel are input devices that enable users to input various instructions to the computer via an input interface I F . An output I F is an interface that can output data to output devices such as a monitor and a printer . A local I O is usable for a direct connection to the printer . A communication I F is usable for connection via a network to the printer . A common data system bus is usable for transmission and reception of data.

At least one printer is connected to the network. Although the printer is physically connected to the network the printer is in an off line state where the printer cannot be operated by the client PC or the server . For example the network according to the present invention is a small scale network such as personal area network PAN local area network LAN metropolitan area network MAN and wide area network WAN . Alternatively the network according to the present invention can be a large scale network. All of the above described devices are connected to the network.

In the present exemplary embodiment if a user inputs a print instruction to the client PC the print instruction is sent directly or via the server to the printer . The printer performs print processing to output a print product. To enable users to commonly use the printer via the server a dedicated printer driver can be installed beforehand on the server . A user of the client PC can designate the shared printer and download the corresponding printer driver from the server and install the downloaded printer driver on the client PC .

A monitor of the output device displays a document when the document is generated by a user using the application . The user can transmit a print instruction for the document to a printer by manipulating the input device e.g. the keyboard or the mouse . The user implements the print instruction through three processes of selecting a printer changing print settings and converting document data into rendering data. First as a process of selecting a printer the user selects the printer driver that corresponds to a printer that performs printing.

Next the user changes print settings . In this case the user instructs the print processing system to display a user interface on the monitor . The monitor displays default values as the print settings to be applied to the document . Then the user changes the contents of the print settings from the default values to arbitrary values that are suitable to obtain a final print result that the user wants by using a user interface of an application or a printer driver.

Then according to the changes added to the print settings the user performs the conversion of rendering data . The items to be set in this case for example include settings relating to output sheet size two sided one sided printing and monochrome color printing. The print settings can be stored temporarily on the RAM as a binary data structure or as a markup language XML. The storage form of the print settings is variable depending on the printer driver or the OS . If the user interface is closed the changed print settings are discarded. Therefore every time the user interface is reopened the default values are initially set.

After completing the above described processing for changing the print settings the user instructs the OS to execute print processing. The OS performs rendering processing for the designated printer driver via the graphics engine . If layout processing is designated in the print settings the OS generates a temporary spool file and activates a layout module before activating a rendering module of the printer driver . The layout processing includes changing the order of sheets and pasting or disposing a plurality of pages on one sheet. After the above described layout processing by the layout module is completed the OS performs rendering processing for the printer driver .

The printer driver causes the rendering module to convert the received rendering data into print data written in a data language i.e. a printer control language that can be processed by the printer . In this case the printer driver also converts the print settings into printer control language data. In many cases both the rendering module and a configuration module are prepared as modules commonly usable for a plurality of printers that are different in type. The printer driver includes a model dependent data file that includes descriptions relating to differences in respective models.

The rendering module and the configuration module can refer to the model dependent data file at appropriate timing. The OS can store each of the converted data as a spool file . The print manager acquires the spool file and performs schedule management for the print processing as a print job file. When the printer is ready for the print processing the print manager transmits print job data to the printer via an I O module . As described above according to a user s print instruction input via the application print data can be converted into printer language data and the printing can be performed.

The server and the client PC may differently configure the processing to be performed by the above described print processing system. In a case where the client PC connected to the server performs the rendering processing for converting the print data into printer language data the client PC transmits the spool file having been written in a printer language to the print manager of the server . Then the server outputs the spool file via the I O module to the printer .

In a case where the client PC connected to the server performs the server side rendering processing the client PC causes the graphics engine to temporarily generate a spool file . Then the client PC transmits the generated temporary spool file to the print manager of the server . The print manager of the server performs rendering processing for the printer driver based on the received temporary spool file using the graphics engine .

To change the print settings of the document users can use an application to directly rewrite the print settings or can use a user interface see that can be provided by the configuration module of the printer driver . The print settings include a Public setting area that is defined by the system and a Private setting area that is extended by the printer driver as illustrated in .

The Public setting area includes basic settings such as selection of sheet size and sheet feeding stage and switching between color and monochrome which relate to the print processing. The Private setting area includes sheet discharge functions and precise color adjustment functions that can be designated as optional settings for each printer. It is difficult for the application to check extended settings uniquely settable by each printer driver .

The print settings that the application can directly change are limited to the Public setting area defined by the system. Therefore it is general that the application displays a user interface that can be provided by the configuration module of the printer driver and enable users to change the print settings . Further the configuration module provides an application programming interface API in addition to the user interface. Therefore instead of displaying the user interface it may be useful to change the Private setting area of the print settings from the outside.

Further in addition to the above described changes added to the print settings it is possible to update default values of print settings such as standard settings dedicated to each user which are provided in the OS and standard settings dedicated to each driver. The standard settings dedicated to each user can be referred to as user default values and the standard settings dedicated to each driver can be referred to as standard default values. 

The user default values are set beforehand by individual users and can be displayed on a user interface by an application as default values in print settings. The standard default values are set beforehand by an administrator. For example a first log in user can use the standard default values as initial print settings. Further the standard default values can be used as initial print settings when a printer driver is newly downloaded from a server. A user interface that can be provided by the configuration module of the printer driver which is called from the OS is usable to set the user default values and the standard default values instead of performing the settings via an application.

The OS integrally manages each printer as a printer folder see . The OS selects a printer folder of a designated printer according to a user s instruction and performs a display instruction of a user interface to be used to update the default values. For example when a user presses a print setting button in a property window of the selected printer folder see a user interface of the configuration module can be displayed to enable the user to update the user default values. Further for example when the user presses a standard setting button provided on a detailed setting tab sheet of the property window of a printer folder see a user interface of the configuration module can be displayed to enable the user to update the standard default values.

The user interfaces that can be provided by the configuration module of the printer driver include not only the user interface usable for print settings see but also a user interface that can be exclusively used by the administrator to perform settings see . The user interface illustrated in enables the administrator to perform optional hardware settings for the printer and special settings for the driver. The above described printer folder of the OS can be referred to when the administrator designates the user interface to perform settings.

Example setting processing for determining whether to permit users to update default values of the print settings is described below with reference to a flowchart illustrated in . To realize the following processing in respective steps the CPU executes the configuration module of the printer driver and controls each of related constituent components.

In step S the CPU accepts an opening instruction of an administrator s user interface from a printer folder based on a user s operation. Before accepting the instruction the OS determines whether a user has a valid administrator authority. If it is determined that the user s administrator authority is valid the CPU accepts a user name and a password that are input by the administrator. Even when the user does not have any valid administrator authority if both the name and the password entered by the user agree with administrator information registered beforehand the CPU regards the user as having a valid administrator authority in step S.

In step S to check the administrator authority of the user who has input the instruction the CPU determines whether the user who has requested the administrator s user interface has the administrator authority. If it is determined that the user has the administrator authority YES in step S the processing proceeds to step S. If it is determined that the user does not have any valid administrator authority NO in step S the processing proceeds to step S.

In this case the CPU uses the API provided by the OS for the above described administrator authority determination. The CPU acquires from the API of the OS an access token that is associated with the process of the configuration module the currently executing module . Then the CPU acquires type information relating to the access token by designating the access token with the API of the OS and determines the type of the acquired access token.

As a result the CPU can determine whether the opening request of the user interface is based on valid administrator authority. In other words the CPU can check the validity of the administrator authority of the user. When the administrator authority of the user is valid the determination result in step S becomes YES. To open the properties of the user interface based on the valid administrator authority an item execute as administrator can be selected from a menu of a printer folder as illustrated in .

In step S the CPU causes the monitor to display the administrator s user interface in a state where the controls of administrator settings are grayed out and cannot be operated. In this case whether to permit the user to change the default values is not settable in the following steps. On the other hand in step S the CPU causes the monitor to display the administrator s user interface that can accept user s instructions.

In step S the CPU selects one of the above described four functions according to a user s instruction from the displayed menu of the setting item value change permission with respect to printer properties. A detailed operation to be performed by the printer driver according to the above described choice is described below with reference to a flowchart illustrated in .

If the user presses an OK button after completing the selection with respect to the setting item value change permission with respect to printer properties then in step S the CPU stores administrator setting content in a registry database of the OS . After completing the data storage processing the CPU terminates the processing routine illustrated in in response to closing of the user interface.

Through the above described processing the setting for determining whether to permit users to update the default values is accomplished. Further in a case where the setting is determined so as not to permit users to update the default values the users are forced to perform printing in a way intended by an IT administrator unless the print settings are changed from the default values to other values on an interface that is activated in response to a print instruction of an application.

Next example processing for opening the user interface relating to the print settings according to the above described setting indicating whether to permit users to update the default values is described below according to the flowchart illustrated in . To realize the following processing of respective steps in the CPU executes the configuration module of the printer driver and controls each of related constituent components.

In step S the CPU receives an opening instruction i.e. a display instruction of the user interface relating to the print settings from an application or a printer folder based on a user s operation. In step S the CPU determines whether the user interface relating to the print settings is opened from a printer folder of the OS referring to the instruction received in step S. When the OS calls the configuration module the OS sends a flag. The flag includes a description indicating whether it is related to default print settings. Therefore the CPU can execute the processing of step S based on the flag information.

The reason why the CPU performs the above described determination processing is because the processing is necessary to open the user interface from a printer folder to update the default values of the print settings. If it is determined that the user interface is opened from a printer folder YES in step S the processing proceeds to step S. If it is determined that the user interface is not opened from a printer folder NO in step S the processing proceeds to step S.

For example if the user interface is opened from an application the CPU determines that the user interface is not opened from a printer folder. In the present exemplary embodiment the CPU regards the display instruction as a first display instruction if the display instruction is for updating the default values of the print settings by opening the user interface from a printer folder. The CPU regards other display instruction e.g. print instruction from an application as a second display instruction.

In step S the CPU reads the content of the setting item value change permission with respect to printer properties having been set in the processing illustrated in from the registry database and determines whether the item permit is selected. If it is determined that the item permit is selected i.e. if updating the default values of the print settings is permitted YES in step S the processing proceeds to step S. On the other hand if it is determined that the item permit is not selected NO in step S the processing proceeds to step S.

In step S the CPU opens the user interface with ordinary print settings. In the present exemplary embodiment the ordinary user interface relating to the print settings is an interface that does not specifically prevent users from updating and changing the default values of the print settings. For example in a case where the user interface is opened according to a print instruction from an application the opened interface can accept a user s change instruction i.e. instruction to change the print settings from the default values to other values .

Therefore the user can change the print settings from the default values to other values via the interface. The printer performs printing based on the changed print setting values. In this case the interface does not allow the user to update the default values of the print settings.

On the other hand in a case where the user interface is opened from a printer folder to update the default values of the print settings and updating the default values is permitted the opened interface can accept an update instruction for updating the default values. Therefore the user can update the default values of the print settings via the opened interface.

In step S the CPU draws up a list of all controls that can be operated by the user on the user interface relating to the print settings. Then in step S the CPU confirms whether the determination with respect to gray out processing i.e. processing for brining the control into a disabled state has been completed for all of the listed controls. If it is determined that the determination has not been completed for all controls NO in step S the processing proceeds to step S. On the other hand if it is determined that the determination has been completed for all controls YES in step S the processing proceeds to step S.

If there is any control that is not confirmed yet i.e. when the processing proceeds to step S the CPU selects one of the undetermined controls from the list as a determination target control. In step S the CPU determines whether the function selected in the administrator setting item value change permission with respect to printer properties is do not permit. 

If it is determined that the function selected in the administrator setting item value change permission with respect to printer properties is not do not permit NO in step S the processing proceeds to step S. On the other hand if it is determined that the function selected in the administrator setting item value change permission with respect to printer properties is do not permit YES in step S the processing proceeds to step S.

In step S the CPU grays out the determination target control to bring it into a disabled state. In the present exemplary embodiment when the control is grayed out the CPU does not accept any operations and instructions from the user. Further the processing for rejecting user s operations and instruction is not limited to the above described gray out processing. For example the CPU can stop displaying the user interface or any other method can be used.

In step S the CPU determines whether the function selected in the administrator setting item value change permission with respect to printer properties is permit display only. If it is determined that the function selected in the administrator setting item value change permission with respect to printer properties is not permit display only NO in step S the processing proceeds to step S.

If it is determined that the function selected in the administrator setting item value change permission with respect to printer properties is permit display only YES in step S the processing proceeds to step S. When the item permit display only is selected the CPU does not permit the user to update the default values of the print settings and only permit the user to display the default values.

In step S the CPU determines whether the determination target control is a control for opening another hierarchy e.g. a dialog or a property sheet . If it is determined that the determination target control is a control for opening another hierarchy YES in step S the processing returns to step S. On the other hand if it is determined that the determination target control is not a control for opening another hierarchy NO in step S the processing proceeds to step S. In step S the CPU grays out the determination target control.

The procedure for opening another hierarchy includes calling the API of the OS generating a dialog or a property sheet and displaying the generated dialog or the generated property sheet. The configuration module manages the necessity of calling the API of the OS in a list while associating it with the control. Therefore the CPU can search the list based on information of the control in determining whether the determination target control is a control for opening another hierarchy.

In step S the CPU determines whether the determination target control is a control included in a basic page. The reason why the CPU performs the above described determination in step S is because the function selected in the administrator setting item value change permission with respect to printer properties is permit basic page only. In the present exemplary embodiment the basic page is a property page that includes an assembly of representative setting items that are frequently used as print settings and selected from functions that can be set by the printer driver . Further in a case where the interface includes a plurality of pages the basic page is a page that is primarily displayed when the CPU controls the monitor for the display of the user interface.

The print settings included in the basic page are for example sheet size number of sets of copies two sided and color. If it is determined that the determination target control is included in the basic page YES in step S the processing returns to step S. On the other hand if it is determined that the control is not included in the basic page NO in step S the processing proceeds to step S. In step S the CPU grays out the determination target control.

The CPU can call the API of the OS to draw up a list of all controls included in a dialog or a property sheet. The CPU can generate a list of the controls based on the basic page and can search the list based on information of a selected control in determining whether the control is included in the basic page.

As described above the CPU can accept user s operations and instructions with respect to the representative controls included in the basic page i.e. the page primarily displayed . Therefore the user can easily perform the operation for updating the default values of the print settings. The user will not hesitate to perform the update operation even in a case where there are numerous functions that can be updated. Further the user can freely update the print settings for frequently used functions. The CPU can prevent a print result from being deteriorated e.g. in tint even when the user erroneously performs detailed settings for specific functions such as troubleshooting.

Alternatively the CPU can permit the user to update the default values of the print settings not only in the basic page but also in an arbitrary page one of a plurality of pages included in the interface while the CPU can inhibit the user to update default values of the print settings included in other pages.

In this case the CPU can accept a user s update instruction if the page is an arbitrary page selected by the administrator. The CPU does not accept any update instruction from the user if the page is a page other than the above described arbitrary page. As described above the CPU can fix the default values of the print settings included in a page designated by the administrator.

If the above described determination processing has been completed for all controls then in step S the CPU determines whether the function selected in the administrator setting item value change permission with respect to printer properties is permit basic page only and the page to be displayed is the basic page. If it is determined that the function selected in the administrator setting item value change permission with respect to printer properties is permit basic page only and the page to be displayed is the basic page YES in step S the processing proceeds to step S. If it is determined that above described conditions are not satisfied NO in step S the processing proceeds to step S.

In step S the CPU displays a message default values are unchangeable. Then in step S the CPU displays the user interface relating to the print settings that includes controls partly or entirely grayed out according to the content of the setting item value change permission with respect to printer properties. In step S the CPU displays the user interface of the basic page that can accept user s operations and instructions.

The application has the capability of changing user default values and standard default values of the print settings using the API of the OS independently of the printer driver . However to update the default values of the print settings it is necessary to generate updated values of the print settings to be written.

Example processing for generating the updated values of the print settings with the API of the printer driver is described with reference to a flowchart illustrated in . To realize the following processing in respective steps the CPU executes the configuration module of the printer driver and controls each of related constituent components of the application .

In step S the CPU calls the configuration module to change the print settings with the API. Then in step S the CPU determines whether the function selected in the administrator setting item value change permission with respect to printer properties is permit. If it is determined that the function selected in the administrator setting item value change permission with respect to printer properties is permit YES in step S the processing proceeds to step S. In step S the CPU performs ordinary processing.

On the other hand if it is determined that the function selected in the administrator setting item value change permission with respect to printer properties is an item other than permit NO in step S the processing proceeds to step S. In step S the CPU determines whether the API is used to update the values of the print settings.

If it is determined that the API is used to update the values of the print settings YES in step S the processing proceeds to step S. In step S the CPU performs an error display without changing the print settings. Therefore it is impossible to generate the updated print settings. As a result it is impossible to update the default values of the print settings.

It may be useful to realize the function permit basic page only in combination with the function permit display only. For example only a button for opening the basic page and a button for opening another hierarchy are selectable and other items are all grayed out.

Further the setting item value change permission with respect to printer properties can further include in addition to the above described four functions a function for permitting changes on a page by page basis a function for permitting changes on a function by function basis and a function for permitting only a confirmation of a password displayed in a printing operation.

Further the configuration module can provide a mechanism that does not usually permit users to change the default print settings via the user interface but if the API is used allows the users to change all of the print settings. Using the API to change the print settings and update the default values of the print settings is performed only in a specific application. Therefore the above described method is useful to substantially fix the default values.

As described above the present exemplary embodiment can prevent the user default values and the standard default values of the print settings from being updated and can fix the print settings to the default values.

For example the administrator can set preferable default values in fixing the print settings by selecting the function do not permit in the administrator setting item value change permission with respect to printer properties after updating the default values of the print settings beforehand.

Further instead of perfectly fixing the values the present exemplary embodiment enables users to use an ordinary user interface when print settings are performed via an application. The ordinary user interface permits the users to change the print settings from the default values to other values.

Further disabled default values are displayed in a gray out state on the user interface relating to the print settings. Therefore users will not be confused even when the users cannot operate the controls. Moreover a similar display can be realized even in a case where a printer driver is stored in a network server and only a user interface can be displayed by a client.

The present invention can be applied to a print processing system different from that described in the first exemplary embodiment. A second exemplary embodiment of the present invention is described below.

A print manager is a module included in the OS. A version 3 printer driver and each filter of a filter pipeline are stored as the printer drivers in the auxiliary storage apparatus illustrated in . A GDI application and an XPS application are stored as the applications in the auxiliary storage apparatus illustrated in .

A user can manipulate the input device such as the keyboard to instruct print processing via the GDI print application program i.e. GDI application or the XPS print application program i.e. the XPS application whose interfaces are displayable on the output device . The print processing can be accomplished by sequentially performing three processes of selection of a printer generation of print settings and conversion of rendering data.

First a user selects a printer to be used for printing. In other words the user selects a printer driver corresponding to the printer that performs printing. Next print settings are generated. To perform the print settings an application secures a memory usable for print settings. The application or a configuration module of the printer driver uses a model dependent file to fill up setting data.

The GDI application uses a binary DEVMODE structure as print settings data. The XPS application uses a print ticket that is written in the markup language XML. Each of the DEVMODE structure and the print ticket includes as illustrated in a Public area that is defined by the OS and a Private area that can be defined by each printer driver.

Further the print ticket is print setting information written in an XML format as illustrated in . Therefore the Public area and the Private area are discriminated from each other in name space. Either the DEVMODE structure or the print ticket stores print settings.

The user can directly change rewrite the print settings via an application. For example the user can perform settings dedicated to the printer by displaying a user interface of the printer driver stored in the configuration module and by operating the displayed user interface. The printer driver changes the settings dedicated to the printer in the DEVMODE structure or the print ticket according to the settings of the user interface.

Actual settings included in the print settings are for example designating A4 as output sheet size selecting two sided printing as print method switching between color print and monochrome print and designating a sheet feeding stage. As the print settings of the print ticket are written in the XML format it is easy for the XPS application to directly change rewrite all of the setting values. However it is also useful to use a user interface of a printer driver to change the settings.

Finally conversion of rendering data is performed. If the print settings are finalized the user instructs print processing via the application. In a case where the GDI application is used for printing the rendering data is sent to a GDI to XPS conversion module that is operable as a version 3 printer driver. The GDI to XPS conversion module generates an XPS spool file . The version 3 printer driver is a printer driver that is compatible with Windows2000 and subsequent versions of Microsoft . In this case the GDI to XPS conversion module calls the configuration module and converts the print settings from the DEVMODE structure to the print ticket .

In a case where the XPS application is used for printing there are two methods for generating an XPS file. More specifically the XPS application itself generates an XPS file or the OS generates an XPS file according to a rendering command from the XPS application. In each method the XPS spool file can be generated during the print processing. As described above the XPSDry printing system can surely generate the XPS spool file during the print processing.

The generated XPS spool file is then subjected to print filter pipeline processing. The print filter pipeline processing is a mechanism for performing a printing of the XPS spool file through a plurality of filters. A filter configuration file included in the print filter pipeline processing is usable to control the total number of the filters and the order of the filters.

In the present exemplary embodiment a filter pipeline manager is operable in the print filter pipeline processing. The filter pipeline manager can sequentially perform processing of a setting filter a layout filter and a renderer filter according to the filter configuration file .

The processing in each filter automatically starts in response to reception of the XPS spool file . Each filter modifies the XPS spool file and sends the modified XPS spool file to the next filter. The filter pipeline manager finally outputs print data written in a printer control language e.g. page description language PDL that is a data language that can be processed by the printer.

In a case where the printer is an XPS direct printer that can directly read the XPS spool file and can perform printing based on the read XPS spool file the processing to be performed by the above described filters can be omitted.

The setting filter performs processing for reading a print ticket and writing data required in printing into the print ticket. The layout filter performs layout processing e.g. change of copy ratio bookbinding imposition layout and stamp according to the print ticket included in the XPS spool file . Therefore for example if the print ticket does not include any imposition settings the layout filter performs nothing and directly sends the XPS spool file to the next filter.

The final renderer filter renders the XPS spool file and converts it into PDL data. The PDL data can be managed by the print manager which manages a schedule of the print processing so that print jobs are successively registered in queues. When the amount of PDL data is sufficient to perform printing the PDL data are transmitted to the printer via an I O monitor according to the registration order of the queues. As described above a main role of the printer driver is receiving print data from an application and converting the print data into printer language data to perform actual print processing.

Even in a case where the above described XPSDry print processing system is used a user interface of the configuration module can be used to change update user default values and standard default values of the print settings. Accordingly the flowcharts described in the first exemplary embodiment see and can be used to fix the default values.

In a case where the print ticket is used to change the print settings the default values can be prevented from being changed by not permitting users to use the print ticket in changing the settings similar to the above described first exemplary embodiment in which the API is used to change the print settings. Further similar to the above described case of the API the configuration module may be configured to switch the settings so as to permit users to change the print settings if the print ticket is used.

Further a storage medium that stores a computer executable process for realizing the functions of the above described exemplary embodiments according to the present invention can be supplied to an apparatus. A computer or CPU or micro processing unit MPU provided in the apparatus can read the program code from the storage medium and execute the program code to realize the present invention.

In this case the program code itself read out of the storage medium can realize the functions of the above described exemplary embodiments. The storage medium storing the program code constitutes the present invention.

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all modifications equivalent structures and functions.

This application claims priority from Japanese Patent Application No. 2009 121007 filed May 19 2009 which is hereby incorporated by reference herein in its entirety.

