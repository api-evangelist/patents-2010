---

title: Dividing cloud resources
abstract: A method and apparatus for dividing resources provided by cloud computing systems is described. In one embodiment, the method includes receiving a specification of a subset of cloud computing systems from among a plurality of cloud computing systems. The method may also include joining the subset of cloud computing systems into a pool of cloud computing resources. Furthermore, the method may include providing access to the pool of cloud computing resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08935397&OS=08935397&RS=08935397
owner: Red Hat, Inc.
number: 08935397
owner_city: Raleigh
owner_country: US
publication_date: 20100701
---
This application is related to the applications entitled Aggregation Across Cloud Providers concurrently filed on Jul. 1 2010 U.S. patent application Ser. No. 12 828 806 now U.S. Pat. No. 8 725 891 issued May 13 2014 and System and Method for Providing a Cloud Computing Graphical User Interface concurrently filed on Jul. 1 2010 U.S. patent application Ser. No. 12 828 817 now U.S. Pat. No. 8 639 747 issued Jan. 28 2014.

Embodiments of the invention relate to the field of cloud computing systems and more particularly to dividing the resources provided by a plurality of cloud computing systems.

Cloud computing is an architecture in which customers do not own the physical infrastructure related to an application data storage center etc. Instead customers avoid the various expenses associated with operating computers maintaining a communications network maintaining software etc. by purchasing usage from a third party cloud system provider. Customers consume the resources of various third party cloud systems over a communications network as a service.

Cloud systems however may be implemented in various formats involve various communications protocols and have various other specific requirements for interacting with the cloud systems. Thus in order to interact with multiple cloud computing systems consumer applications need to be tailored to each specific cloud system provider s requirements. As a result a consumer will be less likely to switch cloud system providers when to make such a switch would require the consumer to update existing applications. Furthermore the consumer may also be required to update their applications in response to cloud computing systems updates such as when a formatting or communications protocol change occurs on a cloud system.

A method and apparatus for dividing resources provided by cloud computing systems is described. In one embodiment the method includes receiving a specification of a subset of cloud computing systems from among a plurality of cloud computing systems. The method may also include joining the subset of cloud computing systems into a pool of cloud computing resources. Furthermore the method may include providing access to the pool of cloud computing resources.

In one embodiment cloud interface system is responsible for providing a neutral communications interface between client systems and disparate cloud systems . In one embodiment cloud systems are server based systems that provide cloud computing services such as remote data storage business applications internet services security services content distribution etc. to client systems . However different cloud providers such as cloud system and cloud system N may communicate and provide their respective services via disparate interfaces or communications protocols. For example the cloud systems can be implemented using different computing platforms such as AMAZON EC2 RED HAT RHEV M VMWARE ESX etc.

In one embodiment cloud interface system is an intermediary for communications between client systems cloud system aggregation server and cloud systems . In one embodiment cloud interface system abstracts vendor specific requirements such as communication protocol data formatting etc. to a neutral cloud interface system format as described in ARCHITECTURE SYSTEM AND METHOD FOR PROVIDING A NEUTRAL APPLICATION PROGRAMMING INTERFACE FOR ACCESSING DIFFERENT CLOUD COMPUTING SYSTEMS filed on Jul. 1 2010 U.S. patent application Ser. No. 12 828 778 now U.S. Pat. No. 8 631 067. In one embodiment cloud interface system translates client system or cloud system aggregation server requests received in the neutral format to requests formatted for a specific target cloud system . In one embodiment cloud interface system further translates the responses of the cloud system to the neutral format for client system or the cloud system aggregation server . In one embodiment for example the requests and responses are formatted in extensible markup language XML .

In one embodiment cloud interface system further translates the responses of the cloud system to the neutral format for client system or the cloud system aggregation server . In one embodiment for example the requests and responses are formatted in extensible markup language XML .

In one embodiment cloud based applications executed by client systems may access the services provided by disparate cloud systems via a single vendor neutral communications syntax of cloud interface system . In one embodiment client systems are therefore insulated from vendor specific communications protocols and messaging formats. As a result if client system switches between cloud systems and N client system needs only to direct their requests to a recipient cloud system via cloud interface system without reformatting the request issuing the request in a proprietary format etc. In one embodiment cloud interface system translates the requests and responses thereby insulating client systems from difficulties that may arise from switching cloud system providers updates to communications systems of cloud systems protocol changes that apply to cloud systems etc.

In one embodiment client systems communicate with cloud systems via cloud system aggregation server . In one embodiment client system issues a request to cloud system aggregation server for cloud system resources. In one embodiment cloud system aggregation server determines one or more cloud systems with resources that can satisfy the client system s request and issues the requests to the selected cloud systems via cloud interface system utilizing the neutral communications syntax. Cloud system aggregation server thereafter directs client system requests to the selected cloud system and forwards responses of the selected cloud system back to the client system .

In one embodiment cloud system aggregation server provides client systems access to multiple disparate cloud systems from one point of contact with the cloud system aggregation server . Furthermore client systems are not burdened with the task of deciding which particular cloud system to direct a request towards as cloud system aggregation server determines which cloud system or cloud systems will hand client system requests. As discussed below in one embodiment cloud system aggregation server determines how to route the client system requests utilizing such factors as comparative costs of the cloud systems given the client systems resource needs whether or not potential clouds are internal e.g. cloud systems on the same local network as the requesting client system or belonging to the same organization as the requesting client system whether there are preferred cloud systems user permissions to access different cloud systems availability of images across cloud systems availability of matching hardware profiles i.e. virtual machine size architecture operating system etc. provided by cloud systems etc.

In one embodiment cloud system aggregation server further dynamically changes which cloud system client system requests are directed to. In one embodiment the redirection to different cloud systems may be done in response to cloud system aggregation server detecting resource changes at specific cloud systems user preference changes whether or not cloud systems providers are experiencing technical difficulty cloud system resource usage limitations etc. Thus cloud system aggregation server performs the redirection without informing the client systems as communication with client systems remains in the neutral communications syntax of cloud interface system .

In one embodiment cloud system aggregation server may publish a pool of cloud system resources such as cloud system pool P. In one embodiment cloud system aggregation server makes published cloud system pool P available via a URL through cloud interface system . In one embodiment published cloud system pool P is a virtual cloud that represents a subset of the resources of cloud systems through N. Thus when a client system issues a request to connect to cloud system pool P cloud system aggregation server determines what cloud system within the pool P to direct client system requests. In one embodiment the determination of what cloud system within the pool P client requests are directed towards is performed as discussed above with the exception that only cloud systems within the pool P are considered.

For example an information technology IT department in a major corporation may have access to multiple cloud systems. However the IT department may partition out resources to other departments such as the accounting department within the corporation. Thus the IT department could select three specific cloud systems from all available cloud systems and publish the selected cloud system resources as a pool. Then any client system in the accounting department could access the three different cloud systems as chosen by the cloud system aggregation server by issuing a request to access the pool.

In one embodiment cloud system pool P may include other cloud system pools not shown as a resource within cloud system pool P. That is cloud system pools may be specified recursively so that a collection of cloud system resources within a pool can be further subdivided published and made available to client systems .

In one embodiment cloud interface system is one or more server computer systems communicably coupled with client system cloud system aggregation server and one or more cloud systems . In one embodiment cloud interface system is an intermediary between client system and cloud system aggregation server and cloud systems and provides translation services to client systems . In one embodiment cloud interface system provides the translation services via cloud system specific drivers such as cloud system drivers . Thus in one embodiment client system issues requests to and receives responses from cloud interface system in a neutral format via the cloud system aggregation server as discussed herein. Cloud interface system translates the requests to and responses from the vendor specific or proprietary cloud systems . Therefore in one embodiment client systems and cloud system aggregation server are insulated from the specific details associated with each cloud system provider.

In one embodiment client system issues requests to connect to cloud system servers via hypertext transfer protocol HTTP links provided by cloud system aggregation server . In one embodiment client system utilizes a representational state transfer REST communications protocol for communicating cloud system requests. In one embodiment the REST communications protocol is a communications protocol where client system initiates requests in a neutral syntax via a user interface of cloud system aggregation server a router of cloud system aggregation server determines and routes the client system request to a selected cloud system server and cloud interface system processes the requests in order to return appropriate responses in the neutral syntax from the selected cloud system server . In one embodiment cloud interface system translates the client system requests to a cloud system specific request and then receives a cloud system specific response. The cloud system specific response is then translated into the neutral syntax and returned to the client system via the cloud system aggregation server . In one embodiment the neutral communications syntax is extensible markup language XML formatted communications.

In one embodiment communication with cloud interface framework is performed via a neutral applications programming interface . In one embodiment the neutral applications programming interface implemented by cloud interface framework that defines the interface between client system or cloud system aggregation server and cloud interface system . In one embodiment the neutral applications programming interface of cloud interface framework defines images and instances. In one embodiment an image is a prototype of a server computer system which defines attributes of the server computer system and acts as a template for creating instances on a server computer system. In one embodiment an instance is a concrete server computer system that is realized from the image.

In one embodiment neutral applications programming interface of cloud interface framework further provides actions or methods that may be performed via the instances on cloud system servers. For example the actions may include start stop reboot etc. that correspond to actions to be performed on a cloud system .

In one embodiment the neutral applications programming interface of cloud interface framework provides an abstraction of the vendor specific implementations of cloud systems . In one embodiment a cloud system driver is associated with a respective cloud system and is aware of the message format supported by the respective cloud system and other features and or properties pertaining to the respective cloud system . A cloud system driver may be responsible for translating and filtering communication between client system and a corresponding cloud system . In one embodiment cloud system drivers translate the terms and actions such as image instance start reboot etc. to cloud specific terms and actions. For example client system requests may be routed by cloud system aggregation server to an image for a cloud system via the neutral applications programming interface of cloud interface framework . In one embodiment a driver would translate the neutral formatted application programming interface image to the corresponding element supported by a cloud system such as a template in RED HAT RHEV M or a vendor specific image in AMAZON EC2 . In one embodiment new cloud system drivers are dynamically added to cloud interface system as new cloud systems become available for use by clients 

In one embodiment cloud system drivers enable bi directional communication between the services offered by cloud system and client system or cloud system aggregation server without the need for client system or cloud system aggregation server to change the programing of a client application or the formatting for communicating messages based on cloud system requirements. Rather cloud system drivers provide the vendor specific interface to cloud systems while client system and cloud system aggregation server communicate with cloud system drivers via the neutral communication syntax such as a standardized XML communications format of the neutral applications programming interface of the cloud interface framework .

In one embodiment client system issues requests and receives response from multiple cloud systems via a single connection with cloud system aggregation server . In one embodiment client system access cloud system aggregation server via user interface presenter of cloud system aggregation server . In one embodiment user interface presenter provides the front end that client systems utilize to access cloud system resources. In one embodiment user interface presenter generates graphical user interfaces such as is illustrated in that enable a user of client system to issue requests for cloud system resources analyze and monitor current connections determine cloud system usage statistics etc.

In one embodiment in response to cloud system aggregation server receiving a client system request for cloud system resources cloud system router determines which cloud system will be provided the request. In one embodiment cloud system router determines how to route the client system request by analyzing a client mappings database. In one embodiment the client mappings database stores data about each of the cloud systems such as services provided quality of service prices for services available storage space processor etc. as well as data about users of the client system such as user permissions to access specific cloud systems budgets etc. In one embodiment client mappings database maps the user data to cloud providers to enable cloud system router to determine how to route user requests. For example cloud system router may receive a user request to access a cloud system that offers computing services with a specific processing requirements. In response to receiving the request cloud system router would consult the client mappings database to determine which cloud systems mapped to the requesting client system satisfy the requirements of the request . In one embodiment cloud system router may then determine one of the cloud systems to direct the user s request by analyzing factors such as cost quality of service locality server loads etc. Furthermore in one embodiment cloud system router may change the cloud system that is handling a client systems request in response to detecting changes in the cloud systems.

In one embodiment cloud resource divider of cloud system aggregation server receives requests from client system to publish cloud system pools . In one embodiment cloud resource divider receives a specification of cloud system resources that client system has permission to access. Cloud resource divider stores the collection of specified cloud systems in cloud pools database and offers the pool as a cloud system via the user interface presenter . In one embodiment by publishing the pool of cloud systems other client systems not shown are able to connect to the cloud systems in the pool simply by selecting the pool when making a cloud system request. In one embodiment cloud system router would determine which cloud system within a pool a client request should be routed to by consulting the client mappings database.

Referring to the process begins by receiving a request in a neutral format to be processed by a cloud computing system processing block . In one embodiment the request may be received from a cloud system aggregation server. In one embodiment the request is a request for a service provided by a cloud computing system. Such requests depend on the services offered by the cloud computing systems subject to the request. For example the request may be a storage request security operation request electronic business system request etc. In one embodiment the request is an HTTP request received by processing logic utilizing a REST communications protocol.

In one embodiment a standard message formatting protocol may be utilized such as extensible markup language XML . Other protocols for formatting messages such as hypertext markup language HTML standard generalized markup language SGML etc. may also be utilized by processing logic. In another embodiment processing logic may utilize a proprietary message formatting and communication scheme for receiving cloud computing system requests in the neutral format.

Processing logic translates the request from the neutral format to a format of the cloud computing system processing block . In one embodiment the cloud computing system my be one of a number of different cloud computing system platforms which provide different interfaces communicate using different message formatting support different protocols etc. For example the cloud computing system may be one of AMAZON EC2 RED HAT RHEV M VMWARE ESX or any other cloud computing system. The format of the cloud computing system may be for example IBM DB2 database formatted requests an application supported by the JBOSS Enterprise Application or Ruby on Rails development environments etc.

Processing logic then receives a response from the cloud computing system in the format of the cloud computing system processing block . The response is then translated from the format of the cloud computing system to the neutral format processing block . In one embodiment as discussed above cloud computing system specific drivers act as a translation service for mediating messages with different cloud computing system.

Processing logic then transmits the response in the neutral format to the cloud system aggregation server processing block . In one embodiment the response is also transmitted via the HTTP connection utilizing the REST protocol.

Referring to the process begins by receiving a request to start a cloud computing session processing block . In one embodiment the request specifies particular resources as part of the request. For example the request may specify a required cloud computing platform e.g. AMAZON EC2 RED HAT RHEV M VMWARE ESX etc. minimum memory requirement processing speed price cap service guarantee network locality cloud system provider etc. However the request need not specify a specific cloud system as processing logic will decide how to route the request. The request may be received from a client system such as client system of .

Processing logic determines a mapping of resources specified in the request to one of a plurality of available cloud computing systems processing block . In one embodiment processing logic consults a client mappings database that includes mappings of users and clients to different cloud computing systems the available resources of the cloud computing systems and user permissions associated with the cloud computing systems. In one embodiment cloud system pools may be included as cloud systems in the client mappings database. In one embodiment processing logic matches the requirements specified in the request with the cloud systems mapped to a user by consulting database tables in the client mappings database and selects an appropriate cloud computing system. In one embodiment the cloud computing selection is further based on factors such as cost user preference quality of service etc. in order to maximize the quality of the selected cloud computing system.

The request is then routed to the determined cloud computing system processing block . In one embodiment processing logic forwards the request to the cloud computing system to initiate a connection or start a session between a client system and a cloud computing system.

Processing logic determines whether updated resources specification for the cloud computing session have been received processing block or whether there are updates to any cloud computing systems processing block . When there are updates processing logic returns to processing block to determine a mapping between the resources specified in the request and available cloud computing systems based on either the updated requirements or changes to the cloud computing systems. In one embodiment the client requirements may change during a cloud computing session such as a client requesting increased processing resources greater memory requirements etc. Furthermore a cloud computing system may change during a session such as experiencing a reduction in quality of service experiencing an increase in load etc.

For example a user may decide that she needs a faster processor and a cloud computing system may be experiencing a particularly high load. In one embodiment processing logic monitors for these types of changes that impact the selection of a particular cloud computing system by periodically sending status queries to cloud computing systems or receiving updated request parameters from client systems. In one embodiment when a change does occur processing logic dynamically changes the cloud computing system that client requests and commands are routed to without receiving additional commands or requests from a client system.

If there are no updates processing logic continues to route user requests to the determined cloud computing system processing block . In one embodiment processing logic continues to route user requests to the selected cloud computing system until the cloud computing session is terminated.

Referring to the process begins by receiving a link to a new cloud computing system processing block . In one embodiment the link may be a URL that specifies a network location where a cloud computing system may be accessed. In one embodiment the link further serves as the location where client systems may subsequently access the cloud computing system. In one embodiment the link may be received from a system administrator that is adding the new cloud computing system to an existing group of available cloud computing systems In another embodiment the link may be received from a cloud computing system that is to be added to an existing group of available cloud computing systems.

Processing logic determines the capabilities of the new cloud computing system processing block . In one embodiment the capabilities are determined by data included with the link. The data may include for example storage space memory size types of instances supported development environments supported etc. In another embodiment the capabilities of the cloud computing system are determined by accessing the link to obtain data from the cloud computing system. The data may be obtained by for example querying the cloud computing system or obtaining a data file from the cloud computing system that list the capabilities.

A mapping from one or more users to the new cloud computing system is determined based on the determined capabilities processing block . Based on the determined capabilities of the new cloud computing system processing logic maps users that specify the determined qualities to the cloud computing system and users that have permissions to access the cloud computing systems. Processing logic updates the mapping database processing block . In one embodiment a client mappings database is updated with the newly created mappings for the new cloud computing system.

Referring to the process begins by determining available cloud computing systems associated with a user processing block . This determination can be made in response to .a client system request to a cloud resource divider to partition or divide cloud system resources associated with the user. As discussed above cloud computing systems are mapped to users based on resources provided by the cloud computing systems and user permissions to access the cloud computing systems. For example a user may specify resources and preferences that match one hundred available cloud computing systems. However the user may only have permission to access ten of the cloud computing systems. Thus in the example there would be ten available cloud computing system associated with the user.

Processing logic receives a specification of a grouping of the determined cloud computing resources processing block and joins the grouping of resources into a pool processing block In one embodiment the grouping of cloud computing resources may be a specification of a subset of cloud computing systems accessible to a user or client system. Continuing the example above the user may specify a group of five cloud computing systems from the ten systems accessible to the user. In one embodiment the five cloud computing systems are joined so that users who seek to connect to the pool for a cloud computing session are restricted to being routed among the five cloud computing systems. Processing logic then creates the requested pool and updates a cloud pools database processing block .

In one embodiment pools of cloud computing resources may be further partitioned up into smaller pools as discussed above. In one embodiment the creation of a new pool may also include other pools as distinct resources within the new pool. Thus pools may be created and linked recursively to further subdivide cloud system collections and the resources provided by those collections.

Referring to the process begins by determining a cloud system pool associated with a user processing block . The determination can be made in response to a client system request to a cloud system aggregation server. In one embodiment the cloud system pool is created as discussed above with respect to .

Processing logic receives a request to publish a selected pool associated with the user processing block . In one embodiment publishing a pool enables other users or client computing systems to access a subset of cloud computing resources. In one embodiment a link to the pool is then generated processing logic . In one embodiment the link is a universal resource locator URL that may be accessed by other client systems over a network and points to the pool in cloud pools database maintained at cloud system aggregation server .

Processing logic then makes the link accessible to additional users processing block . In one embodiment the link is made accessible by including the link to the pool along with links to other cloud computing resources in a user interface of user interface presenter such as individual cloud computing systems or cloud computing pools.

Referring to the process begins by receiving a request to display aggregated cloud computing system resources processing block . In one embodiment the request is received from a client system at a cloud system aggregation server.

Processing logic renders a visual summary of aggregated cloud computing system resources including tools for manipulating the visual summary processing block . In one embodiment the visual summary may include one or more cloud computing system pools. In one embodiment the visual summary may include one or more portlets as illustrated in where each portlet displays data that summarizes a different cloud computing system resource.

Dynamic elements of the visual summary are refreshed by processing logic in response to detection of updates for one or more cloud computing systems processing block . In one embodiment processing logic may query cloud computing systems for resource updates. In another embodiment processing logic may receive notifications from cloud computing systems regarding the status of resources at different cloud computing systems. In one embodiment processing logic refreshes dynamic icons displayed in the visual summary as discussed below and illustrated in . In one embodiment the dynamic icons in the visual summary display current data associated with cloud computing systems to provide a miniature overview of statistics associated with cloud computing system resources.

Processing logic updates the rendered visual summary in response to user activation of one of the tools for manipulating the visual summary processing block . In one embodiment one of the tools may be include selectable portlets as illustrated in . In response to user activation of a portlet processing logic may update the visual summary by displaying more specific data associated with a selected portlet while iconicising non selected portlets as illustrated in .

In one embodiment another tool for manipulating the visual summary may be a pivot navigator for selecting how specific cloud computing system resources are rendered in the visual summary as illustrated in . In one embodiment the pivot navigator may include multiple selectable areas as illustrated in such that data within the intersection of selected pivot points are rendered by processing logic. In one embodiment one of the pivot points may include different cloud computing system resources to be displayed such as alerts usage quotas service quality etc. In one embodiment another pivot point may include different types of visual summaries such as a summary provider type pool etc. In one embodiment processing logic utilizes the two pivot points to render updated visual summaries as selected by a user. For example illustrates a visual summary that displays a summary of instances by pools that include the instances.

In one embodiment in response to user selection of data displayed within portlet more specific information for the selection is displayed by interface presenter . In one embodiment illustrates the detailed view of selected cloud system pool selected in . Furthermore in one embodiment when a detailed view of a selected pool is displayed non selected cloud computing data is collapsed and iconicized by user interface presenter . In one embodiment in response to selection of one of the icons interface presenter updates the display to provide detailed data associated with the newly selected icon i.e. cloud computing system facets such as instance health images other pools etc. .

In another embodiment cloud computing system statistics are displayed by user interface presenter according to a pivot navigator as shown in . In one embodiment interface presenter displays two selectable areas. In response to user selection of data within each area cloud computing statistics from the intersection of the selected data are displayed by interface presenter . For example as shown in in response to user selection of instances and pool the intersection of the data is displayed by interface presenter . In one embodiment the selectable data includes what type of data is to be displayed such as a dashboard alerts quota usage pools etc. as well as how they data is to be displayed . illustrate additional embodiments of selectable data areas and respectively.

In one embodiment interface presenter renders cloud computing statistics as requested from the user selections discussed above as graphical charts as shown in . In one embodiment the graphical charts provide a detailed and dynamic view of a wide range of current statistics for cloud computing systems. In one embodiment user interface presenter further renders dynamic icons that enable additional visual representations of cloud computing system statistics. In one embodiment interface presenter renders each dynamic icon as a representational preview of the larger graphical chart such as chart associated with a dynamic icon represents. In one embodiment the icons are dynamic because they are rendered with current data to provide a current overview of the associated larger graphic representation. That is the dynamic icons are not fixed images but useful samples of current data.

In one embodiment interface presenter may further receive a request to display a new graphical chart of cloud computing system statistics as shown in . In one embodiment interface presenter receives a selection of the desired data the form in which the data is to be displayed etc. From the user selections interface presenter displays the resulting graphical illustration of the cloud computing system statistics.

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processing device implementing other instruction sets or processors implementing a combination of instruction sets. The processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute the processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a computer readable storage medium on which is stored one or more sets of instructions e.g. the cloud system aggregation server embodying any one or more of the methodologies or functions described herein. The cloud system aggregation server may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting computer readable storage media. The cloud system aggregation server may further be transmitted or received over a network via the network interface device .

While the computer readable storage medium is shown in an exemplary embodiment to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term computer readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

In the foregoing description numerous details are set forth. It will be apparent however to one of ordinary skill in the art having the benefit of this disclosure that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed description that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as receive translate transmit determine route update join create make generate or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as may be suited to the particular use contemplated.

