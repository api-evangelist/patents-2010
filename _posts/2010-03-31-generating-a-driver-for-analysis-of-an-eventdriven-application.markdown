---

title: Generating a driver for analysis of an event-driven application
abstract: In one embodiment, a method includes specifying an application-specific navigation model of an event-driven application; analyzing the navigation model with respect to one or more navigation requirements of the event-driven application to determine whether the event-driven application satisfies the navigation requirements; generating one or more drivers for the event-driven application based on the navigation model; and traversing the navigation model with the application-independent event drivers to analyze the event-driven application with respect to one or more business-logic requirements of the event-driven application to determine whether the event-driven application satisfies the business-logic requirements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08347320&OS=08347320&RS=08347320
owner: Fujitsu Limited
number: 08347320
owner_city: Kawasaki-shi
owner_country: JP
publication_date: 20100331
---
This application claims the benefit under 35 U.S.C. 119 e of U.S. Provisional Patent Application No. 61 177 908 filed 13 May 2009 which is incorporated herein by reference.

This disclosure relates generally to event driven applications such as for example graphical user interface GUI or web applications.

Quality assurance for event driven applications particularly applications with graphical user interfaces GUIs or ones designed for use in connection with the World Wide Web is increasingly important. Event driven applications are often difficult to test because they have large sets of possible user inputs. Current approaches to testing event driven applications include live subject testing capture replay unit testing crawling and model based testing. Live subject testing and capture replay approaches involve considerable manual work and require a tester to step through a set of use case scenarios while clicking on buttons or links and entering data into forms displayed through an interface such as a web browser supporting the event driven application. While event driven applications are often designed to constrain and guide a user through a set of scenarios the set of all possible user inputs may be too large for manual testing. Unit test cases are generally designed to check one user event at a time and do not adequately address the checking of sequences of user events. Crawling techniques are typically designed to visit web pages automatically. However without user guidance e.g. the specification of user inputs crawlers may be unable to visit all possible pages of an event driven application. Model based approaches generally rely on user specifications.

In particular embodiments to analyze an event driven application it may be necessary to create 1 a driver to exercise the behavior of the event driven application and 2 stubs to simulate components that the event driven application may use but are out of the scope of the analysis. For example a driver may simulate user actions with respect to the event driven application and stubs may simulate a database used by the event driven application. Particular embodiments may generate a driver for an event driven application by employing a technique that involves 1 specifying an application specific PTG that encodes information about the possible pages of the web application user events e.g. the selection of links or buttons on those pages event handlers and user data and 2 using an application independent driver to traverse the application specific PTG and generate sequences of user events allowed by the application specific PTG. This technique may facilitate the checking of navigation and business logic requirements of a web application.

Particular embodiments relate to validating web or other event driven applications that have been developed using JAVA or other suitable software platforms and that may utilize server side technologies e.g. JSP or other technologies to generate web or other pages that include Hyper Text Markup Language HTML content XML content or other embedded resources for rendering and displaying to a user at a client or other device. Particular embodiments provide a framework that facilitates the validation of navigation and business logic requirements of event driven applications using model based analysis techniques. Particular embodiments relate to a validation framework that performs validation based on a behavioral diagram graph or other model of the event driven application under test. In particular embodiments the behavioral model takes the form of a PTG model or data structure that encodes multiple nodes e.g. screens or other pages user events or transitions supported by the event driven application e.g. button clicks or clicks on links corresponding event handlers and user data. Particular embodiments use the PTG to generate drivers and use case scenarios including test sequences of one or more events that cover contemplated user interaction patterns allowed by the interface of the event driven application.

GUI and Web applications are generally open event driven systems that take sequences of events e.g. button clicks in a browser window or a GUI page or screen and produce changes in the user interface displayed to a user e.g. a transition to a different page or screen or the underlying application e.g. an online shopping cart at an online store becoming empty . To analyze an open event driven application with validation techniques it may be necessary to close the event driven application with a model of the event driven application s environment represented by components that the event driven application interacts with. Generally the environment of an event driven application under test may be grouped into drivers which use the application under test as a user interacting with the event driven application may and stubs e.g. a database component or library code which the event driven application may call.

In particular embodiments to generate a driver simulating user events the types of events and event handlers used by the event driven application must be identified. As an example and not by way of limitation the event handling mechanism of JAVA EE JAVA PLATFORM ENTERPRISE EDITION also known as J2EE applications is an example of the observer pattern where application specific event handlers register to listen for specific events. JAVA EE is a widely used platform for server programming in the JAVA programming language. The JAVA EE platform differs from the JAVA Standard Edition Platform JAVA SE in that it adds libraries which provide functionality to deploy fault tolerant distributed multi tier JAVA software based largely on modular components running on an application server. A typical JAVA EE uses HttpServletRequest and HttpServletResponse types from the javax.servlet.http package to encode incoming and outgoing events. The event handling classes usually have special event handling method e.g. perform HttpServletRequest . Registration of event handlers to events generally happens at the time of deployment of the application according to descriptor files such as for example XML configuration files.

In particular embodiments environment generator includes a driver generator that produces one or more drivers that simulate user actions or events at a front end of application . Environment generator may then combine drivers output by driver generator with stubs to generate environment . As an example and not by way of limitation some user actions may produce or result in page transitions only while other user actions may generate events that are subsequently sent to corresponding event handlers for processing for example to trigger code execution of application . To generate a driver for application driver generator may identify the types of events and event handlers or event handling classes utilized by application .

In particular embodiments driver generator generates test sequences based on the behavior model that includes a PTG data structure or PTG . In particular embodiments driver generator is configured to use the PTG that encodes information about possible pages or nodes of application and possible events or transitions supported by application along with information about the event handlers and event data for those events that require corresponding event handlers and event data. The PTG facilitates the registration of the event handlers for application and generation of sequences of events to drive the event handling code of application and exercise possible sequence of events allowed by the PTG.

In particular embodiments the PTG data structure is modeled using ECLIPSE MODELING FRAMEWORK EMF . EMF supports model specification using JAVA interfaces. As an example and not by way of limitation given JAVA interfaces EMF may automatically generate the PTG code and provide additional facilities such as writing the model in XML and loading it from XML to JAVA.

In particular embodiments the PTG may offer two levels of information 1 navigation and 2 navigation with event handling. The navigation level containing information about possible page transitions may be used to perform checking with respect to navigation requirements of application . In particular embodiments as this analysis performing validation with respect to navigation requirements of application does not require that application be a part of the model this analysis may be implemented using any suitable graph checking algorithms. As an example and not by way of limitation a set of requirement templates used to check navigation requirements of application may include reachability e.g page A is reachable from page B shortest path e.g. page A is at least N steps away from page B and precedence e.g. to visit page A a user must first go through page B .

Each requirement template may be instantiated with specific page values A and B. To increase usability particular embodiments offer possible values for A and B based on the application specific PTG used by environment generator . However this step may still require selecting specific page names from a list of pages available from or supported by application . Furthermore particular embodiments include several checks that look for possible violations without user specifications. As an example and not by way of limitation particular embodiments may include checks for possible violations in application such as presence of unreachable pages. As another example a customizable application specific checker may check whether every page available from application has a link back to the home page of the application.

In contrast to navigation requirements to check business logic requirements the underlying code of application must be checked. In particular embodiments driver generator incorporates an application independent driver based on the PTG data structure that given a populated application specific PTG data structure traverses the PTG and generates and executes sequences of user events. As described above the driver may be reused for applications associated with the same framework for which the driver was produced.

The implementation of driver and stubs collectively forming environment along with the implementation of application may be fed into validation toolkit . In particular embodiments validation toolkit employs the JPF model checker to check the business logic requirements of application . In particular embodiments validation toolkit also utilizes one or more JPF extensions to enable analysis of event driven applications. Particular embodiments utilize the JPF listener framework to implement listeners that support requirement specification based on temporal logic.

In particular embodiments driver generator may include a driver suitable for validating a STRUTS based web applications. As an example and not by way of limitation such Struts based Web applications may encode their page transitions using XML HTML and JSP. In particular embodiments the application PTG may be specified in XML. In particular embodiments driver generator may include one or more extensions for generating drivers for STRUTS based applications. More specifically particular embodiments include extensions of the PTG data structure and driver for use with STRUTS based web applications.

In STRUTS the controller is represented by the STRUTS servlet controller which intercepts incoming user requests and sends these requests to appropriate event handlers according to action mappings specified in for example an XML descriptor file called struts config.xml. In Struts the request handling classes are subclassed from org.apache.struts.action.Action and the event handling method is called execute . Actions encapsulate calls to business logic classes interpret the outcome and dispatch control to the appropriate view component to generate the response. Form population is supported by the ActionForm class which facilitates the storing and validating of user data.

In particular embodiments PTG can be specified based on existing navigation models e.g. in UML or application implementation using three sources 1 information from JSP files 2 information from XML configuration files and 3 information from class e.g. JAVA class files that encode Actions and Forms of the application under test.

To demonstrate the technique of specifying the PTG consider a registration example. The registration example allows users to register and login to their accounts followed by a logout. This example has six JSP pages index.jsp the initial page welcome.jsp userlogin.jsp loginsuccess.jsp userRegister.jsp and registerSuccess.jsp. Each JSP page corresponds to a node in the PTG therefore the PTG for this example contains at least six nodes. Each page contains information about possible user events. illustrates an example code excerpt from an example JSP file relevant to population of the PTG for the registration example. The welcome page welcome.jsp contains links back to itself to userRegister.jsp and userlogin.jsp and the userlogin.jsp page contains a reference to a userlogin action. To resolve the meaning of this action particular embodiments may need to consult one or more XML configuration files.

STRUTS XML configuration files may contain mappings from user actions to their source page the Action class that processes them the Form class that holds user data and possible destination pages. illustrates an example code excerpt from an example struts config.xml file that provides an action mapping for the UserLoginAction. In UserLoginAction specifies the event handler type UserLoginForm specifies the event is responds to and userlogin.jsp specifies the page this event is available on. The outcome of the event depends on whether the event handling code returns for example success or failure. In the case of success the next page is loginsuccess.jsp while in the case of failure the next page is userlogin.jsp.

The PTG analysis of the application with respect to navigation requirements requires no extensions for STRUTS based web applications. In particular embodiments the PTG based analysis of the application may require overriding the event handling methods of the driver to confirm to STRUTS event handling APIs. illustrates example driver extensions for example STRUTS specific event handling APIs. The extensions are code excerpts from a driver produced for STRUTS based web applications needed to override event handling methods to account for the STRUTS specific event handling APIs. In particular embodiments the driver generation and its extensions for STRUTS based web applications may be implemented using JAVA.

This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system taking any suitable physical form. As example and not by way of limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC e.g. a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Where appropriate computer system may include one or more computer systems be unitary or distributed span multiple locations span multiple machines or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more computer systems may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation one or more computer systems may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein where appropriate.

In particular embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In particular embodiments processor may include one or more internal caches for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. As an example and not by way of limitation processor may include one or more instruction caches one or more data caches and one or more translation lookaside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. As an example and not by way of limitation computer system may load instructions from storage or another source e.g. another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In particular embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate Where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. The present disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. As an example and not by way of limitation storage may include an HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to computer system where appropriate. In particular embodiments storage is non volatile solid state memory. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Where appropriate storage may include one or more storages . Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. Computer system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and computer system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touchscreen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication e.g. packet based communication between computer system and one or more other computer systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation computer system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example computer system may communicate with a wireless PAN WPAN e.g. a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network e.g. a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Computer system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In particular embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCI X bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

Herein reference to a computer readable storage medium encompasses one or more tangible computer readable storage media possessing structure. As an example and not by way of limitation a computer readable storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk an HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a SECURE DIGITAL card a SECURE DIGITAL drive or another suitable computer readable storage medium or a combination of two or more of these where appropriate. Herein reference to a computer readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. 101. Herein reference to a computer readable storage medium excludes transitory forms of signal transmission such as a propagating electrical or electromagnetic signal per se to the extent that they are not eligible for patent protection under 35 U.S.C. 101.

This disclosure contemplates one or more computer readable storage media implementing any suitable storage. In particular embodiments a computer readable storage medium implements one or more portions of processor e.g. one or more internal registers or caches one or more portions of memory one or more portions of storage or a combination of these where appropriate. In particular embodiments a computer readable storage medium implements RAM or ROM. In particular embodiments a computer readable storage medium implements volatile or persistent memory. In particular embodiments one or more computer readable storage media embody software. Herein reference to software may encompass one or more applications bytecode one or more computer programs one or more executables one or more instructions logic machine code one or more scripts or source code and vice versa where appropriate. In particular embodiments software includes one or more application programming interfaces APIs . This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments software is expressed as source code or object code. In particular embodiments software is expressed in a higher level programming language such as for example C Perl or a suitable extension thereof. In particular embodiments software is expressed in a lower level programming language such as assembly language or machine code . In particular embodiments software is expressed in JAVA. In particular embodiments software is expressed in Hyper Text Markup Language HTML Extensible Markup Language XML or other suitable markup language.

The present disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly where appropriate the appended claims encompass all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend.

