---

title: Application programming interface (API) router implementation and method
abstract: An application programming interface (API) implementation that can interface between an application and a programming library. The implementation includes a Function Router Wrapper that receives a formatted string from the application. The formatted string includes a function name element filled with a function name, an input element filled with function input parameters, and an unfilled output element. The Function Router Wrapper converts the formatted string and passes it to a Function Router, which parses the converted formatted string to access the function name and the function input parameters. The Function Router calls a library function based on the accessed information. When the called library function is completed, the Function Router collects generated function outputs and embeds them into the formatted string output element. The Function Router passes the formatted string back up to the Function Router Wrapper, which converts the formatted string and passes it back up to the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08429624&OS=08429624&RS=08429624
owner: LSI Corporation
number: 08429624
owner_city: Milpitas
owner_country: US
publication_date: 20100817
---
The invention relates to application programming interfaces APIs . More particularly the invention relates to language independent API implementations and methods.

Within a computer system an application or application software typically is software meant to perform a specific task for the computer user. Also within a computer system a programming library includes a collection of functions that are useful in the development and execution of the application software. Conventionally programming libraries provide access to their functions via an Application Program Interface API and through API calls or functions calls that accept various input parameters in the correct syntax for the language in which the API is written. However such approach to accessing library functions does not allow relatively easy cross language usage e.g. an application written in a first programming language and a library written in a second programming language. In such cases different interpreters and possibly other computer system components must be used to convert one language s data structures to another language s data structures. Such process can be relatively error prone and time consuming. Also depending on the complexity of the library the number of functions for the API could be relatively large which increases the difficulty of building the interpreters.

Conventional programming libraries are written to targeted languages and in a manner that performs the needed functions for the particular application. However when another language needs to attach to the particular programming library the new or other language uses existing tools provided with the language or uses external tools to wrap around the library. SWIG Simplified Wrapper and Interface Generator and JNI Java Native Interface are examples of inter language communication software development tools that connect programs written in a first lower level programming language to a second higher level programming language. However beyond providing access to the functions and data in the other language such inter language communication tools do not offer much in terms of providing relatively easy cross language usage.

Conventional solutions for the difficulties of cross language usage typically only ease the process of creating an inter language communication tool which still is troublesome. Depending on the size of the API the task of communicating across different programming languages could be from a few functions and data classes to a few hundred or more functions and data classes. As the size of the API grows so does the time required to build the interface between the application and the library as well as the overall complexity of the interface. Also different versions of data structures or functions may exist which compounds the existing difficulties. Using conventional methods an inter language interface becomes essentially a rewrite of the external API to properly convert all data types and functions to a usable version in the programming language of the application.

Conventional approaches can be further complicated when modifications are made to the API. When a modification to the API occurs programming developers must also change the interface and the application to accommodate the API modification. Furthermore given the relatively complex nature of many conventional interfaces API modification can result in the introduction of inadvertent bugs into the interface layer by programming developers. Depending on the scope of the modification the amount of work could be reduced by a relatively significant amount if the interface used a language independent communication scheme.

The invention is embodied in a language independent application programming interface API implementation that can interface between an application application software and a library programming library . The implementation includes a Function Router Wrapper that receives from the application a formatted string such as a string formatted in an XML based format. The formatted string includes a function name element filled with a function name an input element filled with one or more function input parameters and an unfilled output element. The Function Router Wrapper converts the received formatted string and passes the converted formatted string to a Function Router. The Function Router which can be part of the programming library parses the converted formatted string to identify and access the function name from the function name element and the function input parameters from the input element. Based on the identified function name and function input parameters the Function Router calls a library function from the programming library. When the performance of the called library function has been completed the Function Router collects one or more function outputs generated by the called library function. The Function Router then embeds the collected function outputs into the output element of the formatted string and passes the resulting formatted string back to the Function Router Wrapper. The Function Router Wrapper converts the formatted string if necessary and passes the resulting formatted string back to the application.

The language independent API implementation provides a method to produce a working interface between computing elements having different languages in a reduced time frame compared to conventional interface implementations. The inventive language independent API implementation uses a single API call that accepts two standard strings for input and output elements. Accordingly one advantage of the inventive implementation is the reduction in the number of changes that potentially need to be made for an API modification. Also the overall complexity or the code is reduced. These advantages and other advantages typically result in reduced development time for the building of the working interface.

In the following description like reference numerals indicate like components to enhance the understanding of the invention through the description of the drawings. Also although specific features configurations and arrangements are discussed hereinbelow it should be understood that such is done for illustrative purposes only. A person skilled in the relevant art will recognize that other steps configurations and arrangements are useful without departing from the spirit and scope of the invention.

As used in this description the terms component module and system are intended to refer to a computer related entity either hardware firmware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a computing device and the computing device may be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers. In addition these components may execute from various computer readable media having various data structures stored thereon. The components may communicate by way of local and or remote processes such as in accordance with a signal having one or more data packets e.g. data from one component interacting with another component in a local system distributed system and or across a network such as the Internet with other systems by way of the signal.

Referring now to shown is a schematic view of an Application Program Interface API interface implementation according to a conventional arrangement or configuration e.g. a conventional API implementation between an application and a library. In this conventional implementation the API implementation uses inter language communication software development tools such as SWIG Simplified Wrapper and Interface Generator or JNI Java Native Interface to connect programs written in a first lower level programming language such as the programming language of the library to a second higher level programming language such as the programming language of the application.

The conventional API implementation includes an API interface coupled between an application and a programming library . The API interface typically is a plurality of wrappers such as Wrapper through Wrapper that are developed from an inter language communication software development tool such as SWIG or JNI. In this manner the application interfaces with the library via the wrappers e.g. via SWIG wrappers or JNI wrappers.

The application can be any suitable application that is supported by the particular language of the wrappers . For example the application can be a Perl application a Java application or other suitable application or application software supported by the wrappers . The library which can be any suitable programming library such as a C or C programming library has a plurality of functions such as such as Function through Function that collectively act as an API for the library to the application via the wrappers .

As discussed hereinabove when the application and the library are not written in the same the same programming language but the application needs to attach to the particular programming library the application uses SWIG JNI or other suitable tool to wrap around the library . More specifically the wrappers convert function calls from the native language of the application to the native language of the library . According to this conventional implementation each function in the library requires its own unique wrapper to translate the inputs and output of the particular function from the native language of the application to the native language of the library . As part of a conventional API call from the application to the library the information from the application to one of the wrappers e.g. Wrapper typically has the following format Application output Wrapper input . Also the information from the Wrapper to one of the functions e.g. Function typically has the following format Wrapper output Function input . Therefore conventionally adjustments to the wrappers need to be made each and every time one or more functions of the API of the library changes.

According to embodiments of the invention implementing a library is done with a single API wrapper or function i.e. a Function Router Wrapper FRW rather than a plurality of wrappers. The Function Router Wrapper FRW which is associated with a Function Router added to the library is configured to accept an XML XML based or other suitably formatted input and output. As is known Extensible Markup Language XML is a document encoding standard for providing information on the Internet.

The XML or XML based input to the Function Router Wrapper from the application contains the internal API function or the external API function that a program written in the same language would call along with any parameters that may be required. If versioning is needed e.g. for different versions of data structures and or functions a version or other appropriate version information can be passed in as well. The Function Router Wrapper converts the input information to a standard string format such as ASCII Unicode or MIME Multipurpose Internet Mail Extensions . The XML or XML based output received by the Function Router Wrapper from the library is similar to the input in that the output contains output information converted to the standard string format of choice and any version information if required . Because the input output format is XML or in an XML based or other suitable format data structures in the language of the application and data structures in the language of the library can be represented in an XML or XML based format relatively easily.

According to embodiments of the invention the Function Router Wrapper can coexist with conventional API functions. For example the Function Router Wrapper can be used as the interface for an application to a library of a different language but other API functions still can exist for applications that are written in the same language as the language of the library. Also the Function Router Wrapper still can involve the use of appropriate language interfaces e.g. SWIG or JNI however such use has been reduced to a single API function call with a standard string as the input and the output. Thus the development time required to produce the Function Router Wrapper is relatively minimal compared to interface development times of conventional implementations.

Referring now to shown is a schematic view of an API interface implementation according to embodiments of the invention. For example the API interface implementation involves interfacing between an application or application software and a programming library. The API interface implementation includes a Function Router Wrapper which can be coupled between an application and a library or programming library . As discussed hereinabove the application can be a Perl application a Java application or any other suitable application. Also the library can be any suitable programming library such as a C or C programming library.

The library includes a plurality of functions such as Function through Function that otherwise collectively act as an API to the application and other applications. However according to embodiments of the invention the library has added thereto a Function Router which as will be discussed in greater detail below becomes the sole API or interface for the library e.g. the API or interface between the library and the application . In this manner instead of using a plurality of individual function wrappers as in conventional implementations the API interface implementation according to embodiments of the invention uses a single wrapper i.e. the Function Router Wrapper and its association with the Function Router as the interface between the application and the library .

In operation as part of an API call or function call from the application to the library the application passes a formatted string to the Function Router Wrapper . As discussed hereinabove the formatted string can be XML or XML based string or other suitably formatted string. Although the use of XML or an XML based format for formatting the formatted string is not mandatory the formatted string should be built in such a way as to associate data with purpose. That is a context should be stored with the data so that when the data is passed via the formatted string the Function Router can understand what the data corresponds to by breaking down the structure into the appropriate language s binary structure.

The formatted string minimally contains elements for the call function s name the function s inputs and a function s output. The function name element of the function and the input element of the function are filled in by the application . The output element of the function is filled in by the Function Router as will be discussed in greater detail hereinbelow. Therefore the formatted string passed from the application to the Function Router Wrapper includes a function name element filled with a function name an input element filled with one or more function input parameters and an unfilled output element. The formatted string passed from the application to the Function Router Wrapper can have the following format Application XML string where is the function name element is the input element and is the output element. However such format is not always necessary. For example if a particular function does not require an input and there is no output the formatted string passed from the application to the Function Router Wrapper can have the following format Application XML string .

According to embodiments of the invention the Function Router Wrapper accepts a formatted string received from the application performs any string conversions that may be needed for communication between the language of the application and the language of the library and passes the converted formatted string to the Function Router . In this manner the Function Router Wrapper accepts a formatted string from the application and provides the means for the application to direct the function call to the Function Router . The converted formatted string passed from the Function Router Wrapper to the Function Router has the following format Wrapper XML string where is the function name element is the input element and is the output element. Also as discussed in greater detail hereinbelow according to embodiments of the invention the Function Router Wrapper passes formatted strings received from the Function Router back to the application .

The Function Router Wrapper does not have any other primary purposes. The Function Router Wrapper is a generic wrapper and the Function Router Wrapper typically does not care about what information is in the formatted string that the Function Router Wrapper is passing between the application and the Function Router . As just described the Function Router Wrapper gets a suitably formatted string from the application performs any necessary string conversions and passes the converted formatted string to the Function Router . As will be discussed in greater detail hereinbelow the Function Router collects outputs from the called library function fills in the output element of the formatted string with the appropriate output element information and then passes the formatted string back to the Function Router Wrapper . The Function Router Wrapper passes the formatted string received from the Function Router back up to the application . Therefore as discussed the Function Router Wrapper does what is required for the application to send and receive a block of data to the particular function call of the library .

According to embodiments of the invention the Function Router typically is part of library e.g. the Function Router is added to the library . As the sole interface or API for the library the Function Router performs the interfacing operations between the library and any non library applications such as the application . Accordingly the Function Router is configured appropriately to perform these functions. Also as discussed hereinabove the Function Router Wrapper is a generic wrapper and does not care about what information is in the formatted strings passing between the application and the Function Router . Thus any changes that might be made to the API of the library i.e. the Function Router are not reflected in the Function Router Wrapper .

Referring now to shown is a block diagram of an API interfacing method according to embodiments of the invention. That is the method includes steps performed by the Function Router .

The method includes a step of receiving a converted formatted string. The Function Router is appropriately configured to receive a converted formatted string from the Function Router Wrapper . As discussed hereinabove the Function Router Wrapper receives a formatted string form the application and converts the formatted string appropriately before passing the converted formatted string to the Function Router . As discussed hereinabove the converted formatted string passed from the Function Router Wrapper to the Function Router can have the following format Wrapper XML string where is the function name element is the input element and is the output element.

The method also includes a step of parsing the converted formatted string. Once the Function Router receives the converted formatted string from the Function Router Wrapper the Function Router parses the string to separate identify and provide access to the information in the various elements of the formatted string e.g. the information in the function name element and the input element. Parsing also performs the necessary formatting and conversion. The Function Router is configured to parse the converted formatted string in any suitable manner that separates identifies and provides suitable access to the information in the converted formatted string.

The method also includes a step of calling an appropriate library function. Once the Function Router parses the converted formatted string the Function Router calls the appropriate library function e.g. one of the library functions Function through Function based on the information accessed from the function name element portion of the formatted string. The Function Router also supplies the function s input element information which the Function Router accessed as part of the string parsing step . For example the information from the Function Router to the called function has the following format Function Router .

The method also includes a step of collecting library function outputs. When the library function called by the Function Router is performed one or more function outputs are generated by the particular library function. Once the called library function is performed the Function Router collects the function outputs that are generated by the called library function.

The method also includes a step of embedding library function outputs into the formatted string. Once the function outputs from the called library function are collected by the Function Router the Function Router embeds or fills in the collected function outputs into the output element portion of the formatted string. Like the information from the Function Router to the called function the information sent back from the called function to the Function Router has the following format Function Router .

The method also includes a step of passing the formatted string. Once the embedding step is performed and the function outputs from the called library function are embedded or filled into the output element portion of the formatted string the Function Router passes the formatted string back to the Function Router Wrapper . As discussed hereinabove the Function Router Wrapper passes the formatted string received from the Function Router back up to the application . The formatted string passed from the Function Router to the Function Router Wrapper and ultimately to the application has its output element filled with one or more generated outputs from the called library function.

As discussed hereinabove the Function Router typically is part of the library or alternatively coupled to the library . Specifically the Function Router is the part of the library that interfaces with the Function Router Wrapper . The input output interface i.e. API between the Function Router and the Function Router Wrapper remains constant. Therefore any changes to other APIs within the library are reflected in changes internal to the Function Router but are not exposed to the Function Router Wrapper . Hence according to embodiments of the invention any API changes remain isolated within the library .

The following is an example API call from the application to the library via the API interface implementation according to embodiments of the invention 

The following is an example API return to the application via the API interface implementation according to embodiments of the invention 

Certain steps in the processes or process flows described in this specification naturally precede others for the invention to function as described. However the invention is not limited to the order of the steps described if such order or sequence does not alter the functionality of the invention. That is it is recognized that some steps may performed before after or parallel substantially simultaneously with other steps without departing from the scope and spirit of the invention. In some instances certain steps may be omitted or not performed without departing from the invention. Further words such as thereafter then next and other similar words are not intended to limit the order of the steps. These words simply are used to guide the reader through the description of the exemplary method. Also one of ordinary skill in programming will be able to write computer code or identify appropriate hardware and or circuits to implement the disclosed invention without difficulty based on the flow charts and associated description in this specification. Therefore disclosure of a particular set of program code instructions or detailed hardware devices is not considered necessary for an adequate understanding of how to make and use the invention. The inventive functionality of the claimed computer implemented processes is explained in more detail in the above description and in conjunction with the Figures which may illustrate various process flows.

Referring now to shown is a block diagram of a computing device or system for performing the API interfacing methods according to embodiments of the invention. The computing system can be partially or completely any suitable device or subsystem or portion thereof for receiving storing processing and or transmitting data.

The computing system includes a controller or processor and a data storage element or memory device coupled to the processor . In general the processor processes data and other information received and or generated by the computing system . The processor can be central processing unit CPU that includes any digital processing device such as a microprocessor finite state machine FSM digital signal processor DSP application specific integrated circuit ASIC and or general purpose computer. In addition to the computing device having the data memory device the processor can include at least one type of memory or memory unit not shown and a storage unit or data storage unit coupled to the processor for storing processing instructions and or information received and or created by the computing system . Within the computing system device the memory element stores all or a portion of at least one of the application the Function Router Wrapper and the library including the Function Router .

The computing system also can include one or more input and or output interfaces for receiving and or transmitting data. For example the processor and other components in the computing system can be coupled between a receive interface and a transmit interface . It should be understood that one or more of the interfaces can be a single input output interface e.g. transceiver coupled to the processor and or other components in the computing system .

One or more of the processor the memory element and the interfaces can be comprised partially or completely of any suitable structure or arrangement e.g. one or more integrated circuits. Also it should be understood that the computing system includes other components hardware and software not shown that are used for the operation of other features and functions of the computing system not specifically described herein.

The computing system can be partially or completely configured in the form of hardware circuitry and or other hardware components within a larger device or group of components. Alternatively the computing system can be partially or completely configured in the form of software e.g. as processing instructions and or one or more sets of logic or computer code. In such configuration the logic or processing instructions typically are stored in a data storage device e.g. the memory element or other suitable data storage device not shown . The data storage device typically is coupled to a processor or controller e.g. the processor . The processor accesses the necessary instructions from the data storage device and executes the instructions or transfers the instructions to the appropriate location within the computing system .

In one or more aspects the functions described may be implemented in hardware software firmware or any combination thereof. If implemented in software the functions may be stored on or transmitted as one or more instructions or code on a computer readable medium. Computer readable media include both computer storage media and communication media including any medium that facilitates transfer of a computer program from one place to another. A storage media may be any available media that may be accessed by a computer. By way of example and not limitation such computer readable media may comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that may be used to carry or store desired program code in the form of instructions or data structures and that may be accessed by a computer.

It will be apparent to those skilled in the art that many changes and substitutions can be made to the embodiments of the invention herein described without departing from the spirit and scope of the invention as defined by the appended claims and their full scope of equivalents.

