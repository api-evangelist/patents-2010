---

title: Method and system for recording operations in a web application
abstract: Collecting log data efficiently by controlling the capturing event for an operation log on the basis of application layer information. A web server generates a response including an operation log capturing script and the information from an operation log capturing control definition table and a property capturing definition table, and sends the response to a client. In the client, the received information is forwarded from a web browser module to a script engine module. An operation log capturing module sets the information acquisition event handler on the basis of the forwarded information, captures a sequential operation log on the basis of the operations performed by a user in the web browser, and sends the captured sequential operation log to a log server. A log server module collects sequential operation log in an operation log table, and a log analysis module analyzes the collected logs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08966502&OS=08966502&RS=08966502
owner: Hitachi, Ltd.
number: 08966502
owner_city: Tokyo
owner_country: JP
publication_date: 20100901
---
The present invention relates to a computer system including a client on which a web browser operates and a server device on which a web application operates and particularly to a technique in which the operation in web browser by a user who uses a web application is recorded according to the attribute of the user.

With the popularization of broadband a variety of servers has been provided with the use of web systems. The construction of a web system can be provided by all of companies because of a price reduction in hardware web server systems and package products for service construction. The web application provides not only conventional static screens but also dynamic screens with the use of a dynamic HTML hypertext markup language technique or an Ajax asynchronous JavaScript extensible markup language XML technique to improve usability thus advancing to a trend of differentiation.

On the other hand distinctive adverse effects of online service arise. When a service is provided face to face how to deal with a client can be changed according to a response of the client. However in the case of online service it is difficult to look directly at a face of the client thereby making it difficult to grasp the response of the client. For that reason it is difficult to provide a detailed service according to the response of the client.

On the contrary a technique is disclosed in which the operation of a mouse or a keyboard by the user on the web browser is recorded to grasp a usage status of the service Patent Literature 3 . In the technique of Patent Literature 3 the operation of the mouse and the keyboard of the user on the web browser is recorded and a script program to be sent to a server is inserted into a response of the web application. In this case the response represents data for screen creation of the web application and is described by an HTML language or the like. The inserted script program is deciphered and executed by a script execution engine of the web browser traps the operation of the mouse and the keyboard by the user on the browser and records the captured operation as an operation log. A service provider collects and analyzes an operation log so as to grasp where the user has clicked a web page and where the user has read the web page. Thus the service provider can investigate a response of the client to the online service and establish an improvement.

As other related arts several techniques for capturing a screen of the web application that is information from an HTML have been disclosed. As a method of representing a area of a document described in a markup language such as the HTML is an XPath XML Path Language disclosed in Nonpatent Literature 2 has been widely used. There has been widely used a method of representing the area with the use of the XPath and capturing information from the screen of the web application with the use of an execution engine of the XPath. Also a method of defining an information extraction rule and extracting information by focusing on a table and a list structure of the HTML has been disclosed in Patent Literature 1. Further a technique in which a script code for recording processing within a client is inserted into a response from the web server in advance to save the record of the processing of the client has been disclosed in Patent Literature 2. A technique of grasping the usage status of the service disclosed above is frequently provided in the configuration of an SaaS software as a service or by the existing application in the form of add on.

In an online business in order to differentiate one company from other companies there is a need to precisely analyze the usage status of the online service. For example there are needs for capturing and analyzing the detailed operation log of the user satisfying specific conditions. As one example of the conditions there is a case in which the user who puts goods in a shopping cart is to be analyzed in detail with the inclusion of a mouse moving line. This is effective in the analysis on the hypothesis that the user places a mouse cursor over a portion in which the user is interested.

In a usage status visualization technique of the web system representative of Patent literature 3 for the above needs recording of clicking of buttons or links on the screen or keyboard input to forms are not problematic in the number of logs. However if the fine motion of the mouse is also taken the number of operation logs becomes enormous and it is difficult to collect the operation logs of all the users.

Accordingly there is a need to control the acquisition of the operation log such that the operation log of only the users satisfying specific conditions is captured in detail. However in the related art semantics at an application level of the HTML are not understood and information at the application level such as the user who puts the goods in the shopping cart cannot be recognized and it is difficult to control the presence or absence of the operation log acquisition and the level of detail on the basis of the above information.

In the above description it is conceivable that profile information on the user is captured from a screen of the web application and used for determination of the specific conditions with the use of Nonpatent Literature 1 or Patent Literature 1. However it is difficult to extract the profile information from the web application in which information within a page is dynamically changed such as the web application using the dynamic HTML technique or the Ajax technique. This is because the above conventional art can designate a area of the profile information but cannot directly designate a timing at which the profile information is captured. For that reason when the page is dynamically rewritten the profile information cannot be captured and the control of the operation log acquisition based on the profile information cannot be also conducted.

From the viewpoints of the above mentioned problems one object of the present invention is to provide a method and system for recording operation in the web application which can capture profile information on a user from a screen of a web application and control a capturing event of the operation log on the basis of that information in a method of recording an operation log of the web application.

Also another object of the present invention is to provide a method and system for recording operation which can control the capturing event of the operation log even in a web application in which a page is dynamically rewritten as a result of which an capturing event of the operation log can be controlled on the basis of information on an application layer and information for improving the application layer can be effectively collected and analyzed.

That is in order to achieve the above object according to the present invention there is provided a method of recording operation in a web application which records an operation log on a web page by a computer having a processing unit in which a property acquisition definition rule for capturing information from the web page and a log capturing control definition rule for controlling a recording range of the operation log on the basis of the captured information are provided and the processing unit executes the steps of setting an information acquisition event handler of the web page on the basis of the property acquisition definition rule capturing information from the web page by the information acquisition event handler controlling the recording range of the operation log on the web page on the basis of the captured information and the log capturing control definition rule and recording the operation log.

Also in order to achieve the above object according to the present invention there is provided a system for recording operation in a web application which records an operation log on a web page by a client having a storage unit and a processing unit in which a property acquisition definition rule for capturing information from the web page and a log capturing control definition rule for controlling a recording range of the operation log on the basis of the captured information are stored in the storage unit and the processing unit sets an information acquisition event handler of the web page on the basis of the property acquisition definition rule captures information from the web page by the information acquisition event handler and controls the recording range of the operation log on the web page on the basis of the captured information and the log capturing control definition rule.

According to the present invention the capturing event of the operation log can be controlled on the basis of the information on the application layer in the web application in which the page is dynamically changed and the information for improving the web application can be efficiently collected and analyzed.

Hereinafter a variety of embodiments according to the present invention will be described with reference to the drawings. It should be noted that in the present specification respective programs to be executed by a processor unit which is a processing unit in a computer system may be expressed as modules or units .

The computer system illustrated in includes one or more two in of the clients at least one one in of the web server and at least one one in of the log server . The clients the web server and the log server are connected to each other through a network . The web server and the log server may be physically mounted on the same device. For that reason in the present specification processor units and memories of the respective devices and further the clients may be generically called processing unit or storage unit .

The client illustrated in is a computer that uses a web application provided by the web server . The client includes an I O device a processor unit that configures a processing unit a network interface and a memory that configures a storage unit.

The I O device is an input device for example such as a keyboard or a mouse which provides a user interface and an output device for example such as a display device. The processor unit executes a web browser program and a script engine program which are stored in the memory and an operating system operation system OS not shown. The network interface is a communication network for allowing the client to communicate data through the network . The memory stores programs to be executed by the processor unit and data to be used by those programs therein. The client may further include an external storage device configuring a storage unit not shown.

The web server illustrated in is a computer that provides the client with a service of applications. The web server includes a network interface a processor unit an I O device a local storage and a memory .

The network interface is a communication network for allowing the web server to communicate data through the network . The processor unit executes a web server program a web application program and a module code injection program which are stored in the memory . The detailed operation of the respective programs will be described later.

The local storage is a storage device configured by a magnetic disc device or a nonvolatile semiconductor memory and stores a operation log capturing control definition table that controls an operation log capturing event and a property capturing definition table that captures attribute information on the user of the web application program therein. The local storage may be loaded into the web server or be an external storage device disposed on an external of the web server . The detailed configurations of the respective tables will be described later.

The I O device is an input device for example such as a keyboard or a mouse which provides a user interface and an output device for example such as a display device. The web server may not provide the I O device . In this case the web server is operated by the client or a console terminal not shown. The memory stores programs to be executed by the processor unit and data to be used by those programs therein.

The log server illustrated in collects and analyzes the operation log of the user in the web application that operates on the web browser of the client . The log server includes a network interface a processor unit an I O device a local storage and a memory .

The network interface is a communication interface for allowing the log server to communicate data through the network . The processor unit executes a log server program and a log analysis program which are stored in the memory . The log analysis program is a storage device configured by a magnetic disc device or a nonvolatile semiconductor memory and stores an operation log table therein. The local storage may be loaded into the log server or be an external storage device disposed on an external of the log server . The operation of the respective programs and the detailed configurations of the respective tables will be described later.

The I O device is an input device for example such as a keyboard or a mouse which provides a user interface and an output device for example such as a display device. The log analysis server device may not provide the I O device . In this case the log analysis server device is operated by the client or a console terminal not shown. The memory stores programs to be executed by the processor unit and data to be used by those programs therein.

The operation log capturing control definition table illustrated in manages information for controlling a range of the user operation captured by an operation log capturing code . In the operation log capturing control definition table a condition expression that defines the condition of the user attribute and a capturing event that defines the operation log capturing event of the user which meets that condition are managed in association with each other.

The property capturing definition table illustrated in manages definition information for capturing the attribute of the user from a screen generated by the web application. In the property capturing definition table a property name that is an identifier for describing the captured attribute in the condition expression of the operation log capturing control definition table a source url indicative of an URL of a page from which the attribute is captured an extract expression that is indicative of where the attribute is included within the page that is designates an arbitrary area on the web page and a change target which is information on an change target and a capturing timing which is a timing for capturing the designated area as information for defining an moment of extract are managed in association with each other. In this embodiment XPath expression is used as the extract expression. However any extract expression may be used if the extract expression can define an arbitrary area within the page. For example a regular expression can be used.

First upon accepting the operation of the user for the web browser a web browser module sends a request corresponding to the operation of the user to a web server module . The request is sent in conformity to an HTTP hyper text transfer protocol or an HTTPS hyper text transfer protocol over secure socket layer . The protocol of the request is exemplified by the HTTP or the HTTPS but not limited to those protocols.

Upon receiving the request the web server module makes a request for processing to a web application corresponding to the received request . The web application executes processing corresponding to the request to generate a response and forwards the generated response to a module code injection module . The module code injection module extracts an operation log capturing module the operation log capturing control definition table and the property capturing definition table from the local storage according to the forwarded response to . Then the module code injection module generates a response in which the extracted contents are embedded and sends the generated response to the web browser module . Processing for embedding the operation log capturing module is realized with the use of a filtering function of the response provided in the web server such as a ServletFilter function of a J2EE Java 2 Enterprise Edition Java is a registered trademark or an ISAPI internet server application programming interface filter function of an IIS internet information services . In this embodiment the operation log capturing module is dynamically embedded by the module code injection module . Alternatively the operation log capturing module may be embedded in the web application with no use of the module code injection module in advance.

The operation log capturing module may be embedded with the use of a proxy server device making an HTTP communication intermediating between the clients and the web server. The proxy server device can be configured by any system of a forward proxy located on the client side and a reverse proxy located on the server device side.

Upon receiving the response from the module code injection module the web browser module deciphers the HTML hyper text markup language data in the received response and displays the data on the web browser. Also the web browser module forwards the operation log capturing module embedded in the response to a script engine module . Thereafter after the operation log capturing module has executed the initialization of an operation log capturing event handler and an attribute information capturing event handler the operation log capturing module sequentially captures the user operation on the web browser of the client as the operation log. In this example the operation log capturing event handler is an event handler function for trapping and recording the user operation on the web browser. Also the attribute information capturing event handler is an event handler function for capturing the attribute information of the user from response information of the web application. The details will be described later.

If page movement occurs in the web browser the operation log capturing module sends an operation log recorded by the operation log capturing module to a log server module of the log server . The page movement may be associated with a communication through the network or may not be associated therewith. The latter case not associated with the communication is when the page is rewritten on the web browser side with the use of a DOM document object model or JavaScript registered trademark technique. The operation log transmission at the timing of the page movement is exemplary and the operation log may be sent at another timing for example at regular time intervals or for each given amount of operation log.

After receiving the operation log from the operation log capturing module the log server module sequentially stores the received operation log in the operation log table .

A log analysis module analyzes the user operation on the basis of data stored in the operation log table and generates visualization data. The processing of the log analysis module is executed by an instruction from a manager user or batch processing at an arbitrary timing.

Each of the operation log includes a page ID which is an identifier of the page on which the operation log is recorded an time of operation which is a time at which the user operates on the page specified by the page ID an operation target such as an object name which is an object to be operated by the user kind of operations such as mousing clicking or inputting which are contents of the operation of the user a selected value which is a result of the operation of the user and an operation result such as an input value. Thus a plurality of operation logs is saved in the operation log table . In the user operation on the page the operation status within the page has only to be analyzed and all of the items do not always need to be recorded. For example when attention is paid to only the number of clicks the click has only to be recorded as the kind of operation.

The log analysis module includes a user operation analysis module and a visualization data generation module . The user operation analysis module analyzes the operation of the user such as a travel of the mouse the click of the mouse or an input to the Form on the web browser for each page. The visualization data generation module generates and outputs the visualization data of the analysis result by the user operation analysis module . In this case output represents generation of data to be output in the form of a table or to be displayed in an overlay display format on the screen of the web application.

First in the web browser module sends a page request of the web page to the web server S . Upon receiving the page request from the client S the web server module invokes the web application responsive to the page request S . Then the web application executes processing in response to the page request received in Step S to generate a response and forwards the generated response to the module code injection module S .

Thereafter the module code injection module inserts the operation log capturing module information on the operation log capturing control definition table and information on the property capturing definition table into the forwarded response S . In this example in the information of the property capturing definition table to be inserted only the record in which the request URL included in the page request from the client meets the source url is inserted.

The processing in Step S can be realized by using a filtering function of the response provided in the web server such as the above mentioned ServletFilter of J2EE. The processing from Step to Step may be inserted into the response by using the proxy device in addition to a case using the filtering function of the response provided in the web server .

Upon receiving the response from the web server S the web browser module calls the script engine module and initializes the operation log capturing module S . Also in the initialization process in Step S the web browser module sets the operation log capturing event handler that monitors the event of the operation of the user on the web browser module . The initialization process S of the operation log capturing module will be described in detail later.

Subsequently the operation log capturing module captures the operation of the user on the web browser module as the log data of operation and appends the log data to a primarily recorded array on the web browser module S . The processing in Step S is repeated until the event of the page movement occurs S .

If the event of the page movement occurs yes in S the operation log capturing module sends the page ID and the operation log to the log server S . The processing from the above Step S to Step by the client is continued until the web application that operates on the client is finished S .

In this embodiment the operation logs are put together on the page basis and the put together logs are sent to the log server . Alternatively the log may be sent every time the log is captured or the operation log may be collectively sent on another basis.

The log server module of the log server receives the operation log from the client and saves the received operation log in the operation log table S . The log server continues the processing until the operation is finished S .

Hereinafter the initialization process will be described with reference to . Records are sequentially captured from the first received property capturing definition table S S and processing from Step S to Step S is conducted. If the capturing timing S of the property acquisition definition is load an attribute information capturing event handler GetInfo function is set for the onload of the body element S . On the other hand if the capturing timing S of the property acquisition definition is XHRhandler in order to implement the processing of the attribute information capturing event handler GetInfo function after the processing to be executed after the XHR has been received has been finished the captured records are appended to the XHR callback list array S .

After the processing of all the property capturing definition tables has been completed no in S the processing from Step S to Step S is executed. If the records are stored in the XHR callback list array yes in S the XHR object is overridden by the MyXHR object S . The override function is an open function MyXHR open function described in and a send function MyXHR send function described in . Finally the operation log capturing event handler is set S . In this processing the operation log capturing event handler is set according to the log capturing control definition and its details will be described with reference to later.

In the above processing example an example of an asynchronous communication using the XHR is described as an example of dynamic rewrite. As other asynchronous communication techniques JSONP JavaScript Object Notation with Padding or hidden frames are used. In the case of the JSONP in S the attribute information capturing event handler function GetInfo is set for the onload or onreadystatechange event of the script tag used in the JSONP. On the other hand in the case of the hidden frames the attribute information capturing event handler function GetInfo is set for the onload event of the frame element used in the hidden frames. When the asynchronous communication using the iframe is conducted the attribute information capturing event handler function GetInfo is set for the onload event of the iframe element.

Also as an example of the dynamic rewrite other than the above asynchronous communication a technique in which an input auxiliary window is opened from a window of a main browser separately and an input decision value in the auxiliary window is reflected on the main window is also frequently used. In this case the event handler is set to call the attribute information capturing event handler function GetInfo after the processing of the event handler on the operation which is an input decision of the auxiliary window has been terminated. That is the event handler is rewritten to call the information acquisition event handler after completing the processing in another window which is different from the event handler for the main window of the web application.

Hereinafter the open processing will be described with reference to . First records are sequentially captured from an XHR callback list array S S and processing from Step S to Step S is conducted. It is confirmed whether an change target in each record is identical with a URL argument of the open function or not S and if identical a handleList array is appended to the MyXHR object and this record is pushed to the array S . If the handleList is present in the MyXHR object only push of the record is conducted. After the processing of all the records has been completed the open function of the XHR object which is an original object is called S .

Then a variable name propname and a variable value info are stored in the client storage S . In this example the client storage is a storage area in the client which can be accessed from a script program that operates on the web browser program . Any technique may be used for the client storage if the area can be accessed from the script language such as a variable of the script language HTTP Cookie or the UserData area of the Internext Explore made by Microsoft or a local storage function of the HTML5. Also the client storage may be saved in a server side by communicating with the server. When data is saved the data may be encrypted taking privacy into consideration. Any system may be used for encryption if the system can protect the data such as independent encryption a symmetric key cryptography system or a public key cryptography system. Also as the attribute information specific data per se of the user may not be recorded but abstracted information such as segmented classification may be provided. The segmenting can be realized by managing information for segmentation on the server side and forwarding the information to the web browser module as with the operation log capturing control definition table or the property capturing definition table . With the abstracted attribute information the profile information on the user can be recorded giving more consideration to privacy.

In this application in the condition expression of if a point balance is 5000 or higher and the number of goods stored in the cart is 1 or higher a definition example that records the details including the motion of the mouse is represented . Also is a definition extracting the user name as name the point balance as point the number of items stored in the cart as nitem and the area of the user as area . In this example in the case of the user that obtains the screen illustrated in since the definition corresponds to the condition expression the operation log including the motion of the mouse is recorded in detail. This example shows that when it is assumed that the user who is liable to make a purchase has the point balance of 5000 points or higher and stores the goods in the shopping cart the operation logs of the user that matches this condition are collected and analyzed in detail. Accordingly the capturing event of the operation log can be controlled according to the attribute of the user and the logs can be effectively collected.

A description will be given of a setting method of the property capturing definition table which is definition information for capturing the user attribute from the screen which is generated by the web application. If asynchronous communication such as the XHR and the JSONP is mixed together it is difficult to set the capturing timing. Under the circumstances a method of supporting the setting of the property acquisition definition will be described with reference to .

A rough flow of the setting support method will be described below. The manager user who conducts the setting operates the web application as normal. The web server receives the HTTP request as normal. The web server saves the response contents of the web application in a content database which is newly provided after the operation log capturing module has been inserted into the response S . This function is realized by the provision of the property acquisition definition function in the module code injection module . If the content database can be accessed from the web server the content database may be integrated or may be driven by another device.

The operation log capturing module is newly provided with a function of receiving the selection of the area within the web page which is the profile information from the manager user and sending the received area to the web server . If the manager user selects the area of the profile information from the screen of the web application the property acquisition definition function within the module code injection module searches on the basis of which content information the appropriate area is generated with reference to the content database. The property acquisition definition function within the module code injection module estimates the capturing timing on the basis of the information on in which content the appropriate area is included and appends the definition information to the property capturing definition table .

The search processing is illustrated in . First of all the acquisition portion in the screen and the property name are received from the web browser module . In this example the property name is stored in the linear transformation propname S . Then the XPath of the extraction area is generated and stored in the linear transformation xpath S . Then the content included in the appropriate page and the appropriate page is captured from the content database S . illustrates the configuration of the content database. When the content database includes the URL of the content the contents of the content and the inline content if the content includes another content as the inline content.

Then it is searched whether the extraction area is included in the appropriate page or not S . If the extraction area is included in the appropriate page the records are appended to the property capturing definition table so as to simply capture the information after the display of the appropriate page has been completed. The URL of the appropriate page is set to the linear transformation and load is set to the linear transformation timing S . Finally the records are appended to the property capturing definition table with the property name propname the source url the URL of the appropriate page the extract expression xpath the moment of extract change target srcpage the moment of extract capturing timing timing S .

If the extraction area is not included in the appropriate page it is searched whether the designated portion is included in the inline content included in the appropriate page or not and the result is stored in the linear transformation srcpage S .

Then it is detected how srcpage is called from the appropriate page and the capturing timing is estimated. If srcpage is present in the src attribute of the script tag in the appropriate page S it is determined the asynchronous communication using JSOP is conducted and scriptload is stored in the linear transformation timing S . If srcpage is present in the src attribute of the frame tag or the iframe tag in the appropriate page S it is determined that the asynchronous communication using the hidden frames are conducted and frameload is stored in the linear transformation timing S . If none of the above conditions is applied it is determined that the asynchronous communication using the XHR is conducted and XHRHandler is stored in the linear transformation timing S . Finally in Step S the records are appended to the property capturing definition table .

As described above the method of setting the property acquisition definition rule in this embodiment includes the content database that stores the response of the web application and includes a step of recording the response of the web application in the content database a step of designating the property extraction area on the web browser that displays the response and a step of searching in which response the designated area is included from the content database.

Also the step of recording the response of the web application in the content database further includes a step of recording the top frame and the associated page called by the extension of the display of the top frame as a set and the step of searching in which response the designated area is included from the content database includes a step of searching the designated area from the associated page and determining the property acquisition rule through a method of calling the associated page hit by the search from the top page.

Further this determination step includes a step of determining the property acquisition rule with reference to any src attribute of a script tag a frame tag and an iframe tag.

Next a second embodiment describes the system capturing attribute information from multiple web pages and using it. Capturing the attribute information from the multiple web pages and constructing user s profile information can take more advanced control. shows an example of the attribute information spanning the multiple pages. In this figure the HTTP communications to indicate the same communications as those in an example of the application shown in . Further the HTTP communications and indicate that after displaying index.jsp the user displays member.jsp that displays member information.

The user profile information after the processing of the attribute information acquisition to the response of has been completed is configured as illustrated in . Then when member.jsp is displayed a property acquisition definition rule illustrated in is started and the area information of the user is captured. As a result as illustrated in the profile information spanning a plurality of pages can be captured. In order to hold the profile information spanning the plurality of pages the profile information is held in the HTTP Cookie where the scope of the variable is maintained over the pages the UserData area or the local storage function of the HTML5. Even in the case where the profile information spans the sessions of the application such that re login is made the profile information can be configured by specifying the user and putting the above client storage into practical use. With the above configuration the capturing event of the operation logs can be controlled according to the attributes of a larger number of users and the logs can be efficiently collected. The profile information can be saved on a server side as in the first embodiment. When data is saved the data may be encrypted taking privacy into consideration. Any system may be used for encryption if the system can protect the data such as independent encryption a symmetric key cryptography system or a public key cryptography system. Also as the attribute information specific data per se of the user may not be recorded but abstracted information such as segmented classification may be provided. The segmenting can be realized by managing information for segmentation on the server side and forwarding the information to the web browser module as with the operation log capturing control definition table or the property capturing definition table . With the abstracted attribute information the profile information on the user can be recorded giving more consideration to privacy.

The invention explained in detail enables the control of levels of capturing operation logs and can effectively collect and analyze information for improving web applications

