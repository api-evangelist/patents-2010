---

title: Distributed services authorization management
abstract: One or more techniques and/or systems are disclosed for providing resource authorization to users of a distributed memory store (e.g., a distributed web-based cloud service). A session ID that identifies a location of an authorization document in a distributed memory store is used to access the authorization document, which comprises a global section with a principal ID related to a user. The user can be authorized to utilize a resource (e.g., in a distributed cloud service) if a resource section is present for the principal ID in the authorization document, and has appropriate resource data for the resource. If the resource section is not present, it can be created in the authorization document, and identified by a resource identifier. Authorization data can be loaded into the newly created resource section, and the authorization document, with the global and resource sections, is saved to a local cache for the distributed memory store.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08898318&OS=08898318&RS=08898318
owner: Microsoft Corporation
number: 08898318
owner_city: Redmond
owner_country: US
publication_date: 20100603
---
Distributed web based services are typically called cloud services and they provide shared resources services software and information on demand. These cloud services are typically distributed among a plurality of servers clusters of servers and or datacenters comprising clusters. Users access the cloud services by accessing the Internet and authenticating themselves to the particular service. Cloud services often need to scale to hundreds of millions of users and billions of resources which are typically partitioned into scale units that are capable of allowing efficient access to those resources e.g. in datacenters and or clusters .

For most cloud services a tiered approach is developed with resources spread over multiple partitioned databases installed in multiple datacenters. Efficient algorithms and addressing schemes have been developed for users to locate resources. When a user wishes to utilize a cloud service they often authenticate to the service such as by using a shared secret e.g. username and password combination or cryptographic keys etc. . Further the user is typically authorized to use particular services for a particular amount of time and the authorization information can be accessed by the service to identify whether the user can utilize the resource of interest.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

There are many techniques for authenticating e.g. user authentication and authorizing transactions to distributed services such as cloud based services e.g. web based applications databases etc. . Some require significant computational overhead for cryptographic operations or database input output operations for determining access rights or significant bandwidth and client resources for maintaining and transferring state e.g. signed tokens cookies . With some systems changing access rights may not be immediate as the system honors access tokens until they expire sometimes hours later. Cryptographic key management is hard as the resources used to store manage and decipher these types of keys can be significant. For a signed token based system the entire security of the distributed services may depend on protecting the private key s because if they are hacked the services can be compromised.

Most cloud based services are stateless and use cryptographically signed tokens for authentication and authorization. This approach allows front end machines e.g. web servers application servers that control access to resources to be stateless. However this approach has many disadvantages such as a complex burden of managing authorization tokens cookies is placed on the client performing the API requests miscoded or misbehaving clients can utilize significant front end CPU resources by intentionally or unintentionally passing invalid tokens on API requests front end machines before allowing access must validate the signed tokens which consumes significant CPU overhead performing cryptographic operations affecting the scalability of the service and the amount of resources a single front end machine can manage front end machines that verify signed authorization tokens must share the keys used to protect and validate those tokens which is a difficult management task that must be done securely and the tokens can be large thereby creating bandwidth issues and may be valid for long periods making it difficult to revoke authorization.

Some cloud services use a random session identified sessionID for access to their services. In these services a user authenticates to the service through some challenge but then gets issued a sessionID that is used on subsequent requests. However this category of cloud service merely manages a single resource e.g. the user s inbox or co located resources e.g. the user s office documents . Further they cannot handle multiple disparate resources across many locations each with additional authorization requirements.

Accordingly one or more techniques and or systems are disclosed to provide a variation to prior session ID based authorizations where a location aware multilevel in memory store is used to cache authentication and authorization data in a multi sectioned document. For example an authorization document can be quickly retrieved and cached at any datacenter cluster or machine used by the distributed service. The document can be divided into sections that contain authorization data for specific distributed service resources e.g. web based applications and services . Further document sections can be added or removed as needed as resources are accessed.

In one embodiment for providing resource authorization to users of a distributed memory store an authorization document that is stored in a distributed memory store is accessed using a session ID which can be provided to a user machine upon user authentication e.g. a randomly assigned session key . The session ID identifies a location for the authorization document which comprises a global section with a principal ID associated with the user. The user is authorized for a resource of the distributed service e.g. cloud resource if the authorization document has a resource section with authorization data for the resource associated with the principal ID.

In this embodiment if the authorization document does not have the resource section for the resource a local resource section is created e.g. in the cache of the local app server or cluster and identified by a resource identifier. Resource authorization data is loaded into the local resource section such as from a backup store e.g. on backend servers and the authorization document with the newly created resource section is saved to the local cache in the distributed memory store for the resource.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

By way of example a distributed memory store can comprise one or more techniques and or components for setting up in memory storage that provide unified global caching over distributed memory locations. As an example web farms often comprise a plurality of servers some of which are used as web or application servers e.g. front end servers for interaction with users while others are used as database servers e.g. back end servers for storing data . In one embodiment a distributed data grid can be set up on the front end servers for example where a grid service is installed. The grid service allows the respective servers to work together in the distributed data grid for example where a global view of the memory of those servers in the grid comprises a unified memory. In this way in this example a distributed memory store can be provided where the physical memory may be disparate e.g. on different machines but acts as a unified memory store.

In one embodiment the distributed memory store e.g. which can be a distributed dictionary or distributed hash table can be organized into multiple levels that have shared in store memory. As an example memory used by a cloud service e.g. a service running in the cloud computing environment can be shared across front end machines clusters of machines and or data centers that comprises clusters of machines. Therefore in one embodiment the distributed memory store for a cloud service for example can comprise a local cache e.g. local to a front end machine a cluster master cache e.g. distributed across a plurality of front end machines comprising the cluster and or a datacenter master cache e.g. distributed across a plurality of clusters .

Further in one embodiment the authorization document can comprise a location aware multilevel cached memory store document that comprises individual sections of authorization data associated with specific resources e.g. cloud resources such as email . In this embodiment the authorization document can be cached across respective locations e.g. datacenters and the document sections can be cached merely at relevant clusters or machines e.g. where an associated resource is partitioned . The authorization document comprises a global section that is globally the same throughout the distributed memory store where other document sections may be local to a resource.

In this embodiment the authorization document is accessed using the session ID which identifies its location. In one embodiment the session ID is merely a small piece of data that identifies a user e.g. person of machine using the cloud services for example for a desired period of time. The session ID can be randomly generated when a user is authenticated e.g. logs in with a username and password and linked to e.g. by indexing a session document that comprises the principal ID which is merely linked to the user e.g. only the user is associated with the principal ID and therefore the authorization document . In this embodiment the principal ID is an identification that is linked merely to the authorization document for example thereby identifying a location of the document.

Additionally in an authorization document is stored across several locations in the distributed memory store portion A of cluster A. A in the distributed memory store portion B of cluster A. B and in the distributed memory store portion C of cluster B. C. In this example the authorization document comprises a global section which comprises the principal ID identifying the user for the document global authentication data and other global data. Also the authorization document comprises a resource section A C for the respective locations A C.

In the example embodiment the session ID is associated with the principal ID which identifies the authorization document for the user. The session ID can index a session document stored in the distributed memory store and the session document can comprise the principal IDs for a plurality of user s authorization documents for example. In this way in one embodiment a user e.g. person or machine wishing to utilize a remote service e.g. cloud based service can merely authenticate and receive a session ID then use the session ID to locate the principal ID which in turn provides access to the authentication document .

Returning to at the user is authorized for a resource if a resource section comprising resource authorization data is present for the principal ID in the authorization document. As described above the authorization document can comprise a global section e.g. of and a resource section e.g. A C of . While the global section comprises the principal ID related to the user e.g. associating the user with the authorization document the resource section provides authorization data that identifies a resource that the user is authorized to access.

As illustrated in the authorization document cached at the distributed memory store A of cluster A. A comprise a resource section A. In this example cluster A. A comprises resources R and R A such as cloud based services accessed by a web based user e.g. email online document storage etc. . Further in this example the resource section A of the authorization document comprises resource authorization data that provides access to the resources A R and R. Therefore in this embodiment if the resource data is present in the resource section of the authorization document identified by the principal ID for the user the user can be authorized to utilize the resources e.g. A .

Returning to at if the resource section for the resource is not present in the authorization document a local resource section can be created in the authorization document for the resource indicated by a resource identifier at . As described above the authorization document can be cached in a distributed manner in the distributed memory store for example such that resource sections are stored locally e.g. in a local server or cluster where the resource resides in the system for respective resources while the global section is cached in another location.

In this embodiment a new resource section of the authorization document identified for the user by the principal ID can be created for the resource locally in the distributed memory store local to the resource . At resource authorization data is loaded into the local resource section corresponding to the resource. In one embodiment authorization data can be stored in a backup store associated with the distributed memory store e.g. the backup store may comprise back end servers coupled with the remote service . In this embodiment the appropriate authorization data for the resource e.g. the user is attempting access can be loaded from the backup store to the newly created resource section of the authorization document.

At of the exemplary method of the authorization document comprising the global section and the local resource section indicated by the resource identifier is saved e.g. cached locally in the distributed memory store for the resource. For example as described above if the resource the user is attempting to access is located on a particular cluster or machine in the cluster the portion of the authorization document that comprises the newly created resource section for the resource can be stored locally in the distributed memory store such as in memory of the machine or cluster.

Having saved the authorization document locally in the distributed memory store the exemplary method ends at .

It will be appreciated that techniques and or systems described herein not just with regard to are not limited to any particular authentication. For example an authentication device may be used e.g. electronic key a cryptographic key a public private key pair or any other available authentication technique or system. Further it will be appreciated that the term user is not limited to any particular embodiment. For example a user may be a person interacting with the distributed system though a client e.g. personal computer or a device e.g. authenticated via X.509 certificate and public key signature .

In this embodiment the user uses a computer to authenticate at with the distributed service . Upon authentication at an authorization document is created for the user . As described above the authorization document comprises a global section that comprises the principal ID associated with the user for the distributed service . Further the global section can comprise user related information. As an example as illustrated in a user related information section of the global section can comprise information about the user. For example the user related information may include a first and last name email address and internal identification number for the distributed service.

In one embodiment the global section is created when the authorization document is created such that it can be propagated to requesting memory component of the distributed memory store. That is for example as illustrated in the global section can comprise global authorization data such as a principal ID A expiration A version A and type A that can be globally propagated and relevant throughout a system comprising the distributed memory store. Upon creation the authorization document can be stored in the distributed memory store for the distributed service.

At in a session document which is indexed in memory of the distributed memory store by the session ID can also be created upon authentication. As an example the session document can comprise a principle ID for a user with the distributed service where the principal ID is indexed by the session ID. In this way for example when a user authenticates with the distributed service the session document is created for the user such that the session document comprises the user s principal ID for the service and a session ID indexes the principal ID in the session document.

Therefore in this example merely a randomly generated session ID may be needed to access the distributed service as the principal ID can be retrieved from the session document using the session ID. At the session ID can be returned to the user s machine . In this way as an example the user s machine can utilize the session ID for any subsequent requests for services in the distributed services during a life set for the session ID e.g. often limited to twenty four hours of use by an expiration setting .

At the session document is accessed. As an example the session ID can be used as a key into the in memory distributed store to obtain the session document. At if the session document is not cached locally e.g. in the front end machine accessed by the user s machine the distributed memory store can look to the master cache of the cluster comprising the local machine NO at . At if the session document is not cached in the cluster master cache distributed memory store can look to the master cache in the datacenter comprising the cluster NO at . At if the session document is not cached in the datacenter NO at the request is rejected as unauthorized at .

Alternately if the session document is found in the distributed memory store YES at or the session ID can be used to identify the principal ID and thereby used to identify a location of the authorization document at . In one embodiment the session document may merely comprise a redirection point that redirects the session ID which is a pointer to the session document to the principal ID which points to the authorization document.

At the authorization document can be accessed such as by using the principal ID. In one embodiment the machine e.g. server that receives the authorization request from a user for example may merely request access to the authorization document if it is stored locally. Otherwise in this embodiment the machine may request that the authorization document comprising the global section is propagated locally to the resource in the distributed memory store if the authorization document is not cached locally to the resource.

At if the authorization document is not cached locally NO at the distributed memory store can look to the master cache for the cluster which comprises the local machine. At if the authorization document is not cached in the cluster comprising the local machine NO at the distributed memory store can look to the master cache of the datacenter. If the authorization document is not cached in the datacenter NO at the request is rejected as unauthorized at .

Alternately if the session document is found in the distributed memory store YES at or the authorization of the resource for the user for example can proceed. The authorization check may or may not need more information before granting access to the resource. For example merely providing the principle ID to access the authorization document NO at may be sufficient to authorize access to the resource at such as when the authorization document is merely linked to one resource for the distributed service. However if the authorization document comprises resource sections for more than one resource e.g. of more information may be needed to authorize the user for the resource YES at .

At a resource ID can be used to access the resource section of the authorization document for the requested resource. The resource ID for example may be an identification that is particular to the resource e.g. B C of . In this way in this example the resource ID can identify the resource section which comprises the resource data needed to authorize the user for the resource. At if the resource section is present as identified by the resource ID YES at the resource can be authorized for the principal ID at .

At if the resource section is not present in the authorization document NO at authorization data can be retrieved from a backing store. For example where the authorization document was propagated from a different cluster than the one comprising the requesting machine e.g. a web server receiving the user request merely the global section may be propagated to the local portion of the distributed memory store. This may occur for example when the user has not attempted to access the distributed service from the local cluster within an expiratory period for the authorization document.

At a version of the resource authorization data can be loaded as an update from the backing store and written to a newly created resource section that is identified by the resource identification in the authorization document at . As an example the backing store can comprise back end servers in a datacenter for a distributed service that are used to store operational data such as customer related information that typically needs longer term storage. In this way as an example the authorization data is written to the resource section which is identified by the resource ID for the associated resource. In one embodiment an expiration time can be added to the local resource section which comprises a time for the user to access the resource e.g. B C of .

At the authorization data is cached locally such as on the local machine receiving the authorization request from the user. In one embodiment the authorization document can be pushed to a next master cache level in the distributed memory store. For example the authorization document can be pushed from the local machine cache to the master cache for the cluster comprising the local machine or it can be pushed from the master cache for the cluster to the master cache for the datacenter.

In one embodiment the version of the updated authorization document e.g. updated from the backing store can be checked against the master cache version such as by a distributed memory store update process. In this embodiment if the updated version is a later version the master cache at that level is also updated. However if the updated version is not a later version than the master cache e.g. a subsequent update came through before the updated version was pushed to the master cache the master version is not updated.

In this embodiment the updated document section can be returned in the update. In this way for example the master cache can comprise the latest version of any updated document sections and cache updates can provide the latest versions. In one embodiment an expiration time can be added to the authorization document which comprises a time for the user to access the authorization document. In this way for example the distributed services may provide for the user to reauthenticate and reauthorize after a desired period of time. Having cached the updated authorization document the user can be authorized at .

In one aspect one may wish to modify a user s authorization for a resource in a distributed service e.g. cloud network environment . For example a user s activities with regards to a particular service may prompt an administrator to prevent them from further access e.g. spammers using email services . However the authorization data may comprise an expiration that allows the user to continue their authorization. In this aspect in one embodiment the authorization in the resource section of the authorization document can be modified e.g. removed expiration changed etc. .

In one embodiment modifying authorization in the resource section of the authorization document can comprise receiving a request to modify the authorization which indicates the resource ID for the intended resource and the principal ID for the user. In this embodiment the authorization document can be accessed using the principal ID and the resource section can be accessed using the resource ID. As an example the expiration information for the resource can be reset or the resource section for the resource may be removed. In this embodiment the authorization document comprising the modified resource section can be saved in memory in the distributed memory store for example thereby preventing e.g. or extending access by the user.

A system may be devised that utilizes a location aware multilevel cached memory store document to authorize a user for example for specific distribute services e.g. cloud computing services . is a component block diagram of an exemplary system for providing resource authorization to users of a distributed memory store. A distributed memory store comprises memory components configured to store resource authorization data.

A user authorization component is operably coupled with the distributed memory store in order to create an authorization document upon user authentication. The authorization document is identified by a principal ID that is related to a user and it comprises a global section that is configured to be propagated to memory components of the distributed memory store upon request. The user authorization component comprises a resource checking component that authorizes the user for a resource if a resource section comprising resource authorization data is present for the principal ID in the authorization document .

The user authorization component further comprises a resource section creation component that creates a local resource section in the authorization document for the resource which is indicated by a resource identifier. The local resource section is created by loading resource authorization data into the local resource section corresponding to the resource if the resource section for the resource is not present in the authorization document . The user authorization component also comprises an authorization caching component that saves the resource document comprising the global section and the local resource section indicated by the resource identifier locally for the resource in the distributed memory store .

Further the session document is stored in memory of the distributed memory store and comprises the authorization document access component reference where the authorization document access component is accessed by the session ID for a user s session. That is when a user attempts to access a distributed service that utilizes the distributed memory store the user s computing device can send the session ID along with an authorization request. In this way in this example the session ID can be used to access the authorization document reference which in turn allows the user to access the authorization document on the distributed memory store .

A backup store is operably coupled with the distribute memory store and it provides resource authorization data for a resource section in the authorization document . For example the backup store may be comprised in backend servers of a server farm and can store the authorization data used to give user authorization in the resource sections of authorization documents.

In one embodiment when the authorization document is stored locally e.g. on a server that is local to the resource being accessed by the user it can comprise a global section which comprises a principal ID and user related information and a resource section which comprises resource authorization data for the local resource. That is for example a user can attempt to access a distributed resource service e.g. online word processor by connecting to an application server providing the service such as in a web server farm. The authorization document can be stored locally on the application server or in the local cluster comprising that server and it can comprise the global section for the user authorization information and the resource section that identifies the resource the user is authorized to access e.g. the word processor .

In one embodiment the distributed memory store can comprise a local cache such as on a local machine e.g. front end web server or application server providing content to web users . Further in one embodiment the distributed memory store can comprise a master cache for a cluster comprising the distributed memory store. For example a cluster can comprise a plurality of front end machines serving web content to users and the distributed memory store can be implemented in the cluster where the cluster comprises a master cache. In one embodiment the distributed memory store can comprise a master datacenter cache for the one or more clusters comprising the distributed memory store.

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to implement one or more of the techniques presented herein. An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to one or more of the principles set forth herein. In one such embodiment the processor executable instructions may be configured to perform a method such as the exemplary method of for example. In another such embodiment the processor executable instructions may be configured to implement a system such as the exemplary system of FIG. for example. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

