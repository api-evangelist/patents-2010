---

title: Keyword-based search engine results using enhanced query strategies
abstract: Enhanced computer- and network-based methods, systems, techniques are provided for retrieving more accurate and responsive search results when searching content for a designated entity using an off-the-shelf keyword-based search engine. For example, the embodiments described herein may be used to improve search results by eliminating off-topic results when presenting queries to an existing keyword-based search engine invoked by means of an API from an intermediating application. Example embodiments provide a Keyword-Based Search Enhancement System (“KBSES”), which enables intermediating applications to obtain information more closely related to user queries by enhancing such queries, on behalf of the user, with disambiguating information when deemed necessary. Based upon a variety of rules and heuristics, which can be modified as well, the KBSES determines whether an entity name in a user's query should be enhanced with additional disambiguating information, and to what extent, to prevent the retrieval of off-topic results.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08645372&OS=08645372&RS=08645372
owner: Evri, Inc.
number: 08645372
owner_city: Seattle
owner_country: US
publication_date: 20101029
---
The present disclosure relates to methods systems and techniques for enhancing the effectiveness of keyword based searches and in particular to methods systems and techniques for improving results generated using existing keyword based search tools by enhancing queries with automatically generated disambiguation terms.

Keyword based search engines like YouTube and Yahoo Image offer interfaces that assist users in finding relevant results for ambiguously named topics. For instance on Yahoo Image http images.search.yahoo.com if the user is looking for images of the TV show 24 and types 24 the interface will present a list of items that begin with 24 including 24 TV show . When the user selects this latter option the user is shown only images of the TV show. Thus the user through direct contact with the search tool provides disambiguation information to select the option of interest.

More often than not the simple name of an entity suffices to connect a user to a result about that entity either because the name is inherently unambiguous e.g. Inxs or more likely because the user s interests align sufficiently with those of the community of other users and content creators to enable creation of a system that distills a broad consensus about the meaning of the name. Nevertheless there are domains in which names can be highly and deliberately ambiguous e.g. movie names such as W album titles such as Blue challenging even the most successful keyword based search engines to find relevant results using only a name. Moreover for those users whose interest in a name lies outside that broad consensus success in finding a result pertinent to that interest using only the name is unlikely.

The past several years have seen a proliferation of search engine Application Programming Interfaces APIs enabling development of a wide range of mash up applications that intermediate between the user and a search engine. In response to keyword queries these APIs deliver not only web pages e.g. Yahoo BOSS Web Search Google Web Search Microsoft Bing and other text media e.g. Yahoo BOSS News Search Twitter but also non textual media. Services like YouTube which provides access to videos and Flickr which provides access to images permit users to upload text descriptions and keywords with their media offerings thereafter permitting search by keywords. Services like Yahoo BOSS Image search and Microsoft Bing crawl the web finding non text media and using the text that accompanies these media for keyword annotation.

These search engine APIs enable the providing of a rich array of content to create compelling new applications. However when such search engines offer an API to an intermediary application the ability to engage the user s knowledge to make the search more specific by direct interaction is lost. Consequently even though the user may have already declared an interest in a specific entity in the intermediary application if this application retrieves results from a search API using only an entity s name it may retrieve results that are mistakenly not about the entity of interest. Thus by disengaging the user from direct interaction with the search engine these API s sacrifice access to the disambiguation techniques based on user interaction leaving them susceptible to the basic problems of ambiguity inherent in keyword search.

Embodiments described herein provide enhanced computer and network based methods systems techniques for retrieving more accurate and responsive search results when searching content for a designated entity using a keyword based search engine. For example the embodiments described herein may be used to improve search results by eliminating off topic results when presenting queries to an existing e.g. off the shelf keyword based search engine invoked by means of an application programming interface API from an intermediating application such as a personalized news reporting service social networking interface etc. Example embodiments provide a Keyword Based Search Enhancement System KBSES which enables intermediating applications to obtain information more closely related to user queries by enhancing such queries on behalf of the user with disambiguating information when deemed necessary. Based upon a variety of rules and heuristics which can be modified as well the KBSES determines whether an entity name in a user s query should be enhanced with additional disambiguating information and to what extent to prevent the retrieval of off topic results. If the entity name is enhanced unnecessarily or with too specific information then the result set retrieved from the search engine API may be too small or empty or otherwise too restrictive e.g. the results may not include the latest most compelling results .

In overview in order to avoid such relevancy errors the KBSES first determines whether the entity is one likely to yield such types of errors as explained further below. If so and subject to a variety of rules and or factors the KBSES determines using enhancers enhancer components what sort of disambiguation terms to apply to the keyword based query and then applies the determined disambiguation terms in a query strategy to a search to be invoked using the API. In some embodiments portions of the query strategy are invoked and tested for sufficient results before continuing with further attempts to enhance the query.

where each phrase separated by a semicolon is a separate query which sub queries are run on behalf of the user until sufficient relevant results are returned.

In this example the entity specific enhancement Kristen Stewart is a related entity to the movie entity Twilight as determined using a variety of techniques that glean information about which entities are related to which other entities. The phrase sites accesshollywood.com is a source limitation that describes which corpus the search engine should preferably use for the query to prevent generating less relevant data. The facet specific enhancements stills and premiere are terms related to a facet i.e. film of the particular entity of interest i.e. the movie entity Twilight that refers to the particular 2009 Teen Vampire Movie . The category movie is a category level enhancement. One or more enhancements may be provided in a single query strategy and one or more types of enhancements may be omitted in any single query strategy.

As can be observed in this example the ordering of the query enhancements within a particular query strategy is important as it is meant to lead to a desired degree of precision without being too narrow. Thus in the particular example demonstrated the entity specific enhancement is tried first as it is deemed to be the most likely to produce results with greatest precision. The facet specific enhancements may produce a greater number of results but they are likely to be less precise. For example in the case of query facet specific enhancements may cause retrieval of some results related to other similar movies for example The Twilight Zone Movie. Similarly the category level enhancement movie in combination with the name Twilight could cause retrieval of similar less precise results.

The ability to identify one or more entities that are related to a designated entity making possible some of the enhancements of keyword queries with disambiguating terms is predicated on the existence of entity recognition and disambiguation technology. One such method for providing entity recognition and disambiguation is described in detail in U.S. patent application Ser. No. 12 288 158 filed Oct. 15 2008 and entitled NLP BASED ENTITY RECOGNITION AND DISAMBIGUATION which is incorporated herein by reference in its entirety. In addition the ability to select related entities that are the most useful in locating on topic content is enhanced by the ability to detect and aggregate relationships between entities using representation schemes and query languages suited to entities and their relationships. One set of techniques using relationship searching technology is described in detail in U.S. Pat. No. 7 526 425 issued Apr. 28 2009 and entitled METHOD AND SYSTEM FOR EXTENDING KEYWORD SEARCHING FOR SYNTACTICALLY AND SEMANTICALLY ANNOTATED DATA which is incorporated herein by reference in their entirety.

The use of entity recognition and disambiguation technology enables an intermediating application to specify a user s interest as a designated entity instead of a keyword query. This flexibility enables the KBSES to construct keyword queries that despite being processed by a search engine s API that does not have entity recognition and disambiguation technology are nevertheless able to retrieve content relevant to the designated entity. For example if the user is interested in the French city of Paris the KBSES can produce a keyword query that is capable of retrieving content for the particular city and not the celebrity Paris Hilton even from a keyword based search engine API that has no entity recognition and disambiguation capabilities or semantic understanding of the query.

As mentioned the KBSES improves keyword based queries by automatically generating disambiguation terms which are used to supplement the otherwise unmodified queries to generate more precise results. As described herein the KBSES operates to enhance queries used with the API of third party off the shelf keyword based search engines especially in the context of being invoked from another application on behalf of a user. These third party keyword based search engines may be operable to search lots of different types of content including for example text images music sound video objects etc.

The techniques of the KBSES also may be useful to enhance queries in other scenarios and with other kinds of search engines. Also although certain terms are used primarily herein other terms could be used interchangeably to yield equivalent embodiments and examples. In addition terms may have alternate spellings which may or may not be explicitly mentioned and all such variations of terms are intended to be included.

Example embodiments described herein provide applications tools data structures and other support to implement a Keyword Based Search Enhancement System to be used provide enhanced keyword based queries. In the following description numerous specific details are set forth such as data formats and code sequences etc. in order to provide a thorough understanding of the described techniques. The embodiments described also can be practiced without some of the specific details described herein or with other specific details such as changes with respect to the ordering of the code flow different code flows etc. Thus the scope of the techniques and or functions described are not limited by the particular order selection or decomposition of steps described with reference to any particular routine.

Typically an intermediating application not shown uses the facilities of the KBSES to generate and use enhanced queries. Specifically upon receiving an entity designation the intermediating application first uses the Enhancement Level Setter to set an enhancement level for the query i.e. to determine whether enhancements are needed and how specific the enhancements should be. Levels of specificity include for example a level that indicates a desire to include enhancements specific to the entity or a level that indicates a desire to include enhancements specific to the facet of the entity. In other embodiments other levels may be indicated.

The intermediating application then passes information regarding the enhancement level along with an unambiguous designation of a specific entity to the set of one or more Enhancers . The set of Enhancers are configurable and may differ from implementation to implementation. Each Enhancer supplies some piece of information about the entity that can be used to formulate a query i.e. one of the sub queries to the search engine API . Examples of Enhancers include 

The Enhancers produce a query strategy a list or collection of queries typically from most restrictive to least restrictive. At this point in one embodiment the queries in the query strategy are abstract they are not yet in the syntax of any search engine API. Each query in the query strategy consists of a set of root terms e.g. the name of the entity enhancing keywords phrases content categories and source limitations. An example of such a query strategy was illustrated with reference to .

Finally the intermediating application passes the query strategy to the Result Retriever which is responsible for formulating queries in the syntax of the desired search engine API . The Result Retriever goes through the sub queries of the query strategy in order most specific to least specific until it determines that it has sufficient results e.g. over some threshold number of results . The Result Retriever formats the results into objects that are interpretable by the intermediating application such as packaged results and then returns them.

The Enhancement Level Setter of the KBSES e.g. Enhancement Level Setter of is used to determine whether enhancements are needed and how specific the enhancements should be. The enhancement level enhancement type generated conveys at least three types of information 1 whether an entity specific query enhancement is needed e.g. enhancing the TV show name 24 with the actor name Kiefer Sutherland may be needed to differentiate that show from others 2 whether a facet specific query enhancement is sufficient since facet specific enhancements may prevent the results generated from being too narrow and 3 whether or not the unenhanced query should be tried if the enhanced sub queries fail to provide sufficient results. For example a highly ambiguous name like X is highly unlikely to provide relevant results from any search engine if it is submitted unenhanced.

The Entity Database is a database containing the names and facets of known entities recognized entities along with an indicator of each entity s popularity. Different mechanisms may be used to determine an entity s popularity. In one instance the number of links to the entity s Wikipedia page from other Wikipedia pages is used as a measure of popularity. Other embodiments incorporate information optionally from a server of hot popular entities. In at least one embodiment a popular entity server known as Zeitgeist tracks which entities are currently popular and reports this data as needed. In some embodiments Zeitgeist tracks the first derivative of mentions of entities in order to observe spikes in activity not just amount.

The Important Entities Database is a list of entities that do not need enhancement. In one embodiment this list is hand curated representing the judgment of the curator that these entities are so overwhelmingly popular compared to other entities that have the same name that there is very low risk of retrieving results for the other incorrect entities. For instance Michael Jackson the entertainer appears in this list conversely Michael Jackson the football player does not. In some cases this list is time sensitive and so can be monitored and revisited at determined intervals.

The Term Frequency Database is a measure of the rareness of terms and phrases in common usage. In one embodiment the names phrases and the measures of rareness are derived from a corpus of news articles and calculated at various time periods and or intervals. In some embodiments the Term Frequency Database is an off the shelf database.

The Common Names Database is a list of common first names and a list of common last names. In one embodiment these lists are hand curated. If a name consists of one word it is considered common if it consists of three or more words it is considered uncommon if it consists of two words it is considered common if the first word appears on the given names list and the second must appear on the family names list. Other heuristics are of course possible and can be similarly incorporated.

The Most Common Form Name Database is a database of the most common variants of entity names. In one embodiment this information is derived from a corpus in which entity occurrences have been detected.

In some embodiments one or more of the resources are provided through external third party resources.

Otherwise in block if the designated entity s name e.g. retrieved from either the Entity Database or the Most Common Form Name Database consists of two or more words and is a common name for example as determined by the Common Names Database then entity specific disambiguation would be helpful and the level is correspondingly set to entity level enhancement in block and the logic returns.

In block if the designated entity is not a product and is well known then no enhancement is necessary and in block the level is correspondingly set to no enhancement needed and the logic returns. Here whether the entity is well known is determined by whether the entity s popularity score accounts for 99 or more of the popularity scores of entities with a similar name as determined using either the Entity Database or the Most Common Form Name Database 

Otherwise some form of enhancement is beneficial. For example in block if the entity s name is one character long or if the entity s name is common then the enhancement is preferably entity specific. In block the level is correspondingly set to entity level enhancement and the logic returns. Furthermore if results are not available with the entity level enhancement then no attempt should be made to retrieve results without enhancement since they will not only be off topic but appear to be random. Otherwise as indicated by setting the level to a facet level enhancement in block if later no results are forthcoming with a query that is enhanced with entity specific information then a query that is enhanced with facet level information will be adequate.

Otherwise the KBSES determines in block whether the entity has a sufficiently high popularity score in this embodiment Wikipedia in links and whether its score is the highest among similarly named entities. In block if so then enhancement is not necessary and the logic continues to block to set the enhancement level to no enhancement needed and returns.

In block the KBSES determines whether the entity has a sufficiently high popularity score if there are no other entities with the same name and if the designated entity is not a person with a common name. In block if this test evaluates to true then facet level enhancement should be tried but is not necessary and in block the KBSES logic sets the enhancement level to facet level enhancement and returns.

In block the KBSES determines whether there is one other entity with the same name and if the designated entity is not a person with a common name. Whether an other entity has the same name can be determined using either the Entity Database or the Most Common Form Name Database . In block if this test evaluates to true then facet level enhancement should be tried but is not necessary and in block the KBSES logic sets the enhancement level to facet level enhancement and returns.

Similarly in block the KBSES determines whether the designated entity has a sufficiently high popularity score or whether there is only one other entity with the same name. In block if this test evaluates to true then facet level enhancement should be tried but is not necessary and in block the KBSES logic sets the enhancement level to facet level enhancement and returns.

Otherwise in block entity level enhancement should be tried and the KBSES logic sets the enhancement level to entity level enhancement and returns.

In one embodiment the enhancers comprise one or more of an Entity Specific Enhancer a Synonym Selection Enhancer a Current Related Entity Enhancer a Related Entity Enhancer a Facet Specific Enhancer a Category Specific Enhancer and a Source Selection Enhancer . In other embodiments other enhancers may be included and or some of the illustrated enhancers excluded. Each Enhancer contains logic for determining disambiguation terms to be added to a root term i.e. a term that represents the designated entity to create an enhanced query. To facilitate such determinations the logic may incorporate a set of rules heuristics as exemplified with reference to described further below. In addition some enhancers utilize information stored in one or more data repositories data stores for example one or more Entity Database Entity Popularity Database and or Entity Relation Database . Other enhancers and other embodiments may utilize other types of data repositories in addition or instead of the ones illustrated in .

In the example shown Entity Database contains information on entities such as their facets see Appendix A for an example list of facets and their other roles or properties. Each property generally comprises a name value pair where the value may be text or an indication of another entity in the database. Other data such as popularity information common names synonyms representative icons etc. may also be stored. Entity Popularity Database generally comprises an indication of what entities are being accessed the most by some source such as mined from a corpus of articles. The Entity Specific Database generally comprises an indication of all of the entity relation entity e.g. subject verb object relationships with an indication of frequency across some corpus for example a set of articles.

Each of enhancers is responsible for determining disambiguating terms if the given a level of enhancement indicates that the enhancer is to be invoked. Entity Specific Enhancer is responsible for appending disambiguating terms that are specific to the designated entity i.e. entity in . The terms may come from text that is associated with the entity through a role as a value of a property associated with the designated entity or from other entities that are associated with the designated entity. These other entities may be associated with the designated entity via specific roles the other entity is a value of one of the properties associated with the designated entity or may simply be related to the entity in an unspecified manner.

In an example embodiment disambiguation terms are determined by the Entity Specific Enhancer in the presence of particular facets. These facets have been determined heuristically and or empirically based upon a set of priorities including 1 the importance of particular subjects 2 the number of entities having a facet 3 the tendency of the names of the entities having that facet to be ambiguous and 4 the frequency of viewings of entity descriptions i.e. entity pages relating to the entities having that facet. is an example block diagram of a set of rules for creating Entity Specific Enhancements. These rules can be used for example by the Entity Specific Enhancer in and are based upon a set of facets of interest. The set of rules is demonstrated as a table of facets and disambiguation rules . For each of the named facets the rules list one or more properties which may have either text or other entities as values.

For example if the designated entity is a football player has a facet of football player then text that appears as the value of a current team property would be included as an enhancing term. In addition an entity that is related to the football player entity and that has the characteristic of being a football team shares the football team facet would also be included as an enhancing term. In addition the typically most common name of any entity that appears as the value of one of the properties of the football player facet namely the current team property the former teams property or the sports organizations property may also be including as an enhancing term.

The Synonym Selection Enhancer is responsible for adding synonyms to the designated entity. In one embodiment the Entity Database includes synonyms for the names of entities. Instead of adding these synonyms unconditionally the Synonym Selection Enhancer uses an external query suggestion service such as Yahoo BOSS keyterms search or Google Suggest to find common query suggestions for the designated entity s name and then when these overlap with the designated entity s synonyms as stored in the Entity Database includes the overlapping terms as enhancements. For example for the entity that is the magazine Time the simple name Time is highly ambiguous but the entity record in the Entity Database also includes Time Magazine as a synonym. If the third party suggestion service e.g. Google Suggest returns Time Magazine as a suggestion for Time the Synonym Selection Enhancer will add Time Magazine as a disambiguating term enhancement.

The Facet Specific Enhancer is responsible for generating enhancing terms that are not specific to an entity but rather to designated entities facets. is an example block diagram of a set of rules for creating Facet Specific Enhancements. These rules can be used for example by the Facet Specific Enhancer in and also are based upon a set of facets of interest. The set of rules is demonstrated as a table of facets and disambiguation rules . For each of the named facets the rules list one or more keywords to be added as disambiguation terms.

For example for entities that are films share the film facet terms like trailer stills or premiere appended to the film title tend to increase the chances of getting on topic results. Thus they are added as disambiguating terms. As another example for entities that are electronic devices having facet e.g. Blackberry Palm the enhancing term electronics is likely useful to get on topic results. Thus it is added as a disambiguating term.

In another embodiment a Facet Specific Enhancer such as Enhancer in can operate to substitute for facets one or more named entities as keywords that serve as disambiguation terms. That is for some queries which involve a facet as a designated entity rather than a name of a person place thing etc. a Facet Specific Enhancer can be used to find example named entities that are more likely to result in the desired information than the facet by itself. These entities which may act as proxies for the facet can be then used to replace or augment the facet as disambiguating terms.

For example suppose a user is interested in finding videos of celebrities a facet who have been arrested. In order to get this information from a standard off the shelf keyword search engine the query would need to be expanded with specific people s names in order to find the videos since the search engine will not know how to translate the facet description into matching particular celebrities. An expanded query may look something like arrest AND Brad Pitt OR Heidi Klum OR Jennifer Lopez etc. The challenge is in figuring out how to expand the facets appropriately to get the most on topic results given that there are probably tens of thousands of named entities that might be used as proxies for the facet.

One solution is to look up the most popular actors in a popularity database or system such as the Entity Popularity Database in and expand the query into the most popular N people in each facet. However if the most popular people are not being arrested and if a previously unpopular actor e.g. at a popularity rank is being arrested then the enhanced query is not going to obtain any results.

Another solution is to instead run a query for example using a relationship search engine identified in U.S. Pat. No. 7 526 425 against a local semantic index with a subset of articles to identify entities that are likely to match a full semantic query and then use those entities as proxies for the facet i.e. for facet expansion in a third party keyword based search. Then if the local index has even a couple of articles about Brad Pitt being arrested it is sufficient to identify him as eligible for facet expansion substitution.

More specification given a semantic search engine S an external keyword search engine E and a semantic query Q containing facets F facet expansion is accomplished by 

2. Define a new query Q which is derived from Q by replacing every occurrence of F with an OR statement that Ors all of the entities in the response R 

Adjustments based upon the results can of course be accommodated. For example if there are too many entities in the response R that match query Q they can be rank ordered by popularity or otherwise and the top n chosen.

Note that at least in some embodiments the Facet Specific Enhancer is not invoked if the enhancement level setting indicates that entity specific enhancement is necessary. Facet specific enhancement typically yields broader results than a corresponding entity specific enhancement so it would not likely be helpful in such a scenario. 

The Category Specific Enhancer is responsible for generating enhancing terms that are not specific to a designated entity or to the entities facets but rather to broad categories of content. This enhancer also differs from the Entity Specific Enhancer and Facet Specific Enhancer because rather than add enhancing terms that will be supplied as keywords to a search engine API it places a category name in a distinguished field in the query so that the Result Retriever can use the category name as a category limiting parameter to the search engine API if the API supports such a category limitation.

In one embodiment the potential category names are again based upon a set of facets of interest. is an example block diagram of a set of rules for creating Category Specific Limitations. These rules can be used for example by the Category Specific Enhancer in . The set of rules is demonstrated as a table of facets and limitation rules . For each of the named facets the rules list one or more categories that may potentially be added as category limiting parameters.

The Source Selection Enhancer is responsible for supplying sources such as website domains or content authors to prefer or to avoid based on a designated entity s facet. This enhancer places source designations in distinguished fields in the query so that the result retriever e.g. Result Retriever in can use these designations as source limiting parameters to the search engine API if the API supports a source limitation.

The Current Related Entity Enhancer is responsible for adding queries to the query strategy that are premised on providing timely interesting content. This enhancer differs from the Entity Specific Enhancer and Facet Specific Enhancer in that it is not used to overcome the ambiguous naming of entities. Rather it is used to promote content related to the designated entity that is especially interesting at the moment. For example when Captain Chesley Sully Sullenberger landed a US Airways jet on the Hudson River queries to search engine APIs for US Airways returned results that were unambiguously about the airline but top results from some search engine API s were not about the landing on the Hudson even though they could access content related to the incident .

Given an entity the Current Related Entity Enhancer determines whether there are actions or entities that have had an unusually high rate of mention in relation to the designated entity over the past few hours compared to the rate over a longer period such as a week in a stream of news content. If there are such entities or actions then they are added to the query strategy in a way that would facilitate obtaining on topic results. In one embodiment the Current Related Entity Enhancer uses an Entity Popularity Database which tracks such hot entities and actions.

Thus on the day of the landing on the Hudson the query strategy for the entity US Airways might have been 

And on the day of the terrorist attacks in Mumbai in late 2008 the query strategy for entity Mumbai might have been 

The Related Entity Enhancer is responsible for adding queries to the query strategy that provide interesting content based upon entity relationships. Specifically in one embodiment this uses a database e.g. Entity Relation Database in of entity relation entity triplets that are extracted from a corpus of news articles and web documents generated using entity extraction and natural language disambiguation technology. It generates queries consisting of an entity s name and entities that are highly related to the that entity.

As explained which enhancers of are used to enhance a query for a designated entity depends upon the enhancement level indicated during an initial phase of determining what enhancements may be helpful. For example if the enhancement level indicated for example by the Enhancement Level Setter of indicates that entity level enhancement is required then the query strategy for the entity Twilight the teen vampire movie might be enhanced by the Entity Specific Enhancer to 

In this case the names of the main actor and director of the movie the values of the starring character and director properties of film facet are appended to the title of the film. Since entity level enhancement was deemed necessary in this embodiment the query strategy does not include any queries with less specific facet level disambiguation terms.

If entity level enhancement were not deemed necessary then instead the Facet Specific Enhancer may be invoked to modify the query strategy to 

In this case the second query contains the term premiere added because the facet of the designated entity is film e.g. facet and as the Rules indicate the premiere is a keyword worthy of addition. The terms trailer and stills may also be added. 

Finally the query strategy may additionally include source limitations limiting results to those from sites that are highly likely to be about films. For example the query may be further enhanced by the Source Selection Enhancer to 

In this case both queries in the query strategy limit results to those from a site dedicated to films called accesshollywood.com. 

Turning to another example suppose the designated entity is for skeleton the Olympic sport. For entities with the facet Olympic Sport the Category Specific Enhancer determines that limiting results to the broad category of sports is generally sufficient to get on topic results. Since some search engine API s enable the specification of categories of results the query strategy has a special field for high level e.g. broad categories. Later when the query strategy is translated into a set of concrete calls to the search engine API if the API is capable of limiting results by category then the Result Retriever will be responsible for translating the KBSES category field into the appropriate API parameter. In this case the resulting query strategy would be 

In the query strategies illustrated above each query included some type of enhancement. In some cases however in the process of setting an enhancement level it may be determined that no enhancement is required. In such cases the resultant query strategy may be just one query with only root terms. For example 

In addition in some cases even if an enhancement is preferred if the enhanced queries do not provide sufficient results for example some defined or configurable number or value an unenhanced query may stand a good chance of getting mostly relevant results. In this case the KBSES adds the unenhanced query as the last query in the query strategy as a fallback. For example suppose the entity in question is the album The Stranger by Billy Joel. If the Enhancement Level Setter determines that the unenhanced query has a reasonable chance of retrieving on topic results although an enhanced query would give better results the query strategy may be constructed as 

Other combinations of invoking the various enhancers and alternative logic within each enhancer can be similarly incorporated.

For example the enhancers may be used in different ways to generate query strategies for image video twitter type search API and for web search API. are an example flow diagram of logic used by an example KBSES enhancers to generate query strategies for Yahoo BOSS Image Search YouTube video search and Twitter search APIs. In block the enhancer logic of the KBSES determines the entity name. The name of the entity can be the name obtained from the Entity Database . Alternatively if there is a most common form name for the entity in the Most Common Form Name Database then the KBSES may use that name.

In block the KBSES invokes the Current Related Entity Enhancer to determine whether there is a related entity or action for the designated entity that has uncharacteristically high mention in a stream of current news sources or other timely content stream . If so in block the Current Related Enhancer adds a query to the query strategy consisting of the name of the designated entity from block and the related entity or action. If not the KBSES continues in block .

In block the KBSES determines whether an enhancement at all is needed based upon the determination of an Enhancement Level Setter. If not then in block the KBSES adds the unenhanced name of the designated entity as a query to the query strategy. If any kind of enhancement is indicated based upon the determination of the Enhancement Level Setter then the KBSES continues in block .

In block the KBSES determines if a facet level enhancement was indicated as sufficient as determined by a Enhancement Level Setter and if so continues to process facet level enhancements in blocks otherwise continues in block . In block the KBSES invokes the Facet specific Enhancer to add queries to the query strategy where each added query consists of the entity name from block and a keyword that is associated with the designated entity s facet as specified in the description of the Facet Specific Enhancer above. In this case the facet keyword associations have been hand curated selected for their ability to retrieve relevant results from the Yahoo BOSS Image YouTube video search and Twitter search API s and are listed in . In other example embodiments as discussed above with reference to the Facet Specific Enhancer above added queries may comprise named entities that are substituted or added as proxies for designated facets determined using local semantic index searches instead of hand curation.

In block the KBSES then invokes the Category Specific Enhancer to add queries to the query strategy where each added query consists of the entity name from block and designation of the content category to which results are to be limited as described with reference to the Category Specific Enhancer above.

In block the KBSES then invokes the Source Selection Enhancer to add queries to the query strategy where each added query consists of the entity name from block and set of content sources to be included or excluded from the search as described with reference to the Source Selection Enhancer above. The KBSES logic then continues processing in block

In block when it was determined that a facet specific enhancement was not sufficient the KBSES invokes an Entity Specific Enhancer to add queries to the query strategy where each added query consists of the entity name from block and terms or names of entities that appear in the designated entity s entry in the Entity Database as specified in the description of the Entity Specific Enhancer above. The entity facets and the corresponding parts of the Entity Database entry that are used by the Entity Specific Enhancer have been hand picked selected for their ability to retrieve relevant results from the Yahoo BOSS Image YouTube video search and Twitter search API s and are listed in .

In block the KBSES invokes the Related Entity Enhancer to add queries to the query strategy where each added query consists of the entity name from block and the name of an entity such that the two entities co occur frequently in a corpus of news and web pages as specified in the description of the Related Entity Enhancer above. The logic of the KBSES then continues in block .

In block the KBSES determines whether use of an unenhanced fallback query is allowed as indicated by the Enhancement Level Setter. If so then in block the KBSES logic then adds a query to the query strategy consisting of the entity name. The KBSES then finishes its processing of the query strategy to return it to be used by the Result Retriever.

Note that in other embodiments entity specific enhancements may be processed first regardless of whether facet specific enhancements were indicated as sufficient in order to place entity specific queries into the query strategy. For example blocks and may be processed before the test in block and the Entity Specific Enhancer invoked to add entity specific enhanced queries into the query strategy. In this case any facet specific enhancements determined by the Facet Specific Enhancer are added to the query strategy but typically only processed by the Result Retriever if and when the results returned are insufficient in amount. In such a scenario facet specific enhancements would not added when the Enhancement Level Setter determines that they would not be helpful e.g. blocks and of . Other arrangements are possible.

In block the KBSES invokes the Synonym Selection Enhancer to determine whether a set of useful synonyms should be added to the query strategy. In one embodiment this process is performed by retrieving a list of suggested queries from a 3party query suggestion service comparing this list to a list of aliases stored in the Entity Database for the designated entity and adding a query to the query strategy that reflects the names present on both lists the intersection of the lists .

In block the KBSES determines whether an enhancement at all is needed based upon the determination of an Enhancement Level Setter. If not then in block the KBSES adds the unenhanced name of the designated entity as a query to the query strategy. If any kind of enhancement is indicated based upon the determination of the Enhancement Level Setter then the KBSES continues in block .

In block the KBSES determines the designated entity s most common facet by looking up the entity in a Most Common Facet Database not shown which is created by compiling the frequency of occurrence of the entity in the context of one of one or more of its facets in a corpus. In this corpus each entity occurrence is assigned one or more of the entity s facets as listed in the Entity Database based on the context in which the entity occurs. For instance appearing in text describing his legal career an occurrence of Barack Obama would be assigned the facet Lawyer whereas appearing in text describing his presidential actions an occurrence of Barack Obama would be assigned the facets Politician and Country Leader .

In block the KBSES invokes the Facet Specific Enhancer to determine a list of related most commonly occurring facets and keywords given the entity s most common facet and to add queries to the query strategy where each added query consists of the entity name from block and the name of one of the determined keywords. In one embodiment a list of facet keyword and facet facet associations is mined as a separate procedure from an index of news articles and text documents by the following process 1 retrieving a list of entities that are tagged with a particular facet using the Evri Query Language EQL . For example for the facet Album the EQL query is Album . The search result is a list of subject action object triples. 2 Review the list of triples and count the frequency of occurrence of either a term or a facet. 3 Rank the facets and terms by their frequency of occurrence count and apply a threshold value to select the most common ones.

In block the KBSES invokes the Related Entity Enhancer to determine a set of entities related to the designated entity that also share a frequently occurring facet. The Related Entity Enhancer then adds queries to the query strategy where each added query consists of the entity name from block and the name of a related entity such that the two entities co occur frequently in a corpus of news and web pages as specified in the description of the Related Entity Enhancer above and the related entity has a facet that is on the list of related facets as determined in block . One of the reasons it may be useful to select related entities by preferred or frequently occurring facets is because an entity might have a large number of related entities e.g. for a musician the places she was born or has lived the schools she went to etc. . To identify a musician the related entities that will produce the most on topic results are usually her bands albums or other musician s bands.

In block the KBSES determines whether any related entities were found in the prior block and if not invokes the Entity Specific Enhancer to add queries to the query strategy where each added query consists of the entity name from block and the name of a related entity. In this embodiment the related entity is extracted from a free text description in an entry in the Entity Database corresponding to the designated entity where the related entity has a facet that is on the list of related facets determined in block . The KBSES then finishes its processing of the query strategy to return it to be used by the Result Retriever.

As described earlier with respect to the Facet Specific Enhancer of in some embodiments the initial user query itself involves a facet in addition to or instead of a named entity. In such cases as explained above it may be difficult to obtain on topic results from a third party keyword based search engine which will literally look only for occurrences of the named facet in the content to be searched. Thus instead of enhancing a query that specifies a named entity with keywords due to its inherent facets the system may use enhancers to substitute or expand named entities for facets. In one embodiment the Facet Specific Enhancer derives the named entities by performing mini searches on relationship semantic indexes to determine the most likely named entities for those facets. Then some number of these most likely named entities are substituted or added in some cases to the query to obtain more on topic results. Other combinations are possible as well.

The computing system may comprise one or more server and or client computing systems and may span distributed locations. In addition each block shown may represent one or more such blocks as appropriate to a specific embodiment or may be combined with other blocks. Moreover the various blocks of the Keyword Based Search Enhancement System may physically reside on one or more machines which use standard e.g. TCP IP or proprietary interprocess communication mechanisms to communicate with each other.

In the embodiment shown computer system comprises a computer memory memory a display one or more Central Processing Units CPU Input Output devices e.g. keyboard mouse CRT or LCD display etc. other computer readable media and one or more network connections . The KBSES is shown residing in memory . In other embodiments some portion of the contents some of or all of the components of the KBSES may be stored on and or transmitted over the other computer readable media . The components of the Keyword Based Search Enhancement System preferably execute on one or more CPUs and manage the generation of query strategies and use of query enhancers as described herein. Other code or programs and potentially other data repositories such as data repository also reside in the memory and preferably execute on one or more CPUs . Of note one or more of the components in may not be present in any specific implementation. For example some embodiments embedded in other software may not provide means for user input or display.

In a typical embodiment the KBSES includes one or more enhancement level setters one or more query enhancers a result retriever and one or more databases . In at least some embodiments the one or more of the databases are provided external to the KBSES and are available potentially over one or more networks . In addition in at least some embodiments the techniques for enhancing queries and developing a query strategy for 3party keyword based search API are available to other programs via KBSES API . Other and or different modules may be implemented. In addition the KBSES may interact via a network with third party keyword search engines as described herein one or more client computing systems and or one or more content provider systems such as purveyors of the news articles used to construct important entities data repository . Also of note the entity database data repository may be provided external to the KBSES as well for example in storage accessible over one or more networks .

In an example embodiment components modules of the KBSES are implemented using standard programming techniques. However a range of programming languages known in the art may be employed for implementing such example embodiments including representative implementations of various programming language paradigms including but not limited to object oriented e.g. Java C C Smalltalk etc. functional e.g. ML Lisp Scheme etc. procedural e.g. C Pascal Ada Modula etc. scripting e.g. Perl Ruby Python JavaScript VBScript etc. declarative e.g. SQL Prolog etc. etc.

The embodiments described above may also use well known or proprietary synchronous or asynchronous client server computing techniques. However the various components may be implemented using more monolithic programming techniques as well for example as an executable running on a single CPU computer system or alternately decomposed using a variety of structuring techniques known in the art including but not limited to multiprogramming multithreading client server or peer to peer running on one or more computer systems each having one or more CPUs. Some embodiments are illustrated as executing concurrently and asynchronously and communicating using message passing techniques. Equivalent synchronous embodiments are also supported by an KBSES implementation.

In addition programming interfaces to the data stored as part of the KBSES e.g. in the data repositories and can be available by standard means such as through C C C and Java APIs libraries for accessing files databases or other data repositories through scripting languages such as XML or through Web servers FTP servers or other types of servers providing access to stored data. The databases may be implemented as one or more database systems file systems or any other method known in the art for storing such information or any combination of the above including implementation using distributed computing techniques.

Also the example KBSES may be implemented in a distributed environment comprising multiple even heterogeneous computer systems and networks. For example in one embodiment the enhancement level setter the enhancers and the result retriever are all located in physically different computer systems. In another embodiment various modules of the KBSES are hosted each on a separate server machine and may be remotely located from the tables which are stored in the data repositories . Also one or more of the modules may themselves be distributed pooled or otherwise grouped such as for load balancing reliability or security reasons. Different configurations and locations of programs and data are contemplated for use with techniques of described herein. A variety of distributed computing techniques are appropriate for implementing the components of the illustrated embodiments in a distributed manner including but not limited to TCP IP sockets RPC RMI HTTP Web Services XML RPC JAX RPC SOAP etc. etc. Other variations are possible. Also other functionality could be provided by each component module or existing functionality could be distributed amongst the components modules in different ways yet still achieve the functions of an KBSES.

Furthermore in some embodiments some or all of the components of the KBSES may be implemented or provided in other manners such as at least partially in firmware and or hardware including but not limited to one ore more application specific integrated circuits ASICs standard integrated circuits controllers e.g. by executing appropriate instructions and including microcontrollers and or embedded controllers field programmable gate arrays FPGAs complex programmable logic devices CPLDs etc. Some or all of the system components and or data structures may also be stored e.g. as executable or other machine readable software instructions or structured data on a computer readable medium e.g. a hard disk a memory a network or a portable media article to be read by an appropriate drive or via an appropriate connection . Some or all of the system components and data structures may also be may also be stored as data signals e.g. by being encoded as part of a carrier wave or included as part of an analog or digital propagated signal on a variety of computer readable transmission mediums which are then transmitted including across wireless based and wired cable based mediums and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . Such computer program products may also take other forms in other embodiments. Accordingly embodiments of this disclosure may be practiced with other computer system configurations.

From the foregoing it will be appreciated that although specific embodiments have been described herein for purposes of illustration various modifications may be made without deviating from the spirit and scope of the present disclosure. For example the methods systems and techniques for performing enhanced queries using keyword based search tool API discussed herein are applicable to other architectures. Also the methods and systems discussed herein are applicable to differing protocols communication media optical wireless cable etc. and devices such as wireless handsets electronic organizers personal digital assistants portable email machines game machines pagers navigation devices such as GPS receivers etc. .

