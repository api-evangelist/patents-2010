---

title: Dynamically installing image processing
abstract: Methods, computer-readable media, and systems are provided for dynamically installing an image processing filter. One method for dynamically installing an image processing filter includes starting to obtain image information by infrastructure of an image processing device and processing the obtained image information with an application. After starting to obtain image information, receiving an operating system (OS) application programming interface (API) allowing just-in-time (JIT) bytecode to be executed as a filter during processing the obtained image information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09152437&OS=09152437&RS=09152437
owner: HEWLETT-PACKARD DEVELOPMENT COMPANY, L.P.
number: 09152437
owner_city: Houston
owner_country: US
publication_date: 20101028
---
As printing technology has progressed printing and imaging devices Scanners Single Function Printers and Multifunction Printers have included or been adapted to include and increasing number of functions. Some previous approaches to increasing the functionality of printing and imaging devices have included embedding the functionality e.g. image filters on the devices or installing additional functionality that can be recognized at boot time of the devices as a permanent solution when embedded functionality does not meet a particular goal.

Methods computer readable media and systems are provided for dynamically installing image processing. One method for dynamically installing image processing includes starting to obtain image information by infrastructure of an image processing device and processing the obtained image information with an application. After starting to obtain image information receiving an operating system OS application programming interface API allowing just in time JIT bytecode to be executed as a filter during processing the obtained image information.

As printing technology has progressed more printing and imaging devices Scanners Single Function Printers and Multifunction Printers are utilizing operating systems that support just in time compilation. Through the use of just in time compilation techniques the following disclosure describes a system and methods whereby a document workflow application that integrates imaging and printing devices can distribute scan or print transformation processing functions e.g. filters via a web service and then configure the filters operation via a web service to facilitate distributed processing and off loading the application server of these functions.

As used herein an image processing device can include a scanner a printer and a multifunction device that includes scanning and printing functionality. Such a device may also have additional functionality such as faxing. An image as used herein is intended to mean a two dimensional representation such as a scanned picture and or a printed output such a document. Image as used herein includes printed documents assembled from characters and formatting commands as well as those based on specified vectors and or pixel values.

As used herein image information includes image data and image metadata. Image data is that data directly defining the image and image metadata provides additional details concerning the image defined by the image data. Image metadata can include for example parameters about the image including format density size and pages among others.

The figures attempt to follow a numbering convention in which the first digit or digits correspond to the drawing figure number and the remaining digits identify an element or component in the drawing. Similar elements or components between different figures may be identified by the use of similar digits. For example may reference element in and a similar element may be referenced as in . Elements shown in the various figures herein can be added exchanged and or eliminated so as to provide a number of additional examples of the present disclosure. In addition the proportion and the relative scale of the elements provided in the figures are intended to illustrate the examples of the present disclosure and should not be taken in a limiting sense.

Bytecode may also be dynamically translated e.g. compiled by a just in time JIT compiler into machine language at runtime again providing better performance than direct interpretation of the source code . JIT compilers represent a hybrid approach with translation occurring continuously as with interpreters but with caching of translated code to minimize performance degradation. JIT compilation also offers other advantages over statically compiled code at development time such as handling of late bound data types and the ability to enforce security guarantees. JIT compilation converts code at runtime prior to executing it natively. Several modern runtime environments such as Microsoft s .NET Framework and most implementations of Java rely on JIT compilation for high speed code execution.

Intermediate representations such as bytecode may be output by programming language implementations to ease interpretation. Bytecode may be executed by parsing and directly executing the instructions one at a time. This kind of bytecode interpreter is very portable. Dynamic translators or JIT compilers translate bytecode into machine language as necessary at runtime. For example some functionalities are stored in bytecode format that is JET compiled to translate the bytecode to machine code just before execution thereof. This JIT compilation introduces a delay before the machine code can be run but improves execution speed considerably compared to direct interpretation of the source code normally by a factor of several times.

However JIT compilation can make the virtual machine unportable without losing the portability of the bytecode itself . Because of its performance advantage today many different language implementations execute a program in two phases first compiling the source code into bytecode and then passing the bytecode to the virtual machine. As such bytecode may be used to reduce hardware and operating system dependence since the same bytecode can be run on different platforms. Different parts of code may often be stored in separate files similar to object modules which are dynamically loaded during execution.

Dynamically installing image processing functions on the imaging processing device at the time of use can also enable customizing the processing for each image processing device dependent on the workflow requirements that the device is presently executing. Some previous approaches involve embedding image filters in the image processing device before processing a particular image e.g. scanned image print job . For example image processing for a scanned image may include a particular implementation of optical character recognition OCR . However image filters embedded in the image processing device before processing of a particular image might not be useful or used if the processing of the embedded filter is not required for the invoked image processing or did not meet the present image processing need s due to lack of functionality or features of the embedded image filter.

Some previous approaches install one or more additional filters as a permanent solution when an existing embedded filter did not meet the requirement for a particular image processing task. Again the additional filter is installed prior to the initiation of processing a subsequent particular image. Such additional filters employed by previous approaches were not based on JIT operating system OS technologies. Therefore the additional filter of previous approaches would have to be recognized at boot time. As such the additional filter could not be dynamically changed based on present need of an application during image processing.

According to one or more embodiments of the present disclosure and as shown in a system for dynamically installing image processing e.g. a filter on an image processing device e.g. a peripheral device can be implemented via a scan print image API which can be comprised of a set of device OS APIs that allow a JIT code e.g. JIT bytecode to be run that plug in as a filter within an image processing process.

Image processing device can be communicatively coupled to a computing device . Image processing device can include infrastructure which can be communicatively coupled to a scan print image API . Infrastructure is intended to connote the image processing apparatus such as the image input hardware e.g. scanner equipment and or image output hardware printing equipment . The scan print image API can include an image data portion and an image metadata portion downloaded onto the image processing device .

The JIT bytecode can operate as a filter inserted in an image processing e.g. imaging printing pipeline to receive a scanned image or print data from the image processing device infrastructure e.g. scanning equipment printing equipment transform the scanned image or print data and deliver the transformed image e.g. back to the infrastructure and or to a next step in the image processing process . For example a scanned image from the infrastructure of an image processing device can be transformed before being sent on for delivery or production e.g. output . In another example print data can be transformed prior to printing.

The JIT bytecode can also operate as a filter inserted in the image processing pipeline to receive scanned image metadata or print data metadata from the image processing device infrastructure for transformation transform the metadata and deliver the transformed metadata downstream in the print system or before scan image delivery .

The scan print image API can include an image data portion and an image metadata portion each of which includes JIT bytecode as described with respect to .

For example some software frameworks e.g. a .NET framework can be installed on computing devices running particular operating systems. These frameworks can include a large library of coded solutions to common programming problems and a common language infrastructure that manages the execution of programs written specifically for the framework. Some frameworks support multiple programming languages. A class library associated with the framework can provide a large range of features including user interface data access database connectivity cryptography web application development numeric algorithms and network communications. The class library is used by programmers who can combine it with their own code to produce applications.

Programs written for a particular framework can execute in an environment that manages the program s runtime requirements. A Common Language Runtime CLR can provide the appearance of an application virtual machine so that programmers need not consider the capabilities of the specific CPU that will execute the program. The CLR also can provide other important services such as security memory management and exception handling. The class library and the CLR together can constitute a framework such as the .NET Framework.

A .Net cs file is one example of JIT bytecode. The .cs files are source code files created in a particular C style programming language that is type safe and object oriented and designed for building a variety of applications that run on the .NET Framework including XML Web services and connected applications for certain computer operating systems and the Web.

According to one or more embodiments of the present disclosure a device Web service API can be a set of Web service APIs that allow a server to implement a JIT Bytecode install service. For example the Web service APIs can be located on a server which is communicatively coupled to the image processing device via a network such as the Internet e.g. similar to the arrangement between API and image processing device shown in .

The Web service APIs can be located on a server which is communicatively coupled to the image processing device via a network such as the Internet e.g. similar to the arrangement between API and image processing device shown in . The image processing device may have a scan print image API such as shown in at . During the development of the server client application the scan image print API can be used by an application developer to create the transformation algorithms for the scanned images or print data into the JIT bytecode.

The install service enables a server client application i.e. a client application running on the server to download a JIT bytecode to the imaging processing device e.g. a multifunction device with imaging and printing functionality . The JIT bytecode download can occur as the image processing device solution e.g. of an application is initially configured on a periodic basis or on demand such as when the application requests a dynamic link library DLL be installed. The downloaded JIT bytecode can result in the image processing device configuration illustrated by .

A DLL is a collection of small programs which can be called upon when needed by an executable program EXE that is running. The DLL lets the executable program communicate with a specific device such as a printer or may contain source code to do particular functions. A DLL is an executable file that executes from inside an executable file. To load a DLL file an executable calls the DLL function along with the required parameters since a DLL may have many different functions in it.

This allows the executable to be smaller in size and not have to write a function that may be used by many executable programs. An advantage of DLL files is that because they do not get loaded into random access memory RAM together with the main program space is saved in RAM. Therefore a DLL file can be loaded into Ram only when it is called. For example a printer DLL file does not need to be loaded into RAM while editing a document in a word processing program until a printing function is initiated. At that time the printer DLL file can be loaded into RAM and a call is made to print.

In some embodiments the installation process can provide one or more reference tags . Reference tags can be used by the server to identify to the device what JIT bytecode to use when processing required. For example a reference tag may be configured to indicate that a portion of JIT bytecode be used that pertains to image processing of a scanned image or a reference tag may be configured to indicate that a portion of JIT bytecode be used that pertains to image processing before printing an image.

According to one or more embodiments of the present disclosure a device Web service API can be a set of Web service APIs that allow a server to implement a JIT bytecode can implement an execution configuration service. A server client application can have a workflow application configured as e.g. into an image processing device e.g. an imaging and printing device . The JIT bytecode implementing the execution configuration service can be implemented so as to identify for that workflow which JIT bytecode to use or specify a portion of a JIT bytecode to use in processing of that workflow operation e.g. scan or print . This can be accomplished for example via a reference tag as described above.

The Web service APIs can be located on a server which is communicatively coupled to the image processing device via a network such as the Interne e.g. similar to the arrangement between API and image processing device shown in . The image processing device may have a scan print image API such as shown in at . During the development of the server client application the scan image print API can be used by an application developer to create the transformation algorithms for the scanned images or print data into the JIT bytecode.

The server client application can download the JIT bytecode to the image processing device at an appropriate time via the JIT bytecode install service as described above . For example the JIT bytecode may be downloaded to the image processing device during initial install of the application or during execution of the application. During execution the application can choose based on system load or other performance parameters to either have the image and printing device perform the transformation or the server perform the transformation. This would be accomplished by the application using the JIT bytecode execution configuration service to indicate whether the JIT bytecode is to be configured to be used in a scan and or print pipeline or not. This can be accomplished by specifying an appropriate reference tag .

Alternatively the application could determine that a specific transformation function is required based on the workflow of the image processing device and download the appropriate JIT bytecode at that time. This might occur during execution of a workflow. An application interacting with a user at a device can determine that the document that a user is attempting to scan or print needs to be transformed using a particular algorithm. The application can cause downloading of a particular JIT bytecode containing the required algorithm and indicate via a reference tag to the image processing device to use the particular JIT bytecode when processing the document. Once the image processing device has been configured to use the JIT bytecode the image processing device will utilize the OS JIT technology to compile the JIT bytecode into the system in the scan or print pipeline during processing of the scanned document or receipt of the document to print .

As will be appreciated in this manner the system of the present disclosure does not require embedding a filter into the image processing device. Further utilization of JIT compilation technologies allows for dynamic installation and execution of image processing filters to facilitate process load balancing e.g. between image processing device and server or adaptive processing of workflow based on workflow conditions.

A second computing device is also shown in being communicatively coupled to the network such that executable instructions may be communicated through the network between the first and second computing devices. Computing device may include one or more processors communicatively coupled to a non transitory computer readable medium . The non transitory computer readable medium may be structured to store executable instructions e.g. one or more programs that can be executed by the one or more processors and or data. The computer executable instructions can for example implement a scan print image API JIT bytecode install service and or JIT bytecode execution configuration service among other instructions as indicated at . The second computing device may be further communicatively coupled to a production device such as an electronic display and or image processing device e.g. multifunction device including scanner and printer . Second computing device can also be communicatively coupled to an external computer readable memory .

Image processing device may include one or more processors communicatively coupled to a non transitory computer readable medium . Image processing device may include infrastructure such as equipment for scanning and or printing. The non transitory computer readable medium may be structured to store executable instructions e.g. one or more programs that can be executed by the one or more processors and or data. The computer executable instructions can for example implement a scan print image API e.g. shown in . The second computing device can cause an output to the production devices and or for example as a result of executing instructions of one or more programs stored non transitory computer readable medium by the at least one processor to implement a system for dynamically installing image processing according to the present disclosure. Causing an output can include but is not limited to displaying text and images to an electronic display and or printing text and images to a tangible medium e.g. paper . The second computing device can also receive an input from the production device and or such keyboard input or a scanned in image. Executable instructions to dynamically install image processing may be executed by the first and or second computing device stored in a database such as may be maintained in external computer readable memory output to production device and or printed to a tangible medium.

First and second computing devices are communicatively coupled to one another through the network . While the computing system is shown in as having only two computing devices the computing system can be comprised of additional multiple interconnected computing devices such as server devices and or clients. Each computing device can include control circuitry such as a processor a state machine application specific integrated circuit ASIC controller and or similar machine. As used herein the indefinite articles a and or an can indicate one or more than one of the named object. Thus for example a processor can include one processor or more than one processor such as a parallel processing arrangement.

The control circuitry can have a structure that provides a given functionality and or execute computer readable instructions that are stored on a non transitory computer readable medium e.g. . The non transitory computer readable medium can be integral e.g. or communicatively coupled e.g. to the respective computing device e.g. in either in a wired or wireless manner. For example the non transitory computer readable medium can be an internal memory a portable memory a portable disk or a memory located internal to another computing resource e.g. enabling the computer readable instructions to be downloaded over the Internet . The non transitory computer readable medium can have computer readable instructions stored thereon that are executed by the control circuitry e.g. processor to provide a particular functionality.

The non transitory computer readable medium as used herein can include volatile and or non volatile memory. Volatile memory can include memory that depends upon power to store information such as various types of dynamic random access memory DRAM among others. Non volatile memory can include memory that does not depend upon power to store information. Examples of non volatile memory can include solid state media such as flash memory EEPROM phase change random access memory PCRAM among others. The non transitory computer readable medium can include optical discs digital video discs DVD high definition digital versatile discs HD DVD compact discs CD laser discs and magnetic media such as tape drives floppy discs and hard drives solid state media such as flash memory EEPROM phase change random access memory PCRAM as well as other types of machine readable media.

The non transitory computer readable medium can be integral or communicatively coupled to a computing device in either in a wired or wireless manner. For example the non transitory computer readable medium can be an internal memory a portable memory a portable disk or a memory located internal to another computing resource e.g. enabling the computer readable instructions to be downloaded over the Internet . The non transitory computer readable medium can have computer readable instructions stored thereon that are executed by the processing resources e.g. control circuitry processor s to provide a particular functionality.

The CRM can be in communication with the processor resources via a communication path . The communication path can be local or remote to a machine associated with the processor resources . Examples of a local communication path can include an electronic bus internal to a machine such as a computer where the CRM is one of volatile non volatile fixed and or removable storage medium in communication with the processor resources via the electronic bus. Examples of such electronic buses can include Industry Standard Architecture ISA Peripheral Component Interconnect PCI Advanced Technology Attachment ATA Small Computer System Interface SCSI Universal Serial Bus USB among other types of electronic buses and variants thereof.

In other examples the communication path can be such that the CRM is remote from the processor resources such as in the example of a network connection between the CRM and the processor resources e.g. the communication path can be a network connection . Examples of such a network connection can include a local area network LAN a wide area network WAN a personal area network PAN the Internet among others. In such examples the CRM may be associated with a first computing device e.g. a server and the processor resources may be associated with a second computing device e.g. a client . The first and second computers can be in communication via a networked communication path .

Although specific examples have been illustrated and described herein those of ordinary skill in the art will appreciate that an arrangement calculated to achieve the same results can be substituted for the specific examples shown. This disclosure is intended to cover adaptations or variations of one or more examples of the present disclosure. It is to be understood that the above description has been made in an illustrative fashion and not a restrictive one. Combination of the above examples and other examples not specifically described herein will be apparent to those of skill in the art upon reviewing the above description. The scope of the one or more examples of the present disclosure includes other applications in which the above structures and methods are used. Therefore the scope of one or more examples of the present disclosure should be determined with reference to the appended claims along with the full range of equivalents to which such claims are entitled.

In Detailed Description some features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the disclosed examples of the present disclosure have to use more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment.

