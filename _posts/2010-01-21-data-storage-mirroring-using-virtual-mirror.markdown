---

title: Data storage mirroring using virtual mirror
abstract: There is provided a method and apparatus for implementing a virtual mirror of a primary storage device () on a secondary storage device (). The method comprises providing a map () for translating primary data storage locations on said primary storage device () to secondary data storage locations on said secondary storage device () and utilizing said map () to enable data stored on said secondary storage device () to mirror data stored on said primary storage device (). By providing such a method, the requirements of the primary and secondary disks () can be decoupled such that a smaller secondary disk () could be used with a larger primary () which will not be filled to capacity. This reduces the unused capacity on the secondary disk () which would otherwise be wasted. Further, this approach allows for the replacement of the primary and secondary disks () to be independent of each other, provided the size of the secondary disk () remains at least as large as the size of the data on the primary disk ().
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08510507&OS=08510507&RS=08510507
owner: Xyratex Technology Limited
number: 08510507
owner_city: Havant
owner_country: GB
publication_date: 20100121
---
The present invention relates to a method of and apparatus for providing a virtual mirror of a primary storage device on a secondary storage device.

Commonly redundant arrays of inexpensive disk RAID arrays are the primary storage architecture for large networked computer storage systems. The RAID architecture was first disclosed in A Case for Redundant Arrays of Inexpensive Disks RAID Patterson Gibson and Katz University of California Berkeley . RAID architecture combines multiple small inexpensive disk drives into an array of disk drives that yields performance exceeding that of a single large drive.

There are a number of different RAID architectures designated as RAID 1 through RAID 6. Each architecture offers disk fault tolerance and offers different trade offs in terms of features and performance. In addition to the different architectures a non redundant array of disk drives is referred to as a RAID 0 array. RAID controllers provide data integrity through redundant data mechanisms high speed through streamlined algorithms and accessibility to stored data for users and administrators.

RAID architecture provides data redundancy in two basic forms mirroring RAID 1 and parity RAID 3 4 5 and 6 . The implementation of mirroring in RAID 1 architectures involves creating an identical image of the data on a primary disk on a secondary disk. The contents of the primary and secondary disks in the array are identical. RAID 1 architecture requires at least two drives and has increased reliability when compared to a single disk. Since each disk contains a complete copy of the data and can be independently addressed reliability is increased by a factor equal to the power of the number of independent mirrored disks i.e. in a two disk arrangement reliability is increased by a factor of four. Normally data is mirrored onto physically identical drives though the process can be applied to logical drives where the underlying physical format is hidden from the mirroring process.

Mirroring enables a system to automatically maintain one or more copies of data so that in the event of a disk hardware failure a system can quickly recover lost data. Mirroring may be performed locally and or remotely as part of a disaster recovery process.

Usually mirroring is achieved using hardware approaches such as disk arrays or is written in software within the operating system. As data is written to a primary disk a copy is written automatically to one or more secondary disks. Data can be read from either disk and a high performance system would recognize which disk was in a better physical state to retrieve the data most quickly. In the event of a disk failure it is typical for the faulty disk to be replaced and the data backed up from the remaining operational disk to the new disk.

RAID 3 4 5 or 6 architectures generally utilise three or more disks of identical capacity. In these architectures two or more of the disks are utilised for reading writing of data and one of the disks stores parity data. Data interleaving across the disks is usually in the form of data striping in which the data to be stored is broken down into blocks called stripe units . The stripe units are then distributed across the disks. Therefore should one of the disks in a RAID group fail or become corrupted the missing data can be recreated from the data on the other disks. The data may be reconstructed through the use of the redundant stripe units stored on the remaining disks. However RAID architectures utilising parity configurations need to generate and write parity data during a write operation. This may reduce the performance of the system.

Minor architectures such as RAID 1 generally show improved performance when compared to parity based architectures because there is no need to generate parity data. However a disadvantage of mirror architectures such as RAID 1 is that an additional identical disk is required for each minor. Modern mirroring solutions generally require two or more physical storage destinations with the secondary target drive s having capacities at least equal to the primary drive. In some solutions the secondary drive has to be identical to the primary in order for the system to operate.

In a typical storage resource drives or volumes are generally configured with unused free storage space in order to accommodate future growth and to facilitate adequate file system operation. The amount of free space varies from system to system but typically ranges from 25 to 100 of the size of the data set. This generally translates into the primary drive having approximately 20 50 free capacity. Indeed many file systems and protocols require a minimum of 15 20 free capacity in order to operate effectively for example by requiring space for use as virtual memory.

Therefore since many mirroring solutions require the secondary drive or drives to have a capacity which is equal to or greater than the primary drive then the unused storage space on the primary drive results in at least the same amount of unused storage space on the secondary drive or drives. Any free capacity on the primary drive will be effectively multiplied by the total number of primary and secondary drives in the RAID 1 array.

Also if the primary drive needs to be replaced for example to be upgraded in size then the or each secondary drive must also be replaced to correspond to the primary. One reason for this is that many file systems store data across the whole of a hard disk irrespective of the currently used capacity of the disk. In that scenario providing a secondary disk which is smaller and or of different configuration to the primary disk will lead to errors because the file system will attempt to copy data to a region of the secondary disk which may not exist.

Therefore known storage provision arrangements suffer from a technical problem that the secondary disk or disks are effectively coupled to the primary disk in terms of size and configuration. This multiplies the unused capacity of a primary disk and increases maintenance cost resource requirements power consumption and the risk of drive failure.

According to a first aspect of the present invention there is provided a method of providing a virtual mirror of a primary storage device on a secondary storage device the method comprising providing a map for translating primary data storage locations on said primary storage device to secondary data storage locations on said secondary storage device and utilising said map to enable data stored on said secondary storage device to mirror data stored on said primary storage device.

By providing such a method the requirements of the primary and secondary disks can be decoupled such that a smaller secondary disk could be used with a larger primary which will not be filled to capacity. This reduces the unused capacity on the secondary disk which would otherwise be wasted. Further this approach allows for the replacement of the primary and secondary disks to be independent of each other provided the size of the secondary disk remains at least as large as the size of the data on the primary disk.

In a variation the method further comprises defining a plurality of primary storage segments on the primary storage device each primary storage segment having a primary index defining a plurality of secondary storage segments on the secondary storage device each secondary storage segment having a secondary index wherein the step of providing said map comprises storing for at least one primary index of a primary storage segment a corresponding secondary index of a secondary storage segment such that the or each secondary storage segment is mapped to a respective primary storage segment.

This approach provides a convenient way of denoting the data storage locations on the primary and the secondary storage devices and by storing the segment indices in the map enables the secondary storage device to function as a mirror i.e. an exact or identical copy of the primary even though the data structure on the secondary storage device may be different from that on the primary storage device.

In one example the method further comprises writing data to at least one primary storage segment determining the primary segment index of the or each primary storage segment selecting one or more available secondary storage segments storing the secondary index of the or each selected secondary storage segment against the primary segment index of said the or each primary storage segment and writing a copy of said data to the or each corresponding secondary storage segment associated with the or each primary storage segment.

This approach enables a write to occur to the secondary storage device without the need to mirror the exact logical block address to which the data on the primary storage device has been written to. This enables the data to be packaged differently in a more space efficient and convenient fashion also enabling for example defragmentation operations to be carried out on the secondary storage device alone.

According to a second aspect of the present invention there is provided a method of providing a virtual mirror of a primary storage device on a secondary storage device the method comprising defining a plurality of primary storage segments on the primary storage device each primary storage segment having a primary index writing data to at least one primary storage segment of the primary storage device determining the primary segment index of the or each primary storage segment selecting one or more available secondary storage segments on the secondary storage device storing the secondary index of the or each selected secondary storage segment against the primary segment index of the or each primary storage segment to which the data has been written to and writing a copy of said data to the or each selected secondary storage segments.

This approach enables a write to occur to the secondary storage device without the need to mirror the exact logical block address to which the data on the primary storage device has been written to. This enables the data to be packaged differently in a more space efficient and convenient fashion also enabling for example defragmentation operations to be carried out on the secondary storage device alone.

In one approach the step of selecting further comprises selecting an available secondary storage segment from said secondary storage segments. The free secondary storage segment may be selected by any suitable search criteria for example sequential.

In one example the step of selecting further comprises selecting the first available secondary storage segment from the start of the sequence of said secondary storage segments. This provides a compact and space efficient method of storing data on the secondary storage device. In a variation the step of selecting further comprises identifying the first available secondary storage segment from a bitmap file or memory location.

In another example the method further comprises for the data to be written calculating the byte offset from the start of the or each said secondary storage segment.

In a variation the method further comprises reading data from a virtual mirror of said primary storage device on said secondary storage device said step of reading data comprising determining the primary index of the primary storage segment corresponding to said data determining the secondary index of said of the secondary storage segment stored against said primary index and reading said data from the secondary storage segment having said secondary index.

This approach enables data to be read from the secondary storage device in situations when for example faster data access can provided by requesting from this device as opposed to the primary storage device. This affords greater flexibility.

According to a third aspect of the present invention there is provided a method of reading data from a virtual mirror of a primary storage device on a secondary storage device the primary storage device having a plurality of primary storage segments defined thereon each primary storage segment having a primary index the secondary storage device having a plurality of secondary storage segments defined thereon each secondary storage segment having a secondary segment index the method comprising determining the primary index of the primary storage segment corresponding to said data determining the secondary index stored against said primary index and reading said data from the secondary storage segment having said secondary index.

This approach enables data to be read from the secondary storage device in situations when for example faster data access can provided by requesting from this device as opposed to the primary storage device. This affords greater flexibility.

In one variation the method further comprises for the data to be read calculating the byte offset from the start of the or each said secondary storage segment.

In one example said primary storage segments are the same size. In another example said secondary storage segments are the same size. This is beneficial for the operation of the file system.

In a further example said primary storage segments and said secondary storage segments are the same size. This approach enables accurate translation between the primary and secondary storage segments.

In a variation said primary storage segments have a size equal to or greater than the size of a logical block on said primary storage device.

In one example said secondary storage segments have a size equal to or greater than the size of a logical block on said secondary storage device.

In one arrangement the map comprises a look up table. This is a convenient method for storing data regarding the translation between primary and secondary storage locations which may include the primary and secondary indices.

In a variation said primary and secondary storage devices are controlled by a controller and said look up table is stored in a memory of said controller and or in a non volatile memory. By providing off host management on the controller efficient management of the storage resource is possible. Alternatively or additionally the look up table may be stored in a non volatile memory. This memory may be located on host or off host. The memory must be non volatile in the sense that the look up table is required to be stored even when the controller or system is shut down. Therefore non volatile or semi permanent storage media are preferred for this memory. The memory may comprise for example storage space on the primary or secondary storage devices or storage space on an alternative hard disk drive or solid state memory storage.

In an alternative variation said primary and secondary storage devices are connected to a host computer and said look up table is stored on said host computer. By providing on host management of the primary and secondary storage devices the need for a specialised controller is removed.

In an example the primary and secondary storage devices are of different storage capacity and or configuration. This approach enables the size and or configuration requirements of the primary and secondary storage devices to be decoupled i.e. the secondary device may be much smaller than the primary device provided the secondary has sufficient space for the data stored on the primary . Alternatively if primary and secondary devices are the same sizes then if the primary device is upgraded to a larger size the secondary device may not need upgrading.

According to a fourth aspect of the present invention there is provided a controller for providing a virtual minor of a primary storage device on a secondary storage device the controller being operable to provide a map for translating primary data storage locations on said primary storage device to secondary data storage locations on said secondary storage device and utilise said map to enable data stored on said secondary storage device to minor data stored on said primary storage device.

By providing such an arrangement the primary and secondary disks can be decoupled such that for example a smaller secondary disk could be used with a larger primary which will not be filled to capacity. This reduces the unused capacity on the secondary disk which would otherwise be wasted. Further should the primary disk be replaced with for example a larger capacity disk if the capacity of the secondary disk is at least equal to the utilised portion of the new primary disk then the secondary disk need not be replaced.

In an example the controller is further operable to define a plurality of primary storage segments on a primary storage device each primary storage segment having a primary index define a plurality of secondary storage segments on a secondary storage device each secondary storage segment having a secondary index wherein the controller is further operable to provide said map by storing for at least one primary index of a primary storage segment a corresponding secondary index of a secondary storage segment in order to map the or each secondary storage segment to a respective primary storage segment.

This arrangement provides a convenient way of denoting the data storage locations on the primary and the secondary storage devices and by storing the segment indices in the map enables the secondary storage device to function as a mirror i.e. an exact or identical copy of the primary even though the data structure on the secondary storage device may be different from that on the primary storage device.

In one arrangement the controller is further operable to write data to at least one primary storage segment to determine the primary segment index of the or each primary storage segment to select one or more available secondary storage segments to store the secondary index of the or each selected secondary storage segment against the primary segment index of said the or each primary storage segment and to write a copy of said data to the or each corresponding secondary storage segment associated with the or each primary storage segment.

This arrangement enables a write to occur to the secondary storage device without the need to mirror the exact logical block address to which the data on the primary storage device has been written to. This enables the data to be packaged differently in a more space efficient and convenient fashion also enabling for example defragmentation operations to be carried out on the secondary storage device alone.

According to a fifth aspect of the present invention there is provided a controller for providing a virtual mirror of a primary storage device on a secondary storage device the controller being operable to define a plurality of primary storage segments on a primary storage device each primary storage segment having a primary index to write data to at least one primary storage segment of the primary storage device to determine the primary segment index of the or each primary storage segment to select one or more available secondary storage segments on the secondary storage device to store the secondary index of the or each selected secondary storage segment against the primary segment index of the or each primary storage segment to which the data has been written to and to write a copy of said data to the or each selected secondary storage segments.

This arrangement enables a write to occur to the secondary storage device without the need to mirror the exact logical block address to which the data on the primary storage device has been written to. This enables the data to be packaged differently in a more space efficient and convenient fashion also enabling for example defragmentation operations to be carried out on the secondary storage device alone.

In an example the controller is further operable to select an available secondary storage segment from said secondary storage segments. The free secondary storage segment may be selected by any suitable search criteria for example sequential.

In one arrangement the controller is further operable to select the first available secondary storage segment from the start of the sequence of said secondary storage segments. This provides a compact and space efficient method of storing data on the secondary storage device. In a variation the controller is further operable to identify the first available secondary storage segment from a bitmap file or memory location.

In another arrangement the controller is further operable for the data to be written to calculate the byte offset from the start of the or each said secondary storage segment.

In a variation the controller is further operable to read data from a virtual mirror of said primary storage device on said secondary storage device the controller being operable to determine the primary index of the primary storage segment corresponding to said data to determine the secondary index of said of the secondary storage segment stored against said primary index and to read said data from the secondary storage segment having said secondary index.

According to a sixth aspect of the present invention there is provided a controller for reading data from a virtual mirror of a primary storage device on a secondary storage device the primary storage device having a plurality of primary storage segments defined thereon each primary storage segment having a primary index the secondary storage device having a plurality of secondary storage segments defined thereon each secondary storage segment having a secondary segment index the controller being operable to determine the primary index of the primary storage segment corresponding to said data to determine the secondary index stored against said primary index and to read said data from the secondary storage segment having said secondary index.

In one arrangement the controller is further operable for the data to be read to calculate the byte offset from the start of the or each said secondary storage segment.

In one example said primary storage segments are the same size. In another example said secondary storage segments are the same size. In a further example said primary storage segments and said secondary storage segments are the same size.

In a variation said primary storage segments have a size equal to or greater than the size of a logical block on said primary storage device. In a further variation said primary storage segments have a size which is an integer multiple of the size of a logical block on said primary storage device.

In one example said secondary storage segments have a size equal to or greater than the size of a logical block on said secondary storage device. In a further example secondary storage segments have a size which is an integer multiple of the size of a logical block on said secondary storage device.

In one variation the map comprises a look up table. This is a convenient method for storing data regarding the translation between primary and secondary storage locations which may include the primary and secondary indices.

In one arrangement the controller further comprises a memory and said look up table is stored in the memory.

In an alternative arrangement the controller is connected to a host computer and said look up table is stored on said host computer.

In one example the controller is a RAID controller. In a further example the RAID controller is implemented in hardware or software. For example the RAID controller could be implemented in on host software in software off host or in hardware such as RAID controller firmware.

In an example the primary and secondary storage devices are of different storage capacity and or configuration.

This arrangement enables the size and or configuration requirements of the primary and secondary storage devices to be decoupled i.e. the secondary device may be much smaller than the primary device provided the secondary has sufficient space for the data stored on the primary . Alternatively if primary and secondary devices are the same sizes then if the primary device is upgraded to a larger size the secondary device may not need upgrading.

According to a seventh aspect of the present invention there is provided data storage apparatus comprising a primary storage device a secondary storage device and a controller according to the fourth fifth or sixth aspects.

According to an eighth aspect of the present invention there is provided a computer program product executable by a programmable processing apparatus comprising one or more software portions for performing the steps of the first to third aspects.

According to a ninth aspect of the present invention there is provided a computer usable storage medium having a computer program product according to the eighth aspect stored thereon.

The hosts are connected to a first communication network which couples the hosts to a plurality of RAID controllers . The communication network may take any suitable form and may comprise any form of electronic network that uses a communication protocol for example a local network such as a LAN or Ethernet or any other suitable network such as a mobile network or the internet.

The RAID controllers are connected through device ports not shown to a second communication network which is also connected to a plurality of storage devices . The RAID controllers may comprise any storage controller devices that process commands from the hosts and based on those commands control the storage devices . RAID architecture combines a multiplicity of small inexpensive disk drives into an array of disk drives that yields performance that can exceed that of a single large drive. This arrangement enables high speed access because different parts of a file can be read from different devices simultaneously improving access speed and bandwidth. Additionally each storage device comprising a RAID array of devices appears to the hosts as a single logical storage unit LSU or drive.

The operation of the RAID controllers may be set at the Application Programming Interface API level. Typically Original Equipment Manufactures OEMs provide RAID networks to end users for network storage. OEMs generally customise a RAID network and tune the network performance through an API.

Any number of RAID controllers may be provided and N RAID controllers where N is an integer are shown in . Any number of storage devices may be provided in N storage devices are shown where N is any integer value.

The second communication network may comprise any suitable type of storage controller network which is able to connect the RAID controllers to the storage devices . The second communication network may take the form of for example a SCSI network an iSCSI network or fibre channel.

The storage devices may take any suitable form for example tape drives disk drives non volatile memory or solid state devices. Although most RAID architectures use hard disk drives as the main storage devices it will be clear to the person skilled in the art that the embodiments described herein apply to any type of suitable storage device. More than one drive may form a storage device for example a RAID array of drives may form a single storage device . The skilled person will be readily aware that the above features of the present embodiment could be implemented in a variety of suitable configurations and arrangements.

The RAID controllers and storage devices also provide data redundancy. The RAID controllers provide data integrity through a built in redundancy which includes data mirroring. The RAID controllers are arranged such that should one of the drives in a group forming a RAID array fail or become corrupted the missing data can be recreated from the data on the other drives. The data may be reconstructed through the use of data mirroring. In the case of a disk rebuild operation this data is written to a new replacement drive that is designated by the respective RAID controller .

The physical drives are controlled by the RAID controller which is connected to the physical drives through the second communication network . The second communication network may take any suitable form for example an iSCSI network. Under the control of the RAID controller the physical drives form part of a conventional RAID 1 network.

In this arrangement an exact copy or mirror of a set of data on the primary physical drive is created on the secondary physical drive . Consequently the data segments A to A on the primary physical drive are mirrored exactly on the secondary physical drive . Such an array can only be as large as the smaller of the primary and secondary physical drives . The secondary physical drive contains a complete copy of the data on the primary physical drive and since the secondary physical drive can be addressed independently reliability is raised by a power of two.

In an alternative arrangement a RAID controller may be provided for each physical drive . This is known as duplexing. In this arrangement when reading the physical drives can be accessed independently and requested sectors can be split evenly between the physical drives . In a further alternative additional secondary physical drives may be provided each additional secondary physical drive being identical to the primary physical drive and identical to the secondary physical drive shown in .

In the above cases the primary physical drive and secondary physical drive are required to be identical. Consequently any unutilised free space on the primary physical drive is effectively multiplied by provision of one or more identical secondary physical drives . Further should the primary physical drive be required to be replaced for example with a larger capacity drive to increase the storage capacity of the network resource then the or each secondary physical drive must also be replaced.

The host comprises a general purpose computer PC which is operated by a user and which has access to the storage resource . A graphical user interface GUI is run on the host . The GUI is a software application which acts as a user interface for a user of the host .

The RAID controller comprises a software application layer an operating system and RAID controller hardware . The software application layer comprises software applications including the algorithms and logic necessary for the initialisation and run time operation of the RAID controller . The software application layer includes software functional blocks such as a system manager for fault management task scheduling and power management. The software application layer also receives commands from the host e.g. assigning new volumes read write commands and executes those commands. Commands that cannot be processed because of lack of space available for example are returned as error messages to the user of the host .

The operating system utilises an industry standard software platform such as for example Linux upon which the software applications forming part of the software application layer can run. The operating system comprises a file system which enables the RAID controller to store and transfer files and interprets the data stored on the primary and secondary drives into for example files and directories for use by the operating system .

The RAID controller hardware is the physical processor platform of the RAID controller that executes the software applications in the software application layer . The RAID controller hardware comprises a microprocessor memory and all other electronic devices necessary for RAID control of the primary and secondary storage devices . The RAID controller also comprises the firmware or software virtual mirror for data mirroring operations on the primary and secondary storage devices . The virtual mirror VM is configured to translate the physical layout of the secondary device such that the secondary device appears to the file system and operating system as a mirror of the primary storage device . The virtual mirror comprises a segment map SM . This will be discussed later.

The primary storage device comprises a hard disk drive generally of high capacity for example 1 TB. The primary storage device can be accessed by the host through the RAID controller to read write data. The secondary storage device also comprises a hard disk drive generally of high capacity for example 500 GB to 1 TB. However as will be described the secondary storage device need not be identical to the primary storage device and may be smaller in capacity. The secondary storage device can be accessed by the host through the RAID controller to read write data independently of the primary storage device .

In use the secondary storage device will generally contain a duplicate of the data stored on the primary storage device . However whilst the data stored on the secondary storage device is the same as the data stored on the primary storage device the embodiment of the present invention enables the packaging of the data to be different. This enables the requirements of the primary and secondary storage devices to be effectively decoupled in contrast to the arrangement shown in and described with reference to .

As a result of the analysis of the primary storage device the segment map SM is created and is stored in the RAID controller .

The virtual mirror is also configured to analyse the secondary storage device and to define thereon a plurality of secondary storage segments . Each secondary storage segment is preferably of equal size and is preferably equal in size to each of the primary storage segments . A secondary index is assigned to each of the secondary storage segments which is then saved as part of the SM

The SM provides a map between the primary index of each primary storage segment containing data and the next available secondary storage segment having a secondary index . The virtual mirror is configured to perform this operation for all primary storage segments forming the storage capacity of the primary storage device . In this case the SM can be used to provide a translation map schematically illustrated in between the primary and secondary storage devices . This enables the data contained on the primary storage device within one or more primary storage segments to be saved to the secondary storage device within secondary storage segments having different secondary indices to the respective primary storage segments .

Consequently whilst the data corresponding to each primary storage segment has duplicate copy on the secondary storage device the data is not necessarily stored in the same order or in the same place on the secondary storage device as on the primary storage device . Therefore the secondary storage device is not required to be identical to the primary storage device effectively decoupling the two devices from one another. The secondary storage device may consequently be smaller in capacity than the primary storage device provided that the capacity of the secondary storage device is sufficient to contain all the data stored on the primary storage device .

At step the host generates a write request for a specific volume e.g. primary storage device to which it has been assigned access rights. The request is sent via communication network to the host ports not shown of the RAID controller . The write command is then stored in a local cache not shown forming part of the RAID controller hardware of the RAID controller .

The RAID controller is programmed to respond to any commands that request write access to the primary storage device . The RAID controller processes the write request from the host and determines the region of the primary storage device to which to write new data to. The data is then written to the primary storage device . The method then proceeds to step .

The RAID controller then analyses the data saved to the primary storage device and identifies the primary storage segment s that the newly written data has been written to. This may be done by for example determining the logical block address LBA to which the data is saved on the primary and then determining therefrom the primary segment index . This may be done by for example calculating that four logical blocks comprise a single primary storage segment and determining the primary index therefrom. This information is then stored in the SM . The method then proceeds to step .

At step it is determined whether the secondary segment index has already been assigned for example in a previous initialisation session or previous write request. If a secondary segment index has been assigned then the method proceeds to step . If a secondary segment index has not been assigned the method proceeds to step .

At step the RAID controller utilises a free segment bitmap stored as part of the virtual mirror to determine the first free secondary storage segment . The free segment bitmap is updated each time a write occurs to a secondary storage segment . If a secondary storage segment has not yet been written to then the free segment bitmap stores a 0 against that segment. However if a write occurs to a particular secondary storage segment then the 0 is changed to 1 and a 1 is stored against that segment in the free segment bitmap. Consequently the first free secondary storage segment can be located by scanning the free segment bitmap. The method then proceeds to step .

Alternatively the free segment bitmap may be scanned using a different criteria to find a free secondary storage segment . For example bitmap could be scanned to find a free segment in a particular head sector or region of the secondary storage device .

In a further alternative the free segment bitmap could be omitted completely and the RAID controller could proceed sequentially through the secondary storage segments from the start of the secondary storage segments of the secondary storage device i.e. starting from secondary index 0 or 1 and scanning in increments of secondary storage segments or in increments of logical blocks until a free segment is located.

At step when the first free secondary storage segment is identified the secondary index associated with this secondary storage segment is stored in the SM against the corresponding primary index assigned and stored in step . This provides a translational map between the primary and secondary storage devices to enable the secondary storage device to function as a mirror for the primary storage device . The method then proceeds to step .

At step the byte offset from the start of the segment is calculated. This is in cases where a write request is not segment aligned i.e. the data is not aligned with the start of the storage segment in question. In many cases more than one data packet will be stored within a particular storage segment. Alternatively the data packet may be of such a size that it has to be split across two or more storage segments. The offset enables the start position of the data packet to be identified.

The data can now be written to the appropriate secondary storage segment on the secondary storage device . Since a map the SM is provided which shows how the segment structure of the secondary storage device translates to that of the primary the RAID controller is able to treat the data on the secondary storage device as a mirror of the data on the primary storage device . This applies even though the actual location in which the data is stored on the secondary storage device may be completely different from the location of data stored on the primary storage device . At this point the free segment bitmap if provided is updated to reflect that the segment has been written to.

Next the process which occurs when a read is requested from either the primary storage device or the secondary storage device will be described. shows a flow diagram of the process for reading data from the primary storage device .

At step the host generates a read request for the primary storage device to which it has been assigned access rights. The request is sent via the communication network to the host ports not shown of the RAID controller . The read command is then stored in a local cache not shown forming part of the RAID controller hardware of the RAID controller .

The RAID controller is programmed to respond to any commands that request read access to the primary storage device . The RAID controller processes the read request from the host and determines the region of the primary storage device in which the data is stored. The data is then read from the primary storage device to be utilised by the host computer .

In addition to reading data from the primary storage device data can also be read directly from the secondary storage device . This may occur in situations where for example the primary storage device is experiencing a lot of accesses and the data can be retrieved more quickly from the secondary storage device . Ultimately which device is accessed will be determined by the RAID controller .

At step the host generates a read request for the secondary storage device to which it has been assigned access rights. The request is sent via the communication network to the host ports not shown of the RAID controller . The read command is then stored in a local cache not shown forming part of the RAID controller hardware of the RAID controller . The method then proceeds to step .

At step the RAID controller analyses the data saved to the primary storage device and calculates the primary segment index . The RAID controller then identifies the primary segment index of the primary storage segment s that the read requested data has been written to. The method then proceeds to step .

The SM is queried by the RAID controller to determine the secondary index or secondary logical block address which corresponds to the primary segment index of the or each primary storage segment identified at step as being associated with the desired data to be read. The SM provides a translational map between the primary and secondary storage devices to enable the required data on the secondary storage device to be read. The method then proceeds to step .

At step the byte offset from the start of the identified secondary storage segment is calculated. This enables the file system to identify where the start of the data to be read is. The method then proceeds to step .

The RAID controller now has via the primary segment index secondary segment index and SM visibility of the secondary logical block address where the required data is stored on the secondary storage device . The RAID controller can then access the required data on the secondary storage device and the data can then be read by the host .

Under certain circumstances the secondary storage device may be required to be defragmented. Virtual mirror implementations of higher input output processing efficiency may eventually result in a fragmented data arrangement on the secondary storage device . This will of course vary depending upon the data set stored thereon and the usage patterns on the primary storage device . Access involving a majority of data read commands is unlikely to cause fragmentation. However random write append command instructions will eventually result in fragmentation.

The secondary storage device could be defragmented to re sync the data alignment with that of the primary storage device to present a more optimised alignment. When the secondary storage device is defragmented the resulting rearrangement of files and blocks is updated in the SM and SBM so that the virtual mirror can be maintained. Such defragmentation operations could be invoked by user request scheduled maintenance or could be performed during Operating System idle time.

Another essential feature of a mirrored file system is that of a rebuild operation. If for example the primary storage device should become corrupted or fail or if the primary storage device is to be upgraded to increase capacity or speed then a rebuild operation will be required. In this case the newly swapped in primary storage device can be rebuilt using the data stored on the secondary storage device and by querying the SM comprising the primary segment indices and corresponding secondary segment indices to locate the data appropriately on the primary storage device . Likewise if the secondary fails or needs to be upgraded to increase capacity it would need to be rebuilt from the data on the primary as specified by the segment map

Additionally the virtual mirror on the secondary storage device need not mirror the whole of the primary storage device . For example a part of the primary and secondary storage devices may be assigned as a standard RAID 1 mirror as set out in with the remainder of the primary storage device being allocated a virtual mirror on the secondary storage device . This would create a two tier policy of mirroring. There may be areas of the dataset on the primary storage device for which mirroring can be optimally configured by using both conventional RAID 1 mirroring and virtual mirroring.

In normal use the virtual mirror implementation described above will be effectively invisible to the file system operating system and host . This means that the host will be presented with a view of the secondary storage device which is preferably similar to that of a standard RAID 1 mirror with the operation of the virtual mirror being hidden to the host . However there may be circumstances in which the virtual mirror file structure and interface could be exposed to the host .

One of these circumstances may arise when in addition to storage mirroring of the primary storage device the virtual mirror arrangement is implemented for backup purposes. In this case an interface to the data store and management infrastructure could be exposed for backup purposes.

The interface to the virtual mirror configuration may be exposed through a proprietary Application Programming Interface API or through a conventional file system on the secondary storage device where the data store and affiliated management infrastructure is encapsulated inside one or more files . This approach may yield significant benefits in terms of backup performance when compared to conventional host based file system approaches.

In a conventional host based file system a significant portion of the time expended in backing up a storage device or logical volume is spent analysing the data. Commonly every file is required to be touched or opened during the backup process. Even in cases where traditional image backup methods are used typically utilise a pre analysis of the data or require the entire drive or volume to be processed including unused free space on the drive or volume .

In contrast in the virtual mirror approach the data has been already analysed and packaged into file streams on the secondary storage device . Therefore a backup operation could simply backup these file streams with speeds matching image backups but without any additional processing overhead.

Further a snapshot backup or split mirror with resync backup could also be employed with the virtual mirror on the secondary storage device . In this situation restoring the primary would simply require a restoration of the backup onto the secondary followed by a regeneration operation i.e. a copy to the primary or a resync as described above . Alternatively an on the fly regeneration performed directly from the backup system is yet another approach which could be used.

The virtual mirror implementation on the secondary storage device also has the benefit that the data transfer could be effectively off host during backup and restore operations significantly improving archiving performance.

Whilst the previous embodiment of the present invention utilised the virtual mirror operating predominantly in off host firmware or software e.g. on the RAID controller an on host arrangement could be used. In this arrangement the whole of the virtual mirroring operation is carried out in on host software input output subsystems. To illustrate such an arrangement an alternative embodiment of the present invention is shown in .

As shown in a storage resource comprises a host a RAID controller a primary storage device and a secondary storage device . The host is connected to the RAID controller through a communication network such as an Ethernet and the RAID controller is in turn connected to the primary storage device and the secondary storage device via a storage network such as an iSCSI network.

The host comprises a general purpose computer PC which is operated by a user and which has access to the storage resource . A graphical user interface GUI is run on the host . The GUI is a software application which acts as a user interface for a user of the host .

In contrast to the embodiment of in the embodiment of the software application layer operating system file system virtual mirror including a segment map are implemented in software on the host computer utilising for example the iSCSI protocol to communicate with the RAID controller .

The RAID controller comprises hardware which is essentially similar to the RAID controller of the embodiment of . The RAID controller comprises a memory . However there is no corresponding firmware or software for the software application layer operating system or data mirroring layer on the primary and secondary storage devices . This software as described is operated entirely on the host .

The primary storage device comprises a hard disk drive generally of high capacity for example 1 TB. The primary storage device can be accessed by the host through the RAID controller to read write data. The secondary storage device also comprises a hard disk drive generally of high capacity for example 500 GB to 1 TB. However the secondary storage device need not be identical to the primary storage device and may be smaller in capacity.

The secondary storage device can be accessed by the host through the GUI and RAID controller to read write data independently of the primary storage device . In this embodiment the virtual mirror VM including the SM is implemented in software on the host which provides the translation between the storage segments of the primary and secondary storage devices .

Consequently the host controls the mapping and interface protocols which enable the secondary storage device to contain a duplicate of the data stored on the primary storage device albeit with different packaging of the data. This arrangement enables the requirements of the primary and secondary storage devices to be effectively decoupled without the need for a specialised RAID controller .

Variations of the above embodiments will be apparent to the skilled person. The precise configuration of hardware and software components may differ and still fall within the scope of the present invention.

For example there need not be primary or secondary storage segments. Instead the segment map may provide translation between primary data storage locations and secondary data storage locations in other manners for example logical block addresses cylinder head sectors or a different file mapping arrangement.

If storage segments are provided they need not be all the same size neither need the primary storage segments be the same size as the secondary storage segments. Any arrangement which enables translation between the storage system of the primary device and the storage system of the secondary device may be used.

Embodiments of the present invention have been described with particular reference to the examples illustrated. While specific examples are shown in the drawings and are herein described in detail it should be understood however that the drawings and detailed description are not intended to limit the invention to the particular form disclosed. It will be appreciated that variations and modifications may be made to the examples described within the scope of the present invention.

