---

title: System and method for accessing data in disparate information sources
abstract: Embodiments of the invention provide a system for generating and maintaining virtual and physical metadata layers in a MetaBase metadata repository in order to simplify and optimize the retrieval of data from a plurality of disparate information sources. The system stores in a physical metadata layer of a metadata repository a plurality of physical metadata elements, wherein each one of the physical metadata elements corresponds to the metadata elements in the plurality of information sources. Logical metadata elements are stored in the virtual metadata layer and are linked to the physical metadata elements in order to maintain the relationships therebetween. By maintaining the relationships between the physical metadata elements, users can initiate a data query request for data corresponding to a logical metadata element, and the system is configured to retrieve the desired data from the relevant information sources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08055650&OS=08055650&RS=08055650
owner: Red Hat, Inc.
number: 08055650
owner_city: Raleigh
owner_country: US
publication_date: 20100112
---
This application is a continuation of Ser. No. 10 450 581 filed Feb. 9 2004 now U.S. Pat. No. 7 668 798 which claims the benefit of U.S. Provisional Patent Application Ser. No. 60 194 925 filed on Apr. 4 2000 the entire contents of both of which are hereby incorporated by reference.

This invention relates to database integration and more particularly to software components for logically integrating disparate information sources.

In recent years there has been a great deal of improvement in the sophistication and efficiency of methods for storing and retrieving data in information sources. One significant problem with this progression however is that different companies and even different departments within one company each use different information systems to support their data. It is often a very complex task to integrate data from one information system with data from another information system. Typically it is necessary for companies to laboriously convert the multiple information source formats to be compatible with each other.

Although there are an infinite number of situations in which it may be desirable to access data stored in disparate information sources an exemplary situation is the merging of two companies. For instance prior to the merger the accounting department of each company may have its own accounting information source accessible by a corresponding information system. Each accounting information source may store data such as customer names addresses social security numbers interest rates earnings or a myriad of other types of data. Each type of data is stored in a data field having a data field name.

Data may be retrieved from the information sources by a user making a query request using a query request language compatible with the information system and recognizable by the information source.

After the merger of the two companies a single accounting department is likely to exist. This accounting department will be required to access the data in both of the information sources. However because the information sources were created and maintained before the merger they are unlikely to be accessible simultaneously. For instance if the information systems of each are different it will be necessary for the accounting department personnel to query the first information source using a first query languages and to query the second information source using a second query language.

However even in the event that the two information sources employ the same information system and can therefore be searched using the same query language the disparity in field names used to store the various types of data in each information source may prevent data from both information sources from being searched simultaneously.

For instance similar types of data may have been stored in each information source using different data field names e.g. customer s names may be stored in a first information source in a data field named customer and may be stored in a second information source in a data field named cust id . Regardless of the compatibility of query languages used a query request of customers names using either field name would fail to retrieve data from the data field having the other field name. Conversely there may be instances when two fields in different information sources have similar data field names but contain different types of data thereby resulting in a single query returning two different types of data.

One of the methods that has been employed in the prior art to solve this problem is the employment of data warehouses. is a block diagram that illustrates the main components of a system that employs data warehousing. In the diagram shown various information sources are represented by information sources and

Extraction transformation load extracts data from the disparate information sources on a pre determined periodic basis and transforms it into a common data format.

Extraction transformation load is in turn coupled to data warehouse . Once data is extracted from the information sources by extraction transformation load and re formatted it is transmitted by extraction transformation load to data warehouse for storage therein. Since extraction transformation load is periodically extracting new data from the information sources new data is periodically being transmitted by extraction transformation load to data warehouse and the data stored in data warehouse is periodically updated.

Client application is coupled to data warehouse and employs the data stored in data warehouse to perform its intended functions. However one of the problems that exist with a system of this kind is that the data stored in data warehouse and hence the data employed by the client when performing its intended functions is stale. This follows because there may be a large volume of data stored in the information sources requiring a significant amount of time for extraction transformation load to extract the data from the information sources and to transmit it for storage in data warehouse . The client s application does not employ data directly from the information sources but instead employs data which has been updated at some time in the past which is unknown to the client and which may be inaccurate.

Another method that has been employed in the prior art to solve this problem is the employment of data silos. is a block diagram that illustrates the main components of a system that employs data silos. In the diagram shown various information sources are represented by information sources and . Each of the information sources are coupled to a data accessor . In this case information sources and are coupled to data accessor and respectively.

Data accessors comprise code for retrieving data from the information sources. Data accessors and are in turn coupled to router middleware module . Router middleware module is coded to retrieve and consolidate data from the data accessors. Client application is coupled to router middleware module and communicates with it to request data in order to perform its intended functions.

However one of the problems that exist with a system of this kind is that a great deal of manual programming labor is required in order to code router middleware and data accessors . Specifically this system requires that router middleware have logic which is hard coded to the information sources. The problems of generating and maintaining the necessary code to operate a system of this kind can be unmanageable.

It is thus a general object of the present invention to provide software components for integrating disparate information sources.

The present invention in accordance with one embodiment relates to a system and method for generating and maintaining virtual and physical metadata and metamodels in a MetaBase metadata repository in order to simplify and optimize the retrieval of information from a plurality of disparate information sources. The system stores in the repository a plurality of physical metadata elements wherein each one of the physical metadata elements corresponds to the metadata elements in the plurality of information sources. As is explained in greater detail below metadata refers to the identifying names of data tables fields etc. in an information source as opposed to data which refers to the information stored within the storage spaces defined by the tables fields etc. .

In a preferred embodiment physical metadata elements are stored in the physical metadata layer and correspond directly to the metadata that is obtained from the disparate information sources. Logical metadata elements are stored in a virtual metadata layer and are linked to the physical metadata elements in order to maintain the relationships therebetween.

The present invention by abstracting the metadata of the disparate information sources enables the establishment of relationships between the metadata of the disparate information sources. Generally and as is explained in greater detail in connection with the system of the present invention generates a model which provides a schema or structural arrangement of the metadata in the information sources which make up the model. A model is a first level of abstraction which is employed by the system of the present invention.

The system also generates metamodels or data about models . Each metamodel comprises a schema which is abstracted from the schema of the various models which make up the metamodel. At the highest level of abstraction the system generates a metametamodel which is still another schema which is abstracted from the schema of the various metamodels employed by the system. This highest level schema which has been successively abstracted from the metadata of the disparate information sources provides a framework which replaces the incompatible schemas of the different information sources in order to provide uniform accessibility to the data of all the information sources.

The present invention according to one embodiment enables a user to execute a query request against a metamodel in order to retrieve data from the native information sources. By successive abstractions of the data and metadata of various information sources the varying structures and organization of data in the information source also referred to as a schema is replaced with a schema which describes the structure and organization of all of the information.

Furthermore by maintaining the relationships between the physical metadata elements users can initiate a data query request for data corresponding to a logical metadata element and the system is configured to retrieve the desired data from the relevant information sources even though the relevant information sources maintain the data in fields having different data field names even though the information sources employ incompatible data formats and even though the information in each source may be organized substantially different that it is organized in each physical source. In addition and as described in further detail below the system of the present invention is configured to retrieve the desired data from the relevant information sources even though the relevant information sources employ different query languages.

Thus by logically integrating the data from disparate information sources the present invention provides a system and method which enables a user to access any information source regardless of the information system which is employed by the individual information sources and regardless of the format that the individual information source employs to store its data. Furthermore the present invention enables a client s application programming interface to communicate with a defined set of metadata elements even if the client changes the information sources from which information is desired to be obtained.

The above description sets forth rather broadly the more important features of the present invention in order that the detailed description thereof that follows may be understood and in order that the present contributions to the art may be better appreciated. Other objects and features of the present invention will become apparent from the following detailed description considered in conjunction with the accompanying drawings. It is to be understood however that the drawings are designed solely for the purposes of illustration and not as a definition of the limits of the invention for which reference should be made to the appended claims.

The present invention according to one embodiment thereof relates to a system which employs metadata to integrate data from disparate information sources. As previously mentioned metadata may refer to the names of the storage spaces in an information source such as the various data field names or data table names in an information source. Thus for instance an information source may store data relating to a customer s name address social security number etc. This data is arranged in data fields which are identifiable to a user of the information source by the names of the various data fields. These data field names which identify the type of data which is stored in the data fields of an information source are referred to as metadata.

MetaMatrix server is also coupled to various information sources. In these information sources are represented by information sources through

However it is recognized that MetaMatrix server may be coupled to any number of information sources and that the information sources may store any conceivable type of data. MetaMatrix server and information sources are configured to communicate data as will be shown and explained in this data may comprises various formats such as data from a data storage file or Internet feed etc. as well as metadata such as the data field or data table names in which the stock prices inventories etc. are stored as requested by MetaMatrix server .

MetaMatrix server is also coupled to metadata repository . Metadata repository according to one embodiment of the invention comprises metadata facility which is coupled to MetaMatrix server in order to communicate metadata thereto.

Metadata repository also comprises MetaBase metadata repository which stores the various metamodels. Specifically a user may select a run time metamodel from those stored in MetaBase metadata repository which is then employed to access the information stored in the various information sources which correspond to that metamodel.

Metadata modeler imports metadata from the disparate information sources and generates metamodels. Although the metamodels may be generated automatically they may also be generated by a client using interface tools. In this case the system provides an interface to a client via which the client may create a customized metamodel or may manipulate an existing metamodel.

MetaMatrix server also comprises metadata services module . Metadata services module is coupled to and communicates with query service module in order to define metamodels as discussed in greater detail below. In addition MetaMatrix server comprises data access service module . Data access service module is coupled to and communicates with query service module . Furthermore data access service module is coupled to and communicates with information sources . It is noted that the modules are shown separately for the purpose of illustrating the logical operation of each module. However it is further noted that the present invention may employ any number of components in order to perform the logical functions described in connection with each logical module shown herein.

Generally query service module requests data from data access service module using a query plan which has been generated using metadata services module . Once data access service module has retrieved the desired data from information sources data access service module transmits the data to query service module for delivery to a user employing the client application programming interface . As previously mentioned MetaMatrix server is coupled to and communicates with metadata repository which stores the metadata and metamodels.

Each model comprises the arrangement of the metadata elements which are employed to describe the format of the data. For instance in the XML model model illustrates that the data has a format which comprises a document name a document header and text stored in a particular font and size. Each box of level corresponds to metadata while the arrangement of the metadata corresponds to a model. As shown a model exists for each of the different data types. However each model differs substantially from other models thus rendering the models incompatible.

At a next higher level of abstraction identified as level a metamodel is illustrated. Each metamodel comprises the arrangement of the models which are shown in level . For instance in the XML model metamodel illustrates that the metadata has a format which comprises a tag e.g. the identification of the metadata such as the document name and the header name data e.g. the text of the data and attributes e.g. the font and size in which the text is written . Each box of level corresponds to meta metadata while the arrangement of the model corresponds to a metamodel. As shown a metamodel exists for each of the different data types.

At the highest level of abstraction identified as level a meta metamodel is illustrated. The meta metamodel comprises several elements in a format which can be employed to access any of the different data models. Thus even though the data and metadata formats shown in level are incompatible relative to each other they may be accessed by the system of the present invention which has abstracted them to a point at which they are compatible. In other words by abstracting the data and metadata in successive levels a framework has been generated which replaces the different schemas of the different information sources with a single schema which provides uniform accessibility to all of the information sources.

Generally metamodel is a model of various metadata elements and the relationships therebetween. As shown in the diagram metamodel may comprise a pair of metadata layers. A first layer is referred to as a physical metadata layer . A second layer is referred to as a virtual metadata layer .

Physical metadata layer comprises the actual metadata elements e.g. the data field names data table names etc. that are employed in the information sources. If the information sources that are employed by the system are changed the metadata elements in physical metadata layer are also changed since the metadata elements in physical metadata layer correspond directly to the metadata elements in the new information sources. As will be explained in greater detail below MetaMatrix server is configured to discern from each new information source which is connected thereto a description of the new information source s metadata so that MetaMatrix server can integrate it with the same metadata information from the other connected information sources.

The metadata elements that are stored in physical metadata layer are linked to logical metadata elements that are stored in virtual metadata layer . Logical metadata elements are a second set of metadata elements which have been generated in order to represent the metadata elements of the disparate information sources to the client s application programming interface as is explained below. The linking between each logical metadata element stored in virtual metadata layer and its corresponding physical metadata element stored in physical metadata layer is performed according to one embodiment of the invention by a programmer that manually links the elements during the process of configuring the metadata management system. However the present invention also contemplates that the linking may be performed automatically or electronically. Again it is noted that while these layers are shown as existing separate and distinct from each other this is merely to illustrate that the layers are separate in the logical sense described herein.

In the example illustrated by the diagram physical metadata layer comprises two sets of physical metadata elements. Each set of physical metadata elements corresponds to an information source such that physical metadata elements through directly correspond to the data field names stored in information source while physical metadata elements through directly correspond to the data field names stored in information source . Of course physical metadata layer may comprise any number of physical metadata elements which correspond to any number of information sources. In the first set of elements physical metadata element has a metadata field name customer physical metadata element has a metadata field name accounttype physical metadata element has a metadata field name address and physical metadata element has a metadata field name balance. In the second set of elements physical metadata element has a metadata field name custid physical metadata element has a metadata field name telephone and physical metadata element has a metadata field name password. 

Each of the logical metadata elements in virtual metadata layer corresponds to one or more physical metadata elements in physical metadata layer . According to one embodiment a programmer establishes the correspondence between the elements by linking each of the logical metadata elements in virtual metadata layer to one or more physical metadata elements in physical metadata layer . These links are illustrated in as links through

For instance in the example shown logical metadata element is linked to physical metadata elements and . Thus when a user of client application programming interface initiates a query request for the social security number of a customer the manner in which the system of the present invention processes a query request is described below it may be performed by making a single query request using the logical metadata field name custss . Because the virtual metadata element is linked to physical metadata elements and the system will convert the client s request for a single query into a query request of the physical metadata elements customer and custid of information sources and respectively. Thus the present invention in accordance with one embodiment enables a user to employ a single known metadata element regardless of which and how many information sources that type of data is stored in and regardless of the metadata element names in which the information sources store the data.

In addition to metadata information relating to the disparate information sources the physical metadata layer in Metamodel is configured according to one embodiment of the invention to store information relating to the attributes of the data tables stored therein. The metamodeler may also discern and store in the physical metadata layer data corresponding to the attributes of various metadata elements which have been retrieved from the disparate information sources as well as key information e.g. in the event that an information source employs representational symbols or characters the key information provides a translation of what the representational symbols or characters represent .

Similarly the virtual metadata layer of Metamodel advantageously permits the metadata of disparate information sources to be manipulated in various ways.

For instance according to one embodiment the employment of the virtual metadata layer permits metadata elements from disparate information sources to be re named. The employment of the virtual metadata layer also permits metadata elements from disparate information sources to also be grouped in ways which are advantageous to a user as will be explained below.

Most significantly the virtual metadata layer may be employed to create new relationships between data in disparate information sources. Thus the semantic equivalence of differently named data elements in different information sources is exposed to viewers of the metadata. Once exposed a viewer may implicitly join the different data tables in the disparate information sources and perform a variety of operation thereon such as sorting or joining the data from the information sources.

As previously mentioned each of the logical metadata elements in virtual metadata layer may comprise explanatory text which provides a more detailed description of the type of data which the logical metadata element refers to. In addition each logical metadata element may also be linked to other logical metadata elements in virtual metadata layer which define operations to transform the information that is received from the physical metadata elements. According to one embodiment a logical metadata element which transforms the data it receives is referred to as a transformation logical metadata element while the logical metadata element that stores the rule which governs how the information is to be transformed is referred to as a logical rule element.

An example of this is shown in . is a block diagram that illustrates virtual metadata layer and physical metadata layer in which a logical metadata element is configured to transform the information that it receives from physical metadata element . In the embodiment shown logical metadata element is named PE.about. RATIO and refers to a commonly employed financial measurement called price to earnings ratio which is equal to a ratio of a company s stock price divided by the company s earnings . In the embodiment shown logical metadata element is linked to physical metadata elements and . Physical metadata element refers to a data field called earnings corresponding to an identical data field name in information source while physical metadata element refers to a data field called price corresponding to an identical data field name in information source

As shown logical metadata element is also linked to logical rule element . Logical rule element comprises a pre defined operation or rule by which the information in physical metadata elements and are to be transformed when received by logical metadata element . Therefore logical metadata element comprises a transformation logical metadata element while logical metadata element comprises a logical rule element.

In this instance logical metadata element provides that the rule based transformation to be performed by logical metadata element is to divide the price data received from physical metadata element by the earnings data received from physical metadata element . Once the logic is employed to transform the data the price to earnings information may be transmitted to the client. Of course the present invention contemplates that any type of predefined operation may be employed including but not limited to multiplication division addition subtraction etc.

One of the principal advantages of the virtual metadata layer is that the linking between its various elements can be modified without changing the metadata elements which are employed by the user. For instance in the previous example if the system was re configured to be connected to a different information source which already calculated the price to earnings ratio logical metadata element would be linked to the P E data directly and would not need to be linked to physical metadata elements or or to logical metadata element . Despite the alterations that are made to these linkings a user would still query the system using the same search field PERATIO as before inserting a predictable communication via the client s application programming interface .

In addition to employing transformation and rule elements the present invention according to one embodiment thereof may also employ select logical data elements.

According to this embodiment a first logical metadata element may be linked to several physical metadata elements. In addition the first logical metadata element may be linked to a second logical metadata element which provides a pre defined selection criteria for determining which of the several physical metadata elements are to be employed by the first logical metadata element. In such a case the first logical metadata element is referred to as a select logical metadata element while the second logical metadata element is again referred to as a logical rule element.

An example of this is shown in . is a block diagram that illustrates virtual metadata layer and physical metadata layer . This figure provides an example of a situation in which a logical metadata element must select which of several physical metadata elements that are linked to it should be employed to provide data thereto. In the embodiment shown logical metadata element is named PRICE e.g. a company s stock price . Logical metadata element is linked to physical metadata elements and . Physical metadata element refers to a data field called DAILY PRICE e.g. the price of a stock at any time during normal business hours corresponding to an identical data field name in information source while physical metadata element refers to a data field called CLOSING PRICE e.g. the last price of the stock upon the close of the business day corresponding to an identical data field name in information source

As shown logical metadata element is also linked to logical metadata element . Logical metadata element comprises a selection criteria or rule which determines whether the information in physical metadata elements will be employed by logical metadata element or whether the information in physical metadata elements will be employed by logical metadata element instead. In this instance logical metadata element provides a selection criteria in which logical metadata element will employ the information in physical metadata element e.g. the DAILY PRICE if the time of day is earlier than 4 00 p.m. and will employ the information in physical metadata element e.g. the CLOSE PRICE if the time of day is later than 4 00 p.m. Once the logic is employed to select the appropriate information source the PRICE information may be transmitted to the client. Of course the present invention contemplates that any type of selection criteria may be employed.

Again it is emphasized that the employment by the present invention of the virtual and logical metadata layers insures a predictable communication with a user via client application programming interface . Thus even if the system was reconfigured to retrieve the price data from different information sources or to use a different selection criteria for determining which price data to employ the present invention provides that a user may still employ the PRICE element in a query request.

As mentioned previously prior to using the metadata management system of the present invention to execute query requests the system must be configured so that data and metadata stored in the information sources can be employed by the system. is a flowchart that illustrates the steps that are performed in accordance with one embodiment thereof in order to deploy the above described metadata management system. At step of the flowchart metadata management system is installed and configured by a user. In one embodiment this includes installing a server which houses the metadata management system. In doing so the user specifies basic server properties such as determining administrative definitions and selecting a machine port which the server is connected to. This may also include specifying storage locations and defining internal information sources. Step may also include the use of client tools in order to configure the system.

At step metamodels are defined by using a modeller. As previously mentioned while models provide a structural framework or arrangement of the metadata of an information source a metamodel is a model of these first level metadata models.

As such they are a higher level abstraction of the metadata providing a uniform structure to otherwise incompatible data formats. Advantageously more than one metamodel is defined.

At step a metamodel is defined to the server console. Specifically a user selects a run time metamodel against which query requests shall be executed. This run time metamodel comprises one of the metamodels which were defined in step . At step connectors are attached to the information sources. Advantageously steps through are performed by a technician trained to operate the metadata management system.

At step the application code is written. At step the query requests entered by a user are executed. The execution of the query requests is explained in greater detail in connection with the flowchart illustrated in . Generally the system executes the query requests by converting the client s original query request into a source specific data query request accessing the disparate information sources using the source specific data query request and delivering the data results to the user.

As stated above is a flowchart that illustrates the general steps that are employed by the metadata management system of the present invention in order to execute a query request entered by a user. Generally these steps involve the generation and execution of a query plan which is a method by which a query is to be executed. An example of a query plan is shown in which explains the query plan in greater detail.

Referring now to at step a user inspects a selected metamodel to find elements that can be retrieved. At step the user selects the elements from the metamodel. At step a user enters a query request for the selected element. Although there are numerous query languages or formats which may be employed for this purpose a query request format which is commonly employed is referred to as SQL. An example of a SQL like query request is illustrated in . Specifically a SQL like query comprises a select field listing the name of the element desired to be queried as shown in line . According to the present invention the select field of the SQL like query request lists the name of a logical metadata element stored in virtual metadata layer .

The SQL like query request also comprises a from field listing the information source in which the selected element is stored as shown in line and a where field listing the conditions or restrictions that the user desires to impose upon the query as shown in line . As described herein the present invention by abstracting the metadata of an information source into models metamodels etc. enables the employment by user of a single query request language or format vastly simplifying the retrieval of information from disparate information sources.

Returning to the flowchart of at step the query request entered by the user is parsed. According to one embodiment of the invention the query request is parsed by processing the user s original query so as to generate a global query object.

At step the global query object that was generated in step is converted into information source specific query requests by checking the metadata descriptions of those data sources. Information source specific query requests are query requests that are configured to access the particular information sources that store data desired by the user.

The information sources and data fields that are required to be accessed in order to obtain the requested information are determined by the linkings of the logical metadata elements to the physical metadata elements in the MetaBase metadata repository. For example referring to a global query object which comprises a query request for custss is converted into information source specific query requests for customer in information source and custid in information source

At step the information source specific query requests are employed by MetaMatrix server to retrieve data from the disparate information sources.

Specifically data access service module of MetaMatrix server accesses each of the disparate information sources to retrieve the desired information. At step the system generates a set of information source specific results. In other words the system generates a set of results from each of the disparate information sources that were accessed by MetaMatrix server at step .

At step the metadata management system converts the set of information source specific results into a global result object. Specifically the system aggregates the various sets of information source specific results that were generated from each of the disparate information sources at step . At step MetaMatrix server delivers the global result object to the user that initiated the query.

As mentioned in connection with query service module is coupled to and communicates with client application programming interface for receiving the query requests generated by the client and for transmitting a response to the query request once the query request has been processed by MetaMatrix server . In order to facilitate the processing of a query request query service module according to one embodiment of the invention generates and executes a query plan. A query plan is an executable set of operations which optimizes the processing of a query request.

In a preferred embodiment of the invention query service module is configured to generate a query plan which asynchronously processes the steps involved in the execution of a query request. An asynchronous operation is typically characterized by the simultaneous performance of several processes. In the present invention and as will be explained in further detail below query service module operates asynchronously by performing a first query operation then performing a second query operation prior to receiving the results of the first query operation.

Each node of the query plan relates to a specific query request function or operation. The last node of each branch of the query plan namely nodes and corresponds to an operation which directly accesses data from an information source.

The intermediate nodes connecting these end nodes correspond to other processing steps in the handling of the query requests. For instance node or may correspond to an operation whereby a global query object is converted into an information sourcespecific query such as is explained in connection with step of the flowchart in or may correspond to operations such as joining or sorting the query results pivotably transforming the query results as is explained below or any other type of operation.

Thus in a preferred embodiment once a query plan has been generated the lowest nodes of the plan are processed first and the results of the query operation performed at these lowest nodes are transmitted to the next highest nodes of the plan.

These next highest nodes in turn process the information they have received and transmit the results of their query operation to the next highest nodes of the plan and so on.

Generally in order to operate asynchronously query service module maintains each of the nodes in one of several operational states and keeps track of each node s operational state as the query plan is executed. For instance a first node may be maintained in a ready state in which the node is ready to process a query request and to transmit the query results to a second node. In order to receive the query results transmitted by the first node the second node is preferably maintained in an awaiting state so as to be sure that the second node is not simultaneously processing a query request when the first node is prepared to transmit its results thereto.

Once the first node is in the ready state and the second node is in the awaiting state the system may modify the operation state of the first node to a process state. In the process state the node processes the query in order to transmit the results to the second node. Once the first node has processed the query and has transmitted the results to the second node the first node has completed its operation and may be maintained in a finished state.

According to one embodiment the initialization step involves the system discerning the operational states that each node is in. In this query plan the nodes at the end of the branches namely nodes and are maintained in a ready state at this step since as explained previously the lowest nodes are processed first. Likewise nodes of the query plan which are connected above these lowest nodes namely nodes and are maintained in an awaiting state.

At step query service module determines which nodes are ready to be processed and proceeds to process all nodes that are ready to be processed. Specifically since nodes and are all ready to process at the previous step these nodes are therefore processed at this step. Thus each of these nodes processes its respective query operation such as to access an information source with an information source specific query.

At step query service module transmits the query results of node to node . As previously discussed the query results of node can be transmitted to node because the system is cognizant that node is in an awaiting state of operation. Once the query results of node have been transmitted to node node is maintained in a finished state.

At step query service module transmits the query results of node to node . The query results of node can be transmitted to node because the system is cognizant that node is in an awaiting state of operation. Once the query results of node have been transmitted to node node is maintained in a finished state.

At step query service module transmits the query results of node to node . The query results of node can be transmitted to node because the system is cognizant that node is in an awaiting state of operation. Once the query results of node have been transmitted to node node is maintained in a finished state.

At step query service module again determines which nodes are ready to be processed and proceeds to process all such nodes. In this example the system determines that node is ready to process because node is in a ready state and the node located directly above it namely node is in an awaiting state. Thus node processes its respective query operation such as to convert an information sourcespecific query result into a global result object or to perform any other type of operation.

At step query service module transmits the query results of node to node . The query results of node can be transmitted to node because the system is again cognizant that node is in an awaiting state of operation. Once the query results of node have been transmitted to node node is maintained in a finished state.

At step query service module again determines which nodes are ready to be processed and proceeds to process all such nodes. In this example the system determines that node is ready to process because node is in a ready state and the node located directly above it namely node is in an awaiting state. Thus node processes its respective query operation such as to convert an information sourcespecific query result into a global result object.

At step query service module transmits the query results of node to node . The query results of node can be transmitted to node because the system is cognizant that node is in an awaiting state of operation. Once the query results of node have been transmitted to node node is maintained in a finished state.

At step query service module transmits the query results of node to node . The query results of node can be transmitted to node because the system is cognizant that node is in an awaiting state of operation. Once the query results of node have been transmitted to node node is maintained in a finished state.

At step query service module again determines which nodes are ready to be processed and processes these nodes. In this example the system determines that node is ready to process because node is in a ready state and the node located directly above it namely node is in an awaiting state. Thus node processes its respective query operation.

At step query service module transmits the query results of node to node . The query results of node can be transmitted to node because the system is cognizant that node is in an awaiting state of operation. Once the query results of node have been transmitted to node node is maintained in a finished state. Furthermore since this step comprises the completion of the query plan e.g. the query plan is fully executed once the query results have been received by node node is also maintained in a finished state.

Thus the present invention is configured to generate and execute a query plan in order to efficiently process a query request from a user. By generating a query plan that can be executed in an asynchronous manner the present invention thereby optimizes the processing of the various query operations.

One of the advantages of generating and executing a query plan as just described is that by separating a query request into several atomic query operations each separate atomic query operation can be performed in the most advantageous location. For instance one of the query operations that might be performed at a particular node is the joining of various query results. Similarly another of the query operations that might be performed at a particular node is the sorting of various query results. The efficiency of the system is improved if these joining or sorting steps can be performed in an information source instead of in the MetaMatrix server . If a particular information source has the capability of performing the joining or sorting operations the metamodeler maintains data regarding the capabilities of the various information sources connected to the MetaMatrix server the query plan may provide that these functions be performed in the information sources rather than by MetaMatrix server . According to one embodiment of the present invention the metadata management system may also be configured to simultaneously process the query requests of several different users. For instance query service module may aggregate the query requests of several different users into a single query plan. In this manner certain operations which would ordinarily be required to be performed in separate query plans for each user request may instead be performed a single time thereby increasing the efficiency of the system and eliminating redundant operations.

For instance two separate users may request for different purposes the same data from the same information source. Because the data will be employed for different purposes by the two users a separate query plan for each user will comprise a different set of query operations. However at least one operation namely the retrieval of the similar data from the information source will be the same. Thus query service module may consolidate that operation of the two separate query plans so as to only retrieve the data once. Once retrieved the differing query operations may be subsequently performed and the data employed by the respective users for their desired purposes.

The present invention according to one embodiment thereof may also employ a particular query plan in order to provide the same data from the same information sources to different users wherein the different users have made the same query request. Again the system seeks to optimize its performance by eliminating redundant operations. For instance is a flowchart which illustrates the steps which are performed by the system in order to optimize the handling of identical query requests from different users.

At step MetaMatrix server receives a first query request for a particular metadata element from a first user. At step MMS receives a second query request for the same metadata element from a second user. Rather than generating a separate query plan for each query request query service module may instead at step of the flowchart generate a single query plan to retrieve data corresponding to the request metadata element.

At step the metadata management system executes the query plan generated in step . Finally at step the metadata management system transmits the data corresponding to the metadata element to both the first and the second users. According to one embodiment of the invention the data is transmitted to both users in a point topoint fashion. In this manner multiple requests for the same data may be handled simultaneously greatly improving the efficiency of the system.

As previously discussed the query plans that are generated and executed by query service module may comprise a variety of individual operations. One such operation is to join or unify groups of data from disparate information sources. An example of this is shown in .

Similarly data table comprises a table of data corresponding to Chevy trucks. Specifically the data table shows data field which identifies the make of the automobiles to which the data pertains as Chevy . Similarly the data table shows data field which identifies the type of automobiles to which the data pertains as trucks . Within the table three columns of data are identified as data fields which stores data relating to the record number data field which stores data relating to color and data field which stores data relating to model. 

According to one embodiment the metadata management system of the present invention allows the creation of single logical data group comprised of aggregation elements that present the data from the different information sources as a single aggregated data group. For instance in the example explained above in connection with the present invention may be employed to combine the data of data tables and into a single data table accessible to a user. illustrates a data table which joins or unifies the data of data tables and . Specifically the metadata management system of the present invention employs the metadata elements of the two disparate information sources in order to provide a data table which stores the information in a single table with additional columns of data corresponding to the original data table names.

For instance joined data table comprises data field names and which correspond to the data field names of the original two data tables. Thus data field in data table stores data relating to a record number similar to data fields and in data tables and respectively. Likewise data field in data table stores data relating to the color of an automobile similar to data fields and in data tables and respectively. Finally data field in data table stores data relating to the model of an automobile similar to data field and in data tables and respectively.

Data table also comprises two additional columns of data identified herein as data fields and . Data field corresponds to data fields and in data tables and respectively. Similarly data field corresponds to data fields and in data tables and respectively. However the metadata management system of the present invention has converted the data table names of the original data tables into columns of data. Thus in data table data field name is referred to as Make and identifies the make of the automobiles for each data record.

The data stored in the data column identified as data field name may be either Ford or Chevy depending in which of the original data tables the record originated.

Similarly data field name is referred to as Type and identifies the type of the automobile for each data record. The data stored in the data column identified as data field name may be either Car or Truck depending in which of the original data tables the record originated.

Another operation which may be performed during the execution of a query plan by query service module is referred to as a dimensional transform. Dimensional transforms which are also referred to as pivots alter the format in which data is stored.

For instance according to one embodiment of the invention a dimensional transform of data may allow for elements stored in rows in a first data format to be transformed and stored in columns in a second data format. An example of this is shown in .

For any number of reasons a user of the system may desire that the quarterly sales data be stored in a format which is different than the format illustrated in .

One such reason may be that in order to obtain the quarterly sales data from the data format discussed above it is necessary to make a query request using four different query terms namely SQ SQ SQ and SQ . In order to simplify the use of the system it would be advantageous if a user was able to make a query request using a single query term in order to obtain the same quarterly sales data. The employment of a dimensional transform operation according to one embodiment of the present invention allows this to occur.

For instance illustrates data table . Data table also comprises a table of data corresponding to quarterly sales figures. However in this case the metadata management system has pivoted the data so as to be arranged in a format which helps to simplifies the query request process. Specifically the data table shows data field which identifies a record number . In addition the data table shows data field which is labeled as Sales and which corresponds to a column of data in which is stored the sales figures. Furthermore the data table shows data field which is labeled as Quarter and which corresponds to a column of data in which is stored the quarter for which each of the sales figures pertains.

As mentioned above the re formatting of data from the format shown in to the format shown in provides the advantage of eliminating the necessity of making a query request using four different query terms namely SQ SQ SQ and SQ in order to obtain the same quarterly sales figures. Specifically with the data re formatted as illustrated in a user can make a query request using a single query term in order to obtain quarterly sales data. In this case a user can obtain quarterly sales data by making a query request using the single query term Sales .

According to one embodiment the present invention may also be employed to write data provided by a user back into the storage spaces of disparate information sources in order to update the information sources. Advantageously the metadata management system of the present invention employs the two metadata layers of the MetaBase metadata repository to determine which data fields of the disparate information sources are to be updated. However instead of retrieving data from the disparate information sources as has been described previously data is transmitted to the information sources for storage therein. The employment of the multiple metadata layers in the metadata repository enables this to be performed even in the event that the relevant information sources maintain the data in fields having different data field names that the information sources employ incompatible data formats and that the relevant information sources employ different information system languages.

At step the metadata management system determines which physical metadata elements of physical metadata layer are linked to the logical metadata element discussed in step . In the system shown in the metadata management system will determine that the physical metadata elements of physical metadata layer which are linked to logical metadata element are physical metadata elements and . These physical metadata elements are identified as customer and custid respectively.

At step the metadata management system determines from which of the disparate information sources these physical metadata elements are derived. In the system shown in the metadata management system will determine that physical metadata elements identified as customer is derived from information source . Similarly the metadata management system will determine that physical metadata elements identified as custid is derived from information source . In other words and as explained previously the physical metadata elements customer and custid refer to data storage spaces in information sources and respectively.

Finally at step the metadata management system stores the data provided by the user in the storage spaces of the information sources. Thus even though the user provided the client application programming interface with an instruction to write data to an element named custss the system of the present invention permits the data to be written to storage spaces in disparate information sources having different field names.

Thus while there have been shown and described and pointed out fundamental novel features of the invention as applied to alternative embodiments thereof it will be understood that various omissions and substitutions and changes in the form and details of the disclosed invention may be made by those skilled in the art without departing from the spirit of the invention. It is the intention therefore to be limited only as indicated by the scope of the claims appended hereto. It is to be understood that the drawings are not necessarily drawn to scale but that they are merely conceptual in nature.

