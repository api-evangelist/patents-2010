---

title: Providing remote access to games designed for a single-machine experience
abstract: Disclosed are various embodiments for providing remote access to games that were designed for a single-machine experience. A game that has a single world state is executed in a virtualized environment in one or more computing devices. One or more input events are provided to the game based at least in part on input data from multiple clients that are controlling the game. A video signal generated by the game is encoded into a media stream, and at least a portion of the media stream is sent to each of the clients.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08435121&OS=08435121&RS=08435121
owner: Amazon Technologies, Inc.
number: 08435121
owner_city: Reno
owner_country: US
publication_date: 20101105
---
Some video games may allow multiple players to participate in the game play. Other video games are developed strictly for a single player. With some multiplayer games the players are located at the same game playing device and watch the action on a single display. In some cases a split screen may be rendered on the display and the action relative to each player may be shown in a respective region of the split screen. With other multiplayer games each player is located at a distinct game playing device with the game play being synchronized over a network.

The present disclosure relates to providing remote access to games that were originally designed for a single machine experience and lack Internet based multiplayer capabilities. Many games were written to be played on a single computing device or video game device without networked multiplayer capabilities. Such games may be single player games or multiple player games. Various embodiments of the present disclosure are configured to execute such a game in a virtualized environment while providing remote access to the game to multiple clients. Thus various embodiments enable networked multiplayer capabilities to be easily added to a game that was originally a single machine experience. In addition a user may start a single player game while at a first client in one location and later continue game play while at a second client in another location. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes one or more computing devices in data communication with one or more clients by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing device may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience the computing device is referred to herein in the singular. Even though the computing device is referred to in the singular it is understood that a plurality of computing devices may be employed in the various arrangements as described above.

Various applications and or other functionality may be executed in the computing device according to various embodiments. Also various data is stored in a data store that is accessible to the computing device . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing device for example include a game server application a plurality of wrappers . . . N a plurality of game applications . . . N and other applications services processes systems engines or functionality not discussed in detail herein. The game server application is executed to launch game applications which are executed within the wrappers . The game server application is also executed to obtain game input data from the clients and provide the game input data to the respective wrapper .

The game server application is also executed to send game output data that is captured from the game application to the clients . The game server application may communicate with the client over various protocols such as for example hypertext transfer protocol HTTP simple object access protocol SOAP real time transport protocol RTP real time streaming protocol RTSP real time messaging protocol RTMP user datagram protocol UDP transmission control protocol TCP and or other protocols for communicating data over the network . The game server application is configured to maintain game state information associated with the executing game applications .

The game application may correspond to any game originally implemented for a single machine experience. The game application may be a single player game a multiple player game or include both single player and multiple player modes. As non limiting examples the game application may correspond to a first person shooter game an action game an adventure game a party game a role playing game a simulation game a strategy game a vehicle simulation game and or other types of games. The game application may be a game originally designed for execution in a general purpose computing device or in a specialized video game device such as for example a video game console a handheld game device an arcade game device etc. The game application may expect to access one or more resources of the device on which it is executed. Such resources may correspond to display devices input devices or other devices. In some cases the game application may request exclusive access to one or more of the resources whereby no other applications may have access to the particular resources.

The wrapper corresponds to an application that provides a virtualized environment for execution of the game application . In particular the wrapper may be configured to virtualize one or more of the resources that the game application expects to access. Such resources may include a keyboard a mouse a joystick a video device a sound device etc. In this way the wrapper is able to provide input commands to game application as if the wrapper emulates a keyboard a mouse or another type of input device.

Further the wrapper is able to obtain a video signal generated by the game application as if the wrapper emulates a display device an audio device or another type of output device. The wrapper is able to encode the video signal into a media stream. The media stream may include an audio signal generated by the game application as well. To this end the wrapper may include various types of video and audio encoders such as for example Moving Pictures Experts Group MPEG encoders H.264 encoders Flash video encoders etc. Such encoders may be selected according to factors such as for example data reduction encoding quality latency etc. In some embodiments the wrappers may communicate directly with the clients to obtain the game input data and to serve up the game output data .

Different types of wrappers may be provided for different game applications or classes of game applications . As non limiting examples different wrappers may be provided for game applications using different application programming interfaces APIs such as OpenGL DirectX the Graphics Device Interface GDI and so on. Where the game application is configured for execution in a specialized video game device or another type of computing device the wrapper may include an emulation application that emulates the device.

The game state information that is maintained by the game server application includes various data relating to game sessions that are currently active. For example the game state information may track the users that are currently participating in the game session the players in the game session to which the users are mapped scores and status information associated with the users security permissions associated with the game session e.g. who can or cannot join and so on. In some embodiments some or all of the game state information may be discarded when a game session ends.

The data stored in the data store includes for example games wrappers saved game state data player data and potentially other data. The games correspond to a library of video games that are available to be launched as game applications . The games may correspond to executable code within the computing device . Alternatively the games may correspond to code that is executable within another type of device but is not executable within the computing device . Such games may be referred to as binaries read only memory images ROMs and other terms. A particular game may be executed as multiple instances of the game applications for multiple game sessions. The wrappers correspond to the executable code that implements the various types of wrappers . The wrappers are executable in the computing device and may be executed as multiple instances of the wrappers for multiple game sessions.

The saved game state data corresponds to game states that have been saved by the game applications . Because the game applications are executed in a virtualized environment the game applications may write state information to a virtual location which is then mapped for storage in the data store as the saved game state data . The saved game state data may correspond to data saved normally by the game application or may correspond to a memory image of the game application that may be resumed at any time. The player data includes various data related to the users of the game applications such as for example security credentials game preferences billing information a listing of other users that are permitted to join games started by the user and so on.

The client is representative of a plurality of client devices that may be coupled to the network . The clients may be geographically diverse. The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability.

The client may include a display . The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc. The client may include one or more input devices . The input devices may comprise for example devices such as keyboards mice joysticks accelerometers light guns game controllers touch pads touch sticks push buttons optical sensors microphones webcams and or any other devices that can provide user input. Additionally various input devices may incorporate haptic technologies in order to provide feedback to the user.

The client may be configured to execute various applications such as a game client application and or other applications. The game client application is executed to allow a user to launch join play and otherwise interact with a game application executed in the computing device . To this end the game client application is configured to capture input provided by the user through one or more of the input devices and send this input over the network to the computing device as game input data .

The game client application is also configured to obtain game output data over the network from the computing device and render a game screen on the display . To this end the game client application may include one or more video and audio players to play out a media stream generated by a game application . In one embodiment the game client application comprises a plug in within a browser application. The client may be configured to execute applications beyond the game client application such as for example browser applications email applications instant message applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin a user at a client sends a request to launch a game application to the game server application . The game application does not include network multiplayer capabilities for play over the network and was originally designed as a single machine experience. The game server application obtains the corresponding game and wrapper from the data store . The game server application then launches the game application in the corresponding wrapper . The game server application tracks the status of the game within the game state information .

The wrapper provides a virtualized environment for the game application that virtualizes one or more resources of the computing device . Such resources may include exclusive resources i.e. resources for which the game application requests exclusive access. For example the game application may request full screen access from a video device which is an exclusive resource because normally only one application can have full screen access. Furthermore the wrapper may virtualize input devices such as for example keyboards mice etc. which may not actually be present in the computing device . In various embodiments the wrapper may correspond to a virtual machine and or the wrapper may be executed within a virtual machine.

The user at the client enters input commands for the game by use of the input devices of the client . As a non limiting example the user may depress a left mouse button. Accordingly the game client application functions to encode the input command into a format that may be transmitted over the network within the game input data . The game server application receives the input command and passes it to the wrapper . The wrapper then provides a left mouse button depression to the game application by way of a virtualized mouse. In some embodiments different input commands may be presented to the game application from those that were generated by a client . As a non limiting example if a user sends a mouse down command and the game client application loses focus the wrapper may be configured to send a mouse down command followed by a mouse up command. In various embodiments the input commands may be relayed to the wrapper as soon as possible or the input commands may be queued by the wrapper and relayed to the game application sequentially from the queue according to another approach.

Meanwhile the graphical output of the game application is captured by the wrapper and encoded into a media stream. Additionally the audio output of the game application may be captured and multiplexed into the media stream. The media stream is transmitted by the game server application to the client over the network as the game output data . The game client application obtains the game output data and renders a game screen on the display . Ultimately the effect of the input command performed by the user on the world state of the game may be reflected in the game screen .

Subsequently other users may join the game application and participate like the first user. Where the game application corresponds to a single player game multiple users may share the same control over the game play. Thus a user may start a game at one client and continue the game at another client . Co operative play is also made possible with users taking turns at controlling the game play and or controlling designated functions. As a non limiting example in a first person shooter game one user at a first client may control the weaponry while another user at a second client may control movement within the game environment. When multiple users send respective input commands to the game server application the world state of the game application may be updated and the media stream may reflect the effects of the input commands sent by the multiple users.

Furthermore multiple users at diverse locations may participate in a multiple player game that was originally implemented for single device play. As a non limiting example a game application may have been developed to be executed in one device with multiple game controllers. Accordingly the wrapper may be configured to map input commands from one client to a first virtual game controller and input commands from another client to a second virtual game controller. As another non limiting example a game application may have been developed to be executed in one device where one side of the keyboard controls the first player and the other side of the keyboard controls the second player. Accordingly the wrapper may be configured to map input commands from one client to keys on one side of a virtual keyboard and input commands from another client to keys on another side of the virtual keyboard.

Various embodiments enable input generated through one type of input device in a client to be transformed by the wrapper into input commands provided to the game application through an entirely different type of virtual input device. As a non limiting example input generated by an accelerometer in the client may be translated by the wrapper into input provided through a virtual mouse. Thus completely different kinds of input devices may be used in playing the game that may not have been contemplated when the game application was implemented.

Where input devices incorporate haptic technologies and devices force feedback may be provided to the input devices within the game output data . As non limiting example a simulated automobile steering wheel may be programmed by force feedback to give the user a feel of the road. As a user makes a turn or accelerates the steering wheel may resist the turn or slip out of control. As another non limiting example the temperature of the input device may be configured to change according to force feedback. In one embodiment force feedback generated from the game input data of one client may be included in the game output data sent to another client .

Because the client is decoupled from the hardware requirements of the game application the game may be played on a diverse variety of clients that are capable of streaming video with acceptable bandwidth and latency over a network . For example the game may be played on a client that is a smartphone. Thus the client need not include expensive graphics hardware to perform the complex three dimensional rendering that may be necessary to execute the game application . By contrast the hardware of the computing device may be upgraded as needed to meet the hardware requirements of the latest and most computationally intensive game applications . In various embodiments the video signal in the media stream sent by the game server application may be scaled according to the bitrate and or other characteristics of the connection between the computing device and the client over the network .

Because the multiplayer functionality is enabled through the use of the wrappers development of the game application is simplified. Implementing networked multiplayer functionality may be expensive from a game development perspective because multiple world states may be involved such as one for each player. With the embodiments described herein networked multiplayer functionality may be enabled for games with a single world state which can greatly simplify game development by not requiring synchronizing of multiple world states over a network . In some cases the game applications may be written with an application programming interface API to simplify the development of wrappers .

With multiple users the same video signal in the media stream may be sent to each client or a distinct portion of the video signal in the media stream may be sent to each respective client . The latter may be preferable in the case of split screen game play. Additional features may be implemented in the game server application to improve the user experience. For example users may be able to send webcam streams of themselves to the other users through the game server application . Also users may be able to communicate with each other by text and or voice with the communication being facilitated through the game server application . An identification of the other users participating in a game may be sent to each of the users. When users leave a game the game application may continue to execute or the game application may be terminated. The game state may be saved in the saved game state data .

Referring next to shown is an example of a user interface that is rendered by a game client application in the client in the networked environment . Specifically depicts one example of a game screen that is generated by a game application captured and encoded into a media stream sent over the network and played back by the game client application . In the example of the game application is a single player game which could be a multiple player game being played by a single player.

The game screen includes a status indication which informs the user of the current status of the game. The status indication may include points earned time remaining player health and or other metrics generated by the game application . The game screen may include a sprite corresponding to a character or object in the environment of the game that is controlled by one or more users. In the case of a game application with a first person perspective the sprite may be absent.

As a non limiting example may correspond to a commercially available game application such as Teenage Mutant Ninja Turtles TMNT which was originally released by Konami Corporation as a coin operated arcade game. The game application may be a port or other version of the arcade game for a computer system or a binary image that is executable within an emulator application such as for example Multiple Arcade Machine Emulator MAME or another emulator application. The sprite may correspond to a character that a user at a client has selected which in this example is one of the four ninja turtles Leonardo Michelangelo Donatello or Raphael. A user may play the TMNT game remotely at a client with a joystick as if the user were in front of an arcade version of the game.

The remote access afforded by the game offers numerous advantages. For example suppose that a user is playing the TMNT game at a client at a workplace. Suppose that the user has selected the Donatello character and is currently battling Bebop the boss of stage 2. The user may suspend the game application drive home and resume play against Bebop at a client located at the home of the user. Alternatively a child of the user who is currently at the home client may join the TMNT and continue play as Donatello against Bebop while the user is driving home. When the parent user returns home the parent user may resume play at the point to which the child has progressed in the TMNT game e.g. stage 3 and a battle against Baxter Stockman. 

Turning now to shown is another example of a user interface that is rendered by a game client application in the client in the networked environment . Specifically depicts another example of a game screen that is generated by a game application captured and encoded into a media stream sent over the network and played back by the game client application . In the example of the game application is a multiple player game with two players.

The game screen includes status indications and for each of the players which informs the users of the current status of the players in the game. The status indications may include points earned time remaining player health and or other metrics generated by the game application . The game screen includes sprites and that each correspond to a respective character or object in the environment of the game that is controlled by a player. In one example each user at a respective client controls a respective player. In another example a player may be controlled by multiple users. Each of the users may be shown the same game screen .

Continuing with the TMNT example introduced in connection with may correspond to an instance of the TMNT game where two players are participating simultaneously. For example a user at a first client may have selected Donatello as the sprite while a user at a second client may have selected Raphael as the sprite . The two users may be at different geographic locations. In the game the two users work together to defeat enemies such as foot soldiers Bebop Rocksteady Baxter Stockman Lieutenant Granitor General Traag Krang and Shredder. 

It is noted that the TMNT game was originally designed as a coin operated arcade game which is a single machine experience. The arcade game did not include networked multiplayer functionality. However the embodiments described herein allow the TMNT arcade game to be played in a networked environment with multiple clients controlling one two three or four virtual joysticks of the game.

As another non limiting example may correspond to The Simpsons The Arcade Game from Konami Corporation. A first client may be controlling the sprite which may correspond to the Homer character while a second client may be controlling the sprite which may correspond to the Marge character. In a minigame available in The Simpsons The Arcade Game the characters may battle one another to be the first to finish a task. The minigame is based on repeated button pushing where the user who pushes the buttons fastest wins. When a user pushes a button or otherwise interacts with an input device an input command that corresponds to a button push in the original arcade game may be sent to the game server application . The wrapper may provide a virtual button device and translate the input commands to pushes on the virtual device. In one example two users at different clients may join to control the Marge character and co operatively send button pushes to win the minigame.

As another non limiting example may correspond to Gauntlet by Atari Games Corporation. Gauntlet is an arcade game that allows up to four players at a time at a single arcade machine. The players select among four playable characters Thor the Warrior Merlin the Wizard Thyra the Valkyrie or Questor the Elf. Each character may have different weapons which lends well to co operative play. By having multiple clients control multiple sprites multiple users may work together to advance in levels. As the game progresses success may depend on the willingness of the players to co operate by sharing resources and working together to slay enemies. Accordingly the various embodiments described herein allow users who are geographically separated to co operate in a game application that was originally designed as a single machine experience.

It is understood that the advantages of the present disclosure may also be realized in connection with game applications having limited multiplayer functionality such as for example Duke Nukem 3D by 3D Realms. Duke Nukem 3D included only limited multiplayer functionality using modem serial cable and internetwork packet exchange IPX local area networks. By executing Duke Nukem 3D as a game application in the networked environment Duke Nukem 3D may be controlled by multiple clients across a network such as for example the Internet.

Moving on to shown is another example of a user interface that is rendered by a game client application in the client in the networked environment . In this example the game screen of that is generated by the game application is shown within a region of a larger display area . In addition session status information is included within the display area .

The session status information provides additional status information that is not natively provided by the game application itself. For example the session status information may include the title of the game application e.g. Secret Agent an identification of the users that are currently controlling the game e.g. User1 User2 User3 a network connection quality indicator and so on. In some embodiments the session status information may be superimposed on the game screen rather than included in a larger display area . It is noted that in the example of multiple users at different clients are controlling the sprite of a single player game that is configured for single device play.

The display area may also include various user interface components for controlling the game exiting the game communicating with other users controlling the audio etc. In one embodiment the display area includes a region for displaying a video component of a user provided media stream from one or more of the other users. Such a user provided media stream may comprise a webcam stream from the respective user and or another type of media stream. Whether the display area is shown instead of the game screen being shown full screen on the display may be configured by the user in some embodiments.

With the TMNT example discussed in connection with the session status information may indicate that a first user at a client is controlling the Donatello character. If multiple clients are participating in the game the session status information may list screen names or other identifiers of the users who are controlling the Donatello character.

With reference to shown is another example of a user interface that is rendered by a game client application in the client in the networked environment . In the example of as in the example of the game application is a multiple player game with two players. However unlike in the game screen comprises a split screen with separate game screens and being shown on the display .

Each game screen corresponds to the perspective of a particular player each of which may be controlled by multiple users in some embodiments. In this example the top game screen corresponds to the perspective of Player 1 and includes the status indication and the sprite corresponding to that player. The bottom game screen corresponds to the perspective of Player 2 and includes the status indication and the sprite corresponding to that player. Depending on the game play the game screens may show an identical environment with both sprites in both game screens . In the example of both game screens are included within a single video signal captured from the game application and sent to all of the clients in a media stream.

As a non limiting example may correspond to screen of Mario Kart developed by Nintendo Co. Ltd. In Mario Kart each player selects a character that races on a variety of tracks using go karts. Players may compete against one another in various modes. Multiple game screens may be included that each correspond to a player. For example the top game screen may correspond to a user at a first client controlling a Mario character racing in a red go kart while the bottom game screen may correspond to a user at a second client controlling a Luigi character racing in a green go kart. Both characters may be racing on the same track but the perspective of each user may be different hence the multiple game screens .

Turning now to shown is yet another example of a user interface that is rendered by a game client application in the client in the networked environment . depicts the game screen generated by the game application in . However in contrast to the example of includes only the game screen and not the game screen

In this example the game screen corresponds to a portion of the video signal that is generated by the game application . The portion of the video signal is sent to the client s corresponding to Player 2 while another portion of the video signal is sent to the client s corresponding to Player 1. In various embodiments the portion of the video signal may be encoded as a distinct media stream. In one embodiment the distinct media stream is encoded with higher resolution and or quality than the portion of the media stream in for example . In another embodiment the distinct media stream is encoded with a lower bitrate than the media stream would be otherwise to take advantage of the lower resolution of the smaller area of the game screen versus a non split screen.

Some game applications may use a split screen some times but not exclusively. In such cases the wrapper and or the game server application may be configured to switch back dynamically to full screen encoding of the video signal when the split screen is not used. Although the examples of relate to a game screen that is split in half horizontally it is understood that a game screen may be divided into any number of portions and in any number of ways. In some examples a game application may employ a split screen with a number of views that do not correspond to particular players e.g. a map view a first person view etc. Such views may be transmitted together or separately in media streams to one or more of the clients as desired.

Continuing with the Mario Kart example discussed in connection with the game screen may correspond to the user at the second client who is controlling the Luigi character that is racing around the track using the green go kart. Because the user may be focused on the game screen during game play it may be advantageous to present either higher quality video of just the game screen or to reduce resource consumption by excluding the game screen

Referring next to shown is a flowchart that provides one example of the operation of a portion of the game server application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the game server application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the game server application obtains a request to launch a new game application from a client . The request may specify various configuration parameters such as permissions for other users to join the game a saved game state to be resumed etc. In box the game server application configures the video from the game application to be sent to the client as game output data . In box the game server application configures the game application to receive game inputs from the client as game input data .

Next in box the game application may be loaded from the games and an appropriate wrapper may be loaded from the wrappers and the game application may be executed in the wrapper . In box the game server application determines whether another client has joined the game. For example another client may have authenticated with the system and may have permission to join the game.

If another client has joined the game the game server application moves to box and configures the game video to be sent to the new client as game output data . In some cases such as with a split screen only a portion of the video signal captured from the game application e.g. a distinct region of the video may be sent to the new client . In box the game server application configures the game application to receive game inputs from the new client as game input data . Depending on whether the game server application is a multiple player game the game inputs of the new client may be mapped to a particular player in the game. Accordingly the game state information may be updated.

The game server application continues to box . If the game server application determines in box that another client has not joined the game server application also continues to box . In box the game server application determines whether a client has departed the game. If a client has not departed the game server application continues execution of the game application in the wrapper in box . However if a client has departed the game the game server application proceeds to box .

In box the game server application removes the departing client from the game. To this end the game server application may update the game state information to remove the departing client and may also notify other clients that are participating in the game. In box the game server application determines whether one or more clients remain in the game. If one or more clients remain in the game the game server application returns to box and continues execution of the game application in the wrapper .

Otherwise if no clients remain in the game the game server application determines in box whether the game application is to be terminated. In some embodiments the game server application may be configured to terminate execution of the game application when no clients remain in the game. In other embodiments the game server application may be configured to allow the game application to continue executing without any clients . In still other embodiments the game server application may be configured to save the state of the game application in the saved game state data so that execution of the game application may be resumed at a later time.

If the game server application determines that the execution of the game application is not to be terminated the game server application moves to box and determines whether the execution of the game is to be suspended. If the execution of the game is to be suspended the game server application continues to box and suspends execution of the game application . The state of the game application may for example be saved in the saved game state data . Thereafter the portion of the game server application ends.

If the game server application determines that the game application is not to be suspended the game server application returns to box and continues execution of the game application in the wrapper . If the game server application determines in box that the game application is to be terminated the game server application terminates execution of the game application in box . Thereafter the portion of the game server application ends.

With reference to shown is a schematic block diagram of the computing device according to an embodiment of the present disclosure. The computing device includes at least one processor circuit for example having a processor a memory and one or more graphics devices all of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated. The graphics devices may correspond to high performance graphics hardware including one or more graphics processors . The graphics devices are configured to render graphics corresponding to the game applications executed in the computing device .

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the game server application the wrappers the game applications and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the game server application the wrappers the game applications the game client application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowchart of shows the functionality and operation of an implementation of portions of the game server application . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowchart of shows a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the game server application the wrappers the game applications and the game client application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

