---

title: VIOS cluster alert framework
abstract: In a data processing system including a virtual I/O server (VIOS) cluster and multiple logical partitions (LPARs), at least one VIOS of the VIOS cluster performs functions of: receiving first registration information from one or more entities within the VIOS cluster; registering, based on the first registration information, a handler associated with a first message type; responsive to receiving second registration information, registering, based on the second registration information, a listener associated with a second message type; receiving a first message associated with a first alert event of the cluster; determining, based on the first message, that the handler is associated with the first message type; and calling the handler. In one embodiment, the handler is associated with a pointer to a subroutine, and registering the handler includes storing the pointer in a data structure that associates the handler with the first message type.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08661089&OS=08661089&RS=08661089
owner: International Business Machines Corporation
number: 08661089
owner_city: Armonk
owner_country: US
publication_date: 20101208
---
The present invention relates in general to distributed data processing systems and in particular to messaging within a cluster of virtual input output servers. Still more particularly the present invention relates to a method data processing system and computer program product that provides registration of handlers and listeners associated with message types within a cluster of virtual input output servers.

Virtualized data processing system configurations which provides the virtualization of processor memory and operating system OS resources are becoming more and more common in the computer and particularly the computer server industry. In the past clustering was implemented on a hardware level without regard for a cluster of virtual input output I O servers VIOSes that are utilized to provide I O services to one or more logical partitions LPARs . As such a cluster aware virtual I O server VIOS architecture needs an ability to respond to events of the cluster of VIOSes before one or more failures in operation of one or more client LPARs can occur.

Disclosed are a method data processing system and a computer program product that receives registration information to register either a handler e.g. a process to be called e.g. performed or invoked or a listener e.g. a system or process in association with a message type and calling the handler or sending information to the listener when a message associated with the message type is received according to one or more embodiments. In one example first registration information that includes information associated with a handler and a first message type is received and the handler is registered in a data structure associated with the first message type. For instance when a message associated with the first message type is received the handler is called e.g. performed or invoked . In another example second registration information that includes information associated with a listener and a second message type is received and the listener is registered in a data structure associated with the second message type. For instance when a message associated with the second message type is received information e.g. information from the message information from a configuration information from a database etc. can be sent to the listener. In one or more embodiments the messages can be associated with alert events corresponding to a cluster of virtual input output I O servers VIOSes that are utilized to provide I O services to one or more logical partitions LPARs . In one example the alert events indicate one or more statuses of the cluster of VIOSes such as one or more of pool up pool down threshold exceeded node down node up and one or more customizable statuses. In another example the alert events are recorded in a journal or database.

In one or more embodiments a method data processing system and a computer program product establishes cluster awareness for a VIOS created within an OS partition of a computing electronic complex within the data processing system. One embodiment provides a computing electronic complex CEC comprising a processor one or more physical input output I O adapters that support I O communication with an external network and a memory coupled to the one or more processors and having a virtualization management component that supports creation of and communication between one or more virtualized operating system OS partitions. The memory also includes at least one operating system OS partition including a first virtual input output I O server VIOS partition having a cluster aware CA OS that executes on a virtual processor resource of the VIOS. When executed the CA OS performs the function of registering the first VIOS with a VIOS cluster comprising at least a second VIOS. The registering of the first VIOS to the VIOS cluster enables the first VIOS to receive cluster specific data to make the first VIOS aware of the VIOS cluster and the first VIOS is thus able to communicate information with other VIOSes within the VIOS cluster.

The above summary includes simplifications generalizations and omissions of detail and is not intended as a comprehensive description of the claimed subject matter but rather is intended to provide a brief overview of some of the functionality associated therewith. Other systems methods functionality features and advantages of the claimed subject matter will be or will become apparent to one with skill in the art upon examination of the following figures and detailed written description.

The above as well as additional objectives features and advantages of the present invention will become apparent in the following detailed written description.

The illustrative embodiments provide a method data processing system and a computer program product that receives registration information to register either a handler to be called or a listener in association with a message type and calling the handler or sending information to the listener when a message associated with the message type is received. In one embodiment a message conveys an alert event that is associated with an asynchronous change in a state of an object associated with a cluster. For example one or more of a utility executing on a computing electronic complex CEC an application executing on a CEC and hardware included in the CEC monitors one or more of failures e.g. application failures utility failures hardware failures network failures etc. process related statuses and resource related statuses among others to generate and send the message that conveys the alert event. For instance the message that conveys the alert event includes one or more of a predictive failure warning a hardware failure a process related event e.g. an application initiation an application exit or end an application failure etc. and a resource related event e.g. excessive page swapping an overloaded CPU shortage of disk or storage space excessive network utilization network failure I O request queue length exceeded excessive processor time etc. among others.

In one example first registration information that includes information associated with a handler and a first message type is received and the handler is registered in a data structure associated with the first message type. For instance when a message associated with the first message type is received the handler is called e.g. performed or invoked . In another example second registration information that includes information associated with a listener and a second message type is received and the listener is registered in a data structure associated with the second message type. For instance when a message associated with the second message type is received information e.g. information from the message information from a configuration information from a database etc. can be sent to the listener. In one or more embodiments the messages can be associated with alert events corresponding to a cluster of virtual input output I O servers VIOSes that are utilized to provide I O services to one or more logical partitions LPARs . In one example the alert events indicate one or more statuses of the cluster of VIOSes such as one or more of pool up pool down threshold exceeded node down node up one or more customizable statuses. In another example the alert events are recorded in a journal or database.

The illustrative embodiments also provide a method data processing system and computer program product that establishes cluster awareness for a Virtual Input Output I O Server VIOS created within an operating system OS partition of a computing electronic complex within the data processing system. A first cluster aware VIOS is provided within an OS partition by execution of a cluster aware CA OS on a virtual processor resource of the first VIOS. The CA OS establishes the VIOS as a cluster aware VIOS by registering the first VIOS with a VIOS cluster comprising a second VIOS. Registering the first VIOS to the VIOS cluster enables the first VIOS to receive VIOS cluster configuration data and status data which provides the first VIOS with information about the other VIOSes within the VIOS cluster. The first VIOS is thus able to communicate with other VIOSes within the VIOS cluster and share I O resources with the other VIOSes within the VIOS cluster. Relevant cluster information is stored within a local storage of the first VIOS.

In the following detailed description of exemplary embodiments of the invention specific exemplary embodiments in which the invention may be practiced are described in sufficient detail to enable those skilled in the art to practice the invention and it is to be understood that other embodiments may be utilized and that logical architectural programmatic mechanical electrical and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and equivalents thereof.

Within the descriptions of the different views of the figures similar elements are provided similar names and reference numerals as those of the previous figure s . The specific numerals assigned to the elements are provided solely to aid in the description and are not meant to imply any limitations structural or functional or otherwise on the described embodiment.

It is understood that the use of specific component device and or parameter names such as those of the executing utility logic firmware described herein are for example only and not meant to imply any limitations on the invention. The invention may thus be implemented with different nomenclature terminology utilized to describe the components devices parameters herein without limitation. References to any specific protocol or proprietary name in describing one or more elements features or concepts of the embodiments are provided solely as examples of one implementation and such references do not limit the extension of the invention to embodiments in which different element feature or concept names are utilized. Thus each term utilized herein is to be given its broadest interpretation given the context in which that terms is utilized. For example as utilized herein the term cluster aware refers to the operational state of each VIOS within the cluster where the VIOSes contain information about which other VIOSes are connected within the cluster the configuration of the different CECs within the DPS supported by the cluster information about which client LPARs are supported by each VIOS and other state and operating information and data related to performing VIO operations using the physical I O devices of the DPS and those of the distributed storage repository storage repository . Cluster awareness is supported by both a shared networked VIOS database and locally maintained copies of VIOS cluster data within each VIOS.

As further described below implementation of the functional features of the invention is provided within processing devices structures and involves use of a combination of hardware firmware as well as several software level constructs e.g. program code . The presented figures illustrate both hardware components and software components within example data processing architecture having a specific number of processing nodes e.g. computing electronic complexes . The illustrative and described embodiments assume that the system architecture may be scaled to a much larger number of processing nodes.

In the following descriptions headings or section labels are provided to separate functional descriptions of portions of the invention provided in specific sections. These headings are provided to enable better flow in the presentation of the illustrative embodiments and are not meant to imply any limitation on the invention or with respect to any of the general functions described within a particular section. Material presented in any one section may be applicable to a next section and vice versa. The following sequence of headings and subheadings are presented within the specification 

With specific reference now to there is depicted a block diagram of an example cluster aware CA distributed data processing system DPS architecture within which the functional aspects of the described embodiments may advantageously be implemented. For simplicity cluster aware distributed DPS architecture shall be referred to herein simply as DPS . DPS comprises a plurality of computing nodes each referred to herein as a computing electronic complex CEC of which CECs A and B are illustrated. The number of CECs within DPS may vary ranging from a single CEC in a smaller system extending up to hundreds or thousands of CECs in larger scaled systems. For simplicity the embodiments shall be described from the perspective of a single CEC CEC A or two CECs CECs A B . Each CEC A B comprises at least one and in most instances a plurality of Virtual Input Output Server also referred to herein as a VIO Server or VIOS with functionality as described below. The actual number of VIOSes within each CEC of DPS is a design feature and may vary. Also supported within each CEC A B are client logical partitions interchangeably referred to as client LPARs or clients of which a first two clients clientA and clientB are illustrated. As described below with reference to client LPARs are logical partitions of a virtualized or operating system partitioned computing system. The actual number of clients within each CEC may vary and could range from a single client to hundreds or thousands of clients without limitation. For efficiency in presenting the inventive concepts herein only two clients are presented within each CEC of the various illustrative and described embodiments.

DPS also comprises a distributed storage facility accessible to each of the CECs and the components within the CECs . Within the described embodiments the distributed storage facility will be referred to as distributed storage repository and the distributed storage repository enables several of the client level functional features provided by the embodiments described herein. Distributed storage repository provides a single view of storage that is utilized by each CEC and for each client of each CEC within a cluster aware distributed system. Distributed storage repository comprises local physical storage and network storage both of which comprise multiple physical storage units e.g. disks. solid state drives etc. . The physical disks making up distributed storage repository may be distributed across a storage network e.g. a SAN . Additionally distributed storage repository provides a depository within which is stored and maintained the software utility instruction code OS images client images data system node and client level and or other functional information utilized in maintaining the client level system management and storage level operations features of DPS . In addition to distributed storage repository DPS also comprises a VIOS database DB which may also be a distributed storage facility comprising physical disks across a storage network. VIOS DB or DB is a repository that stores and provides access to various cluster configuration data and other functional components modules and data structures that enable the various cluster aware functionality described herein. In one embodiment portions of distributed storage repository may be allocated to provide storage pools for a cluster. Each VIOS of the cluster maintains a local view of the DB and updates the cluster level information data data structures within DB as such information data is created or updated.

Communication between each VIOS of each CEC as well as with the VIOSes of at least one other CEC is generally supported via a plurality of inter CEC interconnects illustrated as bi directional dashed lines connecting pairs of VIOSes . The arrows indicated two way data exchange or communication between components. In addition to the inter CEC interconnects each VIOS is also connected to distributed storage repository via VIOS to Store or CEC to Store interconnects which are also illustrated as full lined bi directional arrows. Also each VIOS is connected to DB via VIOS to DB interconnects presented as dashed and dotted lines. With the exception of the inter CEC connectors running from a first VIOS e.g. VIOS of a first CEC to a second VIOS e.g. VIOS on the same CEC the various interconnects represent a network level connectivity between the VIOS nodes of the cluster and the DB and the distributed storage repository . As utilized herein references to one or more nodes are assumed to refer specifically to a VIOS within the cluster. DPS also comprises a management console on which a management tool not shown executes.

Turning now to there is illustrated another view of DPS illustrating the network based connection of the CECs to the distributed storage repository and DB . illustrates in greater detail the network connectivity of VIOSes and CECs to each other and to Distributed storage repository . With this view CEC A Node A A and CEC B Node B B comprise similar constructs as presented in . Each CEC within DPS connects to distributed storage repository via one or more networks and or I O interconnect switch fabric generally illustrated as interconnect network fabric . The descriptions and illustrations assume that at least some of the CECs of DPS and distributed storage repository are located remotely from each other including being located in different countries for example such that no direct physical connectivity exists between the respective devices. For simplicity the embodiments are described as having primary interconnect network comprising a private wide area network WAN or a public WAN such as the Internet although other network types e.g. a local area network are possible and supported.

As depicted in one or more embodiments each CEC is also connected to one or more neighbor CECs in order to provide efficient fail over and or mobility support and other functions as described hereinafter. As utilized herein the term neighbor refers to a connected second CEC with which a first CEC is able to communicate and references to a neighbor CEC is not limited to a second CEC in geographic proximity to the first CEC. CEC A A and CEC B B are illustrated connected to each other via some connecting medium which may include a different network such as a local area network or some type of direct interconnect e.g. a fiber channel connection when physically close to each other. The connection between neighbor CECs A and B is illustrated as a direct line connection or a secondary network connection between CECs A and B. However it is appreciated that the connections are not necessarily direct and may actually be routed through the same general interconnect network as with the other CEC connections to distributed storage repository . In one or more alternate embodiments the connections between CECs may be via a different network e.g. network such as a local area network LAN .

Also illustrated by is an initial view of the component make up of an example distributed storage repository and an initial listing of some components of DB . As depicted each CEC comprises one or more network interfaces and one or more I O adapters to enable the CEC and thus the other components i.e. client partitions of the CEC to engage in network level communication as described below. Specifically each VIOS emulates virtual client I O adapters to enable communication by the client LPARs with distributed storage repository and or other clients within the same CEC or on a different CEC. The VIOSes emulate virtual I O adapters and communicates with distributed storage repository by connecting with corresponding virtual sever I O adapters at distributed storage repository . The VIOSes within each CEC are thus able to support client level access to distributed storage and enable the exchange of system level and client level information with distributed storage repository .

In addition each VIOS also comprises the functional components modules and data to enable the VIOSes within DPS to be aware of the other VIOSes anywhere within the cluster DPS . From this perspective the VIOSes are referred to herein as cluster aware and their interconnected structure within DPS thus enables DPS to also be interchangeably referred to as cluster aware DPS . As a part of being cluster aware each VIOS also connects to DB via network and communicates cluster level data with DB to support the cluster management functions described herein.

To support the virtual I O operations with the VIOSes and the associated virtual client I O adapters distributed storage repository comprises communication infrastructure . Communication infrastructure comprises network interface s and a plurality of server I O adapters utilized for cluster level communication and enabling access to data code software utility stored on distributed storage repository to complete I O operations thereto. Specifically these server I O adapters are also presented as virtual sever I O adapters which are paired with virtual I O adapters that are assigned to clients of CECs .

As shown with distributed storage repository DSR also comprises a plurality of software firmware and or software utility components including DSR configuration utility DSR configuration data e.g. inodes for basic file system access metadata authentication and other processes and DSR management utility .

To support the cluster awareness features of the DPS and in accordance with the illustrative embodiment distributed storage repository also comprises VIOS database DB in which is stored various data structures generated during set up and or subsequent processing of the VIOS cluster connected processing components e.g. VIOSes and management tool . DB comprises a plurality of software or firmware components and or and data data modules or data structures several of which are presented in for illustration. Among these components are cluster management CM utility VIO AdapterID data structure cluster configuration data Client identifying ID data active nodes list and I O redundancy data among others. These various components support the various clustering functionality and cluster aware I O operations of the one or more VIOSes as described herein. Additional features of DB and distributed storage repository as well as the specific components or sub components that enable the various clustering functionality are presented within the description of the remaining figures and throughout the description of the various embodiments.

These various data structures are created maintained and or updated and or deleted by the various operations of one or more of the processing components. In one embodiment the initial set up of the storage pools VIOS DB and corresponding data structures is activated by execution of a cluster aware operating system by management tool . Once the infrastructure has been established however maintenance of the infrastructure including expanding the number of nodes where required is performed by the VIOSes in communication with DB and the management tool .

Also associated with DPS and communicatively coupled to distributed storage repository and DB and VIOSes is management console which may be utilized by an administrator of DPS or of distributed storage repository or DB to access DB or distributed storage repository and configure resources and functionality of DB and of distributed storage repository for access usage by the VIOSes and clients of the connected CECs within the cluster. As shown in and described throughout the specification management tool is implemented within management console . However it is appreciated that resources of any node within DPS may be selected elected to perform the functions of management tool and the selected node would then perform one or more of the below described cluster creation and the other cluster monitoring and management functions utilizing the availability of the resources provided by DB and distributed storage repository .

In an alternate embodiment management tool is an executable module that is executed within a client partition at one of the CECs within DPS . In one embodiment the management tool controls the operations of the cluster and enables each node within the cluster to maintain current updated information regarding the cluster including providing notification of any changes made to one or more of the nodes within the cluster.

With reference now to there is presented a third view of an example DPS emphasizing a processing system architecture i.e. architecture of the individual CECs and specifically CEC A A . CEC A A CEC A serves as the example CEC that is described in greater detail in and throughout the specification. CEC A is presented as a server that comprises hardware components and software firmware OS components that are logically partition to create a plurality of virtualized machine partitions which are assigned as client logical partitions LPARs and virtual I O servers VIOSes . Hardware components of example CEC A comprises one or more processors A P one or more memories A M and local storage . The processors A P are interconnected with one or a plurality of memories A M and with local storage via a bus interconnect switch or an interconnect fabric not specifically shown . The specific internal connectivity of components which may be distributed across a large scale interconnect fabric is not germane to the described embodiments and no further detail is presented regarding the particular type of interconnectivity between the system hardware components.

Also included within hardware components are one or more physical network interfaces by which CEC A A connects to an external network such as network among others. Additionally hardware components comprise a plurality of I O adapters A E which provides the I O interface for CEC A A. I O adapters A E are physical adapters that enable CEC A to support I O operations via an I O interface with both locally connected and remotely networked connected I O devices including SF storage . Examples of I O adapters include Peripheral Component Interface PCI PCI X or PCI Express Adapter and Small Computer System Interconnect SCSI adapters among others. CEC is logically partitioned such that different I O adapters are virtualized and the virtual I O adapters may then be uniquely assigned to different logical partitions.

Logically located above the hardware level is a virtualization management component provided as a Power Hypervisor PHYP trademark of IBM Corporation as one embodiment. While illustrated and described throughout the various embodiments as PHYP it is fully appreciated that other types of virtualization management components may be utilized and are equally applicable to the implementation of the various embodiments. PHYP has an associated service processor coupled thereto within CEC . Service processor may be used to provide various services for one or more logical partitions. PHYP is also coupled to hardware management controller HMC which exists outside of the physical CEC . Operations of the different logical partitions may be controlled through HMC which is a separate data processing system from which a system administrator may perform various functions such as reallocation of resources to different logical partitions.

CEC A A further comprises a plurality of user level logical partitions LPARs of which a first two are shown represented as individual client LPARs A B within CEC A. According to the various illustrative embodiments CEC A supports multiple clients and other functional operating OS partitions that are created within a virtualized environment. Each LPAR e.g. client LPAR A receives an allocation of specific virtualized hardware and OS resources including virtualized CPU A Memory A OS A local firmware and local storage LStore . Each client LPAR includes a respective host operating system that controls low level access to hardware layer of CEC A and or to virtualized I O functions and or services provided through VIOSes . In one embodiment the operating system s may be implemented using OS 400 which is designed to interface with a partition management firmware such as PHYP and is available from International Business Machines Corporation. It is appreciated that other types of operating systems such as Advanced Interactive Executive AIX operating system a trademark of IBM Corporation Microsoft Windows a trademark of Microsoft Corp or GNU Linux registered trademarks of the Free Software Foundation and The Linux Mark Institute for example may be utilized depending on a particular implementation and OS 400 is used only as an example.

Additionally according to the illustrative embodiment CEC A also comprises one or more VIOSes of which two VIOS A and B are illustrated. In one embodiment each VIOS is configured within one of the memories A M and comprises virtualized versions of hardware components including CPU memory local storage and I O adapters among others. According to one embodiment each VIOS is implemented as a logical partition LPAR that owns specific network and disk I O adapters. Each VIOS also represents a single purpose dedicated LPAR. The VIOS facilitates the sharing of physical I O resources between client logical partitions. Each VIOS allows other OS LPARs which may be referred to as VIO Clients or as Clients to utilize the physical resources of the VIOS via a pair of virtual adapters. Thus VIOS provides virtual small computer system interface SCSI target and shared network adapter capability to client LPARs within CEC . As provided herein VIOS supports Virtual real memory and Virtual shared storage functionality with access to Distributed storage repository as well as clustering functionality.

Within CEC A VIOSes and client LPARs utilize an internal virtual network to communicate. This communication is implemented by API calls to the memory of the PHYP . The VIOS then bridges the virtual network to the physical I O adapter to allow the client LPARs to communicate externally. The client LPARs are thus able to be connected and inter operate fully in a VLAN environment.

Those of ordinary skill in the art will appreciate that the hardware firmware software utility and software components and basic configuration thereof depicted in B and may vary. The illustrative components of DPS and specifically those within CEC A are not intended to be exhaustive but rather are representative to highlight some of the components that are utilized to implement certain of the described embodiments. For example different configurations of data processing systems CECs devices may be provided containing other devices components which may be used in addition to or in place of the hardware depicted and may be differently configured. The depicted example is not meant to imply architectural or other limitations with respect to the presently described embodiments and or the general invention. The CEC depicted in the various figures may be for example an IBM eServer pSeries system a product of International Business Machines Corporation in Armonk N.Y. running the Advanced Interactive Executive AIX operating system or LINUX operating system.

Certain of the features associated with the implementation of a cluster aware VIOS e.g. VIOS of B and are introduced above with reference to the description of the previous figures and particularly . Descriptions of the specific functionality of the VIOS will continue to be provided with reference to the illustrations of B and . As presented by each VIOS is a virtual machine instance that emulates hardware in a virtualized environment. The VIOS is tasked with emulating SCSI storage devices and the VIOS provides client LPARs with access to distributed storage repository in cooperation with the PHYP . Configuration of the VIOS is performed through the hardware management tools of HMC . SCSI storage devices support a set of commands that allow SCSI initiators the ability to control access to storage . Database programs for example may manage access to distributed storage repository through a set of SCSI commands commonly referred to as persistent reserve. Other types of reserves are also supported by VIOS and the collective group of such commands is referred to herein as reserve commands.

As provided herein each VIOS allows sharing of physical I O resources between client LPARs including sharing of virtual Small Computer Systems Interface SCSI and virtual networking These I O resources may be presented as internal or external SCSI or SCSI with RAID adapters or via Fibre Channel adapters to distributed storage repository . The client LPAR however uses the virtual SCSI device drivers. In one embodiment the VIOS also provides disk virtualization for the client LPAR by creating a corresponding file on distributed storage repository for each virtual disk. The VIOS allows more efficient utilization of physical resources through sharing between client LPARs and supports a single machine e.g. CEC to run multiple operating system OS images concurrently and isolated from each other.

In one or more embodiments the VIOS operating system s is an enhanced OS that includes cluster aware functionality and is thus referred to as a cluster aware OS CA OS . One embodiment for example utilizes cluster aware AIX CAA as the operating system. According to one embodiment cluster awareness enables multiple independent physical systems to be operated and managed as a single system. As provided within VIOS of CEC A VIOS comprises cluster aware CA OS kernel or simply CA OS as well as LPAR function code for performing OS kernel related functions for the VIOS LPARs . When executed within two or more nodes of DPS CA OS enables various clustering functions such as forming a cluster adding members to a cluster and removing members from a cluster as described in greater detail below. CA OS manages the VIOS LPARs and enables the VIOSes within a cluster to be cluster aware. CA OS comprises several functional modules. In the described embodiments CA OS comprises cluster management CM utility which supports the configuration of the VIOS to enable cluster awareness and cluster level functionality such as redundant virtual I O. Each of these additional software components of CA OS may be a functional module within CM utility in one embodiment and each module is thus described as such throughout the remainder of this specification. In one embodiment CM utility may be a separate utility that is locally installed or downloaded from DB for example as an enhancement to an existing OS within a CEC or VIOS when initially configured for operation within the VIOS cluster. CM utility is then executed when configuring the individual VIOS to create or join a cluster and or become a cluster aware node within the VIOS cluster. With this implementation structure CM utility enables the OS to support the various cluster awareness and other cluster level features and functionality. In an alternate embodiment CA OS includes all the clustering features and functionality and established the various features when the CEC VIOS joins the cluster and or during configuration of VIOS to become cluster aware.

In one implementation functional components of CM utility are encoded on local device storage of a corresponding VIOS such that the VIOS becomes automatically configured as a part of the VIOS cluster when the VIOS is initially activated. On initial set up of the VIOS VIOS API kernel extensions and virtual adapters are configured within VIOS to enable communication with the other VIOSes the VIOS DB and with the distributed storage repository . During this initial setup of the VIOS the VIOS executes a registration module of CM utility to register VIOS with the cluster. The registration module enables VIOS to retrieve download or have forwarded from DB on successful registration with the cluster any additional CM software components and or cluster level information and or data required to establish full cluster awareness when the VIOS has completed installation and is activated within the CEC . Thus in one embodiment in addition to the locally stored CA OS components and software modules of CM utility other functional components of CM utility may be downloaded from DB when CEC is powered on or when one or more VIOSes are enabled on CEC . Once the VIOS has completed its setup one or more client LPARs that are activated within CEC may be assigned to VIOS and VIOS subsequently performs the various I O operations initiated by the client as initiator or directed to the client as target . Updates to the local VIOS data may periodically be made as changes are made within the VIOS cluster and or as one or more new client LPARs are added to the CEC requiring VIOS support. In one embodiment CM utility may also enable retrieval and presentation of a comprehensive view of the resources of the entire cluster.

It is appreciated that while various functional aspects of the clustering operations are described as separate components modules and or utility and associated data constructs the entire grouping of different components utility data may be provided by a single executable utility application such as CA OS or CM utility . Thus in one embodiment CA OS executes within VIOS and generates a plurality of functional components within VIOS and within DB . Several of these functional components are introduced within and and others are described throughout the various embodiments provided herein. For simplicity in the descriptions which follow references to CM utility and CA OS will be assumed to be referring to the same general component i.e. CM utility being a subcomponent of CA OS and the terms may be utilized interchangeably throughout the specification. As described in greater detail below and with reference to one of OS or CM utility comprises or provides the functionality of an alert framework utility AFU A which comprises several individual components utilities defined in Section E below.

As further presented by the illustrative embodiments e.g. VIOS includes one or more additional functional modules components such as VIO adapter s interface and virtual I O drivers utility which provides I O functionality to VIOS and enables VIOS to route data traffic to and from data structures and storage within distributed storage repository and or DB . Virtual I O adapter s and CM utility also enable the VIOS to provide each client LPAR with access to the full range of storage accessible within distributed storage repository and other cluster supported functionalities as described herein.

In the illustrative embodiment each client LPAR communicates with VIOS via PHYP . VIOS and client LPAR A B are logically coupled to PHYP which enables supports communication between both virtualized structures. Each component forwards information to PHYP and PHYP then routes data between the different components in physical memory A M . In one embodiment a virtualized interface of I O adapters is also linked to PHYP such that I O operations can be communicated between the different logical partitions and one or more local and or remote I O devices. As with local I O routing data traffic coming in and or out of I O adapter interface or network interface from a remote I O device is passed to the specific VIOS via PHYP .

With the above introduced system configuration of B and A a first VIOS through a communication channel established via PHYP grants access to another VIOS through one or more virtual adapters. VIOS includes the functionality to query PHYP for the identity of the Client LPAR on the CEC where the VIOS is currently running.

With the cluster aware VIOS infrastructure different VIOSes associated with different CECs access the distributed storage repository and cluster level information is shared communicated across the VIOS cluster via VIOS DB while each client I O process is being performed. In this manner the VIOS associated with a first client on a first CEC is aware of which SAN disk resources are being accessed by a second client on a second CEC or on the same CEC . With this awareness factored into the I O exchange with the distributed storage repository the VIOS associated with the first client can avoid accessing the same storage resource that is concurrently being utilized by the second client thus preventing data integrity issues which could potentially cause data corruption and client partition crashes.

In one embodiment VIOS functionality is enhanced to enable assigning of client identifiers ID and unique virtual I O adapter IDs in a secure manner while enabling storage pooling within virtual storage within distributed storage repository . According to the described implementation the different clientID vioAdapterID pairings are unique throughout the cluster so that no two clients throughout the entire cluster can share a same virtual adapter and no two vioAdapterIDs are the same within a single client.

As described herein a cluster is a set of one or more networked VIOS partitions where each VIOS within the cluster has access to a common set of physical volumes. The physical volume resides within the VIOS cluster and is utilized to provide block storage. Implementation of the cluster awareness with the VIOSes of the cluster enables the VIOSes to provide cluster storage services to virtual clients client LPARs . The VIOS software stack provides the following advanced capabilities among others Storage Aggregation and Provisioning Thin Provisioning Virtual Client Cloning Virtual Client Snapshot Virtual Client Migration Distributed Storage Repository Virtual Client Mirroring and Server Management Infrastructure integration. More generally the VIOS protocol allows distributed storage to be viewed as centralized structured storage with a namespace location transparency serialization and fine grain security. The VIOS protocol provides storage pooling distributed storage and consistent storage virtualization interfaces and capabilities across heterogeneous SAN and network accessible storage NAS . In order to provide block storage services utilizing the distributed repository each VIOS configures virtual devices to be exported to virtual clients. Once each virtual device is successfully configured and mapped to a virtual host VHOST adapter the clients may begin utilizing the devices as needed. In one embodiment the virtualization is performed utilizing POWER virtual machine VM virtualization technology which allows the device configuration process to occur seamlessly because the physical block storage is always accessible from the OS partition.

One embodiment provides a communication protocol that enables efficient communication between the Clients and distributed storage repository via the respective VIOS and virtual I O adapters assigned within the VIOSes to the specific client . The embodiment further provides storage virtualization and management via the specific communication mechanisms protocols implemented with respect to the use of cluster awareness and the Distributed storage repository such that the virtualization is presented within the context of the server CEC virtualization and management. With the presented protocol different VIOSes associated with different CECs access the same single distributed DB and cluster level information is shared communicated with each Client I O process such that a first client on a first CEC is aware of which SAN disk resources are being accessed by a second client on a second CEC or on the same CEC . With this awareness factored into the I O exchange with the distributed storage repository the first client can avoid accessing the same storage resource that is concurrently being utilized by the second client thus preventing data integrity issues which would potentially cause data corruption and client partition crashes.

The communication protocol provides a highly integrated server based storage virtualization as well as distributed storage across clustered VIOS partitions. This protocol comprises one or more query features which enables dynamic tracking of storage resource usage across the entire cluster. Throughout the following description the communication and management protocol shall be described as a VIOS protocol. VIOS protocol provides distributed storage across clustered VIOS partitions. With the VIOS protocol the storage is considered as a one large storage pool which chunks of storage i.e. logical units or LUs allocated to each client . The VIOSes within the overall system DPS are now structured as part of the cluster with each VIOS being a node in the cluster. Each VIOS node communicates with other VIOS nodes utilizing the VIOS protocol. With this configuration of VIOSes when two or more client LPARs belonging to different CECs share storage on the SAN e.g. two clients assigned overlapping LUs the VIOS protocol enables each node to query each client within the cluster to determine the current usage of the storage device. When this information is received the VIOS may then disseminate this information to other VIOSes. Each client is thus made aware of whether the SAN storage device that the client is trying to access is currently being used by some other client.

Referring now to there is illustrated an example VIOS communication infrastructure having an application programming interface API controlling the various exchanges between XML components over a virtual Small Computing Systems Interface vSCSI topology. Central to the Cluster VIOS communication paradigm is a plurality of APIs of which API is provided in the illustrative embodiment. The VIOS API is utilized to manage objects within a VIOS cluster. The API includes the necessary information about how to connect to and or exchange information with internal VIOS functional modules as well as with DB DDS and management tool . In one embodiment management tool is implemented within a cluster aware server module and includes server management sub agents which represents the structures utilized by the managing tool to communicate with the operating system. The internal functional modules within VIOS comprises command line interface CLI Daemon socket kernel extension vKE and vSCSI host . The vSCSCI host includes the enhancements to VIOS that enable the cluster aware functionality. These enhancements are illustrated as a connected block structure by which advanced VIOS operations and emulation are provided as described in greater detail below. VIOS with its various internal components is connected within CEC via PHYP as previously illustrated by described above.

Each component that connects with API and makes one or more requests through API is generally referred to as a caller throughout this specification. As presented by the figure any one or management tool via management agent CLI Daemon and vSCSI host may be a caller requesting specific types of information exchange via API . In one embodiment the API comprises an XML interface as well as a C programming language interface. The various callers use the VIOS API to initiate actions on these objects. Some actions may change the state of one or more objects in the VIOS cluster. The VIOS API may be used by multiple callers at any given time. While callers are not aware of other callers using the VIOS API and do not have the ability to notify all callers of actions that they initiate the VIOS API event notification protocol provides cluster level awareness of caller modifications to prevent data contamination during processing of multiple caller requests. Callers that need awareness of actions taken on VIO objects are able to register for event notification and receive notification about changes to VIO objects that occur within the cluster. The callers then utilize the notifications as a trigger to go to the shared storage DB and retrieve the necessary information from the shared VIOS cluster DB to keep the caller s locally stored VIO object data current. Additionally in one embodiment VIOS API event notification provides participating callers with results to actions that have occurred on one or more VIO objects. As described herein these VIO object events are categorized as Lifecycle events or Alert events.

In one embodiment to decrease the amount of APIs required be each consumer only a few high level APIs are exposed. Each API provides various actions on an object by object basis. Interaction between the API and a consumer a caller receiving data in response to a requestor a caller registered to receive notification of an event is performed by the consumer providing a VIO request extensible markup language XML buffer with sufficient amount of data provided in order for the request to be processed. Once the request has been processed a VIO response XML steam is written back to the caller for response processing. When the response indicates a successful processing of the request the XML steam contains the status and the requested object information that is needed. However if the request fails the response XML stream contains VIO exception information. The common format of each object API is to provide a vioRequest structure that contains the required information needed for request processing.

Returning to in the illustrative embodiments a VIOS emulates SCSI devices using a kernel extension vscsi host kernel extension kernel extension in the VIOS partition which also includes the code modules for providing VCSI host and Daemon . VSCSI host includes one or more driver s and sub driver s which provide separate functions. A first set of drivers provides emulation functionality while other drivers provide transport and messaging functionality. VSCSI host includes VIOS enhanced operational functionality illustrated via additional structure coupled to VSCSI host . Structure includes software modules that enable the various messaging structures used for implementing VIOS cluster awareness functionality and VIOS Client emulation. Client logs into the VIOS as part of the transport layer protocol. At the time the client logs into the VIOS the PHYP provides information to the VIOS regarding the identity ID of the client relative to the CEC . The VKE services SCSI requests sent by the VIOS through a transport layer supported by PHYP . The kernel code does not complete the login request until the VKE sends a message with the CEC relative client ID using a socket to Daemon which is also running on the VIOS . VKE also transmits other messages within the cluster environment. The user daemon has access through API to Database DB which is maintained by all VIOS partitions servicing the client s within the cluster.

As described herein implementation of the cluster awareness with the VIOSes of the cluster enables the VIOSes to provide cluster storage services to virtual clients . The VIOS software stack provides the following advanced capabilities among others Storage Aggregation and Provisioning Thin Provisioning Virtual Client Cloning Virtual Client Snapshot Virtual Client Migration Distributed Storage Repository Virtual Client Mirroring and Server Management Infrastructure integration. More generally the VIOS protocol allows distributed storage to be viewed as centralized structured storage with a namespace location transparency serialization and fine grain security. The VIOS protocol provides storage pooling distributed storage and consistent storage virtualization interfaces and capabilities across heterogeneous SAN and network accessible storage NAS . In order to provide block storage services utilizing the distributed repository each VIOS configures virtual devices to be exported to virtual clients. Once each virtual device is successfully configured and mapped to a virtual host VHOST adapter the clients may begin utilizing the devices as needed. In one embodiment the virtualization is performed utilizing POWER virtual machine VM virtualization technology which allows the device configuration process to occur seamlessly because the physical block storage is always accessible from the OS partition. When a virtual target device is removed the local OS cache local storage data entries are deleted. Within the clustered environment removal of any of the LUs is noticed to the other VIOSes. According to the described method a distributed device repository and local repository cache are utilized to ensure the nodes within the cluster become device level synchronized from each node VIOS in the cluster.

According to one embodiment information needed to configure a virtual target device VTD is stored in DB . This database DB can be accessed by all the nodes in the VIOS cluster utilizing services provided by Cluster Aware OS such as but not limited to Cluster Aware AIX CAA . Additionally certain small levels of cluster data are stored in a local database ODM e.g. virtualized portions of storage on each node for the devices which exist on that node. This local storage is necessary in order for the processes running on the local node to be able to match the VIOS device with the correct information in the distributed database.

With information about each device being stored in the DB operations on those devices can be performed from any VIOS node in the cluster not just the node on which the device resides. When an operation on a device is performed on a remote non local node i.e. one other than the node where the device physically resides the operation is able to make any changes to the device s information in the DB as necessary. When corresponding changes are needed in the device s local database the corresponding CM utility enables the remote node to send a message using cluster services to the local node to notify the local node to make the required changes. Additionally when a node in the cluster is booted up or when the node rejoins the cluster after having been lost for any period of time the node will autonomously reference the DB in order to synchronize the data there with the local data of the node.

As an example if an operation to delete a VIOS device from the local node is executed on a remote node the operation will remove the information associated with that device from the DB and send a message to the local node to tell the local node to remove the device from the local database. If the local node is down or not currently a part of the cluster when the local node first boots up or rejoins the cluster the local node will automatically access the DB retrieve current data information that indicates that the information for one of the local devices has been removed and delete that device from the local database records.

As illustrated by DB is accessible to the various VIOS nodes and to management tool via cluster communication fabric. Database comprises several different modules of data which may be arranged in a plurality of formats e.g. tables raw data sequenced data etc. . According to the figure DB includes a virtual adapter data structure which maintains a listing of and configuration information about the virtual adapters. DB also includes a second data structure that holds the unique adapter identifiers AdapterIDs and is therefore referred to herein as AdapterID data structure . DB maintains a listing of and information about the VIOSes within a VIOS data structure . In one or more embodiments each of the described data structures can be or can include a table within DB . When a virtual adapter is first discovered the cluster management CM utility creates a row within the virtual adapter data structure and a row within the unique AdapterID data structure . These two rows in the different data structures are associated with each other and the identifier ID is guaranteed to be unique.

In one or more embodiments adapter names are unique per CEC and where VIOS partitions are not mobile i.e. do not move from a first CEC to a second CEC the adapter names can be identified using a CEC name tupple. When a VIOS is first configured the VIOS downloads from DB a copy of cluster configuration data and cluster state status data from VIOS DB . VIOS DB may comprise a plurality of additional data structures and or components some of which are illustrated within VIOS DB but are not germane to the description of the embodiments presented herein.

As illustrated DB includes an alert framework data structure that includes listeners and handlers and an alert journal log In one or more embodiments a registration utility of one or more of a VIOS DB or management console processes information and modifies listeners and handlers . As illustrated a pool up message type of listeners indicates a notification of VIOS D and a node down message type of handlers indicates a call to a Handler. In one example the listener of VIOS D within listeners includes one or more of a network address and a port number that are usable to send one or more messages associated with the message type e.g. pool up . In another example a process can be considered a handler for an alert event conveyed in a message associated with a message type. For instance a handler is called to perform or invoke a process that was registered in association with a message type. For example a message associated with a node down message type is received and a handler is called to respond to the node down alert event conveyed in the message. For instance the message associated with the node down message type corresponds to VIOS node D changing a status to node down and a handler is called to perform an election process to elect another primary notification node.

Turning now to a block diagram of a different view of a cluster of VIOSes is illustrated according to one or more embodiments. As shown the VIOS cluster can include two or more VIOS partitions such as VIOSes A D and each of VIOSes A D is communicatively coupled to i.e. able to communicate with another of VIOSes A D. As illustrated a first CEC A can include VIOSes A and A and client LPARs A AJ for some integer number J a second CEC B can include VIOSes B and B and client LPARs B BK for some integer number K a third CEC C can include VIOSes C and C and client LPARs C CL for some integer number L and a fourth CEC D can include VIOSes D and D and client LPARs D DM for some number M. In one or more embodiments each of CECs A D includes one or more structures and or functionalities described with reference to CEC A and .

As shown VIOSes A D includes alert framework utilities AFUs A D respectively. In one or more embodiments each of VIOSes A D includes one or more structures and or functionalities described with reference to VIOS . For example VIOS A includes a VIOS daemon viosd and viosd can include alert framework utility AFU A. As illustrated each of VIOSes D and D is communicatively coupled to VIOS DB and is also communicatively coupled to distributed storage . VIOS DB can also be coupled to distributed storage . In one embodiment VIOS DB is a computer system that includes a database management system. For example DB includes one of a solidDB database an Oracle database a DB 2 database a SQL Server database a SQLite database a PostgreSQL database or a MySQL database among others as the database management system.

In one or more embodiments the clustered VIOSes A D are associated multiple statuses and messages are utilized and communicated to convey one or more of the multiple statuses associated with the VIOS cluster e.g. statuses associated with the cluster configurations of the cluster one or more processor pools CECs A D VIOSes A D connectivity to VIOS DB connectivity to distributed storage etc. . In one embodiment the messages convey alert events that are associated with an asynchronous change in a state of an object associated with the cluster. For example one or more of a utility executing on a CEC an application executing on a CEC and hardware included in the CEC monitors one or more conditions from among failures e.g. application failure utility failure hardware failure network failure etc. process related statuses and resource related statuses among others to generate and send the messages that convey alert events. For instance the messages that convey alert events include one or more of predictive failure warnings hardware failures process related events e.g. an application initiation an application exit or end an application failure etc. and resource related events e.g. excessive page swapping an overloaded CPU shortage of disk or storage space excessive network utilization network failure I O request queue length exceeded excessive processor time etc. among others.

In one example VIOS B functions within the cluster and can be associated with a status of node up . For instance when a status of VIOS B changes to node up a message is communicated in the cluster that informs one or more of DB and the other VIOSes VIOSes A A and B D to indicate that VIOS B has a status of node up . In a second example VIOS C is nonfunctional i.e. not operational within the cluster and can be associated with a status of node down . For instance when a status of VIOS C changes or is determined to be node down a message is communicated in the cluster that informs one or more of DB and VIOSes A B and C D to indicate that VIOS C has a status of node down . In another example the one or more statuses can include one or more of pool up pool down threshold exceeded and other customizable statuses.

In one embodiment AFUs A D monitors status messages associated with the cluster. In one example VIOS A is elected as the primary node of the cluster and AFU A monitors messages of the cluster for one or more messages associated with statues pool up pool down and threshold exceeded among others. In another example each of AFUs A D monitors messages in the cluster for one or more messages associated with statues node up and node down among others.

In one embodiment one or more of AFUs A D provide detection and or determination of one or more events issues e.g. problems that may disrupt operation of one or more client LPARs A DM. For example one or more change of statuses may cause one or more failures in operation of one or more client LPARs A DM. For instance the one or more changes of statuses that may cause one or more failures include pool down node down and threshold exceeded among others. In one embodiment detecting and or determining of the one or more issues utilizing one or more of AFUs A D provides a method and or system with an ability to address respond and or correct the one or more issues before one or more failures in operation of one or more client LPARs A DM can occur.

For example a first VIOS node e.g. VIOS A or C of the cluster detects and or determines that a second VIOS node e.g. VIOS C of the cluster has changed a status to node down e.g. utilizing AFUs A or AFU C or another AFU within the cluster and the first VIOS A C reconfigures itself or is reconfigured to provide one or more functionalities and or services that were previously provided by the second VIOS C. For instance the detection and or determination that the second VIOS C of the cluster has changed a status to node down e.g. not functioning provides the first VIOS A C with an ability to provide one or more services to one or more client LPARs that were being provided by the second VIOS node. In one embodiment the switchover to the first VIOS A C to provide the services to the client LPARs occurs before a failure in operation of the one or more client LPARs can occur. In one example configuring the first VIOS A C to provide the one or more services previously provided by the second VIOS to the one or more LPARs involves calling a handler to inform and or configure first VIOS A C to provide the one or more services to one or more LPARs C CL. In another example providing the one or more services to the one or more LPARs C CL that were being provided by the second VIOS C includes migrating one or more LPARs C CL to one or more other CECs e.g. one or more of CECs A B and D .

In one or more embodiments two VIOS nodes of the cluster utilize and or manage messages associated with alert events. For example two nodes of the cluster can be elected to utilize and or manage messages associated with alert events. For instance VIOSes A and D are elected and utilize and or manage messages associated with alert events. In this instance VIOSes A and D can be respectively a primary notification node and a primary cleanup node. In one embodiment the two VIOS nodes e.g. nodes A and D are elected in an election process that supports primary VIO nodes.

In one example of an election VIOS A is elected as a primary cleanup node that utilizes and or manages messages associated with alert events and stores the alert events in an alert journal log of DB or distributed storage . In one embodiment VIOS A is elected as a primary cleanup node after an elector node determines that VIOS A is a member of the cluster VIOS A includes an ability to store information in distributed storage and or VIOS A includes an ability to access a cluster database e.g. DB . In a second example of an election an elector node elects VIOS D as a primary notification node that utilizes and or manages messages associated with alert events and sends and or posts messages associated with these events to the VIOSes of the cluster.

Turning now to a block diagram of an alert framework utility is illustrated according to one or more embodiments. As illustrated AFU A includes monitoring utility registration utility calling list utility notification utility and journaling utility . In one or more embodiments one or more of AFUs A D can include one or more of same or similar structures and or functionalities as described with reference to AFU A.

In one or more embodiments monitoring utility monitors messages associated with alert events. For example monitoring utility is configured to monitor types of events. For instance one or more types of events can include one or more of node up node down pool up pool down and threshold exceeded among others. In one embodiment monitoring utility filters messages based on a message type. For example a monitor utility of AFU C monitors messages associated with message types of one or more of node up and node down while a monitor utility of AFU A monitors messages associated with message types of one or more of pool up pool down and threshold exceeded .

In one or more embodiments registration utility receives information associated with a message type e.g. an alert type and a process that is to be performed or invoked in response to a message associated with the message type. For example the process can be considered a handler for an alert event conveyed in a message associated with a message type. In one or more embodiments registration utility receives information associated with a message type e.g. an alert type and an object e.g. a process executing on a system or a system that is to be notified in response to a message associated with the message type. For example the object or system can be considered a listener for an alert event conveyed in a message associated with a message type.

Generally an entity application within the CA DPS registers with the alert framework to consume messages of a specific type. Thus the different entities may consume a same type message or different type messages and the actual consumption is determined by the registration parameters provided by the entity upon registration with the alert framework. In one example a VIOS registers with a primary notification node via registration utility to be notified with information when a message associated with the message type is received. For instance a VKE of the VIOS registers with the primary notification node via registration utility to be notified with information when a message associated with the message type is received. In a second example a database e.g. DB or an entity e.g. management console registers with a primary notification node via registration utility to be notified with information when a message associated with the message type is received. For instance DB stores the notification information for a VIOS node of the cluster that becomes a new primary node after status of a former primary node has changed to node down . In another example an application or utility registers with a primary notification node via registration utility to be notified with information when a message associated with the message type is received.

In one or more embodiments calling list utility receives a message associated with a message type and calls a handler to perform or invoke a process that was registered in association with the message type. For example calling list utility receives a message associated with a node down message type and calling list utility calls a handler to respond to the node down alert event conveyed in the message. For instance the message associated with the node down message type corresponds to VIOS node D changing a status to node down and a handler is called by calling list utility to perform an election process to elect another primary notification node.

In one or more embodiments notification utility provides information to a listener e.g. an object or system in response to a message associated with a message type. In one example notification utility notifies a VIOS with information when a message associated with the message type is received. For instance a VKE of the VIOS is notified with information when a message associated with the message type is received. In a second example notification utility notifies a database e.g. DB with information when a message associated with the message type is received. For instance notification utility inserts and or updates data of one or more rows of DB . When that data is updated the notification utility also alerts the other nodes that are registered to receive notification of the update and the other nodes can access the DB to retrieve the updated data.

In one or more embodiments journaling utility stores and or records a journal of one or more the messages received by AFU A. In one example journaling utility stores and or records a journal of all messages received by AFU A. In another example monitoring utility filters messages based on one or more message types and journaling utility stores and or records a journal of a portion of messages received by AFU A. In one embodiment the journal is stored and or recorded in alert journal log within DB . In an alternate embodiment the journal is stored and or recorded in distributed storage .

Turning now to a block diagram of a registration utility receiving and processing information is illustrated according to one or more embodiments. As shown registration utility receives information A and B that includes registrations A and B respectively. As illustrated registrations A and B include respective types A and B and include respective payloads A and B. As shown type A includes a listener type and payload A includes a message type of pool up and a listener of VIOS D. As illustrated type B includes a handler type and payload B includes a message type of node down and a handler of Handler. In one embodiment Handler is a pointer to a function or subroutine.

In one or more embodiments registration utility processes information A and B and modifies listeners and handlers of data structure . As illustrated a pool up message type of listeners indicates a notification of VIOS D and a node down message type of handlers indicates a call to Handler. In one embodiment data structure is stored in a memory associated with or of a VIOS. In another embodiment data structure is stored in a database e.g. DB . For example alert framework data structure of DB can include data structure and listeners and handlers can include listeners and handlers respectively.

Turning now to a block diagram of a monitoring utility receiving and processing information is illustrated according to one or more embodiments. As shown monitoring utility receives information C F that includes messages C F respectively. As illustrated messages C F include respective types C F and include respective payloads C F.

In one or more embodiments monitoring utility filters messages based on message types. For example monitoring utility filters messages C F based on respective message types C F and routes messages C F to one or more appropriate utilities and or bit bucket . For instance monitoring utility accesses data structure to filter and or route messages C F based on respective message types C F. As shown monitoring utility routes messages C F to utilities and bit bucket respectively.

In one embodiment information and or a message routed to bit bucket is discarded. In one example bit bucket can represent a method or process that discards information F. In one instance the method or process that discards information F advances a pointer in a queue without copying or processing the data e.g. message F from the queue. In a second instance the method or process that discards information F frees memory associated with and or that stores information F. In another instance the method or process that discards information F routes information F to an information consumer that discards information sent to the information consumer e.g. dev null in a Unix or Unix like operating system . In another example bit bucket can represent an information consumer that discards information sent to the bit bucket e.g. dev null in a Unix or Unix like operating system .

Turning now to a method of operating an alert framework utility is illustrated according to one or more embodiments. The method begins at block and proceeds to block where AFU A is initialized. In one embodiment AFU A is initialized with a default configuration and or a configuration that is specific to AFU A. In one example AFU A retrieves the default configuration and or the configuration that is specific to AFU A from one or more of distributed storage and DB . In another example a VIOS node of the cluster e.g. VIOS A can initialize AFU A with the default configuration and or the configuration that is specific to AFU A. In one embodiment AFU A is included in viosd and AFU A is initialized when viosd is initialized.

AFU A receives information at block and determines an association of the received information at block . In one example the received information is associated registration information. In another example the received information is associated with a message that corresponds to an alert event. If the received information is associated with registration information registration utility of AFU A receives registration information at block . In one embodiment the registration information is associated with a message type e.g. an alert type and a process that is to be performed or invoked in response to a message associated with the message type. For example registration utility of AFU A receives information B that is associated with a handler and a node down message type. In another embodiment the registration information is associated with a message type e.g. an alert type and a listener that is to be notified in response to a message associated with the message type. For example registration utility of AFU A receives information A that is associated with a listener and a pool up message type.

At block registration utility registers the message type and the process that is to be performed or invoked in response to a message associated with the message type. Alternatively at block registration utility can register the listener that is to be notified in response to a message associated with the message type. In one example registration utility registers a node down message type and a process or handler of Handler in handlers of data structure . In another example registration utility registers a pool up message type and a listener of VIOS D in listeners of data structure . In one embodiment the listener of VIOS D in listeners includes one or more of a network address and a port number that are usable to send one or more messages associated with the message type e.g. pool up . In one example the network address is a network address of a CEC. In a second example the network address is a network address of a VIOS e.g. a VIOS of VIOSes A D . In another example the port number is port number associated with a VKE or a VIOS daemon. The method proceeds to block at which next information is received by the AFU.

If the received information is associated with a message monitoring utility of AFU A receives the message at block . In one embodiment receiving the message can include queuing the message in a queue. At block monitoring utility determines whether or not a process or handler is registered for a message type that corresponds to the received message. If a process or handler is not registered for a message type that corresponds to the received message the method proceeds to block .

If a process or handler is registered for a message type that corresponds to the received message the method proceed to block where calling list utility calls e.g. performs or invokes the handler registered for the message type that corresponds to the received message block . For example the message type of message C may be node down and utility determines that Handler is registered for the node down message type block and Handler is called and can use payload C block . The method proceeds to block .

At block monitoring utility determines whether or not a listener is registered for a message type that corresponds to the received message. If a listener is not registered for a message type that corresponds to the received message the method proceeds to block . If a listener is registered for a message type that corresponds to the received message notification utility provides the message to the listener and or provides information associated with the received message to the listener at block . For example the message type of message D is pool up and utility determines that VIOS D is registered for the pool up message type block and notification utility notifies VIOS D with message D or payload D block . The method proceeds to block .

At block monitoring utility determines whether or not to record the received message. If the message is not to be recorded the method can proceed to block . If the message is to be recorded journaling utility records and or stores the message or information associated with the message in distributed storage and or DB at block . For example the message type of message E is volume resize and journaling utility is programmed to record message E block . Thus journaling utility stores and or records message E or payload E block .

The flowcharts and block diagrams in the various figures presented and described herein illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowcharts or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The specific embodiments presented herein provides a method data processing system and computer program product that implements a VIOS alert framework within a VIOS cluster. Specifically the method is implemented within a data processing system having one or more computing electronic complexes CECs that comprise a plurality of virtual input output I O servers VIOSes configured within a VIOS cluster which has an associated VIOS database DB and provides I O resources to a plurality of logical partitions LPARs executing within the one or more CECs. The method comprises a first VIOS of the VIOS cluster performing the functions of receiving first registration information from a first functional entity of the VIOS cluster registering based on the first registration information a handler associated with a first message type receiving second registration information from a second functional entity of the VIOS cluster registering based on the second registration information a listener associated with a second message type where the listener corresponds to the second functional entity of the VIOS cluster and in response to receiving a first message corresponding to a first alert event of the VIOS cluster determining based on characteristics of the first message that the handler is associated with the first message and calling the handler to perform a pre established function of the handler. One embodiment of the method further comprise recording the first message within a journal that is maintained in one or more of the VIOS DB and a distributed storage repository accessible to at least the first VIOS of the VIOS cluster. Also the registering based on the first registration information the handler associated with the first message type includes storing a pointer to the handler in a data structure. Additionally the registering based on the second registration information the listener associated with the second message type includes storing a network address associated with the listener in the data structure.

The method further comprises receiving a second message associated with a second alert event of the VIOS cluster determining based on the second message that the listener is associated with the second message and notifying the listener with information corresponding to the second message. In one embodiment the listener includes a network address of a second VIOS of the plurality of VIOSes a third VIOS of the plurality of VIOSes provides one or more virtual I O services to at least one of the plurality of LPARs and the information corresponding to the second message indicates that the third VIOS is not functioning.

The method also comprises the second VIOS receiving the information corresponding to the second message and the second VIOS autonomously being reconfigured to provide the one or more virtual I O services to the plurality of LPARs in response to receiving the information indicating that the second VIOS is not functioning. In one embodiment one or more of the first message and the second message is associated with one or more status changes of at least one VIOS of the plurality of VIOSes where the one or more status changes comprise a pool up pool down node up node down and threshold exceed. Also the one or more of the first message and the second message convey alert events that are associated with an asynchronous change in a state of an object associated with the VIOS cluster where the alert events are associated with one or more conditions from among failures detected within the VIOS cluster process related statuses resource related statuses.

In the flow charts above one or more of the methods are implemented embodied within a computer program product comprising a computer readable medium containing computer readable code instructions such that a series of functions are completed performed when the computer readable code instructions is executed by a processor processing unit on a computing device or machine. In some implementations certain processes of the methods are combined performed simultaneously or in a different order or perhaps omitted without deviating from the spirit and scope of the invention. Thus while the method processes are described and illustrated in a particular sequence use of a specific sequence of processes is not meant to imply any limitations on the invention. Changes may be made with regards to the sequence of processes without departing from the spirit or scope of the present invention. Use of a particular sequence is therefore not to be taken in a limiting sense and the scope of the present invention extends to the appended claims and equivalents thereof.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable R.F etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

As will be further appreciated the processes in embodiments of the present invention may be implemented using any combination of software firmware or hardware. As a preparatory step to practicing the invention in software the programming code whether software or firmware will typically be stored in one or more machine readable storage mediums such as fixed hard drives diskettes optical disks magnetic tape semiconductor memories such as ROMs PROMs etc. thereby making an article of manufacture in accordance with the invention. The article of manufacture containing the programming code is used by either executing the code directly from the storage device by copying the code from the storage device into another storage device such as a hard disk RAM etc. or by transmitting the code for remote execution using transmission type media such as digital and analog communication links. The methods of the invention may be practiced by combining one or more machine readable storage devices containing the code according to the present invention with appropriate processing hardware to execute the code contained therein. An apparatus for practicing the invention could be one or more processing devices and storage systems containing or having network access to program s coded in accordance with the invention.

Thus it is important that while an illustrative embodiment of the present invention is described in the context of a fully functional computer server system with installed or executed software those skilled in the art will appreciate that the software aspects of an illustrative embodiment of the present invention are capable of being distributed as a program product in a variety of forms and that an illustrative embodiment of the present invention applies equally regardless of the particular type of media used to actually carry out the distribution.

While the invention has been described with reference to exemplary embodiments it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition many modifications may be made to adapt a particular system device or component thereof to the teachings of the invention without departing from the essential scope thereof. Therefore it is intended that the invention not be limited to the particular embodiments disclosed for carrying out this invention but that the invention will include all embodiments falling within the scope of the appended claims. Moreover the use of the terms first second etc. do not denote any order or importance but rather the terms first second etc. are used to distinguish one element from another.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

