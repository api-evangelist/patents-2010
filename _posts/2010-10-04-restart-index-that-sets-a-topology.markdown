---

title: Restart index that sets a topology
abstract: One embodiment of the present invention sets forth a technique for reducing overhead associated with transmitting primitive draw commands from memory to a graphics processing unit (GPU). Command pairs comprising an end draw command and a begin draw command associated with a conventional graphics application programming interface (API) are selectively replaced with a new construct. The new construct is a reset topology index, which implements a combined function of the end draw command and begin draw command. The new construct improves efficiency by reducing total data transmitted from memory to the GPU.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08760455&OS=08760455&RS=08760455
owner: NVIDIA Corporation
number: 08760455
owner_city: Santa Clara
owner_country: US
publication_date: 20101004
---
This application claims priority benefit to United States provisional patent application titled RESTART INDEX THAT SETS A TOPOLOGY filed on Oct. 5 2009 and having Ser. No. 61 248 810.

Embodiments of the invention relate generally to draw commands for graphics and more specifically to a restart index that sets a topology.

In conventional graphics processing systems an application programming interface API such as OpenGL is used to convey scene information comprising primitive draw commands from a user application to a rendering engine. The rendering engine typically includes a graphics processing unit GPU configured to receive the primitive draw commands via buffers residing in memory. The OpenGL API includes explicit begin and end draw commands used to delineate primitive draw commands within an overall command sequence. Primitive draw commands are placed between a begin draw command and an end draw command as part of the overall command sequence which is conventionally generated by the user application and transmitted via the API to the GPU for rendering. While begin and end draw commands enable the user application to delineate primitive draw commands within the overall command sequence the begin and end draw commands also introduce overhead in the overall command sequence.

In common usage scenarios primitive draw commands for different types of primitive topologies are typically intermixed within the overall command sequence. As scene complexity increases and finer scene detail becomes more common command sequences are incorporating a greater portion of smaller primitives of different intermixed topologies. As a result overhead in the command sequence is becoming more significant thereby diminishing overall performance.

Accordingly what is needed in the art is a technique for reducing the overhead associated with transmitting primitive draw command sequences.

One embodiment of the invention sets forth a method for composing an index sequence from an application programming interface API command sequence. The method includes receiving a topology element via an application programming interface API instantiating a reset topology index within the index sequence and instantiating the set of vertex indices within the index sequence where the vertex indices refer to vertex data residing in a vertex buffer. The index sequence resides in an index buffer and is transmitted to a graphics processing unit GPU for processing.

Another embodiment of the invention sets forth a method for interpreting the index sequence for processing within the GPU. The method includes receiving data from the index sequence determining that a current index is a reset topology index concluding a current topology and setting the current topology to a newly specified topology based on a topology descriptor extracted from the reset topology index.

In one embodiment the reset topology index comprises sixteen bits a constant pattern used to identify the reset topology index comprises a string of ones in the twelve most significant bits and a topology descriptor comprises four least significant bits. The index sequence resides in memory.

One advantage of the techniques described herein is that index sequences are composed using reset topology indices that reduce the total amount of data transmitted to the GPU thereby improving overall system performance.

In the following description numerous specific details are set forth to provide a more thorough understanding of the present invention. However it will be apparent to one of skill in the art that the present invention may be practiced without one or more of these specific details. In other instances well known features have not been described in order to avoid obscuring the present invention.

In one embodiment the parallel processing subsystem incorporates circuitry optimized for graphics and video processing including for example video output circuitry and constitutes a graphics processing unit GPU . In another embodiment the parallel processing subsystem incorporates circuitry optimized for general purpose processing while preserving the underlying computational architecture described in greater detail herein. In yet another embodiment the parallel processing subsystem may be integrated with one or more other system elements such as the memory bridge CPU and I O bridge to form a system on chip SoC .

It will be appreciated that the system shown herein is illustrative and that variations and modifications are possible. The connection topology including the number and arrangement of bridges the number of CPUs and the number of parallel processing subsystems may be modified as desired. For instance in some embodiments system memory is connected to CPU directly rather than through a bridge and other devices communicate with system memory via memory bridge and CPU . In other alternative topologies parallel processing subsystem is connected to I O bridge or directly to CPU rather than to memory bridge . In still other embodiments I O bridge and memory bridge might be integrated into a single chip. Large embodiments may include two or more CPUs and two or more parallel processing systems . The particular components shown herein are optional for instance any number of add in cards or peripheral devices might be supported. In some embodiments switch is eliminated and network adapter and add in cards connect directly to I O bridge .

Referring again to in some embodiments some or all of PPUs in parallel processing subsystem are graphics processors with rendering pipelines that can be configured to perform various tasks related to generating pixel data from graphics data supplied by CPU and or system memory via memory bridge and bus interacting with local parallel processing memory which can be used as graphics memory including e.g. a conventional frame buffer to store and update pixel data delivering pixel data to display device and the like. In some embodiments parallel processing subsystem may include one or more PPUs that operate as graphics processors and one or more other PPUs that are used for general purpose computations. The PPUs may be identical or different and each PPU may have its own dedicated parallel processing memory device s or no dedicated parallel processing memory device s . One or more PPUs may output data to display device or each PPU may output data to one or more display devices .

In operation CPU is the master processor of computer system controlling and coordinating operations of other system components. In particular CPU issues commands that control the operation of PPUs . In some embodiments CPU writes a stream of commands for each PPU to a pushbuffer not explicitly shown in either or that may be located in system memory parallel processing memory or another storage location accessible to both CPU and PPU . PPU reads the command stream from the pushbuffer and then executes commands asynchronously relative to the operation of CPU .

Referring back now to each PPU includes an I O input output unit that communicates with the rest of computer system via communication path which connects to memory bridge or in one alternative embodiment directly to CPU . The connection of PPU to the rest of computer system may also be varied. In some embodiments parallel processing subsystem is implemented as an add in card that can be inserted into an expansion slot of computer system . In other embodiments a PPU can be integrated on a single chip with a bus bridge such as memory bridge or I O bridge . In still other embodiments some or all elements of PPU may be integrated on a single chip with CPU .

In one embodiment communication path is a PCI EXPRESS link in which dedicated lanes are allocated to each PPU as is known in the art. Other communication paths may also be used. An I O unit generates packets or other signals for transmission on communication path and also receives all incoming packets or other signals from communication path directing the incoming packets to appropriate components of PPU . For example commands related to processing tasks may be directed to a host interface while commands related to memory operations e.g. reading from or writing to parallel processing memory may be directed to a memory crossbar unit . Host interface reads each pushbuffer and outputs the work specified by the pushbuffer to a front end .

Each PPU advantageously implements a highly parallel processing architecture. As shown in detail PPU includes a processing cluster array that includes a number C of general processing clusters GPCs where C 1. Each GPC is capable of executing a large number e.g. hundreds or thousands of threads concurrently where each thread is an instance of a program. In various applications different GPCs may be allocated for processing different types of programs or for performing different types of computations. For example in a graphics application a first set of GPCs may be allocated to perform tessellation operations and to produce primitive topologies for patches and a second set of GPCs may be allocated to perform tessellation shading to evaluate patch parameters for the primitive topologies and to determine vertex positions and other per vertex attributes. The allocation of GPCs may vary dependent on the workload arising for each type of program or computation.

GPCs receive processing tasks to be executed via a work distribution unit which receives commands defining processing tasks from front end unit . Processing tasks include indices of data to be processed e.g. surface patch data primitive data vertex data and or pixel data as well as state parameters and commands defining how the data is to be processed e.g. what program is to be executed . Work distribution unit may be configured to fetch the indices corresponding to the tasks or work distribution unit may receive the indices from front end . Front end ensures that GPCs are configured to a valid state before the processing specified by the pushbuffers is initiated.

When PPU is used for graphics processing for example the processing workload for each patch is divided into approximately equal sized tasks to enable distribution of the tessellation processing to multiple GPCs . A work distribution unit may be configured to produce tasks at a frequency capable of providing tasks to multiple GPCs for processing. By contrast in conventional systems processing is typically performed by a single processing engine while the other processing engines remain idle waiting for the single processing engine to complete its tasks before beginning their processing tasks. In some embodiments of the present invention portions of GPCs are configured to perform different types of processing. For example a first portion may be configured to perform vertex shading and topology generation a second portion may be configured to perform tessellation and geometry shading and a third portion may be configured to perform pixel shading in screen space to produce a rendered image. Intermediate data produced by GPCs may be stored in buffers to allow the intermediate data to be transmitted between GPCs for further processing.

Memory interface includes a number D of partition units that are each directly coupled to a portion of parallel processing memory where D 1. As shown the number of partition units generally equals the number of DRAM . In other embodiments the number of partition units may not equal the number of memory devices. Persons skilled in the art will appreciate that DRAM may be replaced with other suitable storage devices and can be of generally conventional design. A detailed description is therefore omitted. Render targets such as frame buffers or texture maps may be stored across DRAMs allowing partition units to write portions of each render target in parallel to efficiently use the available bandwidth of parallel processing memory .

Any one of GPCs may process data to be written to any of the DRAMs within parallel processing memory . Crossbar unit is configured to route the output of each GPC to the input of any partition unit or to another GPC for further processing. GPCs communicate with memory interface through crossbar unit to read from or write to various external memory devices. In one embodiment crossbar unit has a connection to memory interface to communicate with I O unit as well as a connection to local parallel processing memory thereby enabling the processing cores within the different GPCs to communicate with system memory or other memory that is not local to PPU . In the embodiment shown in crossbar unit is directly connected with I O unit . Crossbar unit may use virtual channels to separate traffic streams between the GPCs and partition units .

Again GPCs can be programmed to execute processing tasks relating to a wide variety of applications including but not limited to linear and nonlinear data transforms filtering of video and or audio data modeling operations e.g. applying laws of physics to determine position velocity and other attributes of objects image rendering operations e.g. tessellation shader vertex shader geometry shader and or pixel shader programs and so on. PPUs may transfer data from system memory and or local parallel processing memories into internal on chip memory process the data and write result data back to system memory and or local parallel processing memories where such data can be accessed by other system components including CPU or another parallel processing subsystem .

A PPU may be provided with any amount of local parallel processing memory including no local memory and may use local memory and system memory in any combination. For instance a PPU can be a graphics processor in a unified memory architecture UMA embodiment. In such embodiments little or no dedicated graphics parallel processing memory would be provided and PPU would use system memory exclusively or almost exclusively. In UMA embodiments a PPU may be integrated into a bridge chip or processor chip or provided as a discrete chip with a high speed link e.g. PCI EXPRESS connecting the PPU to system memory via a bridge chip or other communication means.

As noted above any number of PPUs can be included in a parallel processing subsystem . For instance multiple PPUs can be provided on a single add in card or multiple add in cards can be connected to communication path or one or more of PPUs can be integrated into a bridge chip. PPUs in a multi PPU system may be identical to or different from one another. For instance different PPUs might have different numbers of processing cores different amounts of local parallel processing memory and so on. Where multiple PPUs are present those PPUs may be operated in parallel to process data at a higher throughput than is possible with a single PPU . Systems incorporating one or more PPUs may be implemented in a variety of configurations and form factors including desktop laptop or handheld personal computers servers workstations game consoles embedded systems and the like.

Operation of GPC is advantageously controlled via a pipeline manager that distributes processing tasks to streaming multiprocessors SPMs . Pipeline manager may also be configured to control a work distribution crossbar by specifying destinations for processed data output by SPMs .

In one embodiment each GPC includes a number M of SPMs where M 1 each SPM configured to process one or more thread groups. Also each SPM advantageously includes an identical set of functional execution units e.g. arithmetic logic units and load store units shown as Exec units and LSUs in that may be pipelined allowing a new instruction to be issued before a previous instruction has finished as is known in the art. Any combination of functional execution units may be provided. In one embodiment the functional units support a variety of operations including integer and floating point arithmetic e.g. addition and multiplication comparison operations Boolean operations AND OR XOR bit shifting and computation of various algebraic functions e.g. planar interpolation trigonometric exponential and logarithmic functions etc. and the same functional unit hardware can be leveraged to perform different operations.

The series of instructions transmitted to a particular GPC constitutes a thread as previously defined herein and the collection of a certain number of concurrently executing threads across the parallel processing engines not shown within an SPM is referred to herein as a warp or thread group. As used herein a thread group refers to a group of threads concurrently executing the same program on different input data with one thread of the group being assigned to a different processing engine within an SPM . A thread group may include fewer threads than the number of processing engines within the SPM in which case some processing engines will be idle during cycles when that thread group is being processed. A thread group may also include more threads than the number of processing engines within the SPM in which case processing will take place over consecutive clock cycles. Since each SPM can support up to G thread groups concurrently it follows that up to G M thread groups can be executing in GPC at any given time.

Additionally a plurality of related thread groups may be active in different phases of execution at the same time within an SPM . This collection of thread groups is referred to herein as a cooperative thread array CTA or thread array. The size of a particular CTA is equal to m k where k is the number of concurrently executing threads in a thread group and is typically an integer multiple of the number of parallel processing engines within the SPM and m is the number of thread groups simultaneously active within the SPM . The size of a CTA is generally determined by the programmer and the amount of hardware resources such as memory or registers available to the CTA.

Each SPM contains an L1 cache not shown or uses space in a corresponding L1 cache outside of the SPM that is used to perform load and store operations. Each SPM also has access to L2 caches within the partition units that are shared among all GPCs and may be used to transfer data between threads. Finally SPMs also have access to off chip global memory which can include e.g. parallel processing memory and or system memory . It is to be understood that any memory external to PPU may be used as global memory. Additionally an L1.5 cache may be included within the GPC configured to receive and hold data fetched from memory via memory interface requested by SPM including instructions uniform data and constant data and provide the requested data to SPM . Embodiments having multiple SPMs in GPC beneficially share common instructions and data cached in L1.5 cache .

Each GPC may include a memory management unit MMU that is configured to map virtual addresses into physical addresses. In other embodiments MMU s may reside within the memory interface . The MMU includes a set of page table entries PTEs used to map a virtual address to a physical address of a tile and optionally a cache line index. The MMU may include address translation lookaside buffers TLB or caches which may reside within multiprocessor SPM or the L1 cache or GPC . The physical address is processed to distribute surface data access locality to allow efficient request interleaving among partition units. The cache line index may be used to determine whether of not a request for a cache line is a hit or miss.

In graphics and computing applications a GPC may be configured such that each SPM is coupled to a texture unit for performing texture mapping operations e.g. determining texture sample positions reading texture data and filtering the texture data. Texture data is read from an internal texture L1 cache not shown or in some embodiments from the L1 cache within SPM and is fetched from an L2 cache parallel processing memory or system memory as needed. Each SPM outputs processed tasks to work distribution crossbar in order to provide the processed task to another GPC for further processing or to store the processed task in an L2 cache parallel processing memory or system memory via crossbar unit . A preROP pre raster operations is configured to receive data from SPM direct data to ROP units within partition units and perform optimizations for color blending organize pixel color data and perform address translations.

It will be appreciated that the core architecture described herein is illustrative and that variations and modifications are possible. Any number of processing units e.g. SPMs or texture units preROPs may be included within a GPC . Further while only one GPC is shown a PPU may include any number of GPCs that are advantageously functionally similar to one another so that execution behavior does not depend on which GPC receives a particular processing task. Further each GPC advantageously operates independently of other GPCs using separate and distinct processing units L1 caches and so on.

In graphics applications ROP is a processing unit that performs raster operations such as stencil z test blending and the like and outputs pixel data as processed graphics data for storage in graphics memory. In some embodiments of the present invention ROP is included within each GPC instead of partition unit and pixel read and write requests are transmitted over crossbar unit instead of pixel fragment data.

The processed graphics data may be displayed on display device or routed for further processing by CPU or by one of the processing entities within parallel processing subsystem . Each partition unit includes a ROP in order to distribute processing of the raster operations. In some embodiments ROP may be configured to compress z or color data that is written to memory and decompress z or color data that is read from memory.

Persons skilled in the art will understand that the architecture described in A and B in no way limits the scope of the present invention and that the techniques taught herein may be implemented on any properly configured processing unit including without limitation one or more CPUs one or more multi core CPUs one or more PPUs one or more GPCs one or more graphics or special purpose processing units or the like without departing the scope of the present invention.

In embodiments of the present invention it is desirable to use PPU or other processor s of a computing system to execute general purpose computations using thread arrays. Each thread in the thread array is assigned a unique thread identifier thread ID that is accessible to the thread during its execution. The thread ID which can be defined as a one dimensional or multi dimensional numerical value controls various aspects of the thread s processing behavior. For instance a thread ID may be used to determine which portion of the input data set a thread is to process and or to determine which portion of an output data set a thread is to produce or write.

A sequence of per thread instructions may include at least one instruction that defines a cooperative behavior between the representative thread and one or more other threads of the thread array. For example the sequence of per thread instructions might include an instruction to suspend execution of operations for the representative thread at a particular point in the sequence until such time as one or more of the other threads reach that particular point an instruction for the representative thread to store data in a shared memory to which one or more of the other threads have access an instruction for the representative thread to atomically read and update data stored in a shared memory to which one or more of the other threads have access based on their thread IDs or the like. The CTA program can also include an instruction to compute an address in the shared memory from which data is to be read with the address being a function of thread ID. By defining suitable functions and providing synchronization techniques data can be written to a given location in shared memory by one thread of a CTA and read from that location by a different thread of the same CTA in a predictable manner. Consequently any desired pattern of data sharing among threads can be supported and any thread in a CTA can share data with any other thread in the same CTA. The extent if any of data sharing among threads of a CTA is determined by the CTA program thus it is to be understood that in a particular application that uses CTAs the threads of a CTA might or might not actually share data with each other depending on the CTA program and the terms CTA and thread array are used synonymously herein.

SPM provides on chip internal data storage with different levels of accessibility. Special registers not shown are readable but not writeable by LSU and are used to store parameters defining each CTA thread s position. In one embodiment special registers include one register per CTA thread or per exec unit within SPM that stores a thread ID each thread ID register is accessible only by a respective one of the exec unit . Special registers may also include additional registers readable by all CTA threads or by all LSUs that store a CTA identifier the CTA dimensions the dimensions of a grid to which the CTA belongs and an identifier of a grid to which the CTA belongs. Special registers are written during initialization in response to commands received via front end from device driver and do not change during CTA execution.

A parameter memory not shown stores runtime parameters constants that can be read but not written by any CTA thread or any LSU . In one embodiment device driver provides parameters to the parameter memory before directing SPM to begin execution of a CTA that uses these parameters. Any CTA thread within any CTA or any exec unit within SPM can access global memory through a memory interface . Portions of global memory may be stored in the L1 cache .

Local register file is used by each CTA thread as scratch space each register is allocated for the exclusive use of one thread and data in any of local register file is accessible only to the CTA thread to which it is allocated. Local register file can be implemented as a register file that is physically or logically divided into P lanes each having some number of entries where each entry might store e.g. a 32 bit word . One lane is assigned to each of the N exec units and P load store units LSU and corresponding entries in different lanes can be populated with data for different threads executing the same program to facilitate SIMD execution. Different portions of the lanes can be allocated to different ones of the G concurrent thread groups so that a given entry in the local register file is accessible only to a particular thread. In one embodiment certain entries within the local register file are reserved for storing thread identifiers implementing one of the special registers.

Shared memory is accessible to all CTA threads within a single CTA any location in shared memory is accessible to any CTA thread within the same CTA or to any processing engine within SPM . Shared memory can be implemented as a shared register file or shared on chip cache memory with an interconnect that allows any processing engine to read from or write to any location in the shared memory. In other embodiments shared state space might map onto a per CTA region of off chip memory and be cached in L1 cache . The parameter memory can be implemented as a designated section within the same shared register file or shared cache memory that implements shared memory or as a separate shared register file or on chip cache memory to which the LSUs have read only access. In one embodiment the area that implements the parameter memory is also used to store the CTA ID and grid ID as well as CTA and grid dimensions implementing portions of the special registers. Each LSU in SPM is coupled to a unified address mapping unit that converts an address provided for load and store instructions that are specified in a unified memory space into an address in each distinct memory space. Consequently an instruction may be used to access any of the local shared or global memory spaces by specifying an address in the unified memory space.

The L1 Cache in each SPM can be used to cache private per thread local data and also per application global data. In some embodiments the per CTA shared data may be cached in the L1 cache . The LSUs are coupled to a uniform L1 cache the shared memory and the L1 cache via a memory and cache interconnect . The uniform L1 cache is configured to receive read only data and constants from memory via the L1.5 Cache .

Data assembler processing unit collects vertex data for high order surfaces primitives and the like and outputs the vertex data including the vertex attributes to vertex processing unit . Vertex processing unit is a programmable execution unit that is configured to execute vertex shader programs lighting and transforming vertex data as specified by the vertex shader programs. For example vertex processing unit may be programmed to transform the vertex data from an object based coordinate representation object space to an alternatively based coordinate system such as world space or normalized device coordinates NDC space. Vertex processing unit may read data that is stored in L1 cache parallel processing memory or system memory by data assembler for use in processing the vertex data.

Primitive assembler receives vertex attributes from vertex processing unit reading stored vertex attributes as needed and constructs graphics primitives for processing by geometry processing unit . Graphics primitives include triangles line segments points and the like. Geometry processing unit is a programmable execution unit that is configured to execute geometry shader programs transforming graphics primitives received from primitive assembler as specified by the geometry shader programs. For example geometry processing unit may be programmed to subdivide the graphics primitives into one or more new graphics primitives and calculate parameters such as plane equation coefficients that are used to rasterize the new graphics primitives.

In some embodiments geometry processing unit may also add or delete elements in the geometry stream. Geometry processing unit outputs the parameters and vertices specifying new graphics primitives to a viewport scale cull and clip unit . Geometry processing unit may read data that is stored in parallel processing memory or system memory for use in processing the geometry data. Viewport scale cull and clip unit performs clipping culling and viewport scaling and outputs processed graphics primitives to a rasterizer .

Rasterizer scan converts the new graphics primitives and outputs fragments and coverage data to fragment processing unit . Additionally rasterizer may be configured to perform z culling and other z based optimizations.

Fragment processing unit is a programmable execution unit that is configured to execute fragment shader programs transforming fragments received from rasterizer as specified by the fragment shader programs. For example fragment processing unit may be programmed to perform operations such as perspective correction texture mapping shading blending and the like to produce shaded fragments that are output to raster operations unit . Fragment processing unit may read data that is stored in parallel processing memory or system memory for use in processing the fragment data. Fragments may be shaded at pixel sample or other granularity depending on the programmed sampling rate.

Raster operations unit is a processing unit that performs raster operations such as stencil z test blending and the like and outputs pixel data as processed graphics data for storage in graphics memory. The processed graphics data may be stored in graphics memory e.g. parallel processing memory and or system memory for display on display device or for further processing by CPU or parallel processing subsystem . In some embodiments of the present invention raster operations unit is configured to compress z or color data that is written to memory and decompress z or color data that is read from memory.

A pushbuffer is an instruction stream and parameters that can include one or more command sequences. In some embodiments a command comprises a header and data where the header is 32 bit dword and the data is a 32 bit dword. A header specified by the type of command and may be associated with multiple data dwords and a count Cnt field within the header may specify the number of times that the same command or sequentially adjacent commands are executed. Different command tags may be used to efficiently encode command repetition or structure. For example a command that is often followed by plural instances of the same command may use an encoding that specifies that relationship. Graphics APIs such as the OpenGL API include explicit API visible begin and end commands for primitive draw command sequences. Conventionally the begin command and the end command are each included in a header within the pushbuffer instruction stream. Primitives to be rendered are placed between one or more pairs of headers that include begin and end commands in a sequence.

The memory may comprise system memory of PP memory of on chip memory within GPU such as parallel processing subsystem or any combination thereof. Data within the vertex buffer index buffer and push buffer is transmitted to GPU using any technically feasible technique. One technique involves the GPU pulling certain data from memory and buffering the data prior to use thereby reducing performance bottlenecks associated with memory access latency.

The host interface receives a primitive draw command sequence via the push buffer . Buffer pointers for the vertex buffer and index buffer may be encoded in the primitive draw command sequence . The primitive command sequence encodes a list of primitive draw commands that may include an arbitrary combination of primitive topologies. Primitive topologies may include without limitation lines line strips triangles triangle strips and so forth. The list of primitive draw commands is structured to reference vertex data for related vertices stored in the vertex buffer via a vertex index which refers to a specific item of vertex data within the vertex buffer . In one embodiment the primitive draw command sequence includes at least one in line index sequence which lists a set of primitive topologies to be rendered. The primitive topologies are listed in terms of associated vertex indices. In an alternative embodiment the primitive draw command sequence does not include in line index sequence but instead includes a reference to at least one index buffer which includes index sequence . As with index sequence index sequence lists a set of primitive topologies to be rendered in terms of one or more sets of vertex indices.

The data assembler is configured to interpret various index sequences. In one mode of operation one or more index sequences are embedded within one or more primitive draw command sequences. For example index sequence is embedded within primitive draw sequence and transmitted to the data assembler via host interface and front end . Primitive draw sequence is stored within Push buffer for transmission to host interface . In a second mode of operation one or more index sequences are stored within one or more index buffers that are independent of the push buffer . The one or more index sequences are then pulled directly by the data assembler for processing. For example Index sequence is stored in index buffer and is pulled directly by the data assembler from index buffer . Indices from index sequence or are transmitted into the graphics processing pipeline as references to respective vertex data . Appropriate modules within the graphics processing pipeline then pull vertex data from vertex buffer for rendering a given topology. Efficient transitions between different primitive topologies are enabled using a novel index scheme as described below in .

In one embodiment the reset topology index is represented as an index with 1 s in the most significant bit positions and a topology descriptor in a set of least significant bit positions. For example an implementation using sixteen bit index values may reserve the index range 0xFFF0 through 0xFFFF to serve as reset topology index values. In other words when the twelve most significant bits are set to 1 the index is not in index of a vertex in memory but rather a reset topology index with the least significant four bits being a topology descriptor. The topology descriptor is interpreted to be the topology for indices that immediately follow the reset topology index. The reset topology index provides an innovative means for efficiently rendering a single list of indices as a unit that includes more than one topology. Each supported topology maps to a specific topology descriptor value.

As shown topology element defines a triangle strip topology element specified by indices through . Topology element is bounded by begin command and reset topology index . In this example topology element is the first topology in command sequence . Begin command specifies that topology element is a triangle strip. Topology element defines a stand alone triangle topology element specified by indices through which are bounded by the reset topology index and reset topology index . Reset topology index specifies an end to topology element and a beginning to topology element . Reset topology index also specifies that topology element is a stand alone triangle. Topology element defines a stand alone line topology element specified by indices and which are bounded by reset topology and reset topology . Reset topology index specifies an end to topology element a beginning to topology element and that topology element is a line. Topology element defines a stand alone triangle specified by indices through which are bounded by reset topology and reset topology . Reset topology index specifies an end to topology element a beginning to topology element and that topology element is a stand alone triangle. In one embodiment the begin command includes a count value that indicates how many total indices are included in command sequence including index through N. Command sequence is ultimately terminated by end command .

Persons skilled in the art will recognize that different encodings for a reset topology index may be implemented without departing the scope or spirit of the present invention. For example in systems utilizing thirty two bit indices an index with all upper twenty eight bits set to 1 may be interpreted as a reset topology index with four least significant bits being interpreted as a four bit topology descriptor.

The method steps are implemented by a command composition module. In one embodiment the command composition module resides within an API which is configured to receive primitive draw commands from an application program thereby allowing an application program to specify reset topology indices. In an alternative embodiment the command composition module resides within device driver which is configured to receive primitive draw commands from the application program via the API. The command composition module composes an index sequence from the topology elements defined by the received primitive draw commands. The index sequence is configured to utilize reset topology indices for efficient transmission from memory to the GPU . The topology elements are organized as sets including a first topology element and a last topology element. Index sequence is associated with one complete set of topology elements. Any feasible technique may be used to define a set of topology elements. For example a set may be defined based on availability of unique indices within index sequence . Once no more topology elements can be represented by remaining unique index values within index sequence the set is complete and a new index buffer is allocated for indices associated with additional topology elements. In one embodiment the index sequence resides within the push buffer of . In an alternative embodiment the index sequence resides in the index buffer . The method steps are repeated for each set of topology elements to be sent to the GPU .

The method begins in step where the command composition module receives a primitive draw commands defining a topology element to be transmitted to the GPU for rendering. The primitive draw commands may include an explicit begin draw command and an explicit end draw command as specified explicitly in the API. If in step the draw command does not correspond to a first topology element in an associated set of topology elements then the method proceeds to step . In step the command composition module instantiates a reset topology index within the index sequence. The reset topology index includes a topology descriptor corresponding to a topology specification embedded in the primitive draw command. Instantiating the reset topology index comprises writing the reset topology index to the index sequence or . In step the command composition module instantiates indices for the topology element. The indices correspond to vertices specified in the primitive draw command. Attributes for the vertices are stored in the vertex buffer as vertex data .

If in step the instantiated topology element represents the last primitive draw command in the associated set of primitive draw commands then the method proceeds to step . In step the command composition module instantiates an end command in the index sequence. In step a total index sequence count may be written to an associated begin command for the index sequence. The method terminates in step . In some embodiments a begin commend implies an end on the previous draw and in these embodiments an explicit end command is not needed. In some embodiments any command that sets the topology is considered to be an implied begin command in which case a separate begin command is not needed. In some embodiments draw commands include either or both an implicit begin and or an implicit end.

Returning to step if the draw command does correspond to a first topology element in an associated set of topology elements then the method proceeds to step . In step the command composition module instantiates a begin command within the index sequence for a corresponding topology element. In one embodiment the begin command replicates the begin command specified by the primitive draw command. In step the command composition module instantiates indices for the topology element. The indices correspond to vertices specified in the primitive draw command.

Returning to step if the topology element does not comprise the last primitive draw command in the associated set of primitive draw commands then the method proceeds back to step . As described previously any technically feasible technique may be used to define a set of topology elements.

The data assembler unit of is configured to receive the index sequence as part of a command sequence such as primitive draw command sequence and to interpret the index sequence for processing by other elements in the graphics processing pipeline . The data assembler unit interprets the index sequence according to the structure described previously in . In one embodiment the index sequence resides within the push buffer of as index sequence . In an alternative embodiment the index sequence resides in the index buffer as index sequence .

The method begins in step where the data assembler unit sets a current topology based on a begin command from a command sequence within push buffer such as primitive draw command sequence . The begin command may include a count specifying how many indices define the set of topology elements. In step the data assembler unit receives index data from the index sequence. If in step the index data is a reset topology index then the method proceeds to step . In step the data assembler unit concludes the current topology indicating to one or more shading units within the graphics processing pipeline that the topology specification is complete and the topology element is ready for processing. In step the data assembler unit decodes the reset topology index to extract a topology descriptor. The data assembler unit then sets the current topology to the topology specified by the topology descriptor.

If in step the index data is the last index data for an associated index sequence then the method proceeds to step . The index data may be determined to be the last index data using any technically feasible technique. For example an index count specified in a begin command may specify a total number of indices to be processed within an index sequence. When the total number of indices is processed then an index is determined to be the last index for the index sequence. In step the data assembler unit concludes the current topology indicating to one or more shading units within the graphics processing pipeline that the topology specification is complete and the topology element is ready for processing. The method terminates in step .

Returning to step if the data is not a reset topology index then the method proceeds to step . In step the data assembler unit adds the current index to the current topology.

Returning to step if the index data is not the last index data for the associated index sequence then method then proceeds back to step .

In sum a technique for representing primitive draw commands is disclosed that more efficiently represents an index sequence comprising different types of intermixed primitive topologies. A software command composition module is configured to receive primitive draw commands that each include a topology specification and to beneficially encode the primitive draw commands to include reset topology indices rather than explicit begin and end drawing commands when possible. The data assembler unit within the graphics processing pipeline is configured to interpret each reset topology index as an end draw command and a begin draw command with a topology specified in the topology descriptor portion of the reset topology index. One advantage of the present invention is that index sequences composed using reset topology indices may reduce the total amount of data transmitted to the GPU thereby improving overall system performance.

One embodiment of the invention may be implemented as a program product for use with a computer system. The program s of the program product define functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive flash memory ROM chips or any type of solid state non volatile semiconductor memory on which information is permanently stored and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive or any type of solid state random access semiconductor memory on which alterable information is stored.

The invention has been described above with reference to specific embodiments. Persons skilled in the art however will understand that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The foregoing description and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

