---

title: Method and system for capturing mashup data for collective intelligence and user-generated knowledge
abstract: A computer system includes a display interface, a user input device interface, and a processor cooperatively operable with the display interface and the user input device interface. The processor is configured to facilitate displaying, via the display interface, a mashup or service; interacting with the user to input, via the user input device interface, an indication to take a snapshot of the mashup or service being currently displayed via the display interface; and storing a snapshot artifact of live data from the mashup or service at the instant the snapshot is taken.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08261193&OS=08261193&RS=08261193
owner: JackBe Corporation
number: 08261193
owner_city: Chevy Chase
owner_country: US
publication_date: 20100420
---
This application claims the benefit of the following Provisional application 61 171 379 filed Apr. 21 2009 which is expressly incorporated herein by reference.

The technical field relates in general to computer networks and more specifically to mashups and collecting data from mashups.

Mashups are known for obtaining live data from web services and providing the data to the user in a more flexible manner than conventional portals. Users of mashups interact with live data that continuously changes.

However storing and or sharing the live data from mashups presents challenges. For example how do we know why certain decisions were made based on the usage of mashups 

Accordingly one or more embodiments provide a computer system for taking sharing a snapshot a method for taking sharing a snapshot or a computer readable non transitory medium for taking sharing a snapshot. The computer system includes a display interface a user input device interface and a processor cooperatively operable with the display interface and the user input device interface. The processor can be configured to facilitate displaying via the display interface a mashup or service interacting with the user to input via the user input device interface an indication to take a snapshot of the mashup or service being currently displayed via the display interface and storing a snapshot artifact of live data from the mashup or service at the instant the snapshot is taken. The method or computer readable non transitory medium can also adapted to these.

According to still further embodiments plural mashups are displayed via the display interface and one interacts with the user to input via the user input device interface a selection of one of the currently displayed mashups for the snapshot.

According to further embodiments the indication to take the snapshot is one touch of the user input device that triggers the storing of the snapshot.

According to yet another embodiment the snapshot artifact includes a timestamp service or mashup identifier used for the mashup copy of input data supplied to the mashup or service copy of output data obtained from the mashup or service and configuration information instructing the processor how to visualize and use the data in the snapshot.

Still another embodiment includes interacting with the user to so as to share the snapshot with another user.

Another embodiment provides for scheduling a plurality of snapshots to be taken at pre defined intervals.

Further the purpose of the foregoing abstract is to enable the U.S. Patent and Trademark Office and the public generally and especially the scientists engineers and practitioners in the art who are not familiar with patent or legal terms or phraseology to determine quickly from a cursory inspection the nature and essence of the technical disclosure of the application. The abstract is neither intended to define the invention of the application which is measured by the claims nor is it intended to be limiting as to the scope of the invention in any way.

In overview the present disclosure concerns computer systems sometimes referred to as client server networks such as may be associated with computer systems providing mashups. Such computer systems often involve running a mashup on a user s computer that provides a user interface on the user s computer and that communicates as a client with a mashup server that invokes the desired web service specified by the mashup the web service providing live data through the mashup client server so that the live data can be used according to the mashup without regard to user interface formatting specified by the web service. More particularly various inventive concepts and principles are embodied in systems devices and methods therein for collecting live data from mashups and retrieving and or sharing the collected data.

The computer systems of particular interest are those providing or facilitating mashups over communication networks involving a mashup server and a user s computer and the like and variants or evolutions thereof.

The instant disclosure is provided to further explain in an enabling fashion the best modes of performing one or more embodiments of the present invention. The disclosure is further offered to enhance an understanding and appreciation for the inventive principles and advantages thereof rather than to limit in any manner the invention. The invention is defined solely by the appended claims including any amendments made during the pendency of this application and all equivalents of those claims as issued.

It is further understood that the use of relational terms such as first and second and the like if any are used solely to distinguish one from another entity item or action without necessarily requiring or implying any actual such relationship or order between such entities items or actions. It is noted that some embodiments may include a plurality of processes or steps which can be performed in any order unless expressly and necessarily limited to a particular order i.e. processes or steps that are not so limited may be performed in any order.

Much of the inventive functionality and many of the inventive principles when implemented are best supported with or in software or integrated circuits ICs such as a digital signal processor and software therefore and or application specific ICs. It is expected that one of ordinary skill notwithstanding possibly significant effort and many design choices motivated by for example available time current technology and economic considerations when guided by the concepts and principles disclosed herein will be readily capable of generating such software instructions or ICs with minimal experimentation. Therefore in the interest of brevity and minimization of any risk of obscuring the principles and concepts according to the present invention further discussion of such software and ICs if any will be limited to the essentials with respect to the principles and concepts used by the exemplary embodiments.

As further discussed herein below various inventive principles and combinations thereof are advantageously employed to improve the ability to relate live mashup data to decisions based on the mashup data.

A mashup user might desire to have a mechanism of storing current live data from the mashup with the user s own annotations so that the data can be recalled and viewed at a later time.

For example many decision makers might like to store the data and describe and relate the data to the decision they make. This may allow a way to provide an audit trail of why a decision was made and what other factors affected that decision.

In addition that data can then be shared with their peers and managers immediately or at a later time.

Further in accordance with exemplary embodiments there is provided a method system and or device to capture reuse annotate share and analyze mashup data for collective intelligence and user generated knowledge.

An embodiment can conveniently be used in connection with the PRESTO Enterprise Mashup Platform product available from JackBe Corporation.

It is envisioned that some systems and methods described herein may facilitate easier and powerful ways to analyze mashup data by means of trend analysis and also by means of capturing user knowledge related to the data instantaneously.

The term snapshot generally refers to a data set including a unique service identifier input data the inputs supplied by the invoking user or the invoking mashup to the service and live data provided from the service that is captured at a single moment in time. The unique service identifier input data and live data alone can be used to later retreate the mashup at that single previous moment in time. A snapshot can be uniquely identified by the time it was captured and the inputs supplied by the invoking user or invoking mashup to the service or mashup. The output thus obtained can be stored along with the meta data associated with the output data. The meta data can be system generated or user entered inputs to enrich information about the snapshot based on user knowledge of the domain of the mashup or service and the data. For instance a user who is browsing a service or a mashup and invokes it by providing certain input s and therefore obtaining certain output s can decide to store the data as a snapshot. In doing so the user may provide additional information such as a description a set of tags folksonomy annotations and comments and other similar information which can be stored with the snapshot artifact.

The system can store a snapshot as a reusable and shareable snapshot artifact in a specially designed snapshot database. Once stored the snapshot artifact that is a snapshot and the related meta data can be retrieved at any time such as by a user with appropriate credentials and permissions. The term snapshot artifact as used herein is specifically defined herein below.

Some versions hereof provide for sharing snapshots. In some versions a snapshot can be shared with other users on an individual basis or with groups of users. It can also be shared publicly for non users of the systems to see this can be useful to publish information to public facing online and mobile destinations.

4. Design and implementation of security and governance policies around creation and usage of snapshots

6. Design and implementation of a collaboration system for snapshots to allow for sharing rating tagging and annotating.

7. Design and implementation of an export mechanism to select and export snapshots into common data formats such as HTML XML Excel and CSV files variations and evolutions thereof and other file formats as they may be defined from time to time.

9. Design and implementation of a snapshot management system for system administrators to configure and manage snapshots.

The term snapshot artifact as used herein expressly refers to a data record with individually accessible data fields that include a timestamp indicating an instant in time that the snapshot is taken a unique identifier uniquely indicating to a mashup server the service id or mashup id used by the mashup server with the input data to invoke the mashup or service that generated the output data at the time indicated by the timestamp copy of the input data supplied from the mashup server to the service or mashup that generated the output data at the timestamp time copy of the output data obtained from the service or mashup and provided e.g. displayed to the user and that caused the user to request the snapshot at the timestamp time and snapshot meta data system generated and user meta data user entered meta data . Snapshot meta data can include a description searchable tags and additional visualization configuration information to instruct the mashup how to visualize the data in the snapshot. User meta data can include a user input description and searchable tags.

2. Schedule automatic snapshot captures one time or a periodic repeating e.g. every x hours or y days weekly on d day of the week until mm dd yy.

5. Share a snapshot with another user s group s all registered users anonymous as a mashlet as an URL to HTML CSV XML JSON and the like and variations and evolutions thereof .

8. Given a user s get all snapshots shared by the user s grouped by sharing user user user group user everyone user anonymous .

11. Ability to export snapshot into several output formats including but not limited to HTML XML JSON CSV Excel and the like and variations and evolutions thereof.

12. Event generation based on snapshot data e.g. watch for certain conditions and generate a notification .

13. Annotate the snapshot with user comments and information knowledge about data thereby to enrich the snapshot data for later use.

14. Annotate the snapshot with micro formats hCard hCalendar Twitter hashtags and the like and variations and evolutions thereof .

For example a selectable snapshot button or camera icon or the like can be provided as an indication to instruct the mashup to take a snapshot so that a user can click on the snapshot button or camera to capture some of the current information also referred to as components in a mashup which is being displayed on the user s screen at the current time. A user can click on the camera or other button to indicate that a snapshot is to be taken and can click on any of the currently displayed mashups on a screen to take a snapshot. Other appropriate means of indicating that a snapshot is to be taken can be used.

The user can be interrogated to describe the reason why the snapshot was taken. For example if a user takes a snapshot of stock holdings the snapshot can collect the current live data from the components provided by the data provider service or an internal service provide a description of the reason for the snapshot such as I am selling these stocks. The reason can be stored in the snapshot database together with other information input by the user along with the data at the instant of the snapshot from the component output from the service s of the mashup.

In a mashup for example PRESTO brand software available from JackBe Corporation the mashup application allows a user to collect live data components from different sources and optionally to combine them. Content within the mashup describes how the components that are collected are to be combined. What the snapshot does is capture the actual live data at that moment in time.

Each snapshot can be individually stored and can have a separate unique identifier. The unique identifier for a particular snapshot can be the timestamp and the set of inputs that the user provides to go to the mashup snapshot interface e.g. today s date and NASDAQ stock exchange and customer s account ID .

Since the snapshot is data the user can do many things with it. The snapshot itself is an artifact that can be controlled by a mashup.

Referring now to a block diagram illustrating a system for taking a snapshot of a single service will be discussed and described. In there is a user input data service S data source data from the data source and a snapshot artifact generated when the user captures a snapshot of the service S . The snapshot artifact includes a snapshot ID a timestamp a service ID S input data data snapshot meta data and user meta data . The snapshot artifact can be stored in a snapshot database .

In the snapshot ID can be a unique identifier to uniquely identify different snapshots generated by the system at the time of capturing the snapshot. The timestamp can be recorded for historical and reporting reasons. For example when there is a collection of snapshots a user may want to limit to a begin end time.

The service ID can identify a unique identifier of the service from which the snapshot was taken. The service ID can be generated according to known techniques. For example conventions provide that when the service is published into a mashup platform the mashup platform automatically generates the service ID which can be used anytime that service is recalled for the user. When a system has the unique ID the system can perform service invocation and can retrieve other information about the service. Publishing a service ID is a known technique e.g. as provide in PRESTO brand mashup software.

The system can capture the information the user enters for the service as the input data and the information provided most recently by the service as the data . Input data can be omitted or not stored within the snapshot artifact depending on what the service requires to execute the data. Some services are predefined to not have any inputs. In other cases the service is predefined to require inputs. For example to get the stock report record from a stock report data service the stock symbol and date is needed to retrieve the price. If there is input data the snapshot artifact stores the input data that the user provided most recently to invoke the service by the time of requesting the snapshot . So when a snapshot is taken of the data at that point in this example the data is the stock price and the input data is the date and the stock code.

Data stored in the snapshot artifact is the actual data from the data source via the service that is captured. In the above example data is the stock price. Whatever the service returns after being invoked that data is stored in the snapshot. This data that is stored in the snapshot artifact is intended to be the data that the user wanted to memorialize and consequently this is the data that triggered the intention to take a snapshot.

The snapshot artifact can store meta data which can conveniently be divided into two different meta data snapshot meta data and user meta data . The metadata in the snapshot artifact can be things like category tag comment or description provided by user and similar variations. The meta data can be user input or can be derived from existing data.

Snapshot meta data are intended to be things that the system generates and stores along with the snapshot information such that the snapshot meta data is related to the snapshots in a manner that the can later retrieve the snapshot in a user friendly manner e.g. by searching by listing and the like .

User meta data are intended to be information about the user that performed the operation or user comments about specific data within the snapshot element and the like. If the system stores a snapshot artifact the system can store who took the snapshot e.g. user ID etc. The user meta data can be user input. Consider for example that the user uses the service to get all stock prices by Apple for the week and the user wants to add a comment to the Wednesday data. In one embodiment the user meta data can be annotations on top of the snapshot especially with regard to elements within the data. The user meta data might indicate select 5row and add my annotation plus the user text annotation.

There are some subtle differences between user meta data and snapshot meta data that relate to the intended use of the meta data. The system can interrogate the user when the user takes a snapshot this can be stored as snapshot meta data . As another example if a user wants to say something about the mashed data the user can enter a text comment and that can be stored in the snapshot artifact as user meta data .

All of the snapshot artifact data gets stored into the snapshot database . For example each snapshot artifact can be stored as a separate record in the snapshot database . Any conventional database can be used as the snapshot database for example a conventional hierarchical database.

In the service application is invoked through the mashup server discussed further below in accordance with known techniques. The service into which the user is inputting data was previously published according to conventional techniques inside a mashup platform for example within the mashup server. Consider for example that there is a web service which was previously published in the mashup platform. Once it is published the service is exposed to the user either through a user interface UI or an application program interface API in accordance with known techniques. When the user sees the service on the UI or API it was invoked through the mashup server. The request to capture a snapshot of the data currently displayed e.g. click on a snapshot button or icon along with the input data is sent from the user s computer to the mashup server the mashup server can look up the service ID from the invocation of the service from the mashup repository as is conventionally known . When the user sees the data from the service displayed on the display the user has already invoked that service.

The fact that the service is invoked means that the mashup server already has the currently displayed data and is temporarily buffering e.g. caching in local memory the input data from the user and the live data from the service .

The snapshot button clicking triggers the mashup server to save the most recent data from the service and the most recent service invocation data input data from the user also this triggers the mashup server to discard the most recent data from the service and to begin to temporarily buffer the new data from the service . Basically when the user takes a snapshot the user is taking a snapshot of the last invocation input data and data from the service . When the user invokes the service the mashup platform can temporarily retain the data returned by the service until the snapshot is triggered. The request for the snapshot sent to the mashup server can cause the mashup server to save the input data and data as part of the snapshot artifact e.g. as a record stored into the snapshot database . Until the snapshot is requested by the user nothing need be stored into the snapshot database because apparently none of the data is yet of interest. The user request for the snapshot is when the snapshot artifact is created and stored with snapshot ID timestamp service ID input data data snapshot meta data description and user meta data annotations.

Referring now to a block diagram illustrating a system for taking a snapshot of a mashup that uses multiple services and mashups will be discussed and described. taking a snapshot of a mashup can be described identically to except for reference to the mashup instead of the service. Hence much of the description will be omitted and similar reference numerals are used e.g. In and respectively there is a user input data and a snapshot artifact generated when the user captures a snapshot of the service S or mashup M . The snapshot artifact includes a snapshot ID a timestamp a service ID S or mashup ID M input data data or mashed data data data and data n snapshot meta data and user meta data . The snapshot artifact can be stored in a snapshot database . In compared to there is a mashup M instead of service S instead of data source providing data there can be a data source providing data a service providing data s and mashup n providing data n . Moreover from the user perspective the user might not even be aware whether it is a service or a mashup that is providing the data which the user captures . The implementation can be the same for snapshots and mashups. The snapshot database can be the same for services and mashups.

As stated above for the mashup snapshot artifact it is a mashup ID that is stored instead of a service ID. The mashup snapshot artifact goes into the same database as the service snapshot artifact. The mashup snapshot artifact has mashed data data data and data n . Recall that the mashup can combine data from different data sources and or mashups according to known techniques to form mashed data. As is conventional the mashup produces a mashup result which is conventionally provided to the user of the mashup mashed data data data and data n. The mashed data is stored in the snapshot artifact as well as the original source data data data data n to see what was used in building the mashed data . Also the snapshot artifact can store an indication of the visualization techniques used by the data to be visualized so that the snapshot meta data can be retrieved and presented in the same visualization technique as used to originally presented the data.

Referring now to a user interface for collecting snapshots will be discussed and described. Deepak might send an updated screenshot of actual implementation which looks mostly the same. In the Data Preview box provides a visualization of the data when the service here YouTube Viewer MegaService 123 is invoked as a service or from a mashup according to known techniques e.g. Data 1 Data 2 mashup data. A Service Inputs menu can be provided so that the system can interact with the user to obtain input data e.g. the illustrated Input Field . The input data is specific to the service or mashup and in some instances can be omitted. also provides a Take Snapshot button which is a user selectable indication to take a snapshot of the mashup or service currently being displayed on the display e.g. within the data preview box . The user can run the service or mashup and then the system can interact with the user to select the Take Snapshot button . Then at the bottom of the illustrated display there can be provided a My Snapshots menu . That is where the snapshots which have been taken can be displayed e.g. in a list as illustrated. For example the item in the list Snapshot 1 309 lists the snapshot meta data tag or description of the snapshot the date it was taken the user metadata and actions to take on the snapshot share delete . In the Data Preview box corresponds to the Data boxes of and and the My Snapshots area basically corresponds to the snapshots meta data.

The illustrated screen can be used for taking snapshots and reviewing snapshots. A snapshot can be taken by running a service or mashup in the data preview area and then selecting the Take Snapshot button . A snapshot can be reviewed by selecting a row in the My Snapshots menu which can retrieve the snapshot artifact as described above and displaying the data therein according to the visualization technique therein in the Data Preview area . Data Preview can switch from live data to retrieved snapshot data.

Referring now to a user interface for sharing snapshots of will be discussed and described. Similar reference numerals are used in and for the same elements e.g. Data Preview area . In the user has clicked on the share button in the My Snapshots menu so that the system interacts with the user to share the snapshot with a different user. In the illustrated example a pop up screen opens up. The system interacts with the user to specify a technique which the user wishes to use to share the snapshot and to obtain an identity of the destination user to receive the snapshot. In the illustrated example the pop up screen queries the user to Send a link to a destination user within the mashup system described further below or to export the data as a known file e.g. .pdf or Excel according to known techniques or to create a mashlet for a destination user to use according to known techniques .

When a user selects to share a snapshot by sending a link the system can create a link uniquely indicating the snapshot artifact and the system can interact with the user to select to the destination user to send the link to by e.g. displaying a form similar to an e mail with optional comments and can prompt the user to click on send. The system can send a notification and e mail to the destination user with a link. When the destination user clicks on the link the system can retrieve the snapshot artifact indicated by the link so the destination user can see the exact same data that was in the snapshot at the moment it was captured visualized in the same way. When the destination user clicks on the link the link indicating the particular snapshot artifact on the mashup server the user can be authenticated according to conventional techniques if appropriate and then the user can be taken to a page such as illustrated in where the snapshot artifact can be retrieved and displayed to the destination user.

All of the information that the mashup server needs to retrieve the snapshot artifact can be incorporated within the link so that the mashup server can retrieve the input data and data from the snapshot artifact and display the data in the same manner using the same visualization technique as the user who took the snapshot. The mashup server does not need to re invoke the service indicated in the snapshot artifact in order to obtain or visualize the data.

Consider a concrete example in which a first user takes a snapshot of a pie graph and shares the snapshot by sending a link. The destination user receives the link to the pie graph snapshot and gets the same visual provided to the first user by clicking on the link. When the link is clicked on the mashup server retrieves the data input data meta data and visualization configuration data and displays the same visual all as stored in the snapshot artifact uniquely indicated by the link.

As another concrete example consider a service that is a map service of a road map from A to B. Input data is points A and B data is conventional road links from A to B and snapshot meta data is Map from point A to B and the preferred visualization technique map view or road list . The visualization is a satellite view of the map or a list as text view i.e. the visualization can be different. So the snapshot meta data indicates map visualization instead of road list . A link is sent to the destination user. When the destination user clicks on the link the mashup platform retrieves the snapshot artifact indicated by the link and all of the information in the snapshot artifact as discussed above. In this example the visualization displays the road links as a map using the retrieved data which is the conventional road links instead of a list of roads.

In operation to make a snapshot the user invokes a mashup or service on her display. The user clicks on the camera icon or snapshot button to take a snapshot of the currently displayed data at the instant the camera icon or snapshot button is clicked. The user s computer is programmed to request the mashup server to store the snapshot on the snapshot database. If the user s computer has the input data and current data then the request to store the snapshot can include the data and input data otherwise if the mashup server has the timestamp mashup ro server ID input data and data e.g. data from the mashup or service then it is not necessary for the request to store the snapshot to include the data and input data. The system then can interrogate the user to obtain metadata indicating a reason why the snapshot was taken to store in the snapshot artifact.

Also the system can provide for sharing the snapshots as described in more detail elsewhere in this document.

In another aspect the system can provide for periodically taking the snapshots on a particular schedule. The schedule can be typical calendar scheduling e.g. interval duration etc. The system can interact with the user to take the current snapshot as well as to pre define the periodic interval for taking additional snapshots. The system can execute the snapshot on behalf of the user even if the user is not logged in for example by periodically executing the service or mashup to obtain the data which can be stored in successive snapshots one for each periodic interval.

In another aspect the user can interact with the system to select one of plural currently displayed mashups for the snapshot. For example the user can be searching for stocks or highest rated mashups or who created the mashups themselves or top rated mashups or mashup favorites there are many ways for a user to get to a mashup . This is similar to a You Tube model technique. Also a mashup can be favorited by a user that is added to a user s my favorites and the like.

Referring now to a block diagram illustrating portions of an exemplary computer system for snapshots will be discussed and described. The computer system may include a communication port and or transceiver or the like for communication with a mashup server a processor a memory a display interface a display an input interface and or a user input device such as a keyboard.

The mashup server can be a part of a mashup platform comprising the mashup server and a mashup client which can execute on the processor of the computer system . Mashup server and mashup client functions can be distributed between the mashup server and the mashup client according to known techniques. The mashup server can invoke services as is known to obtain data from data sources such as web services and the like. Also the mashup server can access a snapshot database on which snapshot artifacts are stored as is further described herein.

The processor may comprise one or more microprocessors and or one or more digital signal processors. The memory may be coupled to the processor and may comprise a read only memory ROM a random access memory RAM a programmable ROM PROM and or an electrically erasable read only memory EEPROM . The memory may include multiple memory locations for storing among other things an operating system data and variables for programs executed by the processor computer programs for causing the processor to operate in connection with various functions such as providing a display of a mashup and or a service interacting with a user to input an indication to take a snapshot of a mashup and or service being displayed storing a snapshot artifact interrogate the user for the reason the snapshot was taken interact with the user to select one of the currently displayed mashups or services for a snapshot retrieve a snapshot to share with another user schedule snapshots to be taken retrieve a shared snapshot from another user a mashup client function and or other processing and a database for other information used by the processor . The computer programs may be stored for example in ROM or PROM and may direct the processor in controlling the operation of the computer system .

The user may invoke functions accessible through the user input device interface with the processor through an input interface . The user input device may comprise one or more of various known input devices such as a keyboard and or a pointing device such as a mouse the keyboard may be supplemented or replaced with a scanner card reader or other data input device the pointing device may be a mouse touch pad control device track ball device or any other type of pointing device and the input interface can be a known interface thereof to communicate with the processor .

The text and or image display is representative of a display that may present information to the user by way of a conventional liquid crystal display LCD or other visual display and or by way of a conventional audible device for playing out audible messages.

Responsive to signaling from the user input device in accordance with instructions stored in memory or automatically upon receipt of certain information via the communication port and or transceiver the processor may direct the execution of the stored programs.

The processor can be programmed for providing a display of a mashup and or a service such as is performed according to known techniques when a user invokes a service or a mashup. As is known the invocation of the mashup or service is performed via the mashup platform which comprises the mashup client and the mashup service sometimes requiring the system to interact with the user to input data and select a service or mashup via the user input device and or display resulting in the mashup or service displaying data generated by the service which is provided for the display .

The processor can be programmed for interacting with a user to input an indication to take a snapshot of a mashup and or service being displayed. The mashup platform i.e. the mashup client and or the mashup server can be programmed to retain the most recent input data provided when the mashup or service was invoked and the data which is provided for the display in a temporary cache here illustrated as being provided together with the mashup client in the computer system operated by a user.

The processor can be programmed to cause the storing a snapshot artifact of live data in the mashup or service at the instant the snapshot is captured triggered by the snapshot being requested and automatically without further manual intervention collecting the data to be stored. For example the user can select a button icon or other click able or selectable input device to instruct the computer system to take the snapshot of the current data on the display.

The processor can be programmed to interrogate the user via the display and user input device for the reason the snapshot was taken. That is presumably the snapshot is requested to memorialize the significance of the data. In accordance with known techniques the user can be interrogated to input a reason or title to associate with the snapshot which can be stored as a snapshot meta data in the snapshot artifact. Optionally the user may be interrogated or prompted to provide additional snapshot meta data and or user meta data.

The processor can be programmed to interact with the user via the display and user input device to select one of the currently displayed mashups or services to be used for a snapshot when more than one mashup or service is provided on a display. For example the available mashups and or services can be provided on a user selectable list.

The processor can be programmed to retrieve a snapshot and or to share with another user. For example the display can list snapshot artifacts that were previously taken and stored in the snapshot database . The computer system can interact with the user to select one or more of the snapshot artifacts that can be retrieved and then provided on the display for example as previously described herein. The user can interact with the computer system via the display and user input device to select a button icon or menu entry to cause the computer system to share the selected snapshot artifact s . As further described herein the computer system can interact with the user interact with the user via the display and user input device to select a destination user for the snapshot to be shared. Then the computer system can send a request to share the selected snapshot artifact to the mashup server . The mashup server can construct a link that identifies the snapshot artifact to be shared and can send the link to the destination user.

The processor can be programmed to schedule snapshots to be taken on a periodic basis or at pre defined times. As described herein in more detail the computer system can interact with the user via the display and user input device to determine the periodic basis and or pre defined times when a snapshot is to be taken.

The processor can be programmed to retrieve a shared snapshot from another user. When a user receives a link with a shared snapshot from a first user the user can interact with the computer system via the display and user input device to select the link. Selecting the link with the shared snapshot causes the computer system to request the snapshot artifact from the mashup server . Then the computer system can display the retrieved snapshot artifact on the display as further described herein.

The processor can be programmed for a mashup client function in accordance with known techniques. That is the mashup platform can be distributed between the mashup server and the mashup client as is known. Details which are not presently relevant are omitted from the present description.

The computer system can include a central processing unit CPU with disk drives not illustrated symbolic of a number of disk drives that might be accommodated by the computer. Typically these might be one or more of the following a floppy disk drive a hard disk drive and a CD ROM or digital video disk. The number and type of drives may vary typically with different computer configurations. Disk drives may be options and for space considerations may be omitted from the computer system used in conjunction with the processes described herein. The computer may also include a CD ROM reader and CD recorder which are interconnected by a bus along with other peripheral devices supported by the bus structure and protocol not illustrated . The bus can serves as the main information highway interconnecting other components of the computer and can be connected via an interface to the computer. A disk controller not illustrated can interface disk drives to the system bus. These may be internal or external.

It should be understood that is described in connection with logical groupings of functions or resources. One or more of these logical groupings may be omitted from one or more embodiments for example the functionality of scheduling periodic snapshots can be omitted. Likewise functions may be grouped differently combined or augmented without parting from the scope. Similarly the present description may describe various databases or collections of data and information. One or more groupings of the data or information may be omitted distributed combined or augmented or provided locally and or remotely without departing from the scope of the invention.

Referring now to a flow chart illustrating a procedure to take a snapshot will be discussed and described. In overview illustrates a procedure for Snapshots A and a procedure for Snapshots B which can interact. The snapshots A procedure can include to display a mashup or service with live data to interact with a user to take a snapshot of the current mashup or service to store a snapshot artifact to continue to display live data from the mashup or service and to repeat if the user indicates to take another snapshot. The snapshots B procedure meanwhile includes to start the requested mashup or service and to store the input data to get the mashup or service data temporarily buffer it and provide it for display to check whether to store a snapshot artifact if so to store the snapshot artifact using the temporarily buffer data etc. and to continue to get the data from the mashup service to temporarily buffer the data and to provide live data from the mashup service. This is described in some detail below however since much of this has been described above in detail the discussion below may be abbreviated to avoid repetition.

The snapshots procedure displays a mashup or service with live data. This has been described in detail above. Illustrated in is that a request to start the mashup service can be sent to another procedure to initiate the mashup or service as a server or in the background or the like. The other snapshots procedure can start the requested mashup or service and store the input data. The other snapshots procedure then can get the mashup or service data according to known techniques and provide the mashup or service data for display according to known techniques . Also the other snapshots procedure can temporarily buffer the input data from the user used to invoke the mashup or service as well as the data most recently provided from the mashup e.g. mashed data mashup data and or service data or service e.g. service data and in this way can always ready with a cache copy of the data from the mashup or service that is being presently displayed.

The snapshots procedure can interact with a user to take a snapshot of the current mashup or service being currently displayed for example using a button an icon a menu or the like also described in great detail above. The snapshots procedure is triggered to store a snapshot artifact of the mashup or service currently on the display by the user selecting the button clicking the icon or inputting an item from the menu or the like. The user can be prompted to input a reason for taking the snapshot. Meanwhile the snapshots procedure can check whether to store a snapshot artifact. If the user has triggered storing a snapshot artifact the other snapshots procedure can store the snapshot artifact using the temporarily buffered data the cached input data a snapshot ID a current timestamp a mashup or service ID respectively snapshot meta data including optional reason for taking the snapshot and user meta data.

Thereafter the snapshots procedure can continue to display live data from the mashup or service as is conventional. Also as is conventional if the live data is updated the updated live data can be displayed to the user. Meanwhile the snapshots procedure can continue to get the data from the mashup service to temporarily buffer the data and to provide the live data from the mashup service. The snapshots procedure can repeat if the user indicates to take another snapshot. Accordingly the snapshots procedures can provide for taking a snapshot of the mashup or service being currently displayed and can store the snapshot artifact.

Referring now to a flow chart illustrating a procedure to share a snapshot with another user will be discussed and described. In overview illustrates a procedure to share snapshot A and a procedure to share snapshot B which can interact. The procedure to share snapshots A can include displaying the snapshot and if the user indicates to share the snapshot sharing the snapshot. The procedure to share snapshots B can include getting the snapshot artifact and providing the snapshot for display and if the snapshot is to be shared then getting the ID for the snapshot artifact and creating an e mail with the link to send to another user and confirming that the snapshot link was sent. These are discussed in some detail below to the extent not previously discussed above.

The procedure to share snapshot A procedure can include displaying the snapshot for example by interacting with the user to select the snapshot to retrieve. This was discussed above in detail. The procedure to share snapshots B can include getting the snapshot artifact for the requested snapshot and providing the snapshot for display.

Snapshots can be shared upon command by a user. Fore example the procedure to share snapshot A can include if the user indicates to share the snapshot sharing the snapshot. Then the procedure to share snapshots B can include if the snapshot is to be shared getting the ID for the snapshot artifact and creating an e mail with the link to send to another user. When done the procedure to share snapshots B can confirm that the snapshot link was sent and then both procedures can end .

Referring now to a flow chart illustrating a procedure to get a shared snapshot from another user will be discussed and described. In overview illustrates a procedure to get a shared snapshot A and a procedure to get a shared snapshot B which can interact.

The procedure to get a shared snapshot A can include getting a link to the shared snapshot. The link may be obtained for example from an e mail sent by the user that originated the snapshot to the destination user that will retrieve the shared snapshot. The shared snapshot is retrieved and the snapshot artifact is determined from the link. Then the procedure can get the snapshot artifact from storage provide the snapshot for display and provide information from the snapshot artifact in order to reconstruct the display of the snapshot. Then the procedure to get the snared snapshot A can configured the display according to the visualization technique indicated in the snapshot artifact and can display the shared snapshot. Consequently the destination user can display the snapshotted data with the same visualization technique with which the snapshotted data was displayed to the originating user. Also the destination user can view any annotation input as user data by the originating user. The procedure can end .

The above description frequently deals with one user. However consider for example a collection of users such as a group of financial analysts. In the collection of users different users can retrieve and display different data in different points of time taken as snapshots by different people for the same service. The snapshots can be aggregated over time. For example consider three stock analysts looking at the same stocks on different days. A mashup can include a financial reporting service and displays a full range of stocks. However the three stock analysts take snapshots of the same selected stocks on different days. The snapshots from different users of the same components of the service can be shared and even tracked.

The term mashup is used to refer to a software application that combines pre existing components from one or more information providing services into a single tool which can comprise a server side and a client side application where the components used by the mash up are visually presented to a user on a display at the client side in a manner which is different from the pre determined presentation of the information providing service. A mashup is frequently made by access to open APIs and other data sources to produce results that were not the original reason for producing the raw source data. An example of a mashup is the use of cartographic data from Google Maps to add location information to real estate data thereby creating a new and distinct Web service that was not originally provided by either source. A mashup as the term is used herein is expressly defined as being configured in accordance with mashup standards such as XML interchanged as REST REpresentational State Transfer or Web Services RSS Atom and other evolutions and variations of mashup standards or extracting data from a screen display output of a program on another site but excluding simply linking to another site such as through an HTML href. A mashup is to be distinguished from a portal in which content is presented side by side in the manner that is the same as the pre determined presentation of the information providing service.

The term service is used herein expressly to refer to an information providing service that provides data from a server in a visual presentation on a display to a user typically an application programming interface API or web API that can be accessed over a computer packet network and executed on a remote system hosting the requested services in accordance with Extensible Markup Language messages that follow the Simple Object Access Protocol SOAP standard Web Services Description Language WDSL Representational State Transfer REST constraints and variations and evolutions thereof. An example of a service is Google Maps a Web service or an RSS feed.

The term component as used herein refers to data that is retrieved in real time from an information providing service.

The foregoing detailed description includes many specific details. The inclusion of such detail is for the purpose of illustration only and should not be understood to limit the invention. In addition features in one embodiment may be combined with features in other embodiments of the invention. Various changes may be made without departing from the scope of the invention as defined in the following claims.

As one example the computer system may be a general purpose computer or a specially programmed special purpose computer. It may be implemented as a distributed computer system rather than a single computer. Similarly a communications link may be World Wide Web a modem over a POTS line and or any other method of communicating between computers and or users. Moreover the processing could be controlled by a software program on one or more computer system or processors or could even be partially or wholly implemented in hardware.

One or more displays for the system may be provided in connection with HTML display format. Although HTML is the preferred display format it is possible to utilize alternative display formats for interacting with a user and obtaining user instructions.

The above discussion has involved particular examples. However the principles apply equally to other examples and or realizations. Naturally the relevant data may differ as appropriate.

Further the above has been discussed in certain examples as if it is made available by a provider to a single user with a single site. The above described system device and or method may be used by numerous users over distributed systems if preferred.

The above has been described in connection with example data formats for example XML and or proprietary or public formats. However it may be used in connection with other data formats structured and or unstructured unitary and or distributed.

The system used herein may rely on the integration of various components including as appropriate and or if desired hardware and software servers applications software database engines server area networks firewall and SSL security production back up systems and or applications interface software. The configuration may be preferably network based and optionally utilizes the Internet as an exemplary primary interface with the user.

The various databases may be in for example a relational database format but other standard data formats may also be used.

It should be noted that the term computer system used herein denotes a device sometimes referred to as a computer laptop personal computer personal digital assistants personal assignment pads or equivalents thereof provided such units are arranged and constructed for operation with a mashup or service.

Furthermore the communication networks of interest include those that transmit information in packets for example those known as packet switching networks that transmit data in the form of packets where messages can be packetized and routed over network infrastructure devices to a destination. Such networks include by way of example the Internet intranets local area networks LAN wireless LANs WLAN wide area networks WAN and others and can be supported by networking protocols such as TCP IP Transmission Control Protocol Internet Protocol and UDP UP Universal Datagram Protocol Universal Protocol and or other protocol structures and variants and evolutions thereof. Such networks can provide wireless communications capability and or utilize wireline connections such as cable and or a connector or similar.

This disclosure is intended to explain how to fashion and use various embodiments in accordance with the invention rather than to limit the true intended and fair scope and spirit thereof. The invention is defined solely by the appended claims as they may be amended during the pendency of this application for patent and all equivalents thereof. The foregoing description is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications or variations are possible in light of the above teachings. The embodiment s was chosen and described to provide the best illustration of the principles of the invention and its practical application and to enable one of ordinary skill in the art to utilize the invention in various embodiments and with various modifications as are suited to the particular use contemplated. All such modifications and variations are within the scope of the invention as determined by the appended claims as may be amended during the pendency of this application for patent and all equivalents thereof when interpreted in accordance with the breadth to which they are fairly legally and equitably entitled.

