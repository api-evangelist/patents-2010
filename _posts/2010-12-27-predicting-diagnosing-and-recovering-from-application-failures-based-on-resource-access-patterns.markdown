---

title: Predicting, diagnosing, and recovering from application failures based on resource access patterns
abstract: Technologies are described herein for differentiating normal operation of an application program from error conditions to predict, diagnose, and recover from application failures. Access to resources by the application program is monitored, and resource access events are logged. Resource access patterns are established from the logged resource access events utilizing computer pattern recognition techniques. If subsequent access to resources by the application program deviates from the established patterns, then a user and/or administrator of the application program is notified of a potential error condition based on the detected deviation. In addition, sequences of resource access events that deviate from the established resources access patterns are correlated with an error condition based on a temporal proximity to the time of occurrence of the error to provide diagnostic information regarding the error.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09189308&OS=09189308&RS=09189308
owner: Microsoft Technology Licensing, LLC
number: 09189308
owner_city: Redmond
owner_country: US
publication_date: 20101227
---
Software applications executing on a computer system may fail for a wide variety of reasons such as code bugs user errors bad input data unavailable resources or the like. Such application failures may result in loss of data and application downtime and may incur costs and time related to recovery of the application and data. Applications running in a common environment or from a common installation may be expected to encounter the same failures given the same inputs conditions and or circumstances. Such may be the case with applications running in a virtualized application environment.

Application virtualization allows software applications executed by a computer to be decoupled from the hardware operating system OS and local configuration of the computer. Application virtualization may remove the requirement for an application to be installed configured and maintained locally on the computer. Instead a virtual application environment may execute on the computer and stream the application components across a network from a virtualized application package maintained centrally on a virtual application server.

Technologies are described herein for differentiating normal operation of an application program from error conditions to predict diagnose and recover from application failures. When an application program is running in a virtual application environment the virtualization layer or virtual application environment may have knowledge of and control over requests the application makes for resources such as reads from data files writes to registry keys and the like. Utilizing the technologies described herein the virtualization layer may log accesses to resources and over time establish common patterns of resource usage. Once such resource access patterns are established the virtualization layer may continue to monitor resource usage by the application program and provide a warning or alert when the patterns change. This proactive warning may provide the user of the application program or an administrator a chance to take diagnostic or corrective actions quickly thus reducing or even preventing downtime and data loss.

It will be appreciated that application programs typically have a means of displaying errors to the user or administrator like a pop up dialog or an event logged in an application or system event log. The quality and utility of these error messages however may vary dramatically from application to application. Providing high quality error messages that allow the source of the error to be determined requires a significant investment and not all software vendors make this investment. Leveraging the log of accesses to resources and common patterns established described herein to correlate which resources were being accessed or how the pattern changed just before the error condition may allow users and or administrators to more quickly diagnose application failures and implement recovery actions reducing application downtime.

In addition because the virtualization layer is aware of all resource usage by the application program it can log resource additions modifications or deletions along with the data used in these resource modifications that occur over time. If the application program fails a second instance of the application program can be started immediately and the log of resource modifications and data can be replayed thus restoring the application state to a point just before failure of the first instance of the application. Such rapid failover between application instances may limit further downtime.

According to embodiments access to resources by the application program executing in a virtual application environment is monitored and resource access events are logged in a resource access log. Resource access patterns are established from the logged resource access events utilizing computer pattern recognition techniques. If subsequent access to resources by the application program deviates from the established patterns then a user and or administrator of the application program is notified of a potential error condition based on the detected deviation.

Further sequences of resource access events that deviate from the established resources access patterns may be correlated with an error condition based on a temporal proximity to the time of occurrence of the error condition to provide diagnostic information to the user and or administrator regarding the error. Finally resource access events regarding the addition modification or deletion of data logged in the resource access log may be replayed in the event of an application failure and subsequent restart of the application to re establish the application state of the application program.

It should be appreciated that the above described subject matter may be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to technologies for differentiating normal operation of an application program from error conditions based on patterns of resource access in order to predict diagnose and or recover from application failures. While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. In the accompanying drawings like numerals represent like elements through the several figures.

A software application program executes on the computer . According to embodiments the application program may execute inside a virtual application environment . The virtual application environment may allow the computer to launch and execute application programs that have not been previously installed on the computer. The virtual application environment may instead stream the components of the application program in real time or near real time over a network from a virtual application server . The virtual application environment and virtual application server may be based upon the MICROSOFT APP V technology from MICROSOFT Corporation of Redmond Wash. the CITRIX XENAPP technology from CITRIX SYSTEMS Inc. of Fort Lauderdale Fla. or any other application streaming and virtualization platform or technologies. The network may be a LAN a wide area network WAN the Internet or any other networking topology that connects the computer to the virtual application server .

The software components of the application program may be stored in a virtualized application package located on a storage device accessible by the virtual application server . According to embodiments the virtualized application package consists of a number of blocks of data that contain application program structure information as well as the individual component files and other elements of the application. The virtualized application package may further contain metadata regarding the location and configuration of local and remote resources utilized by the application program during execution. The virtualized application package may be created by an administrator of the application program by performing a typical installation of the application on a management server and recording the changes made to the local file system registry and other for example. The blocks in the virtualized application package may then be streamed to the virtual application environment to allow the application program to be executed on the computer

The virtual application environment may create a separate virtual runtime environment referred to as an application sandbox to execute each application program streamed from the virtual application server . The application sandbox allows the components of the application program to execute in isolation from the remainder of the system. The virtual application environment may further provide a virtualization layer that abstracts access to local resources A and remote resources B referred to herein generally as resources utilized by the application program during execution. The resources may include system memory local processor time or processing threads files stored in a file system data stored in a registry database application services presentation services database services and the like available locally on the computer or remotely across the network .

The application program may access the local and remote resources through resource application programming interfaces APIs implemented by an operating system or other standard software libraries installed on the computer . According to embodiments the virtualization layer abstracts the resource APIs in order monitor and control access requests to the local and remote resources by the application program executing in the virtual application environment . In addition the virtualization layer may log access to the resources by the application program in a resource access log . The resource access log may comprise a log file in the local file system a number of database tables on a remote database server a combination of the two or any other data storage system accessible by the computer .

The resource access log may contain a log of resource access events . The resource access events may include details of calls to the resource APIs made by the application program executing in the virtual application environment . Each of the resource access events may include a timestamp indicating when the resource access occurred an identifier of the individual resource API called and a number of parameter values indicating the resource type location or other aspects of the local or remote resources being accessed. The resource access events may be stored as an entries in a log file as rows in a database table as objects in a dictionary or in any other data structure or format known in the art.

In one embodiment the resource access log further contains resource access patterns . The resource access patterns may comprise patterns of resource access by the application program that regularly occur. For example the application program may read a particular registry key at time T and then write to a particular file located on a remote file system at time T 240 msec. Further this pattern of reading the registry key and writing to the file may occur more than once either in response to a particular event or condition periodically or at a particular time of day for example. Resource access patterns may be established between specific API calls between API calls for specific resources or between API calls for specific quantities of resources such as an amount of memory allocated or a number of threads started for example.

The resource access patterns may be established from the resource access events collected over some period of time using pattern recognition techniques. For example a subset of event types may be determined to be important and Bayesian learning techniques may be utilized to establish the resource access patterns across those types of resource access events within the collection period. The generated resource access patterns may be stored as Markov chains or probability trees indicating a relative probability of occurrence between the resource access events for example.

According to one embodiment the resource access patterns may be generated in near real time on the computer from the log of resource access events in a background process running in parallel to the execution of the application program . In another embodiment resource access events logged by the virtualization layer on a number of computers executing the application program in the virtual application environment may be aggregated at a central location. The aggregated event data may be genericized by removing computer dependent resource paths for example and resource access patterns may be established from the aggregated and genericized event data. The generated resource access patterns may then be sent to each of the computers executing the application program in order for the patterns to be utilized in predicting application failures as will be described in more detail below in regard to .

In a further embodiment the resource access log also contains resource write data . The resource write data may contain a log of calls by the application program to resource APIs that add modify or delete data such as a registry value write or an I O buffer write. The resource write data may contain a deep copy from pointers or structure type parameters in order to include the data being written. In addition any filename key name address or other location parameters may be genericized using the current context of the executing application program . It will be appreciated that the resource write data and the resource access events may be integrated into a single log file or other structure in the resource access log . The resource write data may be utilized to restore the application state of the application program during recovery from an application failure as will be described in more detail below in regard to .

Referring now to additional details will be provided regarding the embodiments presented herein. It should be appreciated that the logical operations described with respect to are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. The operations may also be performed in a different order than described.

The routine begins at operation where the virtualization layer monitors access to local and remote resources by the application program executing in the virtual application environment and logs these accesses to the resource access log . As described above in regard to the virtualization layer may log details of calls by the application program to the resource APIs as resource access events including the timestamp indicating when the resource access occurred an identifier of the individual resource API called and a number of parameter values indicating the resource type location or other aspects of the local or remote resources being accessed.

From operation the routine proceeds to operation where resource access patterns are established. It will be appreciated that over some period of time a significant number of resource access events may be logged in the resource access log by the virtualization layer . As described above in regard to the virtualization layer or some other module or process may utilize the logged resource access events to establish the resource access patterns . For example the virtualization layer may utilize pattern recognition techniques such as Bayesian networks to establish the relative probabilities of occurrence between two or more resource access events. The established resource access patterns may be then be stored as Markov chains or probability trees in the resource access log .

The resource access patterns may be generated in near real time on the computer by the virtualization layer . Alternatively logged resource access events may be aggregated from a number of computers at a central location genericized and utilized to establish resource access patterns across multiple instances of the application program executing in the virtual application environment across the computers. The generic resource access patterns established from the aggregated resource access events may then be utilized to predict error conditions on any computer executing the application program in the manner described herein.

The routine proceeds from operation to operation where the virtualization layer detects a deviation from the established resource access patterns by the application program executing in the virtual application environment . For example the virtualization layer may detect a sequence of resource API calls that has a probability of occurrence below a specified threshold based on Bayesian analysis of the resource access patterns . Similarly the virtualization layer may detect a sequence of resource API calls that has a high probability of occurrence with a known error condition as established in the resource access patterns . In one embodiment if the probability of the sequence of resource API calls does not fall below the specific threshold then the virtualization layer logs the corresponding resource access events so that the resource access patterns may be updated with new probabilities in the background process described above. In this way the resource access patterns may be continually updated during execution of the application program in in the virtual application environment .

If a deviation from the established resource access patterns by the application program is detected then the routine proceeds from operation to operation where the virtualization layer raises an alert regarding the deviation in the pattern. The alert may be directed to a user or administrator of the application program . The alert may be sent via e mail text message or system message queue raised as a system level event logged in an application or system event log or otherwise transmitted to the administrator via a messaging system accessible by the computer . This proactive alert may give the administrator a chance to take diagnostic or corrective actions quickly reducing or perhaps preventing downtime and data loss in the wake of a potential pending error condition. From operation the routine ends.

The routine begins at operation where the virtualization layer monitors access to local and remote resources by the application program executing in the virtual application environment and logs these accesses to the resource access log in the manner described above in regard to operation . The routine then proceeds to operation where an error condition in the application program is detected. For example the error condition may be detected in the application program by a user or administrator of the application through traditional means such as a pop up error dialog an event logged in an application or system event log or the like.

From operation the routine proceeds to operation where resource access events in the resource access log are correlated with the detected error condition. The administrator may provide a time of occurrence of the error condition or the time of occurrence of the error condition may be identified from specific calls to resource APIs logged in the resource access events . The virtualization layer or other module may then identify a subset of resource access events in the resource access log within a temporal proximity to the time of occurrence of the error condition. For example all resource access events that occurred within a 10 second window leading up to the error condition may be correlated with the error condition.

In one embodiment only sequences of resource API calls logged in the resource access events within the temporal proximity to the error condition that deviate from established resource access patterns are correlated with the error condition. For example the virtualization layer or other module may identify sequences of resource API calls logged in the resource access events within 10 seconds of the time occurrence of the error condition that have a probability of occurrence below a specified threshold based on Bayesian analysis of the resource access patterns in the resource access log . It will be appreciated that the specified threshold of probability for correlating deviations in resource access patterns with an error condition may be higher than the threshold of probability for predicting an error condition based on deviations in resource access patterns described above in regard to operation .

The routine then proceeds from operation to operation where the resource access events correlated with the error condition are shown to the user or administrator of the application program . The correlated resource access events may be shown through a user interface dialog or in a report transmitted via e mail text message system message queue or the like. Providing resource access events from the resource access log that are correlated in time with a particular error condition may allow the user or administrator to quickly diagnose the cause of the error condition and implement the appropriate recovery actions in order to reduce downtime and data loss. From operation the routine ends.

The routine begins at operation where the virtualization layer monitors access to local and remote resources by the application program executing in the virtual application environment and logs these accesses to the resource access log in the manner described above in regard to operation . In addition the virtualization layer logs resource write data for calls by the application program to resource APIs that add modify or delete data as described above in regard to . The resource write data may include a deep copy from pointers or structure type parameters specified in the API calls and the data may be further processed using the current context of the executing application program to genericize filename key name address or other location parameters in the resource write data .

From operation the routine proceeds to operation where the application program fails due to an error condition. For instance the application program may fail because of a software bug a user error bad input data unavailable resources a hardware failure in the computer or the like. Upon failure of the application program the routine moves to operation where the application program is restarted. The application program may be restarted automatically by the virtualization layer or another module executing on the computer or it may be restarted manually by a system administrator on the same computer or another computer system with similar configuration.

The routine proceeds from operation to operation where the virtualization layer executing in the virtual application environment on the computer where the application program was restarted replays certain resource access events logged in the resource access log in order to restore the application state to a point before the failure occurred. For example the virtualization layer may replay all resource access events corresponding to calls to resource APIs that write to volatile or cached storage locations such as system memory addresses I O buffers cached files or the like.

In a further embodiment the virtualization layer may replay all resource access events corresponding to the writing of data that occurred since a last snapshot of the application state or checkpoint was taken and stored by the virtualization layer and or application program before the application failure. The virtualization layer may utilize the resource write data in the resource access log to replay the selected resource access events in order to ensure the proper data is written in restoring the application state. Logging resource access events that add modify or delete data along with the corresponding resource write data in order to replay the writes to restore application state may allow for faster recovery from application failures thus reducing application downtime. From operation the routine ends.

While the present disclosure is described in the context of a virtualized application environment it will be appreciated that the methods presented herein for differentiating normal operation of an application program from error conditions to predict diagnose and recover from application failures may be implemented in any other application environment where the access of application programs to local and remote resources may be monitored. For example a module similar to the virtualization layer may be implemented that utilizes methods known in the art to hook the resources APIs implemented by the operating system in order to monitor requests for local and remote resources by a locally executing applications program outside of a virtual application environment . The module may log the accesses to the resources and establish common patterns of resource usage by the application program . Once such resource access patterns are established the module may continue to monitor resource usage by the application program and provide a warning or alert when the patterns change in the manner described herein.

The computer architecture shown in includes one or more central processing units CPUs . The CPUs may be standard processors that perform the arithmetic and logical operations necessary for the operation of the computer . The CPUs perform the necessary operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiating between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units and other logic elements.

The computer architecture further includes a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPUs . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer also includes a mass storage device for storing an operating system application programs and other program modules which are described in greater detail herein.

The mass storage device is connected to the CPUs through a mass storage controller not shown connected to the bus . The mass storage device provides non volatile storage for the computer . The computer may store information on the mass storage device by transforming the physical state of the device to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the mass storage device whether the mass storage device is characterized as primary or secondary storage and the like.

For example the computer may store information to the mass storage device by issuing instructions to the mass storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive the reflective or refractive characteristics of a particular location in an optical storage device or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage device. Other transformations of physical media are possible without departing from the scope and spirit of the present description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the mass storage device.

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a computer. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store the virtualization layer which was described in detail above in regard to . The mass storage device and the RAM may also store other types of program modules or data.

In addition to the mass storage device described above the computer may have access to other computer readable media to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable media may be any available media that can be accessed by the computer including computer readable storage media and communications media. Communications media includes transitory signals. Computer readable storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for the storage of information such as computer readable instructions data structures program modules or other data. For example computer readable storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information and that can be accessed by the computer .

The computer readable storage medium may be encoded with computer executable instructions that when loaded into the computer may transform the computer system from a general purpose computing system into a special purpose computer capable of implementing the embodiments described herein. The computer executable instructions may be encoded on the computer readable storage medium by altering the electrical optical magnetic or other physical characteristics of particular locations within the media. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one embodiment the computer may have access to computer readable storage media storing computer executable instructions that when executed by the computer perform the routines and or for differentiating normal operation of an application program from error conditions to predict diagnose and recover from application failures described above in regard to .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computing devices and computer systems through the network such as a LAN a WAN the Internet or a network of any topology known in the art. The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems.

The computer may also include an input output controller for receiving and processing input from a number of input devices including a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. Similarly the input output controller may provide output to a display device such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for differentiating normal operation of an application program from error conditions to predict diagnose and recover from application failures are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable storage media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

