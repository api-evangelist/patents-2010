---

title: Systems and methods for analyzing malware
abstract: A computer-implemented method for analyzing malware may include: 1) identifying a set of malware samples, 2) identifying, for each malware sample in the set of malware samples, a set of static strings present in the malware sample, and then 3) clustering the set of malware samples based on the set of static strings present in each malware sample. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08561193&OS=08561193&RS=08561193
owner: Symantec Corporation
number: 08561193
owner_city: Mountain View
owner_country: US
publication_date: 20100517
---
Consumers and businesses face a growing tide of malicious software that threatens the stability and performance of their computers and the security of their data. Computer programmers with malicious motivations have created and continue to create viruses Trojan horses worms and other programs in an attempt to compromise computer systems. These malicious programs are often referred to as malware. In an attempt to evade detection malicious programmers may inject malware into or among legitimate programs.

Many security software companies attempt to combat malware by creating and deploying malware signatures e.g. hash functions that identify malware to their customers on a regular basis. However new malware along with variants of old malware continually emerge leaving a significant amount of malware that cannot be detected using traditional signature based malware detection methods.

Unfortunately ever increasing volumes of new malware and malware variants create ever larger sets of malware for vendors to analyze. This may consume the time of malware analysts and or may consume computing resources. Additionally growing sets of malware signatures may increase the size of anti malware products increase the duration of malware scans and or increase bandwidth consumption during signature definition updates.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for analyzing malware. In one example one or more of the various systems described herein may accomplish this task by 1 identifying a set of malware samples 2 identifying for each malware sample in the set of malware samples a set of static strings present in the malware sample and then 3 clustering the set of malware samples based on the set of static strings present in each malware sample.

The systems described herein may cluster the set of malware samples based on the set of static strings present in each malware sample in a variety of ways. For example the systems described herein may cluster the set of malware samples based on the percentage of static strings shared between malware samples. In some examples these systems may also create a vector for each malware sample in the set of malware samples where each dimension in the vector may indicate whether the malware sample includes a corresponding static string.

In some embodiments the systems described herein may cluster the set of malware samples by 1 identifying a set of clusters 2 identifying a candidate cluster in the set of clusters that correlates most strongly with the malware sample based on the set of static strings present in the malware sample and then 3 adding the malware sample to the candidate cluster. In some examples these systems may identify the candidate cluster by 1 identifying a minimum correlation threshold 2 determining that no cluster in the set of clusters meets the minimum correlation threshold with respect to the malware sample and then 3 identifying a new cluster in the set of clusters as the candidate cluster.

The set of static strings may include a variety of data. In some examples the set of static strings may include a set of human readable strings. Examples of static strings in the set of static strings may include but are not limited to a dynamic link library name an application programming interface identifier a section name a file name a file path a service identifier a process identifier an Internet address a resource address a registry entry a globally unique identifier a class identifier a string in a resource section a batch file command a packer specific string a compiler specific string an installer specific string a package specific string version information and or a digital signature.

In some examples the systems described herein may also 1 identify a cluster of malware samples in the set of malware samples 2 analyze a subset of malware samples in the cluster to identify at least one common property and 3 ascribe the common property to at least one malware sample that is in the cluster but not in the subset. In some examples the common property may include a behavioral property. Additionally or alternatively the systems described herein may 1 identify a cluster of malware samples in the set of malware samples and 2 generate a signature capable of identifying malware samples in the cluster.

As will be explained below by clustering malware samples based on static strings that the malware samples have in common the systems and methods described herein may reduce the time and resources required to analyze large sets of malware samples. Furthermore by generating a generic signature to describe a cluster of malware samples these systems and methods may reduce the number of signatures necessary to provide anti malware protection potentially reducing the resources needed to propagate store and use signatures. Additionally these systems and methods may efficiently cluster malware samples to minimize the computational complexity necessary to cluster a set of malware samples.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for analyzing malware. In one example the various systems described herein may accomplish this task by 1 identifying a set of malware samples 2 identifying for each malware sample in the set of malware samples a set of static strings present in the malware sample and then 3 clustering the set of malware samples based on the set of static strings present in each malware sample.

The following will provide with reference to detailed descriptions of exemplary systems for analyzing malware. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In addition and as will be described in greater detail below exemplary system may include a clustering module programmed to cluster the set of malware samples based on the set of static strings present in each malware sample. Although illustrated as separate elements one or more of modules in may represent portions of a single module or application.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as computing system illustrated in computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

Exemplary system in may be deployed in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system illustrated in . As shown in system may include a computing system programmed with one or more modules. In one embodiment and as will be described in greater detail below modules from may program computing system to 1 identify a set of malware samples such as a set of malware samples 2 identify for each malware sample in the set of malware samples a set of static strings present in the malware sample e.g. extract a set of static strings from each malware sample in set of malware samples and then 3 cluster the set of malware samples based on the set of static strings present in each malware sample e.g. create clusters relating to set of malware samples .

Computing system generally represents any type or form of computing device capable of reading computer executable instructions. Examples of computing system include without limitation laptops desktops servers cellular phones personal digital assistants PDAs multimedia players embedded systems combinations of one or more of the same exemplary computing system in or any other suitable computing device.

As illustrated in at step one or more of the systems described herein may identify a set of malware samples. For example at step identification module may as part of computing system in identify a set of malware samples . As used herein the term malware may refer to any virus worm Trojan horse spyware and or any other malicious illegitimate and or unauthorized software. Additionally the term malware sample may refer to any copy and or representation of a uniquely identifiable malware specimen.

Identification module may perform step in any suitable manner. For example identification module may identify the set of malware samples by accessing a database storing the malware samples. Additionally or alternatively identification module may identify the set of malware samples by reading a configuration file that identifies the malware samples. In some examples identification module may identify the set of malware samples by receiving a message identifying the set of malware samples.

At step one or more of the systems described herein may identify for each malware sample in the set of malware samples a set of static strings present in the malware sample. For example at step extraction module may as part of computing system in identify for each malware sample in set of malware samples a set of static strings present in the malware sample. As used herein the term static string may refer to any string of characters that may be present in a malware sample.

Extraction module may perform step in a variety of ways. For example extraction module may parse the malware sample for certain regular expressions. For example extraction module may parse the malware sample for human readable strings e.g. strings of alphanumeric and punctuation characters . In these examples the set of static strings may include a set of human readable strings i.e. as opposed to strings of machine readable instructions . Additionally or alternatively extraction module may parse the malware sample for more specific expressions e.g. extraction module may parse the malware sample for file paths . In some examples extraction module may search for static strings in certain locations of the malware sample e.g. extraction module may search for and extract static strings from a resource section of the malware sample . As will be described in greater detail below once a static string has been identified in a malware sample one or more of the modules described herein may record that the malware sample contained the static string.

In some examples extraction module may apply a function to a portion of the malware sample to derive a static string. For example a malware sample may include a static string such as a path name represented in a compressed format. In this example extraction module may decompress the static string e.g. to represent the static string in ASCII format .

The set of static strings may include a variety of strings. For example the set of static strings may include a dynamic link library DLL name e.g. a DLL used by the malware sample an application programming interface API identifier e.g. a name of an API used by the malware sample a section name e.g. a functionless name for a section of an executable file a file name and or a file path e.g. for a file accessed by the malware sample a service identifier e.g. a string identifying a service used by the malware sample a process identifier e.g. a string identifying a process used by the malware sample an Internet address e.g. a uniform resource locator accessed by the malware sample or promoted by the malware sample a resource address a registry entry e.g. a string to be entered into a configuration database for an operating system a globally unique identifier e.g. a string used as a unique identifier for an object or resource such as a class in a DLL a database entry etc. a class identifier e.g. a CLSID that identifies a component object model class a string in a resource section e.g. a resource section of a PORTABLE EXECUTABLE file a batch file command e.g. a script command to be executable by a command interpreter of an operating system a packer specific string e.g. a string left by software for compressing a self extracting executable file a compiler specific string e.g. a string left by a compiler used for the malware an installer specific string a package specific string version information and or a digital signature.

Returning to at step one or more of the systems described herein may cluster the set of malware samples based on the set of static strings present in each malware sample. For example at step clustering module may as part of computing system in cluster set of malware samples based on the set of static strings present in each malware sample present in the set of malware samples . Upon completion of step exemplary method in may terminate.

Clustering module may perform step in a variety of ways. For example clustering module may cluster the set of malware samples based on the percentage of static strings shared between malware samples. Clustering module may generally use any appropriate statistical analysis machine learning and or clustering technique to cluster the set of malware samples. In order to apply static string incidence data to clustering clustering module may create a vector for each malware sample in the set of malware samples. For example clustering module may create a vector for each malware sample such that each dimension in the vector indicates whether the malware sample includes a corresponding string. For example the vector may be of a fixed length representing the number of different static strings to be considered in the clustering process with each dimension in the vector corresponding to a specific static string. In this example clustering module may set a dimension in a vector for a malware sample to 1 if the malware sample includes the corresponding static string and to 0 if the malware sample does not include the corresponding static string.

In some examples clustering module may cluster the set of malware samples using a streaming clustering technique. For example clustering module may identify a set of clusters and sequentially add malware samples to the set of clusters. For example clustering module may for each malware sample in the set of malware samples in sequence identify a candidate cluster in the set of clusters that corresponds most strongly with the malware sample based on the set of static strings present in the malware sample. Clustering module may then add the malware sample to the candidate cluster.

In some examples clustering module may identify a minimum correlation threshold for adding a malware sample to an existing cluster in the set of clusters. In these examples clustering module may determine that no cluster in the set of clusters meets the minimum threshold with respect to the malware sample e.g. the minimum correlation threshold may be 0.6 and the strongest correlation between the malware sample and an existing cluster may be 0.4 . Clustering module may accordingly identify a new cluster in the set of clusters as the candidate cluster. For example clustering module may create a new cluster for the malware sample.

As detailed above by sequentially clustering malware samples the various systems and methods described herein may efficiently cluster a set of malware samples e.g. with less than quadratic time and space complexity relative to the size of the set of malware samples .

As illustrated in at step one or more of the systems described herein may identify a cluster of malware samples within a set of malware samples. For example at step clustering module may as part of computing system in identify a cluster within clusters .

Clustering module may perform step in any suitable manner. For example clustering module may identify the cluster of malware samples by reading a data structure representing the cluster. In some example clustering module may identify the cluster of malware samples in the process of identifying each cluster of malware samples in turn.

At step one or more of the systems described herein may analyze a subset of malware samples in the cluster to identify at least one common property. For example at step clustering module may as part of computing system in analyze a subset of malware samples in the cluster in clusters to identify at least one common property.

Clustering module may perform step in any suitable manner. For example clustering module may scan each malware sample in the subset for an instruction or sequence of instructions in common e.g. a sequence of instructions used to access a network . In some examples the common property may include a behavioral property. As used herein the term behavioral property may refer to any property of a malware sample that may affect the state of a computing system and or one or more devices in communication with the computing system. In these examples clustering module may analyze the subset of malware samples by identifying one or more behavioral properties of the subset of malware samples. For example clustering module may run each of the malware samples in the subset of malware samples in a virtual environment to ascertain the behavioral properties of each malware sample.

Clustering module may determine that a property present in the subset of malware samples is a common property to the subset of malware samples using any suitable criteria. For example clustering module may identify the common property by identifying a property common to all malware samples in the subset of malware samples. In another example clustering module may identify the common property by identifying a property common to a predetermined percentage of the malware samples e.g. a statistically significant percentage of the malware samples given the size of the subset .

At step one or more of the systems described herein may ascribe the common property to at least one malware sample that is in the cluster but not in the subset. For example at step clustering module may as part of computing system in ascribe the common property to at least one malware sample in the cluster in clusters . Upon completion of step exemplary method in may terminate.

Clustering module may perform step in any suitable manner. For example clustering module may ascribe the common property to the malware sample by ascribing the common property to the cluster. For example clustering module may draw an inference that every malware sample in the cluster likely attempts to access a network because the majority of malware samples in the subset of malware samples included a sequence of instructions to do so. Clustering module may accordingly associate the common property with the cluster and or the malware samples in the cluster in a database.

As detailed above by analyzing a subset of a cluster and applying the analysis to the cluster the various systems and methods described herein may more efficiently ascribe traits to malware samples and reduce time and computing resources used for analyzing malware samples.

As illustrated in at step one or more of the systems described herein may identify a cluster of malware samples within a set of malware samples. For example at step clustering module may as part of computing system in identify a cluster in clusters .

Clustering module may perform step in any suitable manner. For example clustering module may identify the cluster of malware samples by reading a data structure representing the cluster. In some example clustering module may identify the cluster of malware samples in the process of identifying each cluster of malware samples in turn.

At step one or more of the systems described herein may generate a signature capable of identifying malware samples in the cluster. For example at step clustering module may as part of computing system in generate a signature capable of identifying malware samples in a cluster in clusters . Upon completion of step exemplary method in may terminate.

Clustering module may perform step in a variety of ways. For example clustering module may generate the signature capable of identifying malware samples in the cluster by isolating common portions of malware samples in the cluster and generating a signature based on the common portions. In some examples clustering module may generate the signature to be capable of identifying each and every malware sample in the cluster. Additionally or alternatively clustering module may generate the signature to be capable of identifying a certain percentage of malware samples in the cluster or to optimize the number of malware samples identified while taking false negatives and or false positives as constraints by e.g. generating a signature to identify as many malware samples in the cluster as possible without generating too many false positives on benign samples .

As detailed above by clustering malware samples based on static strings that the malware samples have in common the systems and methods described herein may reduce the time and resources required to analyze large sets of malware samples. Furthermore by generating a generic signature to describe a cluster of malware samples these systems and methods may reduce the number of signatures necessary to provide anti malware protection potentially reducing the resources needed to propagate store and use signatures. Additionally these systems and methods may efficiently cluster malware samples to minimize the computational complexity necessary to cluster a set of malware samples.

The various systems and methods described herein may be deployed in a variety of ways. For example all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein. For example processor may perform and or be a means for performing either alone or in combination with other elements one or more of the identifying clustering creating adding analyzing ascribing determining and or generating steps described herein. Processor may also perform and or be a means for performing any other steps methods or processes described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation random access memory RAM read only memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an input output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an ISA PCI PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure . In certain embodiments memory controller may perform and or be a means for performing either alone or in combination with other elements one or more of the steps or features described and or illustrated herein such as identifying clustering creating adding analyzing ascribing determining and or generating.

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface . I O controller may be used for example to perform and or be a means for performing either alone or in combination with other elements one or more of the identifying clustering creating adding analyzing ascribing determining and or generating steps described herein. I O controller may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation SCSI host adapters USB host adapters IEEE 1394 host adapters SATA and eSATA host adapters ATA and PATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution. In certain embodiments communication interface may perform and or be a means for performing either alone or in combination with other elements one or more of the identifying clustering creating adding analyzing ascribing determining and or generating steps disclosed herein. Communication interface may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device. In at least one embodiment input device may perform and or be a means for performing either alone or in combination with other elements one or more of the identifying clustering creating adding analyzing ascribing determining and or generating steps disclosed herein. Input device may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

In certain embodiments storage devices and may be used for example to perform and or be a means for performing either alone or in combination with other elements one or more of the identifying clustering creating adding analyzing ascribing determining and or generating steps disclosed herein. Storage devices and may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium. The phrase computer readable medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable media include without limitation transmission type media such as carrier waves and physical media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. CD or DVD ROMs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an application specific integrated circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a wide area network WAN a local area network LAN a personal area network PAN or the Internet.

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent network attached storage NAS devices configured to communicate with servers and using various protocols such as NFS SMB or CIFS.

Servers and may also be connected to a storage area network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network . Accordingly network architecture may perform and or be a means for performing either alone or in combination with other elements one or more of the identifying clustering creating adding analyzing ascribing determining and or generating steps disclosed herein. Network architecture may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for analyzing malware.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules described herein may transform a computing system into a computing system for clustering and or analyzing malware samples. As another example one or more of the modules described herein may transform a set of malware samples into a clustered set of malware samples.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

