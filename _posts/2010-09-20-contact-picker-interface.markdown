---

title: Contact picker interface
abstract: An interface for identifying one or more contacts is used to access and provide contact information to one or more interested parties or applications in a controlled manner. Various criteria can be used to identify which contacts will be presented to a user and how they will be presented in such a way as to facilitate access to the corresponding contact information. An API is used to handle and pass contact information on to requesting applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08407600&OS=08407600&RS=08407600
owner: Microsoft Corporation
number: 08407600
owner_city: Redmond
owner_country: US
publication_date: 20100920
---
The present application is a continuation of U.S. application Ser. No. 12 195 214 filed Aug. 20 2008 and entitled Contact Picker Interface which is a continuation of U.S. application Ser. No. 10 845 464 filed May 13 2004 and entitled Contact Picker Interface U.S. Pat. No. 7 418 663 issued Aug. 26 2008 which is a continuation in part application of U.S. application Ser. No. 10 324 746 filed Dec. 19 2002 and entitled Contact Picker U.S. Pat. No. 7 313 760 issued Dec. 25 2007. The foregoing patents and patent applications are incorporated herein by reference.

The present invention relates to user interface menus in computers and electronic devices and more particularly to methods systems and computer program products for obtaining and displaying desired contact information in computer applications.

The term contact as described herein generally refers to any person group organization business household or other type of identifiable entity. The term contact information as defined herein generally refers to any information that corresponds to a contact and that may be considered relevant for identifying contacting accessing corresponding or communicating with the contact. In the context of the present application contact information is used by an application to perform a desired function such as for example sending an email initiating a telephone call accessing a website initiating a gaming session performing a financial transaction and so forth. Non limiting examples of contact information include names aliases telephone numbers email addresses home addresses instant messaging IM addresses and web addresses. Contact information can also refer to other types of information such as the status of a contact. For example information indicating a contact is currently online or on a telephone line may also be broadly considered as contact information.

Many applications require contact information. Examples of some applications that require contact information include email applications network gaming applications instant messaging applications telephone and telephony applications Internet applications financial applications word processing applications and business management applications.

Applications that require contact information typically provide interfaces and menus for entering the desired contact information within one or more type in lines. Type in lines generally comprise an input field configured to receive text characters that comprise the desired contact information. For example an email interface will typically include type in lines for receiving the email addresses of the intended email recipients. Contact information can normally be typed directly into the appropriate type in lines hence the name.

Some interfaces are also configured to automatically populate a type in line with desired contact information which is obtained from a directory corresponding to the particular application. For example email applications typically include interface menus for looking up the email addresses of the contacts that are stored within the email contact directory. Likewise a telephony application typically includes interface menus for looking up and accessing the telephone numbers of the contacts stored in the telephony contact directory. This search functionality provided by some interfaces is useful for helping to identify and select contact information that has either been forgotten or that is undesirably too long for manual entry.

Although existing interfaces for obtaining contact information are useful for their intended purposes their utility is somewhat limited because they are specifically catered for a particular application. e.g. Email search interfaces are configured to obtain email addresses telephony search interfaces are configured to obtain telephone numbers etc. Furthermore the vast array of different interfaces each having its own unique characteristics has complicated the task of learning how to utilize the interfaces to search for and obtain the desired contact information. Requiring each application to create a separate directory also reflects an inefficient expenditure of time and resources.

The present invention is directed to improved methods systems and corresponding computer program products and interfaces for obtaining desired contact information.

According to one aspect of the invention an interface displays a list of expected contacts that are most likely to be selected by a user whenever focus input is directed at a type in line or another input object requiring contact information. Focus input may comprise a pointer hovering over the type in line or any other input that would indicate a user wishes to populate the type in line with contact information. Focus input can also be directed over an image or other object from which a contact picker dialog or interface can be generated to display a list of contacts for selection.

The list of contacts can be obtained from a single contact information directory associated with a particular application as well as from a plurality of contact information directories that can be accessed by the interface and corresponding modules of the invention. As described herein various criteria can be used to identify which contacts will be presented to the user and how they will be presented as described herein.

When an expected contact is selected the desired contact information that is appropriate for the current application and that corresponds to the expected contact is automatically entered into the type in line and handed to the application programmatically. For example the selection of an expected contact in an email application will automatically populate the type in line with the appropriate email address or a friendly name that comprises a link to the email address. It will be appreciated that the applications hosting the interface can specify the contact information that is required. The appropriate contact information is obtained from any number of directories that are searched by the user interface. The hosting applications can also specify required characteristics for a valid contact selection. For example the hosting application can specify via an API to only show contacts having a predetermined combination of required characteristics or contacts from a particular directory. Some examples of code that can be implemented by such an API are provided below.

According to another aspect of the invention if a user doesn t select one of the expected contacts the user can begin typing desired contact information directly into the type in line thereby causing the interface to search through the one or more contact information directories for any unexpected contacts having contact information matching the input entered by the user. When only a single match is identified by the search the type in line is automatically populated with the remaining portion of the contact information that matches the user input. When a plurality of unexpected contacts are discovered that each have contact information matching the user input they are displayed in a list for user selection. When the search fails to identify any matching contacts the user interface displays additional options for searching for the desired contact information.

According to another aspect of the invention a contact having multiple values associated with a desired property can be displayed different manner than contacts having only a single value associated with the desired property. For example with reference to an email application a contact having multiple available email address values can be displayed or highlighted in a different manner than contacts having only a single email address. The user can then select a highlighted contact for example to view all of the available options that can be selected for automatic entry into a type in line.

According to yet another aspect of the invention the interface displays a list of related contacts associated with a selected contact thereby enabling a user to select any number of related contacts so that their contact information can also be automatically entered into the appropriate type in line s .

Additional features and advantages of the invention will be set forth in the description which follows and in part will be obvious from the description or may be learned by the practice of the invention. The features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

The present invention is directed to improved methods systems and corresponding computer program products and interfaces for obtaining and displaying desired contact information from one or more contact information directories. The embodiments of the present invention may comprise or be performed with a special purpose or general purpose computer including various computer hardware as discussed in greater detail below.

Embodiments within the scope of the present invention also include computer readable media for carrying or having computer executable instructions or data structures stored thereon. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer. By way of example and not limitation such computer readable media can comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to carry or store desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. When information is transferred or provided over a network or another communications connection either hardwired wireless or a combination of hardwired or wireless to a computer the computer properly views the connection as a computer readable medium. Thus any such connection is properly termed a computer readable medium. Combinations of the above should also be included within the scope of computer readable media. Computer executable instructions comprise for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions.

Although not required the invention will be described in the general context of computer executable instructions such as program modules being executed by computers in network environments. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Computer executable instructions associated data structures and program modules represent examples of the program code means for executing steps of the methods disclosed herein. The particular sequence of such executable instructions or associated data structures represents examples of corresponding acts for implementing the functions described in such steps.

Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations including personal computers hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by local and remote processing devices that are linked either by hardwired links wireless links or by a combination of hardwired or wireless links through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing system in the form of a conventional computer including a processing unit a system memory comprising computer readable media and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help transfer information between elements within the computer such as during start up may be stored in ROM .

The computer may also include a magnetic hard disk drive for reading from and writing to a magnetic hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to removable optical disk such as a CD ROM or other optical media. The magnetic hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage of computer executable instructions data structures program modules and other data for the computer . Although the exemplary environment described herein employs a magnetic hard disk a removable magnetic disk and a removable optical disk other types of computer readable media for storing data can be used including magnetic cassettes flash memory cards digital versatile disks Bernoulli cartridges RAMs ROMs and the like.

Program code means comprising one or more program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into the computer through keyboard pointing device or other input devices not shown such as a microphone joy stick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface coupled to system bus . Alternatively the input devices may be connected by other interfaces such as a parallel port a game port or a universal serial bus USB . A monitor or another display device is also connected to system bus via an interface such as video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers and printers.

The computer may operate in a networked environment using logical connections to one or more remote computers such as remote computers and . Remote computers and may each be another personal computer a server a router a network PC a peer device or other common network node and typically include many or all of the elements described above relative to the computer although only memory storage devices and and their associated application programs and have been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN that are presented here by way of example and not limitation. Such networking environments are commonplace in office wide or enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the local network through a network interface or adapter . When used in a WAN networking environment the computer may include a modern a wireless link or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing communications over wide area network may be used.

During use the computing system utilizes a user interface to display desired contact information at the display device. The functionality of the user interface to display desired contact information is enabled by various computer modules such as user interface module remote store interface module schema module conflict resolver module and communication module each of which will now be described.

The user interface module includes sufficient computer executable instructions for operably displaying a user interface at the display device and for responding to user input entered at the user interface. The remote store interface module includes sufficient computer executable instructions for searching and processing contact information stored at remote devices such as remote device . Remote device may be a remote computer or server containing contact information.

The schema module contains sufficient computer executable instructions for mapping contact information into categories and classifications that can be recognized by the user interface for display on the display device . The schema module is useful for enabling contact information from remote stores to be organized according to a single unifying schema. The schema module may also be used to map and identify contact information stored in local stores such as storage media . The schema module also correlates the properties of the contacts and their contact information e.g. phone number office number group memberships and so forth for enabling sophisticated searching and querying of the contact information.

The conflict resolver module includes sufficient computer executable instructions for comparing disparate contact information and for determining which of the contact information is most accurate and appropriate for a given application based on instructions received from the API of a given application. The resolver module can also do fuzzy matching so as to identify similar data that is not exactly the same. For example the resolver module can enable matching of the names John and Jon. This is useful for performing searches as generally alluded to below. Conflict resolver module also monitors and determines what contact information is most likely to be expected or used by a user such as for example based on the past use of the contact information. Accordingly the conflict resolver module may utilize space on a storage medium such as storage media for tracking use of contact information.

The communication module includes sufficient computer executable instructions for enabling communication between the various modules as well as the display device the remote device and the storage media of the remote device and computing system . In particular the communication module enables the modules to access and process contact information that is stored in one or more contact information directories that may be stored locally and remotely.

The present embodiment illustrates three contact information directories and that correspond to different applications. For example directory may correspond to an email application and directory may correspond to a telephony application. It will be appreciated that each directory and will include information that is application specific e.g. the email application directory will have email addresses . The directories and may also include additional information that is not application specific e.g. the email application directory may include the telephone numbers of certain contacts . It will be appreciated that the invention extends to embodiments utilizing and accessing any number of contact information directories.

The first act of the illustrated method includes receiving a focus input directed at an input object such as a type in line act . Focus input may include for example tabbing a prompt into the type in line or hovering a pointer e.g. a mouse pointer over the type in line. Upon receiving the focus input directed at the type in line the method includes an act of displaying a filtered list of expected contacts comprising a list of contacts that are most likely to be selected by a user. The determination as to what contacts are most likely to be selected by a user can be based on various criteria including but not limited to the frequency of selecting particular contacts the last selected contacts network or geographic proximity of the contact compatibility of the contact s communication devices and so forth. Any criteria used to identify the expected contacts can be resolved by the conflict resolver module as mentioned above.

The criteria used to identify the expected contacts can also include an implicit aging property or attribute. For example the criteria can be based on temporal information such as but not limited to the frequency of selection the time of last selection and so forth. In other words a contact can become less likely to be selected by a user the longer the associated contact has not been selected.

Other criteria can also be used to determine the likelihood a contact will be selected. For example in a photo viewer application one might be interested in associating a contact with the image of a person in a photo. Accordingly for such an application the likelihood of selection criterion can be based on non textual characteristics or attributes such as the facial characteristics identified by an image mapping program. In particular likelihood of selection criterion can be based on facial similarities such that the system can automatically suggest a contact whose facial characteristics are strongly correlated with a person in a photograph for example.

To support such embodiments it will be appreciated that the contact information directories described above can include repositories of image maps and other non textual characteristics and attributes that can be accessed by the remote store interface module .

In other embodiments the criteria used to determine the likelihood a contact will be selected can also be used to filter or organize the list of contacts that are displayed to the user in a particular order. For example the displayed list of contacts can be organized by placing the contacts that have the highest likelihood of selection at the top of the list. It will be appreciated however that other structured orders and sequences for listing the contacts can also be used.

The displayed lists of contacts as described herein can also be controlled by the application hosting the contact picker interface. In particular the applications hosting the interface can specify any number or combination of required characteristics a contact must possess in order to be listed by the contact picker. For example the hosting application can specify via an API to only show contacts who are online to only show contacts with phone numbers to only show contacts who reside in a particular region to only show contacts having particular software installed on their computing systems or to only show contacts having a predetermined combination of required characteristics including but not limited to those listed above. In this manner the contact picker can effectively filter the list of the displayed contacts.

The list of expected contacts may include any number of expected contacts and in any predefined order. According to one embodiment the list of expected contacts includes a list of no more than seven contacts. The list of expected contacts can be arranged in alphabetical order in order of most frequent use in order of most common use or any other predefined or random order. The displayed order of contacts can also be controlled entirely or in part on the likelihood of any selection criteria as described above.

In some circumstances one or more contacts identified in the list of expected contacts can correspond to multiple values for the same property. For example a single contact can have different email addresses including a work email address a school email address a personal email address etc. In such circumstances with no loss of generality said contact can be displayed multiple times once for each property value. Additionally or alternatively the contact can also be highlighted or displayed in another distinct manner that indicates to the user that multiple values of the required property are present. The user can then view the multiple values by selecting the contact or by moving focus to the contact.

In one embodiment or example a user can click a mouse prompt over the contact object to view the various values associated with the contact and to select the desired contact information to be supplied to an application. It will be appreciated that when multiple values are associated with a single contact the corresponding list of values associated with the contact can be arranged in any desired order including but not limited to an order based on the likelihood of selection as generally described above with reference to organizing the list of displayed contacts.

When one of the listed contacts is selected such as with the click of a mouse pointer or with other selection input act the contact information corresponding to the selected contact which is appropriate for the particular application is inserted into the type in line act . What is considered appropriate contact information is generally application specific and corresponds to information that is required to perform a desired function with the application. For example the appropriate contact information for an email application may include the email address of a contact that is necessary for sending an email message. The appropriate contact information may also be specified according to other criteria such as by the directory from which the contact information is obtained and so forth.

According to one embodiment the applications specify what contact information is required by the applications. For example if an application requires an email address then the application will specify to the user interface that the appropriate contact information comprises email addresses so that they can be obtained and displayed by the user interface accordingly. It will be appreciated however that the user interface can also be configured with security mechanisms to prevent the application from obtaining contact information that is not required by the application.

Although the previous example is provided with respect to email functionality it will be appreciated that the scope of the invention extends to other embodiments in which the contact information is utilized by other application to enable different functionality. For example other applications may utilize the contact information to initiate a telephony session initiate a telephone call initiate a network connection initiate a gaming session access a website perform a financial transaction send material goods via postal mail and so forth.

It will also be appreciated that it is not necessary for the actual contact information utilized by the application to populate the type in line. In particular the type in line may be populated with friendly names or other characters and objects that that link or point to the actual contact information utilized by the application. For example in the email context the type in line may be filled with the contact s friendly name linking to an email address rather than the contact s actual email address.

The contacts listed in list are associated with the selected contact by some relationship determined by the schema module and conflict resolver module of . An example of a relationship that may exist between a selected contact and the listed related contacts may include any association made previously between the selected contact and the one or more related contacts. For example the fact that the selected contact was emailed at the same time as one of the related contacts may establish a suitable relationship. Relationships can also be established by virtue of having been mapped into the same classification or group by the schema module. For example two contacts may be associated by belonging to the same group family business organization geographic location and so forth. A suitable relationship may also be drawn from a previous association made between the contacts in the type in line . e.g. a previous email listing all of the related contacts. 

If a user does not select one of the listed contacts the user may begin typing or otherwise entering the desired contact information directly into the type in line. Manually entered input is referred to herein as alternative input. Upon receiving alternative input act the method of the invention includes the step for finding one or more unexpected contacts containing the desired contact information step . Step can include any corresponding acts suitable for finding an unexpected contact. According to one embodiment step includes a combination of corresponding acts and .

The first corresponding act of step includes searching stores for contacts matching the user input act . This generally includes searching one or more contact information directories in one or more storage media for desired contact information that matches the alternative input entered by the user. The number of storage media stores that are searched and the order in which they are searched may be modified to accommodate any desired purpose. For example it may be desired to first search a local store having a contact information directory that pertains to the current application prior to searching other stores although this is not necessary.

Upon finding only a single unexpected contact that has desired contact information matching the alternative input the method of further includes the act of populating the type in line with the remaining portion of the desired contact information act . This is shown and described below in more detail with specific reference to .

Upon finding a plurality of unexpected contacts that each have contact information matching the alternative input the method further includes the act of displaying an alternative list of at least some of the unexpected contacts act . This is shown and described below in more detail with specific reference to .

Upon failing to find an unexpected contact having contact information matching the alternative input the method further includes the act of displaying additional search options for obtaining the desired contact information act . This is shown and described below in more detail with specific reference to .

If one of the unexpected contacts is selected by the user then the type in line is automatically populated with the appropriate and corresponding contact information of the selected contact. Alternatively if the unexpected contact corresponds with more than one appropriate contact information option then the plurality of contact information options can be displayed prior to populating the type in line . For example in the present embodiment the contact Judd Filmore has two email addresses that were discovered during the search. Therefore both of the email addresses are displayed for selection. Once an email address is selected it populates the type in line . Although this previous example has been given with reference to unexpected contacts it will be appreciated that this functionality of displaying available contact information options also extends to expected contacts listed in list of . The invention also extends to embodiments in which the available contact information options provide different types of contact information. For example an application that enables both email and telephony functionality from a may simultaneously provide both email address information as well as telephone numbers for selection.

Attention is now directed to to illustrate how the interface automatically populates the type in line with the remaining portion of the contact information that matches the portion of contact information entered by the user act . In the present embodiment two names are entered within the type in line namely John Doe and Victor Smith. The first name was selected from list of . Upon selecting John Doe from the list table appeared as described above in reference to . However list disappeared when the user entered alternative input comprising the letters Vic . After entering the characters Vic the type in line is automatically populated with the remaining portion of the desired contact information comprising the characters tor Smith which corresponds with and matches the alternative input entered by the user. According the combination of the remaining portion and the alternative input entered by the user comprise the entirety of the desired contact information. In this example the interface only populates the remaining portion of the type in line once it is determined that only a single contact has contact information matching the alternative input entered by the user. For example this auto complete function would not be performed after entering only the letters v or vi if there was another contact named Vivien who had the same two first letters as Victor so that both matched the user input.

If no contact is discovered during the search having contact information matching the alternative input entered by the user then the interface displays additional search options for finding the desired contact information. This act may be performed automatically or only upon receiving a user request to access a menu containing the additional search options act . For example the buttons and may be displayed in any of the lists and to provide the user a means for providing the menu of additional search options.

When a listed directory is selected then the dialog will display the contacts contained in that directory. For example the dialog is currently displaying the contacts of the My Contacts directory. To help scroll through the contacts the dialog may include a scrolling bar as shown. It will be appreciated that such a scrolling bar may also be utilized with any of the other lists described herein. The dialog may also include type down functionality within a given list such that typing a few letters will automatically scroll the list to items beginning with the typed letters.

The dialog also includes a list of filters that can be used to obtain a list of contacts defined by a filter. The filters may apply to individual contact information directories or to a plurality of contact information directories. For example the name filter may identify all available contacts by name from a single directory identified in list . Alternatively the name filter may cumulatively identify all available contacts by name from every directory the interface has access to. Other non limiting examples of filters that may be used with the interface include location filters that can be used to identify contacts associated by a geographic or network location and group filters that can be used to identify contacts associated by groups or organizations. Filters may also be customized to identify contacts from a particular application directory such as contacts identified in an Outlook email application. Additionally ISVs can add filters and or directories to search for the desired contact.

If the user is unable to find a contact with any of the searching objects described the user interface may present the user with an Add contact object which will link the user to a menu for adding a new contact to a desired directory such as the My Contacts directory. However the interface and modules required for adding a new contact are not described herein.

Attention will now be directed to embodiments for creating and applying a contact picker dialog to a type in line or other desired object such that it can be used to help a user select a desired contact.

Once the Contact Picker Dialog is created the following code can be used display a contact picker dialog interface which will display a list of contacts for user selection along with their contact information. In other words it will be appreciated that in some embodiments contact information can be displayed with the displayed list of contacts and prior to a selection being made of the corresponding contacts.

The Contact Picker Dialog that will be created using the code in the previous examples allows the user to select multiple contacts to be batched together in multiple requests. It will be appreciated however that there are simpler forms of the Contact Picker Dialog control that can also restrict the number of contacts or properties that can be returned. For example the following code snippet creates a Contact Picker Dialog that allows the user to select only one contact and returns that contact s display name and telephone number to the appropriate application 

From the perspective of an application programming interface developed for obtaining contact information according to the invention a function call or request is generated for a contact picker dialog or interface by an application in response to a user input directing focus to an object such as a type in line that is displayed by the application. The API then utilizes appropriate computer executable instructions such as the code shown above to generate the contact picker dialog. During the generation of the contact picker dialog appropriate contact repositories can also be queried by the API to identify a list of contacts that are likely to be selected by the user as described above along with the corresponding contact information to be displayed by the dialog.

The identified contacts are then displayed with or without the contact information which will be utilized by the application. Upon receiving a user selection of a displayed contact the API then passes the correspondingly appropriate contact information on to the application. The correspondingly appropriate contact information is the contact information that will be used by the application to perform a desired function e.g. initiate a call send an email etc as specified by the application.

In embodiments where the contact information is not displayed with the contact the selection of a contact prompts the API to identify and display the contact information related to the selected contact. Thereafter contact information that is selected by the user is passed on to the application.

It will be appreciated however that the foregoing examples of the API and code corresponding to the contact picker dialog are merely illustrative and should not therefore be construed as limiting the scope of the invention. To the contrary various different types of code can be implemented by programming interfaces to enable the methods of the invention for obtaining displaying and providing desired contact information.

Furthermore although many of the examples provided herein are directed to email interface applications the invention also extends to other applications including but not limited to telephony and telephone applications network gaming applications financial applications time management applications information kiosk applications internet applications word processing applications facsimile and telecopy applications design applications image and photo applications and so forth. Furthermore even though many of the embodiments shown and described above illustrate interfaces displaying only a limited number of contacts and contact information it will be appreciated that the interfaces may be modified to display any desired number of contacts and any variety of corresponding contact information.

It will also be appreciated that although many of the embodiments described above relate to providing a listing of contacts by name the list of contacts may also include rich contact objects e.g. images that can be used to ascertain information about the listed contacts. By way of example and not limitation each listed contact may be displayed with a corresponding rich tile image that displays certain attributes and that links to other information.

In summary the present invention provides methods systems and computer program products including user interfaces or dialogs for obtaining and displaying contact information. The interfaces of the invention can be used in various applications to search for and display contact information from a variety of disparate contact information directories. Although many examples are provided with respect to providing contact information when focus input is directed at a type in line that the scope of the invention extends to embodiments in which focus input is directed to other input objects such as fields cells images and so forth.

The described embodiments are therefore to be considered in all respects only as illustrative and not restrictive. In particular the present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. Accordingly the scope of the invention is indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

