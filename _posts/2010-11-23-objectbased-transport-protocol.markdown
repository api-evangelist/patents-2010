---

title: Object-based transport protocol
abstract: Methods and apparatuses are provided that facilitate providing an object-based transport protocol that allows transmission of arbitrarily sized objects over a network protocol layer. The object-based transport protocol can also provide association of metadata with the objects to control communication thereof, and/or communication of response objects. Moreover, the object-based transport protocol can maintain sessions with remote network nodes that can include multiple channels, which can be updated over time to seamlessly provide mobility, increased data rates, and/or the like. In addition, properties can be modified remotely by network nodes receiving objects related to the properties.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08862769&OS=08862769&RS=08862769
owner: QUALCOMM Incorporated
number: 08862769
owner_city: San Diego
owner_country: US
publication_date: 20101123
---
The following description relates generally to network communications and more particularly to providing an object based transport layer protocol.

Networks allow communication between a plurality of nodes that are interconnected by wireless and or wired media. Typical network architectures comprise multiple communication layers that facilitate communicating between the plurality of nodes. In one example a network architecture can comprise media layers e.g. a physical layer data link layer network layer etc. host layers e.g. transport layer session layer presentation layer application layer etc. and or the like that the nodes can utilize for communicating. For example the media layers can facilitate transmitting low level data over physical media such as a network cable wireless signal and or the like and the host layers can interpret the low level data for presenting to an application. In an example the transport layer in Internet architecture can include a transmission control protocol TCP which provides ordered delivery of a stream of bytes related to upper layers from one node on a network to another node on the network.

At a network layer for example internet protocol IP can be utilized to establish connection between the nodes e.g. via a router or a direct connection and route data among the nodes. For example the IP layer can generate packets of data from a TCP layer and include one or more headers in the packets to facilitate routing. In addition TCP can manage the IP connection ensuring reliable delivery of the ordered stream of bytes. For example TCP can also provide retransmission mechanisms for packets that are not properly received flow control to limit a transmission rate for reliability and congestion control to protect the network from receiving incoming data above a threshold level. In another example a transport layer can be a user datagram protocol UDP which is less robust than TCP offering no retransmission flow control or congestion control.

Enhancements to network communications have allowed network devices to simultaneously leverage various network technologies to provide multiple connections to the Internet or another network. In this regard a network device at any given point in time can have one or multiple different Internet or other network connections through different networks and or network architectures . For example a network device can have one or more third generation partnership project 3GPP connections along with one or more WiFi connections which can be utilized to access similar or different Internet content from one or more disparate network devices. In addition network devices can simultaneously receive data over the Internet or another network for multiple applications and a user of the network device can switch among the applications rendering requested data no longer necessary at least for the time being . TCP UDP and other transport layer protocols are ill equipped to optimize such functionality.

The following presents a simplified summary of one or more aspects in order to provide a basic understanding of such aspects. This summary is not an extensive overview of all contemplated aspects and is intended to neither identify key or critical elements of all aspects nor delineate the scope of any or all aspects. Its sole purpose is to present some concepts of one or more aspects in a simplified form as a prelude to the more detailed description that is presented later.

In accordance with one or more embodiments and corresponding disclosure thereof various aspects are described in connection with providing an object based transport protocol in network communications. For example the object based transport protocol allows for communication of arbitrarily sized objects between one or more network nodes. In addition for example the objects can have associated metadata parameters such as priority transmission deadline etc. which can be utilized to control communication of the objects. In one example a receiver of the objects can control communication thereof by a sender by utilizing the metadata parameters. Moreover the object based transport protocol can manage sessions for communicating the objects over a set of physical connections to one or more networks that can be modified over time to provide transparency with respect to the physical connections.

According to an example a method of providing an object based transport layer in network communications is illustrated that includes receiving one or more objects from an application for communicating to a remote network node and receiving metadata for the one or more objects from the application. The method also includes selecting a session for communicating the one or more objects to the remote network node and providing the one or more objects to a network protocol layer for transmitting over at least one network interface related to a channel of the session based at least in part on a priority indicated in the metadata.

In another aspect an apparatus for providing an object based transport layer in network communications is provided that includes at least one processor configured to obtain one or more objects from an application for communicating to a remote network node and obtain metadata for the one or more objects from the application. The at least one processor is further configured to determine a session for communicating the one or more objects to the remote network node and communicate the one or more objects to a network protocol layer for transmitting over at least one network interface related to a channel of the session based at least in part on a priority indicated in the metadata. In addition the wireless communications apparatus includes a memory coupled to the at least one processor.

In yet another aspect an apparatus for providing an object based transport layer in network communications is provided that includes means for receiving one or more objects from an application for communicating to a remote network node and means for receiving metadata for the one or more objects from the application. The apparatus further includes means for providing the one or more objects to a network protocol layer for transmitting over at least one network interface related to a channel of a selected session based at least in part on a priority indicated in the metadata.

Still in another aspect a computer program product is provided for providing an object based transport layer in network communications that includes a computer readable medium having code for causing at least one computer to obtain one or more objects from an application for communicating to a remote network node and code for causing the at least one computer to obtain metadata for the one or more objects from the application. The computer readable medium further includes code for causing the at least one computer to determine a session for communicating the one or more objects to the remote network node. In addition the computer readable medium further includes code for causing the at least one computer to communicate the one or more objects to a network protocol layer for transmitting over at least one network interface related to a channel of the session based at least in part on a priority indicated in the metadata

Moreover in an aspect an apparatus for providing an object based transport layer in network communications is provided that includes an object receiving component for obtaining one or more objects from an application for communicating to a remote network node and an object properties associating component for receiving metadata for the one or more objects from the application. The apparatus further includes an object communicating component for providing the one or more objects to a network protocol layer for transmitting over at least one network interface related to a channel of a selected session based at least in part on a priority for the one or more objects indicated in the metadata.

To the accomplishment of the foregoing and related ends the one or more aspects comprise the features hereinafter fully described and particularly pointed out in the claims. The following description and the annexed drawings set forth in detail certain illustrative features of the one or more aspects. These features are indicative however of but a few of the various ways in which the principles of various aspects may be employed and this description is intended to include all such aspects and their equivalents.

Various aspects are now described with reference to the drawings. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of one or more aspects. It may be evident however that such aspect s may be practiced without these specific details.

As described further herein an object based transport protocol is provided that allows network nodes to prioritize communication of objects associate deadlines for receiving the objects manage multiple channels to other network nodes over which objects can be transmitted and or the like. In one example the object based transport protocol additionally defines one or more sessions that can each manage one or more of the multiple channels and communication of objects thereover. In this regard the object based transport protocol is an improvement over other transport protocols at least as it allows transmission of arbitrarily sized objects an enforceable priority associated with the objects a transmit deadline for the objects to avoid transmitting objects no longer needed management of multiple connections transparent to upper layers e.g. which provides mobility as well as possibly improved data rates from multiple connections etc.

As used in this application the terms component module system and the like are intended to include a computer related entity such as but not limited to hardware firmware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a computing device and the computing device can be a component. One or more components can reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers. In addition these components can execute from various computer readable media having various data structures stored thereon. The components may communicate by way of local and or remote processes such as in accordance with a signal having one or more data packets such as data from one component interacting with another component in a local system distributed system and or across a network such as the Internet with other systems by way of the signal.

Furthermore various aspects are described herein in connection with a terminal which can be a wired terminal or a wireless terminal. A terminal can also be called a system device subscriber unit subscriber station mobile station mobile mobile device remote station remote terminal access terminal user terminal terminal communication device user agent user device or user equipment UE . A wireless terminal may be a cellular telephone a satellite phone a cordless telephone a Session Initiation Protocol SIP phone a wireless local loop WLL station a personal digital assistant PDA a handheld device having wireless connection capability a computing device or other processing devices connected to a wireless modem. Moreover various aspects are described herein in connection with a base station. A base station may be utilized for communicating with wireless terminal s and may also be referred to as an access point a Node B evolved Node B eNB or some other terminology.

Moreover the term or is intended to mean an inclusive or rather than an exclusive or. That is unless specified otherwise or clear from the context the phrase X employs A or B is intended to mean any of the natural inclusive permutations. That is the phrase X employs A or B is satisfied by any of the following instances X employs A X employs B or X employs both A and B. In addition the articles a and an as used in this application and the appended claims should generally be construed to mean one or more unless specified otherwise or clear from the context to be directed to a singular form.

The techniques described herein may be used for various wireless communication systems such as CDMA TDMA FDMA OFDMA SC FDMA and other systems. The terms system and network are often used interchangeably. A CDMA system may implement a radio technology such as Universal Terrestrial Radio Access UTRA cdma2000 etc. UTRA includes Wideband CDMA W CDMA and other variants of CDMA. Further cdma2000 covers IS 2000 IS 95 and IS 856 standards. A TDMA system may implement a radio technology such as Global System for Mobile Communications GSM . An OFDMA system may implement a radio technology such as Evolved UTRA E UTRA Ultra Mobile Broadband UMB IEEE 802.11 Wi Fi IEEE 802.16 WiMAX IEEE 802.20 Flash OFDM etc. UTRA and E UTRA are part of Universal Mobile Telecommunication System UMTS . 3GPP Long Term Evolution LTE is a release of UMTS that uses E UTRA which employs OFDMA on the downlink and SC FDMA on the uplink. UTRA E UTRA UMTS LTE and GSM are described in documents from an organization named 3rd Generation Partnership Project 3GPP . Additionally cdma2000 and UMB are described in documents from an organization named 3rd Generation Partnership Project 2 3GPP2 . Further such wireless communication systems may additionally include peer to peer e.g. mobile to mobile ad hoc network systems often using unpaired unlicensed spectrums 802.xx wireless LAN BLUETOOTH and any other short or long range wireless communication techniques.

Various aspects or features will be presented in terms of systems that may include a number of devices components modules and the like. It is to be understood and appreciated that the various systems may include additional devices components modules etc. and or may not include all of the devices components modules etc. discussed in connection with the figures. A combination of these approaches may also be used.

Referring to illustrated is an example system that facilitates communicating between nodes in a network using an object based transport protocol. System comprises network nodes and which can be client and server nodes respectively in a network. For example network nodes and can each be a mobile device such as a UE a computer and or substantially any node that can communicate in a wired or wireless network. Moreover there can be additional nodes between network nodes and to facilitate communicating such as one or more routers gateways firewalls etc. and or wireless network components such as one or more base stations relay nodes etc. These components are not depicted for ease of explanation however network nodes and in this regard can communicate in substantially any network technology and or across multiple network technologies. In one example network node can simultaneously communicate with network node through a 3GPP interface and a WiFi interface over different physical network connections with various components between the network nodes and to facilitate communicating across the multiple networks.

According to an example network node can include an application that can leverage one or more host or media layer protocols to communicate with an application at network node and vice versa. For example applications and can be applications services objects widgets or substantially any executable code at network nodes and . In addition network nodes and include object based transport protocols and that can communicate objects from applications and respectively over network layer protocols and respectively. In one example network layer protocols and can utilize an IP or similar protocol. For example application can formulate a request for content from network node e.g. from application . In an example application can leverage an application programming interface API or similar interface offered by object based transport protocol to create one or more objects related to the request for content. In this regard for example application can specify metadata to be associated with the request and or the responding data such as a priority transmission deadline response properties one or more parameters regarding the object and or the like. Object based transport protocol in this example can associate the metadata with one or more objects related to the request for content. Based at least in part on the metadata object based transport protocol can select one or more channels over which to send the object comprising the request for content to network node .

As described for example object based transport protocol can manage multiple sessions that can each comprise one or more channels over one or more network interfaces to a given end host such as network node . In addition object based transport protocol can provide the object related to the request for content to an appropriate session for network node . In one example object based transport protocol can provide the object once it is received in full and can provide the object regardless of order e.g. unless in order delivery is requested by the application as described below . The session in object based transport protocol for network node can order objects according to priority in related metadata and can leverage network layer protocol for sending the object to network node . Thus in an example network node can receive the object from network node over network layer protocol e.g. in one or more packets or other network framed units created by network layer protocol . Network layer protocol can provide the object e.g. as the one or more packets to object based transport protocol . Object based transport protocol can reframe the object e.g. where packets are received and deliver the object to application once received in full from network node . Thus application can process the object and determine the request for content in the object and the metadata associated therewith.

In an example application can fulfill the request for content which can include communicating one or more response objects to network node streaming the one or more response objects and or the like. In addition application can set a priority for the response objects a transmission deadline for any potential response to the one or more response objects other metadata for the response object such as identifiers etc. which can be specified in the response properties of the request for content object via object based transport protocol . Similarly in an example application can set response properties for the one or more response objects using the object based transport protocol . As described above object based transport protocol can provide the one or more response objects to one or more sessions for communicating to network node over one or more channels according to a priority or other parameters specified in related metadata. In this example as described the one or more sessions can leverage network layer protocol to communicate the one or more data objects e.g. as one or more packets to network node .

In addition for example object based transport protocol can determine a transmission deadline is reached for one or more objects before or during transmitting to network node based at least in part on the metadata for the one or more objects. In this example object based transport protocol can remove the one or more objects from related sessions cease transmitting the one or more objects and or the like. In addition application can modify one or more properties related to response data of the request for content such as priority. In this example object based transport protocol can communicate a message to network node via network layer protocol to network layer protocol to update object properties. Network layer protocol as described can provide the message to object based transport protocol and object based transport protocol can appropriately modify properties related to response data for the request for content. In this regard for example application modifies the priority for the response data to affect transmission thereof.

Moreover for example object based transport protocol can cancel transmission of an object by communicating a cancel message to network node as described. Similarly object based transport protocol can cancel reception of an object by communicating a related message to network node . In addition object based transport protocol can cancel transmission of an object to network node based at least in part on passing of a related transmission deadline as described. Moreover where object based transport protocol receives two objects with the same data from network node and another network node object based transport protocol can merge the objects to accelerate reception. In yet another example since objects can be stored at object based transport protocol during transmission object based transport protocol can pause and resume transmission of objects from network node or a related session e.g. based at least in part on a request received from application by issuing a corresponding message to object based transport protocol . Moreover object based transport protocol can instruct object based transport protocol to pause one or more sessions from transmitting objects.

Turning to an example object based transport protocol in accordance with aspects described herein is illustrated. For example the object based transport protocol can be implemented within a network node e.g. a client or server node such as a UE end computer server or substantially any node that can communicate in a wireless network. In addition the object based transport protocol can be implemented to interface with other protocols within the network node e.g. an IP protocol or other network layer protocol an application protocol or other host or media layer protocols to provide communications of objects between network nodes as described herein. The object based transport protocol can include an object layer that handles one or more objects to be communicated with a remote network node a session layer that establishes one or more sessions for communicating objects over one or more channels and a channel layer that maintains the one or more channels with the remote network node and or one or more additional remote network nodes.

Moreover for example object layer can comprise an object coding protocol that encodes objects for transmitting to the remote network node e.g. utilizing an erasure code or other encoding algorithm and an object control protocol that communicates metadata related to the objects such as priority deadline and or other parameters e.g. identification information etc. . In addition session layer can comprise a session control protocol that establishes maintains and removes sessions for transmitting objects to the remote network node adds removes channels to from a session etc. and a connection control protocol that maps the sessions to one or more channels as described. Furthermore channel layer can comprise a packet framing protocol that encapsulates the encoded objects into network layer packets for transmission over the one or more channels and a congestion control protocol that provides congestion control at each of the one or more channels to improve throughput thereof.

According to an example an application layer or other upper host layer can utilize the object based transport protocol to communicate objects to a remote network node e.g. through an API offered by object based transport protocol and or the like . As described for example the object based transport protocol can allow the application or other upper host layer to at least one of prioritize the objects for communication to the remote network node and or responding objects being communicated from the remote network node associate and enforce a deadline for communicating objects to from the remote network node and or the like. Thus object layer can maintain a state for each object to facilitate enforcing priority storing partially received objects until a remaining portion of the object is received and or the like. In this example object based transport protocol can receive objects e.g. from an application and object coding protocol can encode the objects using one or more encoding algorithms such as an erasure code or other code to increase reliability of communicating the object thus generating one or more forward error correction FEC symbols for the object.

In addition object control protocol can associate metadata such as priority transmission deadline object tag or identifier etc. with the objects where the metadata can be at least one of received from the application or other upper host layer e.g. through an API specified by or otherwise negotiated with a receiver of the encoded object and or the like. In addition for example object layer can create object coding protocol data units PDU from the FEC symbols that can include one or more headers related to the object layer . Moreover for example object layer can provide the object coding PDUs and or metadata related to the corresponding objects to session layer for prioritized transmission.

In this example session layer can establish and maintain a session with the remote network node as described. The session can comprise one or more channels over one or more network interfaces for communicating network layer packets to the remote network node. In addition object coding PDUs from multiple applications can be provided to a session e.g. by object layer for communicating to the remote network node. In addition session layer can add and remove channels from given sessions which can each correspond to a connection over an interface to the remote network node. In another example session layer can establish and maintain a security association with a remote network node that enables addition of one or more channels to the remote network node while verifying the remote network node is the same as for at least another channel in the session. In this example session layer can include the security association when establishing additional channels with the remote network node and the remote network node can verify the security association in determining whether to allow establishment of the channel.

Session control protocol can thus establish maintain and remove sessions add or remove channels to from a session and or the like for example. Connection control protocol can establish and remove channels with one or more remote network nodes using one or more network interfaces connected to one or more hosts. In the above example session layer can associate the one or more object coding PDUs to the session established with the remote network node by session control protocol . For example this can be based at least in part on an identifier associated with the remote network node that is specified with the object coding PDU e.g. in the metadata in a header associated with the encoded object or otherwise . For a given session for example session control protocol can order object coding PDUs in the session according to priority transmission deadline and or other properties in the metadata associated with the object coding PDUs.

Session control protocol can transmit the one or more object coding PDUs over one or more channels associated to the session by connection control protocol . In this regard for example session control protocol can maintain a session while modifying channels of the session using connection control protocol to maintain transparency of the session. Thus one or more hosts can be modified in a communication path to the remote network node and session control protocol can update one or more channels of the session in view of the modification without exposing the modification to the application e.g. or even to object layer . In one example this can allow for mobility of a related network node.

Moreover in this example channel layer can manage the one or more channels with the remote network node over one or more network interfaces. Channel layer can handle congestion control packet framing network address translation NAT and firewall traversal and or the like for the one or more channels. For example packet framing protocol can convert the one or more object coding PDUs into one or more packets e.g. and or PDUs for transmission over a channel e.g. using one or more network layer protocols . Congestion control protocol can determine whether the channel can handle transmitting at least a portion of the one or more packets according to the congestion control process. Congestion control for example can refer to the ability of a channel to control flow of communication over a related interface so as not to overload the interface and a congestion control process can provide such functionality at a related channel. Channel layer can then provide the one or more packets to the network layer protocol for transmission to the remote network node. In one example the channel layer can utilize transmission control protocol TCP to accomplish the packet framing congestion control etc.

Similarly for example channel layer can receive one or more packets from the remote network node e.g. in response to the object sent thereto over a network interface. Packet framing protocol can translate the one or more packets into one or more object coding PDUs e.g. using a similar framing as for the transmitted packets and provide the object coding PDUs to session layer over the channel related to the network interface and the remote network node. Connection control protocol can obtain the object coding PDUs and session control protocol can associate the object coding PDUs a session e.g. based on the channel over which the packets are received . Session layer can communicate the object coding PDUs to the object layer . Object coding protocol can decode the object coding PDUs according to the encoding utilized for example and can provide the decoded object to a related application layer e.g. an application related to the session . The foregoing allows for various advantages over current transport protocols. For example application layers are provided some control over framing data. For example creating the object that will be transmitted over the object based transport protocol allows application layers to create arbitrarily sized objects e.g. objects that vary in size further specify parameters for communicating the object such as priority and expiration timer etc. as described.

Referring to an example communication system is shown that facilitates providing an object based transport protocol for communicating objects over a network. System comprises network nodes and that communicate with one another in a wired or wireless network. Though not shown network nodes and can communicate through one or more additional network nodes such as one or more gateways routers base stations other devices and or the like. Moreover the network nodes and can each be substantially any network node or endpoint such as a UE computer server etc. Network node can include an object based transport protocol as described herein to communicate with network node which can also have an object based transport protocol not shown .

Object based transport protocol can include for example a plurality of sessions and that utilize one or more network interfaces and of network node to communicate with network node . As described for example object based transport protocol can establish session for communicating with network node . In addition object based transport protocol can establish session and session for communicating with other network nodes not shown over one or more of the network interfaces and . Moreover as shown session and session can utilize interface and interface over channels and respectively for communicating with network nodes whereas session has a channel to interface and not interface . It is to be appreciated that complete meshing is possible in one example such that all sessions can have channels over all interfaces. In addition each session and can order objects within the session according to priority indicated in metadata for the objects.

In addition interface and interface can be substantially any network interface such as a 3GPP interface WiFi interface WiMAX interface LTE interface local area network LAN interface and or the like. As described for example object based transport protocol can receive one or more objects from an application for transmitting over the one or more sessions or . For example the application can identify network node to receive the object and object based transport protocol can associate the object with session based at least in part on identifying network node as associated with session . Thus object based transport protocol can place the object in session for transmission e.g. following encoding the object associating metadata with the object and or the like as described .

Object based transport protocol can transmit the object according to determining an interface sending opportunity at interface and or interface . For example interface and interface can have queues for outgoing packets which can be managed to ensure the interfaces are not overloaded. Thus when interface and or interface has room in its buffer for a maximum transmission unit MTU of data the interface has a sending opportunity. Each channel such as channels and can maintain congestion control as described. Thus when an interface sending opportunity occurs at an interface related to a channel e.g. interface for channel or interface for channel each channel can determine whether it can send data in accordance with its congestion control process. Based at least in part on this information a subset of sessions and can be determined as eligible for sending. For example if interface has an interface sending opportunity session and session can be identified in one example as being eligible for sending.

In addition however object based transport protocol can place one or more sessions on hold. This can be initiated by network node for example where network node prefers another session with another network node. For example network node can provide streaming data to network node but network node can switch from the streaming application to another application with another network node. In this case network node may wish to place session on hold so as not to receive data therefrom for at least a period of time. In this example object based transport protocol can consider a state of the sessions when determining whether the sessions are eligible for sending. Thus in the example above object based transport protocol can determine session as eligible for sending where session 1 is indicated as being in an on hold state.

In this example once object based transport protocol identifies the subset of sessions eligible for sending e.g. session and session in this example a session with the highest priority object among those eligible e.g. whose transmission deadline has not passed according to the metadata related to the object can utilize the interface sending opportunity. In this regard for example a unique object session and interface combination can be identified and data for the object can be sent through the interface. Where two or more eligible sessions have objects of the same or similar priority for example additional information can be analyzed to determine which session can utilize the interface sending opportunity e.g. a last session that was unable to use a interface sending opportunity a session with an earlier last transmission time and or the like .

In addition for example where the size of the object selected for transmission over the interface sending opportunity is smaller than an available MTU at the interface for the interface sending opportunity the session e.g. session from which the object is selected can transmit a portion of one or more additional objects in the interface sending opportunity. In another example another session with a different object of higher priority than the one or more additional objects such as session can transmit the different object during the interface sending opportunity. In one example any reference to sending or transmitting an object herein can include the foregoing process of determining sessions eligible during given interface sending opportunities and selecting a highest priority object from one or more of the sessions.

In one example object based transport protocol can provide a sending opportunity or instructions to transmit to session as described. In this example object based transport protocol can include an allowed size for transmitting over the related interface e.g. interface an estimated round trip time for the related channel e.g. channel and or the like. In an example session can deny the sending opportunity in which case object based transport protocol can offer the sending opportunity to a session with the next highest priority object such as session . In another example session and session can deny the sending opportunity. In this example session and or session can request the sending opportunity within object based transport protocol when needed to transmit data to network node e.g. where object based transport protocol provides additional objects to session or session where object based transport protocol indicates to resume a session previously placed on hold e.g. at the request of network node and or the like .

In addition network node can include an object based transport protocol that implements one or more sessions and or channels to one or more interfaces for communicating with network node as described. In this example network node can transmit response objects to network node by utilizing a connection with interface or interface which can accordingly forward the response objects to session . In addition as described above and further herein object based transport protocol can control one or more aspects of communication of response objects from network node e.g. using response data parameters in the corresponding request sending commands to network node regarding modifying parameters for the response objects and or the like .

In one example as described herein referring back to the network nodes and can be referred to as end points Object Transport OT Service Access Points SAP etc. For example an Object Transport Service Access Point is a logical point at which an application accesses the Object Transport service. For example there can be multiple types of OT Service Access Point. A Connectionless OT SAP sends objects to and receives objects from arbitrary remote Connectionless OT SAPs. A Connection Oriented OT SAP sends objects to and receives objects from a specific remote Connection Oriented OT SAP. This type of SAP can also be used to receive requests from a remote Connection Oriented OT SAP for establishment of a new local Connection Oriented OT SAP. A Multicast OT SAP sends objects to and receives objects from an IP Multicast group.

Moreover in a specific example implementation an OT Endpoint addresses a potential OT Service Access Point and is identified by a Host Identity OT Port pair where Host Identity is an identifier for an end host e.g. a Host Identity according to a Host Identity Protocol HIP and OT Port is an identifier for the OT Endpoint within that host. For example an HIP can be a host identification technology used in an IP network to differentiate between an end point identifier and locator. An OT Locator can be a network layer address e.g. IP address for an OT host. An OT Locator can be used to initiate communication with an OT Endpoint. The purpose of connection oriented SAPs for example is to provide applications such as applications and or with a context in which related objects can be handled. This can be useful when security is required by object based transport protocols and or as the security association can be created at the socket level and applies to the objects exchanged through that connection. For example sockets can be utilized to communicate between network nodes where the socket can be a TCP socket. Two modes of connection establishment can be provided in this example a normal mode where a connection is established immediately upon request and a lazy mode where connection establishment is delayed until data is to be sent. This allows data exchange and connection establishment to take place concurrently and can avoids the connection setup delay before data can be transferred.

Additionally for example the object properties as described previously e.g. priority transmission deadline etc. can be defined as follows in one specific example implementation.

Moreover for example object based transport protocol and in and object based transport protocol in can provide basic send and receive operations which operate at the level of objects as well as cancelling the sending or reception of an object. Object sending can be asynchronous whereas reception can be synchronous or asynchronous. In the asynchronous case an event notification mechanism is provided to notify the user of the following events a new object begins to arrive a new object has been completely received an object has been successfully delivered transport of an object has been cancelled by the sender an object deadline expired before it was received and or an object has been aborted due to insufficient memory at the receiver.

Referring back to the following is one specific implementation for the object based transport protocol . As described a plurality of network nodes can each comprise an object based transport protocol and can communicate with each other using the object based transport protocol. In the below description a sender can be a network node that transmits objects to a receiver another network node using the object based transport protocol.

In an example the object coding protocol can be implemented according to the following aspects. For example an object coding PDU as described above can comprise both object information and feedback information possibly for multiple objects. Object information can be carried in an object block and feedback information in a feedback block of the object coding PDU. In addition object coding protocol can identify objects by unsigned integer object identifiers allocated by each network node which can be communicated in object metadata. When object sending begins between network nodes for example the sender includes the local object identifier that it has allocated. Once the sender has exchanged object control protocol messages with the receiver then the sender has access to the receiver s identifier for the object which can then be used in object data packets. The use of the receiver s object identifier can simplify object lookup at the receiver. Object information such as object tag properties FEC object transmission information e.g. object size and the association with the object identifier can be communicated by the object control protocol to an object based transport protocol at the receiver. It is possible in one example that object reception can begin at the receiver before this object information is received.

In addition object control protocol can allow for communication of feedback between a sender and receiver. Feedback provides the sender with information about the progress of reception of an object at the receiver. This information can be used to determine when and how much additional data should be sent for an object. For small objects for example it can be desirable that feedback can be sent before the object information is received from the object control protocol . For this reason a symbol size can be coded within the object block of one or more object coding PDUs so that a count of received symbols can be made before receiving the FEC Object Transmission Information. This count can then be reported in the feedback. For large objects for example feedback can be communicated when reception of the object is nearly completed. For this reason once the FEC object transmission information is received and the object size is known a remaining number of symbols required can be reported.

According to one example the object coding PDU format can be defined as shown below. To support application layer framing two message formats are defined ObjectCodingHeader and ObjectCodingBody. An object coding PDU can include a ObjectCodingHeader message followed by zero or more ObjectCodingBody messages

For each object to be sent the object control protocol at the sender can maintain a count of outstanding symbols representing the number of symbols that remain to be sent for the object N and the time at which data was last sent for the object T. Objects to be sent are sorted in priority order within a session e.g. by session layer as described above . Objects of equal priority can be sorted in reverse order of the last transmission time for the object e.g. with the least recently transmitted object first . For each object being received the object control protocol at the receiver can maintain a count of the number of received symbols N the time at which data was last received T the time at which feedback was last sent for the object T the number of required symbols indicated in the last feedback N and or the like.

For example when a new object is provided for transmission by an application object control protocol can insert the object into the object ordering according to its priority. When notified of a sending opportunity for a session the object coding protocol can first identify whether feedback should be sent which can be based at least in part on one or more of the following determinations the object is complete and either no feedback indicating completion has been sent or feedback has been sent for a round trip time and data has been received for the object in the last round trip time the object is not complete and a round trip time has elapsed since feedback was last sent or the object is not complete data has been received for an object of lower priority since feedback was last sent and no feedback has been triggered by this rule for a round trip time. Where feedback is to be included for an object the number of remaining symbols for this object can be included in the object coding PDU if known. Where the number of remaining symbols for an object is not known because the FEC object transmission information has not been received then the number of received symbols can be included.

The sender then identifies the first object to be sent with N 0 and adds a number of symbols to the object coding PDU equal to the lesser of Nand the maximum number of symbols that will fit in the object coding PDU. Ncan be decremented by the number of symbols included in the PDU. If space remains in the object coding PDU then the procedure can be repeated for the next object with N 0. For each object that has N 0 the sender can maintain a timer from the time at which the last symbol was sent for this object T . If this timer expires then the number of outstanding symbols for the object can be increased.

On receipt of an object coding PDU the receiver first processes the feedback messages if any from the feedback block of the object coding PDU. For each feedback message the receiver can update the value of Nfor the object based on the received feedback information. The receiver then processes the object block or the object coding PDU. For each entry the receiver can identify the object based on the object identifier. If the object identifier is unknown a new object can created. The receiver stores the received symbols e.g. in a memory or data store in association with the object and identifies whether sufficient information has been received to recover the object.

Moreover for example the object control protocol can communicate metadata regarding one or more objects to from a disparate object control protocol of a remote network node to control delivery of one or more objects. For example the object metadata can include object ID object tag FEC object transmission information e.g. including object size object properties and or the like. For example the object ID can be a local identity of the object according to an unsigned integer as described previously the object tag can be an identifier generated by the sender the FEC object transmission information can include details regarding receiving the FEC related to the object coding PDU and the object properties can include priority transmission deadline etc. The object control protocol for example can have one message type which proposes values for some or all of the data items associated with an object. When the values in a received message match the last proposed values for example exchange of messages can cease otherwise exchange of messages can continue until the sender and receiver reach agreement on the data values.

In addition for example the messages can be idempotent meaning that repeated receipt of the same message can have the same or similar effect as the message being received once. Moreover the message can be atomic such that either all or none of the state changes proposed in a message are enacted. Moreover each message can be targeted at a single object. The instance can be identified by local and remote object IDs. The remote object ID is not provided in the first message sent for a given instance this message establishes the state instance at the remote peer . In addition messages can carry a sequence number and out of order messages are silently discarded. There is a separate sequence number space for each object instance. Each network node can retain the sequence number of the earliest message sent containing the current desired state. Furthermore repeated messages can be sent whenever the desired state has not been confirmed by a network node. Also to identify race conditions the highest sequence number received from the remote peer can be echoed in every message sent. To resolve race conditions one node is designated as having a master token.

On local change of properties at the sender or receiver the Desired properties can be set to the new property values and the proposed send time can be set to Null. On a sending opportunity a message for changing properties can be sent to a remote network node if at least one following condition holds the Desired properties is not Null and either the Proposal send time is Null or the current time is greater than the Proposal sent time plus twice the Round trip time or the conformation flag is true. If a message is to be sent the message fields can be set by object control protocol as follows 

On receipt of an object control protocol message the receiver can first identify the target object. If the message contains a remote object identifier field this can be used to directly look up the object. If an object with this identifier does not exist the message can be silently discarded. Otherwise the message can be processed as described. If the message does not contain a remote object identifier then the node can search for any objects with Remote Object Identifier value equal to the local object identifier field of the message. If such an object is found the message can be processed as described. If no such object is found then a new object can be created with state values initialized as follows 

If the local sequence number field of the received message is less than or equal to the Last Remote Sequence Number value then the message can be silently discarded. Otherwise the Last Remote Sequence Number can be set equal to the local sequence number field. If the remote sequence number field of the received message is less than the Last Local Sequence Number value and this is the sending node then the message can be silently discarded. Furthermore if the Desired properties is not Null and the properties field of the message matches the Desired properties value then the Current properties can be set to the Desired properties value the Desired properties can be set to Null and the confirmation flag shall be set to true. Otherwise the node can determine if the proposed properties are acceptable. If so the Current properties can be set to the properties field the Desired properties can be set to Null and the Confirmation Flag can be set to true. If the proposed properties are not acceptable the node can determine the closest properties values that are acceptable. The Desired properties can be set to this value and the Proposal sent time shall be set to Null.

Moreover for example session control protocol in one example can be implemented according to the following aspects. Session Establishment can be achieved by a host identity protocol basic exchange. As a result of this exchange the host identities of both network nodes of the session are established and keying material is generated. The initial establishment of the session implicitly validates the channel over which the session establishment took place. New channels can be added to or removed from the session using the host identity protocol UPDATE procedure.

In addition for example connection control protocol can be implemented similarly to the object control protocol and in one example the object control protocol can be implemented to include connection establishment and management in place of a connection control protocol . In one example the connection control protocol can additionally or alternatively include the following aspects.

For each object for example the connection control protocol can maintain the following state information 

On creation of a new connection at the initiating endpoint the connection state information can be initialized as shown below 

On local change of state e.g. connection closed the Desired state can be set to the new state and the Proposed send time can be set to Null. On a sending opportunity a message can be sent by a network node to another network node if at least one following condition hold the Desired state is not Null and either the Proposal send time is Null or the current time is greater than the Proposal sent time plus twice the Round trip time or the Conformation Flag is true. If a message is to be sent the message fields can be set as follows 

On receipt of a Connection Control message the receiver network node can first identify the target connection. If the message contains a remote connection identifier field this can be used to directly look up the connection. If a connection with this identifier does not exist the message can be silently discarded. Otherwise the message can be processed. If the message does not contain a remote connection identifier then the node can search for any connections with Remote Connection Identifier value equal to the local connection identifier field of the message. If such a connection is found the message can be processed. If no such connection is found then a new connection can be created with state values initialized as follows 

If the local sequence number field of the received message is less than or equal to the Last Remote Sequence Number value then the message can be silently discarded. Otherwise the Last Remote Sequence Number can be set equal to the local sequence number field. If the remote sequence number field of the received message is less than the Last Local Sequence Number value and this network node is not the initiating network node for the connection the message can be silently discarded. If the Desired state is not Null and the state field of the message matches the Desired state value the Current state can be set to the Desired state value the Desired state can be set to Null and the Confirmation flag can be set to true. Otherwise the network node can determine if the proposed state is acceptable. A state of CLOSED or REJECTED can always be accepted by the network node. If so the Current state can be set to the state field the Desired state can be set to Null and the Confirmation flag can be set to true. If the proposed state is not acceptable the node can specify a state value that is acceptable such as REJECTED in response to a request for the OPEN state. The Desired state can be set to this value and the Proposal sent time can be set to Null.

Moreover according to an example the packet framing protocol can be implemented to include the multiple PDUs of other layers e.g. object coding PDU object control PDU connection control PDU and or the like in a packet for transmitting between network nodes. In addition packet framing protocol can add one or more headers to the packet such as a host identity protocol header. In this regard a packet framing protocol at the remote network node can determine the various PDUs based at least in part on the packet framing and object coding protocol object control protocol connection control protocol etc. at the remote node can be utilized to process the PDUs.

Turning to an example network node is depicted that facilitates utilizing an object based transport protocol for communicating with one or more network nodes. As described network node can be substantially any node that communicates in a network such as a device UE computer server any node or network node mentioned herein and or the like. Network node can comprise an application that executes and communicates with an application executing at a disparate network node as described. Moreover network node can comprise an API and a corresponding object based transport protocol . For example the API can facilitate accessing the object based transport protocol by application .

According to an example API can allow application or one or more disparate applications to create one or more arbitrarily sized objects for transmitting over a network specify properties for the objects control aspects of communicating the objects and or the like. In addition API can allow application to specify parameters for connecting to a remote network node over a network e.g. using a socket and or the like. Thus application can implement function calls to the API to utilize the object based transport protocol to transport application layer objects to the remote network node.

In one example the API can have an implementation corresponding to the following aspects. The API can include multiple APIs including a data structures API for specifying a remote network node also referred to herein as an endpoint properties for an object etc. a socket API for managing a connection with the remote network node and an object API that facilitates managing communication of the object. In an example the API can be based on the sockets abstraction where a socket corresponds to an Object Transport Service Access Point described in examples above. After creation a socket can be bound to a local OT Port using the ot bind API call. In the case of connectionless sockets described above the socket can be used to send objects to arbitrary remote OT Endpoints or to receive objects from arbitrary Connectionless OT SAPs.

A connection oriented socket for example can be connected to a remote OT SAP by issuing a connect API call specifying a remote OT Endpoint. The OT Endpoint can be specified by providing either an OT Host Identity an OT Locator or both. Normal and lazy connection modes can be provided as described above. By default connection oriented sockets do not provide in order delivery of objects. A socket option can be provided however to enable in order delivery. In addition the listen and accept functions are provided to accept new connections on a connection oriented socket.

Sockets can be identified on the API by socket descriptors. An analog of the operating system poll function for network node is provided by the ot poll function shown below which can be used for asynchronous programming. ot poll can be provided with the pollfd array to detect events on operating system descriptors and additionally a new otpollfd array for detecting events on Object Transport socket descriptors at network node . Objects can be identified on the API by object descriptors.

Several of the data objects managed by OT are referred to using the OTHandle data type. Access to the data within the underlying object is achieved through function calls the OTHandle structure itself is opaque to the application. Data objects managed by OT including OTEndpoint OTHostIdentity OTLocator OTObject OTProperties can be reference counted. Reference counts can be increased and decreased using the ot retain and ot release functions on the OTHandle object. Functions which return objects of these types return the object with a single reference allocated to the application and therefore the application can call ot release on such objects to ensure correct deallocation of the resources. In addition an OTHandle can be Null in which case it does not refer to any object. The function ot is null can be used to test this condition. The function ot null handle returns a null OTHandle which can be used to initialize OTHandle data types.

In one example the data structures API of API can be implemented according to the following aspects. An OTEndpoint object can identify an OT Endpoint either by a Host Identity OT Port pair or by an OT Locator OT Port pair or both. When OT communication is initiated an initial OT Locator can be provided. During establishment of the communication the Host Identity of the endpoint at the provided OT Locator can be discovered. Subsequent communication between hosts may or may not use the OT Locator provided during establishment and in general the application is not made aware of changes in the set of OT Locators used for communication. As noted above OT Locators can be IPv4 or IPv6 addresses and as such the standard struct sockaddr structure can be used to represent a Locator OT Port pair. OT Host Identities can be Host Identity Protocol identities and as such the standard struct sockaddr structure can be also used to represent a Host Identity OT Port pair where it is the 128 bit Host Identity Tag that is included in the structure. OTEndpoint structures can be initialized using the ot endpoint function. The endpoint identity and the endpoint locator can be queried.

In addition OTProperties structures can be managed using the ot initproperties ot getproperty ot setproperty and ot clearproperty functions.

Moreover in one example a socket API of the API can be implemented according to the following aspects. Sockets are created using the ot socket function 

Moreover for example a socket which has been bound to a local OT Port can be connected to a remote endpoint using the ot connect function. If the socket is a connectionless socket this call specifies the peer with which the socket is to be associated. This address is that to which datagrams are to be sent and the only address from which datagrams are to be received. If the socket is connection oriented this call indicates that a connection to another socket should be established. In this case there are two connection modes OT CONNECT NORMAL and OT CONNECT LAZY as described above.

A socket which has been marked as a listener maintains a queue of incoming connection requests. The ot accept function is used to obtain a new connection oriented socket for the first request on the queue or to wait for a new request if the queue is empty.

Socket options can be read and written using the ot setsockopt and ot getsockopt calls. The supported socket options can be for example 

Socket events can be detected using the ot poll function. This function allows events to be detected across multiple OT sockets as well as Operating System sockets file descriptors as with the POSIX poll function . The ot poll function uses the pollfd and otpollfd data structures defined as follows 

In one example the object API of API can be implemented according to the following aspects. The ot send and ot sendto functions are used to initiate sending of an object on a connectionless or connection oriented socket respectively. These functions do not block if notification is required of the completion of the sending of the object then either use ot poll and or ot pop event to detect the object complete event on the socket.

The ot recv and ot recvfrom functions can be used to receive an object on a connection oriented or connectionless socket respectively. Each socket maintains a queue of received objects and if an explicit object descriptor is not specified these functions return the first completely received object in the socket receive queue or block until an object is available if the queue is empty. If an explicit object descriptor is specified these functions block until that object is available cancelled or expired. For asynchronous operation use the select and ot pop event functions to detect reception of an object.

In addition the ot obj pop event function can be used to obtain the next event related to a specified object. Note that if two threads wait simultaneously on a socket with ot pop event or ot poll and on an object then only the thread waiting on the object will be notified when an event occurs.

The ot getinfo can be used to obtain information about an object including the object tag length and properties.

Properties for an object may be changed whilst it is being sent or received using the ot setproperties function.

In some communication models it can occur that two objects being received on the same or different sockets are identified as containing the exact same data. In this case receipt of the objects can be accelerated by merging the two objects into one using the ot merge function. Following this function the two object descriptors become synonymous.

Objects identified by object descriptors have a lifetime associated with the process within which they are created until they are explicitly stored using the ot freeze function. The ot thaw function can be used to retrieve a previously frozen object and the ot discard function can be used to discard a frozen object.

Thus API allows application to frame objects for communicating over object based transport protocol . For example application can determine the size of the objects and is not restricted to fixed length packets as with TCP. Moreover application can specify object properties such as priority transmission deadline response properties object tag etc. as described. In addition application can control transmission of objects from a remote network node to network node as described previously.

Referring to a network node is illustrated that facilitates transmitting objects to one or more remote network nodes using an object based transport protocol. Network node as described can be a device UE computer server substantially any node or network node described herein and or similar component or portion thereof that communicates with one or more remote network nodes. Network node can comprise an object receiving component for obtaining an object from an application or other protocol layer above an object based transport protocol layer an object properties associating component that receives and or correlates metadata with the object and an object communicating component that transmits the object over one or more network interfaces to a remote network node not shown . Network node can also comprise an optional object coding component that encodes at least a portion of the object or properties associated therewith an optional object decoding component that decodes one or more received objects and an object providing component that sends decoded objects to an application layer. In one example object receiving component object properties associating component object communicating component object coding component object decoding component and object providing component can be implemented as part of an object based transport protocol to provide functionality thereof as described herein.

According to an example object receiving component can receive objects from one or more applications at network node . In addition object properties associating component can receive properties tags etc. from the applications for correlating to the objects. In this regard as described the applications can frame the objects and determine priority transmission deadline similar response properties and or other metadata for associating with the objects as described. For example network node can implement an API that facilitates sending objects and related metadata to object receiving component and object properties associating component which can be utilized by the applications.

For example object communicating component can maintain one or more connection oriented sessions with one or more remote network nodes as described that facilitate communicating with the network nodes over one or more channels. In another example object communicating component can include one or more connectionless sessions that can be initialized and utilized for transmitting objects as received from an application. In either case for example object communicating component can select a session for the object e.g. and or related metadata for transmitting to a remote network node. Object communicating component can transmit the object to the remote network node.

For example transmitting the object at object communicating component can be based at least in part on determining a sending opportunity over one or more channels related to the session as described previously which can be based at least in part on detecting a sending opportunity for at least one network interface related to the one or more channels as described. Object communicating component can also determine the sending opportunity for the one or more channels based at least in part on determining that the priority indicated for the one or more objects is higher than different priorities of different objects in different sessions that have a channel to the at least one network interface e.g. and or that a transmission deadline specified in object metadata has not passed . Moreover as described object communicating component can begin analyzing congestion control for the one or more channels to determine whether the one or more channels are available for transmitting in determining the sending opportunity as described above. For example this can include determining whether the one or more channels are available for sending the one or more objects or whether congestion control over the one or more channels prevents such.

In addition for example the session whether connection oriented or connectionless can allow access to the remote network node. Moreover object coding component can encode the object related metadata properties related to one or more channels in the session and or the like. Thus as described object coding component can encode the object to an object coding PDU e.g. using an erasure code and or the like object metadata into an object control PDU and or channel properties e.g. connection state into a connection control PDU. In this example object communicating component can transmit the PDUs to the remote network node.

For example in any case object communicating component can frame the PDUs into one or more packets for communicating over one or more network layer protocols. In one example object communicating component as described can maintain a session with the remote network node and can manage channels for the session such that object communicating component can add delete or modify channels to one or more hosts. Thus for example where network node is a wireless network node object communicating component can allow for mobility thereof by modifying host channels for a session as network node travels over a wireless network. Thus object communicating component can maintain transparency of host switching through the session with the remote network node as described. In addition for example object communicating component can establish multiple channels with a remote network node over one or more hosts as described. In this example object communicating component can add channels to the remote network node by including a security association received from the remote network node e.g. over an initial channel therewith in a request to establish an additional channel with the remote network node as described.

In addition object communicating component can receive one or more packets from the remote network node in response to objects transmitted thereto. For example the packets can include response objects e.g. according to the response properties transmitted with the objects to the remote network node related encoded PDUs and or the like. Where PDUs are received for example object decoding component can decode the object and or related metadata according to the PDUs. In either case object providing component can communicate the objects to an application layer as described based at least in part on a channel over which the object or related PDUs is are received. In addition for example the received object can have metadata as well which can include an identifier of the object a tag etc. for early identification of the object e.g. for potential merging as described response properties which object communicating component can utilize in communicating any objects in response to the received object and or the like. Moreover for example object communicating component can transmit and or receive feedback regarding communications with the remote network node e.g. within one or more object coding PDUs and or the like as described.

Turning now to an example communication system is illustrated that facilitates communicating objects in among network nodes. System comprises network nodes and that can communicate objects according to aspects described herein. Network nodes and can each be a device UE computer server a node or network node described herein or substantially any node that communicates in a wired or wireless network. It is to be appreciated that network node can additionally comprise similar components as network node and vice versa to facilitate providing similar functionality. Moreover network nodes and can include object based transport protocols within which the described components are implemented.

For example network node can comprise an object communicating component that transmits and or receives objects to from a remote network node over a session an optional object properties specifying component that can indicate modification of properties associated with objects received from the remote network node and an optional object merging component that can receive and combine packets received from multiple network nodes to form one or more objects. Network node can include an object communicating component that transmits and or receives objects to from a remote network node in a session an optional object properties modifying component that updates properties of one or more objects being transmitted to the remote network node and an optional session state updating component that controls a state of one or more sessions for transmitting objects to the remote network node.

According to an example object communicating component can transmit objects to network node which can be received at object communicating component . In an example object communicating component can request content from network node by transmitting an object thereto. In addition object properties specifying component can associate response properties e.g. properties for responding objects in the request. Object communicating component can receive the request and object properties modifying component can set properties for objects related to responding to the request for content according to the response properties associated with the request for content. In one example object properties modifying component can transmit alternative object properties to object properties specifying component and vice versa to facilitate negotiating properties for responding objects as described. Object communicating component can transmit responding objects to network node according to a set of properties for the responding objects.

Moreover object properties specifying component can transmit an object to network node requesting modification of object properties while receiving objects from network node as described. In this example object communicating component can receive the object request modification of object properties and object properties modifying component can accordingly modify the properties transmit alternative properties to negotiate and or the like as described. In this regard in one example network node can modify priority of the objects being transmitted thereto by network node . Thus for example where an application requesting such objects closes or otherwise no longer needs to receive objects at a previously indicated priority network node can cause a change in priority to reduce the rate at which objects are received at network node . For example this can allow for increasing a receiving rate for other objects from network node or one or more other network nodes decrease power consumption required to receive and process objects and or the like.

Furthermore as described object properties specifying component can request modification of a state of a channel or session. In one example object properties specifying component can request that network node discontinue a session e.g. including placing a session on hold for a period of time. In this example object properties specifying component can indicate properties related to the session or a channel within the session e.g. in an object communicated by object communicating component . Once the properties are received session state updating component can appropriately modify a state of the session communicate alternative properties to network node to negotiate the state and or the like. For example where session state updating component places a session on hold the session can be ignored when considering sessions for a sending opportunity as described previously to cease transmitting objects from the session.

In yet another example object communicating component can receive requested objects from network node and another remote network node e.g. in a distributed implementation . In this regard object merging component detects whether objects received at object communicating component are for the same data e.g. based at least in part on properties or tags specified in the objects as described . Where objects for the same data object merging component can combine PDUs received for the objects from the multiple network nodes. As described the PDUs can be encoded using an erasure code thus object merging component can receive a number of erasure coded symbols in the PDUs from each network node and once a number of erasure coded symbols corresponding to the total number of symbols of the object are received network node can decode the object. Moreover for example object communicating component can multicast objects to network node and a plurality of other network nodes.

Referring to example methodologies relating to providing an object based transport protocol are illustrated. While for purposes of simplicity of explanation the methodologies are shown and described as a series of acts it is to be understood and appreciated that the methodologies are not limited by the order of acts as some acts may in accordance with one or more embodiments occur in different orders and or concurrently with other acts from that shown and described herein. For example it is to be appreciated that a methodology could alternatively be represented as a series of interrelated states or events such as in a state diagram. Moreover not all illustrated acts may be required to implement a methodology in accordance with one or more embodiments.

Referring to an example methodology is displayed that facilitates communicating objects using an object based transport protocol. At one or more objects can be received from an application for communicating to a remote network node. As described the objects can be framed by the application and can be of arbitrary size. At metadata for the one or more objects can be received from the application. For example the metadata can relate to a priority transmission deadline identifier or other aspect of the one or more objects. At a session can be selected for communicating the one or more objects to the remote network node. For example the session can be selected based at least in part on an association with the remote network node and the session can have one or more channels to the remote network node as described. At one or more objects can be provided to a network protocol layer for transmitting over at least one network interface related to a channel of the session. As described the one or more objects can be transmitted over the at least one network interface in a determined sending opportunity.

Turning to an example methodology is displayed that facilitates utilizing a transmission deadline specified for an object. At a transmission deadline of an object in a session can be retrieved from metadata related thereto. As described for example the transmission deadline can be specified by an application and associated with the object in the metadata. At it can be determined that the transmission deadline has passed e.g. based on comparing the transmission deadline to a current time . Thus at transmission of the object can be cancelled. This can include for example removing the object from the session modifying a status related to the object and or the like.

Referring to illustrated is an example methodology for modifying object properties based on a request from a remote network node. At a request to modify one or more properties of objects related to a request for content can be received from a remote network node. As described for example this request can be received as one or more objects. The one or more properties can relate to a priority transmission deadline etc. of one or more objects related to the request for content. In one example transmission of a portion of the objects can have already begun. At the one or more properties of one or more objects can be modified based at least in part on the request. This can include changing properties of objects in a session e.g. lowering a priority where an application is inactive for example. At the one or more objects can be transmitted according to the one or more properties. In another example the request to modify properties can relate to a session or channel thereof and at a session or channel state can be modified as described and at one or more objects can be transmitted or not transmitted according to the state modification.

Turning to an example methodology is shown that facilitates establishing multiple channels with a remote network node for communicating over an object based transport protocol. At a remote network node can be communicated with over one or more channels. As described the one or more channels can be part of a session to maximize throughput in the session. At a security association can be received from the remote network node over an initial channel. At the security association can be specified in a request for an additional channel from the remote network node over a different network interface. This allows the remote network node to verify the initial connection before allowing another connection for example.

Referring to an example methodology is depicted for merging objects where received from multiple sources. At object coding PDUs related to an object can be received from multiple network nodes. For example the object coding PDUs can be distinct erasure code symbols of an identical object e.g. which can be identified based at least in part on a related identifier or tag as described . At the object coding PDUs can be merged to increase a receive time thereof.

Turning to an example methodology is illustrated for modifying one or more properties of receiving objects from a remote network node. At switching from an application to a different application can be determined. For example the application can be receiving streaming data from a remote network node and the different application can request data from a different network node. Thus at a request can be transmitted to a remote network node to modify one or more properties of objects related to the application. The one or more properties for example can include a priority of the objects e.g. lower the transmit priority in view of switching to the different application so as not to receive as many objects related to the application etc. At objects related to the application can be received according to the one or more properties as described.

It will be appreciated that in accordance with one or more aspects described herein inferences can be made regarding determining a session to receive a sending opportunity over a network interface and or the like as described. As used herein the term to infer or inference refers generally to the process of reasoning about or inferring states of the system environment and or user from a set of observations as captured via events and or data. Inference can be employed to identify a specific context or action or can generate a probability distribution over states for example. The inference can be probabilistic that is the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher level events from a set of events and or data. Such inference results in the construction of new events or actions from a set of observed events and or stored event data whether or not the events are correlated in close temporal proximity and whether the events and data come from one or several event and data sources.

With reference to illustrated is a system that facilitates communicating over an object based transport protocol. For example system can reside at least partially within a base station mobile device computer server etc. It is to be appreciated that system is represented as including functional blocks which can be functional blocks that represent functions implemented by a processor software or combination thereof e.g. firmware . System includes a logical grouping of electrical components that can act in conjunction. For instance logical grouping can include an electrical component for receiving one or more objects from an application for communicating to a remote network node . As described objects can be framed by the application and can be of an arbitrary size. Further logical grouping can comprise an electrical component receiving metadata for the one or more objects from the application .

As described for example the metadata can include a priority of the object transmission deadline identifier tag and or the like. Moreover logical grouping can include an electrical component for providing the one or more objects to a network protocol layer for transmitting over at least one network interface related to a channel of a selected session based at least in part on a priority indicated in the metadata . As described electrical component can send the one or more objects in the session based at least in part on determining a sending opportunity for the session which can also be based on the priority of the one or more objects. For example in an aspect electrical component can include object receiving component etc. as described above. In addition for example electrical component in an aspect can include object properties associating component etc. as described above. Moreover in an example electrical component in an aspect can include object communicating component etc. as described.

Additionally system can include a memory that retains instructions for executing functions associated with the electrical components and . While shown as being external to memory it is to be understood that one or more of the electrical components and can exist within memory . In one example electrical components and can comprise at least one processor or each electrical component or can be a corresponding module of at least one processor. Moreover in an additional or alternative example electrical components and can be a computer program product comprising a computer readable medium where each electrical component or can be corresponding code.

Referring now to a wireless communication system is illustrated in accordance with various embodiments presented herein. System comprises a base station that can include multiple antenna groups. For example one antenna group can include antennas and another group can comprise antennas and and an additional group can include antennas and . Two antennas are illustrated for each antenna group however more or fewer antennas can be utilized for each group. Base station can additionally include a transmitter chain and a receiver chain each of which can in turn comprise a plurality of components associated with signal transmission and reception e.g. processors modulators multiplexers demodulators demultiplexers antennas etc. as is appreciated.

Base station can communicate with one or more mobile devices such as mobile device and mobile device however it is to be appreciated that base station can communicate with substantially any number of mobile devices similar to mobile devices and . Mobile devices and can be for example cellular phones smart phones laptops handheld communication devices handheld computing devices satellite radios global positioning systems PDAs and or any other suitable device for communicating over wireless communication system . As depicted mobile device is in communication with antennas and where antennas and transmit information to mobile device over a forward link and receive information from mobile device over a reverse link . Moreover mobile device is in communication with antennas and where antennas and transmit information to mobile device over a forward link and receive information from mobile device over a reverse link . In a frequency division duplex FDD system forward link can utilize a different frequency band than that used by reverse link and forward link can employ a different frequency band than that employed by reverse link for example. Further in a time division duplex TDD system forward link and reverse link can utilize a common frequency band and forward link and reverse link can utilize a common frequency band.

Each group of antennas and or the area in which they are designated to communicate can be referred to as a sector of base station . For example antenna groups can be designed to communicate to mobile devices in a sector of the areas covered by base station . In communication over forward links and the transmitting antennas of base station can utilize beamforming to improve signal to noise ratio of forward links and for mobile devices and . Also while base station utilizes beamforming to transmit to mobile devices and scattered randomly through an associated coverage mobile devices in neighboring cells can be subject to less interference as compared to a base station transmitting through a single antenna to all its mobile devices. Moreover mobile devices and can communicate directly with one another using a peer to peer or ad hoc technology as depicted. According to an example system can be a multiple input multiple output MIMO communication system.

Referring to in one aspect any of network nodes or e.g. FIGS. and may be represented by computer device . Computer device includes a processor for carrying out processing functions associated with one or more of components and functions described herein. Processor can include a single or multiple set of processors or multi core processors. Moreover processor can be implemented as an integrated processing system and or a distributed processing system.

Computer device further includes a memory such as for storing local versions of applications being executed by processor . Memory can include substantially any type of memory usable by a computer such as random access memory RAM read only memory ROM tapes magnetic discs optical discs volatile memory non volatile memory and any combination thereof.

Further computer device includes a communications component that provides for establishing and maintaining communications with one or more parties utilizing hardware software and services as described herein. Communications component may carry communications between components on computer device as well as between computer device and external devices such as devices located across a communications network and or devices serially or locally connected to computer device . For example communications component may include one or more buses and may further include transmit chain components and receive chain components associated with a transmitter and receiver respectively operable for interfacing with external devices. In addition for example communications component can leverage an object based transport protocol as described herein e.g. object based transport protocol in .

Additionally computer device may further include a data store which can be any suitable combination of hardware and or software that provides for mass storage of information databases and programs employed in connection with aspects described herein. For example data store may be a data repository for applications not currently being executed by processor .

Computer device may additionally include a user interface component operable to receive inputs from a user of computer device and further operable to generate outputs for presentation to the user. User interface component may include one or more input devices including but not limited to a keyboard a number pad a mouse a touch sensitive display a navigation key a function key a microphone a voice recognition component any other mechanism capable of receiving an input from a user or any combination thereof. Further user interface component may include one or more output devices including but not limited to a display a speaker a haptic feedback mechanism a printer any other mechanism capable of presenting an output to a user or any combination thereof.

In addition in the depicted example computer device can include an object receiving component an object properties associating component and an object communicating component as described above. Thus these components and can utilize processor to execute instructions associated therewith memory to store information associated therewith communications component to carry out operations on the object based transport layer and or the like as described. In addition it is to be appreciated that computer device can include additional or alternative components described herein.

The various illustrative logics logical blocks modules components and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration. Additionally at least one processor may comprise one or more modules operable to perform one or more of the steps and or actions described above. An exemplary storage medium may be coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. Further in some aspects the processor and the storage medium may reside in an ASIC. Additionally the ASIC may reside in a user terminal. In the alternative the processor and the storage medium may reside as discrete components in a user terminal.

In one or more aspects the functions methods or algorithms described may be implemented in hardware software firmware or any combination thereof. If implemented in software the functions may be stored or transmitted as one or more instructions or code on a computer readable medium which may be incorporated into a computer program product. Computer readable media includes both computer storage media and communication media including any medium that facilitates transfer of a computer program from one place to another. A storage medium may be any available media that can be accessed by a computer. By way of example and not limitation such computer readable media can comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also substantially any connection may be termed a computer readable medium. For example if software is transmitted from a website server or other remote source using a coaxial cable fiber optic cable twisted pair digital subscriber line DSL or wireless technologies such as infrared radio and microwave then the coaxial cable fiber optic cable twisted pair DSL or wireless technologies such as infrared radio and microwave are included in the definition of medium. Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and blu ray disc where disks usually reproduce data magnetically while discs usually reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer readable media.

While the foregoing disclosure discusses illustrative aspects and or embodiments it should be noted that various changes and modifications could be made herein without departing from the scope of the described aspects and or embodiments as defined by the appended claims. Furthermore although elements of the described aspects and or embodiments may be described or claimed in the singular the plural is contemplated unless limitation to the singular is explicitly stated. Additionally all or a portion of any aspect and or embodiment may be utilized with all or a portion of any other aspect and or embodiment unless stated otherwise.

