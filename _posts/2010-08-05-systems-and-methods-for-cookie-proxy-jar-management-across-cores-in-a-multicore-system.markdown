---

title: Systems and methods for cookie proxy jar management across cores in a multi-core system
abstract: The present solution is directed towards systems and methods for managing cookies by a multi-core device. The device is intermediary to a client and one or more servers. A first core of a multi-core device receives a response from a server to a request of the client through a user session. The response comprises a cookie. The first core removes the cookie from the response and stores the cookie in a corresponding storage for the session. The first core forwards the response without the cookie to the client. A second core then receives via a session, a second request from the client. The second core determines the identification of the first core as owner of the session from the second request. The second core then communicates to the first core a third request for cookie information for the session.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08484287&OS=08484287&RS=08484287
owner: Citrix Systems, Inc.
number: 08484287
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20100805
---
The present application generally relates to data communication networks. In particular the present application relates to systems and methods for cookie proxying in a multi core system.

A cookie is a string or text stored by a web browser of a client computer. The cookie can be used for authentication or for storing particular information such as site preferences and shopping cart content. A cookie which is also known as a web cookie browser cookie or HTTP cookie generally consists of one or more name value pairs containing bits of information. Often the cookies is sent by a server to a web browser executing on a client and then sent back unchanged by the browser each time the browser accesses the server.

In some instances clients connect to servers using secure network connections while other clients may utilize less secure network connections. Additionally in many network architectures clients and servers are connected through intermediaries such as proxies appliances firewalls gateways and other similar devices. The use of such intermediaries may have a negative affect on the efficiency and efficacy of cookies. Such variations in network configurations and network connections may created challenges for the clients and affect the services provided by the servers.

The present application is directed towards methods and systems for improving cookie operations in a multi core system. The present application describes methods and systems that improve performance and cookie management in a device with multiple core processors executing in parallel and intercepting HTTP transactions from various clients and servers often simultaneously.

In one aspect the present invention is related to a method for managing cookies by a multi core device. The method includes a device intermediary to a client and one or more servers. A first core of the multi core device receives via a session a response from a server to a request of the client. The response comprises a cookie. The first core removes the cookie from the response and stores the cookie in a corresponding storage for the session. The first core then forwards the response without the cookie to the client. A second core of the multi core device receives via the session a second request from the client. The second core determines from the second request identification that the first core is owner of the session. The second core communicates to the first core a third request for cookie information for the session.

In some embodiments the first core determines to remove the cookie in response to a policy for the session or content of the response. In some embodiments the first core determines to remove the cookie responsive to identifying a predetermined URL in the response. In some embodiments the second core receives a session cookie from the client. In some embodiments the second core determines the owner of the session from the session cookie. In other embodiments the second core determines the owner of the session for a session identifier. In some embodiments the second core communicates to the first core the third request for cookie information for the session based on a domain path and protocol. In some embodiments the second core receives from the first core cookie information for a domain path and protocol. In some embodiments the second core inserts into the third request a second cookie based on the cookie information received from the first core. In other embodiments the device forwards to a server of the one or more servers the third request having the second cookie.

In another aspect the present invention is related to a system for managing cookies by a multi core device. The system comprises a multi core device intermediary to a client and one or more servers. Each core of the multi core device executes a packet engine. A first core of the multi core device receives via a session a response from a server to a first request of the client. The response comprises a cookie. A first packet engine of the first core removes the cookie from the response storing the cookie in a corresponding storage for the session and forwarding the response without the cookie to the client. A second core of the multi core device receives via the session a second request from the client. A second packet engine of the second core determines from the second request the identity of the first core as owner of the session and communicates to the first core a third request for cookie information for the session.

In some embodiments the first packet engine removes the cookie in response to a policy for the session or content of the response. In some embodiments the first packet engine determines to remove the cookie based on identifying a predetermined URL in the response. In some embodiments the second core receives a session cookie from the client. In some further embodiments the second packet engine determines the owner of the session from the session cookie. In some further embodiments the second packet engine determines the owner of the session from a session identifier. In some embodiments the second packet engine communicates to the first core the third request for cookie information for the session based on a domain path and protocol. In some embodiments the second packet engine receives from the first core cookie information for a domain path and protocol. In some embodiments the second packet engine inserts into the third request a second cookie based on the cookie information received from the first core. In some embodiments the second packet engine forwards to a server of the one or more servers the third request having the second cookie.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

For purposes of reading the description of the various embodiments below the following descriptions of the sections of the specification and their respective contents may be helpful 

Prior to discussing the specifics of embodiments of the systems and methods of an appliance and or client it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks generally referred to as network . In some embodiments a client communicates with a server via an appliance .

Although shows a network and a network between the clients and the servers the clients and the servers may be on the same network . The networks and can be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In one embodiment network may be a private network and network may be a public network. In some embodiments network may be a private network and network a public network. In another embodiment networks and may both be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located at a corporate data center.

The network and or be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network and or may be a bus star or ring network topology. The network and or and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

As shown in the appliance which also may be referred to as an interface unit or gateway is shown between the networks and . In some embodiments the appliance may be located on network . For example a branch office of a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . For example an appliance may be located at a corporate data center. In yet another embodiment a plurality of appliances may be deployed on network . In some embodiments a plurality of appliances may be deployed on network . In one embodiment a first appliance communicates with a second appliance . In other embodiments the appliance could be a part of any client or server on the same or different network as the client . One or more appliances may be located at any point in the network or network communications path between a client and a server .

In some embodiments the appliance comprises any of the network devices manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. referred to as Citrix NetScaler devices. In other embodiments the appliance includes any of the product embodiments referred to as WebAccelerator and BigIP manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the DX acceleration device platforms and or the SSL VPN series of devices such as SA 700 SA 2000 SA 4000 and SA 6000 devices manufactured by Juniper Networks Inc. of Sunnyvale Calif. In yet another embodiment the appliance includes any application acceleration and or security related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco ACE Application Control Engine Module service software and network modules and Cisco AVS Series Application Velocity System.

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the serves may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . The servers of each farm do not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or medium area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications available to the client and address information associated with a server hosting an application identified by the enumeration of applications. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Referring now to an embodiment of a network environment deploying multiple appliances is depicted. A first appliance may be deployed on a first network and a second appliance on a second network . For example a corporate enterprise may deploy a first appliance at a branch office and a second appliance at a data center. In another embodiment the first appliance and second appliance are deployed on the same network or network . For example a first appliance may be deployed for a first server farm and a second appliance may be deployed for a second server farm . In another example a first appliance may be deployed at a first branch office while the second appliance is deployed at a second branch office . In some embodiments the first appliance and second appliance work in cooperation or in conjunction with each other to accelerate network traffic or the delivery of application and data between a client and a server

Referring now to another embodiment of a network environment deploying the appliance with one or more other types of appliances such as between one or more WAN optimization appliance is depicted. For example a first WAN optimization appliance is shown between networks and and a second WAN optimization appliance may be deployed between the appliance and one or more servers . By way of example a corporate enterprise may deploy a first WAN optimization appliance at a branch office and a second WAN optimization appliance at a data center. In some embodiments the appliance may be located on network . In other embodiments the appliance may be located on network . In some embodiments the appliance may be located on network or network . In one embodiment the appliance and are on the same network. In another embodiment the appliance and are on different networks. In another example a first WAN optimization appliance may be deployed for a first server farm and a second WAN optimization appliance for a second server farm 

In one embodiment the appliance is a device for accelerating optimizing or otherwise improving the performance operation or quality of service of any type and form of network traffic such as traffic to and or from a WAN connection. In some embodiments the appliance is a performance enhancing proxy. In other embodiments the appliance is any type and form of WAN optimization or acceleration device sometimes also referred to as a WAN optimization controller. In one embodiment the appliance is any of the product embodiments referred to as WANScaler manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In other embodiments the appliance includes any of the product embodiments referred to as BIG IP link controller and WANjet manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the WX and WXC WAN acceleration device platforms manufactured by Juniper Networks Inc. of Sunnyvale Calif. In some embodiments the appliance includes any of the steelhead line of WAN optimization appliances manufactured by Riverbed Technology of San Francisco Calif. In other embodiments the appliance includes any of the WAN related devices manufactured by Expand Networks Inc. of Roseland N.J. In one embodiment the appliance includes any of the WAN related appliances manufactured by Packeteer Inc. of Cupertino Calif. such as the PacketShaper iShared and SkyX product embodiments provided by Packeteer. In yet another embodiment the appliance includes any WAN related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco Wide Area Network Application Services software and network modules and Wide Area Network engine appliances.

In one embodiment the appliance provides application and data acceleration services for branch office or remote offices. In one embodiment the appliance includes optimization of Wide Area File Services WAFS . In another embodiment the appliance accelerates the delivery of files such as via the Common Internet File System CIFS protocol. In other embodiments the appliance provides caching in memory and or storage to accelerate delivery of applications and data. In one embodiment the appliance provides compression of network traffic at any level of the network stack or at any protocol or network layer. In another embodiment the appliance provides transport layer protocol optimizations flow control performance enhancements or modifications and or management to accelerate delivery of applications and data over a WAN connection. For example in one embodiment the appliance provides Transport Control Protocol TCP optimizations. In other embodiments the appliance provides optimizations flow control performance enhancements or modifications and or management for any session or application layer protocol.

In another embodiment the appliance encoded any type and form of data or information into custom or standard TCP and or IP header fields or option fields of network packet to announce presence functionality or capability to another appliance . In another embodiment an appliance may communicate with another appliance using data encoded in both TCP and or IP header fields or options. For example the appliance may use TCP option s or IP header fields or options to communicate one or more parameters to be used by the appliances in performing functionality such as WAN acceleration or for working in conjunction with each other.

In some embodiments the appliance preserves any of the information encoded in TCP and or IP header and or option fields communicated between appliances and . For example the appliance may terminate a transport layer connection traversing the appliance such as a transport layer connection from between a client and a server traversing appliances and . In one embodiment the appliance identifies and preserves any encoded information in a transport layer packet transmitted by a first appliance via a first transport layer connection and communicates a transport layer packet with the encoded information to a second appliance via a second transport layer connection.

Referring now to a network environment for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliance . For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client comprises a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The computing environment application and or data file may be delivered via the appliance and or the server .

In some embodiments the appliance accelerates delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of the company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . The appliance may provide acceleration techniques for accelerating any transport layer payload from a server to a client such as 1 transport layer connection pooling 2 transport layer connection multiplexing 3 transport control protocol buffering 4 compression and 5 caching. In some embodiments the appliance provides load balancing of servers in responding to requests from clients . In other embodiments the appliance acts as a proxy or access server to provide access to the one or more servers . In another embodiment the appliance provides a secure virtual private network connection from a first network of the client to the second network of the server such as an SSL VPN connection. It yet other embodiments the appliance provides application firewall security control and management of the connection and communications between a client and a server .

In some embodiments the application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. In another embodiment the application delivery system may deliver one or more applications to clients or users via steaming of the application.

In one embodiment the application delivery system includes a policy engine for controlling and managing the access to selection of application execution methods and the delivery of applications. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the local machine to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiments the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEx provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

Still referring to an embodiment of the network environment may include a monitoring server A. The monitoring server A may include any type and form performance monitoring service . The performance monitoring service may include monitoring measurement and or management software and or hardware including data collection aggregation analysis management and reporting. In one embodiment the performance monitoring service includes one or more monitoring agents . The monitoring agent includes any software hardware or combination thereof for performing monitoring measurement and data collection activities on a device such as a client server or an appliance . In some embodiments the monitoring agent includes any type and form of script such as Visual Basic script or Javascript. In one embodiment the monitoring agent executes transparently to any application and or user of the device. In some embodiments the monitoring agent is installed and operated unobtrusively to the application or client. In yet another embodiment the monitoring agent is installed and operated without any instrumentation for the application or device.

In some embodiments the monitoring agent monitors measures and collects data on a predetermined frequency. In other embodiments the monitoring agent monitors measures and collects data based upon detection of any type and form of event. For example the monitoring agent may collect data upon detection of a request for a web page or receipt of an HTTP response. In another example the monitoring agent may collect data upon detection of any user input events such as a mouse click. The monitoring agent may report or provide any monitored measured or collected data to the monitoring service . In one embodiment the monitoring agent transmits information to the monitoring service according to a schedule or a predetermined frequency. In another embodiment the monitoring agent transmits information to the monitoring service upon detection of an event.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of any network resource or network infrastructure element such as a client server server farm appliance appliance or network connection. In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any transport layer connection such as a TCP or UDP connection. In another embodiment the monitoring service and or monitoring agent monitors and measures network latency. In yet one embodiment the monitoring service and or monitoring agent monitors and measures bandwidth utilization.

In other embodiments the monitoring service and or monitoring agent monitors and measures end user response times. In some embodiments the monitoring service performs monitoring and performance measurement of an application. In another embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any session or connection to the application. In one embodiment the monitoring service and or monitoring agent monitors and measures performance of a browser. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of HTTP based transactions. In some embodiments the monitoring service and or monitoring agent monitors and measures performance of a Voice over IP VoIP application or session. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of a remote display protocol application such as an ICA client or RDP client. In yet another embodiment the monitoring service and or monitoring agent monitors and measures performance of any type and form of streaming media. In still a further embodiment the monitoring service and or monitoring agent monitors and measures performance of a hosted application or a Software As A Service SaaS delivery model.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of one or more transactions requests or responses related to application. In other embodiments the monitoring service and or monitoring agent monitors and measures any portion of an application layer stack such as any .NET or J2EE calls. In one embodiment the monitoring service and or monitoring agent monitors and measures database or SQL transactions. In yet another embodiment the monitoring service and or monitoring agent monitors and measures any method function or application programming interface API call.

In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of a delivery of application and or data from a server to a client via one or more appliances such as appliance and or appliance . In some embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a virtualized application. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a streaming application. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of delivery of a desktop application to a client and or the execution of the desktop application on the client. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of a client server application.

In one embodiment the monitoring service and or monitoring agent is designed and constructed to provide application performance management for the application delivery system . For example the monitoring service and or monitoring agent may monitor measure and manage the performance of the delivery of applications via the Citrix Presentation Server. In this example the monitoring service and or monitoring agent monitors individual ICA sessions. The monitoring service and or monitoring agent may measure the total and per session system resource usage as well as application and networking performance. The monitoring service and or monitoring agent may identify the active servers for a given user and or user session. In some embodiments the monitoring service and or monitoring agent monitors back end connections between the application delivery system and an application and or database server. The monitoring service and or monitoring agent may measure network latency delay and volume per user session or ICA session.

In some embodiments the monitoring service and or monitoring agent measures and monitors memory usage for the application delivery system such as total memory usage per user session and or per process. In other embodiments the monitoring service and or monitoring agent measures and monitors CPU usage the application delivery system such as total CPU usage per user session and or per process. In another embodiments the monitoring service and or monitoring agent measures and monitors the time required to log in to an application a server or the application delivery system such as Citrix Presentation Server. In one embodiment the monitoring service and or monitoring agent measures and monitors the duration a user is logged into an application a server or the application delivery system . In some embodiments the monitoring service and or monitoring agent measures and monitors active and inactive session counts for an application server or application delivery system session. In yet another embodiment the monitoring service and or monitoring agent measures and monitors user session latency.

In yet further embodiments the monitoring service and or monitoring agent measures and monitors measures and monitors any type and form of server metrics. In one embodiment the monitoring service and or monitoring agent measures and monitors metrics related to system memory CPU usage and disk storage. In another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to page faults such as page faults per second. In other embodiments the monitoring service and or monitoring agent measures and monitors round trip time metrics. In yet another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to application crashes errors and or hangs.

In some embodiments the monitoring service and monitoring agent includes any of the product embodiments referred to as EdgeSight manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In another embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TrueView product suite manufactured by the Symphoniq Corporation of Palo Alto Calif. In one embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TeaLeaf CX product suite manufactured by the TeaLeaf Technology Inc. of San Francisco Calif. In other embodiments the performance monitoring service and or monitoring agent includes any portion of the business service management products such as the BMC Performance Manager and Patrol products manufactured by BMC Software Inc. of Houston Tex.

The client server and appliance may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. FIGD. E and F depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein.

A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCl LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

As shown in the computing device may comprise multiple processors and may provide functionality for simultaneous execution of instructions or for simultaneous execution of one instruction on more than one piece of data. In some embodiments the computing device may comprise a parallel processor with one or more cores. In one of these embodiments the computing device is a shared memory parallel device with multiple processors and or multiple processor cores accessing all available memory as a single global address space. In another of these embodiments the computing device is a distributed memory parallel device with multiple processors each accessing local memory only. In still another of these embodiments the computing device has both some memory which is shared and some memory which can only be accessed by particular processors or subsets of processors. In still even another of these embodiments the computing device such as a multi core microprocessor combines two or more independent processors into a single package often a single integrated circuit IC . In yet another of these embodiments the computing device includes a chip having a CELL BROADBAND ENGINE architecture and including a Power processor element and a plurality of synergistic processing elements the Power processor element and the plurality of synergistic processing elements linked together by an internal high speed bus which may be referred to as an element interconnect bus.

In some embodiments the processors provide functionality for execution of a single instruction simultaneously on multiple pieces of data SIMD . In other embodiments the processors provide functionality for execution of multiple instructions simultaneously on multiple pieces of data MIMD . In still other embodiments the processor may use any combination of SIMD and MIMD cores in a single device.

In some embodiments the computing device may comprise a graphics processing unit. In one of these embodiments depicted in the computing device includes at least one central processing unit and at least one graphics processing unit. In another of these embodiments the computing device includes at least one parallel processing unit and at least one graphics processing unit. In still another of these embodiments the computing device includes a plurality of processing units of any type one of the plurality of processing units comprising a graphics processing unit.

In some embodiments a first computing device executes an application on behalf of a user of a client computing device . In other embodiments a computing device executes a virtual machine which provides an execution session within which applications execute on behalf of a user or a client computing devices . In one of these embodiments the execution session is a hosted desktop session. In another of these embodiments the computing device executes a terminal services session. The terminal services session may provide a hosted desktop environment. In still another of these embodiments the execution session provides access to a computing environment which may comprise one or more of an application a plurality of applications a desktop application and a desktop session in which one or more applications may execute.

Hardware layer provides the hardware elements upon which programs and services within kernel space and user space are executed. Hardware layer also provides the structures and elements which allow programs and services within kernel space and user space to communicate data both internally and externally with respect to appliance . As shown in the hardware layer includes a processing unit for executing software programs and services a memory for storing software and data network ports for transmitting and receiving data over a network and an encryption processor for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . The processor may include any of the processors described above in connection with . For example in one embodiment the appliance comprises a first processor and a second processor . In other embodiments the processor or comprises a multi core processor.

Although the hardware layer of appliance is generally illustrated with an encryption processor processor may be a processor for performing functions related to any encryption protocol such as the Secure Socket Layer SSL or Transport Layer Security TLS protocol. In some embodiments the processor may be a general purpose processor GPP and in further embodiments may have executable instructions for performing processing of any security related protocol.

The operating system of appliance allocates manages or otherwise segregates the available system memory into kernel space and user space . In example software architecture the operating system may be any type and or form of Unix operating system although the invention is not so limited. As such the appliance can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any network operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or network devices or any other operating system capable of running on the appliance and performing the operations described herein.

The kernel space is reserved for running the kernel including any device drivers kernel extensions or other kernel related software. As known to those skilled in the art the kernel is the core of the operating system and provides access control and management of resources and hardware related elements of the application . In accordance with an embodiment of the appliance the kernel space also includes a number of network services or processes working in conjunction with a cache manager sometimes also referred to as the integrated cache the benefits of which are described in detail further herein. Additionally the embodiment of the kernel will depend on the embodiment of the operating system installed configured or otherwise used by the device .

In one embodiment the device comprises one network stack such as a TCP IP based stack for communicating with the client and or the server . In one embodiment the network stack is used to communicate with a first network such as network and a second network . In some embodiments the device terminates a first transport layer connection such as a TCP connection of a client and establishes a second transport layer connection to a server for use by the client e.g. the second transport layer connection is terminated at the appliance and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments the device may comprise multiple network stacks for example and and the first transport layer connection may be established or terminated at one network stack and the second transport layer connection on the second network stack . For example one network stack may be for receiving and transmitting network packet on a first network and another network stack for receiving and transmitting network packets on a second network. In one embodiment the network stack comprises a buffer for queuing one or more network packets for transmission by the appliance .

As shown in the kernel space includes the cache manager a high speed layer 2 7 integrated packet engine an encryption engine a policy engine and multi protocol compression logic . Running these components or processes and in kernel space or kernel mode instead of the user space improves the performance of each of these components alone and in combination. Kernel operation means that these components or processes and run in the core address space of the operating system of the device . For example running the encryption engine in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode such as from a kernel level data structure to a user level data structure. In another aspect the number of context switches between kernel mode and user mode are also reduced. Additionally synchronization of and communications between any of the components or processes and can be performed more efficiently in the kernel space .

In some embodiments any portion of the components and may run or operate in the kernel space while other portions of these components and may run or operate in user space . In one embodiment the appliance uses a kernel level data structure providing access to any portion of one or more network packets for example a network packet comprising a request from a client or a response from a server . In some embodiments the kernel level data structure may be obtained by the packet engine via a transport layer driver interface or filter to the network stack . The kernel level data structure may comprise any interface and or data accessible via the kernel space related to the network stack network traffic or packets received or transmitted by the network stack . In other embodiments the kernel level data structure may be used by any of the components or processes and to perform the desired operation of the component or process. In one embodiment a component and is running in kernel mode when using the kernel level data structure while in another embodiment the component and is running in user mode when using the kernel level data structure. In some embodiments the kernel level data structure may be copied or passed to a second kernel level data structure or any desired user level data structure.

The cache manager may comprise software hardware or any combination of software and hardware to provide cache access control and management of any type and form of content such as objects or dynamically generated objects served by the originating servers . The data objects or content processed and stored by the cache manager may comprise data in any format such as a markup language or communicated via any protocol. In some embodiments the cache manager duplicates original data stored elsewhere or data previously computed generated or transmitted in which the original data may require longer access time to fetch compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element future use can be made by accessing the cached copy rather than refetching or recomputing the original data thereby reducing the access time. In some embodiments the cache memory element may comprise a data object in memory of device . In other embodiments the cache memory element may comprise memory having a faster access time than memory . In another embodiment the cache memory element may comprise any type and form of storage element of the device such as a portion of a hard disk. In some embodiments the processing unit may provide cache memory for use by the cache manager . In yet further embodiments the cache manager may use any portion and combination of memory storage or the processing unit for caching data objects and other content.

Furthermore the cache manager includes any logic functions rules or operations to perform any embodiments of the techniques of the appliance described herein. For example the cache manager includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client or server . In some embodiments the cache manager may operate as a program service process or task executing in the kernel space and in other embodiments in the user space . In one embodiment a first portion of the cache manager executes in the user space while a second portion executes in the kernel space . In some embodiments the cache manager can comprise any type of general purpose processor GPP or any other type of integrated circuit such as a Field Programmable Gate Array FPGA Programmable Logic Device PLD or Application Specific Integrated Circuit ASIC .

The policy engine may include for example an intelligent statistical engine or other programmable application s . In one embodiment the policy engine provides a configuration mechanism to allow a user to identify specify define or configure a caching policy. Policy engine in some embodiments also has access to memory to support data structures such as lookup tables or hash tables to enable user selected caching policy decisions. In other embodiments the policy engine may comprise any logic rules functions or operations to determine and provide access control and management of objects data or content being cached by the appliance in addition to access control and management of security network traffic network access compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.

The encryption engine comprises any logic business rules functions or operations for handling the processing of any security related protocol such as SSL or TLS or any function related thereto. For example the encryption engine encrypts and decrypts network packets or any portion thereof communicated via the appliance . The encryption engine may also setup or establish SSL or TLS connections on behalf of the client server or appliance . As such the encryption engine provides offloading and acceleration of SSL processing. In one embodiment the encryption engine uses a tunneling protocol to provide a virtual private network between a client and a server . In some embodiments the encryption engine is in communication with the Encryption processor . In other embodiments the encryption engine comprises executable instructions running on the Encryption processor .

The multi protocol compression engine comprises any logic business rules function or operations for compressing one or more protocols of a network packet such as any of the protocols used by the network stack of the device . In one embodiment multi protocol compression engine compresses bi directionally between clients and servers any TCP IP based protocol including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In other embodiments multi protocol compression engine provides compression of Hypertext Markup Language HTML based protocols and in some embodiments provides compression of any markup languages such as the Extensible Markup Language XML . In one embodiment the multi protocol compression engine provides compression of any high performance protocol such as any protocol designed for appliance to appliance communications. In another embodiment the multi protocol compression engine compresses any payload of or any communication using a modified transport control protocol such as Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol.

As such the multi protocol compression engine accelerates performance for users accessing applications via desktop clients e.g. Microsoft Outlook and non Web thin clients such as any client launched by popular enterprise applications like Oracle SAP and Siebel and even mobile clients such as the Pocket PC. In some embodiments the multi protocol compression engine by executing in the kernel mode and integrating with packet processing engine accessing the network stack is able to compress any of the protocols carried by the TCP IP protocol such as any application layer protocol.

High speed layer 2 7 integrated packet engine also generally referred to as a packet processing engine or packet engine is responsible for managing the kernel level processing of packets received and transmitted by appliance via network ports . The high speed layer 2 7 integrated packet engine may comprise a buffer for queuing one or more network packets during processing such as for receipt of a network packet or transmission of a network packet. Additionally the high speed layer 2 7 integrated packet engine is in communication with one or more network stacks to send and receive network packets via network ports . The high speed layer 2 7 integrated packet engine works in conjunction with encryption engine cache manager policy engine and multi protocol compression logic . In particular encryption engine is configured to perform SSL processing of packets policy engine is configured to perform functions related to traffic management such as request level content switching and request level cache redirection and multi protocol compression logic is configured to perform functions related to compression and decompression of data.

The high speed layer 2 7 integrated packet engine includes a packet processing timer . In one embodiment the packet processing timer provides one or more time intervals to trigger the processing of incoming i.e. received or outgoing i.e. transmitted network packets. In some embodiments the high speed layer 2 7 integrated packet engine processes network packets responsive to the timer . The packet processing timer provides any type and form of signal to the packet engine to notify trigger or communicate a time related event interval or occurrence. In many embodiments the packet processing timer operates in the order of milliseconds such as for example 100 ms 50 ms or 25 ms. For example in some embodiments the packet processing timer provides time intervals or otherwise causes a network packet to be processed by the high speed layer 2 7 integrated packet engine at a 10 ms time interval while in other embodiments at a 5 ms time interval and still yet in further embodiments as short as a 3 2 or 1 ms time interval. The high speed layer 2 7 integrated packet engine may be interfaced integrated or in communication with the encryption engine cache manager policy engine and multi protocol compression engine during operation. As such any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed responsive to the packet processing timer and or the packet engine . Therefore any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed at the granularity of time intervals provided via the packet processing timer for example at a time interval of less than or equal to 10 ms. For example in one embodiment the cache manager may perform invalidation of any cached objects responsive to the high speed layer 2 7 integrated packet engine and or the packet processing timer . In another embodiment the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer such as at every 10 ms.

In contrast to kernel space user space is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space directly and uses service calls in order to access kernel services. As shown in user space of appliance includes a graphical user interface GUI a command line interface CLI shell services health monitoring program and daemon services . GUI and CLI provide a means by which a system administrator or other user can interact with and control the operation of appliance such as via the operating system of the appliance . The GUI or CLI can comprise code running in user space or kernel space . The GUI may be any type and form of graphical user interface and may be presented via text graphical or otherwise by any type of program or application such as a browser. The CLI may be any type and form of command line or text based interface such as a command line provided by the operating system. For example the CLI may comprise a shell which is a tool to enable users to interact with the operating system. In some embodiments the CLI may be provided via a bash csh tcsh or ksh type shell. The shell services comprises the programs services tasks processes or executable instructions to support interaction with the appliance or operating system by a user via the GUI and or CLI .

Health monitoring program is used to monitor check report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program comprises one or more programs services tasks processes or executable instructions to provide logic rules functions or operations for monitoring any activity of the appliance . In some embodiments the health monitoring program intercepts and inspects any network traffic passed via the appliance . In other embodiments the health monitoring program interfaces by any suitable means and or mechanisms with one or more of the following the encryption engine cache manager policy engine multi protocol compression logic packet engine daemon services and shell services . As such the health monitoring program may call any application programming interface API to determine a state status or health of any portion of the appliance . For example the health monitoring program may ping or send a status inquiry on a periodic basis to check if a program process service or task is active and currently running. In another example the health monitoring program may check any status error or history logs provided by any program process service or task to determine any condition status or error with any portion of the appliance .

Daemon services are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments a daemon service may forward the requests to other programs or processes such as another daemon service as appropriate. As known to those skilled in the art a daemon service may run unattended to perform continuous or periodic system wide functions such as network control or to perform any desired task. In some embodiments one or more daemon services run in the user space while in other embodiments one or more daemon services run in the kernel space.

Referring now to another embodiment of the appliance is depicted. In brief overview the appliance provides one or more of the following services functionality or operations SSL VPN connectivity switching load balancing Domain Name Service resolution acceleration and an application firewall for communications between one or more clients and one or more servers . Each of the servers may provide one or more network related services referred to as services . For example a server may provide an http service . The appliance comprises one or more virtual servers or virtual internet protocol servers referred to as a vServer VIP server or just VIP also referred herein as vServer . The vServer receives intercepts or otherwise processes communications between a client and a server in accordance with the configuration and operations of the appliance .

The vServer may comprise software hardware or any combination of software and hardware. The vServer may comprise any type and form of program service task process or executable instructions operating in user mode kernel mode or any combination thereof in the appliance . The vServer includes any logic functions rules or operations to perform any embodiments of the techniques described herein such as SSL VPN switching load balancing Domain Name Service resolution acceleration and an application firewall . In some embodiments the vServer establishes a connection to a service of a server . The service may comprise any program application process task or set of executable instructions capable of connecting to and communicating to the appliance client or vServer . For example the service may comprise a web server http server ftp email or database server. In some embodiments the service is a daemon process or network driver for listening receiving and or sending communications for an application such as email database or an enterprise application. In some embodiments the service may communicate on a specific IP address or IP address and port.

In some embodiments the vServer applies one or more policies of the policy engine to network communications between the client and server . In one embodiment the policies are associated with a vServer . In another embodiment the policies are based on a user or a group of users. In yet another embodiment a policy is global and applies to one or more vServers and any user or group of users communicating via the appliance . In some embodiments the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication such as internet protocol address port protocol type header or fields in a packet or the context of the communication such as user group of the user vServer transport layer connection and or identification or attributes of the client or server .

In other embodiments the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to access the computing environment application and or data file from a server . In another embodiment the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to have the application delivery system deliver one or more of the computing environment application and or data file. In yet another embodiment the appliance establishes a VPN or SSL VPN connection based on the policy engine s authentication and or authorization of a remote user or a remote client In one embodiment the appliance controls the flow of network traffic and communication sessions based on policies of the policy engine . For example the appliance may control the access to a computing environment application or data file based on the policy engine .

TCP or UDP connection with a client via the client agent . In one embodiment the vServer listens for and receives communications from the client . In other embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client server . In one embodiment the vServer establishes the transport layer connection to an internet protocol address and port of a server running on the server . In another embodiment the vServer associates a first transport layer connection to a client with a second transport layer connection to the server . In some embodiments a vServer establishes a pool of transport layer connections to a server and multiplexes client requests via the pooled transport layer connections.

In some embodiments the appliance provides a SSL VPN connection between a client and a server . For example a client on a first network requests to establish a connection to a server on a second network . In some embodiments the second network is not routable from the first network . In other embodiments the client is on a public network and the server is on a private network such as a corporate network. In one embodiment the client agent intercepts communications of the client on the first network encrypts the communications and transmits the communications via a first transport layer connection to the appliance . The appliance associates the first transport layer connection on the first network to a second transport layer connection to the server on the second network . The appliance receives the intercepted communication from the client agent decrypts the communications and transmits the communication to the server on the second network via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such the appliance provides an end to end secure transport layer connection for the client between the two networks .

In one embodiment the appliance hosts an intranet internet protocol or IntranetlP address of the client on the virtual private network . The client has a local network identifier such as an internet protocol IP address and or host name on the first network . When connected to the second network via the appliance the appliance establishes assigns or otherwise provides an IntranetlP address which is a network identifier such as IP address and or host name for the client on the second network . The appliance listens for and receives on the second or private network for any communications directed towards the client using the client s established IntranetlP . In one embodiment the appliance acts as or on behalf of the client on the second private network . For example in another embodiment a vServer listens for and responds to communications to the IntranetIP of the client . In some embodiments if a computing device on the second network transmits a request the appliance processes the request as if it were the client . For example the appliance may respond to a ping to the client s IntranetIP . In another example the appliance may establish a connection such as a TCP or UDP connection with computing device on the second network requesting a connection with the client s IntranetIP .

In some embodiments the appliance provides one or more of the following acceleration techniques to communications between the client and server 1 compression 2 decompression 3 Transmission Control Protocol pooling 4 Transmission Control Protocol multiplexing 5 Transmission Control Protocol buffering and 6 caching. In one embodiment the appliance relieves servers of much of the processing load caused by repeatedly opening and closing transport layers connections to clients by opening one or more transport layer connections with each server and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as connection pooling .

In some embodiments in order to seamlessly splice communications from a client to a server via a pooled transport layer connection the appliance translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as connection multiplexing . In some embodiments no application layer protocol interaction is required. For example in the case of an in bound packet that is a packet received from a client the source network address of the packet is changed to that of an output port of appliance and the destination network address is changed to that of the intended server. In the case of an outbound packet that is one received from a server the source network address is changed from that of the server to that of an output port of appliance and the destination address is changed from that of appliance to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement numbers expected by the client on the appliance s transport layer connection to the client . In some embodiments the packet checksum of the transport layer protocol is recalculated to account for these translations.

In another embodiment the appliance provides switching or load balancing functionality for communications between the client and server . In some embodiments the appliance distributes traffic and directs client requests to a server based on layer 4 or application layer request data. In one embodiment although the network layer or layer 2 of the network packet identifies a destination server the appliance determines the server to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment the health monitoring programs of the appliance monitor the health of servers to determine the server for which to distribute a client s request. In some embodiments if the appliance detects a server is not available or has a load over a predetermined threshold the appliance can direct or distribute client requests to another server .

In some embodiments the appliance acts as a Domain Name Service DNS resolver or otherwise provides resolution of a DNS request from clients . In some embodiments the appliance intercepts a DNS request transmitted by the client . In one embodiment the appliance responds to a client s DNS request with an IP address of or hosted by the appliance . In this embodiment the client transmits network communication for the domain name to the appliance . In another embodiment the appliance responds to a client s DNS request with an IP address of or hosted by a second appliance . In some embodiments the appliance responds to a client s DNS request with an IP address of a server determined by the appliance .

In yet another embodiment the appliance provides application firewall functionality for communications between the client and server . In one embodiment the policy engine provides rules for detecting and blocking illegitimate requests. In some embodiments the application firewall protects against denial of service DoS attacks. In other embodiments the appliance inspects the content of intercepted requests to identify and block application based attacks. In some embodiments the rules policy engine comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities such as one or more of the following 1 buffer overflow 2 CGI BIN parameter manipulation 3 form hidden field manipulation 4 forceful browsing 5 cookie or session poisoning 6 broken access control list ACLs or weak passwords 7 cross site scripting XSS 8 command injection 9 SQL injection 10 error triggering sensitive information leak 11 insecure use of cryptography 12 server misconfiguration 13 back doors and debug options 14 website defacement 15 platform or operating systems vulnerabilities and 16 zero day exploits. In an embodiment the application firewall provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following 1 required fields are returned 2 no added field allowed 3 read only and hidden field enforcement 4 drop down list and radio button field conformance and 5 form field max length enforcement. In some embodiments the application firewall ensures cookies are not modified. In other embodiments the application firewall protects against forceful browsing by enforcing legal URLs.

In still yet other embodiments the application firewall protects any confidential information contained in the network communication. The application firewall may inspect or analyze any network communication in accordance with the rules or polices of the engine to identify any confidential information in any field of the network packet. In some embodiments the application firewall identifies in the network communication one or more occurrences of a credit card number password social security number name patient code contact information and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences in one embodiment the application firewall may take a policy action on the network communication such as prevent transmission of the network communication. In another embodiment the application firewall may rewrite remove or otherwise mask such identified occurrence or confidential information.

Still referring to the appliance may include a performance monitoring agent as discussed above in conjunction with . In one embodiment the appliance receives the monitoring agent from the monitoring service or monitoring server as depicted in . In some embodiments the appliance stores the monitoring agent in storage such as disk for delivery to any client or server in communication with the appliance . For example in one embodiment the appliance transmits the monitoring agent to a client upon receiving a request to establish a transport layer connection. In other embodiments the appliance transmits the monitoring agent upon establishing the transport layer connection with the client . In another embodiment the appliance transmits the monitoring agent to the client upon intercepting or detecting a request for a web page. In yet another embodiment the appliance transmits the monitoring agent to a client or a server in response to a request from the monitoring server . In one embodiment the appliance transmits the monitoring agent to a second appliance or appliance .

In other embodiments the appliance executes the monitoring agent . In one embodiment the monitoring agent measures and monitors the performance of any application program process service task or thread executing on the appliance . For example the monitoring agent may monitor and measure performance and operation of vServers A N. In another embodiment the monitoring agent measures and monitors the performance of any transport layer connections of the appliance . In some embodiments the monitoring agent measures and monitors the performance of any user sessions traversing the appliance . In one embodiment the monitoring agent measures and monitors the performance of any virtual private network connections and or sessions traversing the appliance such an SSL VPN session. In still further embodiments the monitoring agent measures and monitors the memory CPU and disk usage and performance of the appliance . In yet another embodiment the monitoring agent measures and monitors the performance of any acceleration technique performed by the appliance such as SSL offloading connection pooling and multiplexing caching and compression. In some embodiments the monitoring agent measures and monitors the performance of any load balancing and or content switching performed by the appliance . In other embodiments the monitoring agent measures and monitors the performance of application firewall protection and processing performed by the appliance .

Referring now to an embodiment of the client agent is depicted. The client includes a client agent for establishing and exchanging communications with the appliance and or server via a network . In brief overview the client operates on computing device having an operating system with a kernel mode and a user mode and a network stack with one or more layers . The client may have installed and or execute one or more applications. In some embodiments one or more applications may communicate via the network stack to a network . One of the applications such as a web browser may also include a first program . For example the first program may be used in some embodiments to install and or execute the client agent or any portion thereof. The client agent includes an interception mechanism or interceptor for intercepting network communications from the network stack from the one or more applications.

The network stack of the client may comprise any type and form of software or hardware or any combinations thereof for providing connectivity to and communications with a network. In one embodiment the network stack comprises a software implementation for a network protocol suite. The network stack may comprise one or more network layers such as any networks layers of the Open Systems Interconnection OSI communications model as those skilled in the art recognize and appreciate. As such the network stack may comprise any type and form of protocols for any of the following layers of the OSI model 1 physical link layer 2 data link layer 3 network layer 4 transport layer 5 session layer 6 presentation layer and 7 application layer. In one embodiment the network stack may comprise a transport control protocol TCP over the network layer protocol of the internet protocol IP generally referred to as TCP IP. In some embodiments the TCP IP protocol may be carried over the Ethernet protocol which may comprise any of the family of IEEE wide area network WAN or local area network LAN protocols such as those protocols covered by the IEEE 802.3. In some embodiments the network stack comprises any type and form of a wireless protocol such as IEEE 802.11 and or mobile internet protocol.

In view of a TCP IP based network any TCP IP based protocol may be used including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In another embodiment the network stack comprises any type and form of transport control protocol such as a modified transport control protocol for example a Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol. In other embodiments any type and form of user datagram protocol UDP such as UDP over IP may be used by the network stack such as for voice communications or real time data communications.

Furthermore the network stack may include one or more network drivers supporting the one or more layers such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device or as part of any network interface cards or other network access components of the computing device . In some embodiments any of the network drivers of the network stack may be customized modified or adapted to provide a custom or modified portion of the network stack in support of any of the techniques described herein. In other embodiments the acceleration program is designed and constructed to operate with or work in conjunction with the network stack installed or otherwise provided by the operating system of the client .

The network stack comprises any type and form of interfaces for receiving obtaining providing or otherwise accessing any information and data related to network communications of the client . In one embodiment an interface to the network stack comprises an application programming interface API . The interface may also comprise any function call hooking or filtering mechanism event or call back mechanism or any type of interfacing technique. The network stack via the interface may receive or provide any type and form of data structure such as an object related to functionality or operation of the network stack . For example the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments the data structure comprises a portion of the network packet processed at a protocol layer of the network stack such as a network packet of the transport layer. In some embodiments the data structure comprises a kernel level data structure while in other embodiments the data structure comprises a user mode data structure. A kernel level data structure may comprise a data structure obtained or related to a portion of the network stack operating in kernel mode or a network driver or other software running in kernel mode or any data structure obtained or received by a service process task thread or other executable instructions running or operating in kernel mode of the operating system.

Additionally some portions of the network stack may execute or operate in kernel mode for example the data link or network layer while other portions execute or operate in user mode such as an application layer of the network stack . For example a first portion of the network stack may provide user mode access to the network stack to an application while a second portion of the network stack provides access to a network. In some embodiments a first portion of the network stack may comprise one or more upper layers of the network stack such as any of layers 5 7. In other embodiments a second portion of the network stack comprises one or more lower layers such as any of layers 1 4. Each of the first portion and second portion of the network stack may comprise any portion of the network stack at any one or more network layers in user mode kernel mode or combinations thereof or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user mode and kernel mode .

The interceptor may comprise software hardware or any combination of software and hardware. In one embodiment the interceptor intercept a network communication at any point in the network stack and redirects or transmits the network communication to a destination desired managed or controlled by the interceptor or client agent . For example the interceptor may intercept a network communication of a network stack of a first network and transmit the network communication to the appliance for transmission on a second network . In some embodiments the interceptor comprises any type interceptor comprises a driver such as a network driver constructed and designed to interface and work with the network stack . In some embodiments the client agent and or interceptor operates at one or more layers of the network stack such as at the transport layer. In one embodiment the interceptor comprises a filter driver hooking mechanism or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack such as via the transport driver interface TDI . In some embodiments the interceptor interfaces to a first protocol layer such as the transport layer and another protocol layer such as any layer above the transport protocol layer for example an application protocol layer. In one embodiment the interceptor may comprise a driver complying with the Network Driver Interface Specification NDIS or a NDIS driver. In another embodiment the interceptor may comprise a mini filter or a mini port driver. In one embodiment the interceptor or portion thereof operates in kernel mode . In another embodiment the interceptor or portion thereof operates in user mode . In some embodiments a portion of the interceptor operates in kernel mode while another portion of the interceptor operates in user mode . In other embodiments the client agent operates in user mode but interfaces via the interceptor to a kernel mode driver process service task or portion of the operating system such as to obtain a kernel level data structure . In further embodiments the interceptor is a user mode application or program such as application.

In one embodiment the interceptor intercepts any transport layer connection requests. In these embodiments the interceptor execute transport layer application programming interface API calls to set the destination information such as destination IP address and or port to a desired location for the location. In this manner the interceptor intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor or client agent . In one embodiment the interceptor sets the destination information for the connection to a local IP address and port of the client on which the client agent is listening. For example the client agent may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments the client agent then communicates the redirected transport layer communication to the appliance .

In some embodiments the interceptor intercepts a Domain Name Service DNS request. In one embodiment the client agent and or interceptor resolves the DNS request. In another embodiment the interceptor transmits the intercepted DNS request to the appliance for DNS resolution. In one embodiment the appliance resolves the DNS request and communicates the DNS response to the client agent . In some embodiments the appliance resolves the DNS request via another appliance or a DNS server .

In yet another embodiment the client agent may comprise two agents and . In one embodiment a first agent may comprise an interceptor operating at the network layer of the network stack . In some embodiments the first agent intercepts network layer requests such as Internet Control Message Protocol ICMP requests e.g. ping and traceroute . In other embodiments the second agent may operate at the transport layer and intercept transport layer communications. In some embodiments the first agent intercepts communications at one layer of the network stack and interfaces with or communicates the intercepted communication to the second agent .

The client agent and or interceptor may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example in one embodiment the interceptor operates or interfaces with the transport layer of the network stack transparently to any protocol layer below the transport layer such as the network layer and any protocol layer above the transport layer such as the session presentation or application layer protocols. This allows the other protocol layers of the network stack to operate as desired and without modification for using the interceptor . As such the client agent and or interceptor can interface with the transport layer to secure optimize accelerate route or load balance any communications provided via any protocol carried by the transport layer such as any application layer protocol over TCP IP.

Furthermore the client agent and or interceptor may operate at or interface with the network stack in a manner transparent to any application a user of the client and any other computing device such as a server in communications with the client . The client agent and or interceptor may be installed and or executed on the client in a manner without modification of an application. In some embodiments the user of the client or a computing device in communications with the client are not aware of the existence execution or operation of the client agent and or interceptor . As such in some embodiments the client agent and or interceptor is installed executed and or operated transparently to an application user of the client another computing device such as a server or any of the protocol layers above and or below the protocol layer interfaced to by the interceptor .

The client agent includes an acceleration program a streaming client a collection agent and or monitoring agent . In one embodiment the client agent comprises an Independent Computing Architecture ICA client or any portion thereof developed by Citrix Systems Inc. of Fort Lauderdale Fla. and is also referred to as an ICA client. In some embodiments the client comprises an application streaming client for streaming an application from a server to a client . In some embodiments the client agent comprises an acceleration program for accelerating communications between client and server . In another embodiment the client agent includes a collection agent for performing end point detection scanning and collecting end point information for the appliance and or server .

In some embodiments the acceleration program comprises a client side acceleration program for performing one or more acceleration techniques to accelerate enhance or otherwise improve a client s communications with and or access to a server such as accessing an application provided by a server . The logic functions and or operations of the executable instructions of the acceleration program may perform one or more of the following acceleration techniques 1 multi protocol compression 2 transport control protocol pooling 3 transport control protocol multiplexing 4 transport control protocol buffering and 5 caching via a cache manager. Additionally the acceleration program may perform encryption and or decryption of any communications received and or transmitted by the client . In some embodiments the acceleration program performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally the acceleration program can perform compression on any of the protocols or multiple protocols carried as a payload of a network packet of the transport layer protocol. The streaming client comprises an application program process service task or executable instructions for receiving and executing a streamed application from a server . A server may stream one or more application data files to the streaming client for playing executing or otherwise causing to be executed the application on the client . In some embodiments the server transmits a set of compressed or packaged application data files to the streaming client . In some embodiments the plurality of application files are compressed and stored on a file server within an archive file such as a CAB ZIP SIT TAR JAR or other archive. In one embodiment the server decompresses unpackages or unarchives the application files and transmits the files to the client . In another embodiment the client decompresses unpackages or unarchives the application files. The streaming client dynamically installs the application or portion thereof and executes the application. In one embodiment the streaming client may be an executable program. In some embodiments the streaming client may be able to launch another executable program.

The collection agent comprises an application program process service task or executable instructions for identifying obtaining and or collecting information about the client . In some embodiments the appliance transmits the collection agent to the client or client agent . The collection agent may be configured according to one or more policies of the policy engine of the appliance. In other embodiments the collection agent transmits collected information on the client to the appliance . In one embodiment the policy engine of the appliance uses the collected information to determine and provide access authentication and authorization control of the client s connection to a network .

In one embodiment the collection agent comprises an end point detection and scanning mechanism which identifies and determines one or more attributes or characteristics of the client. For example the collection agent may identify and determine any one or more of the following client side attributes 1 the operating system an or a version of an operating system 2 a service pack of the operating system 3 a running service 4 a running process and 5 a file. The collection agent may also identify and determine the presence or versions of any one or more of the following on the client 1 antivirus software 2 personal firewall software 3 anti spam software and 4 internet security software. The policy engine may have one or more policies based on any one or more of the attributes or characteristics of the client or client side attributes.

In some embodiments the client agent includes a monitoring agent as discussed in conjunction with . The monitoring agent may be any type and form of script such as Visual Basic or Java script. In one embodiment the monitoring agent monitors and measures performance of any portion of the client agent . For example in some embodiments the monitoring agent monitors and measures performance of the acceleration program . In another embodiment the monitoring agent monitors and measures performance of the streaming client . In other embodiments the monitoring agent monitors and measures performance of the collection agent . In still another embodiment the monitoring agent monitors and measures performance of the interceptor . In some embodiments the monitoring agent monitors and measures any resource of the client such as memory CPU and disk.

The monitoring agent may monitor and measure performance of any application of the client. In one embodiment the monitoring agent monitors and measures performance of a browser on the client . In some embodiments the monitoring agent monitors and measures performance of any application delivered via the client agent . In other embodiments the monitoring agent measures and monitors end user response times for an application such as web based or HTTP response times. The monitoring agent may monitor and measure performance of an ICA or RDP client. In another embodiment the monitoring agent measures and monitors metrics for a user session or application session. In some embodiments monitoring agent measures and monitors an ICA or RDP session. In one embodiment the monitoring agent measures and monitors the performance of the appliance in accelerating delivery of an application and or data to the client .

In some embodiments and still referring to a first program may be used to install and or execute the client agent or portion thereof such as the interceptor automatically silently transparently or otherwise. In one embodiment the first program comprises a plugin component such an ActiveX control or Java control or script that is loaded into and executed by an application. For example the first program comprises an ActiveX control loaded and run by a web browser application such as in the memory space or context of the application. In another embodiment the first program comprises a set of executable instructions loaded into and run by the application such as a browser. In one embodiment the first program comprises a designed and constructed program to install the client agent . In some embodiments the first program obtains downloads or receives the client agent via the network from another computing device. In another embodiment the first program is an installer program or a plug and play manager for installing programs such as network drivers on the operating system of the client .

Referring now to a block diagram depicts one embodiment of a virtualization environment . In brief overview a computing device includes a hypervisor layer a virtualization layer and a hardware layer. The hypervisor layer includes a hypervisor also referred to as a virtualization manager that allocates and manages access to a number of physical resources in the hardware layer e.g. the processor s and disk s by at least one virtual machine executing in the virtualization layer. The virtualization layer includes at least one operating system and a plurality of virtual resources allocated to the at least one operating system . Virtual resources may include without limitation a plurality of virtual processors generally and virtual disks generally as well as virtual resources such as virtual memory and virtual network interfaces. The plurality of virtual resources and the operating system may be referred to as a virtual machine . A virtual machine may include a control operating system in communication with the hypervisor and used to execute applications for managing and configuring other virtual machines on the computing device .

In greater detail a hypervisor may provide virtual resources to an operating system in any manner which simulates the operating system having access to a physical device. A hypervisor may provide virtual resources to any number of guest operating systems generally . In some embodiments a computing device executes one or more types of hypervisors. In these embodiments hypervisors may be used to emulate virtual hardware partition physical hardware virtualize physical hardware and execute virtual machines that provide access to computing environments. Hypervisors may include those manufactured by VMWare Inc. of Palo Alto Calif. the XEN hypervisor an open source product whose development is overseen by the open source Xen.org community HyperV VirtualServer or virtual PC hypervisors provided by Microsoft or others. In some embodiments a computing device executing a hypervisor that creates a virtual machine platform on which guest operating systems may execute is referred to as a host server. In one of these embodiments for example the computing device is a XEN SERVER provided by Citrix Systems Inc. of Fort Lauderdale Fla.

In some embodiments a hypervisor executes within an operating system executing on a computing device. In one of these embodiments a computing device executing an operating system and a hypervisor may be said to have a host operating system the operating system executing on the computing device and a guest operating system an operating system executing within a computing resource partition provided by the hypervisor . In other embodiments a hypervisor interacts directly with hardware on a computing device instead of executing on a host operating system. In one of these embodiments the hypervisor may be said to be executing on bare metal referring to the hardware comprising the computing device.

In some embodiments a hypervisor may create a virtual machine generally in which an operating system executes. In one of these embodiments for example the hypervisor loads a virtual machine image to create a virtual machine . In another of these embodiments the hypervisor executes an operating system within the virtual machine . In still another of these embodiments the virtual machine executes an operating system .

In some embodiments the hypervisor controls processor scheduling and memory partitioning for a virtual machine executing on the computing device . In one of these embodiments the hypervisor controls the execution of at least one virtual machine . In another of these embodiments the hypervisor presents at least one virtual machine with an abstraction of at least one hardware resource provided by the computing device . In other embodiments the hypervisor controls whether and how physical processor capabilities are presented to the virtual machine .

A control operating system may execute at least one application for managing and configuring the guest operating systems. In one embodiment the control operating system may execute an administrative application such as an application including a user interface providing administrators with access to functionality for managing the execution of a virtual machine including functionality for executing a virtual machine terminating an execution of a virtual machine or identifying a type of physical resource for allocation to the virtual machine. In another embodiment the hypervisor executes the control operating system within a virtual machine created by the hypervisor . In still another embodiment the control operating system executes in a virtual machine that is authorized to directly access physical resources on the computing device . In some embodiments a control operating system on a computing device may exchange data with a control operating system on a computing device via communications between a hypervisor a and a hypervisor . In this way one or more computing devices may exchange data with one or more of the other computing devices regarding processors and other physical resources available in a pool of resources. In one of these embodiments this functionality allows a hypervisor to manage a pool of resources distributed across a plurality of physical computing devices. In another of these embodiments multiple hypervisors manage one or more of the guest operating systems executed on one of the computing devices .

In one embodiment the control operating system executes in a virtual machine that is authorized to interact with at least one guest operating system . In another embodiment a guest operating system communicates with the control operating system via the hypervisor in order to request access to a disk or a network. In still another embodiment the guest operating system and the control operating system may communicate via a communication channel established by the hypervisor such as for example via a plurality of shared memory pages made available by the hypervisor .

In some embodiments the control operating system includes a network back end driver for communicating directly with networking hardware provided by the computing device . In one of these embodiments the network back end driver processes at least one virtual machine request from at least one guest operating system . In other embodiments the control operating system includes a block back end driver for communicating with a storage element on the computing device . In one of these embodiments the block back end driver reads and writes data from the storage element based upon at least one request received from a guest operating system .

In one embodiment the control operating system includes a tools stack . In another embodiment a tools stack provides functionality for interacting with the hypervisor communicating with other control operating systems for example on a second computing device or managing virtual machines on the computing device . In another embodiment the tools stack includes customized applications for providing improved management functionality to an administrator of a virtual machine farm. In some embodiments at least one of the tools stack and the control operating system include a management API that provides an interface for remotely configuring and controlling virtual machines running on a computing device . In other embodiments the control operating system communicates with the hypervisor through the tools stack .

In one embodiment the hypervisor executes a guest operating system within a virtual machine created by the hypervisor . In another embodiment the guest operating system provides a user of the computing device with access to resources within a computing environment. In still another embodiment a resource includes a program an application a document a file a plurality of applications a plurality of files an executable program file a desktop environment a computing environment or other resource made available to a user of the computing device . In yet another embodiment the resource may be delivered to the computing device via a plurality of access methods including but not limited to conventional installation directly on the computing device delivery to the computing device via a method for application streaming delivery to the computing device of output data generated by an execution of the resource on a second computing device and communicated to the computing device via a presentation layer protocol delivery to the computing device of output data generated by an execution of the resource via a virtual machine executing on a second computing device or execution from a removable storage device connected to the computing device such as a USB device or via a virtual machine executing on the computing device and generating output data. In some embodiments the computing device transmits output data generated by the execution of the resource to another computing device .

In one embodiment the guest operating system in conjunction with the virtual machine on which it executes forms a fully virtualized virtual machine which is not aware that it is a virtual machine such a machine may be referred to as a Domain U HVM Hardware Virtual Machine virtual machine . In another embodiment a fully virtualized machine includes software emulating a Basic Input Output System BIOS in order to execute an operating system within the fully virtualized machine. In still another embodiment a fully virtualized machine may include a driver that provides functionality by communicating with the hypervisor . In such an embodiment the driver may be aware that it executes within a virtualized environment. In another embodiment the guest operating system in conjunction with the virtual machine on which it executes forms a paravirtualized virtual machine which is aware that it is a virtual machine such a machine may be referred to as a Domain U PV virtual machine . In another embodiment a paravirtualized machine includes additional drivers that a fully virtualized machine does not include. In still another embodiment the paravirtualized machine includes the network back end driver and the block back end driver included in a control operating system as described above.

Referring now to a block diagram depicts one embodiment of a plurality of networked computing devices in a system in which at least one physical host executes a virtual machine. In brief overview the system includes a management component and a hypervisor . The system includes a plurality of computing devices a plurality of virtual machines a plurality of hypervisors a plurality of management components referred to variously as tools stacks or management components and a physical resource . The plurality of physical machines may each be provided as computing devices described above in connection with and A.

In greater detail a physical disk is provided by a computing device and stores at least a portion of a virtual disk . In some embodiments a virtual disk is associated with a plurality of physical disks . In one of these embodiments one or more computing devices may exchange data with one or more of the other computing devices regarding processors and other physical resources available in a pool of resources allowing a hypervisor to manage a pool of resources distributed across a plurality of physical computing devices. In some embodiments a computing device on which a virtual machine executes is referred to as a physical host or as a host machine .

The hypervisor executes on a processor on the computing device . The hypervisor allocates to a virtual disk an amount of access to the physical disk. In one embodiment the hypervisor allocates an amount of space on the physical disk. In another embodiment the hypervisor allocates a plurality of pages on the physical disk. In some embodiments the hypervisor provisions the virtual disk as part of a process of initializing and executing a virtual machine .

In one embodiment the management component is referred to as a pool management component . In another embodiment a management operating system which may be referred to as a control operating system includes the management component. In some embodiments the management component is referred to as a tools stack. In one of these embodiments the management component is the tools stack described above in connection with . In other embodiments the management component provides a user interface for receiving from a user such as an administrator an identification of a virtual machine to provision and or execute. In still other embodiments the management component provides a user interface for receiving from a user such as an administrator the request for migration of a virtual machine from one physical machine to another. In further embodiments the management component identifies a computing device on which to execute a requested virtual machine and instructs the hypervisor on the identified computing device to execute the identified virtual machine such a management component may be referred to as a pool management component.

Referring now to embodiments of a virtual application delivery controller or virtual appliance are depicted. In brief overview any of the functionality and or embodiments of the appliance e.g. an application delivery controller described above in connection with may be deployed in any embodiment of the virtualized environment described above in connection with . Instead of the functionality of the application delivery controller being deployed in the form of an appliance such functionality may be deployed in a virtualized environment on any computing device such as a client server or appliance .

Referring now to a diagram of an embodiment of a virtual appliance operating on a hypervisor of a server is depicted. As with the appliance of the virtual appliance may provide functionality for availability performance offload and security. For availability the virtual appliance may perform load balancing between layers 4 and 7 of the network and may also perform intelligent service health monitoring. For performance increases via network traffic acceleration the virtual appliance may perform caching and compression. To offload processing of any servers the virtual appliance may perform connection multiplexing and pooling and or SSL processing. For security the virtual appliance may perform any of the application firewall functionality and SSL VPN function of appliance .

Any of the modules of the appliance as described in connection with may be packaged combined designed or constructed in a form of the virtualized appliance delivery controller deployable as one or more software modules or components executable in a virtualized environment or non virtualized environment on any server such as an off the shelf server. For example the virtual appliance may be provided in the form of an installation package to install on a computing device. With reference to any of the cache manager policy engine compression encryption engine packet engine GUI CLI shell services and health monitoring programs may be designed and constructed as a software component or module to run on any operating system of a computing device and or of a virtualized environment . Instead of using the encryption processor processor memory and network stack of the appliance the virtualized appliance may use any of these resources as provided by the virtualized environment or as otherwise available on the server .

Still referring to and in brief overview any one or more vServers A N may be in operation or executed in a virtualized environment of any type of computing device such as any server . Any of the modules or functionality of the appliance described in connection with may be designed and constructed to operate in either a virtualized or non virtualized environment of a server. Any of the vServer SSL VPN Intranet UP Switching DNS acceleration App FW and monitoring agent may be packaged combined designed or constructed in a form of application delivery controller deployable as one or more software modules or components executable on a device and or virtualized environment .

In some embodiments a server may execute multiple virtual machines in the virtualization environment with each virtual machine running the same or different embodiments of the virtual application delivery controller . In some embodiments the server may execute one or more virtual appliances on one or more virtual machines on a core of a multi core processing system. In some embodiments the server may execute one or more virtual appliances on one or more virtual machines on each processor of a multiple processor device.

In accordance with Moore s Law the number of transistors that may be placed on an integrated circuit may double approximately every two years. However CPU speed increases may reach plateaus for example CPU speed has been around 3.5 4 GHz range since 2005. In some cases CPU manufacturers may not rely on CPU speed increases to gain additional performance. Some CPU manufacturers may add additional cores to their processors to provide additional performance. Products such as those of software and networking vendors that rely on CPUs for performance gains may improve their performance by leveraging these multi core CPUs. The software designed and constructed for a single CPU may be redesigned and or rewritten to take advantage of a multi threaded parallel architecture or otherwise a multi core architecture.

A multi core architecture of the appliance referred to as nCore or multi core technology allows the appliance in some embodiments to break the single core performance barrier and to leverage the power of multi core CPUs. In the previous architecture described in connection with a single network or packet engine is run. The multiple cores of the nCore technology and architecture allow multiple packet engines to run concurrently and or in parallel. With a packet engine running on each core the appliance architecture leverages the processing capacity of additional cores. In some embodiments this provides up to a 7 increase in performance and scalability.

Illustrated in are some embodiments of work task load or network traffic distribution across one or more processor cores according to a type of parallelism or parallel computing scheme such as functional parallelism data parallelism or flow based data parallelism. In brief overview illustrates embodiments of a multi core system such as an appliance with n cores a total of cores numbers through N. In one embodiment work load or network traffic can be distributed among a first core A a second core B a third core C a fourth core D a fifth core E a sixth core F a seventh core G and so on such that distribution is across all or two or more of the n cores N hereinafter referred to collectively as cores . There may be multiple VIPs each running on a respective core of the plurality of cores. There may be multiple packet engines each running on a respective core of the plurality of cores. Any of the approaches used may lead to different varying or similar work load or performance level across any of the cores. For a functional parallelism approach each core may run a different function of the functionalities provided by the packet engine a VIP or appliance . In a data parallelism approach data may be paralleled or distributed across the cores based on the Network Interface Card NIC or VIP receiving the data. In another data parallelism approach processing may be distributed across the cores by distributing data flows to each core.

In further detail to in some embodiments load work or network traffic can be distributed among cores according to functional parallelism . Functional parallelism may be based on each core performing one or more respective functions. In some embodiments a first core may perform a first function while a second core performs a second function. In functional parallelism approach the functions to be performed by the multi core system are divided and distributed to each core according to functionality. In some embodiments functional parallelism may be referred to as task parallelism and may be achieved when each processor or core executes a different process or function on the same or different data. The core or processor may execute the same or different code. In some cases different execution threads or code may communicate with one another as they work. Communication may take place to pass data from one thread to the next as part of a workflow.

In some embodiments distributing work across the cores according to functional parallelism can comprise distributing network traffic according to a particular function such as network input output management NW I O A secure sockets layer SSL encryption and decryption B and transmission control protocol TCP functions C. This may lead to a work performance or computing load based on a volume or level of functionality being used. In some embodiments distributing work across the cores according to data parallelism can comprise distributing an amount of work based on distributing data associated with a particular hardware or software component. In some embodiments distributing work across the cores according to flow based data parallelism can comprise distributing data based on a context or flow such that the amount of work A N on each core may be similar substantially equal or relatively evenly distributed.

In the case of the functional parallelism approach each core may be configured to run one or more functionalities of the plurality of functionalities provided by the packet engine or VIP of the appliance. For example core may perform network I O processing for the appliance while core performs TCP connection management for the appliance. Likewise core may perform SSL offloading while core may perform layer 7 or application layer processing and traffic management. Each of the cores may perform the same function or different functions. Each of the cores may perform more than one function. Any of the cores may run any of the functionality or portions thereof identified and or described in conjunction with . In this the approach the work across the cores may be divided by function in either a coarse grained or fine grained manner. In some cases as illustrated in division by function may lead to different cores running at different levels of performance or load .

In the case of the functional parallelism approach each core may be configured to run one or more functionalities of the plurality of functionalities provided by the packet engine of the appliance. For example core may perform network I O processing for the appliance while core performs TCP connection management for the appliance. Likewise core may perform SSL offloading while core may perform layer 7 or application layer processing and traffic management. Each of the cores may perform the same function or different functions. Each of the cores may perform more than one function. Any of the cores may run any of the functionality or portions thereof identified and or described in conjunction with . In this the approach the work across the cores may be divided by function in either a coarse grained or fine grained manner. In some cases as illustrated in division by function may lead to different cores running at different levels of load or performance.

The functionality or tasks may be distributed in any arrangement and scheme. For example illustrates a first core Core A processing applications and processes associated with network I O functionality A. Network traffic associated with network I O in some embodiments can be associated with a particular port number. Thus outgoing and incoming packets having a port destination associated with NW I O A will be directed towards Core A which is dedicated to handling all network traffic associated with the NW I O port. Similarly Core B is dedicated to handling functionality associated with SSL processing and Core D may be dedicated handling all TCP level processing and functionality.

While illustrates functions such as network I O SSL and TCP other functions can be assigned to cores. These other functions can include any one or more of the functions or operations described herein. For example any of the functions described in conjunction with may be distributed across the cores on a functionality basis. In some cases a first VIP A may run on a first core while a second VIP B with a different configuration may run on a second core. In some embodiments each core can handle a particular functionality such that each core can handle the processing associated with that particular function. For example Core B may handle SSL offloading while Core D may handle application layer processing and traffic management.

In other embodiments work load or network traffic may be distributed among cores according to any type and form of data parallelism . In some embodiments data parallelism may be achieved in a multi core system by each core performing the same task or functionally on different pieces of distributed data. In some embodiments a single execution thread or code controls operations on all pieces of data. In other embodiments different threads or instructions control the operation but may execute the same code. In some embodiments data parallelism is achieved from the perspective of a packet engine vServers VIPs A C network interface cards NIC D E and or any other networking hardware or software included on or associated with an appliance . For example each core may run the same packet engine or VIP code or configuration but operate on different sets of distributed data. Each networking hardware or software construct can receive different varying or substantially the same amount of data and as a result may have varying different or relatively the same amount of load .

In the case of a data parallelism approach the work may be divided up and distributed based on VIPs NICs and or data flows of the VIPs or NICs. In one of these approaches the work of the multi core system may be divided or distributed among the VIPs by having each VIP work on a distributed set of data. For example each core may be configured to run one or more VIPs. Network traffic may be distributed to the core for each VIP handling that traffic. In another of these approaches the work of the appliance may be divided or distributed among the cores based on which NIC receives the network traffic. For example network traffic of a first NIC may be distributed to a first core while network traffic of a second NIC may be distributed to a second core. In some cases a core may process data from multiple NICs.

While illustrates a single vServer associated with a single core as is the case for VIP A VIP B and VIP C. In some embodiments a single vServer can be associated with one or more cores . In contrast one or more vServers can be associated with a single core . Associating a vServer with a core may include that core to process all functions associated with that particular vServer. In some embodiments each core executes a VIP having the same code and configuration. In other embodiments each core executes a VIP having the same code but different configuration. In some embodiments each core executes a VIP having different code and the same or different configuration.

Like vServers NICs can also be associated with particular cores . In many embodiments NICs can be connected to one or more cores such that when a NIC receives or transmits data packets a particular core handles the processing involved with receiving and transmitting the data packets. In one embodiment a single NIC can be associated with a single core as is the case with NIC D and NIC E. In other embodiments one or more NICs can be associated with a single core . In other embodiments a single NIC can be associated with one or more cores . In these embodiments load could be distributed amongst the one or more cores such that each core processes a substantially similar amount of load. A core associated with a NIC may process all functions and or data associated with that particular NIC.

While distributing work across cores based on data of VIPs or NICs may have a level of independency in some embodiments this may lead to unbalanced use of cores as illustrated by the varying loads of .

In some embodiments load work or network traffic can be distributed among cores based on any type and form of data flow. In another of these approaches the work may be divided or distributed among cores based on data flows. For example network traffic between a client and a server traversing the appliance may be distributed to and processed by one core of the plurality of cores. In some cases the core initially establishing the session or connection may be the core for which network traffic for that session or connection is distributed. In some embodiments the data flow is based on any unit or portion of network traffic such as a transaction a request response communication or traffic originating from an application on a client. In this manner and in some embodiments data flows between clients and servers traversing the appliance may be distributed in a more balanced manner than the other approaches.

In flow based data parallelism distribution of data is related to any type of flow of data such as request response pairings transactions sessions connections or application communications. For example network traffic between a client and a server traversing the appliance may be distributed to and processed by one core of the plurality of cores. In some cases the core initially establishing the session or connection may be the core for which network traffic for that session or connection is distributed. The distribution of data flow may be such that each core carries a substantially equal or relatively evenly distributed amount of load data or network traffic.

In some embodiments the data flow is based on any unit or portion of network traffic such as a transaction a request response communication or traffic originating from an application on a client. In this manner and in some embodiments data flows between clients and servers traversing the appliance may be distributed in a more balanced manner than the other approached. In one embodiment data flow can be distributed based on a transaction or a series of transactions. This transaction in some embodiments can be between a client and a server and can be characterized by an IP address or other packet identifier. For example Core A can be dedicated to transactions between a particular client and a particular server therefore the load A on Core A may be comprised of the network traffic associated with the transactions between the particular client and server. Allocating the network traffic to Core A can be accomplished by routing all data packets originating from either the particular client or server to Core A.

While work or load can be distributed to the cores based in part on transactions in other embodiments load or work can be allocated on a per packet basis. In these embodiments the appliance can intercept data packets and allocate them to a core having the least amount of load. For example the appliance could allocate a first incoming data packet to Core A because the load A on Core is less than the load B N on the rest of the cores B N. Once the first data packet is allocated to Core A the amount of load A on Core A is increased proportional to the amount of processing resources needed to process the first data packet. When the appliance intercepts a second data packet the appliance will allocate the load to Core D because Core D has the second least amount of load. Allocating data packets to the core with the least amount of load can in some embodiments ensure that the load A N distributed to each core remains substantially equal.

In other embodiments load can be allocated on a per unit basis where a section of network traffic is allocated to a particular core . The above mentioned example illustrates load balancing on a per packet basis. In other embodiments load can be allocated based on a number of packets such that every 10 100 or 1000 packets are allocated to the core having the least amount of load. The number of packets allocated to a core can be a number determined by an application user or administrator and can be any number greater than zero. In still other embodiments load can be allocated based on a time metric such that packets are distributed to a particular core for a predetermined amount of time. In these embodiments packets can be distributed to a particular core for five milliseconds or for any period of time determined by a user program system administrator or otherwise. After the predetermined time period elapses data packets are transmitted to a different core for the predetermined period of time.

Flow based data parallelism methods for distributing work load or network traffic among the one or more cores can comprise any combination of the above mentioned embodiments. These methods can be carried out by any part of the appliance by an application or set of executable instructions executing on one of the cores such as the packet engine or by any application program or agent executing on a computing device in communication with the appliance .

The functional and data parallelism computing schemes illustrated in can be combined in any manner to generate a hybrid parallelism or distributed processing scheme that encompasses function parallelism data parallelism flow based data parallelism or any portions thereof. In some cases the multi core system may use any type and form of load balancing schemes to distribute load among the one or more cores . The load balancing scheme may be used in any combination with any of the functional and data parallelism schemes or combinations thereof.

Illustrated in is an embodiment of a multi core system which may be any type and form of one or more systems appliances devices or components. This system in some embodiments can be included within an appliance having one or more processing cores A N. The system can further include one or more packet engines PE or packet processing engines PPE A N communicating with a memory bus . The memory bus may be used to communicate with the one or more processing cores A N. Also included within the system can be one or more network interface cards NIC and a flow distributor which can further communicate with the one or more processing cores A N. The flow distributor can comprise a Receive Side Scaler RSS or Receive Side Scaling RSS module .

Further referring to and in more detail in one embodiment the packet engine s A N can comprise any portion of the appliance described herein such as any portion of the appliance described in . The packet engine s A N can in some embodiments comprise any of the following elements the packet engine a network stack a cache manager a policy engine a compression engine an encryption engine a GUI a CLI shell services monitoring programs and any other software or hardware element able to receive data packets from one of either the memory bus or the one of more cores A N. In some embodiments the packet engine s A N can comprise one or more vServers A N or any portion thereof. In other embodiments the packet engine s A N can provide any combination of the following functionalities SSL VPN Intranet UP switching DNS packet acceleration App FW monitoring such as the monitoring provided by a monitoring agent functionalities associated with functioning as a TCP stack load balancing SSL offloading and processing content switching policy evaluation caching compression encoding decompression decoding application firewall functionalities XML processing and acceleration and SSL VPN connectivity.

The packet engine s A N can in some embodiments be associated with a particular server user client or network. When a packet engine becomes associated with a particular entity that packet engine can process data packets associated with that entity. For example should a packet engine be associated with a first user that packet engine will process and operate on packets generated by the first user or packets having a destination address associated with the first user. Similarly the packet engine may choose not to be associated with a particular entity such that the packet engine can process and otherwise operate on any data packets not generated by that entity or destined for that entity.

In some instances the packet engine s A N can be configured to carry out the any of the functional and or data parallelism schemes illustrated in . In these instances the packet engine s A N can distribute functions or data among the processing cores A N so that the distribution is according to the parallelism or distribution scheme. In some embodiments a single packet engine s A N carries out a load balancing scheme while in other embodiments one or more packet engine s A N carry out a load balancing scheme. Each core A N in one embodiment can be associated with a particular packet engine such that load balancing can be carried out by the packet engine. Load balancing may in this embodiment require that each packet engine A N associated with a core communicate with the other packet engines associated with cores so that the packet engines A N can collectively determine where to distribute load. One embodiment of this process can include an arbiter that receives votes from each packet engine for load. The arbiter can distribute load to each packet engine A N based in part on the age of the engine s vote and in some cases a priority value associated with the current amount of load on an engine s associated core .

Any of the packet engines running on the cores may run in user mode kernel or any combination thereof. In some embodiments the packet engine operates as an application or program running is user or application space. In these embodiments the packet engine may use any type and form of interface to access any functionality provided by the kernel. In some embodiments the packet engine operates in kernel mode or as part of the kernel. In some embodiments a first portion of the packet engine operates in user mode while a second portion of the packet engine operates in kernel mode. In some embodiments a first packet engine on a first core executes in kernel mode while a second packet engine on a second core executes in user mode. In some embodiments the packet engine or any portions thereof operates on or in conjunction with the NIC or any drivers thereof.

In some embodiments the memory bus can be any type and form of memory or computer bus. While a single memory bus is depicted in the system can comprise any number of memory buses . In one embodiment each packet engine can be associated with one or more individual memory buses .

The NIC can in some embodiments be any of the network interface cards or mechanisms described herein. The NIC can have any number of ports. The NIC can be designed and constructed to connect to any type and form of network . While a single NIC is illustrated the system can comprise any number of NICs . In some embodiments each core A N can be associated with one or more single NICs . Thus each core can be associated with a single NIC dedicated to a particular core .

The cores A N can comprise any of the processors described herein. Further the cores A N can be configured according to any of the core configurations described herein. Still further the cores A N can have any of the core functionalities described herein. While illustrates seven cores A G any number of cores can be included within the system . In particular the system can comprise N cores where N is a whole number greater than zero.

A core may have or use memory that is allocated or assigned for use to that core. The memory may be considered private or local memory of that core and only accessible by that core. A core may have or use memory that is shared or assigned to multiple cores. The memory may be considered public or shared memory that is accessible by more than one core. A core may use any combination of private and public memory. With separate address spaces for each core some level of coordination is eliminated from the case of using the same address space. With a separate address space a core can perform work on information and data in the core s own address space without worrying about conflicts with other cores. Each packet engine may have a separate memory pool for TCP and or SSL connections.

Further referring to any of the functionality and or embodiments of the cores described above in connection with can be deployed in any embodiment of the virtualized environment described above in connection with . Instead of the functionality of the cores being deployed in the form of a physical processor such functionality may be deployed in a virtualized environment on any computing device such as a client server or appliance . In other embodiments instead of the functionality of the cores being deployed in the form of an appliance or a single device the functionality may be deployed across multiple devices in any arrangement. For example one device may comprise two or more cores and another device may comprise two or more cores. For example a multi core system may include a cluster of computing devices a server farm or network of computing devices. In some embodiments instead of the functionality of the cores being deployed in the form of cores the functionality may be deployed on a plurality of processors such as a plurality of single core processors.

In one embodiment the cores may be any type and form of processor. In some embodiments a core can function substantially similar to any processor or central processing unit described herein. In some embodiment the cores may comprise any portion of any processor described herein. While illustrates seven cores there can exist any N number of cores within an appliance where N is any whole number greater than one. In some embodiments the cores can be installed within a common appliance while in other embodiments the cores can be installed within one or more appliance s communicatively connected to one another. The cores can in some embodiments comprise graphics processing software while in other embodiments the cores provide general processing capabilities. The cores can be installed physically near each other and or can be communicatively connected to each other. The cores may be connected by any type and form of bus or subsystem physically and or communicatively coupled to the cores for transferring data between to from and or between the cores.

While each core can comprise software for communicating with other cores in some embodiments a core manager not shown can facilitate communication between each core .

In some embodiments the kernel may provide core management. The cores may interface or communicate with each other using a variety of interface mechanisms. In some embodiments core to core messaging may be used to communicate between cores such as a first core sending a message or data to a second core via a bus or subsystem connecting the cores. In some embodiments cores may communicate via any type and form of shared memory interface. In one embodiment there may be one or more memory locations shared among all the cores. In some embodiments each core may have separate memory locations shared with each other core. For example a first core may have a first shared memory with a second core and a second share memory with a third core. In some embodiments cores may communicate via any type of programming or API such as function calls via the kernel. In some embodiments the operating system may recognize and support multiple core devices and provide interfaces and API for inter core communications.

The flow distributor can be any application program library script task service process or any type and form of executable instructions executing on any type and form of hardware. In some embodiments the flow distributor may any design and construction of circuitry to perform any of the operations and functions described herein. In some embodiments the flow distributor distribute forwards routes controls and ors manage the distribution of data packets among the cores and or packet engine or VIPs running on the cores. The flow distributor in some embodiments can be referred to as an interface master. In one embodiment the flow distributor comprises a set of executable instructions executing on a core or processor of the appliance . In another embodiment the flow distributor comprises a set of executable instructions executing on a computing machine in communication with the appliance . In some embodiments the flow distributor comprises a set of executable instructions executing on a NIC such as firmware. In still other embodiments the flow distributor comprises any combination of software and hardware to distribute data packets among cores or processors. In one embodiment the flow distributor executes on at least one of the cores A N while in other embodiments a separate flow distributor assigned to each core A N executes on an associated core A N. The flow distributor may use any type and form of statistical or probabilistic algorithms or decision making to balance the flows across the cores. The hardware of the appliance such as a NIC or the kernel may be designed and constructed to support sequential operations across the NICs and or cores.

In embodiments where the system comprises one or more flow distributors each flow distributor can be associated with a processor or a packet engine . The flow distributors can comprise an interface mechanism that allows each flow distributor to communicate with the other flow distributors executing within the system . In one instance the one or more flow distributors can determine how to balance load by communicating with each other. This process can operate substantially similarly to the process described above for submitting votes to an arbiter which then determines which flow distributor should receive the load. In other embodiments a first flow distributor can identify the load on an associated core and determine whether to forward a first data packet to the associated core based on any of the following criteria the load on the associated core is above a predetermined threshold the load on the associated core is below a predetermined threshold the load on the associated core is less than the load on the other cores or any other metric that can be used to determine where to forward data packets based in part on the amount of load on a processor.

The flow distributor can distribute network traffic among the cores according to a distribution computing or load balancing scheme such as those described herein. In one embodiment the flow distributor can distribute network traffic according to any one of a functional parallelism distribution scheme a data parallelism load distribution scheme a flow based data parallelism distribution scheme or any combination of these distribution scheme or any load balancing scheme for distributing load among multiple processors. The flow distributor can therefore act as a load distributor by taking in data packets and distributing them across the processors according to an operative load balancing or distribution scheme. In one embodiment the flow distributor can comprise one or more operations functions or logic to determine how to distribute packers work or load accordingly. In still other embodiments the flow distributor can comprise one or more sub operations functions or logic that can identify a source address and a destination address associated with a data packet and distribute packets accordingly.

In some embodiments the flow distributor can comprise a receive side scaling RSS network driver module or any type and form of executable instructions which distribute data packets among the one or more cores . The RSS module can comprise any combination of hardware and software In some embodiments the RSS module works in conjunction with the flow distributor to distribute data packets across the cores A N or among multiple processors in a multi processor network. The RSS module can execute within the NIC in some embodiments and in other embodiments can execute on any one of the cores .

In some embodiments the RSS module uses the MICROSOFT receive side scaling RSS scheme. In one embodiment RSS is a Microsoft Scalable Networking initiative technology that enables receive processing to be balanced across multiple processors in the system while maintaining in order delivery of the data. The RSS may use any type and form of hashing scheme to determine a core or processor for processing a network packet.

The RSS module can apply any type and form hash function such as the Toeplitz hash function. The hash function may be applied to the hash type or any the sequence of values. The hash function may be a secure hash of any security level or is otherwise cryptographically secure. The hash function may use a hash key. The size of the key is dependent upon the hash function. For the Toeplitz hash the size may be 40 bytes for IPv6 and 16 bytes for IPv4.

The hash function may be designed and constructed based on any one or more criteria or design goals. In some embodiments a hash function may be used that provides an even distribution of hash result for different hash inputs and different hash types including TCP IPv4 TCP IPv6 IPv4 and IPv6 headers. In some embodiments a hash function may be used that provides a hash result that is evenly distributed when a small number of buckets are present for example two or four . In some embodiments hash function may be used that provides a hash result that is randomly distributed when a large number of buckets were present for example 64 buckets . In some embodiments the hash function is determined based on a level of computational or resource usage. In some embodiments the hash function is determined based on ease or difficulty of implementing the hash in hardware. In some embodiments the hash function is determined based on the ease or difficulty of a malicious remote host to send packets that would all hash to the same bucket.

The RSS may generate hashes from any type and form of input such as a sequence of values. This sequence of values can include any portion of the network packet such as any header field or payload of network packet or portions thereof. In some embodiments the input to the hash may be referred to as a hash type and include any tuples of information associated with a network packet or data flow such as any of the following a four tuple comprising at least two IP addresses and two ports a four tuple comprising any four sets of values a six tuple a two tuple and or any other sequence of numbers or values. The following are example of hash types that may be used by RSS 

The hash result or any portion thereof may used to identify a core or entity such as a packet engine or VIP for distributing a network packet. In some embodiments one or more hash bits or mask are applied to the hash result. The hash bit or mask may be any number of bits or bytes. A NIC may support any number of bits such as seven bits. The network stack may set the actual number of bits to be used during initialization. The number will be between 1 and 7 inclusive.

The hash result may be used to identify the core or entity via any type and form of table such as a bucket table or indirection table. In some embodiments the number of hash result bits are used to index into the table. The range of the hash mask may effectively define the size of the indirection table. Any portion of the hash result or the hast result itself may be used to index the indirection table. The values in the table may identify any of the cores or processor such as by a core or processor identifier. In some embodiments all of the cores of the multi core system are identified in the table. In other embodiments a port of the cores of the multi core system are identified in the table. The indirection table may comprise any number of buckets for example 2 to 128 buckets that may be indexed by a hash mask. Each bucket may comprise a range of index values that identify a core or processor. In some embodiments the flow controller and or RSS module may rebalance the network rebalance the network load by changing the indirection table.

In some embodiments the multi core system does not include a RSS driver or RSS module . In some of these embodiments a software steering module not shown or a software embodiment of the RSS module within the system can operate in conjunction with or as part of the flow distributor to steer packets to cores within the multi core system .

The flow distributor in some embodiments executes within any module or program on the appliance on any one of the cores and on any one of the devices or components included within the multi core system . In some embodiments the flow distributor can execute on the first core A while in other embodiments the flow distributor can execute on the NIC . In still other embodiments an instance of the flow distributor can execute on each core included in the multi core system . In this embodiment each instance of the flow distributor can communicate with other instances of the flow distributor to forward packets back and forth across the cores . There exist situations where a response to a request packet may not be processed by the same core i.e. the first core processes the request while the second core processes the response. In these situations the instances of the flow distributor can intercept the packet and forward it to the desired or correct core i.e. a flow distributor instance can forward the response to the first core. Multiple instances of the flow distributor can execute on any number of cores and any combination of cores .

The flow distributor may operate responsive to any one or more rules or policies. The rules may identify a core or packet processing engine to receive a network packet data or data flow. The rules may identify any type and form of tuple information related to a network packet such as a 4 tuple of source and destination IP address and source and destination ports. Based on a received packet matching the tuple specified by the rule the flow distributor may forward the packet to a core or packet engine. In some embodiments the packet is forwarded to a core via shared memory and or core to core messaging.

Although illustrates the flow distributor as executing within the multi core system in some embodiments the flow distributor can execute on a computing device or appliance remotely located from the multi core system . In such an embodiment the flow distributor can communicate with the multi core system to take in data packets and distribute the packets across the one or more cores . The flow distributor can in one embodiment receive data packets destined for the appliance apply a distribution scheme to the received data packets and distribute the data packets to the one or more cores of the multi core system . In one embodiment the flow distributor can be included in a router or other appliance such that the router can target particular cores by altering meta data associated with each packet so that each packet is targeted towards a sub node of the multi core system . In such an embodiment CISCO s vn tag mechanism can be used to alter or tag each packet with the appropriate meta data.

Illustrated in is an embodiment of a multi core system comprising one or more processing cores A N. In brief overview one of the cores can be designated as a control core A and can be used as a control plane for the other cores . The other cores may be secondary cores which operate in a data plane while the control core provides the control plane. The cores A N may share a global cache . While the control core provides a control plane the other cores in the multi core system form or provide a data plane. These cores perform data processing functionality on network traffic while the control provides initialization configuration and control of the multi core system.

Further referring to and in more detail the cores A N as well as the control core A can be any processor described herein. Furthermore the cores A N and the control core A can be any processor able to function within the system described in . Still further the cores A N and the control core A can be any core or group of cores described herein. The control core may be a different type of core or processor than the other cores. In some embodiments the control may operate a different packet engine or have a packet engine configured differently than the packet engines of the other cores.

Any portion of the memory of each of the cores may be allocated to or used for a global cache that is shared by the cores. In brief overview a predetermined percentage or predetermined amount of each of the memory of each core may be used for the global cache. For example 50 of each memory of each code may be dedicated or allocated to the shared global cache. That is in the illustrated embodiment 2 GB of each core excluding the control plane core or core may be used to form a 28 GB shared global cache. The configuration of the control plane such as via the configuration services may determine the amount of memory used for the shared global cache. In some embodiments each core may provide a different amount of memory for use by the global cache. In other embodiments any one core may not provide any memory or use the global cache. In some embodiments any of the cores may also have a local cache in memory not allocated to the global shared memory. Each of the cores may store any portion of network traffic to the global shared cache. Each of the cores may check the cache for any content to use in a request or response. Any of the cores may obtain content from the global shared cache to use in a data flow request or response.

The global cache can be any type and form of memory or storage element such as any memory or storage element described herein. In some embodiments the cores may have access to a predetermined amount of memory i.e. 32 GB or any other memory amount commensurate with the system . The global cache can be allocated from that predetermined amount of memory while the rest of the available memory can be allocated among the cores . In other embodiments each core can have a predetermined amount of memory. The global cache can comprise an amount of the memory allocated to each core . This memory amount can be measured in bytes or can be measured as a percentage of the memory allocated to each core . Thus the global cache can comprise 1 GB of memory from the memory associated with each core or can comprise 20 percent or one half of the memory associated with each core . In some embodiments only a portion of the cores provide memory to the global cache while in other embodiments the global cache can comprise memory not allocated to the cores .

Each core can use the global cache to store network traffic or cache data. In some embodiments the packet engines of the core use the global cache to cache and use data stored by the plurality of packet engines. For example the cache manager of and cache functionality of may use the global cache to share data for acceleration. For example each of the packet engines may store responses such as HTML data to the global cache. Any of the cache managers operating on a core may access the global cache to server caches responses to client requests.

In some embodiments the cores can use the global cache to store a port allocation table which can be used to determine data flow based in part on ports. In other embodiments the cores can use the global cache to store an address lookup table or any other table or list that can be used by the flow distributor to determine where to direct incoming and outgoing data packets. The cores can in some embodiments read from and write to cache while in other embodiments the cores can only read from or write to cache . The cores may use the global cache to perform core to core communications.

The global cache may be sectioned into individual memory sections where each section can be dedicated to a particular core . In one embodiment the control core A can receive a greater amount of available cache while the other cores can receiving varying amounts or access to the global cache .

In some embodiments the system can comprise a control core A. While illustrates core A as the control core the control core can be any core within the appliance or multi core system. Further while only a single control core is depicted the system can comprise one or more control cores each having a level of control over the system. In some embodiments one or more control cores can each control a particular aspect of the system . For example one core can control deciding which distribution scheme to use while another core can determine the size of the global cache .

The control plane of the multi core system may be the designation and configuration of a core as the dedicated management core or as a master core. This control plane core may provide control management and coordination of operation and functionality the plurality of cores in the multi core system. This control plane core may provide control management and coordination of allocation and use of memory of the system among the plurality of cores in the multi core system including initialization and configuration of the same. In some embodiments the control plane includes the flow distributor for controlling the assignment of data flows to cores and the distribution of network packets to cores based on data flows. In some embodiments the control plane core runs a packet engine and in other embodiments the control plane core is dedicated to management and control of the other cores of the system.

The control core A can exercise a level of control over the other cores such as determining how much memory should be allocated to each core or determining which core should be assigned to handle a particular function or hardware software entity. The control core A in some embodiments can exercise control over those cores within the control plan . Thus there can exist processors outside of the control plane which are not controlled by the control core A. Determining the boundaries of the control plane can include maintaining by the control core A or agent executing within the system a list of those cores controlled by the control core A. The control core A can control any of the following initialization of a core determining when a core is unavailable re distributing load to other cores when one core fails determining which distribution scheme to implement determining which core should receive network traffic determining how much cache should be allocated to each core determining whether to assign a particular function or element to a particular core determining whether to permit cores to communicate with one another determining the size of the global cache and any other determination of a function configuration or operation of the cores within the system .

Cookies may be used for maintaining a state of a system or a memory of a previous event transaction or communication between two entities on a network. In some cases cookies may be utilized for various types of session tracking. Cookie management may be referred to as a feature of a network device such as an intermediary and may provide a way to manage a server or a client in creating utilizing or controlling cookies transmitted between the server and the client . Embodiments of the intermediary described herein provide ways to manage cookies for the client and the server. In some embodiments the intermediary manages server consumed cookies on the server side while not sending cookies to the client browser.

Referring now to an embodiment of a clientless virtual private network VPN environment for accessing a server via an appliance or proxy is depicted. In brief overview the client operates on computing device and executes a browser operated by a user. The client may be on a first network such as a public network. A user on the client may request via the browser access to a resource on a second network such as a private network of an enterprise. The appliance provides the user a clientless VPN access to the requested resource. The client may not install execute or otherwise any agent component program driver or application that is constructed and or designed to provide VPN connectivity referred to as client based VPN to the network . Instead the appliance or proxy may rewrite responses from the server and requests from the client to provide VPN functionality without the user of a VPN agent operating on the client. For example the appliance may rewrite Uniform Resource Locators URLs between the client and server such as URLs in any content server by the server or requests transmitted by the client. The appliance may rewrite URLs between the client and the server in a manner transparent and seamless to either or both of the client and the server. As such the client browser or server and server application do not need to have knowledge or be aware of the clientless SSL VPN access scenario.

The appliance may provide via an SSL VPN module previously described herein a facility for accessing a resource. In one embodiment the appliance provides a client based access to a network by providing installing or executing an SSL VPN agent on the client for communicating with the appliance . In some embodiments the appliance provides for clientless SSL VPN access to a resource such as an http https file share without having to download an SSL VPN client or agent to the client . For example a user may want to access the resources within company from an outside machine such at a kiosk on which he does not have privilege to install the client or does not want to go through the client installation process. The clientless SSL VPN feature is also useful when the SSL VPN client is not supported for the device e.g. new PDA in market but the device run an SSL enabled browser. In other embodiments the appliance chooses for a user between client based and clientless SSL VPN access to the resource based on policy and any policy rules actions and or conditions.

The client may include any type and form of user agent which may be a browser editor spider web traversing robots or any other end user tool or program. The client may include any type and form of browser. In one embodiment the browser is any version of Internet Explorer manufactured by Microsoft Corporation of Redmond Wash. In another embodiment the browser is any version of the Netscape browser manufactured by the Netscape Communications Corporation. In other embodiments the browser is any version of the open source browser referred to as Firefox and provided by Mozilla Foundation of California and found at www.mozilla.com. In yet another embodiment the browser is any version of the browser referred to as Opera manufactured by Opera Software ASA of Oslo Norway. In some embodiments the client executes or includes any type and form of application or program for displaying web pages web content HTML XML CSS Cascading Style Sheets JavaScript or HTTP content.

In operation of the embodiment depicted by a user logs in at the SSL VPN site provided by the appliance such at a domain name and IP address hosted by the appliance . For example the user via a browser of the client may select or enter a URL to the SSL VPN site. The appliance may authenticate the user and may further determine authorization of the user to access the appliance or the SSL VPN site. After successful authentication the appliance serves a portal page to the client to display to the user via the browser. The portal page may include a navigation box such as a set of one or more user interface elements for a user to select to operate or run an application. The portal page may include links to other pages or URLs to which the user may have access. The URLs or links on the portal page may reference or identify the host name or IP address of the SSL VPN site provided by the appliance .

The user via the portal page may select one or more URLs for example by clicking on an active hyperlink or URL. In response the browser or client transmits a request to the domain hosted by the appliance . For example as depicted in the user may request an application of the server via the appliance https sslvpn.x.com cvpn http server.x.com app.cgi . In some embodiments the user sends another request such as for example https proxy.x.com cvpn http server.x.com app.cgi . The appliance receives the request from the client and rewrites the request to transmit to the server. For example as depicted in the appliance may remove or strip the domain name hosted by the appliance such as sslvpn.x.com or proxy.x.com and forward the remaining portion of the request to the server .

In response to the request the server serves content to the client. The content or body of the response may include embedded links or URLs to other pages of the server or to other servers on the network such as embedded links to http server.x.com app.cgi . The appliance rewrites the header and body to modify any URLs to reference the domain name or IP address of the SSL VPN site so that any further URL or link selection via the browser of the client communicates requests to the appliance . The appliance communicates the modified content to the client . The appliance such as via the AppFw sometimes referred to as AppSecure module may be designed and constructed to rewrite URLs of requests and responses based on policy of a policy engine. The links URLs in that page and other pages received subsequently from the server during this SSL VPN session are modified by the appliance in such a way that the links point to the SSL VPN site VPN VIP and the original request URL absolute or relative is encoded within that request URL.

Referring now to another embodiment of a VPN environment for providing VPN access as well as cookie management is depicted. In brief overview the appliance may include a VPN module for handling any of the SSL VPN functionality clientless and or client based as described herein. The appliance and or VPN module may have an AAA module to perform any type and form of authentication authorization and auditing AAA and or to track and manage VPN session information. The AAA module may also perform any type and form of VPN session look to determine the VPN session for any client request. The VPN module may also perform an URL decoding and covert the URL to server format such as to submit to a server on the private network. VPN module also includes DNS lookup functionality and authorization via VPN handler function logic or operation.

The appliance may include a cookie proxy or cookie manager for storing tracking and managing cookies between the client and the server. The cookie may include cookie storage referred to as a cookie jar for adding or inserting cookies as well as removing cookies. The cookie manager or proxy may include functions logic or operations to store and look up cookie information in a cookie jar by URL domain name or other information of the request and or response. In some embodiments the appliance manages cookies on the behalf of clients that do not support cookies disabled cookies or for cases where it may be desired or preferred not to send cookies to the client.

The appliance may also include an AppFW also referred to as AppSecure in the context of an appliance manufactured by Citrix Systems Inc. The AppSecure module may include logic functions or operations for perform any type and form of content rewriting such as URL rewriting. In some embodiments the AppSecure module performs any type and form of content injection into a request and or response between a client and a server. In one embodiment the AppSecure module injects scripts into a response to the client such as a JavaScript to perform any type and form of desired functionality.

Any of the components of the appliance used for clientless SSL VPN access may be responsive to or driven by configuration such as via any one or more policies of the policy engine. The policies may direct and determine the type and form of URL encoding and decoding performed by the VPN module. In some embodiments the policies may direct and determine how and when the cookie proxy manages and proxies cookies. In other embodiments the policies may direct and determine how and when the AppSecure module performs URL rewriting and or content injection. The policies may direct the way a user access the private network and applications on the private networks. Policies may be configured based on access scenarios which can include access based on any combination of a user type and form of client type and form of network type of resources accessed types of applications used temporal information as well as any information that may be determined by the appliance via network traffic traversing thereto.

With reference to a flow of packets via the appliance for clientless SSL VPN access is discussed. In response to a successful login request the VPN appliance may send a portal page to the sender of the login request. The portal page may have one or more links in vpn encoded form as described in connection with . The portal page flows through the response code path described below. When a user clicks on any of the URLs in the portal page the packet flow may be implemented in a number of ways and using a number of steps. In some embodiments for request path at step Q the appliance may receive a URL request and look up the VPN session in the AAA module. At step Q the appliance may decode the VPN encoded URL to the expected URL for the server or the network . The appliance may also modify the header of the request such as the header values to server format or a format intended for transmission and use by the server such as the HTTP server for example. The appliance may reparse the header so that any other modules of the appliance see the request in the server format. At step Q in the request path the appliance via the cookie manager or proxy may look up the cookie for the request based on the domain and path of the URL. In some cases if the request should include a cookie the appliance may insert the cookie from a cookie jar. At step Q the appliance may resolve the domain name of the server present in the URL into an IP address of the server via a DNS lookup function module of the appliance. The appliance may create server information based on the DNS lookup in the AAA module. In addition authorization policies may be evaluated to determine if the request may be transmitted to the server. At step Q the appliance may send the request to the server. In some embodiments the appliance sends the request to the server provided that the authorization is successful.

In the response path from the server to the client via the appliance at step S the appliance may receive the response from the server. The VPN module may process the response. The VPN module may pass the response header to the cookie proxy module and the response body to the AppSecure module. At step S the cookie proxy may remove cookies from the header of the response that are not configured or otherwise identified as client consumed cookies and store them in a cookie jar used for the current session. At step S the AppSecure module may rewrite any URL in vpn encoded form as per rewrite policies. The AppSecure module may also insert into the response body any scripts such as JavaScript code to be executed at client side. At step S the appliance may send the modified response to the client. In many embodiments any of the Q or S steps happen in any order or in any combination with any other steps or embodiments described herein.

Cookies may be used for maintaining a state of a system or a memory of a previous event transaction or communication between two entities on a network. In some cases cookies may be utilized for various types of session tracking. Cookie management may be referred to as a feature of a network device such as an intermediary and may provide a way to manage a server or a client in creating utilizing or controlling cookies transmitted between the server and the client . Embodiments of the intermediary described herein provide ways to manage cookies for the client and the server. In some embodiments the intermediary manages server consumed cookies on the server side while not sending cookies to the client browser.

Systems and methods for cookie proxying are illustrated by and . depicts an embodiment of a system and a method for managing cookies in an embodiment of a clientless SSL VPN environment. illustrates sequence diagrams and steps of an embodiment of a method for cookie management that includes a SSL VPN clientless access scenario. depicts embodiments for cookie proxying by an intermediary that utilizes a unique identifier such as a unique client ID. These illustrations may relate to a number of embodiments of systems and methods for implementing cookie management such as a clientless cookie management.

Clientless cookie management may enable a web client that resides within an unsecured network to access a web application hosted behind a secured network without compromising the security of the secured network. For example clientless cookie management may improve security for the transmitted information by removing server consumed cookie data. Clientless cookie management may disable the server consumed cookie data from being transmitted to the client and prevent accessibility to any sensitive information which may be included in the cookie. In addition clientless cookie management may enable web browsers that do not support cookies such as PDAs and WAP browsers to work with web applications on the servers that require cookies. Furthermore in instances when web applications used are not compatible with cookie path rewriting clientless cookie management may provide a service allowing such applications to function by rewriting the cookie path.

Referring now to an embodiment of a system and method for implementing SSL VPN clientless cookie management via an intermediary is illustrated. depicts a client communicating with a server via an intermediary . The intermediary includes a policy engine and a cookie manager . Client transmits a request such as an HTTP hypertext transfer protocol request intended for the server to the intermediary . The request includes a URL uniform resource locator which may identify a service or a resource stored on or otherwise available from a server . Cookie manager receives the request and generates a cookie associated with the client using the policy engine . The generated cookie may satisfy any preferences or configurations of the server thus enabling the initially cookie less request to be accepted and processed by the server . Cookie manager modifies the request to include the cookie forwards the modified request to the server . Server issues a response to the request and transmits the response to the intermediary using the cookie generated by the cookie manager . Cookie manager modifies the response by removing the cookie. The modified response is then transmitted to the client . The server and client may further transmit additional requests and responses using the cookie thus allowing the cookie less client to access the resources on the cookie configured server .

A cookie manager may be any device component unit function or an apparatus generating terminating modifying or managing cookies. Cookie manager may also modify requests of the clients and responses of the servers . Cookie manager may comprise hardware software or any combination of hardware and software components to manage and control cookies. A cookie manager may comprise logic control functions processing circuitry software programs algorithms and scripts to control manage or modify transmission between the clients and servers . In a number of embodiments cookie manager comprises policies utilized during the process of managing cookies and providing the control of communications between the client and the server .

In some embodiments cookie manager may uniquely identify a user on a network for example by providing a unique identifier using a configured policy such as a policy of a policy engine . Unique identifier may be any number value or a set of data numbers or characters uniquely identifying a client a server or an appliance on the network. In some embodiments cookie manager may utilize the unique identifier to associate a received response from the server with the specific client to which the response is intended. Cookie manager may include any functionality to modify the response using the cookies and client identifiers such that the client receives the response in a desired format. Similarly cookie manager may include any functionality to modify the request of a specific client to include a specific cookie to access a resource on the server using the client unique identifier and the cookie generated for the client.

Cookie manager may modify or change any transmission sent by a server or a client . In some embodiments cookie manager modifies transmissions between the client and server using one or more policies for handling cookies of a policy engine . Cookie manager may modify the transmissions to include or exclude the cookies and unique client identifiers. In some embodiments cookie manager generates cookies for any client requesting access to any servers . Cookie manager may generate the cookie for the clients in response to a policy. In some embodiments cookie manager may determine that a particular client should not be allowed a cookie in response to a policy. In other embodiments cookie manager determines that a particular unique client identifier should be associated with the client in response to a policy. In further embodiments cookie manager determines a type and form of the cookie to generate for the request in response to a policy. In yet further embodiments cookie manager determines if and how will the cookies be stored for the future requests of the client in response to a policy.

In some embodiments cookie manager eliminates or strips the cookies from the requests or the responses. Cookie manager may assign or reassign cookies to the clients or servers . In still further embodiments cookie manager changes modifies or rewrite cookies from the requests from the clients or responses from the servers . Cookie manager may match a value a name or a unique client identifier uniquely identifying a client to a cookie or a portion of the cookie associated with a client a server or an intermediary . In some embodiments cookie manager may add a cookie associated with the unique client identifier to the URL. In further embodiments cookie manager may remove the unique client identifier and add a cookie associated with the unique client identifier instead. In a number of embodiments cookie manager may replace a cookie with a unique identifier sometimes also referred to as a unique ID uniquely identifying a client or a server .

The cookie manager may use a parser for parsing the transmissions. Cookie manager may also use an internal map for matching a plurality of unique identifiers relating a plurality of clients servers or appliances to a plurality of cookies relating the clients servers or the appliances. For example the cookie manager may utilize a map comprising a unique identifier associated with one or more cookies for matching a client uniquely identified by the unique identifier with the one or more cookies. In such cases the cookie manager may modify change or edit a request from the client or a response to the client using the one or more cookies matched to the unique client identifier. Cookie manager may utilize policies to manage transmissions between a client and a server by managing adding or removing of the cookies and unique client identifiers to and from the transmissions of the clients and servers as necessary to comply with configurations or preferences of receiving devices i.e. the clients and servers receiving the transmissions.

A semi colon client delimited list may be any map list database or file comprising a list of cookies along with information associated with clients that communicate with one or more servers via the intermediary . Semi colon client delimited list herein may also be interchangeably referred to as an internal map or a list of cookies or the map. In some embodiments the semi colon client delimited list comprises name value pairs of cookies and values or unique identifiers which may be used instead of the cookies for upstream communication i.e. communication towards the server or downstream communication i.e. communication towards the client . Sometimes cookie manager may use a semi colon delimited list of the client consumed cookies and or the client and server consumed cookies to link match or associate values or unique identifiers of or more clients to each of the cookies associated with the clients. By using the semi colon delimited list the cookie manager may determine which cookies to re inject add or include into the downstream or upstream transmission. Cookie manager may use the map or list of cookies to match a cookie from a transmission received by the intermediary to the client to whom the transmission is destined for. The cookie manager may then edit or modify the transmission to exclude the cookie and include any other information associated with the client instead. Similarly cookie manager may use the map or the list of cookies to match a unique client identifier with a cookie to include into the transmission.

In some instances by turning on server side cookie management and not specifying the semi colon delimited list web applications may function incorrectly. Using the semi colon delimited list may disable this error which may occur when a cookie manager filters the client consumed cookies at the server . Using the semi colon delimited list may also disable the error which may occur when a web application attempts to access a cookie value on the client resulting in an unexpected behavior. In a number of embodiments the delimited client cookie list or the list may comprise various on off settings for server side or client side cookie management. In some embodiments the delimited client cookie list may be stored in any number of data layers or in various tables comprising settings and configurations for any variable at each step of the method or process.

Cookies may be classified by types or characteristics. Cookie manager may classify or sort cookies by unique identifiers associated with the cookies. A server consumed cookie may be a cookie set by a resource such as a server issuing a Set Cookie on the response. The server consumed cookie s values may be checked or may be not checked by any client side code. In certain embodiments cookie manager may identify or classify a server consumed cookie as a server consumed cookie. In a number of embodiments cookie manager may remove a server consumed cookie from a downstream transmission of a request or a response and re inject them into an upstream transmission which is related to the request or the response. In other embodiments server consumed cookies may be associated with confidential or sensitive data pertaining to sessions. In some embodiments server consumed cookies may be managed by a cookie manager and may not be sent to a web browser. In certain embodiments server consumed cookies may be stripped from the message being sent to the web browser and may be stored in the cookie manager or any storage device related to the cookie manager .

A client consumed cookie may be a cookie such as a cookie that is set on an upstream transmission by a client s web browser via a script such as JavaScript. In some embodiments a client consumed cookie is a cookie that is set on a downstream transmission from the source where the source may be a client a server or an appliance . In a plurality of embodiments a client consumed cookie may be checked or modified by the client or the intermediary . In some embodiments client consumed cookies are not checked or modified by the server . The server may only accept the requests as they are and may rely on the intermediary to provide the modification to the requests. Similarly clients may also not modify responses but may instead rely on the intermediary to modify the responses. In some embodiments client consumed cookies are checked edited or modified by the server . In further embodiments a client consumed cookie is not managed by the cookie manager but is instead sent downstream to the web browser of the client instead. Sometimes client consumed cookies and server consumed cookies may be read modified and generated by both the client and the server . In some embodiments cookie manager may not manage a client or server consumed cookie and client or server consumed cookies may be sent downstream toward the web browser of the client . In some embodiments a client may perform the functionality of a server and vice versa. In other embodiments a client may be used interchangeably instead of a server and a server may be used interchangeably instead of a client . In some embodiments client or server consumed cookies may be used modified read written transmitted to or from any one of the client server or an intermediary . In many embodiments server consumed cookies comprise all functionality of client consumed cookies and may be treated modified controlled or otherwise used in the same way and by same components as any client consumed cookies. Sometimes all cookies may be server consumed cookies. The server consumed cookies may be used read or edited by the server. In further embodiments some server consumed cookies are also client consumed cookies. The client consumed cookies may be used read or edited by the client in addition to being used read or edited by the server. In some embodiments the server and client consumed cookies are used edited read written to or modified by the intermediary . Sometimes in some embodiments some cookies are used by the client and not used by the server.

The upstream or the downstream communication may be used to indicate the direction of the communication. For example sometimes the upstream request communication or the upstream direction may relate to a communication or transaction from the client toward the server . In some embodiments upstream request communication or the upstream direction may relate to communication or transactions from the server to the client . In a number of embodiments the downstream request communication or the downstream direction may in some embodiments relate to communication transactions or direction from the client toward the server . In a plurality of embodiments downstream request communication or the downstream direction may relate to communication or transactions from the server to the client . Sometimes transactions or communication headed toward the server may be referred to as an upstream transaction or upstream communication and transactions or communication headed toward the client may be referred to as a downstream transaction or downstream communication.

Further referring to steps of a method for implementing an embodiment of clientless cookie management is illustrated. At step one the client sends a request through the intermediary to server . The request comprises a URL request such as a URL provided by the intermediary for example http abc.com dir index.asp. At step two the intermediary communicates with the cookie manager which checks the incoming request URL against an internal map of cookies available for the domain name and the path provided by the URL. If the cookie manager detects any matches between the incoming request URL and the cookies available in the internal map an array of name value pairs is returned from the cookie manager to the intermediary. At step three the intermediary forwards the modified request to the server . In some embodiments the request may also be referred to as HTTP request and the modified request may be referred to modified HTTP request. The request may be modified to include one or more cookies from the cookie manager . Illustrated in the message sent in step three comprises a value of 25 assigned to the cookie. At step four the server responds to the request with a response including a header and body such as an HTTP header and a content body. The response may include several cookie definitions by Set Cookie HTTP header. Further to the example the response from the server comprises Set Cookie value set to 25. The intermediary may call upon the cookie manager at step five while passing to the cookie manager the cookie values from the response. The cookie manager checks if the values received are new or updated for the given URL and performs any necessary updates on the incoming map. Cookie manager also checks if client consumed cookies should be returned to intermediary for web browser consumption. At step six the intermediary sends to the web browser of the client the response from the server with server consumed cookies removed from the header and client consumed cookies added to the header.

In further details depicts a client initiating communication with a first request destined for the server by sending the first request to the intermediary . Arrow in signifies the transmission of the first request http abc.com dir index.asp to the intermediary . In some embodiments the first request is transmitted by a server an intermediary or any other device on the network . The first request may or may not include a cookie. In some embodiments the first request includes a URL or an HTTP request. In further embodiments the first request includes a path to a resource stored on a server . In still further embodiments the first request includes a unique identifier uniquely identifying client out of all devices communicating on the network. In yet further embodiments the first request includes a unique identifier uniquely identifying a session on the client . In still further embodiments the first request includes a unique identifier uniquely identifying a user on the client . In some embodiments the client transmitting the first request is not cookie configured and does not transmit cookies. In other embodiments the client transmitting the first request is using a network or a connection which is not secured or not desirable for transmitting sensitive information.

As illustrated by arrow of the intermediary receives the first request and forwards it to the cookie manager . In some embodiments intermediary initiates or invokes the cookie manager in response to received first request. In other embodiments intermediary initiates or invokes the cookie manager in response to the recognition that the client satisfies a set of preconditions for invoking the cookie manager . The set of preconditions may include any determination relating the client the session on the client or the user on the client . Determinations may be made by the intermediary client server or any other component or device on the network . In some embodiments determinations are made by policy engine . In some embodiments the set of preconditions includes a determination that the request is from the client that does not support cookies. In further embodiments the set of preconditions includes a determination that the client uses a session or a connection that is not secured. In yet further embodiments the set of preconditions includes a determination that the client uses a network that is not a secured network. In still further embodiments the set of preconditions includes a determination that the client may access the requested resource or service on the server requested by the first request.

The intermediary may activate or initiate the cookie manager in order to check or match the received request URL against an internal map of cookies. The internal map of cookies may also be referred to as a map a list or a semi colon delimited list of cookies. In some embodiments a policy of the policy engine matches a portion of the first request against an internal map of cookies. The map may comprise any number of cookies each of which may be associated linked or paired up with any number of clients servers or appliances . In some embodiments cookie manager checks or matches the received request URL to a domain or a path of a message stored in the map. In some embodiments a policy of the policy engine matches an information relating to the client with a domain or a path of the message stored in the map. The domain or the path of the message may match a URL or a portion any portion of the first request with one or more cookies used for the client . In some embodiments cookie manager or a policy detects or determines a match between a portion of the first request and one or more of cookies or a unique identifiers associated with a client or server . In some embodiments cookie manager or a policy of the policy engine detects or determines a match between a portion of the first request and one or more of name value pairs or value name pairs.

Cookie manager may generate provide or return one or more name value pairs in response to the match made between a portion of the received request and a cookie or one or more cookies from the internal map of cookies. The match made between a portion of the received request and a cookie or one or more cookies from the internal map of cookies may be made by a policy of the policy engine . In some instances cookie manager returns one or more name value pairs in response to a determination that either a request from a client or a response to the request from the server matches any one of cookies or unique identifiers from the map. In some embodiments cookie manager may match a portion of a cookie to a portion of a URL from the received request or the response to the received request. Cookie manager may assign the matched cookie to the first request. In some embodiments cookie manager may modify the first request to include the matched cookie. In some embodiments cookie manager generates a cookie for the client or the server if a match is not made. In some embodiments cookie manager generates a cookie for the client of the first request and assigns the cookie to the client . The generated cookie may include a value of the cookie. The value of the cookie may be a unique value uniquely associating the cookie with the client in the internal map of cookies. Cookie manager may use the value of the cookie to associate an incoming response to the first request from the server to the client . Cookie manager may assign the cookie to the client to be used for the first request and any other future requests of the client to the server . Cookie manager or any other portion of the intermediary may rewrite modify format or change the received requests such as the first request to include the matched or generated cookies or satisfy any format or content requirements of the requests received by the server .

Still referring to arrow represents the step of the appliance transmitting the first request processed by the cookie manager to the server . The first request transmitted may be modified. In some embodiments the request is modified by the cookie manager or the appliance . The request transmitted by the intermediary may include one or more cookies from cookie manager . In some embodiments the modified requests include the value of the cookie which cookie manager may use to associate the request to the client . The request which has been modified or changed by the appliance or the cookie manager may be referred to as the modified request. The server may receive the modified request in a format which is consistent with the preferences or configurations for the requests to be processed by the server . The server may receive the modified request and determine that the received modified request is a valid request.

Arrow illustrates the step of the server transmitting or issuing a response to the modified request. The issued response may include any information service or resource the client has requested. In some embodiments the issued response includes a webpage. In other embodiments the issued response includes a file. In further embodiments the issued response includes an application or a computer software program. In still further embodiments the issued response includes an authentication or authorization message or a message for establishing a session with the client . The response from the server may include the value of the cookie which may be used to uniquely identify the client for whom the response is destined. The response from the server may comprise a header and content body either of which may include any of one or more cookies one or more cookie definitions components or parts of one or more cookies and values or information relating to or associated with the cookies. In some embodiments the cookie definitions are set by Set Cookie or Set Cookie2 HTTP header. Set Cookie or Set Cookie2 HTTP header may herein be referred to as Set Cookie.

Arrow illustrates the step of the intermediary communicating with cookie manager and modifying the response to the first request. In many embodiments the intermediary transmits to the cookie manager one or more cookie values or unique client identifiers from the response from the server . In many embodiments the intermediary transmits to the cookie manager one or more cookies from the response from the server. The intermediary may activate or initiate the cookie manager in order to check or match the URL from the response against the map or the list of cookies. Intermediary may modify or edit the response of the server to include a cookie that is matched with a portion of the response. In some embodiments the cookie manager may check or match the URL the header or any other portion of the response to a domain a path of a message a cookie or a part of a cookie stored in the map. In such instances if any cookies or unique identifiers from a portion of the response are matched with a stored information associated with the client intermediary may modify or edit the response to include the into the response the cookie of the client or any other information associated with the client as desired. In cases when the cookie manager detects a match between the URL from the request or the response one or more of cookies from the internal map or list of cookies one or more of name value pairs or value name pairs may be returned to the intermediary . In some embodiments a policy of the policy engine matches a portion of the response with one or more cookies or unique identifiers. Sometimes the cookie manager returns an array of name value pairs in response to the match made between a portion of the response and a cookie or a unique identifier. In some embodiments the cookie manager may match a portion of a cookie to a portion of a URL from the received request. In a number of embodiments the cookie manager matches a portion of a cookie to any portion of the received request such as a URL a body or a header of the request. In some embodiments if the cookie manager does not match a portion of the received response to the request to any cookie or any unique identifier the cookie manager generates a new cookie or a new unique identifier or both and assigns it them to a client or a server . The cookie manager may modify the response of the server to the first request using the new generated cookie. Such new cookies and unique identifiers for clients or servers may be used for any future requests or responses of the same clients or servers . In some embodiments cookie manager determines that there are new or updated cookie values for the requests of the client or responses of the server and further updates the map or database accordingly. In addition cookie manager may also determine if the cookies consumed by the client should be returned to the intermediary for web browser consumption.

Still referring to arrow illustrates a step of the intermediary sending or forwarding the modified response to the client via a downstream response. In some instances the downstream response may be referred to as the transmission from the server via the intermediary towards the client . Similarly the upstream communication may be any communication from the client via the intermediary and towards the server . In some embodiments the modified response does not include any cookies. In further embodiments the modified response includes the unique client identifier which is used by the cookie manager to associate one or more client associated cookies to the client . In still further embodiments the modified response includes any format desired or accepted by the client . The modified response from the intermediary to the client may comprise server consumed cookies removed from response. In some embodiments the modified response forwarded may comprise client consumed cookies re added to the header or any other part of the response. In many embodiments the modified response from the intermediary to the client includes the response from the server modified to exclude the cookie associated with the client in the cookie manager .

Cookie management such as the cookie management by cookie manager may cause or provide services resources or applications used by the client and provided by the server to run or be provided within the same cookie domain namespace. The intermediary may provide client side cookie management or server side cookie management to increase the security of the cookies transmitted between the client and the server . Cookie management such as client side cookie management may eliminate the restrictions of the HTTP protocol limitations such as the maximum amount of cookies allowed from a single source per a single client. For example in a system which may only allow 20 cookies per session with a client cookie management by the cookie manager of the intermediary may enable the client to eliminate such limitation by reusing the cookies associated with the client and stored in the cookie manager . Using client side cookie management in such examples may enable the client to continue communicating with the server even in situations when the 20 cookies per session limitation would affect the service provided to the client. In this case the intermediary intercepting and forwarding the communication between the client and the server may manage modify rewrite or edit portions of the requests or responses and use the cookies associated with the client or the server thus enabling the communication even after more than 20 cookies are transmitted.

Clientless cookie management performed by the cookie manager or the intermediary may involve rewriting cookie paths on the downstream cookie headers which are headed toward the client or to the server . In some embodiments the cookie manager or the intermediary forwards the responses or the requests from the client or the server to the intended destinations without changing or modifying them. In other embodiments clientless cookie management performed by the cookie manager may involve state management by the intermediary . The cookie manager may be invoked by the intermediary for checking upstream requests for server cookies that should be injected into the stream or communication directed to the server . The responses from the downstream communication that are intended to be modified such that they are stripped of the cookies may persist in the cookie manager.

Referring now to a sequence diagram of an embodiment of steps of a method for clientless cookie management is depicted. In brief overview illustrates a browser of the client communicating with a web application of the server via an appliance and cookie manager . Client sends an HTTP request to the appliance which herein may also be referred to as an intermediary . Intermediary processes the request and uses cookie manager to check for cookies. Cookie manager returns the cookies associated with the request to the intermediary . The intermediary modifies the header of the HTTP request to include the cookies and transmits the modified HTTP request to the server . The server returns the HTTP response to the HTTP request. Intermediary sends any cookies from the HTTP response to the cookie manager to be added to the map used to associate all the cookies of the client with the client . The intermediary modifies the response to remove the cookies from the HTTP response and uses cookie manager to further add any client related cookies to the HTTP response. The intermediary transmits the modified HTTP response to the client .

In further overview illustrates client sending a request to the intermediary herein also referred to as the proxy. The request may be any request to access any resource or any service provided by the server . In some embodiments the request is a HTTP request to access a webpage or a website related service. In other embodiments the request is a request to establish a connection with the server . In further embodiments the request is a request to establish a session with the server . In still further embodiments the request is a request use an application provided by the server . In yet further embodiments the request is a request to access a streaming file such as an audio or a video file. In yet further embodiments the access is an access to a secure documentation. The request may include multiple requests.

Intermediary may process the received request and use cookie manager to check for cookies. The intermediary may process the request and establishing which if any cookies client includes. Processing of the request may further include establishing a unique client identifier to identify any further communication with the client . The intermediary may processes the request and forward it to the cookie manager . In some embodiments the intermediary forwards a portion of the request to the cookie manager . In some embodiments cookie manager uses one or more maps to relate or associate client related information such as the unique identifiers of the client with cookies used for communication by the clients to the server . Similarly the maps of the cookie manager may be used to associate any client side cookies with the server side cookies that the client uses for the communication with the server . In some embodiments a unique identifier from a request is matched to a name value pair or a cookie in the map. The cookies may be associated with the client via the map of the cookie manager . Cookie manager may create new cookies for the client if such cookies already do not exist in the map of the cookie manager .

In some embodiments as each request or a response is processed by the intermediary the intermediary checks if the URL of the transmission being processed is server side cookie management enabled. Intermediary may call the cookie manager related function such as ProcessRequest to do request processing. Cookie manager may further check an internal map which may be a cookie manager map or a cookie manager list used to help determine if there are any incoming cookies that need to be added to the upstream request. Cookie manager may also record all cookies encountered for the first time in the session inside the map for future requests. Cookie manager may also ensure that the system is not sending certain cookies such as appliance related cookies for example to hosted web applications such as for example the NSC AAAC. In some embodiments a function such as ProcessRequest function for example may call another function such as FilterCookies for example internally. In some embodiments FilterCookies may call ProcessRequest . In some embodiments the two sets of values may be referred to as a Citrix.Fei.ClientCookies and a Citrix.Fei.ServerCookies. Cookie manager may use Citrix.Fei.ClientCookies and a Citrix.Fei.ServerCookies to create a semi colon delimited list or an internal cookie manager map herein also referred to as a cookie manager list or the map. The map may be used during decision making process of cookie management. The cookie manager may serialize the cookie manager map entries in the cookie manager into the two session values Citrix.Fei.ClientCookies and Citrix.Fei.ServerCookies. The cookie manager may also use these two values to persist to the session or associate to the session the client or the server for any future transmissions. If the cookie manager matches the request of the client to a cookie or a plurality of cookies in the map the cookie manager may transmit the cookie or the plurality of cookies to the appliance .

The intermediary may modify the header of the HTTP request and transmit the modified HTTP request to the server . In some embodiments the cookie manager modifies the request to include the cookie or the plurality of cookies that are associated with the client . In some embodiments the cookie manager modifies a portion of the request such as a URL or a heading to include a value or a set of values or characters identifying a cookie. In some embodiments cookie manager modifies the request to include or add a portion of a cookie which is associated with the client . In other embodiments cookie manager modifies the request to include or add an unique identifier associated with the client . In further embodiments cookie manager modifies the request to exclude or remove a cookie or a unique identifier from the request of the client. In some embodiments any component of the intermediary modifies the request to include the cookie or the cookies provided by the cookie manager .

The intermediary may perform any number of modifications to the request. In some embodiments intermediary overwrites a portion of the request with one or more portions of one or more cookies. In other embodiments intermediary adds a portion of one or more cookies or a plurality of portions of one or more cookies to the request. In still further embodiments intermediary modifies the cookie within the request. The intermediary may change one or more values or characters within the cookie or otherwise modify the cookie to be acceptable by the server . In yet further embodiments intermediary encrypts a portion of the request. In still further embodiments intermediary modifies the request to accommodate any configuration related preferences or requirements of the server . The modified request may be changed such that it can be processed by the server . The intermediary may transmit the modified request to the server .

The server may process the modified request and in response transmits to the intermediary a response to the request. In some embodiments the response to the request includes an HTTP transmission. In further embodiments the response includes a webpage. In yet further embodiments the response includes a file the client requested. In still further embodiments the response includes an authentication message to authenticate the client on the server . In yet further embodiments the response includes a transmission for starting or opening a session or a connection between the client and server . In still further embodiments the response includes an executable file a program a function data a streaming file or any other resource or service provided by the server . In some embodiments the server transmits to the intermediary a plurality of responses to the request.

Intermediary may send any cookies from the HTTP response to the cookie manager to be added to the map of the cookie manager . Any new cookies added to the map of the cookie manager may be used for future transmissions between the client and server . In some embodiments the intermediary modifies the reply to exclude cookies from the reply. In other embodiments the intermediary takes out the cookies from the reply and transmits the cookies to the cookie manager . The cookie manager may compare the received cookies to the cookies already stored in the map. In some embodiments cookie manager stores the received cookies in response to the determination that the received cookies were not previously stored in the map in relation to the client or the server . The cookies stored may be utilized later for the communication for the same client . In some embodiments the transmission to the cookie manager comprises any number of cookies or a portion a cookie or a unique client identifier relating the client the server or both the client and the server .

The intermediary modifies the response to remove the cookies from the HTTP response. The intermediary may further use the cookie manager to add any client related cookies to the HTTP response if such cookies exist or are necessary. In some embodiments the intermediary modifies edits or changes the response to exclude any server cookies. In further embodiments the intermediary modifies the response to replace the server cookies with client cookies. In yet further embodiments the intermediary modifies the response to satisfy the format configurations or preferences of the client so that the modified response may be acceptable or usable to the client . As each response or request is processed the intermediary may determine if a server side cookie management or a client side cookie management is enabled. In some embodiments as server side cookie management is enabled the intermediary may call upon a function such as a cookie manager function ProcessResponse . In a number of embodiments as client side cookie management is enabled the intermediary may call upon cookie manager function ProcessResponse or another function which performs cookie or unique identifier management or internal cookie map management. The cookie manager may check the cookies from a received response or request for the server or client consumed cookies. In some embodiments the cookie manager matches the cookies received from the request or the response to cookies stored or listed in the map. The cookie manager may also add a name value pair registering or assigning a new cookie or a new client identifier in the map if such cookie or client identifier was not registered listed or assigned in the map earlier. Cookie manager may thus populate the map with new client identifier or new cookies which may be used in the future communication with the clients and servers associated with such cookies or unique identifiers. In a number of embodiments cookies or Set Cookie header may be removed from the response when handed back to the intermediary . By preventing the server consumed cookies from being sent to the client the system may extend a number of cookies for a given domain to a number beyond a predetermined limit. In systems which limit the number of cookies to a maximum of 20 this feature may be useful to enable the client to keep using the service on the server without reaching the limitation of 20 cookies maximum. Such practice may also prevent important cookie data from being accessed or read in the network space beyond a firewall of the company sending out the sensitive information.

The intermediary transmits the modified HTTP response to the client . In some embodiments the modified response includes a client cookie. In other embodiments the modified response includes the original request as sent by the server to the intermediary . In still further embodiments the modified response includes a portion of the response that is reformatted to be in accordance with configuration or standards of the client or the client application or function used for processing of the modified response. The intermediary may in response to the received modified response transmit to the intermediary another request destined for the server .

The intermediary may apply any of the access profiles policies rules and actions to any level of granularity of portions or subsets of network traffic traversing the intermediary . The level of granularity may range from fine to coarse based on the configuration. The logic criteria or conditions of rules of access profiles rules and policies described herein may be defined or specified to apply to any desired subset or portion of network traffic or transmissions transmitted via the appliance . In one aspect the level of granularity refers to a degree measurement fineness or coarseness of portions of network traffic to which the configuration may apply. In very broad or coarse granularity of configuration an access profile rule or a policy may apply to all network traffic. In a very fine granularity configuration an access profile or policy may apply to a specific subset of network traffic of a particular user such a traffic or portions of traffic of a particular application of a particular user.

In some granularity configurations an access profile policy or a rule applies to any client sending a request to a server. The policy rule or access profile may be defined to address or apply to any client and may be based on any configuration of the client or information relating the client such as for example a portion the client request. Similarly the policy rule or access profile may be defined to address or apply to any server and may be based on any configuration of the client or information relating the server such as for example a portion the server response. In some granularity configurations an access profile policy or a rule is defined to apply to a specific session or connection the client is using to connect to the server via the appliance . In further embodiments an access profile policy or a rule is defined to apply to any client the is connected via SSL VPN session or connection.

In further embodiments an access profile policy or a rule is defined to apply to any client that is connected via clientless SSL VPN session or connection. In still further embodiments an access profile policy or a rule is defined to apply to any client that is connected to via client based SSL VPN session or connection. In still further embodiments an access profile policy or a rule is defined to apply to any client or client session that sends a request to a particular server . In yet further embodiments an access profile policy or a rule is defined to apply to any client or client session that requests a particular application or a resource on the server. In further embodiments an access profile policy or a rule is defined to apply to any client or client session based on the cookie configuration for example if the cookies are enabled or disabled. In still further embodiments an access profile policy or a rule is defined to apply to any client or client session that sends a request that includes a particular URL or a portion of a particular URL. In yet further embodiments an access profile policy or a rule is defined to apply to any client or client session based on a match between a portion of the request sent by the client and a phrase or a key of the access profile policy or the rule. In some embodiments an access profile policy or a rule is defined to apply to any server or a server session based on an information relating a client accessing the server . Such information may include a portion or feature of the request of the client a setting or configuration of the client or any other client related information. In some embodiments an access profile policy or a rule is defined to apply to any server or server session based on the configuration of the server or the features of the content that the server is transmitting to the client .

Referring now to an embodiment of a cookie proxy data flow control is illustrated. In brief overview depicts a client communicating with a server via an intermediary that manages the flow of the cookies between the client and a server . Client sends a request to a server via an appliance also referred to as an intermediary . The request comprises a URL such as GET index.html HTTP 1.1 . Intermediary intercepts the request sent by the client and forwards the request to the server . The server in response to the request issues a response that comprises a cookie such as for example HTTP 1.1 200 OK nSet Cookie name value . Intermediary strips and stores the cookie and replaces the cookie with a client ID that uniquely identifies the client . The unique client ID may be a consolidated cookie and may be associated with the cookie in the intermediary for future transmissions. Intermediary forwards the modified response that includes the unique client ID to the client . The modified server s response may comprise information such as for example HTTP 1.1 200 OK nSet cookie NSC AAAC Unique client ID . The client transmits a second request using the unique client ID such as GET foo.html HTTP 1.1 nCookie NSC AAAC Unique client ID . Intermediary receives the second request and using the unique client ID retrieves the cookie that was stored based on the unique client ID. Intermediary modifies the request and inserts the previously stored cookie into the request. The modified second request may be formatted to include the same or a similar cookie that was used in the prior transmission such as for example GET foo.html HTTP 1.1 nSet Cookie name value . Intermediary transmits the modified second request to the server .

Further referring to the client may initiate the communication with the server by sending a request to the intermediary . In some embodiments the request may be an HTTP request such as for example GET index.html HTTP 1.1 . In some embodiments client attempts to communicate with the server for the first time. In further embodiments the client transmits any HTTP request destined for the server to the intermediary . The client may transmit any request to the intermediary to access a resource or a service on the server .

The intermediary may forward the request to the server . In some embodiments intermediary modifies the request and forwards the modified request to the server . In other embodiments the intermediary does not modify the request. In further embodiments intermediary forwards the request to the server without modifying any portion of the request. In some embodiments intermediary forwards the HTTP request such as for example GET index.html HTTP 1.1 to the intermediary .

The server may issue a response to the request that may include a cookie. In some embodiments the response may be for example HTTP 1.1 200 OK nSet Cookie name value . The cookie may be in a header of a response or within any other portion of the response. In some embodiments the cookie may be included in the URL of the response. The cookie may be any type and form of cookie and may be included anywhere within the response.

Intermediary may strip and store the cookie from the response and replaces the cookie with a client ID that uniquely identifies the client . Once the response of the server is received by the intermediary the intermediary may create a cookie jar for the given domain for the client. The cookie jar may include or store any collection of cookies for a given domain and client such as client . In some embodiments the cookie jar may be a file a list a database an array a data structure or a folder comprising any number of cookies or any number of information comprised by the cookies. In some embodiments the intermediary may strip Set Cookie header from the response header issued by the server and it may store the Set Cookie header into the cookie jar. The intermediary may also generate a unique cookie proxy session cookie. The cookie proxy session cookie may comprise any relevant information the client may receive from the cookie sent by the server without actually receiving the cookie. The cookie proxy session cookie may thus convey all the relevant information from the cookie sent by the server to the client in a manner acceptable by the client or by the client s web browser. The intermediary may insert a cookie proxy session cookie into the cookie jar or relate a cookie proxy session cookie with the related and corresponding cookie sent by the server . In a number of embodiments the intermediary may insert the cookie proxy response cookie into a response header of the message to be sent from the intermediary to the client . In some embodiments the intermediary may leave the domain and path unchanged while in other embodiments the intermediary may change either the domain or the path or both the domain and the path. In some embodiments the intermediary inserts a unique client ID into any part of the communication sent from the intermediary to the client .

Intermediary may forward the modified response to the client . The modified response may include a unique client identifier such as a unique client ID. In some embodiments the modified response includes a client cookie. In further embodiments the modified response is modified to be in accordance with the configuration of the client . In some embodiments the modified response includes the original response of the server without any modifications. The modified server s response may comprise information in any HTTP form such as for example HTTP 1.1 200 OK nSet Cookie NSC AAAC Unique client ID .

The client transmits a second request using the unique client ID. The second request may be same similar or substantially similar to the first request. In some embodiments the second request includes the same form as the first request. In further embodiments the second request is by the same application used for transmitting the first request. In some embodiments the second request is an HTTP request such as GET foo.html HTTP 1.1 nCookie NSC AAAC Unique client ID . The second request may include the unique client ID or a portion of the unique client ID issued by the intermediary .

Intermediary may modify the second request to include the cookie associated with the server . Intermediary may retrieve the server cookie using the unique client ID that was stored in association with the cookie of the server . Intermediary may modify second request and inserts the previously stored cookie into the second request. Intermediary may modify the request and insert the previously stored cookie into the request. In some embodiments intermediary modifies the request to include the previously stored cookie into the second request. The intermediary may check if the cookie proxy session cookie is present. In case that the cookie proxy session cookie is present the intermediary searches the cookie jar based on the cookie proxy session cookie. Intermediary may use the cookie which is retrieved using the cookie proxy session cookie to find the intended domain and path. Intermediary may also insert cookie or cookies in the request code path and or strip the cookie proxy session cookie.

In some embodiments the proxy may keep a reference pointer from server side PCB to the cookie jar in order to mark the response path. In further embodiments the proxy keeps a reference pointer from session information in the cookie in order to mark the response path. In some embodiments if the cookie jar has already been created for a specific session involving a specific client and a server the intermediary may not create a cookie jar during the second set of communications within the same session. Instead the intermediary may use the same cookie jar as used previously for the same session. In some embodiments the intermediary may already have a reference to a cookie jar created for a client and a server . In a number of embodiments the reference to a cookie jar may be implemented through a protocol control block or PCB a controller as well as any piece of software a database an array or a structure comprising any set of values. In certain embodiments if the client disables cookies then no subsequent requests from the client may comprise any cookie proxy session cookie. In some embodiments if the client disables cookies subsequent requests from the client may comprise a cookie proxy session cookie. In some embodiments subsequent responses from a server to a client may create a cookie jar with no further reference to the client or the server the cookie jar is used for. In further embodiments subsequent response from a server to a client may create a cookie jar with reference to the client or the server the cookie jar is used for.

In a number of embodiments wherein a client is communicating with a server for more than one time in a given session the intermediary may not send the cookie proxy session cookie again after the first communication. The intermediary may use a unique client identification method to uniquely identify a client or a server . In some embodiments a unique client identification method also referred to as unique client ID may be used to uniquely identify a client communicating to a server or a server communicating to a client . In a number of embodiments a unique client ID may be used to uniquely identify a client communicating or sending a message or a request to a server via an intermediary . In a plurality of embodiments a unique client ID may be used to uniquely identify a server communicating or sending a message or a request to a server via an intermediary . In some embodiments the intermediary uses the unique client ID to detect and determine whether to proxy a communication sent by a client .

In a number of embodiments an intermediary may perform cleaning up of cookies determining unnecessary cookies or terminating unnecessary cookies. In a number of embodiments an intermediary may use a reference pointer from a client s PCB to a cookie jar created for the client . The modified second request may be formatted to include the same or a similar cookie that was used in the prior transmission. In some embodiments the modified second request is an HTTP request such as a modified second HTTP request such as for example GET foo.html HTTP 1.1 nSet Cookie name value .

Intermediary may transmit the modified second request to the server . In some embodiments intermediary transmits any number of modified requests to the server . The modified requests may be of any type form and format. Intermediary may thus utilize the cookie jar to transmit back and forth any number of requests from the client and responses from the server .

Cookie Proxy may be any module controlling managing or reforming cookies or transmission of cookies utilizing configuration settings. In some embodiments cookie proxy may be cookie manager . In a number of embodiments cookie proxy may be a part or a subcomponent of cookie manager . In a plurality of embodiments cookie proxy may comprise a cookie manager . In certain embodiments cookie proxy may be used interchangeably with cookie manager and may comprise any and all functionality and means of performance of a cookie manager . In some embodiments cookie manager may be referred to as cookie proxy. In a number of embodiments cookie proxy may be independent of intermediary or a cookie manager . In certain embodiments cookie proxy may be a software program or an application capable of working independently from the intermediary or cookie manager or working together with the intermediary or cookie manager .

Cookie proxy may comprise configuration settings based on a policy or action of a policy. In a number of embodiments a user or an administrator may configure the cookie proxy to determine what cookies to store into the cookie jar and what cookies not store into cookie jar. In a plurality of embodiments a user or an administrator may decide for any specific domain such as for example www.foo.com if the intermediary should proxy cookie and allow cookie cookie to flow through as any of the cookie cookie and cookie may or may not be client consumed cookies.

In some embodiments cookie proxy configuration may utilize a command line interface CLI syntax such as for example 

In a number of embodiments if no action is specified by the user or the administrator the default behavior by the cookie proxy may be to proxy all the cookies or proxy none of the cookies or proxy a fraction of cookies as determined by a set of policies relating the cookie proxy.

A bind operation may bind group tie together or associate a configuration such as a policy with an entity such as a user or resource. The act of binding may place the configuration into an active state to be applied to the assigned entity. In some embodiments a bind operation may associate one entity with another entity or apply the functionality of a module to an entity. A bind operation may be an operation performed by the cookie proxy or by policy of the cookie proxy. In some embodiments through configuration commands the cookie proxy may be bound to a virtual server . In a number of embodiments the cookie proxy policy may be bound to a load balancing server a GSLB server or a VPN server. The policy rule utilized by the cookie proxy or by intermediary may be any policy infrastructure rule language PIRL based. In some embodiments the policies utilized by the cookie proxy or intermediary may be evaluated during the response time or the time the intermediary or the cookie proxy to respond to a request or both. In a number of embodiments the policies utilized by the cookie proxy or intermediary may be evaluated or implemented during the response time.

In some embodiments the cookie proxying method may use the unique client IDs assigned to each client. The unique client id may be used by the intermediary to map a cookie jar associated with a specific client to the client . In a number of embodiments a client also referred to as client may not send any unique client ID along with a transaction also referred to as communication or a request. In a number of embodiments a cookie proxy session cookie may be used as a default client identification mechanism or a unique client ID. In some embodiments client identification may be based on a client s internet protocol address fragments of request or HTTP communication a unique components of a communication sent by the client or the server a unique feature relating a session an SSL VPN session cookie or an SSL VPN session body. In a number of embodiments client identification may be configurable. In a plurality of embodiments client identification may be implemented utilizing client s internet protocol address also referred to as IP address.

Cookie jar cleanup or cookie jar elimination may be completed pending a determination of a variety of parameters such as the size of a cookie jar or timing relating a cookie jar such as idle timing of the cookie jar for example. In some embodiments cookie jar clean up method may utilize a time out of idle time or a memory threshold. In a number of embodiments the cookie jar clean up may be implemented based on configuration associated with a cookie itself or a session timeout which may result in all the cookies belonging to the session being cleaned up following a time out. In some embodiments cookie jar clean up method may determine which cookies to clean up based on the amount of time which has passed since a particular cookie or a cookie jar was last used or accessed.

In a number of embodiments when a maximum memory limit is reached for any cookie jar a session which is inactive for the longest duration of time may need to be timed out and the cookies belonging to that session may need to be cleaned up. In a plurality of embodiments a timestamp may be associated with each client server a client domain combination or each client server session or any session in order to achieve a URL based cleanup.

Runtime aggregation of different policies or actions may be utilized by the cookie proxy or the intermediary . In a number of embodiments runtime aggregation of policies or actions may be used by the intermediary or the cookie proxy in order to decrease the configuration overhead or simplify the configuration modification. In a plurality of embodiments the intermediary or the cookie proxy may be configured to stop at first matched policy. In some embodiments the administrator or the user has to do the aggregation during configuration time and create appropriate policy and action. In certain embodiments the runtime behavior of cookie proxy action is ruled in part by searching for a match in the policy or the list of polices and stopping at the policy once the match is encountered. In some embodiments the cookie proxy may stop at a first policy defining or comprising a set of cookies to be proxied or an information relating a set of cookies to be proxied which may reduce the run time aggregation.

Cookie jar infrastructure may be used for cookie repository however in some instances additional API may used for retrieving cookies based on domain or path. In some embodiments a hash based search mechanism may be used to retrieve cookie proxy sessions. This method may be similar to an SSL VPN session hashing mechanism utilized in other Intermediary related applications. In a number of embodiments a key for the hash function may depend on client identification mechanism or client identification protocol. In a plurality of embodiments a different hash function for a different client identification mechanism may be utilized.

Cookie repository management may depend on performance or resources. In some embodiments cookie repository is managed by associating a cookie jar per client per domain. In a plurality of embodiments the set of cookie names comprises cookie names repeatedly stored in every cookie jar. In a number of embodiments the set of cookie names used is different from a cookie jar to a cookie jar while in other embodiments the set of cookie names used between a plurality of cookie jars comprises some of the same or similar names. In some embodiments cookie jars are organized such that a cookie jar may be associated with a specific client and with a specific virtual server handling the transmission. In a number of embodiments cookie jars are organized such that a cookie jar is associated with a client a virtual server and a domain.

In some embodiments a cookie jar may store no cookies which are named same as another cookie within the jar. In certain embodiments a cookie jar may comprise cookie names having values associated with cookie names in a method similar to the method utilized in headers such as HTTP headers for example.

Cookie proxy may comprise a number of functionalities. In some embodiments a cookie proxy may utilize cookie proxying or any number of embodiments discussed herein to determine if a browser may handle or accept cookies or not. In a plurality of embodiments a cookie proxy may determine if the request sent by a client or a server matches certain criteria in order to determine if a browser from the client or the server accepts or handles cookies. In some embodiments if the request sent by the client or the server matches the criteria for being able to accept or handle cookies the intermediary may send a redirect message to the client such as 

In some embodiments if the client comes back with the request URL such as for example http incoming host incoming url new param added secure client id the intermediary may verify if the unique client ID is associated with the cookie value. If the intermediary detects a match the intermediary may strip off the parameter it had added and may process the original request. In addition the intermediary may also mark the cookie proxy session to use cookie proxy session cookie . In case where the unique client ID is not matched with the cookie value the intermediary may utilize a different method such as body rewriting for session tracking. In such a method the response body may be rewritten to include the session info into each HTTP link.

In some embodiments the cookie proxy or the intermediary may also comprise cookie proxy cookie jars also referred to as cookie proxy session cookie jars. Cookie proxy cookie jars may comprise any number of cookie proxy cookies also referred to as cookie proxy session cookies. In a number of embodiments cookie proxy cookie jar may be organized or implemented in a similar manner to the cookie jar and may comprise all functionality of a cookie jar.

In certain embodiments cookie proxy cookie jars may be capable of working together with highly available applications and technologies also referred to as HA technologies. In some embodiments an intermediary comprising a set of cookies and unique client IDs may communicate the cookies and client IDs to other appliances on the network. In a plurality of embodiments a first intermediary comprising a cookie and a unique client ID associated with a client or a server may share the information relating the cookie or the unique client ID with a second intermediary or a plurality of appliances . In cases where the first intermediary shares the information relating a cookie or a unique client ID with the second appliance the second intermediary may also be able to implement communication between the client and the server using the cookie and the unique client ID.

Cookie proxy cookie manager or the intermediary may comprise any number of software applications or functions implemented in script or software in order to establish and manage cookies. In some embodiments the cookie proxy cookie manager or the intermediary may comprise a software code for managing a cookie jar such as for example 

The cookie manager or proxy may determine when how and what cookies to manager and or store to cookie jars and any of the operations described above responsive to one or more policies of the policy engine include any rules conditions or actions of such policies. Any of the policies and the corresponding cookie operations may be based on a session. In a number of embodiments policy engine provides policies or rules through which an action regarding the cookie management is determined. In some embodiments policy engine may comprise a list of policies or rules providing a means for the intermediary or the cookie manager to determine an action concerning a cookie or a unique client ID to be implemented. As such through configuration and policy the intermediary may provide fine granular control for cookie management including for clientless SSL VPN access.

In one example a server may be providing access to a number of clients accessing different applications via the appliance . Two of such applications may be application and application. Both applications may use ASP.NETSESSIONID which may be a server consumed cookie that is not used and not written to on the client side. In addition to ASP.NETSESSIONID application may further use a cookie AppClientInfo which may be read and written to by a first client accessing or using the application but not by a second client accessing the same application.

In further example an application uses AppClientCookie and AppClientCookie which may be used on the client side or by the client but rest of other cookies used by it are not required to be present. Such a configuration might be 

In yet another example a configuration may set all the cookies for all the sites to be proxied in clientless VPN mode. Client consumed cookies that should not be proxied may be configured by specifying the name of the cookies in the patclass command or instruction. For example if some application needs two cookies Cookie and Cookie to be present at the client side a configuration may be identified as 

Embodiments of systems and methods for managing cookies between servers and clients in a multi core system will now be discussed. An appliance as described herein with multiple cores may receive data for a particular data flow such as a session on any of the cores. In some embodiments each of the multiple cores each having a packet engine may receive requests and responses belonging to the same session. In some embodiments the requests and responses may be received in sequence. In other embodiments the requests and responses may be received in parallel. The methods and systems herein may maintain ordering and consistency for cases where multiple parallel responses try to modify the same cookie or multiple requests need to look up the same cookie and provide the most recently set cookie value. The systems and methods herein may use serialization to maintain cookie integrity among the multiple cores of a multi core intermediary device.

For sessions for which cookie proxying is enabled the cookies set by the server may be stripped off by the Cookie Proxy executing on the intermediary device at response time and stored in a data structure for cookie storage for the corresponding session. The cookie jar stores the information related to cookies for all the transactions such as cookie name value expiration time. The cookies may be set for a given fully qualified domain name or domain e.g. mycompany.com or www.mycompany.com and for a given path e.g. or docs etc . For example if for the request 

The Set Cookie header may be removed and information about the Test cookie maybe stored in the cookie jar . In some embodiments the Set Cookie header sent by the server may not seen by the client unless there is exclusion rule configured. In some embodiments this operation is known as the Cookie store and remove operation.

When a request is sent by the client in the same session the cookies for given domain sub domain and path are looked up in the cookie jar associated to the session and all the valid matching cookies may be inserted in the requests going to the server by a cookie proxy module . In some embodiments this is known as the Cookie lookup and insert operation. For example below is one example of request going out of the intermediary device in which a cookie was inserted by the Cookie Proxy module 

Further some cookies can be generated or modified or deleted by the client side active components like JavaScripts. The intermediary device allows policy driven configuration of the list of cookie names which are allowed to be modified by the clients . Set Cookie headers for those cookies are not removed and path and or domain components of it are modified if needed. In all the outgoing responses a Java Script is inserted which monitors the cookies at the client side and notifies the intermediary device about any modifications in the cookie. The cookie change notification comes with the session cookie and those changes may be done in the cookie jar A. In some embodiments this is known as the Cookie Update operation.

Now referring to a block diagram representing an embodiment of a system for cookie proxying in a multi core system is depicted. In brief overview the multi core system comprises multiple cores where each core or processor has a packet engine A N collectively referred to as . Each processor also may have a cookie proxy A N collectively referred to as . As in non multi core systems the user session data is associated with the processor or co processor that originally created the sessions known as the home processor or owner core or session owner. In a multi core system subsequent requests in a user session may arrive at a processor or core that is different than the one that created the user session. The processor that receives a request but is not the home processor is known as the receiving processor or non owner core. The receiving processor does not have access to the user s session data because it exists only in the home processor s address space. To facilitate cookie management the receiving processor obtains session information from the owner core.

In brief overview the system includes an intermediary between a client and a server . The intermediary comprises a multi core system. In some embodiments a session may be established and maintained by one of a plurality of cores in a multi core system such as the first core A. This core A is sometimes referred to as the owner of the session A. The non owner cores B N can communicate with the first core A and receive information for managing cookies. In view of the cookie management communications and scenarios described in connection with any server communication or client communication may be received on a core different than the core controlling owning or establishing the session

The cores may be assigned a core identifier. The core identifier may be any type or form of alphanumeric identifier or code string. In addition this core identifier may be unique among the plurality of cores of the multi core system. The core identifier may be a CPU number of the core or incorporate the CPU number of the core. A core identifier may be assigned sequentially to each core based on the CPU numbers of the cores. The core identifier can be of any size. In one embodiment the core identifier is one byte in size. For example one byte can give 256 0 255 unique core identifiers.

In further details the multi core system may be any of the embodiments of the system described in connection with and embodiments described elsewhere herein. As such the multi core system may be a multi core device between a plurality of clients and a plurality of service. The multi core device may provide to the plurality of clients VPN access such as SSL VPN access to the plurality of servers. The clients may be on one or more networks such as public networks different from the private or internal network of the plurality of servers. Each packet engine on corresponding cores may each provide SSL VPN functionality. With the flow based data parallelism scenario each packet engine core may receive packets for a data flow assigned to another core. As such a packet engine core may receive packets of a server initiated connection managed or assigned to another core.

Each core A N of the multi core system can include a cookie proxy . and a cookie storage . A cookie proxy may comprise hardware or any combination of software and hardware. The cookie proxy may include an application program library script process task thread or any type and form of executable instructions. Although the cookie proxy is illustrated as part the packet engine in some embodiments the cookie proxy may be a separate component or module of the multi core system. The cookie proxy may include any of the embodiments of the cookie proxy or cookie manager discussed above in connection with .

Each core A N of the multi core system can include a cookie storage . The cookie storage may include any storage or memory element of the multi core system for storing cookies. The cookie storage may include any embodiments of the cookie storage described in connection with . In some embodiments each core or packet engine may establish or use a cookie storage. In some embodiments one or more cores or packet engines may share a cookie storage. In some embodiments the cookie storage may be distributed among the plurality of cores and packet engines.

The owner core may establish a session between the client and the server . The session may be assigned a session identifier which can be any type or form of alphanumeric identifier or code string. A core the backend server or the client may issue the session identifier. The session identifier may uniquely identify the session among a plurality of sessions associated with the multi core system. A session identifier may be a random 16 or 32 byte value. In one embodiment the X OR of the byte with byte location of the session identifier results in a random value. By randomly selecting a one byte location in the session identifier for encoding the core identifier such as at system boot time additional security and randomness with respect to the session identifier may be incorporated. In one embodiment an SSLv2 session identifier has a size of 16 bytes and the last 4 bytes may contain a time stamp. In this embodiment the one byte location for the core identifier is preferably between byte to byte . In another embodiment a session identifier is 32 bytes for SSLv3 and TLSv1. The lower 4 bytes may be taken up by the timestamp allowing 28 bytes for encoding a core identifier in SSLv3 TLSv1 protocol. Other than the byte locations reserved for timestamp purposes the byte location for encoding a core identifier may be selected by any means.

By way of illustration and not limiting in any way one embodiment of pseudo code for encoding a core identifier may be 

In some embodiments a valid session identifier is encoded with a core identifier. A valid session identifier is sometimes referred to as a validity identifier. A valid session identifier can be a string that identifies a valid session. The intermediary or the multi core system can determine whether a session is valid. In one embodiment use of a valid session identifier helps to filter away random or malicious requests to reuse a session.

The owner core or the packet engine of the owner core may store the session identifier in a session storage of the first core A. In one embodiment the session storage is persistent for the duration that the core is powered up and or the duration that a session is maintained. In another embodiment the session storage is persistent even when the core is powered down or when a session has ended. The session storage can be memory allocated to the core and or the session. The session storage may be accessed by one or more cores. In some embodiments the first core maintains and or updates the session storage. The memory module may include the session storage.

For many embodiments of session on the multi core device there is a designated session owner packet engine or core which has authoritative control of a given session. The session is usually identified by the session cookie and that cookie has information which packet engine is the session owner. Since a Cookie jar is associated with a session the session owner packet engine may be chosen as the cookie jar owner. This may help in cases where a session is removed or cookie jar information is updated on the session.

In operation cookie operations performed at the time of receipt of an HTTP response time may be broken down in to following 

Similarly when cookie update requests arrive on any packet engine the received packet engine determines the cookie jar owner packet engine. If the cookie jar owner packet engine is different the receiving packet engine passes the message to the owner core for Cookie update in cookie jar operation. The owner core does the cookie jar operations locally when the owner core receives the messages from other cores or when the owner core directly receives the HTTP traffic.

Now referring to a flow diagram of an embodiment of steps of a method for cookie proxying in a multi core system is depicts. In brief overview at step the client sends a request to a server via an intermediary device . At step the intermediary device intercepts a response comprising a cookie sent by the server to the client . At step a non owner core B intercepts the response from the server . At step the non owner B core sends a message to the owner core A to complete cookie operations. In some embodiments at step the owner core A intercepts the response from the server . At step the owner core A communicates with the cookie proxy A. At step the cookie proxy A completes the cookie operation and communicates to the owner core A.

Further referring to and in more detail in some embodiments at step the client sends a request to a server via an intermediary device . Any client described herein can generate the request . The request may any type of request. The request may be any type of HTTP request. In some embodiments a client can initiate or generate a request to access an application service resource webpage or other content on a server . The application can be used to create a user session. The client and sever can communicate over an established connection such as by TCP IP. The request can be communicated via a VPN connection or an SSL VPN connection or session.

In some embodiments any of the cores of the multi core system can intercept the communications between the client and the server . The processing core that intercepts the initial request from the client can be referred to as a home processor. In some embodiments the processing core that intercepts the initial request from the client can be referred to as the owner core. In other embodiments the processing core can be referred to as the session owner. When the owner core intercepts the initial request the owner core establishes a user session. In some embodiments the owner core creates a session identifier. In still further embodiments the owner core embeds or associates the session with the session identifier and stored on the intermediary device .

A core A can be designated as the session owner where the packet engine A has authoritative control of a given session. The session is usually identified by a session cookie and that cookie has information which packet engine A is the session owner A. A cookie storage A mechanism is always associated with a session and the session owner packet engine A can be chosen as the cookie storage A as well since it helps in cases where session is removed or cookie storage information is updated on the session. In some embodiments the cookie storage A may be known as a cookie jar.

At step the intermediary device intercepts a response comprising a cookie sent by the server to the client . Responsive to receiving a client request or the server sends a response back to the client . The response may contain resources sent by the server responsive to the request . The response may contain the requested resource or content. In other embodiments the response may contain an error message or other types of response indications. The response may include any one or more cookies.

At step a non owner core B of the intermediary intercepts the response sent by the server to the client . In some embodiments the non owner core B may send a core to core message to the owner core A notifying the owner core A of the response from the server . At step the non owner core B may forward the response from the server to the owner core A.

In some embodiments a non owner core B N receives a request from a client containing a session cookie from the client. In some embodiments the non owner core B N determines from the session cookie received from the client the identity of the owner core. In some embodiments the non owner core may intercept a request or response and identify the owner core A using the session identifier. In some embodiments the non owner core may send a message to the identified owner core providing a notification of the request . In some embodiments the non owner core communicates with the owner core A by sending a third request for or with cookie information for the session based on a domain path and protocol.

In some embodiments the non owner core B may message the identified owner core A and the owner core A may message the non owner core B back with instructions to process the transaction request or response . In some embodiments the owner core A may send to the non owner core the cookie information for a domain path and protocol responsive to a message received from the non owner core. In some embodiments the non owner core takes the cookie information received from the owner core and inserts a second cookie based on the cookie information received from the owner core A. In still other embodiments the intermediary device forwards the to the server the third request having the second cookie.

In some embodiments the core or packet engine receiving the HTTP response removes the set cookie header from the response. The receiving core or packet engine may communicate with the owner core to store the removed cookie in the owner s cookie jar. In some embodiments the cookie jar owner packet engine performs the storage of the removed cookie to the cookie jar.

At step the owner core A receive the response from the server to the client . Since the owner core A established the user session responsive to the initial request from the client there may be no need to message the other cores of the intermediary device. In some embodiments the owner core A sends a message to the other cores to ensure that another response from the server has not been intercepted by another core.

In some embodiments the core or packet engine receiving the request performs the a cookie header insertion into the request. The receiving core or packet engine communicates with the owner core to perform a cookie lookup from the cookie jar owner packet engine.

At step the owner core A communicates with the cookie proxy A. In some embodiments the owner core A communicates with the cookie proxy A after receiving a message from another core of the intermediary device . In other embodiments the owner core A communicates with the cookie proxy after intercepting the response from the server . In some embodiments the owner core A communicates with the cookie proxy A after intercepting the response from the server and after a pre determined amount of time. In some embodiments the pre determined time delay is set by a policy. In other embodiments the pre determined time delay is set manually. In other embodiments the pre determined time delay is set a manufacture of the intermediary device .

At step the cookie proxy A completes the cookie operation and communicates to the owner core A. In some embodiments cookie operations done at the response time may be cookie storage or cookie update in cookie storage which is completed by the owner core packet engine A. In some embodiments the owner core A determines to remove the cookie from the intercepted HTTP transaction either the response or the request responsive to a pre existing policy for the session. In other embodiments the owner core A determines to remove the cookie from the intercepted HTTP transaction either the response or the request responsive to a pre determined existing policy for the content of the response . In some embodiments the owner core determines to remove the cookie from the HTTP transaction either the response or the request responsive to a policy that identifies a pre determined URL in the response. In some embodiments the policy specifies a complete URL for. In other embodiments the policy specifies a partial URL.

In some embodiments the pre existing policy is set manually. In other embodiments the pre existing policy is set at manufacture. The packet engine A strips the cookie from the response and stores the cookie from the response in the cookie storage A or cookie jar. If a cookie already exists the packet engine A updates the information stored in the cookie jar with the information received in the newly intercepted cookie. In some embodiments the cookie operation done when the response is receives is the set cookie header removal from response in which the cookie is stripped from the response by the packet engine that received the response . In some embodiments the cookie operation is completed by the owner session cookie packet engine A. In other embodiments the owner core A sends a message to the non owner core that intercepted the response to complete the removal from response cookie operation.

In some embodiments cookie operations are completed at the time a request from a client is intercepted. In some embodiments a cookie lookup from cookie jar is completed by the session owner A. The packet engine A uses the information of the request from the client to identify the cookie from the cookie storage A. In some embodiments the packet engine A of the session owner inserts the cookie into the request . In other embodiments the session owner sends a message to the core B N that intercepted the request and instructs the core to complete the cookie header insertion in request operation.

In some embodiments the cookie operations are completed outside the scope of a request or response . In some embodiments the cookie operation is a cookie update in cookie jar completed by the session owner packet engine A. In some embodiments a policy instructs the owner core to run a check on the existing cookies to ensure all the cookies are in valid form. In other embodiments the policy directs the owner core packet engine A to ensure all cookies do not exceed a predetermined size.

In other embodiments the cookie operation is a cookie jar allocation and free by the session owner packet engine A during the session creation or removal. In some embodiments the cookie operation allocates free memory of the intermediary device to ensure there is enough storage to store received and updated cookies for the session. In other embodiments the cookie operation expunges all the existing cookies once the session is terminated. In some embodiments a policy specifies that the cookie jar should not be expunged for a pre determined amount of time. In other embodiments a policy specifies that the cookie jar should only be partially expunged. In other embodiments a policy specifies that all the cookies be copied to a central cookie jar. In other embodiments a policy specifies that a log be created for all cookie operations such as timestamps ip addresses from the device sending or requesting the cookie any cookie updates deletions or creations.

In some embodiments the cookie operation may be setting a cookie for a given domain or sub domain. In other embodiments the cookie operation may be stripping the cookie from the response sent by the server prior to sending the response to the client . The cookies stripped from the response may be stored in cookie storage A. The cookie storage may be on the intermediary device . In other embodiments the cookie storage may be on a different device. In still other embodiments the cookie storage may be in a database table or data structure stored in the owner core. In other embodiments the cookie storage may be stored on the intermediary device and accessed by any of the cores of the device . In other embodiments the cookie storage may be known as a cookie jar.

In some embodiments the cookie store and update operations are done locally on each core of the intermediary device by the receiving packet engine without sending a message to the owner packet engine A. The non owner core B N receives the request or response obtains a local copy of the cookie storage A from the owner core A if the non owner core does not already have a locally stored copy. The owner core packet engine A proceeds to broadcast all updates or modifications to the cookie storage A to all the packet engines B N that have a copy of the cookie storage A. The broadcast of modifications to the cookie storage A by the owner core packet engine A may utilize Lamport timestamps vector clocks version vectors matrix clocks or any combination of serialization mechanisms described herein.

In some embodiments sessions of an owner core A may be replicated to all the packet engines B N of the intermediary device . When a request from a client is intercepted then a cookie lookup or cookie update operations can be completed locally on the receiving non owner packet engine B N. Once the cookie lookup or cookie update operation is completed locally the changes are broadcast to the other cores of the device including the owner core A. In some embodiments the broadcasting of updates or changes to the cookies are serialized. In some embodiments the serialization mechanism may be by Lamport timestamps. In other embodiments the serialization mechanism may be by vector clock. In other embodiments the serialized broadcast mechanism may utilize version vectors matrix clocks or any combination of serialization mechanisms.

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

