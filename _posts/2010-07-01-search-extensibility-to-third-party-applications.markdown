---

title: Search extensibility to third party applications
abstract: At least certain embodiments of the present disclosure include a method to extend search capabilities to third party applications installed on a device. In one embodiment, records associated with a third party application are indexed in a process isolated from other third party applications installed on the device using a search plugin specific to the third party application. Furthermore, the indexed records can be searched in response to a user search query without invoking the third party application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09098363&OS=09098363&RS=09098363
owner: Apple Inc.
number: 09098363
owner_city: Cupertino
owner_country: US
publication_date: 20100701
---
This application claims the benefit of U.S. Provisional Patent Application No. 61 321 764 filed on Apr. 7 2010 which is herein incorporated by reference in its entirety.

This disclosure relates to extending search capabilities to third party applications on a computing device.

Today many applications have been developed for running on multifunctional devices such as cellular telephones that include media players personal digital assistants PDAs etc. Many of these applications are provided by sources other than the vendor of the multifunctional devices and hence they are commonly referred to as third party applications. These applications may perform a wide variety of functions such as providing entertainment social networking etc. In performing these functions the multifunctional devices may access contents stored in the multifunctional devices or over a network e.g. the Internet .

To make it easier and more convenient for users of the multifunctional devices to organize and manage contents on the multifunctional devices operating systems installed on the multifunctional devices typically provide searching capabilities. Because many of the applications installed on the multifunctional devices are third party applications conventional operating systems installed in the multifunctional devices do not extend their search capabilities to these third party applications.

Some embodiments include one or more application programming interfaces APIs in an environment with calling program code interacting with other program code being called through the one or more interfaces. Various function calls messages or other types of invocations which further may include various kinds of parameters can be transferred via the APIs between the calling program and the code being called. In addition an API may provide the calling program code the ability to use data types or classes defined in the API and implemented in the called program code.

At least certain embodiments include an environment with a calling software component interacting with a called software component through an API. A method for operating through an API in this environment includes transferring one or more function calls messages other types of invocations or parameters via the API.

At least certain embodiments of the present disclosure include one or more APIs in an environment with search capabilities extended to one or more third party applications on a multifunctional device. Various function calls or messages are transferred via the APIs between the operating system of the multifunctional device and third party applications. Example APIs transfer function calls to implement indexing and searching of contents associated with the third party applications.

Some embodiments of the present disclosure include a method for extending search capabilities to third party applications installed on a multifunctional device. In one embodiment records associated with a third party application are indexed in a process isolated from other third party applications system applications and search bundles installed on the multifunctional device using a search plugin specific to the third party application. Note that the indexing may be performed without invoking the third party application. Furthermore the indexed records can be searched in response to a user search query without invoking e.g. launching or running the third party application.

According to some embodiments of the present disclosure a third party application installed on a multifunctional device can provide a search plugin specific to the third party application. The search plugin can be launched to pass records associated with the third party application to a search daemon running in a separate process on the multifunctional device. Identifiers IDs of the records can specify how a record should look like when the record is displayed in a search result generated in response to a user search query. Each of the IDs may further include a local ID which has sub IDs corresponding to different types of contents within a document associated with the respective record.

Various devices which perform one or more of the foregoing methods and machine readable media which when executed by a processing system cause the processing system to perform these methods are also described.

Various embodiments and aspects of the disclosure will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the disclosure and are not to be construed as limiting the disclosure. Numerous specific details are described to provide a through understanding of various embodiments of the present disclosure. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present disclosure.

Some portions of the detailed descriptions which follow are presented in terms of algorithms which include operations on data stored within a computer memory. An algorithm is generally a self consistent sequence of operations leading to a desired result. The operations typically require or involve physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like can refer to the action and processes of a data processing system or similar electronic device that manipulates and transforms data represented as physical electronic quantities within the system s registers and memories into other data similarly represented as physical quantities within the system s memories or registers or other such information storage transmission or display devices.

The present disclosure can relate to an apparatus for performing one or more of the operations described herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine e.g. computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs erasable programmable ROMs EPROMs electrically erasable programmable ROMs EEPROMs flash memory magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a bus.

A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example machines store and communicate internally and with other devices over a network code and data using machine readable media such as machine readable storage media e.g. magnetic disks optical disks random access memory read only memory flash memory devices phase change memory and machine readable communication media e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals digital signals etc. .

At least certain embodiments of the present disclosure include one or application programming interfaces in an environment with search software interacting with a software application. Various function calls or messages are transferred via the application programming interfaces between the search software and software applications. Transferring the function calls or messages may include issuing initiating invoking or receiving the function calls or messages. Example application programming interfaces transfer function calls to implement various operations e.g. search networking service discovery etc. for a device having a display region. An API may also implement functions having parameters variables or pointers. An API may receive parameters as disclosed or other combinations of parameters. In addition to the APIs disclosed other APIs individually or in combination can perform similar functionality as the disclosed APIs.

The display region may be in a form of a window. A window is a display region which may or may not have a border and may be the entire display region or area of a display. In some embodiments a display region may have at least one window and or at least one view e.g. web text or image content . The methods systems and apparatuses disclosed can be implemented with display regions windows and or views.

At least certain embodiments of the disclosure may be part of a portable electronic device such as a digital media player e.g. a portable music and or video media player which may include a media processing system to present the media a storage device to store the media and may further include a radio frequency RF transceiver e.g. an RF transceiver for a cellular telephone coupled with an antenna system and the media processing system. In certain embodiments data stored on a remote storage device may be transmitted to the portable electronic device through the RF transceiver. The data may be for example one or more of music or other audio still pictures or motion pictures etc.

The portable media player may include a media selection device such as a click wheel input device on an iPod or iPod Nano media player from Apple Computer Inc. of Cupertino Calif. a touch screen input device pushbutton device movable pointing input device or other input device. The media selection device may be used to select the media stored on the storage device and or the remote storage device. The portable media player may in at least certain embodiments include a display device which is coupled to the media processing system to display titles or other indicators of media being selected through the input device and being presented either through a speaker or earphone s or on the display device or on both display device and a speaker or earphone s . In some embodiments the display device and input device are integrated while in other embodiments the display device and input device are separate devices.

Embodiments of the disclosure described herein may be part of other types of data processing systems such as for example entertainment systems or personal digital assistants PDAs or general purpose computer systems or special purpose computer systems or an embedded device within another device or cellular telephones which do not include media players or multifunctional touch tablet devices or other multifunctional touch devices or devices which combine aspects or functions of these devices e.g. a media player such as an iPod portable media player combined with a PDA an entertainment system and a cellular telephone in one device an iPhone . Because these devices generally have multiple functionalities these devices may also be referred to as multifunctional devices hereinafter. In this disclosure electronic devices and consumer devices are types of devices.

In some embodiments a platform provides various search service discovery and networking operations. The platform includes hardware components and an operating system. The hardware components may include a processing unit coupled to an input panel and a memory coupled to the processor. The operating system includes one or more programs that are stored in the memory and configured to be executed by the processing unit. One or more programs include various instructions for transferring function calls or messages through an Application Programming Interface API in order to perform various search service discovery and networking operations.

One or more APIs may be used in some embodiments. An API is an interface implemented by a program code component or hardware component hereinafter API implementing component that allows a different program code component or hardware component hereinafter API calling component to access and use one or more functions methods procedures data structures classes and or other services provided by the API implementing component. An API can define one or more parameters that are passed between the API calling component and the API implementing component.

An API allows a developer of an API calling component which may be a third party developer to leverage specified features provided by an API implementing component. There may be one API calling component or there may be more than one such component. An API can be a source code interface that a computer system or program library provides in order to support requests for services from an application. An operating system OS can have multiple APIs to allow applications running on the OS to call one or more of those APIs and a service such as a program library can have multiple APIs to allow an application that uses the service to call one or more of those APIs. An API can be specified in terms of a programming language that can be interpreted or compiled when an application is built.

In some embodiments the API implementing component may provide more than one API each providing a different view of or with different aspects that access different aspects of the functionality implemented by the API implementing component. For example one API of an API implementing component can provide a first set of functions and can be exposed to third party developers and another API of the API implementing component can be hidden not exposed and provide a subset of the first set of functions and also provide another set of functions such as testing or debugging functions which are not in the first set of functions. In other embodiments the API implementing component may itself call one or more other components via an underlying API and thus be both an API calling component and an API implementing component.

An API defines the language and parameters that API calling components use when accessing and using specified features of the API implementing component. For example an API calling component accesses the specified features of the API implementing component through one or more API calls or invocations embodied for example by function or method calls exposed by the API and passes data and control information using parameters via the API calls or invocations. The API implementing component may return a value through the API in response to an API call from an API calling component. While the API defines the syntax and result of an API call e.g. how to invoke the API call and what the API call does the API may not reveal how the API call accomplishes the function specified by the API call. Various API calls are transferred via the one or more application programming interfaces between the calling API calling component and an API implementing component. Transferring the API calls may include issuing initiating invoking calling receiving returning or responding to the function calls or messages in other words transferring can describe actions by either of the API calling component or the API implementing component. The function calls or other invocations of the API may send or receive one or more parameters through a parameter list or other structure. A parameter can be a constant key data structure object object class variable data type pointer array list or a pointer to a function or method or another way to reference a data or other item to be passed via the API.

Furthermore data types or classes may be provided by the API and implemented by the API implementing component. Thus the API calling component may declare variables use pointers to use or instantiate constant values of such types or classes by using definitions provided in the API.

Generally an API can be used to access a service or data provided by the API implementing component or to initiate performance of an operation or computation provided by the API implementing component. By way of example the API implementing component and the API calling component may each be any one of an operating system a library a device driver an API an application program or other module it should be understood that the API implementing component and the API calling component may be the same or different type of module from each other . API implementing components may in some cases be embodied at least in part in firmware microcode or other hardware logic. In some embodiments an API may allow a client program to use the services provided by a Software Development Kit SDK library. In other embodiments an application or other client program may use an API provided by an Application Framework. In these embodiments the application or client program may incorporate calls to functions or methods provided by the SDK and provided by the API or use data types or objects defined in the SDK and provided by the API. An Application Framework may in these embodiments provide a main event loop for a program that responds to various events defined by the Framework. The API allows the application to specify the events and the responses to the events using the Application Framework. In some implementations an API call can report to an application the capabilities or state of a hardware device including those related to aspects such as input capabilities and state output capabilities and state processing capability power state storage capacity and state communications capability etc. and the API may be implemented in part by firmware microcode or other low level logic that executes in part on the hardware component.

The API calling component may be a local component i.e. on the same data processing system as the API implementing component or a remote component i.e. on a different data processing system from the API implementing component that communicates with the API implementing component through the API over a network. It should be understood that an API implementing component may also act as an API calling component i.e. it may make API calls to an API exposed by a different API implementing component and an API calling component may also act as an API implementing component by implementing an API that is exposed to a different API calling component.

The API may allow multiple API calling components written in different programming languages to communicate with the API implementing component thus the API may include features for translating calls and returns between the API implementing component and the API calling component however the API may be implemented in terms of a specific programming language. An API calling component can in one embedment call APIs from different providers such as a set of APIs from an OS provider and another set of APIs from a plug in provider and another set of APIs from another provider e.g. the provider of a software library or creator of the another set of APIs.

It will be appreciated that the API implementing component may include additional functions methods classes data structures and or other features that are not specified through the API and are not available to the API calling component . It should be understood that the API calling component may be on the same system as the API implementing component or may be located remotely and accesses the API implementing component using the API over a network. While illustrates a single API calling component interacting with the API it should be understood that other API calling components which may be written in different languages or the same language than the API calling component may use the API .

The API implementing component the API and the API calling component may be stored in a machine readable medium which includes any mechanism for storing information in a form readable by a machine e.g. a computer or other data processing system . For example a machine readable medium includes magnetic disks optical disks random access memory read only memory flash memory devices etc.

In Software Stack an exemplary embodiment applications can make calls to Services or using several Service APIs and to Operating System OS using several OS APIs. Services A and B can make calls to OS using several OS APIs.

Note that the Service has two APIs one of which Service API receives calls from and returns values to Application and the other Service API receives calls from and returns values to Application . Service which can be for example a software library makes calls to and receives returned values from OS API and Service which can be for example a software library makes calls to and receives returned values from both OS API and OS API . Application makes calls to and receives returned values from OS API .

In general the multifunctional device may store application data associated with third party application indexed by search daemon in a search database on the multifunctional device. In one embodiment the device can have a plurality of third party applications such as application each working within the manner described herein the search daemon or an instance of search daemon created for a corresponding third party application that uses the instance. In some embodiments search daemon may launch an application indexer to index application data. Specifically application indexer may launch an instance of an application search bundle provided by third party application to retrieve records of application data for indexing. Note that application search bundle is launched in a separate process isolated from other third party applications system applications and search bundles for security reasons. Furthermore the separate process in which application search bundle is launched may have the same privileges e.g. privileges with respect to reading and writing into a selected portion of a memory space but otherwise restricted from writing or reading other portions of the memory as third party application associated with application search bundle . Thus application search bundle is granted access to contents which third party application is allowed to access and is prohibited from accessing contents which third party application is not allowed to access. In some embodiments portions of the search daemon such as application indexer can also be given the same privileges e.g. memory space restrictions as third party application . In some embodiments search daemon may search the indexed application data in search database in response to user queries without launching third party application . Details of some embodiments of the interactions between search daemon and third party application to index and search application data are discussed below to further illustrate the above concept.

In one embodiment third party application is launched to run on the multifunctional device. While running third party application makes changes to application data . For example third party application may modify an existing record stored on the multifunctional device download a new record to the multifunctional device and or remove or delete an existing record stored on the multifunctional device. When third party application changes application data third party application further sends identifiers IDs of records changed in application data to search daemon . Search daemon may temporarily store the IDs of changed records in an update list .

Later when search daemon needs to construct indexed data search daemon may launch a separate process to run application indexer . Search daemon may construct indexed data periodically or when a search is requested or at some other time or intervals of time. Alternatively search daemon may construct indexed data when the search daemon discovers new information in update list . This can happen at the time third party application informs search daemon of the update identifiers. There also may be triggers external to application that may start indexing such as for example application updates system restores system updates etc. Application indexer may load application search bundle . In some embodiments application search bundle is a search related plugin specific to third party application . Third party application may have provided application search bundle upon installation of third party application onto the multifunctional device. Application indexer may provide the IDs of changed records from update list to application search bundle . In response application search bundle provides the changed records to application indexer to be indexed. Alternatively application indexer may request all records associated with third party application from application search bundle . In one embodiment the instance of the application indexer for third party application is run in its own process but with the privileges with respect to memory control memory space memory allocation filesystem control and network control as third party application .

In some embodiments each record includes a set of attributes dictating how the respective record should be displayed in a search result in the event of being matched to a user search query. For example an exemplary record may include an ID a title of the content a sub title of the content and an application specific ID also referred to as a local ID . When the record matches a user search query the title and the sub title of the record may be presented in the search result of the user search query.

Using the records from application search bundle application indexer may build or add a record in search database which may include metadata of the content associated with the record. In some embodiments search database includes multiple databases synchronized with each other. For example search database may include a first database to store indexed content and a second database to store records of the indexed content. More details of one embodiment of a search database are discussed below.

When a user submits a user search query search daemon may access search database to find records that match the user search query. Note that search daemon may search records associated with application data of third party application without launching third party application . Search daemon may present parts of the records matching the user search query such as for example by displaying titles and sub titles of the matching records in a search result region within a window. In some embodiments the user may select a record from the matching records. In response to the user s selection search daemon may launch third party application on the multifunctional device to present the content associated with the record selected. For instance the content may include video data and third party application may be launched to play the video or the content may include an electronic book and third party application may be launched to display the electronic book.

In some embodiments installation of a third party application is initiated on a multifunctional device at block . An application search bundle specific to the third party application is stored in a predetermined location with the third party application in the multifunctional device at block . Broadly speaking the application search bundle is a plugin provided by the third party application. The application search bundle may be loaded to transfer records of content associated with the third party application. At block metadata of the third party application is checked to determine if the third party application wants to index contents associated with the third party application. If the third party application wants to index contents the third party application is registered at block . For example a search daemon running on the multifunctional device may keep track of a list of registered applications in a centralized location and the search daemon may index contents associated with the third party application as discussed below.

In some embodiments a third party application is run on a multifunctional device at block . At block the third party application changes records of application data associated with the third party application. At block the third party application sends identifiers IDs of the changed records to a search daemon running on the multifunctional device.

At block a search daemon running on a multifunctional device receives IDs of changed records of application data associated with a third party application. The search daemon puts the IDs received into an update list at block . The search daemon may use the update list later to determine if it has to index records as discussed below.

At block the search daemon checks an update list to determine if there is any record changed. In some embodiments the search daemon may check the update list periodically. If there is then the search daemon has to index the changed record. The search daemon may launch an application indexer in a separate process to index the changed record at block .

At block an application indexer running on a multifunctional device instantiates an instance of an application search bundle in a separate process isolated from other third party applications system applications and search bundles. The application search bundle is a plugin specific to a third party application installed on the multifunctional device. At block application indexer passes IDs of changed records to application search bundle to request the changed records from application search bundle. Alternatively application indexer may decide to index all records associated with the third party application and thus requesting all records associated with the third party application from application search bundle.

At block application indexer receives the records requested from the application search bundle. Each record may contain a set of attributes of content associated with the record such as title of content sub title of content and local identifier of content used by the third party application. At block application indexer indexes records received and stores the records indexed in a search database within the multifunctional device.

At block a search daemon receives a user search query. For example a user may submit a user search query to look for records with a title having a specific text string e.g. spring . At block search daemon searches a search database containing indexed records for records that match the user search query.

At block search daemon returns an identifier of each record matching the user search query in a search result to be presented to the user. In some embodiments the identifier includes a title a sub title a reference to the associated third party application a local identifier specific to the third party application and a category.

In some embodiments the owner of a search box in which the user search query is entered receives the search results from the search daemon at query time. The user may select a record from the search result. The owner may be a search application or the third party application. If the owner is a search application that performs global searches the search application may launch the third party application and pass in the local identifier and category from the search daemon. If the owner is the third party application it can simply present the content associated with the selected record. Note that when the owner is the third party application only records in the search result relevant to the third party application may be shown.

In some embodiments the first database stores content e.g. a document a web page an electronic book a video etc. associated with some third party applications and their respective Ds. The second database may store records of the content. In the current example each record includes the ID of the content a title of the content a sub title of the content and a local ID of the content. The local ID is used by a third party application in accessing and processing the content. Thus the local ID may also be referred to as an application ID. Details of one embodiment of a local ID are shown in . The content in the search database is organized by indexing the records. A search daemon running on the multifunctional device may index the records and search the search database in response to user search queries as discussed above.

In some embodiments the search database stores content of all categories e.g. music video electronic books podcasts etc. on the multifunctional device. Although search performed in the search database may be fast the search database may become too large to backup. As such the search database may have to be rebuilt from scratch if needed.

Alternatively there is one search database for each category of content on the multifunctional device. For example a first search database may be established for music a second search database may be established for podcasts a third search database may be established for electronic books a fourth search database for a first third party application and a fifth search database for a second third party application and so on. By separating contents of different categories into different search databases the search databases may be backed up at different frequencies depending on how stable the content in each search database is. The more stable the content is the less frequent the corresponding search database has to be backed up. However search of content in the search databases may be slowed down because of multiple search databases. To mitigate the impact on performance a cache may be implemented in the multifunctional device to store records of frequently accessed content. As such searches may become faster.

In some embodiments the ID is unique only to a particular category within the third party application. A category is the type of content such as slide video document podcast etc. Thus the application specific ID is unique per category and each category is unique within the third party application.

In some embodiments a third party application may be associated with contents of multiple categories. For example a third party application may be associated with a document in which a video and a podcast are embedded. The third party application may put such a document under a single category e.g. Documents as far as the search daemon is concerned. If the third party application wishes to be able to return a finer granularity of result for example just the podcast part of the document it could provide an ID that points directly to the podcast and index it in a Podcasts category. The third party application could choose to submit either of these or both for indexing. The search daemon may not differentiate between a result with sub pieces and a single atomic result.

In some embodiments the methods systems and apparatuses of the present disclosure can be implemented in various devices including electronic devices consumer devices data processing devices desktop computers portable computers wireless devices cellular devices tablet devices handheld devices multi touch devices multi touch data processing devices any combination of these devices or other like devices. illustrate examples of a few of these devices.

In certain embodiments of the present disclosure the device can be used to implement at least some of the methods discussed in the present disclosure.

Wireless device may also include a digital processing system to control the digital RF transceiver and to manage the voice digital data and or media signals. Digital processing system may be a general purpose processing device such as a microprocessor or controller for example. Digital processing system may also be a special purpose processing device such as an ASIC application specific integrated circuit FPGA field programmable gate array or DSP digital signal processor . Digital processing system may also include other devices as are known in the art to interface with other components of wireless device . For example digital processing system may include analog to digital and digital to analog converters to interface with other components of wireless device . Digital processing system may include a media processing system which may also include a general purpose or special purpose processing device to manage media such as files of audio data.

Wireless device may also include a storage device coupled to the digital processing system to store data and or operating programs for the Wireless device . Storage device may be for example any type of solid state or magnetic memory device. Storage device may be or include a machine readable medium.

Wireless device may also include one or more input devices coupled to the digital processing system to accept user inputs e.g. telephone numbers names addresses media selections etc. Input device may be for example one or more of a keypad a touchpad a touch screen a pointing device in combination with a display device or similar input device.

Wireless device may also include at least one display device coupled to the digital processing system to display information such as messages telephone call information contact information pictures movies and or titles or other indicators of media being selected via the input device . Display device may be for example an LCD display device. In one embodiment display device and input device may be integrated together in the same device e.g. a touch screen LCD such as a multi touch input panel which is integrated with a display device such as an LCD display device . The display device may include a backlight A to illuminate the display device under certain circumstances. It will be appreciated that the Wireless device may include multiple displays.

Wireless device may also include a battery to supply operating power to components of the system including digital RF transceiver digital processing system storage device input device microphone A audio transducer media processing system sensor s and display device . Battery may be for example a rechargeable or non rechargeable lithium or nickel metal hydride battery. Wireless device may also include audio transducers which may include one or more speakers and at least one microphone A. In certain embodiments of the present disclosure the wireless device can be used to implement at least some of the methods discussed in the present disclosure.

This device may also optionally include a display controller and display device which is coupled to the other components through the bus . One or more input output controllers are also coupled to the bus to provide an interface for input output devices and to provide an interface for one or more sensors which are for sensing user activity. The bus may include one or more buses connected to each other through various bridges controllers and or adapters as are well known in the art. The input output devices may include a keypad or keyboard or a cursor control device such as a touch input panel. Furthermore the input output devices may include a network interface which is either for a wired network or a wireless network e.g. an RF transceiver . The sensors may be any one of the sensors described herein including for example a proximity sensor or an ambient light sensor. In at least certain implementations of the device the microprocessor may receive data from one or more sensors and may perform the analysis of that data in the manner described herein.

In certain embodiments of the present disclosure the device can be used to implement at least some of the methods discussed in the present disclosure.

In the foregoing specification the disclosure has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the disclosure as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

