---

title: Managing extension projects with repository based tagging
abstract: According to some embodiments, information about a delta change package may be received. The delta change package may be, for example, associated with a customer extension project to be applied to content from a business service provider. A description tag for the delta change package may be received from a user, and the delta change package may be associated with the description tag in a repository of the business service provider.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021392&OS=09021392&RS=09021392
owner: SAP SE
number: 09021392
owner_city: Walldorf
owner_country: DE
publication_date: 20100726
---
Some embodiments relate to extension projects associated with a business service provider. More specifically some embodiments use repository based tagging to manage extension projects.

A business service provider may provide a general framework to be used by a number of different customers or clients. For example the business service provider might create a generic framework to store and maintain Enterprise Resource Planning ERP information along with a set of user interfaces. In some cases however a particular client might want to modify or extend the general framework e.g. by adding a new field to a particular form . Moreover a single client might utilize several different extensions or versions of the generic framework based on its business needs. For example the client might add a tax identifier to a generic purchase order form when the form is used within Germany but not when the form is used outside Germany. According to some embodiments one or more partners may also develop extensions and or new applications for clients.

It can be difficult however for a customer or client to maintain and or track these various versions of the business service framework. For example a customer might want to group various extensions or adaptations in a logical way to facilitate the activation de activation and or movement of those changes. To address this need an entirely new project management infrastructure could be created. Such an approach however might be an expensive undertaking and could be too complex for some customers.

Accordingly a method and mechanism for flexibly and efficiently managing such extension projects may be provided by some embodiments herein.

An enterprise might store and access business information in a number of different ways. For example an enterprise might store a substantial amount of information about production sales human resources etc. in one or more database structures created by a business service provider e.g. commercially available systems from SAP AG . is a block diagram of a system according to some embodiments. In this case a business service provider might host and provide business services for a customer or client . For example the business service provider might receive requests from the client and provide responses to the client via a service oriented architecture as understood by those of skill in the art. The use of the remotely hosted business process platform may help the client avoid the costs and problems associated with maintaining a local in house Enterprise Resource Planning ERP system.

The client may be associated with a Web browser that accesses services provided by business service provider via HyperText Transport Protocol HTTP communication. For example a user may manipulate a user interface of the client to input an instruction e.g. show me a sales report . The client in response may transmit a corresponding HTTP service request to the business service provider as illustrated. A service oriented architecture may conduct any processing required by the request e.g. generating views and user interfaces and after completing the processing provide a response to client . The client might comprise a Personal Computer PC or mobile device executing a Web client. Examples of a Web client include but are not limited to a Web browser an execution engine e.g. JAVA FLASH or SILVERLIGHT that executes associated code in a Web browser and or a dedicated standalone application.

Note that represents a logical architecture for describing processes according to some embodiments and actual implementations may include more or different components arranged in other manners. Moreover each system described herein may be implemented by any number of devices in communication via any number of other public and or private networks. Two or more of devices of may be located remote from one another and may communicate with one another via any known manner of network s and or a dedicated connection. Moreover each device may comprise any number of hardware and or software elements suitable to provide the functions described herein as well as any other functions. Other topologies may be used in conjunction with other embodiments.

All systems and processes discussed herein may be embodied in program code stored on one or more computer readable media. Such media may include for example a floppy disk a CD ROM a DVD ROM a Zip disk magnetic tape magnetic disk and solid state Random Access Memory RAM or Read Only Memory ROM storage units. Embodiments are therefore not limited to any specific combination of hardware and software.

The business service provider might store client information into and retrieve client information from one or more database structures such one or more business objects. As used herein the phrase business object may refer to a set of entities with common characteristics and common behavior representing a defined business semantic. Note that business data may be stored within physical tables of a database. The database may comprise a relational database such as SAP MAXDB ORACLE MICROSOFT SQL SERVER IBM DB2 TERADATA and the like. Alternatively the database could be a multi dimensional database an eXtendable Markup Language XML document or any other structured data storage system. The physical tables may be distributed among several relational databases dimensional databases and or other data sources.

The structures of and relationships between the physical database tables may be complex and business objects may be used to shield developers and end users from these complexities. A business object may comprise for example a software model including nodes to encapsulate related data and methods. Moreover a business object may be associated with a business entity such as a customer partner sales order product store time etc. represented in the data of a data source. Each instance of a business object may represent a particular instance of the entity represented by the business object. An instance of a sales order business object may for example provide a mapping to the underlying tables storing data associated with a particular sales order.

In general terms the business object model defines business related concepts for a number of business transactions. The business object model may reflect the decisions and relationships about real world businesses acting in business transactions and may span across different industries and business areas. The business object model may be for example defined by business objects and their relationships to each other. Despite being applicable across different business entities and industries business object model interfaces may be consistent across the different industries and across different business units because they are generated using a single business object model.

The business service provider may provide a general framework to be used by a number of different clients . In some cases however a particular client might modify or extend the general framework e.g. by adding a new field to a particular form or modifying a business object . Moreover a single client might utilize several different extensions or versions of the generic framework based on its business needs. For example the client might add a tax identifier to a generic purchase order form when the form is used within Germany but not when the form is used outside Germany. According to some embodiments one or more partners may also develop extensions and or new applications for clients .

For example illustrates layers of content associated with a business service according to some embodiments. In this case an original layer of business service provider content may be modified by partner content . Additional extension or changes may be provided by modifications in a client content layer . For example one version of the framework might comprise client content A layered over the partner content . Another version might comprise client content C layered over client content B which in turn was layered over the partner content . It can be difficult however for a customer or client to maintain and or track these various versions of the business service framework. For example a customer might want to group various extensions or adaptations in a logical way to facilitate the activation de activation and or movement of those changes. To address this need an entirely new project management infrastructure could be created. Such an approach however might be an expensive undertaking and could be too complex for some customers.

Accordingly methods and mechanisms to flexibly and efficiently manage such extension projects are provided by some embodiments herein.

In particular is a flow diagram of a process according to some embodiments. The business service provider and or client may execute portions of the process as will be described below but embodiments are not limited thereto. In this regard all processes described herein may be executed by any combination of hardware and or software. The processes may be embodied in program code stored on a tangible medium and executable by a computer to provide the functions described herein. Further note that the flow charts described herein do not imply a fixed order to the steps and embodiments of the present invention may be practiced in any order that is practicable.

At S information is received about a delta change package associated with a customer extension project to be applied to content from a business service provider. For example a user associated with the customer might provide one or more adaptations to a user interface or business object. At S a description tag for the delta change package is received from the user. The description tag might comprise for example an alphanumeric string that describes the purpose or function of the delta change package. According to some embodiments a user might select the descriptive tag from a list of potential or possible tags. At S the delta change package is associated with the description tag in a repository of an execution platform of the business service provider. For example the description tag may be stored in the repository along with a link to the delta change package. The description tags may then be used to logically group delta change packages e.g. a user might ask to see a list of change packages associated with a particular tag .

Such an approach may provide extensible and flexible capabilities to customers and or partners. For example a customer might use tags to organize extensions in extension projects or bundles e.g. where the project group extension artifacts logically belong together . Moreover customers may organize their adaptations and extensions in logical groups that they can manage themselves in terms of activation deactivation transport of extension bundles.

Note that a customer may want to perform multiple extensions to a single entity in different projects e.g. using one extension for scenario one and another extension on the same entity some time later for scenario two . According to some embodiments entity tagging properties provided by a repository are used to assign projects enabled via tags to an entity. As a result a customer may quickly search for entities belonging to a particular extension project by leveraging the tags. Other features for handling extension projects e.g. consistency checks may also be supported according to some embodiments by selecting the entities via tags and checking consistency on the entity list.

Note that the process of could be implemented using any of a number of different hardware and or software configurations. is a block diagram of one system that might be implemented according to some embodiments. The system includes business process platform to provide services to client according to some embodiments. The business process platform may comprise the Application Platform provided by SAP of Walldorf Germany and based on SAP Netweaver and or byDesign but is not limited thereto. In this regard represents a logical architecture for describing systems and processes according to some embodiments. The architecture may be implemented using any arrangement of hardware devices data structures and program code.

The client may comprise any suitable device. For example the device may include any necessary software to support a proprietary interface e.g. a proprietary client application or execution engine e.g. a Web browser . Client is also capable of communication including sporadic communication e.g. mobile devices with business process platform .

More specifically client may use application programming interfaces exposed by enterprise services framework to request read and write access to business object instances stored in data persistency . The business object instances are instances of corresponding business object models. A repository may provide data of the business object models to describe the structure and attributes of instances thereof. Enterprise services framework therefore uses data provided by repository to access business object instance data stored in data persistency . The repository includes persistency runtime repository engine and runtime buffer . During runtime runtime repository populates runtime buffer based on information stored in persistency .

According to some embodiments the repository may store project maintenance data including descriptive tag information associated with one or more extension projects of the client . is a block diagram illustrating tagging for customer extensions according to some embodiments. Note that a single project may be associated with a number of repository entities and associated tags . Moreover a log message may be used to associate tags with repository entities .

For example illustrates a project maintenance table according to some embodiments. In this example user A defines a new field entitled revenue per employee to an extended entity called Account OIF. The account OIF might be associated with for example an Object Instance Floorplan e.g. a user interface showing an account . As a result of this new definition an entry is created in the project maintenance table . The entry includes the entity type e.g. user interface or form the extended entity a description of the adaptation a user identifier the date and time when the adaptation was saved an extension project identifier e.g. the description tag Direct Sales and the date and time when the adaptation was published e.g. as described with respect to . Moreover a delta change package D 01 for the user interface of Account OIF may be created along with delta changes for an associated Enhanced Controller Object ECO e.g. a controller for a user interface Business Object BO node Fast Search Infrastructure FSI data etc.

Now assume that user A adds a new field EAN to delivery note on delivery OIF e.g. a UI change and adds a field EAN to the delivery note e.g. a form change . As a result new entries of project maintenance table associated with the delivery entity are illustrated in . Another user user B then adds a new field entitled language to Account OIF. As a result a new entry is added to the project maintenance table illustrated in . Note that this new entry is associated with a different description tag Social CRM . Also note that a new delta package A OIF 02 is now applied over the prior A OIF 01. 

Note that the entries include a graphical icon represented as a in . illustrates how a view would be represented when the associated with entity type BO is selected by the user. Note that the symbol has been replaced with a symbol . This view represents a drill down display into the BO account and appropriate versions e.g. V or V are displayed for each entry. Similarly illustrates how a view would be represented when the associated with entity type UI is selected by the user. As before the symbol has been replaced with a symbol . This view represents a drill down display into the BO account and appropriate versions e.g. V or V are displayed for each entry.

Now assume the user wishes to discard V of the Account OIF. illustrates that the user may deselect that entry in the table e.g. by replacing the x in the publish discard column with a blank space . The result of this action is illustrated by the project maintenance table of . Note that the entry now includes only Add field revenue per employ and not Add field language. Next assume that user A re arranges the revenue and language fields for Account OIF. illustrates the project maintenance table with a new entry indicating that a delta package A OIF 03 has been created for Account OIF.

Note that the information in the project maintenance table can be grouped arranged and or sorted in any of a number of different ways. The table of is ordered based on entity type e.g. all UI entries are then followed by the Form entry . According to some embodiments a user might mouse click the Ext Project column header to re order the entries. In particular illustrates a project maintenance table that is now ordered based on the ext project description tags . That is all Direct Sales entries are then followed by the Social CRM entry .

The project maintenance tables and descriptive tags may help users create adaptations of business service provider content. For example illustrates business service content layering according to some embodiments. At the lowest layer of the repository business service provider content may be changed with globalization content and industries content . Partner content may then be applied followed by an over all company layer for a client or customer. Personalization content might then be applied e.g. to tailor a display for a particular end user . Company staging content might also be applied to the company layer e.g. to let a key user create and or test new adaptations and extensions .

In this way a key user might be able to make changes without making them directly available to other users and let him or her test company wide settings without interfering with other users . For example illustrates a data flow according to some embodiments associated with business service provider content partner content a company layer personal content and company staging layer . In this example key user A adapts a screen display presses save and exits design time mode at time . As a result a new delta package Account OIF A OIF 1 is created in the company staging layer . At time key user B enters design time mode tests the new screen and exits. At time key user A publishes the extended entity and the delta package is moved from the company staging layer to the company layer . End user C may then access the screen and view the published changes at time . 

In this way changes e.g. extensions or adaptations may be flexibly deployed in the system. Adding extension fields making fields visible or rearranging the UI are some examples of these types of changes that may be made to business service provider objects. As used herein the term object might refer to entities for which these changes can be applied extended objects including floorplans form templates business objects and reports.

An extension project may refer to a grouping of semantically related changes e.g. done as part of the on boarding of a new account and may let a user find all extended objects and their changes related to the project. The grouping functionality provided by extension projects may realized by tagging the changes and grouping the changes on UI level. Changes done by a key user may be stored in a default project repository project object . To resolve conflicting changes on the same object all objects extended entities which are changed during an adaptation session might be locked as long as the user is in runtime authoring mode for that object.

As used herein an extended entity may refer to any entity that is extended e.g. a screen form or business object and an extension might refer to an entity describing the extension adaptation of an extended entity as meta data e.g. a screen layout change adding a company logo to a form or an entirely new extension field .

According to some embodiments changes for an extended object are stored in a change history. The change history might for example provide information on tag s defined by the user when creating the change on save whether the change is published un published a date and time of the change a user identifier and or a human readable description about the change.

Referring again to a customer defined tagging mechanism may comprise a simple classification that is attached to the repository entity . This tagging allows an n m relation that is each entity can have multiple tags and each tag can be added to multiple entities. A result a customer can perform his or her extensions in the system and can add tags to the extensions as desired.

For example assuming a UI where a customer key user first changes something in the context of a scenario with ONE acting as a customer or a supplier for the company . In another step the same company also has some business with TWO where a similar extension is required.

Based on the tags it may be possible to show all extensions for customers either in a flat list e.g. ordered by time or user or to group them by tag e.g. show all extensions for ONE . With such a grouping note that the same entity can appear in multiple groups e.g. when multiple tags are attached . Moreover it may be possible select related repository entities and publish them at the same time or to release them from test to a productive system . Note that tags might be added to the log message in addition to the repository entities . This might help a user identify what changes have been done and in what context .

According to some embodiments a consistency check may be performed for an assembly of extension entities. For example on assembly such a check might evaluate whether or not all required artifacts are together on the assembly list e.g. a field usage on the UI for an extension field might cross check that the extension field definition is also on the assembly list . The consistency check might be performed when publishing from a staging area to a company wide layer as well as for other movements of extension entities e.g. between test and productive environments . When unpacking extension entities after a move between test productive environments there may also be a consistency check to determine if the extension entities are consistent. These checks might be for example the same ones as were done for a manual creation of the extension entities in the target environment.

When assembling entities via tags e.g. grouping note that cross tag dependencies might exist. For example if a UI contains two extension fields that are related to different tags the UI itself may belong to both contexts tags . In this case the consistency check for the UI may needs to detect that both extension field definitions are on the assembly list and whether the selection has been done via the one or the other tag. If one entity is missing the consistency check might create a message and inhibit publication of the incomplete assembly list.

Referring now to key users in the system may perform adaptations and extensions e.g. directly in a productive system . As before partner content may be applied to business service provider content . According to some embodiments the key user may adopt extend the system save the changes within a staging layer which is only active for this user or a group of key users but is not company wide and test the changes. The staging layer is an additional layer on top of the company wide layer and used for key user testing. The company wide layer may contain the active extensions for all users of this customer environment. Key user extension may be moved from staging layer to company wide layer as soon as extensions are published .

Although content in the repository is separated in layers the extensions may be generated into the runtime buffers and runtime artifacts already upon saving. This generation of runtime entities may be independent of which customer layer the artifacts are saved to. When moving the entities from the customer staging layer to the company wide layer the entities and its generated artifacts may remain the same e.g. the only difference from a repository point of view might be that a different set of users access the entities .

The embodiments described herein are solely for the purpose of illustration. Those in the art will recognize other embodiments may be practiced with modifications and alterations limited only by the claims.

