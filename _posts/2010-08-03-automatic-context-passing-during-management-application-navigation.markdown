---

title: Automatic context passing during management application navigation
abstract: Various embodiments of systems and methods for automatic context passing during management application navigation are described herein. When management applications work with different managed entities, the managed context is preserved by following the relations between the managed entities. These relations are followed from a mediator framework during the navigation between the management applications. In this manner, a managed application passes context information for one entity type, and second managed application retrieves from the framework context information for different entity type, but the user context information will be preserved as the framework follows the relations between the passed entity and the requested entity types.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09501293&OS=09501293&RS=09501293
owner: SAP SE
number: 09501293
owner_city: Walldorf
owner_country: DE
publication_date: 20100803
---
The field relates to computer application management. More precisely the field relates to context passing during navigation between management applications.

There are various administration tools for managing complex computer applications. Some of these tools are realized as an aggregate of many distinct management applications. These management applications can also be called plug ins or modules. Each management application offers a visual interface for management of some dedicated scope of a complex computer application. For example a user utilizes a first management application to monitor a complex computer application a second management application to configure a complex computer application a third management application to administer a complex computer application a forth management application to diagnose a complex computer application etc.

Usually at any point of time only one of these management applications is visible to the user. A common user scenario for working with an aggregated administration tool includes managing entities within several management applications. An entity in the context of a management application is a part of the system that is managed utilizing the management application. For example an entity may be a service or an application and the user may use one management application to start the application and another management application to view the logs for the same application. During the navigation between the management applications it can be desirable to keep information for the selected managed entities. For example there is usually a special framework between the administration tool and the management applications that is used for keeping the managed entities. Before exiting a management application passes the managed entities context information to the framework. When a navigation target management application is started it can read entity information from the framework. The framework thus serves as a mediator between the management applications.

The context passing mechanism described above works adequately when the management applications use the same managed entities. However when management applications work with different managed entities the managed context will be lost. This loss prevents users from building complex management scenarios using this basic framework mediator approach.

Various embodiments of systems and methods for automatic context passing during management application navigation are described herein. In one embodiment the method includes receiving a user action to navigate to a second management application from a first management application and collecting one or more managed entities the user works with in the first management application. The method also includes retrieving one or more related entities to the one or more managed entities to populate a managed entity context as well as retrieving one or more context entities from the managed entity context the one or more context entities recognizable by the second management application. The method further includes applying the retrieved one or more context entities in the second management application.

In another embodiment the system includes a first and a second management applications one or more managed entities a user works with in the first management application and one or more related entities to the one or more managed entities. The system further includes a selector module to define the one or more related entities to the one or more managed entities in the first management application to populate a managed entity context and an extractor module to retrieve one or more context entities from the managed entity context the one or more context entities recognizable by the second management application.

These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof presented in connection with the following drawings.

Embodiments of techniques for automatic context passing during management application navigation are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

Managing aspects of an entity can include managing various properties or attributes of the entity. Entity properties or attributes can be organized according to their related functionality so that the different management applications can easily manipulate specific types of functionalities of entities.

A common user scenario includes management of entities using different management applications . While multiple management applications are often used in a given user scenario at any point of time only one of the management applications can be actively used for management. As a result navigation between the management applications is required and information for the managed entities is kept.

When using a management application only the inherent entities and aspects of the entities associated with that application are managed. The inherent entities and aspects of the entities for an application are these entities and aspects of the entities manageable by the application. For instance a user of a management application may navigate from a first management application to a target management application according to a user scenario. If management applications and use the same managed entities then before the first management application exits the first management application can send managed entities information to a mediator framework . The target management application can then read the managed entities information from the mediator framework and perform further management activities on the managed entities.

In a more complex scenario in which management applications and use different managed entities the managed context is lost during the navigation between management application and management application because the target management application does not recognize the managed entities from the first management application . Various embodiments can address this problem by not only storing information for the managed entities in the mediator framework but by also storing information for entities related to the managed entities in the mediator framework .

In one specific embodiment the management applications perform their management activities by means of Java Management Extensions JMX . JMX is a Java technology that supplies tools for managing and monitoring applications system objects devices e.g. printers and service oriented networks. These resources are represented by objects called MBeans for Managed Bean . An MBean represents a resource running in the Java virtual machine such as an application or a Java EE technical service. The MBeans can be used for getting and setting applications configuration for collecting statistics e.g. performance resources usage problems and notifying events e.g. faults state changes .

Turning back to the embodiment illustrated in the management applications operate on Managed Entity MBeans by means of JMX . These Managed Entity MBeans represent the managed aspects of the entities. The MBeans expose different attributes and operations applicable for the entity. Part of the exposed information of an MBean is the relations to other entities. In one embodiment this relation information is used by the mediator framework to discover related entities during navigation between management applications . By following these relations the managed context can be preserved even when the first management application and the second management application utilize different managed entities. The target management application may read from the mediator framework not only the managed entities utilized by the first management application but also the related entities to the managed entities following the relations provided by the Managed Entity MBeans . For example if a user observes an entity being for instance some kind of an application or a service within a management application and the status of the entity is FAILED then the user may be interested in seeing the logs for the same entity. The logs are available in a second management application and when loading the second management application instead of searching the failed application or service entity by name the user expects to see the filtered logs for the entity selected in the first management application. Thus the managed context is preserved while navigating between the management applications. Other specific examples for preserving managed context information will be given in more detail below.

The method starts at block with receiving a user action to navigate to a second management application from a first management application. The navigation is required because different management applications operate on different entities and aspects of the entities. As a result switching between management applications is a typical management scenario. The navigation to the second management application may be invoked in one embodiment by following a link in the first management application leading to the second management application. In another embodiment the navigation is performed by exiting the first management application followed by loading the second management application.

At block one or more managed entities a user works with in the first management application are collected. In one embodiment all of the MBeans that are managed by the first management application are identified.

At block one or more related entities to the one or more managed entities are retrieved. These retrieved entities can populate a managed entity context. In one embodiment the retrieving of the related entities is done by following entity relations. In one embodiment the entity relations may be registered from special MBeans. These MBeans should have a special attribute showing what relations they introduce and methods that could be used to follow a particular relation. In one embodiment the entity relations are added at runtime. For example in a complex computer application having a number of management applications to manage different aspects of the complex computer application some of the entity relations may not be hard coded because of the dynamics of the complex computer application which requires support of adding relations in runtime by specific Application Programming Interfaces APIs .

At block one or more context entities recognizable by the second management application are retrieved from the managed entity context. According to one embodiment entities recognizable by a management application are entities that are managed utilizing selfsame management application.

Finally at block the retrieved one or more context entities are applied in the second management application. In one embodiment the method further includes displaying the applied one or more context entities in the second management application. For example a user operates on an entity by means of a first management application and the logs of the entity being managed by the first management application are retrieved and displayed in a second management application the second management application designated to show logs.

When navigating between the first management application and the second management application the managed entities for the first management application and the managed entities for the second management application may not necessarily be of the same type. For instance managed entities and are recognizable and operable by both the management application and the management application . However managed entities and from management application are not recognizable by the second management application . The same is true with managed entities and pertinent to management application but not recognizable by management application .

The system further includes a selector module to define the one or more related entities to the one or more managed entities in the first management application thus populating a managed entity context . The selector module defines relations between entities to to to and to . The managed entities plus their related entities form the managed entity context .

The system further includes an extractor module to retrieve one or more context entities and from the managed entity context the one or more context entities and recognizable by the second management application . Thus when management applications and work with different management entities and accordingly at least partially the managed context will be preserved by following the relations between the managed entities and their related entities because the related entities are recognizable by the second management application .

In one embodiment the relations between the one or more managed entities and the one or more related entities are predefined in a mediator framework . The mediator framework serves as a model for the relations between the managed entities and their related entities . In one embodiment the entity relations are formed by attributes and operations applicable for the managed entities .

In some embodiments the entity relations between the managed entities and the related entities are hard coded while in other embodiments there is a user interface for adding these relations at runtime. In some embodiments the mediator framework is further used as a container for the first management application and the second management application . In yet other embodiments the mediator framework includes an interface to the first management application and the second management application the interface to manage the lifecycle of the first management application and the second management application . In some embodiments the system further includes a display module to display the retrieved one or more context entities and in the second management application .

The user can select one of these java applications to see various details of the selected java application like for example deployed time version etc. The details of the java application are shown in in the System Info Components Info management application . There is a link in within the management application to load the management application presented in . If the user clicks on the link in the management application stores into a mediator framework that the selected java application is the java application . Then the mediator framework accesses the MBean of this java application and takes the MBeans of its related entities. There is one MBean of the related entities that is from application component type. This entity in has the same name as the java application in . The mediator framework adds related entities to the managed context.

The mediator framework then destroys the management application presented in and loads the management application presented in . Management application works with managed entities from application component type. It asks the mediator framework for entities from application component type within the managed context. The mediator framework gives entity as being within the managed context. The management application loads all existing entities and selects the entity . Thus the mediator framework automatically follows the relation between java application in and entity of to preserve the managed context.

Some embodiments of the invention may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment of the invention may be implemented using Java C or other object oriented programming language and development tools. Another embodiment of the invention may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather the scope of the invention is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

