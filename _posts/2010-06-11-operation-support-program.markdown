---

title: Operation support program
abstract: An operation support program is stored in a storage medium. The operation support program includes a support database or a plurality of support program components for supporting a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device control programs that are different from one another. The operation support program causes a computer to function as constituent sections including: an update data acquiring section; an updating section; and a graphical user interface configuring section.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08285756&OS=08285756&RS=08285756
owner: Seiko Epson Corporation
number: 08285756
owner_city: Tokyo
owner_country: JP
publication_date: 20100611
---
This application claims priority to Japanese Patent Application No. 2009 140904 filed Jun. 12 2009 Japanese Patent Application No. 2009 140905 filed Jun. 12 2009 and Japanese Patent Application No. 2009 140906 filed Jun. 12 2009. The entireties of each of these applications are incorporated by reference herein.

The present invention generally relates to an operation support program. In particular the invention relates to an operation support program for supporting a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device control programs that are different from one another.

An operation support program that displays a pop up message with an embedded URL Uniform Resource Locator for linking to a website on which users can purchase consumable supplies is known in the art. The pop up message appears when the remaining amount of consumable supplies such as ink cartridges printing paper and the like reaches a predetermined level. An example of such an operation support program is disclosed in JP A 2004 206678. Such an operation support program is provided for each device control program. Though a URL that is managed by an operation support program that is installed in a client PC Personal Computer is a fixed value since a plurality of Web servers is located as intermediaries on a route for accessing a website on which users can purchase consumable supplies it is possible to change a website to which the users are guided even after the distribution of the operation support program merely by changing the URL registered in the Web servers.

In addition for the purpose of supporting various tasks that are carried out by means of a multi function device having a printing function a scanning function and a facsimile function an operation support program that configures GUI Graphical User Interface corresponding to tasks that are different from one another in a single window in a unified view is also known in the art refer to JP A 2004 206678 . Related art that has not been published and thus known yet is disclosed in Japanese Patent Application No. 2009 94643. Such an operation support program displays messages with embedded links to for example an online manual FAQ program update data a website on which users can purchase consumable supplies and the like and messages with embedded shortcuts for launching an image retouch program and other programs in a single window.

However an operation support program of related art offers nothing more than providing fixed links or fixed shortcuts to users by itself. Accordingly it is difficult to offer Web service with great usability in a finely tuned manner as ever changing business scene demands. Specifically in comparison with a case where users have to actively follow a link in order to browse a web page that offers service that they demand usability is greater in a case where users can passively browse a web page that offers service that they demand. In order to offer such Web service to users it is necessary to set a link depending on model frequency in use locale language time operation state and the like. To provide various Web server linked services or various non linked services depending on model frequency in use locale language time operation state and the like in a finely tuned manner for supporting tasks however it is necessary to finely set a link for each individual user in addition it is necessary to change the content of a linked Web server as business scene changes. Moreover it is preferable to change GUI of a client PC. To change a unified GUI that consolidates GUIs that are respectively unique to a plurality of device control programs it is necessary to carry out unified management on the automatic updating of program modules and data respectively unique to the plurality of device control programs. However a workable solution function for carrying out unified management on the automatic updating of a plurality of programs and data working with a plurality of device control programs for implementing functions that are different from one another for example the functions of a printer a scanner a fax machine and a digital camera has not been devised yet.

As another disadvantage it is not efficient and practically impossible to individually develop an operation support program for each device driver or for each device for providing operation support programs that correspond to various device control programs and various devices.

Moreover as another disadvantage related art operation support GUI cannot be automatically activated in response to a change in environment. That is unless users activate an operation support program it is not possible to support a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device control programs that are different from one another as the situation demands.

An advantage of some aspects of the invention is to support a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device control programs that are different from one another in a finely tuned and or individually targeted manner as the situation demands.

Another advantage of some aspects of the invention is to support a plurality of tasks that are different from one another and are carried out as a result of execution of an arbitrary device control program as the situation demands.

Another advantage of some aspects of the invention is to always support a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device control programs that are different from one another as the situation demands on a steady basis.

 1 In order to offer the above advantages without any limitation thereto an operation support program according to a first aspect of the invention includes a support database or a plurality of support program components for supporting a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device control programs that are different from one another. The operation support program according to the first aspect of the invention causes a computer to function as constituent sections including an update data acquiring section that establishes connection with a server at predetermined timing to acquire update data for updating the support database or the plurality of support program components from the server via communication lines an updating section that updates the support database or the plurality of support program components on the basis of the update data and a graphical user interface configuring section that configures a support graphical user interface for supporting the plurality of tasks that are different from one another by utilizing the support database or the plurality of support program components wherein the update data acquiring section transmits update control information for acquiring the update data in accordance with types of the plurality of device control programs to the server the update data acquiring section receives a server update record that indicates the last update time of the update data corresponding to the update control information at the server from the server the update data acquiring section transmits a preceding server update record which was acquired the last time as a client update record to the server and if time indicated by a current server update record which has been acquired this time does not agree with time indicated by the client update record the update data acquiring section acquires the update data from the server and updates the preceding server update record acquired the last time into the current server update record acquired this time. With such features of the first aspect of the invention it is possible to carry out unified management on the automatic updating of a support database or a plurality of support program components for supporting a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device control programs that are different from one another. Therefore the first aspect of the invention makes it possible to support a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device control programs that are different from one another in a finely tuned and or individually targeted manner as the situation demands. In addition it is possible to reduce the amount of data transmitted via communication lines for the automatic updating of a support database or a plurality of support program components under unified management.

 2 In the operation support program according to the first aspect of the invention it is preferable that the update control information should include a client update code that indicates the last update state of the support database or the plurality of support program components if the current server update record acquired this time does not agree with the client update record the update data acquiring section should acquire a server update code that indicates the last update state of a server data group that corresponds to the plurality of device control programs from the server the update data acquiring section should make a request to the server for the update data that is necessary for updating the support database that is not in the latest condition or the plurality of support program components that are not in the latest condition on the basis of the client update code and the server update code and the update data acquiring section should acquire the update data created from the server data group from the server. With such a preferred aspect of the invention it is possible to further reduce the amount of data transmitted via communication lines for the automatic updating of a support database or a plurality of support program components under unified management.

 3 It is preferable that the operation support program according to the first aspect of the invention should cause the computer to function as the constituent sections further including a detecting section that detects execution environment wherein the graphical user interface configuring section configures the support graphical user interface in accordance with the execution environment. With such a preferred aspect of the invention it is possible to configure a graphical user interface for supporting a plurality of tasks that are different from one another i.e. support GUI in a flexible manner depending on the situation. Execution environment which is environment in which the operation support program is executed is unique software hardware environment for each arbitrary client computer.

 4 In the operation support program according to the preferred aspect of the invention the detecting section may detect statuses or logs of a plurality of devices controlled by the plurality of device control programs. With such a preferred aspect of the invention it is possible to flexibly configure support GUI depending on the statuses or logs of the plurality of devices.

 5 In the operation support program according to the preferred aspect of the invention the detecting section may include device API Application Programming Interface that is configured as common API for performing communication with the plurality of device control programs to detect the execution environment. Such a preferred aspect of the invention makes it easier to develop a plurality of support program components working respectively with a plurality of devices that are different from one another. Therefore it is easier to support a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device control programs that are different from one another in a finely tuned and or individually targeted manner as the situation demands.

 6 In the operation support program according to the preferred aspect of the invention the detecting section may detect current time as the execution environment. With such a preferred aspect of the invention it is possible to configure support GUI on the arrival of predetermined date time day of the week or the like.

 7 In the operation support program according to the first aspect of the invention it is preferable that the graphical user interface configuring section should configure the support graphical user interface in a single window. Such a preferred aspect of the invention makes it easier to carry out various tasks that are carried out as a result of execution of a plurality of device control programs that are different from one another.

 8 In the operation support program according to the first aspect of the invention it is preferable that the graphical user interface configuring section should display a message by utilizing the support database or the plurality of support program components where the selection of the message triggers displaying of a web page for supporting the plurality of tasks that are different from one another. With such a preferred aspect of the invention it is difficult to offer Web service with great usability in a finely tuned manner as ever changing business scene demands.

 9 In order to offer the above advantages without any limitation thereto an operation support program according to a second aspect of the invention includes a support database for supporting a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device control programs that are different from one another. The operation support program according to the second aspect of the invention causes a computer to function as constituent sections including a detecting section that detects execution environment and a graphical user interface configuring section that changes configuration of a support graphical user interface for supporting the plurality of tasks that are different from one another by utilizing the support database in response to a change in the execution environment wherein the graphical user interface configuring section displays a message selection of which triggers displaying of a web page for supporting the plurality of tasks that are different from one another as the support graphical user interface. With such features of the second aspect of the invention since an operation support program includes a support database for supporting a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device control programs that are different from one another it is possible to configure a graphical user interface for supporting a plurality of tasks that are different from one another and are carried out as a result of execution of an arbitrary device control program i.e. support GUI as the situation demands. Moreover it is possible to offer Web service with great usability as ever changing business scene demands. Execution environment which is environment in which the operation support program is executed is unique software hardware environment for each arbitrary client computer.

 10 In the operation support program according to the second aspect of the invention it is preferable that the detecting section should detect model configuration of a plurality of devices controlled by the plurality of device control programs. With such a preferred aspect of the invention it is possible to configure support GUI depending on the model configuration of the plurality of devices.

 11 In the operation support program according to the second aspect of the invention it is preferable that the detecting section should detect type configuration of the plurality of device control programs as the execution environment. With such a preferred aspect of the invention it is possible to configure support GUI depending on the type configuration of the plurality of device control programs.

 12 In the operation support program according to the second aspect of the invention it is preferable that the detecting section should detect statuses or logs of a plurality of devices controlled by the plurality of device control programs. With such a preferred aspect of the invention it is possible to configure support GUI depending on the statuses or logs of the plurality of devices.

 13 In the operation support program according to the second aspect of the invention it is preferable that the detecting section should detect current time as the execution environment. With such a preferred aspect of the invention it is possible to configure support GUI on the arrival of predetermined date time day of the week or the like.

 14 In the operation support program according to the second aspect of the invention it is preferable that the GUI configuring section should configure the support GUI in a single window. Such a preferred aspect of the invention makes it easier to carry out various tasks that are carried out as a result of execution of a plurality of device control programs that are different from one another.

 15 In order to offer the above advantages without any limitation thereto an activation control program according to a third aspect of the invention causes a computer to function as constituent sections including a detecting section that detects execution environment a judging section that judges whether a predetermined specific situation has occurred or not on the basis of the execution environment and an activating section that activates a support graphical user interface for supporting a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device control programs that are different from one another with an interface configuration that is in accordance with the specific situation upon the occurrence of the specific situation wherein a message selection of which triggers displaying of a web page for supporting the plurality of tasks that are different from one another is displayed as the support graphical user interface. With such features of the third aspect of the invention upon the occurrence of a specific situation it is possible to activate a support graphical user interface support GUI for supporting a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device control programs that are different from one another with an interface configuration that is in accordance with the specific situation. Therefore it is possible to always support a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device control programs that are different from one another as the situation demands on a steady basis. Moreover it is possible to offer Web service with great usability as ever changing business scene demands. Execution environment which is environment in which the operation support program is activated is unique software hardware environment for each arbitrary client computer.

 16 In the activation control program according to the third aspect of the invention it is preferable that the detecting section should detect statuses or logs of a plurality of devices controlled by the plurality of device control programs. With such a preferred aspect of the invention it is possible to configure support GUI depending on the statuses or logs of the plurality of devices.

 17 In the activation control program according to the third aspect of the invention it is preferable that the detecting section should detect current time as the execution environment. With such a preferred aspect of the invention it is possible to configure support GUI on the arrival of predetermined date time day of the week or the like.

 18 In the activation control program according to the third aspect of the invention it is preferable that the support GUI should be configured in a single window. Such a preferred aspect of the invention makes it easier to carry out various tasks that are carried out as a result of execution of a plurality of device control programs that are different from one another.

The functions of constituent sections recited in appended claims can be embodied and or implemented by means of hardware resources whose functions are defined by a program. The functions of the claimed constituent sections are not limited to those embodied and or implemented by means of discrete hardware resources that are physically separated from and or physically independent of one another. The invention encompasses and thus can also be embodied as a storage medium in which an operation support program is stored an operation support apparatus and an operation support system that includes an operation support apparatus and a support data distribution server. Needless to say such an operation support program storage medium may be selected among various kinds of storage media including but not limited to a magnetic recording medium and a magneto optic recording medium. In addition to these existing and known storage media any new type of a storage medium that will be developed in future may be used as an operation support program storage medium according to an aspect of the invention.

With reference to the accompanying drawings exemplary embodiments of the present invention will now be explained in detail.

As illustrated in an operation support system includes a Web server and a client PC that are connected to the Internet . The operation support system offers support GUI that is available on the client PC . The support GUI is a graphical user interface that provides a support for various tasks e.g. operations or jobs that can be executed by means of devices and that are connected to the client PC . Examples of the tasks are printing facsimile reception scanning copying replacement of consumable supplies replenishment of consumable supplies and purchase of consumable supplies. is a diagram that schematically illustrates an example of a window that is displayed on a screen to make such support GUI available to a user. Various messages and are displayed in a support window . Various links are embedded in the messages. These messages and links can be arbitrarily configured depending on the models of the devices and connected to the client PC the serial numbers of the devices and OS Operating System in use language in use and locale in use. These messages and links can be changed as the status or log of the device changes. In addition they can be changed when predetermined time of day has come. For example businesses that commercialize the devices and on the market can register data for changing messages links and events triggering GUI configuration a server data group in the Web server depending on ever changing business scene which improves both usability for the benefit of users and profit performance for the benefit of the businesses.

With reference to an example of support GUI that is displayed on the display screen of the client PC by an operation support program is explained below. The operation support program provides support GUI in a single window support window . The support GUI provides a support for various tasks that are different from one another. These different tasks are executed through the operation of a plurality of device drivers and . Five sub windows and explained below are arranged in the support window .

Various messages and for supporting tasks that are executed with the use of device drivers are displayed in an adviser window depending on the models statuses logs and serial numbers of devices the types and versions of the device drivers and execution environment such as OS in use language in use locale in use time and date and the like. These messages to be displayed in the adviser window are configured depending on execution environment when the support window is launched. In addition they change as execution environment changes during a period of time in which the support window is displayed. Various links are embedded in the messages and . For example a link to a website in which consumable supplies used by the devices and are available a link to a website in which update data for the device drivers and of the devices and can be downloaded a link to an HTML Hyper Text Markup Language guidance file for instructing how to use the devices and a link to an application program or a program module i.e. program component for displaying the statuses of the devices and are embedded in the messages and . These messages can be displayed as text in the adviser window . Or they may be displayed in symbolic form e.g. an exclamation mark a question mark or the like or in graphic form. Examples of the content of the message displayed in the adviser window are as follows 

Examples of a task that will be activated when triggered upon the selection of a message displayed in the adviser window are as follows 

A content window is segmented in two sections which are a support section and a market section . The content window and the adviser window explained above have a point in common in that messages for supporting tasks and messages with embedded links to web pages for supporting tasks are displayed therein depending on execution environment. As a point of difference between the adviser window and the content window described herein messages displayed in the adviser window change during a period of time in which the support window is displayed whereas messages displayed in the content window are configured depending on execution environment at the time when the support window is launched only. That is the messages displayed in the content window do not change during a period of time in which the support window is displayed. Needless to say however the specification explained herein can be arbitrarily modified as a matter of design variation. That is the messages displayed in the content window may be changed during a period of time in which the support window is displayed.

The support section is a window section in which menus for using an online manual an online support service a download site and the like are displayed. Links to websites application programs and program modules are embedded in messages and which constitute the menus of the support section . The market section is a window section in which menus for purchasing supplier authorized consumable items supplier authorized option parts and the latest model of the devices and connected to the client PC are displayed. Links to web pages at which supplier authorized consumable items supplier authorized option parts and the latest model of the devices and connected to the client PC are on sale are embedded in a message which constitutes a menu of the market section

Banners of businesses dealing in the devices and connected to the client PC Web banners are displayed in a Web link window .

A selection window is a sub window that shows information for identifying one device driver among device drivers installed in the client PC that is related to messages that are currently displayed in the adviser window the content window and the Web link window . In addition the selection window is used as a switching window for choosing one device or one device driver for which messages are to be displayed in the adviser window the content window and the Web link window . Accordingly for example an icon that indicates one device among devices that are connected to the client PC and or text that indicates a device driver is displayed in the selection window . In addition a widget for device switchover or device driver switchover is shown in the selection window . Or icons or text strings each of which indicates one of a plurality of devices connected to the client PC or one of a plurality of device drivers may be displayed in the selection window as a list or a table. In addition a cursor may be displayed together with the icons or the text strings so that users can switch the mode of icon text display between a selected state and a non selected state.

A shortcut window is a sub window in which shortcuts for running various application programs that are related to devices connected to the client PC are arranged.

The operation support program and various computer programs such as the device drivers and which are examples of a plurality of device control programs according to an aspect of the invention as well as OS that is not shown in the drawing are installed in the client PC . An update data distribution program is installed in the Web server . The update data distribution program is used for updating an operation support program that is installed in an arbitrary client PC.

These programs are loaded from the HDDs and into the RAM and . Then the CPUs and execute the loaded programs. The Web server executes the update data distribution program thereby functioning as an operation support data server. The client PC executes the operation support program thereby functioning as an operation support apparatus.

The operation support program includes as main module components an updating unit a core service unit a foundation class an adviser database DB a content environment DB and a Web link DB .

The adviser DB and the content environment DB are support databases in which data for supporting a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device drivers that are different from one another is registered e.g. defined retained or stored in association with execution environment. Specifically for each execution environment of the operation support program messages that are necessary for configuring support GUI and links URL references pointers addresses and the like that are to be embedded in the messages are registered defined retained or stored in association with the execution environment in the adviser DB and the content environment DB .

The core service unit is a group of program modules a group of program components that causes the client PC to function as a GUI configuring section according to an aspect of the invention that configures support GUI with the use of the adviser DB the content environment DB the Web link DB and content DLL Dynamic Link Library . The core service unit includes program modules such as a Web link configuration unit a content configuration unit a plurality of content DLLs an adviser configuration unit and a UI unit . The adviser configuration unit acquires execution environment such as status logs current time and the like of a plurality of devices controlled by a plurality of device drivers through the foundation class . The adviser configuration unit generates resource data GUI resource for configuring support GUI depending on the execution environment in the adviser window . The content configuration unit is a GUI resource for configuring the content window . Specifically the content configuration unit is made of one or more XML files. For each of the support section and the market section messages as menu items are defined in association with the plurality of content DLLs in the content configuration unit as a GUI resource. The content DLLs constitute a program module that is started up upon the selection of a message displayed on the basis of the content configuration unit . In addition the content DLLs constitute a program module for supporting a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device drivers that are different from one another. The UI unit is a program module that displays the support window on a display screen on the basis of a GUI resource generated by the adviser configuration unit and or on the basis of the content configuration unit . In addition the UI unit starts up a task defined in the GUI resource.

The foundation class is a program module that causes the client PC to function as a detecting section according to an aspect of the invention. The foundation class includes common device API that is used for detecting execution environment such as time and date statuses or logs of a plurality of devices that is controlled by a plurality of device control programs through communication with OS and a plurality of device drivers.

The updating unit is a program module that causes the client PC to function as an update data acquiring section and an updating section according to an aspect of the invention. The updating unit acquires update data for updating the operation support program from the Web server via communication lines. In addition the updating unit updates the adviser DB the content environment DB the Web link DB and the content DLLs on the basis of the acquired update data.

The update data distribution program which causes the Web server to function as an operation support data server is mainly made up of an adviser updating DB a content updating DB a Web link updating DB a transmission data generation unit and program modules for managing the adviser updating DB the content updating DB the Web link updating DB . The adviser updating DB is a database in which data for updating the adviser DB in an arbitrary client PC is registered defined retained or stored in association with execution environment of an arbitrary operation support program. The content updating DB is a database in which data for updating the content environment DB in an arbitrary client PC is registered defined retained or stored in association with execution environment of an arbitrary operation support program. The Web link updating DB is a database in which data for updating the Web link DB in the client PC is registered defined retained or stored in association with execution environment of an arbitrary operation support program.

Support GUI that is configured in the client PC is unified graphical user interface for supporting a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device drivers that are installed in the client PC . This unified support GUI is provided in a single window operation support window . Each device driver whose corresponding support GUI is configured by the operation support program is registered defined retained or stored in the operation support program when the device driver is installed. It is the foundation class that registers the device driver in the operation support program . The foundation class includes the device API that is configured as common API for performing communication with a plurality of device drivers. Therefore it is easy to individually encode each of the various content dynamic link libraries DLLs corresponding to various device drivers.

The configuration of support GUI changes depending on execution environment such as the statuses or logs of respective devices time and date and the like. The change occurs from moment to moment that is just after the displaying of the support window and during the displaying of the support window . In addition as will be explained later the adviser DB the content environment DB the Web link DB and the content DLLs are automatically updated as the adviser updating DB the content updating DB the Web link updating DB are updated in the Web server . Therefore an operation support system that includes the Web server and the client PC makes it possible to support a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device drivers that are different from one another in a finely tuned and or individually targeted manner as the situation demands.

The operation support program activates support GUI in response to user instructions and in response to a change in execution environment. Execution environment is detected in order to identify various situations in which the configuring of support GUI in the client PC is beneficial for a user of the client PC or for the administrator of the Web server . Execution environment which is environment in which the operation support program is executed is unique software hardware environment for each arbitrary client computer. Specific situations in which support GUI is activated automatically includes situations that are unique to a particular device that is identified by means of the status logs of devices that are connected to the client PC spooler status and the like and situations that are not unique to a particular device such as time and date or elapsed time and days the constituents of a device group being connected and the like. In order to activate support GUI in response to a change in execution environment the operation support program is configured as a resident program that is started up upon the launching of OS.

As illustrated in the core service unit makes an inquiry about execution environment at predetermined time intervals S . The core service unit acquires execution environment as a response to the query S . Execution environment includes the statuses of devices that can be acquired through device drivers status held by firmware the logs of the devices held by the device drivers and statuses and logs held by OS. That is devices that are connected to the client PC device drivers that are installed in the client PC and the OS of the client PC hold data that represents execution environment. For example the following information is registered defined retained or stored in the core service unit as execution environment about which an inquiry is to be made to OS and device drivers. A query is issued for the registered execution environment.

As a reply to the inquiry for execution environment the core service unit acquires the execution environment through the foundation class . That is the core service unit uses the API of the foundation class to request data that represents execution environment accessible to the device drivers and and the OS S . Upon receiving a data request from the core service unit the foundation class makes a request for data that represents execution environment to the device drivers and and the OS S . The foundation class performs communication with the device drivers and and the OS to acquire data that represents execution environment and then forwards the data to the core service unit S . The core service unit acquires the data representing execution environment through the API of the foundation class S .

Since the foundation class includes the API that is configured as common API for performing communication with a plurality of device drivers to detect execution environment it is not necessary to individually develop the core service unit on the basis of differences in firmware configuration and device driver configuration. Therefore even if the core service unit is updated at each time when a new device is developed or when a device program is updated it is possible to make updating cost substantially lower in comparison with related art. Specifically the development environment of the plurality of content DLLs the adviser configuration unit and the Web link configuration unit which are modules i.e. components of the core service unit can be shared as common environment according to the API of the foundation class . Therefore the development of them can be made technically easier. In addition development cost can be reduced.

The request addressee from whom the data that represents execution environment can be acquired OS device driver or firmware depends on the design of OS device drivers and firmware. The foundation class may detect from a device driver data that has been acquired by OS from the device driver and managed by the OS. The foundation class may detect from firmware data that has been acquired by a device driver from the firmware and managed by the device driver.

Next the core service unit judges whether any predetermined specific situation has occurred or not on the basis of execution environment detected from OS and device drivers S . The specific situations are pre defined in a range in which they can be identified on the basis of execution environment that can be acquired from OS and device drivers. For example the following situations are registered defined retained or stored as the specific situations in the core service unit .

If it is judged in S that a predetermined specific situation has occurred the core service unit activates support GUI S . If it is judged in S that a predetermined specific situation has not occurred the process returns to S.

The operation support program configures support GUI depending on execution environment when support GUI is activated. That is on the basis of the execution environment acquired in S the core service unit configures support GUI in accordance with the execution environment S . Specifically the adviser configuration unit configures the adviser window in accordance with the execution environment. The content configuration unit configures the content window in accordance with the execution environment. The details of configuring operation are as follows.

As illustrated in the adviser configuration unit extracts messages that correspond to execution environment out of the adviser DB while using the execution environment as key S . Then the adviser configuration unit sorts the extracted messages in the order of priority S . Next the adviser configuration unit arranges among the extracted messages some messages that are high in the order of priority in the adviser window S . In order to configure the adviser window as explained above the following data is defined in the adviser DB for each message.

For example message content is data that defines text graphic or symbol that is displayed as a message. The content may be an identifier of text graphic or symbol or a reference thereto. Or the content may be text itself that is displayed as a message. Execution environment that corresponds to a message is defined as one or more variable values that represent the execution environment or as a conditional expression that includes the variable values. Accordingly one message is extracted out of the adviser DB in a case where a variable that represents the detected execution environment perfectly matches or coincides with a variable that represents execution environment corresponding to this one message. The following condition is taken for instance a variable S representing execution environment has been acquired as the date of today a variable S representing execution environment has been acquired as the model name of a device a variable S representing execution environment has been acquired as the type of OS a variable S representing execution environment has been acquired as language in use and a variable S representing execution environment has been acquired as the remaining amount of ink in an ink cartridge. In this example each message whose expiration date is not before S device model name is S OS type is S language in use that is registered in the OS is S and the remaining amount of ink in an ink cartridge is not greater than S could be extracted.

The arrangement of one or more extracted messages is determined on the basis of the order of priority defined for each of the extracted messages. Specifically it is determined as follows. The number of messages that will be displayed in the adviser window has been determined in advance. Messages to be displayed therein are selected in a sequential manner in accordance with the order of priority which means that the message having the highest order priority will be selected first. Then selected messages to be displayed the number of which has been determined in advance are arranged sequentially in the adviser window from the top to the bottom in accordance with the defined order of priority. Specifically for example the adviser configuration unit controls the UI unit on the basis of records corresponding to the messages selected to be displayed. The UI unit generates a group of commands for configuring the adviser window . Then OS displays the adviser window on the basis of the generated group of commands. In the command group generated as GUI resource by the adviser configuration unit and the UI unit text graphic or symbol that is displayed as a message and a task that will be activated upon the selection of the message are defined on the basis of the adviser DB . Examples of a task that will be activated upon the selection of a message include the displaying of a document whose URL is defined as a hyperlink to the selected message or the launching of a program that is defined with a reference or a pointer in link with the selected message. That is a group of commands for displaying messages with embedded links is generated. The adviser configuration unit or the UI unit may generate an HTML document as GUI resource. The adviser configuration unit configures the adviser window as explained above. The codes of the adviser configuration unit define the above window configuration processing.

When processing for displaying messages corresponding to execution environment in the adviser window is performed the adviser configuration unit may use an additional factor element other than the execution environment as display conditions to select and arrange messages that will be displayed in the adviser window . For example as explained above the order of priority may be pre defined for each message in a case where the number of messages corresponding to execution environment is larger than a predetermined number messages that will be displayed in the adviser window may be selected and arranged in accordance with the order of priority. Or for example a period of validity that starts from a point in time at which a message is displayed for the first time may be defined for the message each message whose validity period has expired may be excluded from messages that will be displayed in the adviser window . In this example messages that do not meet the validity condition can be excluded by recording a point in time at which each message is displayed for the first time as the start of the validity period in association with the message. Or as another example the limit may be set for the number of times of display for each message. Each message whose number of times of display has exceeded the set limit may be excluded from messages that will be displayed in the adviser window . In this example messages that do not meet the number of times of display condition can be excluded as follows. A counter is used to control the limited number of times of display for each message. For example each time a message is displayed the counter decrements the limited number of times of display that is set for the message by one. Each message whose remaining number of times of display is less than one is excluded from messages that will be displayed in the adviser window . Or as another example display non display type may be pre defined for each message. Each non display message is excluded from messages that will be displayed in the adviser window . With such type pre definition it is easy to perform a display non display switchover at the time of updating the operation support program .

After the activation of support GUI the adviser configuration unit acquires execution environment at specified time intervals through the foundation class S S S S . The adviser configuration unit reconfigures the adviser window in response to a change in execution environment S S . That is when a new specific situation arises the adviser configuration unit reconfigures the adviser window in accordance with the new specific situation. The execution environment that is acquired by the adviser configuration unit through the foundation class for reconfiguration may be the same as the execution environment acquired at the time of the activation of support GUI. Or they may be different from each other. In addition the specific situation that triggers the reconfiguration of the adviser window may be the same as the specific situation at the time of the activation of support GUI. Or they may be different from each other.

As illustrated in when a user has selected a message displayed in the content window by clicking it the UI unit refers to the content configuration unit and the content environment DB to identify content DLLs that correspond to the selected message S . The UI unit sorts the identified content DLLs in accordance with the order of priority defined in the content environment DB S . Then the UI unit activates the high order content DLL while referring to the content configuration unit S . The activated content DLL supports a task carried out as a result of execution of a particular device control program through processing on the basis of the code of the content DLL . Since the content DLL itself is a program module the activated content DLL can embody any kind of processing by functioning in cooperation with other program modules such as the content configuration unit the foundation class and the adviser configuration unit . For example the content DLL may be used for reconfiguring the content window in response to a change in execution environment in the same manner as in the reconfiguration of the adviser window by the adviser configuration unit . Or it may perform communication with the adviser configuration unit for controlling the adviser configuration unit . Or a website on which users can purchase consumable supplies may be displayed on a different window. In order to configure the content window as explained above for example the following information is registered e.g. defined retained or stored in the records of the content environment DB and in the content configuration unit in association with one another.

The Web link window the selection window and the shortcut window may be configured depending on predetermined order of priority execution environment or the configuration of other sub windows. For example a URL parameter that is sent to a Web server with which a client PC performs communication upon the selection of a banner displayed in the Web link window may be dynamically generated depending on execution environment that is acquired by the Web link configuration unit from OS and device drivers through the foundation class . Such dynamic generation of a URL parameter depending on execution environment that is acquired from OS and device drivers makes it possible to offer finely tuned and or individually targeted Web server linked service according to the situation status of an arbitrary client PC while simplifying the content configuration unit that is subjected to coding for the purpose of configuring the Web link window . The icon or text that indicates a device corresponding to messages displayed as high order messages in the adviser window is displayed in the selection window . Conversely messages corresponding to a device selected in the selection window only may be displayed in the adviser window . Or the order of priority for messages corresponding to a device selected in the selection window may be set higher than the order of priority for messages corresponding to other devices.

As explained earlier support GUI that is configured as a result of the execution of the operation support program is configured dynamically depending on execution environment. If processing for automatically updating an operation support program which is explained below is used it is possible to carry out unified management on the automatic updating of a support database or a plurality of support program components e.g. support program modules for supporting a plurality of tasks that are different from one another and are carried out as a result of execution of a plurality of device drivers that are different from one another. Therefore it is possible to actualize the flexible configuration of support GUI in response to a change in business scene that occurs after the release of the operation support program .

Support GUI can be changed after the release of the operation support program by updating individual program modules databases and data files that constitute the operation support program. If update processing as well as program structure for updating is designed as explained below it is possible to reduce the burden of program development for updating and in addition to reduce processing load and data communication traffic for updating which makes it easier to perform frequent updating with enhanced user friendliness.

In the operation support program messages and tasks are registered defined retained or stored in association with execution environment so that the configuration of the adviser window can be optimized for each given execution environment without updating program modules. Specifically it is possible to change the configuration of the adviser window in response to a change in business scene just by updating the adviser DB .

As explained earlier the foundation class includes device API that is configured as common API for performing communication with a plurality of device drivers. Therefore even in a case where program modules are updated in order to optimize the configuration of the content window for each given execution environment it is possible to develop program modules in a common development environment irrespective of the models of devices that are connected to a client PC and versions of device drivers. Specifically when the content DLL is developed for each device model each device driver name and each device driver version it is possible to develop various content DLLs at low cost in a common development environment.

In order for the Web server to carry out unified management on the updating of an arbitrary operation support program that is installed in arbitrary one of client PCs under various environments it is preferable that the Web server should distribute to each client PC update data corresponding to execution environments and versions of operation support programs that differ from one client PC to another. By this means it is possible to reduce traffic in data communications and reduce the data size of the operation support program that is memorized in each client PC. Therefore it is preferable to update the operation support program according to the procedure of periodic update processing illustrated in .

In the periodic update processing as a first step the updating unit judges whether a predetermined time period update interval time period e.g. 24 hours has elapsed or not since the last update S . The updating unit which is a module of the operation support program may perform the judgment processing of S during the execution of the operation support program . Or a resident program may perform the judgment processing irrespective of the execution state of the operation support program .

If the predetermined update interval time period has already elapsed the updating unit transmits update environment information and a client update record to the Web server as update control information S . As will be explained later the client update record is the last server update record received from the Web server no later than the predetermined hours or the like set as the update interval time period before. In addition the client update record is information that indicates the last update time of the operation support program in a client PC. That is the client PC memorizes the last server update record received from the Web server as the client update record until the client PC transmits this server update record to the Web server . The update environment information that is transmitted to the Web server is information that is required for acquiring update data in accordance with the execution environment of the operation support program . In addition the update environment information is information that corresponds to the execution environment of the operation support program . For example the update environment information contains the following items.

Upon receiving the update environment information and the client update record from a client PC the Web server generates a server update record that indicates the last update time of an arbitrary record corresponding to the execution environment of the operation support program in the client PC identified on the basis of the update environment information and then compares time indicated by the client update record received from the client PC with time indicated by the server update record to judge whether the former agrees with the latter or not S . Each time the Web server updates a record for updating the operation support program of an arbitrary client PC unique identifiers such as update date version and the like are updated for each record. Therefore in a case where any record corresponding to the operation support program that is unique to the client PC has been updated at the Web server during a time period from the transmission of the last i.e. preceding server update record to the client PC to the reception of the current client update record the time indicated by the server update record and the time indicated by the client update record disagree. Note that the server update record itself represents time. The client update record is a previous server update record. Therefore a judgment as to whether the time indicated by the server update record and the time indicated by the client update record agree or disagree is equivalent to a judgment as to whether the server update record and the client update record agree or disagree.

If the server update record does not agree with the client update record the Web server transmits a server update code that indicates the last update state of a server data group that corresponds to the operation support program that is unique to the client PC together with a server update record to the client PC S . The server data group is a data group that corresponds to the operation support program that is unique to the client PC among all data registered in the adviser updating DB the content updating DB the Web link updating DB and the like. The last update state of a server data group is identified on the basis of individual data that constitute the server data group program update date version and the like.

Upon receiving the server update code the updating unit of the client PC compares the server update code with a client update code to identify program modules and or databases that need to be updated S . The client update code is made up of unique identifiers that are managed by the updating unit for each of data and program modules that constitute the operation support program . Examples of the identifiers are update date and version. Though such a client update code may be generated at each time when a server update code is received it is preferable to perform control while updating it at each time when data and or program modules are updated in the client PC . By this means it is possible to reduce processing load for the generation of a client update code.

Next the client PC requests the Web server to transmit data that are necessary for bringing program modules and data that are not in the latest condition up to date as update data S . The program modules and data that are not in the latest condition are program modules and data that need to be updated that is are not in synchronization with the server data group. When the client PC makes a request for the update data to the Web server the client PC transmits information for identifying the program modules and the data that need to be updated e.g. identifiers of the program data .

Upon receiving the request for the update data the Web server creates data that are required by the client PC for updating the program modules and the data that need to be updated with reference to the adviser updating DB the content updating DB the Web link updating DB as update data then the Web server transmits the update data to the client PC S .

After the transmission of the update data the Web server transmits a completion notice to the client PC S . The update data may be differential data for adding or deleting a difference between program data before updating and program data after updating. Or the update data may be complete data for rewriting the entirety of program or data that needs to be updated.

If the time indicated by the server update record agrees with the time indicated by the client update record the Web server transmits a completion notice to the client PC without transmitting any of the server update record the server update code and the update data S .

Upon receiving the completion notice the updating unit of the client PC judges whether it is necessary to carry out updating or not S . That is the client PC judges that it is necessary to carry out updating if both the update data and the completion notice have been received. The client PC judges that it is not necessary to carry out updating if the completion notice has been received but neither of the server update record and the update data has been received.

As a result at the client PC that has now received the update data and the completion notice the adviser DB the content environment DB the Web link DB and the content DLLs are updated on the basis of the updated data received by the updating unit S . Specifically for example the records of the adviser DB the content environment DB and the Web link DB are changed or deleted. Or records are added to the stored records of the adviser DB the content environment DB and the Web link DB . Or the content DLLs installed in the client PC are changed or deleted. Or additional content DLLs are installed in the client PC .

On the other hand if the client PC has received the completion notice without receiving the server update record and the update data the client PC does not make a request for the update data to the Web server . Nor does the client PC update the adviser DB the content environment DB the Web link DB and the content DLLs . Accordingly the periodic update processing is terminated without requesting the update data or updating the DBs and and the DLLs . In this case since data that is exchanged between the Web server and the client PC is practically limited to the update environment information the client update record and the completion notice the amount of data transmitted via the network can be minimized.

The technical scope of the invention is not limited to the foregoing exemplary embodiment. Needless to say the invention can be modified in various ways within a range not departing from the gist of the invention. For example the configuration of modules of the operation support program that is described in the foregoing embodiment is a mere example that is given for the purpose of facilitating the understanding of the concept of the invention.

