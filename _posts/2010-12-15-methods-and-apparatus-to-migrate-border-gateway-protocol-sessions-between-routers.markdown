---

title: Methods and apparatus to migrate border gateway protocol sessions between routers
abstract: Methods and apparatus to migrate border gateway protocol sessions between routers are disclosed. An example method to migrate a border gateway protocol session from a first router to a second router disclosed herein comprises exporting a connection state to migrate a transport control protocol connection supporting the border gateway protocol session with a session endpoint from the first router to the second router, and after the transport control protocol connection has been migrated to the second router, announcing, from the first router to the second router, routes contained in an exported routing information base associated with the session endpoint, the second router to process the routes to migrate handling of the border gateway protocol session with the session endpoint to the second router.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08806032&OS=08806032&RS=08806032
owner: AT&T Intellectual Property I, L.P.
number: 08806032
owner_city: Atlanta
owner_country: US
publication_date: 20101215
---
This disclosure relates generally to network routing and more particularly to methods and apparatus to migrate border gateway protocol sessions between routers.

To maintain and increase customer satisfaction network operators strive to introduce new services and improve the reliability of their networks to avoid service disruptions. As such operators often make changes to the network to upgrade faulty equipment deploy new services install new routers to handle increased traffic and or different traffic patterns etc. Unfortunately performing these types of changes with existing routers and routing protocols can result in the very service disruptions network operators strive to avoid. Furthermore service level agreements with customers often prohibit events that result in a service disruption without receiving prior approval and scheduling a maintenance window. However in today s networks even the relatively basic task of migrating or re homing a border gateway protocol BGP session from a migrate from router currently handling the session to a migrate to router that is to commence handling the session can result in long downtimes of up to several minutes.

Methods and apparatus to migrate a border gateway protocol BGP session for example from a migrate from router currently handling the session to a migrate to router that is to commence handling the session are disclosed herein. An example method described herein involves the migrate from router exporting a connection state to migrate a transport control protocol TCP connection supporting the BGP session with a session endpoint from the migrate from router to the migrate to router. An Internet protocol IP link supporting the TCP connection is also migrated from the migrate from router to the migrate to router when or after the TCP connection is migrated. After the TCP connection has been migrated to the migrate to router the example method involves the migrate from router announcing routes contained in an exported routing information base RIB associated with the session endpoint to the migrate to router. The migrate to router then processes these routes to migrate handling of the BGP session with the session endpoint from the migrate from router to the migrate to router.

Another example BGP session migration method described herein involves a migrate to router importing a connection state to migrate a TCP connection supporting a BGP session with a session endpoint from a migrate from router currently handling the session to the migrate to router. An IP link supporting the TCP connection is also migrated from the migrate from router to the migrate to router when or after the TCP connection is migrated. After the TCP connection has been migrated to the migrate to router the example method involves the migrate to router receiving from the migrate from router routes previously announced by the session endpoint. The migrate from router then processes these routes received from the migrate from router to migrate handling of the BGP session with the session endpoint from the migrate from router to the migrate to router.

Conceptually the examples described herein can be viewed as performing router grafting in which functional parts of one router e.g. a migrate from router are removed and merged e.g. grafted to another router e.g. a migrate to router . BGP session migration via router grafting as disclosed herein allows an operator to re home a customer with little to no disruption e.g. seamlessly as compared to downtimes today measured in minutes. Additionally grafting a BGP session in accordance with the examples described herein can help in balancing load between routers or router processor blades conducting planned maintenance performing traffic engineering etc. Further potential benefits of router grafting as performed by the example methods and apparatus disclosed herein are described in greater detail below.

Generally migrating or grafting a BGP session as described herein involves i migrating the underlying TCP connection ii exchanging routing state iii moving routing protocol configuration from one router to another and iv migrating the underlying IP link although not necessarily in this order. Furthermore these actions are performed transparently e.g. such that the remote BGP session endpoint is not modified and is unaware migration is happening and without disrupting packet forwarding and routing e.g. data packets are not dropped and routing adjacencies remain up . In the examples described herein transparency can be achieved for example by bootstrapping a routing session at the migrate to router providing the BGP session s new homing location with the migrate from router emulating the remote endpoint. The migrate to router then takes over the role of the migrate from router sending appropriate routing updates to notify the remote endpoint of routing changes.

Turning to the figures a block diagram of an example network in which a BGP session is to be migrated between routers using router grafting is illustrated in . In the illustrated example two example neighbor routers and exchange BGP update messages over an example BGP session . The BGP session runs on top of an example TCP connection that directs packets over an example IP link communicatively coupling the routers and . As illustrated in the example of migrating or grafting the BGP session from the router to another example router represented by a directed line in in accordance with the example techniques described herein involves moving the IP link the TCP connection and BGP session from the router to the router .

In some examples the IP link can be implemented by a direct wired or wireless connection between two router routers and . In other examples the IP link can be implemented by one or more hops in an underlying layer two transport network such as the example transport network illustrated in . For example routers at an exchange point between autonomous systems often connect via a shared switch and an Internet service provider ISP typically connects to its customers over an access network. In some examples the transport network is geographically contained such as in the case of a packet access network. In other examples the transport network is more geographically widespread such as in the case of a programmable optical transport network having a national footprint. Also layer two networks such as the network are typically programmable allowing dynamic set up and tear down of layer three links. An example of this programmability is illustrated in in which a physical link A B between routers and is through the programmable transport network and can be changed e.g. illustrated in by the directed line to connect routers and via a physical link A C. Such programmability enables seamless migration of the IP link from one location e.g. the router to another location e.g. the router served by the layer two network and as such enables re homing of a customer s access link to terminate on a different router e.g. the router instead of the router in the network .

In the illustrated example of the routers and exchange BGP messages over the underlying TCP connection . Unlike a TCP connection between for example a web client and a web server the TCP connection is to stay up e.g. enabled for relatively long periods of time because the two routers and repeatedly exchange BGP messages related to the BGP session . Furthermore each router and sends keep alive messages to enable the other router to detect lapses in connectivity. In some examples after missing three or some other number of such keep alive messages a router such as the router will declare the other router such as the router as unavailable and discard the BGP routes learned from that neighbor router. As such migration or grafting the BGP session in accordance with the example techniques described herein involves timely migration of the underlying TCP connection.

In the illustrated example of the neighbor routers and form the BGP session by 1 establishing the TCP session 2 sending messages negotiating the properties of the BGP session and then 3 exchanging a BGP best route for each destination prefix announced by each of the routers and . This procedure is controlled by a BGP state machine executing on the routers and that specifies the BGP messages to be exchanged and how these exchanged BGP messages are to be handled. After the BGP session is established the two routers and send incremental BGP update messages to announce new routes and withdraw routes that are no longer available. Each router stores the BGP routes learned from its neighbor in a first RIB referred to as an Adj RIB in table. Each router also stores the BGP routes announced to the neighbor in a second table referred to as an Adj RIB out table. The BGP session also has a configuration state that controls how each router filters and modifies BGP routes that it imports from or exports to the remote neighbor. As such migrating or grafting the BGP session in accordance with the example techniques described herein involves transferring BGP routing state in the form of RIB information also referred to as RIB state as well as moving the associated BGP configuration state from the migrate from router e.g. the router to the migrate to router e.g. the router . BGP session migration also involves updating the routes provided to other routers in the network as described in greater detail below.

The example BGP session migration or grafting techniques disclosed herein can be used with a variety of different router implementations. For example the routers and can be implemented using any type of network router device and or can be included as one or more portions of another network device such as a network switch a bridge etc. Also the routers and of can be geographically distributed routers different router processor blades included in a router chassis etc. or any combination thereof.

Generally a router implementing one or more of the routers and includes a processor for running the BGP routing process multiple interfaces for terminating links and a switching fabric for directing packets from one interface to another. The BGP routing process maintains sessions with multiple neighbor routers also referred to as neighbors and runs a decision process over the Adj RIB in tables to select a single best route for each destination prefix. The routing process stores the best route in a Loc RIB table and further applies export policies to construct the Adj RIB out tables and send the corresponding update messages to each neighbor.

An example router grafting processor to implement BGP session migration or grafting in the example routers A B and or described above is illustrated in . The router grafting processor of the illustrated example performs both migrate from router processing and migrate to router processing as described in greater detail below. As such the router grafting processor can be included in implemented by communicatively coupled with etc. one or more of the routers A B and or any other router in which BGP session migration is to be performed in accordance with the examples described herein

The router grafting processor performs a coordinated sequence of operations to migrate BGP sessions between routers. An example of such a sequence of operations is illustrated in which are described in greater detail below. To control and coordinate the sequence of operations to migrate a BGP session the router grafting processor includes an example grafting controller . In some examples the grafting controller is implemented by a graft daemon that initiates BGP session migration processing and interacts with the other elements of the router grafting processor . In some examples the graft daemon can be reached by an IP address. Using this IP address the graft daemon on the migrate from router initiates a TCP connection with the counterpart graft daemon on the migrate to router over which BGP session migration can occur.

The router grafting processor of the illustrated example also includes an example physical connection migrator to migrate the TCP connection and IP links supporting a BGP session undergoing migration. In some examples the physical connection migrator is implemented at least in part by a SockMI application programming interface API adapted to export and import TCP connection state information such as IP address es packet sequence number s packet acknowledgment number s etc. as described in greater detail below. The physical connection migrator is communicatively coupled with an example network stack storage to store the exported and or imported TCP connection state information. The network stack storage can be implemented by any type of memory or storage technology. For example the network stack storage can be implemented by the example mass storage device and or the example volatile memory included in the example processing system of which is described in greater detail below.

The router grafting processor of the illustrated example further includes an example routing state migrator to migrate routing state information for the BGP session undergoing migration. In some examples the routing state migrator is implemented at least in part by one or more Quagga routing software modules adapted to export and import BGP routing state information e.g. such as routing information stored in one or more RIBs and re execute BGP decision procedures based on the imported BGP routing state information as described in greater detail below. The routing state migrator is communicatively coupled with an example routing state storage to store the exported and or imported routing state information. The routing state storage can be implemented by any type of memory or storage technology. For example the routing state storage can be implemented by the example mass storage device and or the example volatile memory included in the example processing system of which is described in greater detail below.

As mentioned above illustrate an example sequence of operations performed by the router grafting processor of to migrate a BGP session with an example endpoint from an example migrate from router A to an example migrate to router B e.g. in the same AS . The routers A and B include respective instances A and B of the router grafting processor of . The routers A and B also include respective instances A and B of the network stack storage of and respective instances A and B of the routing state storage of . Otherwise the routers A B can be from the same or different vendors and run similar or different routing software. To reduce the complexity of the drawings the router grafting processors A B are omitted for clarity from .

Turning to when the illustrated BGP session migration process starts the migrate from router A is responsible for handling a BGP session with the remote endpoint router . This BGP session with router is to be migrated to the migrate to router B. The migrate from router A begins exporting routing information A represented as a directed line in . Additionally the migrate to router is initialized with its own session level data structures and a copy of the policy configuration A represented as a directed line in but without actually establishing the session.

In the routing information A has been exported at the migrate from router A and a copy of the configuration state A is stored as configuration state B at the migrate to router B. Next the TCP connection state A is migrated represented as a directed line in followed by the underlying link represented as a directed line in . Additionally the BGP session peer is deleted at the migrate from router represented as a directed line in .

In a copy of the TCP connection state A is stored as TCP connection state B at the migrate to router B. Next the migrate to router B imports the routing state A represented as a directed line in . In the routing state A is imported to become routing state B at the migrate to router B as described in greater detail below. The migrate to router B also announces to other routers including the endpoint route updates for routes that have changed due to the imported routing state B. The result is the migrate to router handling the BGP session with the remote endpoint as shown in .

While an example manner of implementing the router grafting processor has been illustrated in one or more of the elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example grafting controller the example physical connection migrator the example network stack storage the example routing state migrator the example routing state storage and or more generally the example router grafting processor of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example grafting controller the example physical connection migrator the example network stack storage the example routing state migrator the example routing state storage and or more generally the example router grafting processor could be implemented by one or more circuit s programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s etc. When any of the appended apparatus claims are read to cover a purely software and or firmware implementation at least one of the example router grafting processor the example grafting controller the example physical connection migrator the example network stack storage the example routing state migrator and or the example routing state storage are hereby expressly defined to include a tangible computer readable medium such as a memory digital versatile disk DVD compact disk CD etc. storing such software and or firmware. Further still the example router grafting processor of may include one or more elements processes and or devices in addition to or instead of those illustrated in and or may include more than one of any or all of the illustrated elements processes and devices.

Flowcharts representative of example machine readable instructions that may be executed to implement one or more of the routers A B and or the example router grafting processor the example grafting controller the example physical connection migrator the example network stack storage the example routing state migrator and or the example routing state storage are shown in FIGS. and . In these examples the machine readable instructions represented by each flowchart may comprise one or more programs for execution by a processor such as the processor shown in the example processing system discussed below in connection with . Alternatively the entire program or programs and or portions thereof implementing one or more of the processes represented by the flowcharts of FIGS. and could be executed by a device other than the processor e.g. such as a controller and or any other suitable device and or embodied in firmware or dedicated hardware e.g. implemented by an ASIC a PLD an FPLD discrete logic etc. . Also one or more of the machine readable instructions represented by the flowchart of FIGS. and may be implemented manually. Further although the example machine readable instructions are described with reference to the flowcharts illustrated in FIGS. and many other techniques for implementing the example methods and apparatus described herein may alternatively be used. For example with reference to the flowcharts illustrated in FIGS. and the order of execution of the blocks may be changed and or some of the blocks described may be changed eliminated combined and or subdivided into multiple blocks.

As mentioned above the example processes of FIGS. and may be implemented using coded instructions e.g. computer readable instructions stored on a tangible computer readable medium such as a hard disk drive a flash memory a read only memory ROM a CD a DVD a cache a random access memory RAM and or any other storage media in which information is stored for any duration e.g. for extended time periods permanently brief instances for temporarily buffering and or for caching of the information . As used herein the term tangible computer readable medium is expressly defined to include any type of computer readable storage and to exclude propagating signals. Additionally or alternatively the example processes of FIGS. and may be implemented using coded instructions e.g. computer readable instructions stored on a non transitory computer readable medium such as a flash memory a ROM a CD a DVD a cache a random access memory RAM and or any other storage media in which information is stored for any duration e.g. for extended time periods permanently brief instances for temporarily buffering and or for caching of the information . As used herein the term non transitory computer readable medium is expressly defined to include any type of computer readable medium and to exclude propagating signals. Also as used herein the terms computer readable and machine readable are considered equivalent unless indicated otherwise.

Example machine readable instructions that may be executed to implement the BGP session migration using the router grafting processor of are represented by the flowchart shown in . For convenience and without loss of generality execution of the machine readable instructions is described in the context of the example of . The machine readable instructions begin execution at block at which the grafting controller A associated with the migrate from router A provides the BGP session configuration state A of the BGP session being migrated to the grafting controller B of the migrate to router B. Each BGP session endpoint such as the endpoints and A has configuration state information used to establish the BGP session with the corresponding remote endpoint with a given IP address and AS number and to apply policies for filtering and modifying route announcements. In some examples a network operator and or an automated management system configure a BGP session endpoint by applying configuration commands at the router s command line interface or by uploading a new configuration file. The router such as the routers and A stores the configuration information in various internal data structures.

Rather than exporting these internal data structures in some examples the grafting controller A is implemented with a realization that the BGP session configuration state is captured in a well defined format in a configuration file. As such the grafting controller A dumps the configuration file for the migrate from router A extracts the commands relevant to the BGP session being migrated and provides these commands to the migrate to router B. The grafting controller B at the migrate to router B in turn applies these commands to initialize the BGP session at the migrate to router B after any appropriate translation to account for vendor dependent differences in the command syntax. In this way the migrate to router B is able to create its own internal data structures for the BGP session configuration information.

However the migrate to router B is not yet ready to assume responsibility for the BGP session being migrated. To indicate that migration is not yet complete the BGP state machine is extended to include an inactive state during which the migrate to router B can create data structures and import configuration and routing state information for the BGP session being migrated without attempting to communicate with the remote endpoint . The grafting controller B later causes the migrate to router B to transition from the BGP inactive state to a BGP established state at an appropriate phase in the migration process as described in greater detail below.

Returning to at block the routing state migrator A associated with the migrate from router A exports the BGP routing state information A for the BGP session being migrated. The migrate from router A maintains a variety of routing state information for BGP session endpoints such as for the BGP session with the session endpoint . For the purposes of BGP session migration in accordance with the example techniques disclosed herein it is sufficient to consider the RIBs stored at the migrate from router A whereas the other BGP routing state information such as the state of the BGP state machine the BGP timers the BGP statistics etc. for the session undergoing migration may be re initialized at the migrate to router B as described below.

In some examples the routing state information to be exported for a BGP session undergoing migration is stored in the RIB tables Adj RIB in and Adj RIB out. In some examples the routing state migrator A dumps these RIBs at the migrate from router A to prepare for providing this information for importing at the migrate to router B. Although the RIBs may be represented differently on different router platforms the information the RIBs store is standardized as part of the BGP protocol. In many router implementations the RIB data structure is maintained apart from the rest of the routing software and many routers support commands for dumping the current RIBs. Also although the RIB dump formats can vary by vendor de facto standards such as the multi threaded routing toolkit MRT format can be employed to simplify RIB exporting and importing.

Each BGP session endpoint also stores information about the BGP state machine. In some examples the routing state migrator A foregoes migrating a BGP state machine s state because for the purposes of BGP session migration the BGP session is either established or it is not established. If the BGP session is in one of the not established states the grafting controllers A B can simply close the session at the migrate from router A and start the migrate to router A in the idle state. This does not trigger any transient disruption because the BGP session is not active. If the session at the migrate from router A is established the grafting controller B starts the migrated BGP session at the migrate to router B in the inactive state and the BGP state machine at the migrate to router B proceeds from this state.

Routers also maintain various timers for BGP sessions many of which are vendor dependent. For example some routers use an MRAI minimum route advertisement interval timer to pace the transmission of BGP update messages. This is a local operation at one endpoint of the BGP session which does not require any agreement with the remote endpoint. Other common timers include a keep alive interval timer that drives the periodic sending of heartbeat messages and a hold timer for detecting missing keep alive messages from the remote endpoint. However missing a single keep alive message or sending the message slightly early or late will not erroneously disrupt the BGP session being migrated because routers typically wait for multiple e.g. three missed keep alive messages before tearing down the session. As such the routing state migrator A does not migrate BGP timer values and instead the migrate to router B initialize its BGP timer s to any appropriate e.g. default value s .

Routers can also maintain statistics about each BGP session and or one or more individual routes associated with a BGP session. These statistics which can be useful for network monitoring are unnecessary for correct operation of the router. Additionally these statistics are often vendor dependent and not well modularized in router software implementations. As such in some examples the routing state migrator A does not migrate these statistics from the migrate from router A. In such examples the migrate to router B can initialize its own statistics for the BGP session undergoing migration as if the migrate to router B was establishing a new BGP session.

Returning to at block the physical connection migrators A and B migrate from the migrate from router A to the migrate to router B the TCP connection and IP link supporting the BGP session undergoing migration. To avoid relying on support from the remote end point the migrate to router B uses the same IP addresses as well as sequence and acknowledgment numbers that the migrate from router A was using for the BGP session being migrated. In BGP IP addresses are used to uniquely identify the BGP session endpoints and not the router as a whole. Further it is assumed that the link between the remote endpoint and the migrate from router A or the migrate to router B is a single hop IP network where the IP address is not used for reachability but only for identification. As such the session endpoint can retain its address and sequence and acknowledgment numbers when the BGP session is migrated or grafted from the migrate from router A to the migrate to router B. In other words the single IP address identifying the migrating BGP session can be disassociated from the migrate from router A and associated with the migrate to router B. To accomplish this the physical connection migrators A and B migrate the local state associated with the TCP connection from one router to another.

During TCP connection migration the network can endure a brief period of time when neither router A B is responsible for the TCP connection. TCP has its own retransmission mechanism that ensures that the remote endpoint retransmits any unacknowledged data. So long as the transient outage is short the TCP connection and thus the BGP session remains established. In some examples TCP implementations can tolerate a long period of time e.g. at least 100 seconds without receiving an acknowledgment which is longer than the BGP session migration techniques disclosed herein are expected to take to complete. Furthermore the amount of TCP state to be migrated between the routers A B is relatively small and BGP session migration is expected to usually occur between two routers A B that are close to one another geographically leading to relatively fast TCP migration times.

In some examples the underlying IP link is migrated e.g. by changing the path in the underlying programmable transport network close in time to migration of the TCP connection state to reduce the transient disruption in connectivity. Still the network may have to tolerate a brief period of inconsistency during which for example the TCP connection state has moved to the migrate to router B while the traffic still flows via the migrate from router A. During this transition period the physical connection migrator A prevents the migrate from router A from erroneously responding to TCP packets with a TCP RST packet that resets the connection. For example the physical connection migrator A can configure the migrate from router A to drop TCP packets sent to the BGP port e.g. port during this transition period. However the migrate from router A can still be permitted to deliver regular data traffic received during the transition period.

Returning to at block the routing state migrators A and B migrate from the migrate from router A to the migrate to router B the BGP routing state for the BGP session undergoing migration. For example after migration of the IP link and TCP connection are complete the grafting controller B causes the migrate to router B to transition from the BGP inactive state to the BGP established state for the BGP session undergoing migration. Then the routing state migrator B associated with the migrate to router B can begin importing the RIBs received from the routing state migrator A associated with the migrate from router A. However the import process is not as simple as merely loading the RIB entries into the internal data structures of the migrate to router B. For example the migrate from router A and the migrate to router B could have different views of the best route for each routing destination prefix as illustrated in the example of .

In the example of before BGP session migration represented by a directed line in router A reaches the prefixes announced by router via a direct link whereas router B reaches the prefixes announced by router via router A. However after BGP session migration router A reaches the prefixes of router via router B whereas router B reaches the prefixes of router via a direct link . Also suppose routers and connect to a common prefix. Before BGP session migration router follows the AS path AS AS AS e.g. through router to reach that destination prefix whereas after BGP session migration the router follows the AS path AS AS AS e.g. through router to reach that same destination prefix. To determine the new routing paths to reach these various destinations the migrate from and migrate to routers A and B rerun their respective BGP decision procedures based on the BGP routes migrated from the migrate from router to the migrate to router B and then disseminate any routing changes to neighboring routers.

To make the BGP migration process transparent to the remote endpoint the routing state migrator B starts up a new BGP session at the migrate to router B while the routing state migrator A causes the migrate from router A to temporarily emulate the role of the remote endpoint by announcing the routes learned from the remote endpoint . For example the routing state migrator A can cause the migrate from router A to replay the routers stored in the Adj RIB in table associated with the router e.g. which are the routes previously announced by the router to the migrate from router A to the migrate to router B. The migrate to router B stores these routes and reruns its BGP decision process to compute any new best routes to prefixes that the router is announcing. If the resulting new best routes are different from any previous BGP best routes the migrate to router B causes BGP update messages for these changed routes to be sent to other routers within the AS e.g. such as router and sometimes to external routers such as routers and or . If the attributes of a route e.g. such as the AS PATH do not change BGP updates may not be sent to one or more routers in one or more autonomous systems e.g. because from their point of view the route has not changed thereby reducing the overhead that BGP migration via router grafting as disclosed herein imposes on a global BGP routing system.

In some examples the migrate to router B also updates the remote endpoint router of the BGP session undergoing migration with the new BGP best routes selected by the migrate to router B. In at least some scenarios the remote endpoint router has already learned routes from the migrate from router A but the change in topology might change some of those routes. As such the migrate to router B runs the BGP decision process to compare its currently selected best routes to the routes learned from the migrate from router A. If the best routes change the migrate to router B sends an appropriate BGP update message to its neighbors including the remote endpoint router similar to the operations the migrate to router B would perform upon receiving a route update from any of its neighbors. It is expected that migrate from router A and the migrate to router B would often have the same BGP best route for most prefixes especially if routers A and B are relatively close to each other in the IGP topology. Accordingly it is expected that the migrate to router B will usually not change its best routes and thus will usually send few if any update messages to the remote endpoint router .

BGP session migration using router grafting as implemented for example by the router grafting processor and or the example machine readable instructions should not compromise the correct functioning of the network. The following discussion demonstrates how BGP session migration using router grafting as disclosed herein preserves correct control plane routing state and correct data plane packet forwarding in a network even when unexpected routing changes occur in the middle of the grafting process.

Routing changes can and do happen at any time in a network supporting BGP. In some examples BGP routers receive up to millions of BGP update messages per day and these BGP update messages could arrive at any time during the grafting process. For example a BGP update message could arrive 1 while the migrate from router A dumps its routing state 2 while the TCP connection and underlying link are migrating from the migrate from router A to the migrate to router B and or 3 while the migrate to router imports the routing state and updates its routing decisions. BGP session migration using router grafting as disclosed herein can correctly handle BGP update messages received at any of these times.

For example if a BGP update message is received while the migrate from router A is dumping the in memory RIB a goal is to have the in memory RIB be consistent with the RIB that is dumped as part of migration. Here router grafting can take advantage of the fact that the dumping process and the BGP protocol work on a per prefix basis. For example consider an Adj RIB in table with three routes p p and p corresponding to three prefixes of which p and p have already been dumped by the router grafting process. If an update p for the same prefix as p is received the in memory RIB can be updated since it corresponds to a prefix that has not been dumped. Thus to prevent dumping a prefix while it is being updated the routing state migrator A locks the entry in the RIB for the route being updated until processing of the BGP update message is complete. As another example if an update for p for the same prefix as p is received after p has already been dumped processing the received update and updating the in memory RIB without updating the dumped image will cause the two RIBs to be inconsistent. To avoid having this inconsistency delaying processing of the update is an option but that would also delay convergence. Instead because BGP is an incremental protocol where a new update message implicitly withdraws a corresponding previous one the routing state migrator A treats the dumped RIB as a sequence of update messages and appends p to the end of the dumped RIB to keep it consistent with the in memory RIB

In another example scenario BGP update messages may be sent while the TCP connection and the underlying link are migrating from the migrate from router A to the migrate to router B. If a message is sent by the remote endpoint during this transitory period the message is not delivered and is correctly retransmitted after the link and TCP connection come up at the migrate to router B. If an update message is sent by another router to the migrate from router A over a different BGP session there is no problem because the migrate from router A is no longer responsible for the recently re homed BGP session. Therefore the migrate from router A can safely continue to receive select and send routes. If an update message is sent by another router to the migrate to router B over a different BGP session the migrate to router B can install the route in its Adj RIB in for that session and if needed update its selection of the best route similar to when a route is received before the migration process.

Another example scenario to consider is when the migrate to router B receives a BGP update message while importing the routing state from the migrate from router A for the re homed session. Whether the BGP update message is received from the remote endpoint or another router if the route is for a prefix that was already imported there is no problem because the migration of that prefix is complete. However if the BGP update message is for a prefix that has not already been imported only messages from the remote endpoint router need special care. This is because BGP is an asynchronous protocol that does not depend on the relative order of processing for messages learned from different neighbors. However an update message from the remote endpoint should be processed after this route is imported but waiting to process the update message can increase processing complexity. Instead because the update implicitly withdraws the previous announcement which is in the dump image in some examples the routing state migrator B associated with the migrate to router B marks the affected RIB entry to indicate that there is a route update that is more recent than the route in the dump image. In this way the routing state migrator B can skip importing any entries in the dump image for which more recent route updates have been received.

As noted above BGP session employing router grafting as disclosed herein should not impact correct data plane packet forwarding in a network. This is certainly the case when moving a BGP session between blades in the same router because the underlying physical link does not move and the best routes do not change. As such the forwarding table does not change and data packets travel as they did before grafting took place. In other words the data traffic continues to flow uninterrupted.

A more challenging example scenario involves grafting a BGP session from the migrate from router B to the migrate to router B where these two routers do not have the same BGP routing information and do not necessarily make the same decisions. Because the TCP connection and link are migrated before the migrate to router B imports the routing state the remote endpoint briefly forwards packets through the migrate to router B based on BGP routes learned from the migrate from router A. Since BGP route dissemination within the AS typically implemented using iBGP ensures that each router learns at least one route for each destination prefix the two routers A and B will learn routes for the same set of destinations. Therefore the undesirable situation where the remote endpoint forwards packets that the migrate to router B cannot handle does not occur.

Although data packets are forwarded correctly the end to end forwarding path may temporarily differ from the control plane messages. For example in data packets sent by the endpoint router to a common prefix to which routers and connect could start traversing the path through AS while the control plane of the endpoint router still assumes that the AS path goes through AS . These kinds of temporary inconsistencies are a normal occurrence during the BGP route convergence process and do not disrupt the flow of traffic. Once the migrate to router B finishes importing the routes the remote endpoint will learn the new best route and the control plane and data plane paths will agree again.

Correct handling of data traffic should also consider the packets routed toward the remote endpoint . During the grafting process routers throughout the AS forward these packets to the migrate from router A until they learn about the routing change e.g. pointing to the new egress point for reaching the destinations associated with the endpoint . Because the migrate from router A knows where the link TCP connection and BGP session have moved it can direct packets in flight there through temporary tunnels established between the migrate from router A and the migrate to router as appropriate.

Example machine readable instructions that may be used to implement migrate from router processing in the router grafting processor are illustrated in . Additionally example machine readable instructions that may be used to implement migrate to router processing in the router grafting processor are illustrated in . Because the machine readable instructions and perform counterpart processing their execution is described in parallel. Also for clarity and without loss of generality the machine readable instructions are described from the perspective of implementation in the router grafting processor A associated with the migrate from router A of whereas the machine readable instructions are described from the perspective of implementation in the router grafting processor B associated with the migrate to router B of .

Turning to at block the grafting controller A dumps the BGP configuration file for the migrate from router A e.g. instead of dumping its internal data structures . The grafting controller A e.g. implemented as a graft daemon then extracts BGP session configuration from the configuration file of the migrate from router A including the rules for filtering and modifying route announcements. At blocks of the configuration commands extracted at the migrate from router A by the grafting controller A are applied to the migrate to router B by the grafting controller B e.g. implemented as a graft daemon . For example at block the grafting controller B configures the BGP state machine of the migrate to router B to be in an inactive state. Then at block the grafting controller B applies the configuration commands for the BGP session being migrated possibly after translation as described above to the migrate to router B.

As noted above in some examples the router grafting processor includes a routing state migrator implemented by one or more Quagga routing software modules. In such examples the router grafting processor can include a parser for Quagga s commands to enable configuring of BGP sessions. For example to configure the migrate to router B in the inactive state before migrating the TCP connection the following configuration command can be added to the Quagga command line interface 

After the migrate to router B is configured at block the grafting controller A initiates exporting of the routing state at the migrate from router A. For example the following configuration command can be added to the Quagga command line interface which can be invoked by the grafting controller A e.g. implemented as a grafting daemon to initiate the export process 

After the routing state is dumped at the migrate from router A at block the grafting controller A invokes the physical connection migrator A e.g. by invoking an export socket function as part of a SockMi API to migrate the TCP state. In an example in which the physical connection migrator is implemented at least in part by SockMI the export socket function makes an ioctl call to the kernel module passing the socket s file descriptor. The ioctl call causes a Linux kernel module to interact with Linux s internal data structures remove the TCP connection from the kernel and write the socket state to a character device. The socket state includes the protocol state e.g. the current sequence number and data buffers e.g. the receive queue and the transmit queue of packets sent but not acknowledged . When this socket state is written the kernel module sends a signal to the grafting controller A e.g. implemented as a graft daemon on the migrate from router A which causes the grafting controller A to read the TCP connection state from the character device and send it to the grafting controller B e.g. implemented as a graft daemon of the migrate to router B.

Next at block the grafting controller B e.g. implemented as a graft daemon invokes the physical connection migrator B to initiate importing of the TCP state at the migrate to router B. For example upon receiving the state from the migrate from router A the grafting controller B at the migrate to router B notifies the routing state migrator B e.g. implemented as modified Quagga software module s that it is about to import state for the inactive session corresponding to the BGP session undergoing migration. For example the following configuration command can be added to the Quagga command line interface to perform this notification 

Next at blocks and the underlying IP link is migrated from the migrate from router A to the migrate to router B. For example the grafting controller B e.g. implemented as a graft daemon of the migrate to router B triggers the migration of the underlying IP link. As described above migration of the IP link includes removing the migrating session s IP address from the migrate from router A adding the IP address to the migrate to router B and switching the layer two link.

When importing of the TCP connection is complete e.g. and the import socket function at the migrate to router B is unblocked at blocks and the BGP routing state is imported at the migrate to router B. For example at block the grafting controller B causes the migrate to router B to transition to the established state for the BGP session being migrated. In some examples at block the migrate from router A emulates the session endpoint and announces the routes stored in the RIB table s exported at block which are received and processes as announced BGP route at blocks and . In other examples the routing state migrator B e.g. implemented as modified Quagga software module s at the migrate to router B reads the routing state stored in a file received by the grafting controller B from the grafting controller A of the migrate from router A to obtain the exported RIB table s . Then the routing state migrator B reads the exported Adj RIB in table from the stored file and similar to how the migrate to router B processes received BGP route updates messages from other routers at a socket and then calls a function to handle the update the routing state migrator B invokes this same function to process the routes included in the Adj RIB in. At blocks and the routing state migrator B compares the RIBs received from the migrate from router A e.g. and possibly its own previous RIBs to the updated RIBs generated at the migrate to router B based on the BGP routing state information imported from the migrate from router A. For routes that have changed the migrate to router B will send BGP route updates to the appropriate peers e.g. such as the routing endpoint and or other routers .

As described above migrating or grafting a BGP session can involve incrementally updating the remote endpoint of the BGP session as well as the other routers in the AS. The following improvements can be used to reduce the traffic and processing load imposed on routers not directly involved in the grafting process. For example improvements are described that can keep routers from sending unnecessary updates to their eBGP neighbors. Improvements to substantially eliminate a majority of iBGP messages are also described. Further improvements related to intra cluster router scenarios where the routes do not change are described.

Importing routes at the migrate to router and withdrawing routes on the migrate from router can trigger a flurry of update messages to other BGP neighbors. Referring to consider an example where before BGP session migration router had announced 192.168.0.0 16 to router A which in turn announced the route to router B and router . After BGP session migration the following events occur i the migrate from router A removes the 192.168.0.0 16 route announced from the endpoint router and ii the migrate to router B adds the 192.168.0.0 16 route announced from the endpoint router . Absent any special coordination these two events could happen in either order.

For example if the migrate from router A removes this route before the migrate to router B imports it then the eBGP neighbors of the migrate from router A such as router may receive a withdrawal message or briefly learn a different best route e.g. if the migrate from router A has other candidate routes only to have the migrate from router A reannounce the route upon re learning it from the migrate to router B. Alternatively if the migrate to router B adds the route before the migrate from router A sends the withdrawal message to the router then the migrate from router A may have both a withdrawal message and the subsequent re announcement queued to send the router perhaps leading to redundant BGP messages. In the first example the router may temporarily have no route at all and in the second example the router may receive redundant messages. In both examples these effects are temporary but should be avoided if possible.

To avoid the foregoing undesirable events during BGP session migration rather than deleting this route the migrate from router A can mark the route as exported with the knowledge that if this route should remain the best route the migrate from router A will soon re learn it from the migrate to router B. For example suppose the 192.168.0.0 16 route announced from the endpoint router is the only route for this destination prefix. In this example the migrate from router A would certainly re learn this route from the migrate to router B and could forgo withdrawing and reannouncing the route to its other neighbors. Of course if the migrate from router A does not receive the announcement either after some period of time or implicitly through receiving an update with a different route for that prefix then the migrate from router A can proceed with deleting the exported route.

Similar situations can occur on the eBGP sessions of the other routers in the AS e.g. such as the router . This is because these other routers are to be notified e.g. via iBGP to no longer go through the migrate from router A for the routes learned over the migrating session associated with the endpoint router . Therefore the migrate from router A is to send out withdrawal messages to its iBGP neighbors and the migrate to router B is to send out announcements to its iBGP neighbors. This may result in the other routers in the AS e.g. the router temporarily withdrawing a route temporarily sending a different best route or sending a redundant update to their eBGP neighbors. Because of this an improvement involves having the migrate from router A send a marked list of routes to each of its iBGP neighbors with a notification that these routes have migrated to the migrate to router B. The list can be simply a list of prefixes not the associated route attributes. Such a list is expected to be relatively small in size. With this list the other routers in the AS can mark routes as being exported and may be able to forgo withdrawing and reannouncing this route as described above.

While using unmodified iBGP is sufficient for dealing with the change in topology brought about by BGP session migration as described herein it may be possible to further reduce the impact migration has on the iBGP sessions. For example because the route selection policy is likely to be consistent throughout an ISP s network it may be possible to reduce the number of update messages sent by extending iBGP as follows. When the migrate from router A and migrate to router B select the same routes BGP session migration does not change the routing decisions. In this example iBGP updates can be suppressed e.g. BGP updates caused by the migrate from router A withdrawing the route and the migrate to router B announcing the route can be suppressed . When the migrate from router A and the migrate to router B select different routes it is likely due to differences in IGP distances. For the migrate to router B BGP session migration can cause the routes learned from the remote endpoint router to become directly learned routes as opposed to some distance away. Therefore the migrate to router B may now prefer those routes except for example when the migrate to router s currently selected route is also directly learned . This change in route selection can cause the migrate to router B to send updates to its iBGP neighbors notifying them of the change. However because it is more common to change routes it is possible to reduce the number of updates that need to be sent with a modification to iBGP where updates are sent when the migrate to router B keeps a route instead of when it changes a route. Other routers will be notified of the migration and will assume the routes being migrated will be selected unless told otherwise.

Re running the route selection processes can be important as migration can change the network topology and therefore can change the best route to a destination. However when migrating a BGP session within a cluster router the topology does not change and therefore it may be possible to significantly reduce processing. For example a selected best route will be a consistent selection on each blade in a cluster router. Therefore in at least some examples BGP session migration can be performed with the internal data structures being adjusted but without the BGP decision process being re run and with no external update messages being sent. In some examples no internal messages are sent either. With a modified iBGP used for communication between router processor blades the next hop field is the next router not the next processor blade. That is iBGP messages are used to exchange routes learned externally and do not affect how packets are forwarded internally. Therefore upon migration there is no need to send an update as the routes learned externally have already been exchanged.

While exchanging messages and running the decision process can be eliminated transferring the routing state from the exporting blade to the importing blade is still to be performed. The blade that is responsible for a particular BGP session maintains the local RIB that has the routes learned over that session. While some of these routes may have been previously announced by the migrate from blade some may not have been. Therefore the Adj RIB in for the migrating session is provided to the migrate to blade to determine the routes learned over the migrating BGP session as well as which subset of these routes the migrate from blade announced while handling this session.

An experiment to measure the impact of BGP session grafting on the migrate from and migrate to routers was performed using the topology shown in but supplemented with a router adjacent to the endpoint router and in a different AS and another router adjacent to the migrate to router B also in a different AS . These two extra routers were fed a BGP update message trace to fill the RIB of the migrate to router B and the RIB of the endpoint router with routes that have the same set of prefixes but different paths. The experiment was performed on servers with 3 GHz processors and 2 GB RAM.

The time it takes to complete the migration process is a function of the size of the routing table. The larger the routing table is the larger the state that is to be transferred and the more routes that are to be compared. To capture this relationship the RIB size was varied by replaying multiple traces. The performance results which are shown in include both the case where migration occurs between routers e.g. and thus the migrate to router is to run the BGP decision process and the case where migration is between blades e.g. and thus the decision process does not need to run because the underlying topology is not changed . The between blades curve then illustrates the time required to transfer the BGP routes and import them into the internal data structures. Note that these results do not imply that TCP needs to be able to handle this outage where packets go unacknowledged for the entire duration of the migration because the TCP migration process takes less than a millisecond. Instead when compared to re homing a customer today where there is downtime measured in minutes the migration time is small. Furthermore in the illustrated example AS and AS have a peering agreement and therefore the actual migration time could be less if AS were a customer of AS because AS would announce fewer routes to AS .

CPU utilization during the grafting process was also examined. The BGP process on the migrate from router experienced only a negligible increase in CPU utilization for dumping the BGP RIBs. The migrate to router is to import the routing entries and compare routing tables. For each prefix in the received routing information the migrate to router is to perform a lookup to find the routing table entry for that prefix. shows the CPU utilization at 0.2 second intervals for the case where the RIB consists of 200 000 prefixes. There are three things to note. First the CPU utilization is roughly constant. This is perhaps due to the implementation where the data is received placed in a file then iteratively read from the file and processed before reading the next which keeps the CPU utilization at only a fraction as computation is mixed with reads from disk. Second the CPU utilization is the same for both migrating between routers and migrating between blades. The case of migrating between routers merely takes longer because of the additional work involved in running the BGP decision process. Third migration can be run as a lower priority task and use less CPU but take longer thereby preventing the migration from effecting the performance of the router during spikes in routing updates which commonly results in intense CPU usage during the spikes.

While the impact on the migrate from and migrate to routers e.g. routers A B is important another important metric is the impact on the routers not involved in the migration including other routers within the same AS as well as the eBGP neighbors. If the overhead of grafting is relatively contained network operators could more freely apply the technique to simplify network management tasks.

The remote endpoint router e.g. router experiences an overhead directly proportional to the number of additional BGP update messages it receives. The number of update messages depends on how many best routes differ between the migrate from and migrate to router because the migrate to router is to send an update message for each route that differs. The number of differing routes depends on the proximity of the migrate from and migrate to routers. For example if the two routers are in the same Point of Presence PoP of the ISP perhaps few or no routes would change. In such a scenario the processing impact on the remote endpoint router for the BGP session being migrated is expected to be small and thus is not examined further herein.

Other routers both within the AS and in other autonomous systems may be impacted by migration of a BGP session as described herein because these routers may have to learn new routes for the prefixes announced by the remote endpoint of the BGP session undergoing migration. To evaluate this overhead the number of updates that would be sent as a function of the fraction of prefixes for which the migrate from router had selected a different route than the migrate to router was measured. The experiment used a fixed set of 100 000 prefixes. However the results are directly proportional to the number of prefixes and can therefore be scaled appropriately. For example for migrating a customer link the number of prefixes could be significantly smaller whereas for migrating a peering link the number of prefixes could be higher.

Performance results illustrating the impact of BGP session migration on other routers are shown in for three different scenarios. In particular illustrates the case of BGP session migration without any the improvements described above. illustrates the case in which the improvement described above to reduce eBGP messages by exchanging lists identifying exported routes is employed. illustrates the case in which the improvement described above to reduce iBGP messages by sending updates when the migrate to router keeps a route instead of changes a route is employed. In the graphs each line represents a fixed fraction of routes that change as a result of the grafting. For example consider an example where the migrate from router selects a particular route different than the migrate to router. In this case after migration the migrate to router may select the route the migrate from router had selected i.e. the migrate to router changes its own route to what the migrate from router had selected . Each line represents the fraction of times this change occurs. For example the lines labeled 0.2 in correspond to 20 of the routes that differ will change to the routes previously selected by the migrate from router.

There are several things of note from the graphs in . For example the direct unimproved approach to BGP session migration results in more messages being sent. In the case where the selected routes do not differ much which is expected to be a likely scenario the improved approaches result in fewer messages being sent. Additionally when comparing with depending on what would be considered the more common scenario either improvement could result in fewer updates. For the assumption is that when the routes differ the migrate to router will not change to the routes the migrate from router selected. For the assumption is that when the routes differ the migrate from router will change to the routes the migrate from router selected. The reason they would change is that the routes learned from the remote endpoint of the BGP session being migrated will now be directly learned routes rather than via iBGP. It is likely that the policy of route selection is consistent throughout the ISPs network and therefore differences will be due to IGP distances and changing the router will change those routes to be more preferable. The performance results of also illustrate that migration can be performed with minimal disruption to other routers in the likely scenario where there are few differences in routes selected.

The system of the instant example includes a processor such as a general purpose programmable processor. The processor includes a local memory and executes coded instructions present in the local memory and or in another memory device. The processor may execute among other things the machine readable instructions represented in FIGS. and . The processor may be any type of processing unit such as one or more Intel microprocessors from the Pentium family the Itanium family and or the XScale family one or more microcontrollers from the ARM and or PIC families of microcontrollers etc. Of course other processors from other families are also appropriate.

The processor is in communication with a main memory including a volatile memory and a non volatile memory via a bus . The volatile memory may be implemented by Static Random Access Memory SRAM Synchronous Dynamic Random Access Memory SDRAM Dynamic Random Access Memory DRAM RAMBUS Dynamic Random Access Memory RDRAM and or any other type of random access memory device. The non volatile memory may be implemented by flash memory and or any other desired type of memory device. Access to the main memory is typically controlled by a memory controller not shown .

The processing system also includes an interface circuit . The interface circuit may be implemented by any type of interface standard such as an Ethernet interface a universal serial bus USB and or a third generation input output 3GIO interface.

One or more input devices are connected to the interface circuit . The input device s permit a user to enter data and commands into the processor . The input device s can be implemented by for example a keyboard a mouse a touchscreen a track pad a trackball an isopoint and or a voice recognition system.

One or more output devices are also connected to the interface circuit . The output devices can be implemented for example by display devices e.g. a liquid crystal display a cathode ray tube display CRT by a printer and or by speakers. The interface circuit thus typically includes a graphics driver card.

The interface circuit also includes a communication device such as a modem or network interface card to facilitate exchange of data with external computers via a network e.g. an Ethernet connection a digital subscriber line DSL a telephone line coaxial cable a cellular telephone system etc. .

The processing system also includes one or more mass storage devices for storing machine readable instructions and data. Examples of such mass storage devices include floppy disk drives hard drive disks compact disk drives and digital versatile disk DVD drives. In some examples the mass storage device may implement the network stack storage and or the routing state storage . Additionally or alternatively in some examples the volatile memory may implement the network stack storage and or the routing state storage .

The coded instructions of FIGS. and may be stored in the mass storage device in the volatile memory in the non volatile memory in the local memory and or on a removable storage medium such as a CD or DVD .

At least some of the above described example methods and or apparatus are implemented by one or more software and or firmware programs running on a computer processor. However dedicated hardware implementations including but not limited to application specific integrated circuits programmable logic arrays and other hardware devices can likewise be constructed to implement some or all of the example methods and or apparatus described herein either in whole or in part. Furthermore alternative software implementations including but not limited to distributed processing or component object distributed processing parallel processing or virtual machine processing can also be constructed to implement the example methods and or apparatus described herein.

To the extent the above specification describes example components and functions with reference to particular standards and protocols it is understood that the scope of this patent is not limited to such standards and protocols. For instance each of the standards for Internet and other packet switched network transmission e.g. Transmission Control Protocol TCP Internet Protocol IP User Datagram Protocol UDP IP HyperText Markup Language HTML HyperText Transfer Protocol HTTP represent examples of the current state of the art. Such standards are periodically superseded by faster or more efficient equivalents having the same general functionality. Accordingly replacement standards and protocols having the same functions are equivalents which are contemplated by this patent and are intended to be included within the scope of the accompanying claims.

Additionally although this patent discloses example systems including software or firmware executed on hardware it should be noted that such systems are merely illustrative and should not be considered as limiting. For example it is contemplated that any or all of these hardware and software components could be embodied exclusively in hardware exclusively in software exclusively in firmware or in some combination of hardware firmware and or software. Accordingly while the above specification described example systems methods and articles of manufacture the examples are not the only way to implement such systems methods and articles of manufacture. Therefore although certain example methods apparatus and articles of manufacture have been described herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods apparatus and articles of manufacture fairly falling within the scope of the claims either literally or under the doctrine of equivalents.

