---

title: Co-browsing systems and methods
abstract: Described are systems and methods for screen sharing between host and agent computing systems. At a time before capturing the screen of the host computing system, each open window corresponding to a browser process is identified. Certain information is acquired about each browser process. It is determined, in response to the certain information acquired about each browser process, whether the open window corresponding to that browser process is eligible for screen capture. For each eligible open window, each visible portion of that eligible open window is captured. Capture of an image on the screen of the host computing system is limited to each visible portion of each eligible open window.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09535651&OS=09535651&RS=09535651
owner: ORACLE INTERNATIONAL CORPORATION
number: 09535651
owner_city: Redwood Shores
owner_country: US
publication_date: 20101216
---
This application claims the benefit of U.S. Provisional Application No. 61 288 118 filed Dec. 18 2009 titled Field Masking and of U.S. Provisional Application No. 61 289 499 filed Dec. 23 2009 titled Limiting Co browsing to the Browser the entireties of which applications are incorporated by reference herein.

Screen sharing between computing devices over a network has a myriad of practical applications. One practical application is collaboration between a host and a viewer. A host can give a presentation to one or more remote viewers perform demonstrations review documents and share images. As an example of another practical use screen sharing enables remote technical support. For example by watching the keystrokes entered by a host remote technical support staff can diagnose problems as though the present on site.

Often during a screen sharing session the host can have several items visible on the desktop of the computer screen which the hosts would prefer not to share such items as icons open applications or browser windows. Before starting the screen sharing session the host would then need to remove or close such items. This is usually inconvenient and sometimes impractical. During other types of screen sharing occasions hosts may need to enter confidential information such as a credit card numbers or personal identification numbers which should not be shared.

In one aspect the invention features a method for sharing a screen of a host computing system with an agent computing system. At a time before capturing the screen of the host computing system each open window corresponding to a browser process is identified. Certain information is acquired about each browser process. It is determined in response to the certain information acquired about each browser process whether the open window corresponding to that browser process is eligible for screen capture. For each eligible open window each visible portion of that eligible open window is captured. Capture of an image on the screen of the host computing system is limited to each visible portion of each eligible open window.

In another aspect the invention features a screen sharing system including a server system conducting a screen sharing session between a host computing system and an agent computing system over a network. The server system transmits a web page to the host computing system. The web page includes embedded computer readable program code to be executed by the host computing system when a browser running on the host computing system displays the web page.

The computer readable program code comprises computer readable program code configured to identify at a time before capturing a screen of the host computing system each open window corresponding to a browser process computer readable program code configured to acquire certain information about each browser process computer readable program code configured to determine in response to the certain information acquired about each browser process whether the open window corresponding to that browser process is eligible for screen capture computer readable program code configured to calculate for each eligible open window each visible portion of that eligible open window and computer readable program code configured to limit capture of an image on the screen of the host computing system to each visible portion of each eligible open window.

Web based screen sharing systems described herein employ standard browser technology to share the screen image of a host computing system with one or more agent computing systems in near real time. Because browser technology has become widespread most any web enabled computing system can participate in screen sharing. Such screen sharing through browsers is often referred to as co browsing. As used herein a host is a user or online visitor who is showing his or her computer screen and an agent is a user who is remotely viewing the host s computer screen.

In brief overview an agent computing system a viewer and a host computing system a screen sharer are coupled to a server system over a network. The host computing system and agent computing systems each communicates with the server system through their own web browser. Upon visiting the server system the host computing system automatically downloads and executes an applet that includes screen capture program code. The screen sharing works with the screen of the host computing system as an image. Currently available software e.g. JAVA version 1.3 and higher includes program code for capturing the pixel data of the host screen image.

Upon automatically executing this host applet the host computing system sends the captured image data to the server. During an established screen sharing session the browser of the agent computing system also downloads an applet from the server. This agent applet continuously sends requests for image data to the server. In response the server supplies image data received from the host. The agent computing system repaints its display screen with the received image data thus reproducing the image of the host screen at the agent computing system. An example implementation of screen sharing is described in U.S. patent application Ser. No. 11 456 613 filed Jul. 11 2006 which published as Pub. No. 2008 0016155 on Jan. 17 2008 the entirety of which application is incorporated by reference herein.

As described herein various mechanisms enhance the web based co browsing by filtering out or masking from image capture or sharing certain content that is visible on the screen of the host computing system. Such mechanisms include limiting the shared content to what appears only within a browser window sharing permitted browser windows only masking certain visible regions appearing anywhere on the host screen or confined to a browser window and various combinations thereof.

Each computing system includes a display screen and a processor in communication with system memory over a signal bus . Exemplary implementations of the computing systems include but are not limited to personal computers PC Macintosh computers workstations laptop computers kiosks hand held devices such as a personal digital assistant PDA cellular phones smartphones Apple iPads Amazon.com KINDLEs navigation and global positioning systems and network terminals.

The system memory includes non volatile computer storage media such as read only memory ROM and volatile computer storage media such as random access memory RAM . Typically stored in the ROM is a basic input output system BIOS which contains program code for controlling basic operations of the computing systems including start up of the computing device and initialization of hardware. Stored within the RAM are program code and data. Program code includes but is not limited to application programs program modules e.g. browser plug ins a native API e.g. Windows API MacOS API and an operating system e.g. Windows 95 Windows 98 Windows NT 4.0 Windows XP Windows 2000 Linux Macintosh Windows Mobile Mobile Linux Symbian OS Palm OS Mobile OS and Android .

Application programs on the computing systems include browser software. The browser software can be any commercially available Web browser e.g. Microsoft INTERNET EXPLORER Mozilla FIREFOX NETSCAPE Opera Software OPERA and Apple SAFARI . Currently most computing devices already have an installed browser when purchased from a manufacturer and deployed in the business enterprise or home. A web browser may use a hypertext transfer protocol HTTP to transfer or convey information with a web server which can store or create resources such as hypertext markup language HTML files and images. When the browser of a computing system visits a Web site with an embedded applet the computing system automatically downloads the applet from the Web server and automatically executes it. Execution of the applet may require the support of various browser plug ins e.g. JAVA ACTIVEX .

The browser of each computing system can be a JAVA enabled browser with an interpreter e.g. a JAVA virtual machine for interpreting JAVA bytecode i.e. applets scripts and applications. Most commercially available Web browsers have the JAVA bytecode interpreter built into the Web browser. In some operating systems the Java Virtual Machine is installed on the computing system independently of the browser. Because they are translated into an intermediate processor independent bytecode supported by Java Virtual Machine JAVA applets are operating system independent. In other embodiments the browser of the agent computing system the browser of the host computing system or browsers of both computing systems are ACTIVEX enabled which execute downloaded ActiveX controls. In general the principles of the invention apply to any browser capable of running applets or controls that perform screen capture.

Other application programs can include but are not limited to an electronic mail client program an instant messaging and office applications such as spreadsheet word processor and slide presentation software. Each application program can be a proprietary or commercially available program and can run in conjunction with screen sharing.

Typically the signal bus connects the processor to various other components of the computing system including for example a user input interface a memory interface a peripheral interface a video interface a local network interface and a wide area network interface not shown . The display screen connects to the signal bus through the video interface. Exemplary implementations of the signal bus include but are not limited to a Peripheral Component Interconnect PCI bus an Industry Standard Architecture ISA bus an Enhanced Industry Standard Architecture EISA bus and a Video Electronics Standards Association VESA bus. Over a wire or wireless link the user input interface is in communication with one or more user input devices e.g. a keyboard a mouse trackball touch pad touch screen microphone joystick by which a user can enter information and commands into the computing system . Each computing system can reside behind a firewall such as ZoneAlarm a MICROSOFT XP built in or Norton Security firewalls or external firewalls to isolate the computing system from the network .

Embodiments of the network include but are not limited to local area networks LAN metro area networks MAN and wide area networks WAN such as the Internet or World Wide Web. Each computing system can connect to the server over the network through one of a variety of connections such as standard telephone lines digital subscriber line DSL asynchronous DSL LAN or WAN links e.g. T1 T3 broadband connections Frame Relay ATM and wireless connections e.g. 802.11 a 802.11 b 802.11 g . Broadband Internet access through e.g. cable and DSL Digital Subscriber Line provide sufficient bandwidth for transporting screen captured image data.

Running on the operating system is screen sharing control logic and a Web server . In general the screen sharing control logic orchestrates a screen sharing session between a host computing system and an agent computing system also called a guest as described in the aforementioned patent application Ser. No. 11 456 613. The server computing system establishes a first HTTP connection with the host computing system and a second HTTP connection with the agent computing system . By the first connection the server computing system continuously receives image i.e. pixel data corresponding to the screen image of the host computing system . Over the second connection the server computing system continuously receives requests for image data from the agent computing system and responds with image data received from the host computing system . In effect the server is the hub of a connection established between the host computing system and the agent computing system for purposes of screen sharing.

The Web server receives HTTP requests to access web pages identified by URLs and provides the appropriate web page to the requesting computing system . One such web page includes embedded program code to be downloaded by the browser running on the host computing system in order to host a screen sharing session another web page includes embedded program code to be downloaded by the agent computing system in order to view the screen of the host.

Agents download web page to access a configuration utility referred to herein as the Administration Panel through which the agent can configure various parameters and features in order to customize the performance of screen sharing sessions involving the agent s own web pages i.e. the host is sharing and the agent is viewing the agent s preconfigured web page . Through this Administration Panel an agent can copy and paste HTML code into a web page at locations deemed appropriate by the agent in order to mask text entered into fields of the web page as described herein. In general the HTML code includes JavaScript code and Java applets which when executed draws borders of a specific color around a select field and ensures that any text entered into the field has a specific color the same color as or different from the border color . These applets and specifically colored features support processes for locating and masking content within a captured screen image. In addition the coordinates specified by these applets can be used to locate borders of fields identified by agents for masking as described further below.

In addition through this configuration utility agents generate an inclusion list and an exclusion list. Each list contains a plurality of character strings. Each character string corresponds to a title a portion of the title a URL or portion thereof an IP address or portion thereof or a keyword. For purposes of field masking an agent can also configure the colors for the field borders and text. Generally the inclusion list identifies windows of interest to the agent windows that may be shared during a screen sharing host the exclusion list identifies windows that are not to be shared during a screen sharing host that is if any such window is open during screen sharing the window should be masked.

Before each capture of the screen through procedure calls to the native API the DLL program code generates step a list of all open windows on the host computing system including the following information about each open window its process ID process name window title coordinates of the top left corner of the window and the dimensions of the window. The DLL program code also obtains the z order of the windows e.g. the window on top having the lowest z value . An open window is not necessarily a visible window because a given open window may be occluded by one or more other open windows i.e. on top of the given open window . Minimized and hidden windows are filtered out.

At step the DLL program code identifies those windows to be image captured and those windows to be masked. In one embodiment the list of open windows is divided into two sub lists a first sub list contains those open windows to be candidates for image capture a second sub list contains those open windows to be masked. The allocating of the open windows to one sub list or the other occurs using process names and optionally titles and or URLs of the windows as described herein.

To be added to the first sub list of windows to be image captured a given open window should satisfy the following criteria the process name of the window name should match one of the predefined browsers for example Microsoft INTERNET EXPLORER Mozilla FIREFOX NETSCAPE Opera Software OPERA Google Chrome and Apple SAFARI . In addition if further filtering is implemented based on title or URL the title or URL whichever is used must match one of the strings listed in the inclusion list and must not contain any of the strings listed in the exclusion list. Other criteria can be used to decide whether to include or exclude a window based on the title or URL e.g. the use of an inclusion list only or of an exclusion list only with the determining factor of inclusion or exclusion being whether the title or URL is on the particular list . These lists are incorporated as parameters of the applet tag within the HTML code of the downloaded web page. All open windows that do not satisfy these criteria are placed in the second sub list for those open windows to be masked. All open windows satisfying these criteria are deemed eligible for screen capture.

In response to the first and second sub lists and the z order property associated with each of the open windows the applet further computes step all visible regions of those open windows eligible for screen capture. The applet then captures step visible regions only of eligible windows. The captured visible regions are overlaid step upon a canvas equal in size to the size of the host screen. In general the canvas has a background pattern that would enable a viewer to recognize that material has been masked without the background pattern becoming confused with the captured image. In one embodiment the background pattern is a hatched pattern. The resulting screen display an illustrative example of which appears in has a composite of the captured image data and the hatched masked regions . In effect the captured screen display is limited to the visible content within eligible browser windows only. The host computing system transmits step this captured screen image with masked regions to the server system .

Because the process of capturing takes time conceivably the size and location of any given window might change. To increase the reliability of the results that non displayable regions are not captured and shared steps and can be repeated step . In this instance the applet recalculates and renders the visible regions on the canvas based on the results of both passes through steps and . If at step the screen sharing session is still in progress the process of limiting co browsing to visible content within permitted browser windows repeats from step .

In those embodiments that use URLs of web pages to determine whether a given window is to be masked the technique for extracting a URL from a browser differs depending on the browser type. For example to extract a URL from Mozilla Firefox Apple Safari and Microsoft Internet Explorer browsers the DLL program code uses Microsoft MS Active Accessibility API. Microsoft Active Accessibility is a Component Object Model COM based technology. It provides dynamic link libraries that are incorporated into the operating system. A COM interface and API elements provide methods for exposing information about user interface UI components. In general the DLL program code queries the active browser for specific accessible UI components using the MS Active Accessibility API through the COM interface.

Because the location bars a rectangular field typically found at the top of the browser window of Internet Explorer and Firefox browsers are included in their accessible UI components the DLL program code parses the hierarchy of the UI components to find the corresponding element and get its value. The acquired value is the URL of the page which appears in the browser window. Different types and versions of the browsers have different hierarchy of UI components. According the DLL program code includes program code configured specifically for each type and version.

Because the UI components of Google Chrome types of browsers are not accessible through the MS Active Accessibility API the DLL program code accesses their UI components through the Windows API also known as WinAPI . The WinAPI is a core set of application programming interfaces available in the Microsoft Windows operating systems. Through the WinAPI the DLL program code locates the window associated with the Google Chrome location field the location fields of Google Chrome browsers are implemented as separate windows and the URLs of the opened pages are captions titles of those windows and extracts its title.

In some instances usage of the MS Active Accessibility API can make screen sharing slower because it depends on the response time of the browser that is responses by the browser to the query for the location field text . Occasionally browsers can become overloaded. As for the window captions based technique the returned value always corresponds to the current value of Google Chrome s location field which sometimes is different from the actually opened page s URL. The location field can also be different for example when the user edits the URL but does not submit it.

To overcome these situations in response to identifying a window that should be masked the DLL program code changes the title of the browser window by pre pending or appending one or more certain characters for example spaces to the front or to the end of the title. Spaces are preferred because they are likely to go unnoticed or cause confusion by the user. Upon the next occurrence of screen capture the applet looks for those certain characters in the currently opened browser windows. If the applet finds the certain characters at the beginning or the end of the browser title depending upon the particular implementation the applet does not call the DLL program code to use the location extraction technique for finding the URL. Should the user browse to another web page the title of the browser automatically changes and the DLL program code again extracts the location to acquire the URL for subsequent comparison with items on the sub lists.

At step it is determined whether the extracted URL satisfies certain criteria for example the URL matches a string in the inclusion list and does not match any string in the exclusion list. If the URL satisfies the criteria the window is not masked step . Otherwise the title of the window is changed step to have the special leading or trailing characters and masked step .

If at step this is not the last of the open windows the process continues with the next window which is taken at step . If this is the last of the open windows the visible portions of the eligible open windows are screen captured for transmission to the server system . Provided screen sharing is continuing the process repeats from step at which a new list of open windows is generated.

In addition to or instead of masking browser windows another masking technique referred to as field masking masks regions of the screen or fields in a captured window in order to enhance security and the privacy of masked data. Three mechanisms can be employed to achieve field masking. They are 1 masking by border color 2 masking by text color and 3 masking by border applets. These mechanisms operate individually or together in any combination on a captured image of screen which is transferred after masking to the server system for subsequent transmission to the agent computing system and display on the agent console. When the host computing system downloads the web page with the applet execution of the applet causes the loading and execution of DLL program code used to help find and mask regions in a captured screen image as described below.

To enable field masking of select fields or regions a web page developer places certain HTML code into the web page where the select fields are located. The HTML code has border color and text color parameters for purposes of adding colored borders and changing text color to select fields in the developer s web page. The value of these border color and text color parameters can be also changed from the Administration Panel. In one embodiment four Java applets produce the borders around a select field. When the browser on the host computing system displays the developer s web page the four embedded applets execute and produce borders of the specified color around the select field. Applets are used because changing the accessibility option of the browser does not affect colors produced by the applets and so the borders of the bounded field are certain to have the specified color after acquisition of the URL or title. In addition these applets are used explicitly in one of the masking mechanisms. Also the field is given an appropriate background color.

The applet iteratively examines step the lines found in step and groups them by putting lines which form a corner in the same group. Groups thus correspond to rectangles that may have content that is to be masked. The colors that appear most frequently in a rectangle are determined step . In general the color of highest frequency is the background color and serves to be the masking color. By comparing colors of pixels within the rectangle the bounds i.e. pixel locations of the text in the rectangle are calculated. The colors of pixels at a border will be known to have been reached because of its specified color in contrast to the known color of the background or text within the rectangle. The found background color is used to fill the rectangle within its determined bounds. This produces blank i.e. empty field . At step asterisks or some other characters suitable for signifying masked text are drawn in the text bounds.

The color of text within a specified field can also serve to find content that is to be masked. The applet iteratively parses over the pixels of a captured screen image and finds rectangles which contain text of specified color. The search for text of the specified color can use an approximation to produce a pixel color range in similar fashion to that previously described. If the rectangles found by searching for specifically colored text do not match those rectangles found by searched for borders of a specified color presuming both techniques are being used in conjunction the steps and of can be repeated.

In addition to or instead of searching for borders and or text of a specified color the third mechanism called masking by applets does not entail analyzing the pixels of a captured screen image. For this mechanism the DLL program code calls the native API of the host computing system . The native API provides two functionalities 1 retrieving all browser windows with their properties process id process name location size etc. 2 retrieving all child windows with their properties location size etc. by specified ClassName property. The four previously mentioned applets are child windows of browsers. The native API retrieves all running applets windows in all browsers. An applet window s ClassName property has a SunAwtCanvas value. The four applets identify the locations on the screen and dimensions of the corresponding borders. The applet uses these four applets to find the lines grouping the lines into rectangles identifying the background color calculating the text bounds and filling the text bounds with the background color. This technique empties the field but does not draw asterisks within the field. The field is blank when the screen is captured.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method and computer program product. Thus aspects of the present invention may be embodied entirely in hardware entirely in software including but not limited to firmware program code resident software microcode or in a combination of hardware and software. All such embodiments may generally be referred to herein as a circuit a module or a system. In addition aspects of the present invention may be in the form of a computer program product embodied in one or more computer readable media having computer readable program code embodied thereon.

The computer readable medium may be a computer readable storage medium examples of which include but are not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination thereof. As used herein a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus device computer computing system computer system or any programmable machine or device that inputs processes and outputs instructions commands or data. A non exhaustive list of specific examples of a computer readable storage medium include an electrical connection having one or more wires a portable computer diskette a floppy disk a hard disk a random access memory RAM a read only memory ROM a USB flash drive an non volatile RAM NVRAM or NOVRAM an erasable programmable read only memory EPROM or Flash memory a flash memory card an electrically erasable programmable read only memory EEPROM an optical fiber a portable compact disc read only memory CD ROM a DVD ROM an optical storage device a magnetic storage device or any suitable combination thereof.

Program code may be embodied as computer readable instructions stored on or in a computer readable storage medium as for example source code object code interpretive code executable code or combinations thereof. Any standard or proprietary programming or interpretive language can be used to produce the computer executable instructions. Examples of such languages include C C Pascal JAVA BASIC Smalltalk Visual Basic and Visual C .

Transmission of program code embodied on a computer readable medium can occur using any appropriate medium including but not limited to wireless wired optical fiber cable radio frequency RF or any suitable combination thereof.

The program code may execute entirely on a user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on a remote computer or server. Any such remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

In addition the described methods can be implemented on an image processing device or the like or on a separate programmed general purpose computer having image processing capabilities. Additionally the methods of this invention can be implemented on a special purpose computer a programmed microprocessor or microcontroller and peripheral integrated circuit element s an ASIC or other integrated circuit a digital signal processor a hard wired electronic or logic circuit such as discrete element circuit a programmable logic device such as PLD PLA FPGA PAL or the like. In general any device capable of implementing a state machine that is in turn capable of implementing the proposed methods herein can be used to implement the image processing system according to this invention.

Furthermore the disclosed methods may be readily implemented in software using object or object oriented software development environments that provide portable source code that can be used on a variety of computer or workstation platforms. Alternatively the disclosed system may be implemented partially or fully in hardware using standard logic circuits or a VLSI design. Whether software or hardware is used to implement the systems in accordance with this invention is dependent on the speed and or efficiency requirements of the system the particular function and the particular software or hardware systems or microprocessor or microcomputer systems being utilized. The methods illustrated herein however can be readily implemented in hardware and or software using any known or later developed systems or structures devices and or software by those of ordinary skill in the applicable art from the functional description provided herein and with a general basic knowledge of the computer and image processing arts.

Moreover the disclosed methods may be readily implemented in software executed on programmed general purpose computer a special purpose computer a microprocessor or the like. In these instances the systems and methods of this invention can be implemented as program embedded on personal computer such as JAVA or CGI script as a resource residing on a server or graphics workstation as a plug in or the like. The system can also be implemented by physically incorporating the system and method into a software and or hardware system such as the hardware and software systems of an image processor.

While this invention has been described in conjunction with a number of embodiments it is evident that many alternatives modifications and variations would be or are apparent to those of ordinary skill in the applicable arts. Accordingly it is intended to embrace all such alternatives modifications equivalents and variations that are within the spirit and scope of this invention.

