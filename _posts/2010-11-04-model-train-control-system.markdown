---

title: Model train control system
abstract: A system which operates a digitally controlled model railroad transmitting a first command from a first client program to a resident external controlling interface through a first communications transport. A second command is transmitted from a second client program to the resident external controlling interface through a second communications transport. The first command and the second command are received by the resident external controlling interface which queues the first and second commands. The resident external controlling interface sends third and fourth commands representative of the first and second commands, respectively, to a digital command station for execution on the digitally controlled model railroad.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08065045&OS=08065045&RS=08065045
owner: 
number: 08065045
owner_city: 
owner_country: 
publication_date: 20101104
---
This application is a continuation of U.S. patent application Ser. No. 11 981 238 filed Oct. 30 2007 which is a continuation of Ser. No. 11 607 233 filed Dec. 1 2006 which is a continuation of U.S. patent application Ser. No. 11 375 794 filed Mar. 14 2006 now U.S. Pat. No. 7 209 812 which is a continuation of U.S. patent application Ser. No. 10 989 815 filed Nov. 16 2004 now U.S. Pat. No. 7 177 733 which is a continuation of U.S. patent application Ser. No. 10 713 476 filed Nov. 14 2003 now U.S. Pat. No. 6 909 945 which is a continuation of U.S. patent application Ser. No. 09 311 936 filed May 14 1999 now U.S. Pat. No. 6 676 089 which is a continuation of U.S. patent application Ser. No. 09 104 461 filed Jun. 24 1998 now U.S. Pat. No. 6 065 406.

Model railroads have traditionally been constructed with of a set of interconnected sections of train track electric switches between different sections of the train track and other electrically operated devices such as train engines and draw bridges. Train engines receive their power to travel on the train track by electricity provided by a controller through the track itself. The speed and direction of the train engine is controlled by the level and polarity respectively of the electrical power supplied to the train track. The operator manually pushes buttons or pulls levers to cause the switches or other electrically operated devices to function as desired. Such model railroad sets are suitable for a single operator but unfortunately they lack the capability of adequately controlling multiple trains independently. In addition such model railroad sets are not suitable for being controlled by multiple operators especially if the operators are located at different locations distant from the model railroad such as different cities.

A digital command control DDC system has been developed to provide additional controllability of individual train engines and other electrical devices. Each device the operator desires to control such as a train engine includes an individually addressable digital decoder. A digital command station DCS is electrically connected to the train track to provide a command in the form of a set of encoded digital bits to a particular device that includes a digital decoder. The digital command station is typically controlled by a personal computer. A suitable standard for the digital command control system is the NMRA DCC Standards issued March 1997 and is incorporated herein by reference. While providing the ability to individually control different devices of the railroad set the DCC system still fails to provide the capability for multiple operators to control the railroad devices especially if the operators are remotely located from the railroad set and each other.

DigiToys Systems of Lawrenceville Ga. has developed a software program for controlling a model railroad set from a remote location. The software includes an interface which allows the operator to select desired changes to devices of the railroad set that include a digital decoder such as increasing the speed of a train or switching a switch. The software issues a command locally or through a network such as the internet to a digital command station at the railroad set which executes the command. The protocol used by the software is based on Cobra from Open Management Group where the software issues a command to a communication interface and awaits confirmation that the command was executed by the digital command station. When the software receives confirmation that the command executed the software program sends the next command through the communication interface to the digital command station. In other words the technique used by the software to control the model railroad is analogous to an inexpensive printer where commands are sequentially issued to the printer after the previous command has been executed. Unfortunately it has been observed that the response of the model railroad to the operator appears slow especially over a distributed network such as the internet. One technique to decrease the response time is to use high speed network connections but unfortunately such connections are expensive.

What is desired therefore is a system for controlling a model railroad that effectively provides a high speed connection without the additional expense associated therewith.

The present invention overcomes the aforementioned drawbacks of the prior art in a first aspect by providing a system for operating a digitally controlled model railroad that includes transmitting a first command from a first client program to a resident external controlling interface through a first communications transport. A second command is transmitted from a second client program to the resident external controlling interface through a second communications transport. The first command and the second command are received by the resident external controlling interface which queues the first and second commands. The resident external controlling interface sends third and fourth commands representative of the first and second commands respectively to a digital command station for execution on the digitally controlled model railroad.

Incorporating a communications transport between the multiple client program and the resident external controlling interface permits multiple operators of the model railroad at locations distant from the physical model railroad and each other. In the environment of a model railroad club where the members want to simultaneously control devices of the same model railroad layout which preferably includes multiple trains operating thereon the operators each provide commands to the resistant external controlling interface and hence the model railroad. In addition by queuing by commands at a single resident external controlling interface permits controlled execution of the commands by the digitally controlled model railroad would may otherwise conflict with one another.

In another aspect of the present invention the first command is selectively processed and sent to one of a plurality of digital command stations for execution on the digitally controlled model railroad based upon information contained therein. Preferably the second command is also selectively processed and sent to one of the plurality of digital command stations for execution on the digitally controlled model railroad based upon information contained therein. The resident external controlling interface also preferably includes a command queue to maintain the order of the commands.

The command queue also allows the sharing of multiple devices multiple clients to communicate with the same device locally or remote in a controlled manner and multiple clients to communicate with different devices. In other words the command queue permits the proper execution in the cases of 1 one client to many devices 2 many clients to one device and 3 many clients to many devices.

In yet another aspect of the present invention the first command is transmitted from a first client program to a first processor through a first communications transport. The first command is received at the first processor. The first processor provides an acknowledgement to the first client program through the first communications transport indicating that the first command has properly executed prior to execution of commands related to the first command by the digitally controlled model railroad. The communications transport is preferably a COM or DCOM interface.

The model railroad application involves the use of extremely slow real time interfaces between the digital command stations and the devices of the model railroad. In order to increase the apparent speed of execution to the client other than using high speed communication interfaces the resident external controller interface receives the command and provides an acknowledgement to the client program in a timely manner before the execution of the command by the digital command stations. Accordingly the execution of commands provided by the resident external controlling interface to the digital command stations occur in a synchronous manner such as a first in first out manner. The COM and DCOM communications transport between the client program and the resident external controlling interface is operated in an asynchronous manner namely providing an acknowledgement thereby releasing the communications transport to accept further communications prior to the actual execution of the command. The combination of the synchronous and the asynchronous data communication for the commands provides the benefit that the operator considers the commands to occur nearly instantaneously while permitting the resident external controlling interface to verify that the command is proper and cause the commands to execute in a controlled manner by the digital command stations all without additional high speed communication networks. Moreover for traditional distributed software execution there is no motivation to provide an acknowledgment prior to the execution of the command because the command executes quickly and most commands are sequential in nature. In other words the execution of the next command is dependent upon proper execution of the prior command so there would be no motivation to provide an acknowledgment prior to its actual execution.

The foregoing and other objectives features and advantages of the invention will be more readily understood upon consideration of the following detailed description of the invention taken in conjunction with the accompanying drawings.

Referring to a model train control system includes a communications transport interconnecting a client program and a resident external controlling interface . The client program executes on the model railroad operator s computer and may include any suitable system to permit the operator to provide desired commands to the resident external controlling interface . For example the client program may include a graphical interface representative of the model railroad layout where the operator issues commands to the model railroad by making changes to the graphical interface. The client program also defines a set of Application Programming Interfaces API s described in detail later which the operator accesses using the graphical interface or other programs such as Visual Basic C Java or browser based applications There may be multiple client programs interconnected with the resident external controlling interface so that multiple remote operators may simultaneously provide control commands to the model railroad.

The communications transport provides an interface between the client program and the resident external controlling interface . The communications transport may be any suitable communications medium for the transmission of data such as the internet local area network satellite links or multiple processes operating on a single computer. The preferred interface to the communications transport is a COM or DCOM interface as developed for the Windows operating system available from Microsoft Corporation. The communications transport also determines if the resident external controlling interface is system resident or remotely located on an external system. The communications transport may also use private or public communications protocol as a medium for communications. The client program provides commands and the resident external controlling interface responds to the communications transport to exchange information. A description of COM common object model and DCOM distributed common object model is provided by Chappel in a book entitled Understanding ActiveX and OLE Microsoft Press and is incorporated by reference herein.

Incorporating a communications transport between the client program s and the resident external controlling interface permits multiple operators of the model railroad at locations distant from the physical model railroad and each other. In the environment of a model railroad club where the members want to simultaneously control devices of the same model railroad layout which preferably includes multiple trains operating thereon the operators each provide commands to the resistant external controlling interface and hence the model railroad.

The manner in which commands are executed for the model railroad under COM and DCOM may be as follows The client program makes requests in a synchronous manner using COM DCOM to the resident external interface controller . The synchronous manner of the request is the technique used by COM and DCOM to execute commands. The communications transport packages the command for the transport mechanism to the resident external controlling interface . The resident external controlling interface then passes the command to the digital command stations which in turn executes the command. After the digital command station executes the command an acknowledgement is passed back to the resident external controlling interface which in turn passes an acknowledgement to the client program . Upon receipt of the acknowledgement by the client program the communications transport is again available to accept another command. The train control system without more permits execution of commands by the digital command stations from multiple operators but like the DigiToys Systems software the execution of commands is slow.

The present inventor came to the realization that unlike traditional distributed systems where the commands passed through a communications transport are executed nearly instantaneously by the server and then an acknowledgement is returned to the client the model railroad application involves the use of extremely slow real time interfaces between the digital command stations and the devices of the model railroad. The present inventor came to the further realization that in order to increase the apparent speed of execution to the client other than using high speed communication interfaces the resident external controller interface should receive the command and provide an acknowledgement to the client program in a timely manner before the execution of the command by the digital command stations . Accordingly the execution of commands provided by the resident external controlling interface to the digital command stations occur in a synchronous manner such as a first in first out manner. The COM and DOOM communications transport between the client program and the resident external controlling interface is operated in an asynchronous manner namely providing an acknowledgement thereby releasing the communications transport to accept further communications prior to the actual execution of the command. The combination of the synchronous and the asynchronous data communication for the commands provides the benefit that the operator considers the commands to occur nearly instantaneously while permitting the resident external controlling interface to verify that the command is proper and cause the commands to execute in a controlled manner by the digital command stations all without additional high speed communication networks. Moreover for traditional distributed software execution there is no motivation to provide an acknowledgment prior to the execution of the command because the command executes quickly and most commands are sequential in nature. In other words the execution of the next command is dependent upon proper execution of the prior command so there would be no motivation to provide an acknowledgment prior to its actual execution. It is to be understood that other devices such as digital devices may be controlled in a manner as described for model railroads.

Referring to the client program sends a command over the communications transport that is received by an asynchronous command processor . The asynchronous command processor queries a local database storage to determine if it is necessary to package a command to be transmitted to a command queue . The local database storage primarily contains the state of the devices of the model railroad such as for example the speed of a train the direction of a train whether a draw bridge is up or down whether a light is turned on or off and the configuration of the model railroad layout. If the command received by the asynchronous command processor is a query of the state of a device then the asynchronous command processor retrieves such information from the local database storage and provides the information to an asynchronous response processor . The asynchronous response processor then provides a response to the client program indicating the state of the device and releases the communications transport for the next command.

The asynchronous command processor also verifies using the configuration information in the local database storage that the command received is a potentially valid operation. If the command is invalid the asynchronous command processor provides such information to the asynchronous response processor which in turn returns an error indication to the client program .

The asynchronous command processor may determine that the necessary information is not contained in the local database storage to provide a response to the client program of the device state or that the command is a valid action. Actions may include for example an increase in the train s speed or turning on off of a device. In either case the valid unknown state or action command is packaged and forwarded to the command queue . The packaging of the command may also include additional information from the local database storage to complete the client program request if necessary. Together with packaging the command for the command queue the asynchronous command processor provides a command to the asynchronous request processor to provide a response to the client program indicating that the event has occurred even though such an event has yet to occur on the physical railroad layout.

As such it can be observed that whether or not the command is valid whether or not the information requested by the command is available to the asynchronous command processor and whether or not the command has executed the combination of the asynchronous command processor and the asynchronous response processor both verifies the validity of the command and provides a response to the client program thereby freeing up the communications transport for additional commands. Without the asynchronous nature of the resident external controlling interface the response to the client program would be in many circumstances delayed thereby resulting in frustration to the operator that the model railroad is performing in a slow and painstaking manner. In this manner the railroad operation using the asynchronous interface appears to the operator as nearly instantaneously responsive.

Each command in the command queue is fetched by a synchronous command processor and processed. The synchronous command processor queries a controller database storage for additional information as necessary and determines if the command has already been executed based on the state of the devices in the controller database storage . In the event that the command has already been executed as indicated by the controller database storage then the synchronous command processor passes information to the command queue that the command has been executed or the state of the device. The asynchronous response processor fetches the information from the command cue and provides a suitable response to the client program if necessary and updates the local database storage to reflect the updated status of the railroad layout devices.

If the command fetched by the synchronous command processor from the command queue requires execution by external devices such as the train engine then the command is posted to one of several external device control logic blocks. The external device control logic processes the command from the synchronous command processor and issues appropriate control commands to the interface of the particular external device to execute the command on the device and ensure that an appropriate response was received in response. The external device is preferably a digital command control device that transmits digital commands to decoders using the train track. There are several different manufacturers of digital command stations each of which has a different set of input commands so each external device is designed for a particular digital command station. In this manner the system is compatible with different digital command stations. The digital command stations of the external devices provide a response to the external device control logic which is checked for validity and identified as to which prior command it corresponds to so that the controller database storage may be updated properly. The process of transmitting commands to and receiving responses from the external devices is slow.

The synchronous command processor is notified of the results from the external control logic and if appropriate forwards the results to the command queue . The asynchronous response processor clears the results from the command queue and updates the local database storage and sends an asynchronous response to the client program if needed. The response updates the client program of the actual state of the railroad track devices if changed and provides an error message to the client program if the devices actual state was previously improperly reported or a command did not execute properly.

The use of two separate database storages each of which is substantially a mirror image of the other provides a performance enhancement by a fast acknowledgement to the client program using the local database storage and thereby freeing up the communications transport for additional commands. In addition the number of commands forwarded to the external device control logic and the external devices which are relatively slow to respond is minimized by maintaining information concerning the state and configuration of the model railroad. Also the use of two separate database tables and allows more efficient multi threading on multi processor computers.

In order to achieve the separation of the asynchronous and synchronous portions of the system the command queue is implemented as a named pipe as developed by Microsoft for Windows. The queue allows both portions to be separate from each other where each considers the other to be the destination device. In addition the command queue maintains the order of operation which is important to proper operation of the system.

The use of a single command queue allows multiple instant rations of the asynchronous functionality with one for each different client. The single command queue also allows the sharing of multiple devices multiple clients to communicate with the same device locally or remote in a controlled manner and multiple clients to communicate with different devices. In other words the command queue permits the proper execution in the cases of 1 one client to many devices 2 many clients to one device and 3 many clients to many devices.

The present inventor came to the realization that the digital command stations provided by the different vendors have at least three different techniques for communicating with the digital decoders of the model railroad set. The first technique generally referred to as a transaction one or more operations is a synchronous communication where a command is transmitted executed and a response is received therefrom prior to the transmission of the next sequentially received command. The DCS may execute multiple commands in this transaction. The second technique is a cache with out of order execution where a command is executed and a response received therefrom prior to the execution of the next command but the order of execution is not necessarily the same as the order that the commands were provided to the command station. The third technique is a local area network model where the commands are transmitted and received simultaneously. In the LAN model there is no requirement to wait until a response is received for a particular command prior to sending the next command. Accordingly the LAN model may result in many commands being transmitted by the command station that have yet to be executed. In addition some digital command stations use two or more of these techniques.

With all these different techniques used to communicate with the model railroad set and the system providing an interface for each different type of command station there exists a need for the capability of matching up the responses from each of the different types of command stations with the particular command issued for record keeping purposes. Without matching up the responses from the command stations the databases can not be updated properly.

Validation functionality is included within the external device control logic to accommodate all of the different types of command stations. Referring to an external command processor receives the validated command from the synchronous command processor . The external command processor determines which device the command should be directed to the particular type of command it is and builds state information for the command. The state information includes for example the address type port variables and type of commands to be sent out. In other words the state information includes a command set for a particular device on a particular port device. In addition a copy of the original command is maintained for verification purposes. The constructed command is forwarded to the command sender which is another queue and preferably a circular queue. The command sender receives the command and transmits commands within its queue in a repetitive nature until the command is removed from its queue. A command response processor receives all the commands from the command stations and passes the commands to the validation function . The validation function compares the received command against potential commands that are in the queue of the command sender that could potentially provide such a result. The validation function determines one of four potential results from the comparison. First the results could be simply bad data that is discarded. Second the results could be partially executed commands which are likewise normally discarded. Third the results could be valid responses but not relevant to any command sent. Such a case could result from the operator manually changing the state of devices on the model railroad or from another external device assuming a shared interface to the DOS. Accordingly the results are validated and passed to the result processor . Fourth the results could be valid responses relevant to a command sent. The corresponding command is removed from the command sender and the results passed to the result processor . The commands in the queue of the command sender as a result of the validation process are retransmitted a predetermined number of times then if error still occurs the digital command station is reset which if the error still persists then the command is removed and the operator is notified of the error.

The digital command stations program the digital devices such as a locomotive and switches of the railroad layout. For example a locomotive may include several different registers that control the horn how the light banks speed curves for operation etc. In many such locomotives there are or more programable values. Unfortunately it may take 1 10 seconds per byte wide word if a valid register or control variable generally referred to collectively as registers and two to four minutes to error out if an invalid register to program such a locomotive or device either of which may contain a decoder. With a large number of byte wide words in a locomotive its takes considerable time to fully program the locomotive. Further with a railroad layout including many such locomotives and other programmable devices it takes a substantial amount of time to completely program all the devices of the model railroad layout. During the programming of the railroad layout the operator is sitting there not enjoying the operation of the railroad layout is frustrated loses operating enjoyment and will not desire to use digital programmable devices. In addition to reprogram the railroad layout the operator must reprogram all of the devices of the entire railroad layout which takes substantial time. Similarly to determine the state of all the devices of the railroad layout the operator must read the registers of each device likewise taking substantial time. Moreover to reprogram merely a few bytes of a particular device requires the operator to previously know the state of the registers of the device which is obtainable by reading the registers of the device taking substantial time thereby still frustrating the operator.

The present inventor came to the realization that for the operation of a model railroad the anticipated state of the individual devices of the railroad as programmed should be maintained during the use of the model railroad and between different uses of the model railroad. By maintaining data representative of the current state of the device registers of the model railroad determinations may be made to efficiently program the devices. When the user designates a command to be executed by one or more of the digital command stations the software may determine which commands need to be sent to one or more of the digital command stations of the model railroad. By only updating those registers of particular devices that are necessary to implement the commands of a particular user the time necessary to program the railroad layout is substantially reduced. For example if the command would duplicate the current state of the device then no command needs to be forwarded to the digital command stations . This prevents redundantly programming the devices of the model railroad thereby freeing up the operation of the model railroad for other activities.

Unlike a single user single railroad environment the system of the present invention may encounter conflicting commands that attempt to write to and read from the devices of the model railroad. For example the conflicting commands may inadvertently program the same device in an inappropriate manner such as the locomotive to speed up to maximum and the locomotive to stop. In addition a user that desires to read the status of the entire model railroad layout will monopolize the digital decoders and command stations for a substantial time such as up to two hours thereby preventing the enjoyment of the model railroad for the other users. Also a user that programs an extensive number of devices will likewise monopolize the digital decoders and command stations for a substantial time thereby preventing the enjoyment of the model railroad for other users.

In order to implement a networked selective updating technique the present inventor determined that it is desirable to implement both a write cache and a read cache. The write cache contains those commands yet to be programmed by the digital command stations . Valid commands from each user are passed to a queue in the write cache. In the event of multiple commands from multiple users depending on user permissions and security or the same user for the same event or action the write cache will concatenate the two commands into a single command to be programmed by the digital command stations . In the event of multiple commands from multiple users or the same user for different events or actions the write cache will concatenate the two commands into a single command to be programmed by the digital command stations . The write cache may forward either of the commands such as the last received command to the digital command station. The users are updated with the actual command programmed by the digital command station as necessary.

The read cache contains the state of the different devices of the model railroad. After a command has been written to a digital device and properly acknowledged if necessary the read cache is updated with the current state of the model railroad. In addition the read cache is updated with the state of the model railroad when the registers of the devices of the model railroad are read. Prior to sending the commands to be executed by the digital command stations the data in the write cache is compared against the data in the read cache. In the event that the data in the read cache indicates that the data in the write cache does not need to be programmed the command is discarded. In contrast if the data in the read cache indicates that the data in the write cache needs to be programmed then the command is programmed by the digital command station. After programming the command by the digital command station the read cache is updated to reflect the change in the model railroad. As becomes apparent the use of a write cache and a read cache permits a decrease in the number of registers that need to be programmed thus speeding up the apparent operation of the model railroad to the operator.

The present inventor further determined that errors in the processing of the commands by the railroad and the initial unknown state of the model railroad should be taken into account for a robust system. In the event that an error is received in response to an attempt to program or read a device then the state of the relevant data of the read cache is marked as unknown. The unknown state merely indicates that the state of the register has some ambiguity associated therewith. The unknown state may be removed by reading the current state of the relevant device or the data rewritten to the model railroad without an error occurring. In addition if an error is received in response to an attempt to program or read a device then the command may be re transmitted to the digital command station in an attempt to program the device properly. If desirable multiple commands may be automatically provided to the digital command stations to increase the likelihood of programming the appropriate registers. In addition the initial state of a register is likewise marked with an unknown state until data becomes available regarding its state.

When sending the commands to be executed by the digital command stations they are preferably first checked against the read cache as previously mentioned. In the event that the read cache indicates that the state is unknown such as upon initialization or an error then the command should be sent to the digital command station because the state is not known. In this mariner the state will at least become known even if the data in the registers is not actually changed.

The present inventor further determined a particular set of data that is useful for a complete representation of the state of the registers of the devices of the model railroad.

An invalid representation of a register indicates that the particular register is not valid for both a read and a write operation. This permits the system to avoid attempting to read from and write to particular registers of the model railroad. This avoids the exceptionally long error out when attempting to access invalid registers.

An in use representation of a register indicates that the particular register is valid for both a read and a write operation. This permits the system to read from and write to particular registers of the model railroad. This assists in accessing valid registers where the response time is relatively fast.

A read error unknown state representation of a register indicates that each time an attempt to read a particular register results in an error.

A read dirty representation of a register indicates that the data in the read cache has not been validated by reading its valid from the decoder. If both the read error and the read dirty representations are clear then a valid read from the read cache may be performed. A read dirty representation may be cleared by a successful write operation if desired.

A read only representation indicates that the register may not be written to. If this flag is set then a write error may not occur.

A write error unknown state representation of a register indicates that each time an attempt to write to a particular register results in an error.

A write dirty representation of a register indicates that the data in the write cache has not been written to the decoder yet. For example when programming the decoders the system programs the data indicated by the write dirty. If both the write error and the write dirty representations are clear then the state is represented by the write cache. This assists in keeping track of the programming without excess overhead.

A write only representation indicates that the register may not be read from. If this flag is set then a read error may not occur.

Over time the system constructs a set of representations of the model railroad devices and the model railroad itself indicating the invalid registers read errors and write errors which may increases the efficiently of programing and changing the states of the model railroad. This permits the system to avoid accessing particular registers where the result will likely be an error.

The present inventor came to the realization that the valid registers of particular devices is the same for the same device of the same or different model railroads. Further the present inventor came to the realization that a template may be developed for each particular device that may be applied to the representations of the data to predetermine the valid registers. In addition the template may also be used to set the read error and write error if desired. The template may include any one or more of the following representations such as invalid in use read error write only read dirty read only write error and write dirty for the possible registers of the device. The predetermination of the state of each register of a particular device avoids the time consuming activity of receiving a significant number of errors and thus constructing the caches. It is to be noted that the actual read and write cache may be any suitable type of data structure.

Many model railroad systems include computer interfaces to attempt to mimic or otherwise emulate the operation of actual full scale railroads. illustrates the organization of train dispatching by timetable and train order T TO techniques. Many of the rules governing T TO operation are related to the superiority of trains which principally is which train will take siding at the meeting point. Any misinterpretation of these rules can be the source of either hazard or delay. For example misinterpreting the rules may result in one train colliding with another train.

For trains following each other T TO operation must rely upon time spacing and flag protection to keep each train a sufficient distance apart. For example a train may not leave a station less than five minutes after the preceding train has departed. Unfortunately there is no assurance that such spacing will be retained as the trains move along the line so the flagman rear brakeman of a train slowing down or stopping will light and throw off a five minute red flare which may not be passed by the next train while lit. If a train has to stop a flagman trots back along the line with a red flag or lantern a sufficient distance to protect the train and remains there until the train is ready to move at which time he is called back to the train. A flare and two track torpedoes provide protection as the flagman scrambles back and the train resumes speed. While this type of system works it depends upon a series of human activities.

It is perfectly possible to operate a railroad safely without signals. The purpose of signal systems is not so much to increase safety as it is to step up the efficiency and capacity of the line in handling traffic. Nevertheless its convenient to discuss signal system principals in terms of three types of collisions that signals are designed to prevent namely rear end side on and head on.

Block signal systems prevent a train from ramming the train ahead of it by dividing the main line into segments otherwise known as blocks and allowing only one train in a block at a time with block signals indicating whether or not the block ahead is occupied. In many blocks the signals are set by a human operator. Before clearing the signal he must verify that any train which has previously entered the block is now clear of it a written record is kept of the status of each block and a prescribed procedure is used in communicating with the next operator. The degree to which a block frees up operation depends on whether distant signals as shown in are provided and on the spacing of open stations those in which an operator is on duty. If as is usually the case it is many miles to the next block station and thus trains must be equally spaced. Nevertheless manual block does afford a high degree of safety.

The block signaling which does the most for increasing line capacity is automatic block signals ABS in which the signals are controlled by the trains themselves. The presence or absence of a train is determined by a track circuit. Invented by Dr. William Robinson in 1872 the track circuit s key feature is that it is fail safe. As can be seen in if the battery or any wire connection fails or a rail is broken the relay can t pick up and a clear signal will not be displayed.

The track circuit is also an example of what is designated in railway signaling practice as a vital circuit one which can give an unsafe indication if some of its components malfunction in certain ways. The track circuit is fail safe but it could still give a false clear indication should its relay stick in the closed or picked up position. Vital circuit relays therefore are built to very stringent standards they are large devices rely on gravity no springs to drop their armature and use special non loading contacts which will not stick together if hit by a large surge of current such as nearby lightning .

Getting a track circuit to be absolutely reliable is not a simple matter. The electrical leakage between the rails is considerable and varies greatly with the seasons of the year and the weather. The joints and bolted rail track are by passed with bond wire to assure low resistance at all times but the total resistance still varies. It is lower for example when cold weather shrinks the rails and they pull tightly on the track bolts or when hot weather expands to force the ends tightly together. Battery voltage is typically limited to one or two volts requiring a fairly sensitive relay. Despite this the direct current track circuit can be adjusted to do an excellent job and false clears are extremely rare. The principal improvement in the basic circuit has been to use slowly pulsed DC so that the relay drops out and must be picked up again continually when a block is unoccupied. This allows the use of a more sensitive relay which will detect a train but additionally work in track circuits twice as long before leakage between the rails begins to threaten reliable relay operation. Referring to the situations determining the minimum block length for the standard two block three indication ABS system. Since the train may stop with its rear car just inside the rear boundary of a block a following train will first receive warning just one block length away. No allowance may be made for how far the signal indication may be seen by the engineer. Swivel block must be as long as the longest stopping distance for any train on the route traveling at its maximum authorized speed.

From this standpoint it is important to allow trains to move along without receiving any approach indications which will force them to slow down. This requires a train spacing of two block lengths twice the stopping distance since the signal can t clear until the train ahead is completely out of the second block. When fully loaded trains running at high speeds with their stopping distances block lengths must be long and it is not possible to get enough trains over the line to produce appropriate revenue.

The three block four indication signaling shown in reduces the excess train spacing by 50 . with warning two blocks to the rear and signal spacing need be only the braking distance. In particularly congested areas such as downgrades where stopping distances are long and trains are likely to bunch up four block four indication signaling may be provided and advanced approach approach medium approach and stop indications give a minimum of three block warning allowing further block shortening and keeps things moving.

Some of the systems that are currently developed by different railroads are shown in . With the general rules discussed below a railroad is free to establish the simplest and most easily maintained system of aspects and indications that will keep traffic moving safely and meet any special requirements due to geography traffic pattern or equipment. Aspects such as flashing yellow for approach medium for example may be used to provide an extra indication without an extra signal head. This is safe because a stuck flasher will result in either a steady yellow approach or a more restrictive light out aspect. In addition there are provisions for interlocking so the trains may branch from one track to another.

To take care of junctions where trains are diverted from one route to another the signals must control train speed. The train traveling straight through must be able to travel at full speed. Diverging routes will require some limit depending on the turnout members and the track curvature and the signals must control train speed to match. One approach is to have signals indicate which route has been set up and cleared for the train. In the American approach of speed signaling in which the signal indicates not where the train is going but rather what speed is allowed through the interlocking. If this is less than normal speed distant signals must also give warning so the train can be brought down to the speed in time. show typical signal aspects and indications as they would appear to an engineer. Once a route is established and the signal cleared route locking is used to insure that nothing can be changed to reduce the route s speed capability from the time the train approaching it is admitted to enter until it has cleared the last switch. Additional refinements to the basic system to speed up handling trains in rapid sequence include sectional route locking which unlocks portions of the route as soon as the train has cleared so that other routes can be set up promptly. Interlocking signals also function as block signals to provide rear end protection. In addition at isolated crossings at grade an automatic interlocking can respond to the approach of a train by clearing the route if there are no opposing movements cleared or in progress. Automatic interlocking returns everything to stop after the train has passed. As can be observed the movement of multiple trains among the track potentially involves a series of interconnected activities and decisions which must be performed by a controller such as a dispatcher. In essence for a railroad the dispatcher controls the operation of the trains and permissions may be set by computer control thereby controlling the railroad. Unfortunately if the dispatcher fails to obey the rules as put in place traffic collisions may occur.

In the context of a model railroad the controller is operating a model railroad layout including an extensive amount of track several locomotives trains and additional functionality such as switches. The movement of different objects such as locomotives and entire trains may be monitored by a set of sensors. The operator issues control commands from his computer console such as in the form of permissions and class warrants for the time and track used. In the existing monolithic computer systems for model railroads a single operator from a single terminal may control the system effectively. Unfortunately the present inventor has observed that in a multi user environment where several clients are attempting to simultaneously control the same model railroad layout using their terminals collisions periodically nevertheless occur. In addition significant delay is observed between the issuance of a command and its eventual execution. The present inventor has determined that unlike full scale railroads where the track is controlled by a single dispatcher the use of multiple dispatchers each having a different dispatcher console may result in conflicting information being sent to the railroad layout. In essence the system is designed as a computer control system to implement commands but in no manner can the dispatcher consoles control the actions of users. For example a user input may command that an event occur resulting in a crash. In addition a user may override the block permissions or class warrants for the time and track used thereby causing a collision. In addition two users may inadvertently send conflicting commands to the same or different trains thereby causing a collision. In such a system each user is not aware of the intent and actions of other users aside from any feedback that may be displayed on their terminal. Unfortunately the feedback to their dispatcher console may be delayed as the execution of commands issued by one or more users may take several seconds to several minutes to be executed.

One potential solution to the dilemma of managing several users attempt to simultaneously control a single model railroad layout is to develop a software program that is operating on the server which observes what is occurring. In the event that the software program determines that a collision is imminent a stop command is issued to the train overriding all other commands to avoid such a collision. However once the collision is avoided the user may if desired override such a command thereby restarting the train and causing a collision. Accordingly a software program that merely oversees the operation of track apart from the validation of commands to avoid imminent collisions is not a suitable solution for operating a model railroad in a multi user distributed environment. The present inventor determined that prior validation is important because of the delay in executing commands on the model railroad and the potential for conflicting commands. In addition a hardware throttle directly connected to the model railroad layout may override all such computer based commands thereby resulting in the collision. Also this implementation provides a suitable security model to use for validation of user actions.

Referring to the client program preferably includes a control panel which provides a graphical interface such as a personal computer with software thereon or a dedicated hardware source for computerized control of the model railroad . The graphical interface may take the form of those illustrated in or any other suitable command interface to provide control commands to the model railroad . Commands are issued by the client program to the controlling interface using the control panel . The commands are received from the different client programs by the controlling interface . The commands control the operation of the model railroad such as switches direction and locomotive throttle. Of particular importance is the throttle which is a state which persists for an indefinite period of time potentially resulting in collisions if not accurately monitored. The controlling interface accepts all of the commands and provides an acknowledgment to free up the communications transport for subsequent commands. The acknowledgment may take the form of a response indicating that the command was executed thereby updating the control panel . The response may be subject to updating if more data becomes available indicating the previous response is incorrect. In fact the command may have yet to be executed or verified by the controlling interface . After a command is received by the controlling interface the controlling interface passes the command in a modified manner if desired to a dispatcher controller . The dispatcher controller includes a rule based processor together with the layout of the railroad and the status of objects thereon. The objects may include properties such as speed location direction length of the train etc. The dispatcher controller processes each received command to determine if the execution of such a command would violate any of the rules together with the layout and status of objects thereon. If the command received is within the rules then the command may be passed to the model railroad for execution. If the received command violates the rules then the command may be rejected and an appropriate response is provided to update the clients display. If desired the invalid command may be modified in a suitable manner and still be provided to the model railroad . In addition if the dispatcher controller determines that an event should occur such as stopping a model locomotive it may issue the command and update the control panels accordingly. If necessary an update command is provided to the client program to show the update that occurred.

The asynchronous receipt of commands together with a synchronous manner of validation and execution of commands from the multiple control panels permits a simplified dispatcher controller to be used together with a minimization of computer resources such as corn ports. In essence commands are managed independently from the client program . Likewise a centralized dispatcher controller working in an off line mode increases the likelihood that a series of commands that are executed will not be conflicting resulting in an error. This permits multiple model railroad enthusiasts to control the same model railroad in a safe and efficient manner. Such concerns regarding the interrelationships between multiple dispatchers does not occur in a dedicated non distributed environment. When the command is received or validated all of the control panels of the client programs may likewise be updated to reflect the change. Alternatively the controlling interface may accept the command validate it quickly by the dispatcher controller and provide an acknowledgment to the client program . In this manner the client program will not require updating if the command is not valid. In a likewise manner when a command is valid the control panel of all client programs should be updated to show the status of the model railroad .

A manual throttle may likewise provide control over devices such as the locomotive on the model railroad . The commands issued by the manual throttle may be passed first to the dispatcher controller for validation in a similar manner to that of the client programs . Alternatively commands from the manual throttle may be directly passed to the model railroad without first being validated by the dispatcher controller . After execution of commands by the external devices a response will be provided to the controlling interface which in response may check the suitability of the command if desired. If the command violates the layout rules then a suitable correctional command is issued to the model railroad . If the command is valid then no correctional command is necessary. In either case the status of the model railroad is passed to the client programs control panels .

As it can be observed the event driven dispatcher controller maintains the current status of the model railroad so that accurate validation may be performed to minimize conflicting and potentially damaging commands. Depending on the particular implementation the control panel is updated in a suitable manner but in most cases the communication transport is freed up prior to execution of the command by the model railroad .

The computer dispatcher may also be distributed across the network if desired. In addition the computer architecture described herein supports different computer interfaces at the client program .

The terms and expressions which have been employed in the foregoing specification are used therein as terms of description and not of limitation and there is no intention in the use of such terms and expressions of excluding equivalents of the features shown and described or portions thereof it being recognized that the scope of the invention is defined and limited only by the claims which follow.

