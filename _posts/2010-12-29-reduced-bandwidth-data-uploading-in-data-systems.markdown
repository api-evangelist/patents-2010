---

title: Reduced bandwidth data uploading in data systems
abstract: Methods and apparatus for uploading data from a sender to a receiver. A data deduplication technique is described that may reduce the bandwidth used in uploading data from the sender to the receiver. In the technique, the receiver, rather than the sender, maintains a fingerprint dictionary for previously uploaded data. When a sender has additional data to be uploaded, the sender extracts fingerprints for units of the data and sends the fingerprints to the receiver. The receiver checks its fingerprint dictionary to determine the data units to be uploaded and notifies the sender of the identified units, which then sends the identified units of data to the receiver. The technique may, for example, be applied in virtualized data store systems to reduce bandwidth usage in uploading data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09116909&OS=09116909&RS=09116909
owner: Amazon Technologies, Inc.
number: 09116909
owner_city: Reno
owner_country: US
publication_date: 20101229
---
In many data systems broadly viewed a sender a data source uploads data to a receiver a data processor via a communications channel. An example of such a system is a data storage system however these data systems may include any system in which a receiver somehow processes data uploaded from a sender. The uploaded and processed data may include but is not limited to any type of textual graphical or image data audio data e.g. music and voice data video data compressed and or encrypted data and so on. In many such systems large amounts of data may need to be uploaded from the sender to the receiver via the communications channel. However communications channels generally have bandwidth constraints while a goal of such data systems is to get as much usable data across the communications channel to the receiver as possible.

Data deduplication refers to techniques for reducing or eliminating redundant data in such systems for example to improve storage utilization in a data storage system and or to reduce bandwidth usage on the communications channel. As an example in at least some data deduplication techniques applied to data storage systems the storage of duplicate data to a data store may be prevented. To achieve this units of data that already reside in the data store and or units of data that do not reside in the data store may be identified and only the units that do not reside in the data store are stored or updated in the data store. Data deduplication in this application may thus reduce required storage capacity since fewer or only one copy of a particular unit of data is retained.

One technique for data deduplication in data systems is to have the sender upload all data to be processed e.g. stored in a data storage system at the receiver and have the receiver identify units of data that are to be processed. However this technique does not reduce bandwidth usage between the sender and the receiver.

A conventional technique for data deduplication that may reduce bandwidth usage is to have the sender identify units of data to upload to the receiver only the identified units of data are uploaded from the sender to the receiver. illustrates a conventional deduplication technique in which a sender a data source identifies and uploads units of data to a receiver e.g. a data storage system . In this conventional deduplication technique the sender maintains data and locally stored fingerprints . Locally stored fingerprints may uniquely identify units of data that have been uploaded to data store . A fingerprint may for example be a hash of a unit of data . In block based data systems for example block storage systems a unit of data may for example be a 256 k byte portion of a data block a 1024 k byte portion of a data block or some other fixed or variable sized portion of a data block. In file based systems a unit of data may be a file or a portion of a file similar to the portions in a block based data system. When sender has data to be uploaded to receiver a data upload manager at sender may extract fingerprint s for units of the data to be uploaded and compare the extracted fingerprint s to locally stored fingerprints to identify one or more units of data that have not been uploaded to receiver or that have previously been uploaded but have since been modified locally . The data upload manger may then upload the identified data unit s to receiver which processes the data unit s for example by storing the data units to a data store.

While this technique may reduce the bandwidth used in uploading data from the sender to the receiver the technique requires the sender to maintain a dictionary of fingerprints . In many such systems a local store or cache of data maintained locally at sender may include many gigabytes or terabytes of data. Thus the dictionary of fingerprints that must be maintained by sender may be quite large. In addition in some systems a receiver may serve multiple senders and in these systems it is difficult to apply deduplication globally e.g. to consistently apply deduplication across data stored by the receiver for two or more data sources .

While embodiments are described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that embodiments are not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to.

Various embodiments of methods and apparatus for receiver side data deduplication are described. Embodiments of a data deduplication technique are described that may for example be applied in virtualized data store systems to reduce bandwidth usage on the communications channel between the sender and the receiver when compared to conventional data deduplication techniques. In embodiments of the data deduplication technique rather than the sender maintaining a fingerprint dictionary and determining data units to be uploaded to the receiver the receiver maintains the fingerprint dictionary. When a sender has data to be uploaded the sender extracts fingerprints for the data and sends the fingerprints to the receiver. The receiver checks its fingerprint dictionary to determine the data units to be uploaded to the receiver and notifies the sender which then sends the identified units of data to the receiver. Embodiments of the data deduplication technique thus reduce the bandwidth used in uploading data from the sender to the receiver as only the units that are not present in the data store are uploaded. In addition embodiments remove the requirement for the sender to maintain a large fingerprint dictionary and centralize data deduplication at the receiver thus allowing data deduplication to be applied across data stored for multiple data sources. A small tradeoff may be made in that latency in the upload process may be increased as the technique requires an extra round of communication between the sender and the receiver however latency is generally not a primary concern in the upload process.

While embodiments of the data deduplication technique are generally described herein in data storage system applications the data deduplication technique may be applied in any system in which a receiver receives data uploaded from a sender. The uploaded and processed data may include but is not limited to any type of textual graphical or image data audio data e.g. music or voice data video data compressed and or encrypted data and so on. In addition while embodiments are generally described herein in terms of a sender and a receiver that are remotely located and communicate via a wired and or wireless network such as the Internet the data deduplication technique may also be applied in applications where the sender and receiver are local devices that communicate for example via a wired or wireless local network or direct link as well as applications where the sender and receiver are hardware and or software components within a single device or system that communicate via an internal communications channel such as a data bus direct data link shared memory transfer or wireless communications channel.

Receiver data upload manager may store and manage fingerprints for data for example for data stored in a data store in a fingerprint dictionary . In at least some embodiments a fingerprint may be a hash of a unit of data. In block based data systems also referred to as block storage systems a unit of data may for example be a 256 k byte portion of a data block a 1024 k byte portion of a data block or some other fixed or variable sized portion of a data block. In file based systems a unit of data may be a file or a portion of a file similar to the portions in a block based data system. In at least some embodiments a fingerprint may be any type of cryptographically strong one way hash function for example a Secure Hash Algorithm SHA 256 hash function. The use of a cryptographically strong one way hash function provides security and helps to avoid collisions as collisions using such a hash function are highly unlikely. A collision is when two units of data produce the same fingerprint.

Fingerprint dictionary may reside on a single system or may be distributed across two or more systems for example two or more server systems. In some embodiments fingerprint dictionary may be implemented and maintained as a consistent hash dictionary spread across two or more servers. In at least some embodiments fingerprint dictionary may be a fixed size dictionary.

In at least some embodiments receiver data upload manager may maintain fingerprints for multiple customers in a single fingerprint dictionary . A customer is the owner of a particular collection of data and may be an individual an enterprise or a division department office or other entity within an enterprise. In some embodiments each customer may be assigned a unique customer identifier that may be appended to or otherwise associated with fingerprints for the respective customer s data. Alternatively receiver data upload manager may maintain a separate fingerprint dictionary for each customer.

Sender data upload manager may act as an interface between sender and receiver data upload manager . Sender data upload manager may be implemented in hardware software or a combination thereof. The communications channel s between sender data upload manager and receiver data upload manager may be a relatively high bandwidth connection or communications channel as large amounts of data may need to be transferred across the network e.g. the Internet between sender data upload manager and receiver data upload manager .

Sender may locally cache store or obtain at least some data while receiver may be a primary store or destination for the data. For example to improve data access times for users rather than retrieving data from a data store maintained by receiver on demand large blocks or chunks of data even entire volumes of data may be locally cached or stored at sender as local data . Sender may include physical data storage and or memory on which local data may be cached or stored. However the data store maintained by receiver may serve as the primary data store for the customer thus sender data upload manager communicates with receiver data upload manager to periodically aperiodically or continuously upload new or modified data in local data to the data store.

Sender data upload manager may in at least some embodiments maintain local data in relatively large blocks e.g. 4 megabyte blocks or 10 megabyte blocks although larger or smaller block sizes may be used. When a block of data is accessed by a user or process e.g. to create new data or modify existing data the block may be marked as dirty. However the access may have changed only a small portion of the block. Thus as shown in the sender data upload manager may generate fingerprints for units of the dirty block for example by applying a hash function to each unit. In block based data systems for example block storage systems a unit of data may for example be a 256 k byte portion of a data block a 1024 k byte portion of a data block or some other fixed or variable sized portion of a data block. In file based systems a unit of data may be a file or a portion of a file similar to the portions in a block based data system. As shown in the sender data upload manager may send the fingerprints that were generated for the dirty block to the receiver data upload manager .

In the receiver data upload manager may search the fingerprint dictionary for matches to the fingerprints received from the sender data upload manager . The search may be performed according to a search function implemented or accessed by receiver data upload manager one of ordinary skill in the art will recognize that any of a variety of search techniques may be used. As previously mentioned in some embodiments a unique identifier for the respective customer may be used to distinguish these fingerprints from those of other customers to avoid collisions either by searching a fingerprint dictionary specific to the respective customer or by searching a common fingerprint dictionary for all customers for fingerprints that are indicated by the unique identifier as belonging to the respective customer. Fingerprints that are found in the fingerprint dictionary do not need to be uploaded as their presence in the dictionary indicates that the corresponding unit of data exists at receiver for example the unit of data is stored in a data store . Fingerprints that are not found in the fingerprint dictionary do need to be uploaded as their absence from the dictionary indicates that the corresponding unit of data does not exist at receiver for example the unit of data is not stored in the data store or that the corresponding unit of data has been changed at the sender and needs to be replaced or updated.

Note that if the entire block of data for which the fingerprints were generated is a newly created block of data it may be the case that none of the fingerprints will be found in the fingerprint dictionary and thus all of the corresponding units need to be uploaded to the receiver . However some or all of the fingerprints may be found in the fingerprint dictionary if the same units of data exist in other previously uploaded blocks for the customer and thus at least some of the corresponding units may not need to be uploaded to the receiver . In other words two or more blocks of data may share at least some common units at the receiver for example in a data store.

In the example shown in fingerprint C has been identified as corresponding to a unit of data that needs to be uploaded i.e. fingerprint C was not located in fingerprint dictionary . Receiver data upload manager may then send a data unit identifier for the data unit corresponding to fingerprint C i.e. data unit C to the sender data upload manager . In some embodiments the data unit identifier s may be the respective fingerprint s in this example fingerprint C. Other methods may be used to identify data units that need to be uploaded for example a block number unit number indexing scheme may be used to identify data units that need to be uploaded in some embodiments or a bit field scheme may be used in which one or more bits in a bit map are set to indicate either data units that need to be uploaded or data units that do not need to be uploaded. In some embodiments the data unit identifier s sent to sender data upload manager by receiver data upload manager may indicate the data unit s that do not need to uploaded rather than the data unit s that do need to be uploaded. In some embodiments to reduce bandwidth usage receiver data upload manager may send data unit identifier s that indicate either the set of data unit s that do not need to uploaded or the set of data unit s that do need to be uploaded depending on which set is the smallest. Information may be included for example in a header that indicates whether the identifier s sent to sender data upload manager are for data unit s that do or that do not need to be uploaded.

In the identified data unit C is uploaded by sender data upload manager to receiver data upload manager . Note that only the identified data unit s from a dirty block are uploaded the entire block is not uploaded unless it is the case that all of the data units of the block have been identified by the receiver data upload manager as needing to be uploaded. shows an upload handler or process of receiver data upload manager that receives uploaded data unit s and forwards the received data units s to a data processing function for further processing. For example in a data storage system data processing function may store the uploaded data unit C to a data store. In a data storage system the data processing function may add an uploaded data unit as a new data unit in the data store or may replace or update an existing data unit in the data store with an uploaded data unit.

In some embodiments identified data units may be compressed by sender data upload manager before uploading the data units to receiver data upload manager to further reduce bandwidth usage on the communications channel. In some embodiments sender data upload manager may determine if the compressed version of a given data unit is smaller than the uncompressed version by some threshold amount or percentage and upload the compressed version if it is or the uncompressed version if it is not. Compressed data units received at the sender data upload manager may be but are not necessarily decompressed before processing .

As previously noted in at least some embodiments fingerprint dictionary may be a fixed size dictionary. Thus in some embodiments fingerprint dictionary may not have room to store fingerprints corresponding to all data units that have been received by receiver . For example in a data storage system fingerprint dictionary may not store fingerprints for all data units stored in the data store. Thus in these embodiments receiver may implement one or more dictionary maintenance functions that periodically or as necessary purge delete or replace fingerprints for example stale or least recently used LRU fingerprints . Thus it is possible that one or more of the fingerprints that the receiver data upload manager determines are in the dictionary in response to receiving the fingerprints from sender get purged by a dictionary maintenance function before the exchange between sender and receiver in the data deduplication technique is completed. Thus in some embodiments after receiving data unit s from sender data upload manager as shown in receiver data upload manager may check the received data unit s against the fingerprint dictionary to determine if any data units are missing that is to determine if any fingerprints that receiver data upload manager initially determined were in the dictionary see are no longer in the dictionary and thus the corresponding data units are needed to complete the transaction. In some embodiment if receiver data upload manager determines that additional data units are needed to complete the transaction the transaction may be restarted that is receiver data upload manager may request a new list of fingerprints from sender data upload manager . However since both receiver data upload manager and sender data upload manager already have state information for the transaction in some embodiments this state information may be leveraged to save bandwidth. In these embodiments receiver data upload manager may as an additional step in the transaction send data unit identifier s to sender data upload manager to request only the data units that are missing that is only the data units for which the fingerprints were purged during the transaction.

The process described above in reference to the data system of may be a continuing process. That is sender may continue to check dirty blocks of data generate fingerprints for the data units in the blocks send the fingerprints to receiver receive back indications of units of data to be uploaded and upload the indicated units of data to receiver . Receiver maintains the fingerprint dictionary to reflect the current state of data at the receiver and forwards the received data unit s to a data processing function which for example stores or updates data blocks in a data store according to the data units received from sender s .

Embodiments of the data deduplication technique may be applied in any data system that includes a sender data source and receiver data store as generally described to reduce upload bandwidth usage while moving the data deduplication tasks of maintaining a fingerprint dictionary and checking the dictionary to determine units of data to be uploaded from the sender to the receiver including but not limited to any data storage system. However embodiments of the data deduplication technique are described herein in the context of a virtualized data store system that includes a virtualized data store provider that provides over a network such as the Internet a virtualized data store to one or more virtual data store clients. The following section describes embodiments of a virtualized data store system including embodiments that provide a virtualized data store service on the provider side and a virtualized data store gateway on the client side. The section also describes embodiments of a virtualized service provider that provides a hardware virtualization service as well as a virtualized data store service to customers.

Data clients A B represent physical and or virtual machines or systems connected to the local network of a virtualized data store customer . A user via a data client may create and mount data volumes in virtualized data store via virtualized data store service . From the perspective of users on virtualized data store customer the data volumes provided by virtualized data store service appear as if they are local storage hence such a data volume may be referred to as a virtual data volume . A virtual data volume actually maps to one or more physical storage devices or storage systems on which virtualized data store is instantiated however this mapping is handled by the virtualized data store service and is thus transparent from the perspective virtualized data store customer . The user on the data client may simply see a volume mounted on the desktop or in a device listing. The user on the data client may create data modify data delete data and in general perform any data related function on virtual data volume just as if the volume was implemented on a locally attached storage device.

Virtualized data store customer may communicate with virtualized data store service via global network to upload data to and download data from virtualized data store . is a block diagram of a virtualized data store system that includes a virtualized data store gateway at virtualized data store customer that serves as an interface between virtualized data store customer and virtualized data store service according to at least some embodiments.

In at least some embodiments virtualized data store gateway may be a file and block storage appliance that is installed on site at a virtualized data store customer s data center. Virtualized data store gateway stores a local cache of frequently accessed data while securely encrypting and accelerating data movement back to virtualized data store provider . This accelerated data movement as compared to a standard Internet connection may be achieved using data deduplication compression parallelization and TCP window scaling. Virtualized data store gateway may significantly reduce the cost utilization maintenance and provisioning headaches that are typically associated with managing on site storage arrays. Virtualized data store gateway may accomplish this by replacing the 100s of terabytes to petabytes of data a customer may otherwise store in house on expensive NAS and SAN hardware with a cost effective appliance. With the virtualized data store gateway customers may benefit from the low access latencies of on site storage provided by the local cache provided by the gateway while leveraging the durable available and scalable cloud storage infrastructure provided by the virtualized data store provider .

Embodiments of the virtualized data store gateway may work seamlessly with customers on site applications. In at least some embodiments customers may configure the virtualized data store gateway to support SAN iSCSI NAS NFS Microsoft CIFS or Object REST storage. In at least some embodiments an iSCSI interface provided by the virtualized data store gateway enables integration with on site block storage applications such as Microsoft SharePoint . In at least some embodiments customers may utilize NFS and CIFS interfaces provided by the virtualized data store gateway to consolidate file storage across environments including but not limited to Windows Linux and UNIX environments. In at least some embodiments the virtualized data store gateway may also be configured to support REST based requests.

Virtualized data store gateway may be implemented in hardware software or a combination thereof. Some embodiments of virtualized data store gateway may be implemented as a dedicated device or appliance that couples to a local network of virtualized data store customer and also couples to global network e.g. the Internet the device or appliance may include software and or hardware that performs various functionality of the gateway . Alternatively virtualized data store gateway may be implemented as a virtual device or appliance on one or more server systems at the virtualized data store customer data center.

The coupling of virtualized data store gateway to global network will generally be via a high bandwidth connection provided by the virtualized data store customer as large amounts of data may be transferred across global network between virtualized data store service and virtualized data store gateway . For example at peak times the connection may need to support the transfer of data at rates of 100 megabits second 100 Mbit s or higher. However the data deduplication technique described herein reduces bandwidth usage when uploading data from virtualized data store gateway to virtualized data store service and thus more of the connection s bandwidth may be available for other applications.

In at least some embodiments bandwidth on a connection may be allocated to virtualized data store gateway and to other customer applications for example via a console at virtualized data store customer . Virtualized data store gateway may continuously or nearly continuously upload mutated new or changed data to virtualized data store service according to the data deduplication technique described herein. However the mutation rate of data at customer may vary over time for example during the day the mutation rate may be higher while at night the mutation rate may drop. Thus at busy times when the mutation rate is high virtualized data store gateway may fall behind in uploading the mutated data if the bandwidth allocated to the virtualized data store gateway is not high enough to keep up virtualized data store gateway may then catch up at less busy times when the mutation rate is not as high. In at least some embodiments if the virtualized data store gateway falls behind more than a specified threshold the virtualized data store gateway may request the allocation of additional bandwidth. In at least some embodiments the virtualized data store gateway may raise an alarm to demand more bandwidth if necessary. At times when the virtualized data store gateway has more bandwidth than necessary for example during less busy times when the virtualized data store gateway has more bandwidth than is needed to keep up with the mutation rate the virtualized data store gateway may release some bandwidth back to the customer so that the bandwidth can be used for other applications.

In some embodiments rather than retrieving data from virtualized data store on demand large blocks or chunks of data even entire volumes of data may be locally cached. Virtualized data store gateway may include physical data storage and or memory on which a local cache of data for example frequently accessed data or critical data may be maintained. Local cache may be implemented in volatile or non volatile storage or memory or a combination thereof.

Maintaining a local cache may generally improve data access times for users on data clients since many or most data accesses can be serviced from the local cache rather than retrieving the data from virtualized data store . However virtualized data store serves as the primary data store for the virtualized data store customer thus virtualized data store gateway communicates with virtualized data store service via global network to periodically aperiodically or continuously upload new or modified data in local cache to virtualized data store and to download requested data from virtualized data store when necessary.

In storage A B C . . . of virtualized data store illustrates that the virtualized data store may be implemented on or across several storage devices or systems connected to a local network of virtualized data store provider . Thus a virtualized data store customer s data may be spread across two or more physical storage devices or systems on the back end. However as noted in reference to from the perspective of the virtualized data store customer the client s data are presented to the client as virtual volumes or storage devices.

In some embodiments a virtualized data store system as described in reference to may be implemented as part of a general virtualized service that also provides hardware virtualization technologies and other virtualized storage technologies. The virtualized service may provide a range of virtualized computing technology and virtualized storage technology including virtualized block level storage technology that provides virtualized block level storage capabilities i.e. a block based storage system to customers. Virtual computing environments or systems implemented according to the hardware virtualization technology provided by the virtualized service provider may be supported by the virtualized block level storage technology. The virtualized block level storage technology may provide a virtual storage system that is able to interact with virtual computing systems through standardized storage calls that render the block level storage functionally agnostic to the structural and functional details of the volumes that it supports and to the operating systems executing on the virtual computing systems or other systems to which it provides storage availability.

In addition to integrating with on site customer applications the virtualized data store gateway may also integrate with the virtualized computing technology and virtualized storage technology provided by virtualized service provider providing customers with access to elastic cloud based computing and storage resources. For example customers using the virtualized data store gateway for SAN storage may create consistent point in time snapshots of their block storage data accessible from the virtualized block level storage technology. These snapshots may then be processed by hardware virtualization technology applications or instances see e.g. virtual computing system s in requiring the high I O and low latency data access that the virtualized block level storage technology provides. As another example customers may configure the virtualized data store gateway for NAS storage via NFS or CIFS file protocols and may create point in time snapshots of their file data accessible from hardware virtualization technology instances.

In some embodiments objects written using a REST based interface provided by virtualized data store gateway may be accessed directly from virtualized storage technology provided by the virtualized service provider via HTTP or other protocols or may be distributed using integrated content delivery technology provided by the virtualized service provider. In some embodiments customers may also utilize highly scalable distributed infrastructure provided by the virtualized storage technology for parallelized processing of these objects on hardware virtualization technology instances.

Hardware virtualization technology enables multiple operating systems to run concurrently on a host computer i.e. as virtual machines VMs on the host . The VMs may for example be rented or leased to customers of the virtualized service provider e.g. to virtualized service customer . A hypervisor or virtual machine monitor VMM on a host presents the VMs on the host with a virtual platform and monitors the execution of the VMs . Each VM may be provided with one or more IP addresses the VMM on a host may be aware of the IP addresses of the VMs on the host. A local network of virtualized service provider may be configured to route packets from the VMs to Internet destinations e.g. to service client s of virtualized service customer and from Internet sources e.g. service client s to the VMs .

Virtualized service provider may provide virtual service customer coupled to global network via local network the ability to implement virtual computing systems via a hardware virtualization service coupled to global network and to the local network of virtualized service provider . In some embodiments hardware virtualization service may provide an interface for example a web services interface via which service client may access functionality provided by the hardware virtualization service . At the virtual service provider each virtual computing system may represent a virtual machine VM on a host system that is leased rented or otherwise provided to virtual service customer .

From an instance of a virtual computing system a user may access the functionality of virtualized data store service as previously described. Thus embodiments of a virtualized system as illustrated in may allow a client to create local instances of virtual computing systems implemented on VMs provided by the a virtualized system provider and to access data from and store data to a virtual data store implemented by the virtualized system provider from the local instances of the virtual computing systems. As previously described a virtualized data store gateway may be provided at the virtualized service client that locally caches at least some data for example frequently accessed or critical data and that communicates with virtualized data store service via one or more high bandwidth communications channels to upload new or modified data from the local cache so that the primary store of data the virtualized data store is maintained.

Embodiments of a data deduplication technique are described that may for example be applied in virtualized data store systems as described above to reduce or eliminate redundant data in virtualized data stores. In embodiments of the data deduplication technique instead of maintaining a fingerprint dictionary and determining data units to be uploaded to the virtualized data store at the virtualized data store customer the sender the fingerprint dictionary is maintained at the virtualized data store provider the receiver and determining data units to be uploaded is performed at the virtualized data store provider.

Virtualized data store service may store fingerprints for data stored in virtualized data store in a fingerprint dictionary . In at least some embodiments a fingerprint may be a hash of a unit of data . In at least some embodiments a fingerprint may be any type of cryptographically strong one way hash function for example a Secure Hash Algorithm SHA 256 hash function. The use of a cryptographically strong one way hash function provides security and helps to avoid collisions as collisions using such a hash function are highly unlikely. A collision is when two units of data produce the same fingerprint. In block based data systems also referred to as block storage systems a unit of data may for example be a 256 k byte portion of a data block a 1024 k byte portion of a data block or some other fixed or variable sized portion of a data block. In file based systems a unit of data may be a file or a portion of a file similar to the portions in a block based data system.

Fingerprint dictionary may reside on a single system or may be distributed across two or more systems for example two or more server systems. In some embodiments fingerprint dictionary may be implemented and maintained as a consistent hash dictionary spread across two or more servers at virtualized data store service . In at least some embodiments fingerprint dictionary may be a fixed size dictionary.

In at least some embodiments virtualized data store service may maintain fingerprints for multiple customers in a single fingerprint dictionary . A customer is the owner of a particular collection of data and may be an individual an enterprise or a division department office or other entity within an enterprise. In some embodiments each customer may be assigned a unique client identifier that may be appended to or otherwise associated with fingerprints for the respective customer s data. Alternatively virtualized data store service may maintain a separate fingerprint dictionary for each customer .

Virtualized data store gateway may act as an interface between virtualized data store customer and virtualized data store service . Virtualized data store gateway may be implemented in hardware software or a combination thereof. Some embodiments of virtualized data store gateway may be implemented as a dedicated device or appliance at virtualized data store customer that couples to a local network of virtualized data store customer and also couples to a global network such as the Internet the device or appliance may include software and or hardware that performs various functionality of the gateway . Alternatively virtualized data store gateway may be implemented as a virtual device or appliance on one or more server systems at the virtualized data store customer data center. The coupling to the global network will generally be a high bandwidth connection as large amounts of data may need to be transferred across the global network between virtualized data store service and virtualized data store gateway .

Rather than retrieving data from virtualized data store on demand large blocks or chunks of data even entire volumes of data may be locally cached by virtualized data store gateway . Virtualized data store gateway may include physical data storage and or memory on which a local cache of data for example frequently accessed data or critical data may be maintained. Local cache may be implemented in volatile or non volatile storage or memory or a combination thereof. Maintaining a local cache of data may generally improve data access times for virtualized data store customer users since many or most data accesses can be serviced from the local cache rather than retrieving the data from virtualized data store at each access. However virtualized data store serves as the primary data store for the virtualized data store customer thus virtualized data store gateway communicates with virtualized data store service via the global network to periodically aperiodically or continuously upload new or modified data in local cache to virtualized data store .

Virtualized data store gateway may in at least some embodiments maintain cached data in relatively large blocks e.g. 4 megabyte blocks or 10 megabyte blocks although larger or smaller block sizes may be used. When a block of data is accessed by a user or process e.g. to create new data or modify existing data the block may be marked as dirty. However the access may have changed only a small portion of the block. Thus as shown in the virtualized data store gateway may generate fingerprints for units of the dirty block for example by applying a hash function to each unit. In block based data systems also referred to as block storage systems a unit of data may for example be a 256 k byte portion of a data block a 1024 k byte portion of a data block or some other fixed or variable sized portion of a data block. In file based systems a unit of data may be a file or a portion of a file similar to the portions in a block based data system. 

In the virtualized data store gateway may send the fingerprints that were generated for the dirty block to the virtualized data store service .

In the virtualized data store service may search the fingerprint dictionary for matches to the fingerprints received from the virtualized data store gateway . The search may be performed according to a search function implemented by virtualized data store service one of ordinary skill in the art will recognize that any of a variety of search techniques may be used. As previously mentioned in some embodiments a unique identifier for the customer may be used to distinguish these fingerprints from those of other customers to avoid collisions either by searching a fingerprint dictionary specific to the respective customer or by searching a common fingerprint dictionary for all customers for fingerprints that are indicated by the unique identifier as belonging to the respective customer . Fingerprints that are found in the fingerprint dictionary do not need to be uploaded as their presence in the dictionary indicates that the corresponding unit of data exists in virtualized data store . Fingerprints that are not found in the fingerprint dictionary do need to be uploaded as their absence from the dictionary indicates that the corresponding unit of data does not exist in virtualized data store or that the corresponding unit of data has been changed and needs to be replaced or updated.

Note that if the entire block of data for which the fingerprints were generated is a newly created block of data it may be the case that none of the fingerprints will be found in the fingerprint dictionary and thus all of the corresponding units need to be uploaded to the virtualized data store . However some or all of the fingerprints may be found in the fingerprint dictionary if the same units of data exist in other previously uploaded blocks for the customer and thus at least some of the corresponding units may not need to be uploaded to the virtualized data store . In other words two or more blocks of data may share at least some common units in the virtualized data store .

In virtualized data store service returns data unit identifier s for data units that have been identified as dirty that is units of data from the data block that need to be uploaded to the virtualized data store to the virtualized data store gateway . In some embodiments the data unit identifiers may be the respective fingerprint s of the data units. Other methods may be used to identify data units that need to be uploaded for example a block number unit number indexing scheme may be used to identify data units that need to be uploaded in some embodiments. In some embodiments a bit field scheme may be used in which one or more bits in a bit map are set to indicate either data units that need to be uploaded or data units that do not need to be uploaded. In some embodiments the data unit identifier s sent to virtualized data store gateway by virtualized data store service may indicate the data unit s that do not need to uploaded rather than the data unit s that do need to be uploaded. In some embodiments to reduce bandwidth usage virtualized data store service may send data unit identifier s that indicate either the set of data unit s that do not need to uploaded or the set of data unit s that do need to be uploaded depending on which set is the smallest. Information may be included for example in a header that indicates whether the identifier s sent to virtualized data store gateway are for data unit s that do or that do not need to be uploaded.

In the identified data unit s are uploaded from the virtualized data store gateway to the virtualized data store service . Note that only the identified data unit s from a dirty block are uploaded the entire block is not uploaded unless it is the case that all of the data units of the block have been identified by the virtualized data store service as dirty. 

In the virtualized data store service stores the identified data unit s to the virtualized data store . Note that the virtualized data store service may add a given identified data unit as a new data unit in virtualized data store or may replace or update an existing data unit in virtualized data store with a given identified data unit .

In some embodiments identified data units may be compressed by virtualized data store gateway before uploading the data units to the virtualized data store service to further reduce bandwidth usage on the communications channel. In some embodiments virtualized data store gateway may determine if the compressed version of a given data unit is smaller than the uncompressed version by some threshold amount or percentage and upload the compressed version if it is or the uncompressed version if it is not. Compressed data units uploaded to the virtualized data store service may be but are not necessarily decompressed before storing to the virtualized data store .

As previously noted in at least some embodiments fingerprint dictionary may be a fixed size dictionary. Thus in some embodiments fingerprint dictionary may not store fingerprints for all data units stored in the virtualized data store . Thus in these embodiments virtualized data store service may implement one or more dictionary maintenance functions that periodically or as necessary purge delete or replace fingerprints for example stale or least recently used LRU fingerprints . Thus it is possible that one or more of the fingerprints that the virtualized data store service determines are in the dictionary in response to receiving the fingerprints from virtualized data store gateway get purged by a dictionary maintenance function before the exchange in the data deduplication technique is completed. Thus in some embodiments after receiving data unit s from virtualized data store gateway as shown in virtualized data store service may check the received data unit s against the fingerprint dictionary to determine if any data units are missing that is to determine if any fingerprints that virtualized data store service initially determined were in the dictionary see are no longer in the dictionary and thus the corresponding data units are needed to complete the transaction. In some embodiment if virtualized data store service determines that additional data units are needed to complete the transaction the transaction may be restarted that is virtualized data store service may request a new list of fingerprints from virtualized data store gateway . However since both virtualized data store service and virtualized data store gateway already have state information for the transaction in some embodiments this state information may be leveraged to save bandwidth. In these embodiments virtualized data store service may as an additional step in the transaction send data unit identifier s to virtualized data store gateway to request only the data units that are missing that is only the data units for which the fingerprints were purged during the transaction.

The process described above in reference to the virtualized data store system of may be a continuing process. That is virtualized data store gateway may continue to check dirty blocks of data generate fingerprints for the data units in the blocks send the fingerprints to virtualized data store service receive back indications of units of data to be uploaded and upload the indicated units of data to virtualized data store service . Virtualized data store service maintains the fingerprint dictionary to reflect the current state of virtualized data store and stores or updates data blocks in virtualized data store according to the data units received from virtualized data store gateway s .

As indicated at a user or users may instantiate data volume s on the virtualized data store gateway. At the customer generates or modifies data in the volume s on the virtualized data store gateway. For example a user on a client device may create a volume from a client device mount the volume on the desktop of the client device and create new data on the volume from the client device.

As indicated at the virtualized data store gateway uploads new or modified data i.e. dirty data to the virtualized data store via the virtualized data store service. The uploading of data is performed according to the data deduplication technique for example as illustrated in so that the virtualized data store service stores maintains and checks the fingerprint dictionary and only units of data that need to be uploaded to the virtualized data store are sent to the virtualized data store service. The modification and data deduplication processing of data blocks and uploading of data units may be a continuing process that is the virtualized data store gateway may continue to process dirty blocks of data and upload units of data from the blocks to the virtualized data store via the virtualized data store service according to the data deduplication technique.

In at least some embodiments the fingerprint dictionary may be a fixed size dictionary. In these embodiments the virtualized data store service may implement one or more dictionary maintenance functions that periodically or as necessary purge delete or replace fingerprints. Thus it is possible that one or more of the fingerprints that the virtualized data store service determines are in the dictionary as indicated at of in response to receiving the fingerprints from the virtualized data store gateway as indicated at of get purged by a dictionary maintenance function before the exchange in the data deduplication technique is completed. Thus in some embodiments after receiving data unit s from the virtualized data store gateway the virtualized data store service may check the received data unit s against the fingerprint dictionary to determine if any fingerprints that the virtualized data store service initially determined were in the dictionary are no longer in the dictionary and thus may determine that the corresponding data units are needed to complete the transaction. In some embodiment if the virtualized data store service determines that additional data units are needed to complete the transaction the virtualized data store service may request a new list of fingerprints from virtualized data store gateway to restart the process. However since both the virtualized data store service and the virtualized data store gateway already have state information for the transaction in some embodiments this state information may be leveraged to save bandwidth. In these embodiments the virtualized data store service may as an additional step in the method send data unit identifier s to the virtualized data store gateway to request only the data units that are missing that is only the data units for which the fingerprints were purged during the transaction. The virtualized data store gateway may then upload the additionally requested data units and the virtualized data store service may process the additional data units accordingly.

In at least some embodiments a server that implements a portion or all of one or more of the technologies including but not limited to the data storage system technologies and data deduplication technologies as described herein may include a general purpose computer system that includes or is configured to access one or more computer accessible media such as computer system illustrated in . In the illustrated embodiment computer system includes one or more processors coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface .

In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store instructions and data accessible by processor s . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing one or more desired functions such as those methods techniques and data described above for data storage system technologies and data deduplication technologies are shown stored within system memory as code and data .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network or networks such as other computer systems or devices as illustrated in for example. In various embodiments network interface may support communication via any suitable wired or wireless general data networks such as types of Ethernet network for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

In some embodiments system memory may be one embodiment of a computer accessible medium configured to store program instructions and data as described above for for implementing embodiments of data storage system technologies and data deduplication technologies. However in other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media. Generally speaking a computer accessible medium may include non transitory storage media or memory media such as magnetic or optical media e.g. disk or DVD CD coupled to computer system via I O interface . A non transitory computer accessible storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc that may be included in some embodiments of computer system as system memory or another type of memory. Further a computer accessible medium may include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface .

Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium. Generally speaking a computer accessible medium may include storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM etc. ROM etc as well as transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as network and or a wireless link.

The various methods as illustrated in the Figures and described herein represent exemplary embodiments of methods. The methods may be implemented in software hardware or a combination thereof. The order of method may be changed and various elements may be added reordered combined omitted modified etc.

Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended to embrace all such modifications and changes and accordingly the above description to be regarded in an illustrative rather than a restrictive sense.

