---

title: CPU platform interface method and device for synchronizing a stream of motion codes with a video stream
abstract: The present document describes a CPU platform interface method and device for synchronizing a stream of motion codes with a video stream. The method and device use the video stream time stamps and movie identity information from the software movie player along with the CPU time clock to fill a queue of motion code frames and determine when the frames will be sent as a motion stream to one or more actuators of a motion platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08390739&OS=08390739&RS=08390739
owner: D-Box Technologies Inc.
number: 08390739
owner_city: Longueuil QC
owner_country: CA
publication_date: 20100108
---
This description relates to the field of video e.g. movie or audio stream playback. More particularly this description relates to methods and devices for playing motion codes synchronously with the movie or video stream.

The present document describes a CPU platform interface method and device for synchronizing a stream of motion codes with a video stream. The method and device use the video stream time stamps and movie identity information from the software movie player along with the CPU time clock to fill a queue of motion code frames and determine which frames will be sent as a motion stream to one or more actuators of a motion platform.

According to an aspect of the invention there is provided a method embodied in a Central Processing Unit CPU platform having a clock. The method is for interfacing a software movie player for playing a video stream having a speed ratio and a motion service in order to synchronously play the video stream on a video display and motion code frames corresponding to the video stream on an actuator of a motion platform. The method comprises receiving video stream time stamps indicative of elapsed nominal time from the start of the video stream receiving a clock value from the clock the clock value having a higher frequency than a frequency corresponding to the period between two video stream time stamps determining a time difference between the clock value at present and the clock value corresponding to a current video stream time stamp receiving a queue status value indicative of a queue status of a queue comprising motion code frames for the actuator the queue status value being representative of a duration for playing the motion code frames in the queue namely a queue duration determining a clock duration value by adding the queue duration to the time difference determining a nominal duration value by converting the clock duration value given the speed ratio determining a future time value indicative of an elapsed nominal time from the start of the video stream when last motion code frame of the queue will be played by adding the nominal duration to the current video stream time stamp receiving an identity of the video stream using the identity accessing a file comprising the motion code frames for the video stream filling the queue with the motion code frames in the order in which they must be played on the actuator of the motion platform after the future time value and outputting the motion code frames as a motion stream using the motion service.

According to another aspect of the invention there is provided a motion code manager installed on a Central Processing Unit CPU platform having a clock. The motion code manager being for interfacing a software movie player for playing a video stream having a speed ratio and a motion service in order to synchronously play the video stream on a video display and motion code frames corresponding to the video stream on an actuator of a motion platform. The motion code manager comprises a motion source manager for receiving an identity of the video stream and for accessing a file comprising the motion code frames for the video stream and a synchronizer. The synchronizer is for receiving video stream time stamps indicative of elapsed nominal time from the start of the video stream receiving a clock value from the clock the clock value having a higher frequency than a frequency corresponding to the period between two video stream time stamps receiving a queue status value indicative of a queue status of a queue comprising motion code frames for the actuator the queue status value being representative of a duration for playing the motion code frames in the queue namely a queue duration determining a time difference between the clock value at present and the clock value corresponding to a current video stream time stamp determining a clock duration value by adding the queue duration to the time difference determining a nominal duration value by converting the clock duration value given the speed ratio determining a future time value indicative of an elapsed nominal time from the start of the video stream when last motion code frame of the queue will be played by adding the nominal duration to the current video stream time stamp and filling the queue with the motion code frames in the order in which they must be played on the actuator of the motion platform after the future time value. The motion service outputs the motions code frames as a motion stream.

According to another aspect of the invention there is provided a self contained USB audio stream to motion stream on RJ45 converter comprising a single USB input and a single RJ45 output.

It will be noted that throughout the appended drawings like features are identified by like reference numerals.

Referring now to the drawings and more particularly to a block diagram illustrates an embodiment of the invention operated by a Central Processing Unit CPU platform having a clock not shown. The CPU platform is configured for sending synchronously a video stream to a video device an audio stream to an audio device and a motion stream to a motion platform according to video codes audio codes and motion codes located on at least one of a local repository e.g. a hard disk a removable medium e.g. a DVD a Blue Ray a USB Key etc. and a remote repository e.g. Internet Ethernet etc. .

Usually video codes and audio codes are on the same medium. A usual software movie player gets video codes and audio codes generates a video stream and an audio stream synchronizes them and sends the video stream to the video device via a video service module and the audio stream to the audio device via an audio service module simultaneously.

A motion code manager receives motion codes from one of the local repository the removable medium via a medium reader and the remote repository . The motion codes could be on the same medium as the video codes and audio codes or on a different medium location e.g. video codes and audio codes can be burned on a DVD while motion codes are available by Internet . The motion code manager receives a synchronization stream synchronously with the video stream and the audio stream from the software movie player .

Motion codes comprise indications of position of each actuator of the motion platform at each fixed period of time. A frequency of 400 indications of position per second for each actuator is accurate for a realistic experience. Indications of position for each actuator for a given period of time form a motion code frame

The motion code manager prepares and sends to a motion service packets of motion code frames synchronously with the video stream and the audio stream according to the motion codes and the synchronization stream . The motion service receives the packets of motion code frames adapts them according to the kind of the motion platform and the liking of a user converts them in the motion stream in USB audio format and makes them available on USB plugs not shown of the CPU platform . In another embodiment not shown a motion service converts motion code frames in a motion stream in other format that USB audio such as custom USB format Ethernet format or Internet format.

A self contained USB audio stream to motion stream on RJ45 converter namely a USB KAI 1P module for connecting one motion platform is plugged in the CPU platform receives the motion stream in USB audio format converts it in a Kinelink stream and makes the Kinelink stream available on a Kinelink network not shown. Kinelink is the name of the proprietary and specialized protocol used to transport a motion stream from a motion controller namely the USB KAI 1P module to the actuators of the motion platform . Then the motion platform receives the Kinelink stream and converts it in motion synchronously with the video stream and the audio stream . For a person skilled in the art it is easy to replace the USB KAI 1P module with a KAI 4P module for connecting four motion platforms or other devices.

Now referring to there are shown details of the motion code manager and interactions with its environment. The motion code manager comprises a cine motion handler a motion code finder a motion source manager and a cine motion synchronizer . Environment of the motion code manager comprises at least one of the local repository the removable medium and the remote repository the software movie player and the motion service .

The software player comprises a specific add on or an API for emitting the synchronization stream . An add on is a software bundle that allows the user to extend and customize a base application. An API Application Programming Interface is a set of functions procedures methods classes or protocols that an operating system library or service provides to support requests made by computer programs. The synchronization stream comprises a time stream and identification codes which include an identity of the video stream such as the name of the video the media type a private serial number a public serial number of the video an identification of the current scene etc. The time stream provides video stream time stamps indicative of elapsed nominal time from the start of the video stream or of the audio stream and speed ratio values. The stamps indicative of elapsed nominal time could be emitted at a fixed frequency range 1 to 100 hertz or could be emitted at random instants. A speed ratio value is a division of an elapsed nominal time by a corresponding elapsed clock time nominal time being defined by the video stream time stamps. A speed ratio value equal to 2 corresponds to the function Forward 2 of the software movie player . A speed ratio value equal to 0.5 corresponds to the function Slow 2 of the software movie player .

The cine motion handler receives the synchronization stream separates the time stream and the identification codes and sends the time stream and the identification codes respectively to the cine motion synchronizer and to the motion source manager .

The motion source manager receives identification codes and makes a call to the motion code finder for finding motion codes corresponding to video stream and audio stream according to the identity of the video stream included in the identification codes . Thus the motion code finder makes an investigation on each available repository e.g. the local repository the removable medium via a medium reader the remote repository etc. for finding motion codes according to identification codes . Then the motion code finder sends motion codes to the motion source manager .

The cine motion synchronizer receives the time stream and a queue status stream in real time respectively form the cine motion handler and the motion service . The queue status stream provides a queue status value indicative of a queue status of a queue comprising motion code frames for the actuators. The queue status value is representative of a duration for playing the motion code frames in the queue namely a queue duration. The frequency of emission of motion code frames by the motion service being fixed e.g. 400 Hz the number of motion code frames gives the time at which the last motion code frame of the queue will be emitted in the motion stream .

Given the queue status stream and the time stream the cine motion synchronizer determines the next motion code frames which must be filled in the queue and makes a call to the motion source manager for sending it back these determined motion code frames .

Then the cine motion synchronizer receives the motion code frames treats it and sends treated motion code frames to the motion service adding its in the queue of the motion service .

Referring now to there is shown a timing diagram of synchronization of motion code frames to be played according to video stream time stamps. The motion code frames to be played are emitted by the motion service on in the motion stream on . The video stream time stamps are provided by the time stream on .

A first timing axis shows a current video stream time stamp according to a clock time provided by the clock. The video stream time stamp is indicative of elapsed nominal time from the start of the video stream. A second timing axis shows operations of the cine motion synchronizer according to the clock time. A third timing axis represents the motion service playback time showing the queue status of a queue according to the clock time. The queue is operated by the motion service and comprises motion code frames for the actuator s of the motion platform . A present axis shows the present time crossing the first timing axis the second timing axis and the third timing axis .

The cine motion synchronizer receives a clock value from the clock of the CPU platform . The clock value has a higher frequency than a frequency corresponding to the period between two video stream time stamps 

The cine motion synchronizer determines a time difference between the clock value at present and the clock value corresponding to the current video stream time stamp .

The cine motion synchronizer determines a clock duration value by adding a queue duration to the time difference .

The cine motion synchronizer determines a nominal duration value not shown by converting the clock duration value given a speed ratio . The speed ratio is regularly determined by the cine motion synchronizer based on a speed ratio value provided by the time stream and a comparison of the difference of the video stream time stamps with the clock duration value .

The cine motion synchronizer determines a future time value indicative of an elapsed nominal time from the start of the video stream when last motion code frame of the queue will be played by adding the nominal duration to the current video stream time stamp .

Then the cine motion synchronizer calls the motion source manager for a packet of motion code frames comprising motion code frames in the order in which they must be played on the actuator s of the motion platform after the future time value .

The cine motion synchronizer receives the packet of motion code frames and re samples them forming a re sampled packet of motion code frames . The re sampling is for playing speed variations of the motion code frames in a smooth manner. The re sampling is based on the speed ratio and the motion code frames waiting to be played in the queue . The re sampling allows adapting the speed of motion stream to the speed of the video stream e.g. Forward 2 Slow 2 and allows recovering the lead or the delay namely the drift of the motion stream smoothly.

The re sampling process is performed at a higher sampling rate 8000 Hz than the motion service rate 400 Hz . Some motion code frames are reduced by 1 8000 s in length to speedup playback while they are extended by 1 8000 s to slow playback. This high rate synchronized motion stream is then filtered and down sampled to 400 Hz for smooth continuous playback.

On motion code frames of the queue are synchronized with the video stream time stamp and the speed ratio is equal to one. The re sampling does not change the packet of motion code frames .

Referring to there is shown a timing diagram of synchronization of motion code frames to be played according to the same video stream and at the same present time as shown on . On motion code frames of a queue are not synchronized with the video stream time stamp motions code frames will be played too late. Then the re sampling changes the value of the first the second and the third motion code frames to recover the drift smoothly.

Referring to there is shown a timing diagram of synchronization of motion code frames to be played according to the same video stream and at the same present time than shown on . On motion code frames of a queue are not synchronized with the video stream time stamp motions code frames will be played too early. Then the re sampling changes the value of the first the second and the third motion code frames to recover the drift smoothly.

Referring to there is shown a program listing for an add on API for a software movie player according to an embodiment of the invention.

Referring to there is shown a flowchart of a method embodied in a Central Processing Unit CPU platform having a clock. The method is for interfacing a software movie player for playing a video stream having a speed ratio and a motion service in order to synchronously play the video stream on a video display and motion code frames corresponding to the video stream on an actuator of a motion platform. The method comprises receiving video stream time stamps indicative of elapsed nominal time from the start of the video stream step receiving a clock value from the clock the clock value having a higher frequency than a frequency corresponding to the period between two video stream time stamps step determining a time difference between the clock value at present and the clock value corresponding to a current video stream time stamp step receiving a queue status value indicative of a queue status of a queue comprising motion code frames for the actuator the queue status value being representative of a duration for playing the motion code frames in the queue namely a queue duration step determining a clock duration value by adding the queue duration to the time difference step determining a nominal duration value by converting the clock duration value given the speed ratio step determining a future time value indicative of an elapsed nominal time from the start of the video stream when last motion code frame of the queue will be played by adding the nominal duration to the current video stream time stamp step receiving an identity of the video stream step using the identity accessing a file comprising the motion code frames for the video stream step filling the queue with the motion code frames in the order in which they must be played on the actuator of the motion platform after the future time value step and outputting the motion code frames as a motion stream using the motion service step .

Ending with and there are shown photographs of a USB KAI 1P module . The module receives a motion stream according to an audio USB protocol and electric power by an USB input plug . The module converts the audio USB motion stream without delay into a Kinelink motion stream and provides it by a RJ45 output plug . The module further comprises an output active status led and a power status led .

While preferred embodiments of the invention have been described above and illustrated in the accompanying drawings it will be evident to those skilled in the art that modifications may be made therein without departing from the essence of this invention. Such modifications are considered as possible variants comprised in the scope of the invention.

