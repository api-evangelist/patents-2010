---

title: Computing system and method of changing I/O configuration thereof
abstract: A computing system includes: first and second I/O interfaces that are associated with a server; and an I/O management unit that connects the server with the first and second I/O interfaces. The I/O management unit includes: an I/O buffer; an I/O mapping unit that stores an access request of the server to the first I/O interface in the I/O buffer in response to a change start request of the first I/O interface associated with the server to the second I/O interface; an I/O changing unit that associates the second I/O interface with the server; and an I/O synchronizing unit that converts the access request stored in the I/O buffer into an access request to the second I/O interface, in response to the completion of the association by the I/O changing unit, and executes the converted access request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08103721&OS=08103721&RS=08103721
owner: Hitachi, Ltd.
number: 08103721
owner_city: Tokyo
owner_country: JP
publication_date: 20101122
---
This is a continuation application of U.S. Ser. No. 12 200 409 filed Aug. 28 2008 now U.S. Pat. No. 7 870 191 .

The present application claims priority from Japanese application 2008 160459 filed on Jun. 19 2008 the contents of which are hereby incorporated by reference into this application.

The present invention relates to a computing system and more particularly to a computing system capable of changing the mapping correspondence between a server and an I O interface and a method of changing the I O configuration thereof.

A server of a computing system has I O interfaces for example PCI devices fixedly provided therein. However it is preferable to flexibly change the allocations of the server and the I O interfaces in order to flexibly operate the computing system.

A server virtualization technique has been proposed in order to implement flexible changes in the allocation. The server virtualization technique can associate a virtual server in the server with an I O interface among plural I O interfaces provided in the server.

In the above mentioned method when the I O interface is changed while the virtual server is being operated an error occurs in the process using the I O interface and the execution of the virtual server is interrupted. Therefore in order to change the I O interface allocated to the virtual server to another I O interface it is necessary to stop the virtual server to change the I O interface and then restart the virtual server. However there is a problem in restarting the virtual server in that a continuous series of processes need to be executed from the beginning again resulting in lowering the availability of the computing system.

An object of the invention is to change an I O interface used by a server without restarting the server that is while continuously performing the process of the server and to reduce the influence of the change in the I O interface on tasks of a computing system.

According to an aspect of the invention a computing system includes first and second I O interfaces that are associated with a server and an I O management unit that connects the server and the first and second I O interfaces. The I O management unit includes an I O buffer an I O mapping unit that stores an access request of the server to the first I O interface in the I O buffer in response to a change start request of the first I O interface associated with the server to the second I O interface an I O changing unit that associates the second I O interface with the server and an I O synchronizing unit that converts the access request stored in the I O buffer into an access request to the second I O interface in response to the completion of the association by the I O changing unit and executes the converted access request.

In the computing system according to the above mentioned aspect preferably when the I O changing unit cannot associate the server with the second I O interface the I O synchronizing unit executes the access request to the first I O interface that is stored in the I O buffer.

Preferably the computing system according to the above mentioned aspect further includes a virtualization unit that manages the server and the server is a virtual server.

In the computing system according to the above mentioned aspect preferably the I O management unit is included in the virtualization unit.

Preferably the computing system according to the above mentioned aspect further includes a management server that issues the change start request using information identifying the server and the first and second I O interfaces as parameters.

According to another aspect of the invention there is provided an I O management device that is connected to a server. The I O management device includes an I O buffer an I O mapping unit that stores an access request of the server to a first I O interface in the I O buffer in response to a change start request of the first I O interface associated with the server to a second I O interface an I O changing unit that associates the second I O interface with the server and an I O synchronizing unit that converts the access request stored in the I O buffer into an access request to the second I O interface in response to the completion of the association by the I O changing unit and executes the converted access request.

According to still another aspect of the invention there is provided a method of changing the I O configuration of a computing system using an I O management unit that has an I O buffer and changes a first I O interface associated with a server to a second I O interface. The method includes storing an access request of the server to the first I O interface in the I O buffer in response to a change start request of the first I O interface associated with the server to the second I O interface associating the second I O interface with the server and converting the access request stored in the I O buffer into an access request to the second I O interface in response to the completion of the association and executing the converted access request.

According to the above mentioned aspects of the invention it is possible to change an I O interface used by a server while continuously performing the process of the server.

In this embodiment the virtualization unit is a program that is stored in the memory and executed by a CPU but the invention is not limited thereto. The virtualization unit may be hardware firmware or a combination thereof installed in the server . An application program business program is executed on the virtual server .

The server includes the CPU that executes the programs in the memory an auxiliary storage unit such as a hard disk or a flash memory and I O interfaces . In the auxiliary storage unit is provided in the server but the invention is not limited thereto. For example a storage system such as a RAID redundant arrays of inexpensive disk system may be connected to the outside of the server through the I O interface . The I O interface is for example an NIC network interface card or an HBA host bus adaptor and is connected to a network or an external storage unit such as the RAID system. In this embodiment a PCI device such as the NIC and the HBA is used as an example of the I O interface . For example a storage unit a network and a storage unit are connected to the I O interfaces . Although simply shown in the drawings generally one I O interface and another I O interface are connected to the same storage unit or the same network .

The virtualization unit includes an I O mapping unit that manages mapping correspondence between the virtual servers and the I O interfaces an I O synchronizing unit that synchronizes the states of change source and change destination I O interfaces when changing the I O interfaces and an I O changing unit that changes the mapping between the virtual servers and the I O interface . The term I O synchronization or synchronization means to temporarily stop the operations of the change source and change destination I O interfaces by suspending the execution of a new request and to maintain the change source and change destination I O interfaces in the same operational state pause state . The virtual server does not consider the suspension of the operation of the I O interface as the stop of the operation of the I O interface since the execution of a request is suspended. Moreover the term I O change or change means to switch the I O interfaces for access to the same target apparatus a volume of a communication node or a storage unit from a change source to a change destination as viewed by the virtual server .

The virtualization unit includes an I O interface table that stores information on a list of I O interfaces that can be mapped associated with to the virtual servers an I O mapping table that stores the mapping relationship between the virtual servers and the I O interfaces and an I O synchronization table that stores configuration during I O synchronization.

The virtualization unit further includes an I O buffer that stores a request an I O access request from the virtual server to the I O interface and a response to the request during I O synchronization and a management I F for communication with the management server . The management I F is a communication interface for communication between the virtualization unit and the management servers through the network . is a diagram illustrating an example of the I O interface table . A column represents the identifier of the I O interface . A column indicates a device identifier of the I O interface . In the case of a PCI device the device identifier includes a bus number B a device number D and a function number F of the PCI device. In bus number x is represented by Bx device number y is represented by Dy and function number z is represented by Fz . A column indicates a memory mapped I O address MMIO of the I O interface . In the MMIO is represented by a hexadecimal number. A column indicates an interrupt line INT of the I O interface . In this embodiment the I O interface using the MMIO is described but the virtual server may use a virtual identifier to access the I O interface that uses read write commands and transmitting receiving commands.

When the I O interface is shared access from the virtual server and the virtual server to the I O interface involves access scheduling in the virtualization unit in addition to the above mentioned access conversion. When plural virtual servers share the I O interface an I O change means a change in the I O interface as viewed from the virtual server as described above. Therefore the I O change is performed as follows. In the structure shown in when the I O interface as viewed from the virtual server is changed to for example the I O interface the I O interface is shared by the virtual server and the virtual server as represented by a dashed line and the I O interface is exclusively used by the virtual server . Therefore when the use of the I O interface stops due to for example a trouble an I O change corresponding to the virtual server and an I O change corresponding to the virtual server are needed and an I O change process is repeated.

Since other examples can be derived from the example shown in the drawings a description thereof will be omitted. In this case the unit of the I O interface is a minimum functional unit such as a port when the I O interface a device or a board includes plural ports. For instance the unit of the I O interface may be a function number unit of the PCI device.

The configuration management program includes an acquiring unit that acquires for example configuration information of the server or the I O interface thereof a UI unit that provides the user with a UI user interface a confirmation unit that checks whether to change the I O interface and a changing unit that performs an I O change. The management server includes as the table group an I O configuration table that stores the configuration of the I O interface and a connection destination thereof for example the storage unit in and a mapping management table that manages the mapping between the virtual server and the I O interface .

In the I O access conversion a virtual device identifier of the I O mapping table shown in that is matched with the virtual device identifier included in the I O access request is searched and an identifier of the corresponding I O interface is calculated. Then an identifier of the I O interface table shown in that is matched with the identifier of the I O interface is searched and a device identifier a bus number a device number and a function number an MMIO and an INT respectively corresponding to a virtual device identifier a bus number a device number and a function number a virtual MMIO and a virtual INT of the corresponding I O interface are acquired.

It is determined whether I O synchronization is being performed on the I O interface to be accessed according to the I O access request from the virtual server from 16 Step . The I O synchronization will be described below. When the identifier of the virtual server that issues the I O access request is in the I O synchronization table and the identifier of the I O interface to be accessed exists in the I O synchronization table including the identifier of the virtual server change source and change destination interfaces and it is determined that the I O synchronization is being performed. If the I O synchronization is not performed the converted device identifier a bus number a device number and a function number MMIO and INT are used to access the I O interface normal access Step . If the I O synchronization is being performed the I O access request is stored in the I O buffer Step . After the normal access or after the I O access request is stored in the I O buffer the I O mapping unit responds to the virtual server Step . After the normal accesses the I O mapping unit transmits a response indicating whether the access succeeds or fails. After the I O access request is stored in the I O buffer the I O mapping unit transmits a response indicating that the request has been stored in the I O buffer .

For clarity of the description of the invention the outline of a normal access sequence Step in shown in will be described below. shows the outline of a process sequence when the I O access request is a read request shows the outline of a process sequence when a read request is issued in response to a trigger from a connection destination and shows the outline of a process sequence when the I O access request is a write request. The I O access request from the virtual server needs be subjected to access conversion as described above. However a description of the access conversion will be omitted here.

As shown in when the I O access request is a read request the I O interface issues a data read request to a connection destination for instance a disk volume . Data transmitted from the connection destination in response to the data read request is stored in an input buffer of the I O interface . The data stored in the input buffer is read by access to the address MMIO of the input buffer and the read data is transmitted to a predetermined region of the virtual server . After the data is stored at a predetermined address of the virtual server the virtual server recognizes the end of a series of read sequences by an interrupt from the I O interface .

In general DMA direct memory access transmission is used for data transmission between a predetermined region of the virtual server and the I O interface and a DMA controller not shown is used to control the transmission. In this case when the read request is issued to the DMA controller the virtual server executes other processes tasks without using data related to the read request until an interrupt is input from a timer that sets a time out period until a response to the request is received or until a termination interrupt which corresponds to the interrupt is input from the DMA controller. Since other access instructions are likely to be issued from other processes the virtual server or the server performs multiple I O access. The DMA controller transmits data from the input buffer to a predetermined region of the virtual server in response to the signal that is output from the I O interface when data is stored in the input buffer and the interrupt from the DMA controller is transmitted from the I O interface to the virtual server . The size of the input buffer depends on the type of I O interface .

Unlike the above the virtual server may not initiatively control the I O interface. The I O interface may be a communication interface such as an NIC. In this case the virtual server issues a read request in response to a trigger from the connection destination shown in . This operation will be described below. When detecting the reception of a signal for example detecting that the destination address of a packet indicates its own address the communication interface issues a reception interrupt to the virtual server . Then the virtual server issues a read request to the I O interface in response to the reception interrupt through the DMA controller . In general at the time when the read request is issued received data starts to be stored in the input buffer . The transmission of the received data stored in the input buffer to a predetermined region of the virtual server and the interrupt from the I O interface are performed by the same method as that shown in . When the connection destination is the network and a receiver side receives data the receiver side is operated in response to a trigger from the destination of a packet and does not initiatively control the I O interface in a control process it is necessary to notify whether data is received. For example the I O interface can transmit a signal indicating an inoperable state or a busy signal to a transmitter side . Therefore I O synchronization may not be obtained the continuation of a receiving process . In the case of the sequence shown in the input buffer overflows to discard the received packet without issuing the read request .

According to the type of protocols communications protocols the virtual server may ensure a predetermined region for storing received data and a reception interrupt may not occur actually the reception interrupt occurs. However the DMA controller starts its operation and no reception interrupt occurs in the virtual server . In such a protocol a positive negative response is sent back to the source of the packet in response to the completion of reception interrupt . Therefore if the data stored in the predetermined region is discarded and there is no response the received packet is discarded. That is the receiving operation is not performed.

In this way if there is no read operation it is difficult to initiatively control the I O interface. Therefore the I O access request is not stored in the I O buffer during I O synchronization which will be described below.

A process sequence when the I O access request is a write request will be described with reference to . The virtual server stores data to be written in a predetermined region of the memory and issues a write request to the I O interface through the DMA controller. The DMA controller transmits data from a predetermined region of the virtual server to an output buffer of the I O interface . In general the address MMIO of the output buffer is different from that of the input buffer but a method of designating an address is the same as that in the read operation. When data is stored in the output buffer the I O interface outputs a write completion signal termination interrupt to the virtual server . The I O interface outputs data from the output buffer to a connection destination. In the write completion signal terminal interrupt is output to the virtual server before the data is output to the connection destination. However the write completion signal terminal interrupt may be output from the I O interface after data is completely output to the connection destination. The operation of the virtual server during the period from the issuing the write request to the reception of the write completion signal termination interrupt is the same as that in the read process. The operation of the DMA controller is also similar to that in the read process except that data is transmitted in the opposite direction.

The I O synchronizing unit notifies the management server that the I O synchronization starts Step . The management server receives the notification of the start of the I O synchronization performs processes which will be described below and requests to change the I O interface. The I O synchronizing unit receiving the I O change request calls the I O changing unit . The process of the I O changing unit will be described below.

When the virtual server issues an I O access request while the I O changing unit is being operated the I O mapping unit stores the I O access request in the I O buffer as described above. Some systems cannot estimate the frequency of I O access requests issued from the virtual server to the I O interface during I O synchronization or the number of I O access requests while the I O changing unit is being operated . That is the I O buffer is likely to overflow while the I O changing unit is being operated. In this case before the I O virtual server is operated the process of the virtual server that is being subjected to I O synchronization temporarily stops and after the process of the I O changing unit is completed the process of the virtual buffer resumes. The suspension and the resumption of the operation of the virtual server may be executed in response to commands prepared in the virtualization unit . The snapshot of the virtual server may be taken when the operation of the virtual server stops and the operation of the virtual server may resume on the basis of the snapshot. As such it is possible to guarantee the issue of an I O access request from the virtual server by temporarily stopping the operation of the virtual server while the I O changing unit is being operated. In this case the resumption of the virtual server is different from the restart of the virtual server and it is possible to continuously perform the process from the time when the operation temporarily stops.

The changing unit brings two kinds of results when the I O interface registered the I O synchronization table is completely changed and when an I O change is not performed when the state before an I O change request is received is maintained .

The I O buffer is opened Step . When the I O changing unit completes the change of the I O interface registered in the I O synchronization table the I O interface corresponding to the request I O access request and a response thereto stored in the I O buffer is converted from the change source I O interface into the change destination I O interface and the converted request I O access request and response are executed. When the I O changing unit does not perform the change of the I O interface registered in the I O synchronization table the request I O access request and the response stored in the I O buffer are executed without converting the I O interface the change source I O interface . In this way the I O buffer is opened empty with the execution of the request I O access request and the response.

The I O interfaces to be changed both the change source and change destination I O interfaces are deleted from the I O synchronization table Step . The term I O interfaces to be changed is used because the I O change may succeed or fail. The management server is notified of the completion of the I O change clearly discriminating the two cases Step .

I O mapping is changed Step . In order to change the mapping between the change source I O interface and the virtual server to the mapping between the change destination I O interface and the virtual server in the I O mapping table the change source I O interface that is mapped to the virtual server is updated with the change destination I O interface specifically the identifier of the I O interface is overwritten to the identifier of the change destination I O interface in the I O mapping table .

It is determined whether to update the network ID of the change destination I O interface Step . When the network ID is included as a parameter in the I O change start request that is received by the I O synchronizing unit the ID update is needed. The network ID of the change destination I O interface is updated. Here when the I O interface has an update function the I O changing unit requests the I O interface to update the network ID as a parameter. When it is necessary to execute a program in order to rewrite the network ID the I O changing unit generates a new virtual server for rewriting the network ID maps an I O interface to which the network ID will be rewritten to the generated virtual server delivers a network ID rewrite program to the virtual server and executes the program on the virtual server. Then when the execution of the program is completed the I O changing unit demaps the I O interface from the virtual server. It is not preferable that the same network ID exists in plural I O interfaces. Therefore it is preferable to rewrite the network ID of the change source I O interface as well as the network ID of the change destination I O interface .

The I O changing unit notifies the connection destination of the change in the network ID Step . For instance in the network in order to update an ARP address resolution protocol table of a connection destination an ARP packet is transmitted a log in log out process pLogin Logout of FC is performed or an API application programming interface or a CLI command line interface that is provided by an apparatus on the network is used to change the connection destination.

The configuration of the I O interface after the I O change is verified Step . The verification of the configuration includes checking whether the I O interface of the change destination is out of order checking the request and the response by the transmission and reception of packets and checking the network ID when the network ID is successfully changed.

If there are any programs as the result of the verification Step in order to return the configuration before the change the mapping of the I O interface is returned to the state before the configuration is changed Step . In order to return the mapping of the I O interface to the state before the configuration is changed the processes of Steps to are rolled back.

The I O changing unit cancels the change in the I O configuration notifies the cancellation of the change in the I O configuration and the cause thereof Step and then ends the process. If there is no program as the result of the verification Step the I O changing unit notifies the completion of the I O change. The notification is succeeded to the I O synchronizing unit and then transmitted to the management server Step in .

Next the operation of the configuration management program of the management server according to this embodiment will be described. is a flowchart illustrating the process of the acquiring unit of the configuration management program . The acquiring unit acquires configuration information Step . The acquired configuration information is for making and updating the I O configuration table and the mapping management table . The information may be acquired by using an API application program interface or a CLI command line interface that is provided from the virtualization unit a switch of the network an apparatus that stores the configuration information of a server an external storage device or software that manages the configuration information of a computing system. Alternatively the information may be acquired from the user or a file. The acquired information is used to make and update the I O configuration table and the mapping management table Step .

An I O list shows a list of the I O interfaces that are currently mapped to the virtual server virtual server in selected from the selection frame . shows the identifier for example I 02 the I O type for example an NIC and the network ID for example MAC of the I O interface . However information such as a connection destination network may be added. When the I O interface displayed in the I O list is being subjected to I O synchronization information indicating the state thereof may be displayed. It is possible to select the I O interface by placing a cursor of a mouse in a specific I O interface of the I O list and clicking the mouse a hatched line in .

A list of the candidates of the change destination I O interface that is selected from the I O list is displayed in a change destination I O candidate field . In since FC HBA is selected as the I O type from the I O list the I O interfaces of the same I O type FC HBA are displayed in the list of the change destination I O candidates . A method of searching the change destination I O candidates will be described below. When the I O interface is selected from the change destination I O candidates the selected I O interface is a change destination I O interface.

A check box is checked when the I O interface is changed without restarting the OS that is being executed on a target virtual server . A check box is checked when the network ID is successful in changing from a source I O interface to a change destination I O interface. A check box is checked when the configuration of the network that is connected to the change source I O interface is successful to the change destination I O interface. When an execution button is clicked with the mouse a request to execute an I O configuration change is sent from the browser or the GUI program to a UI unit . When a cancel button is clicked the window is closed. In the window the content of the selection frame of the virtual server and the content selected from the I O list and the change destination I O candidate field are transmitted to the UI unit as the identifiers of the virtual server the change source I O interface and the change destination I O interface. The checked states of the check boxes are also transmitted from the browser or the GUI program to the UI unit .

Next an example of the process of the UI unit changing I O changing the mapping between the virtual server and the I O interface on the basis of the instruction from the user will be described. The change I O change in the mapping between the virtual server and the I O interface may be performed when a load is concentrated on a specific I O interface when there are indications that a trouble will occur in a specific I O interface or when a trouble occurs in a specific I O interface as well as on the basis of the instruction from the user in terms of the operation of the computing system.

When a load is concentrated on a specific I O interface it is possible to equalize the load by changing the mapping of the virtual server that uses the I O interface to another I O interface of the same type having compatibility . In order to perform the equalization the virtualization unit may monitor the information of the function of each I O interface and the management server the configuration management program that obtains the monitoring results may determine the change source and change destination I O interfaces or candidates . In the determining process one I O interface having the highest load is selected from the I O interfaces of the same type having compatibility one of the virtual servers using the I O interface is selected and an I O interface with the lowest load is used as the I O interface used by the selected virtual server . When the load of the I O interface that is exclusively used by one virtual server is excessively high the virtualization unit generates a new virtual server divides the function of the virtual server that increases the load of the I O interface and makes the new virtual server execute the divided function. Then the virtualization unit performs the process of selecting the virtual server . When the virtual server is selected or the change source and change destination I O interfaces or candidates are determined the process of the UI unit may be selectively used for the user to check the selection and the determination if necessary.

The process when a sign of the trouble of the I O interface is detected or when a trouble occurs in the I O interface will be simply described. Information on the trouble occurring in the I O interface is collected. For instance the information on the trouble includes overheating of the I O interface the frequent occurrence of an error correcting process interrupt loss and the occurrence of an event which is a sign of serious trouble. When the virtualization unit monitors information on the trouble of the I O interface and the information indicates the trouble of the I O interface or signs of the trouble the information is transmitted to the management server the configuration management program . The management server receiving the information displays the identifier of the I O interface in which a trouble is likely to occur or which is out of order and starts the UI unit . In this case the management server specifies the change source I O interface in which a trouble is likely to occur or which is out of order and the virtual server that uses the I O interface . After determining the I O interfaces of the same type having compatibility as the candidates of a change destination the management server controls the UI unit to execute Step .

When it is determined that the I O configuration is dynamically changed or that the network ID is successful the confirmation unit searches the change destination I O interface that can be changed from the change source I O interface using the I O type of the I O interface and the connection destination network as search conditions Step . The confirmation unit searches an I O interface that has the same I O type as the change source I O interface using the I O type of the I O configuration table column . However the I O types may be different. For instance the I O interfaces having the same function compatibility may be candidates of the change destination I O interface. The user may define the standard for determining whether the I O interfaces are of the same type. In addition to the above mentioned search conditions information of the connection destination column of the I O configuration table is used to search the I O interfaces that are connected to the network to which the change source I O interface is connected as the candidates. In the search operation the connection destinations may be different. For instance when the connection destination is finally connected to a target device to which the change source I O interface is connected or when the I O interface is connected to a storage device that stores the same information as the storage device that is used by the change source I O interface the connection destination or the I O interface may be used as the candidate. The user may define this condition.

When it is determined that the I O configuration is not dynamically changed and that the network ID is not successful it is checked whether to take over the network configuration on the basis of whether the check box of the window is checked Step . When the network configuration is successful an I O interface that can be changed from the change source I O interface is searched using the connection destination network of the I O interface as a search condition. Information of the connection destination the column of the I O configuration table is used to search the I O interfaces that are connected to the network to which the change source I O interface is connected as the candidates. In the search operation the connection destination networks may be different. For instance when a network is finally connected to a target device to which the change source I O interface is connected or when the I O interface is connected to a storage device that stores the same information as the storage device that is used by the change source I O interface the network or the I O interface may be used as the candidate. The user may define this condition.

When none of the check boxes to of the window are checked the confirmation unit inquires the virtualization unit and sets all the I O interfaces managed by the virtualization unit as the candidates of the change destination I O interface Step . The confirmation unit returns the candidates of the change destination I O interface to the UI unit Step . The confirmation unit may provide the user with the options to execute only Steps and in order to correspond to the user who does not require the search of the candidates of the I O interface .

It is determined whether to take over the network setting on the basis of whether the change source and change destination I O interfaces are NICs with reference to the I O type of the I O configuration table column Step . When the network setting is successful Information set to an apparatus on the network that is connected to the change source I O interface is set to an apparatus on the network that is connected to the change destination I O interface. For instance when the I O interfaces are connected to different ports of network switches VLAN virtual LAN and QoS quality of service that are set to the network switch port connected to the change source I O interface are set to a network switch port that is connected to the change destination I O interface. A detailed description of the actual setting thereof is omitted but the changing unit instructs the virtualization unit to execute the setting.

When a storage that is connected to the change source I O interface is different from a storage that is connected to the change destination I O interface the changing unit determines that the storage configuration is successful Step and matches the content data stored in the storage that is connected to the change source I O interface with the content data stored in the storage that is connected to the change destination I O interface. For instance this process is performed using software for the replication of the storage or the replication function of the storage. It is possible to change the configuration of the storage of the connection destination or the structures of the I O interfaces having different network configurations by taking over the network configuration.

The changing unit requests the virtualization unit to change the I O configuration Step . This step becomes an opportunity to continuously perform the process of the I O synchronizing unit shown in from Step . The changing unit waits until the I O change completion notification is received from Step of the I O synchronizing unit . When the notification is received the changing unit ends the process.

Steps to of the changing unit make instructions for the virtualization unit . Since the virtualization unit executes Steps to the changing unit requests the start of an I O change after Steps to are executed Step . Therefore it is possible to omit Steps and of the changing unit and Step of the I O synchronizing unit and it is possible to reduce the communication overhead between the management server and the server and an overhead due to an intermediate process of the management server in a series of I O change processes.

According to the above described embodiment it is possible to change the configuration of the I O interface used by a virtual server while continuously performing the process of the virtual server. Therefore it is possible to reduce the influence of the I O change on tasks performed by a computing system.

In the first embodiment the virtualization unit of the server changes the mapping between the virtual server and the I O interface . In the second embodiment an I O management unit that is independent of the virtualization unit performs a process of changing the mapping between the virtual server and the I O interface including the I O access conversion process described in the first embodiment.

According to the second embodiment it is possible to apply the I O change process described in the first embodiment to a virtual server system in which a unit that is independent of the virtualization unit performs an I O access conversion process in order to reduce the time required to process an access from the virtual server to the I O interface .

The I O management device is composed of a computer that includes a memory and a CPU . The programs and tables for the I O change process described in the first embodiment are stored in the memory . The connection between the nodes and the I O management device and the connection between the I O interfaces and the I O management device are simply shown in . However it will be understood by those skilled in the art that I O interfaces are needed for the connections. Since the I O management device connects the nodes and the I O interfaces and executes the I O change process described in the first embodiment it may be called a computer with a connection switching exchange function. However for example an MMIO is not virtualized in the node when the node is a general computer physical server . Therefore the I O mapping table according to the first or second embodiment is not used and an I O access conversion process using the I O mapping table is not executed.

According to this embodiment the I O change process according to the first embodiment can be applied to a computing system having high flexibility in structure in which the I O management device is independently provided. Therefore it is possible to change the configuration of the I O interface used by a server while continuously performing the process of the server. As a result it is possible to reduce the influence of the I O change on tasks performed by a computing system.

