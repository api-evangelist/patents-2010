---

title: Method and system for capturing, inferring, and/or navigating dependencies between mashups and their data sources and consumers
abstract: A computer system, includes a display interface; a user input device interface; and a processor cooperatively operable with the display interface and the user input device interface. The processor is configured to interacting with a user to selectively browse, via the user input device interface and the display interface, relationship dependencies between a selected mashup or service and mashup assets one level removed from the selected mashup or service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09110577&OS=09110577&RS=09110577
owner: Software AG USA Inc.
number: 09110577
owner_city: Reston
owner_country: US
publication_date: 20100924
---
This application claims the benefit of the following Provisional application 61 247 155 filed Sep. 30 2009 which is expressly incorporated herein by reference.

The technical field relates in general to computer networks and more specifically to mashups and capturing inferring and analyzing mashup meta data for mashup dependencies.

Mashups are created by combining data from different types of data sources including web service databases web sites applications and data syndication feeds. Once mashups are produced they are made accessible to users via a Rich Interface Application or a widget.

There are a number of dependencies between mashups services applications data sources widgets and users. These dependencies are important in the mashup platform because it affects the mashup platform in several ways 

Accordingly one or more embodiments provides a computer system a computer readable non transitory medium and or a method. The embodiments can provide for a display interface a user input device interface and a processor cooperatively operable with the display interface and the user input device interface. The processor can interact with a user to selectively browse via the user input device interface and the display interface relationship dependencies between a selected mashup or service and mashup assets one level removed from the selected mashup or service.

One or more embodiments can store the list of services and mashups used by each mashup in a database and use the database to browse from the selected mashup or service to the mashup assets one level removed.

Still other embodiments can introspect a mashup to discovery data sources directly and indirectly used by the mashup.

Still further embodiments include introspecting the selected mashup to determine whether the selected mashup is directly or indirectly used by at least one other mashup and disposing of the selected mashup when no other mashup directly or indirectly uses the selected mashup so as to not dispose of mashups which are at least indirectly used by other mashups.

Further embodiments can determine that a user has permission use to the selected mashup which has dependencies when each of the dependencies of the mashup all allow the user permission to use the each dependency and determine that the user does not have permission to use the selected mashup when one of the dependencies of the mashup does not allow the user permission even though the selected mashup allow the user permission.

Still other embodiments can include a browser user interface which presents the selected mashup in a focus window used by relationships of the selected mashup in a used by window and uses relationships of the selected mashup in a uses window. This still other embodiments can support selectively switch the focus window to a different selected mashup in one of the used by window or the uses window in response to a user command thereto.

According to yet another embodiment a mashup system can include the above computer system or method acting as a mashup client and a mashup server cooperatively connected to and in communication with the mashup client to coordinate access to the relationship dependencies from the mashup client through the mashup server.

Still other embodiments provide for a method for the foregoing and or a non transitory computer readable medium with instructions thereon which when executed perform the foregoing.

Further the purpose of the foregoing abstract is to enable the U.S. Patent and Trademark Office and the public generally and especially the scientists engineers and practitioners in the art who are not familiar with patent or legal terms or phraseology to determine quickly from a cursory inspection the nature and essence of the technical disclosure of the application. The abstract is neither intended to define the invention of the application which is measured by the claims nor is it intended to be limiting as to the scope of the invention in any way.

In overview the present disclosure concerns computer systems sometimes referred to as client server networks such as may be associated with providing mashups. Such computer systems often involve running a mashup on a user s computer that combines data from different data sources and that communicates as a client with a mashup server that invokes the desired web service specified by the mashup the web service providing live data to the user through the mashup client server so that the live data can be used according to the mashup without regard to user interface formatting specified by the web service with the data sources and or mashups sometimes being dependent on each other for trustworthiness security and or integrity. More particularly various inventive concepts and principles are embodied in systems devices and methods therein for capturing inferring and or navigating dependencies between mashups and the mashup data sources and consumers of the mashups.

The computer systems of particular interest are those providing or facilitating mashups over communication networks involving a mashup server and a user s computer and the like and variants or evolutions thereof.

The instant disclosure is provided to further explain in an enabling fashion the best modes of performing one or more embodiments of the present invention. The disclosure is further offered to enhance an understanding and appreciation for the inventive principles and advantages thereof rather than to limit in any manner the invention. The invention is defined solely by the appended claims including any amendments made during the pendency of this application and all equivalents of those claims as issued.

It is further understood that the use of relational terms such as first and second and the like if any are used solely to distinguish one from another entity item or action without necessarily requiring or implying any actual such relationship or order between such entities items or actions. It is noted that some embodiments may include a plurality of processes or steps which can be performed in any order unless expressly and necessarily limited to a particular order i.e. processes or steps that are not so limited may be performed in any order.

Much of the inventive functionality and many of the inventive principles when implemented are best supported with or in software or integrated circuits ICs such as a digital signal processor and software therefore and or application specific ICs. It is expected that one of ordinary skill notwithstanding possibly significant effort and many design choices motivated by for example available time current technology and economic considerations when guided by the concepts and principles disclosed herein will be readily capable of generating such software instructions or ICs with minimal experimentation. Therefore in the interest of brevity and minimization of any risk of obscuring the principles and concepts according to the present invention further discussion of such software and ICs if any will be limited to the essentials with respect to the principles and concepts used by the exemplary embodiments.

As further discussed herein below various inventive principles and combinations thereof are advantageously employed to facilitate easier and powerful ways to analyze mashups and their dependencies by capturing and inferring dependency relationships between mashups services data source MASHLET components widgets applications and users. MASHLET refers to a type of a mashup and is commercially available from JackBe Corporation. 

The Mashup Dependency System MDS discussed further herein can capture information about mashups and relationships between mashups and various artifacts. Using these relationships the platform can facilitate the following 

1. Mashup Trust A mashup is only as trust worthy as the services and data it is combining. So as a user it is important to know what the pedigree of a Mashup by introspecting the mashup to understand what data sources are being used. Without the mashup dependency system it is not possible to provide this information to the mashup user.

2. Mashup Security Mashups are only as secure as the data sources. If a user needs access to a mashup but does not have permission to access the underlying data source then the user should not be granted access to a mashup. Without the mashup dependency system it is not possible to make this determination.

3. Mashup integrity means once a mashup is put into use the system cannot arbitrarily dispose of an asset that the mashup depends upon. For example if a mashup is using a web service that is published in the mashup platform this implies that the mashup is dependent on the existence of that web service. If the owner of that web service needs to decommission that service they need to know that the service is currently being used by that mashup and therefore there is a consequence to removing that service. Without the mashup dependency system it is not possible to make this determination.

Referring now to an illustration of mashup dependency relationships uses and used by relations will be discussed and described. shows the relationships between the different types of artifacts in the Mashup particularly the artifacts that use other artifacts. In this illustration if a first artifact uses a second artifact the second artifact is used by the first artifact. A mashup is deemed to use the information from an information providing service such as a mashup that uses Google maps information whether the mashup obtains the information directly from Google maps or from an intervening mashup that obtained the information from Google maps.

The mashup uses itself and is used by itself as reflected in by arrows labeled uses and used by to and from the mashup only .

The mashup uses the service data source . Therefore the service data source is used by the mashup . Also the mashlet widget application uses the mashup . Therefore the mashup is used by the mashlet widget application . Each of these relationships are direct that is there is no intervening mashup which passes the data through.

The mashlet widget application uses the service data source and therefore service data source is used by the mashlet widget application . This relationship is indirect. That is the mashup widget application may use data from the service data source however the data is obtained through the intervening mashup .

In the mashup trust example given above the user of the mashlet widget application knows that the data is trustworthy or not not because it is from mashup but because the data is originally provided from service data source which is trustworthy or not and the intervening mashup is also trustworthy.

In the mashup security example given above if the user of the mashup does not have permission to access the service data source mashlet widget application then the same user of mashlet widget application should not be able to access the mashup or the relevant part thereof which provides data from the service data source .

In the mashup integrity example given above even if the mashup is no longer operating the service data source will still be used by the mashlet widget application . Simply determining whether the calling mashup with the direct relationship still calls the service data source will be insufficient to determine whether the service data source can be decommissioned.

The Mashup Dependency System can provide a rich set of APIs for the applications users and user interfaces to leverage to ensure that the mashup platform can provide trustworthy secure mashups and allow users to ensure mashup data integrity.

1. Get list of Services used by a Mashup first level and recursively . The reference to first level means that a single level left and right in the illustration is checked at a time. The reference to recursively means that all of the levels are checked such that a network of objects connected by links is checked. In this example the relationship API to Get list of Services used by a Mashup first level checks a single level that uses the Mashup and a single level that is used by the Mashup and gets a list of those services. The recursive Get list performs this recursively on all levels. With this explanation the following generally should be understood.

By way of background a mashup can have securities such as permission which can be e.g. user level or group based etc. A particular example is that a user can be granted various permissions to perform actions such as access to the mashup and or the user may or may not be granted permission to receive data used by the mashup. A mashup can allow for example the existing permission schemes to be used. The existing permission scheme can be provided as a separate security repository and or can be checked. A security policy can provide for granting permissions and when those permissions are granted can check for conflicts by using relationship APIs.

For the purpose of this application a service refers to e.g. a web service or customer proprietary data exposure service.

1. Check if a user has permission to use a given Mashup by traversing the relationships using a relationship API 

3. Grant permission to a user or group of users to a Mashup traverse relationships to check if a dependent artifact does not permit this user or group the required permission 

6. Check if a group of users have permission to use a given MASHLET component traverse the relationships 

7. Grant permission to a user or group of users to a MASHLET component traverse relationships to check if a dependent artifact does not permit this user or group the required permission 

Referring now to an example user interface illustrating mashup dependency relationships uses and used by relations will be discussed and described. In this illustration the user interface provides a browse function that interacts with a user to allow the user to traverse the dependency relationships. Illustrated in the user interface is a focus of the browser the consumed by relationships also referred to as used by and the consumes relationship also referred to as uses .

The diagram in shows one way the relationships data can be leveraged in the mashup platform to display the inter dependencies between the artifacts. In this case the user is looking at the details of a service and the dependencies of that service on other artifacts within the mashup platform.

Here the service Mashup xyz123 is the focus of the browser. The consumes column lists the services which the focus uses. The consumed by column lists the services which use the focus . In this user interface the browser illustrates the focus and one left and one right relationship. Other browser can be provided which list two or more left and or right relationships for the focus .

The Mashup Dependency System provides a rich set of APIs for the applications users and user interfaces to leverage to ensure that the mashup platform can provide trustworthy secure mashups and allow users to ensure mashup data integrity. The APIs were described above. Using these APIs the Presto mashup platform provides for a rich interface to navigate different artifacts and their inter relationships. This interface is called Mashup Dependency Browser.

The MDB can be opened by focusing on any artifact in the mashup platform. For instance puts the focus on Mashup . When Mashup is selected as the focal point the browser shows all the other artifacts used by Mashup and all the other artifacts Mashup uses.

Now when the user selects one of the other artifacts shown in the browser the focus shifts to that artifact and the browser display changes according to the newly discovered relationships. For instance and show the browser with the focus on Mashup shifting to Mashup .

Referring now to an illustration of mashup dependency browser with mashup in focus will be discussed and described. In this user interface there is provided a focus window a used by window and a uses window . The used by window lists the mashlets widgets applications that directly call the focus i.e. mashup . The uses window lists the services data sources which the focus uses. Here ashup uses service service service and mashup and mashup is used by mashlet widget application and mashlet .

The user can interact with the user interface to select one of the listed artifacts. Referring now to an illustration of a mashup dependency browser when the user selects mashup will be discussed and described. Here the same artifacts are illustrated as in . The uses window lists the services data sources which the focus uses. Here mashup uses service service service and mashup and mashup is used by mashlet widget application and mashlet .

Because the uses selects mashup such as by clicking in the user interface the focus will shift to change mashup to become the focus .

Referring now to an illustration of a mashup dependency browser when the browser puts mashup in focus and shows its relationships will be discussed and described. Here the same artifacts from the focus window and the uses window are illustrated as in . However the uses window lists the services data sources which the focus now changed to mashup uses. Here mashup uses service and service and mashup is used by mashup mashlet application and widget . Because mashup is now the focus the used by relationship are different. Instead of merely shifting the focus window with the same artifacts to the left the browser discovers the used by and uses relationships of the artifact newly listed in the focus window.

Now when the user selects another artifact shown in the browser the focus shifts to that artifact and the browser display changes according to the newly discovered relationships. For instance and show the same example browser with the focus shifting from mashup to MASHLET component which is a used by artifact .

Referring now to an illustration of a mashup dependency browser when the user selects MASHLET component will be discussed and described. Here artifacts are repeated from . The uses window lists the services data sources which the focus uses. Here mashup uses service and service and mashup is used by mashup mashlet application and widget .

Because the uses selects mashlet such as by clicking in the user interface the focus will shift to change mashlet to become the focus as shown in .

Referring now to an illustration of a mashup dependency browser when the browser puts mashlet in focus and shows its relationships will be discussed and described. Here the same artifacts from the focus window and the uses window are illustrated as in to further illustrate the shift in the focus window of the user interface . However the uses window lists the services data sources which the focus now changed to mashlet uses. Here mashlet uses mashup service mashup and service and mashlet is used by application . Because mashlet is now the focus the used by relationships are different. Instead of merely shifting the focus window with the same artifacts to the left the browser discovers the used by and uses relationships of the artifact newly listed in the focus window .

Thus the Mashup Dependency Browser provides a user friendly way of navigating complex relationships between different artifacts in the mashup platform by leveraging the meta data captured and inferred by the system and the rich APIs exposed by the mashup dependency system.

In a mashup for example Presto software available from JackBe Corporation the mashup application allows a user to collect data components from different sources and combine them. Content within the mashup describes how the components which are collected are to be combined.

Referring now to a block diagram illustrating portions of an exemplary computer system will be discussed and described. The computer system may include a communication port and or transceiver or the like for communication with a mashup server a processor a memory a display interface a display an input interface and or a user input device such as a keyboard trackball mouse joystick pointing device and or similar.

The mashup server can be a part of a mashup platform comprising the mashup server and a mashup client which can execute on the processor of the computer system . Mashup server and mashup client functions can be distributed between the mashup server and the mashup client according to known techniques. The mashup server can invoke one or more web services as an information providing services as is known to obtain data from a data source. Also the mashup server can access a mashup security database on which security profiles such as permissions associated with each mashup can be stored and can access a database storing a per mashup list of services and mashups used as well as a conventional mashup database . The mashup security database and or the per mashup list of services database can be incorporated into the mashup database .

The processor may comprise one or more microprocessors and or one or more digital signal processors. The memory may be coupled to the processor and may comprise a read only memory ROM a random access memory RAM a programmable ROM PROM and or an electrically erasable read only memory EEPROM . The memory may include multiple memory locations for storing among other things an operating system data and variables for programs executed by the processor computer programs for causing the processor to operate in connection with various functions such as to provide a display of a mashup to get a list of mashups used by a mashup to get a list of mashups used by a mashlet component to store services mashups used by a mashup in a database to introspect a mashup so as to discover the data sources being used to determine security dependencies of a mashup to determine whether a mashup asset can be disposed of to check whether user s have permission to use a mashup to grant revoke permissions to users to use a mashup to traverse relationships of a user mashup a mashup client function and or other processing and a database for other information used by the processor . The computer programs may be stored for example in ROM or PROM and may direct the processor in controlling the operation of the computer system . Each of these functions is considered in more detail below.

The user may invoke functions accessible through the user input device interface with the processor through an input interface . The user input device may comprise one or more of various known input devices such as a keyboard and or a pointing device such as a mouse the keyboard may be supplemented or replaced with a scanner card reader or other data input device the pointing device may be a mouse touch pad control device track ball device or any other type of pointing device and the input interface can be a known interface thereof to communicate with the processor .

The text and or image display is representative of a display that may present information to the user by way of a conventional liquid crystal display LCD or other visual display and or by way of a conventional audible device for playing out audible messages.

Responsive to signaling from the user input device in accordance with instructions stored in memory or automatically upon receipt of certain information via the communication port and or transceiver the processor may direct the execution of the stored programs.

The processor can be programmed for providing a display of a mashup and or a service such as is performed according to known techniques when a user invokes a service or a mashup. As is known the invocation of the mashup or service is performed via the mashup platform which comprises the mashup client and the mashup server sometimes requiring the system to interact with the user to input data and select a service or mashup via the user input device and or display resulting in the mashup or service displaying data generated by the web service which is provided for the display .

The processor can be programmed to get a list of mashups and or services used by a mashup to a first level or recursively over two or more levels. Similarly the processor can be programmed to get a list of mashups and or services used by a mashlet component to a first level or recursively over two or more levels. The list is provided with respect to a single node and includes a list of all nodes which are connected directly or indirectly as used by or uses relationships to the single node. Furthermore the list can indicate the particular relationship i.e. the used by or uses relationship and if not the first level which level and which nodes connected through.

The processor can be programmed to store a list of the services mashups used by a mashup in a database. That is a database can be provided that indicates the direct used by relationships for each of the mashups. Here the database includes a list of services and mashups for Mashup A to Mashup Z. Note that instead of a separate database this can be incorporated into the conventional mashup database .

The processor can be programmed to introspect a mashup so as to discover the data sources being used by a mashup. That is in response to a selected mashup the processor can reference the database storing the list of the services mashups used by a selected mashup. The database can be recursively traversed the predetermined number of one or more levels from the selected mashup to the mashups and services in the list of the selected mashup to the lists for each of the listed services and mashups to discover the data sources which are directly and indirectly used by the selected mashup.

The processor can be programmed to determine security dependencies of a mashup. Specifically in response to a selected mashup the processor can reference the database storing the list of the services mashups used by the selected mashup. The processor can reference the mashup security database for the security profile for the selected mashup and the mashups and services in the list of the selected mashup traversed recursively to the predetermined number of one or more levels away from the selected mashup. Accordingly the processor can determine for example whether a necessary permission is granted to a user or group of users for the mashup and all of its dependencies by reference to the aggregated security profiles for the mashup and all of its dependencies.

The processor can be programmed to determine whether a mashup asset can be disposed of. A mashup asset can be disposed of when no other asset directly or indirectly has a dependency uses relationship to the mashup asset. For example the processor can obtain a list of all nodes which are connected directly or indirectly as uses relationships to the single node which is to be disposed of. If the list is empty that is the selected mashup asset has no uses relationship the selected mashup asset may be disposed of. Known techniques for disposing of an asset may be used.

The processor can be programmed to check whether user s have permission to use a mashup. When a user attempts to use a selected mashup the processor can reference the database storing the list of the services mashups used by the selected mashup and the mashup security database for the security profile for the selected mashup and the mashups and services in the list of the selected mashup traversed recursively to the predetermined number of one or more levels away from the selected mashup. Accordingly the processor can determine for example whether a necessary permission is granted to a user or group of users for the mashup and all of its dependencies by reference to the aggregated security profiles for the mashup and all of its dependencies.

The processor can be programmed to grant revoke permissions to users to use a mashup. Various known techniques can be utilized to grant or revoke permissions. Also the permissions can be stored in a security profile for the mashup such as in the illustrated mashup security database .

The processor can be programmed to traverse relationships of a user mashup. It will be appreciated that the uses and used by relationships form trees connected by a single node in the middle. The trees may or may not be orderly since they reflect relationships selected by users. The tree may be traversed left to right or right to left as illustrated or in a similar manner. The traversal can be visualized with a browser as discussed herein. Alternatively the traversal information can be used to determine permissions to use mashups suitability for managing mashup dependencies or similar.

The processor can be programmed with a mashup client function in accordance with known techniques. That is the mashup platform can be distributed between the mashup server and the mashup client as is known. Details which are not presently relevant are omitted from the present description.

The computer system can include a central processing unit CPU with disk drives not illustrated symbolic of a number of disk drives that might be accommodated by the computer. Typically these might be one or more of the following a floppy disk drive a hard disk drive and a CD ROM or digital video disk. The number and type of drives may vary typically with different computer configurations. Disk drives may be options and for space considerations may be omitted from the computer system used in conjunction with the processes described herein. The computer may also include a CD ROM reader and CD recorder which are interconnected by a bus along with other peripheral devices supported by the bus structure and protocol not illustrated . The bus can serves as the main information highway interconnecting other components of the computer and can be connected via an interface to the computer. A disk controller not illustrated can interface disk drives to the system bus. These may be internal or external.

It should be understood that is described in connection with logical groupings of functions or resources. One or more of these logical groupings may be omitted from one or more embodiments for example the functionality of analyzing a trend over time in the aggregated data can be omitted and or performed on a different processor. Likewise functions may be grouped differently combined or augmented without parting from the scope. Similarly the present description may describe various databases or collections of data and information. One or more groupings of the data or information may be omitted distributed combined or augmented or provided locally and or remotely without departing from the scope of the invention.

Referring now to a flow chart illustrating a procedure to get a list of mashups or services will be discussed and described. The procedure can advantageously be implemented on for example a processor of a computer system optionally together with a mashup server such as described in connection with or other apparatus appropriately arranged.

In overview the procedure to track trends conveniently can be distributed in two flows the first flow get list of mashups or services A as a user application and the second flow get list of mashups or services B as a background process.

The first flow can include inputting a request to display a mashup or service and its dependencies. Standard techniques may be used to prepare a user interface that interacts with the user to select an artifact such as a mashup which is to be the focus for the browser. The first flow can then instruct the flow B to obtain the list of dependencies for the selected artifact and can wait to receive the returned list of dependencies which can then be displayed .

The second flow get list of mashups or services B can include in response to a request to browse a particular mashup or service initializing a current artifact to the currently selected mashup or service . The flow B can get the list for a single level of dependencies that is just one uses and one used by level directly adjacent to the selected mashup or service . Alternatively the flow B can be set to recursively obtain the dependencies to two or more levels thereby traversing more of the tree left and right. The recursion can be preliminarily set for example by indicating a maximum number of recursions to one or more as desired . To get the list the flow B gets the identity of all artifacts mashups widgets applications and or services which are used by the current artifact. If the maximum number of recursions has not been reached the second flow B can traverse to each of the next artifact left or right used by the current artifact and for each of the next artifacts repeat to obtain the identity of the artifacts used thereby.

Accordingly the second flow B can create a list consisting of the mashup or service and its dependencies that is the uses and used by relationships. The second flow B can return the list to the first flow A which can display the list to the user and or interact with the user for further browsing of dependencies. Once the second flow B is done creating the list of the mashup and its dependencies the process can end . Similarly once the first flow A is done displaying the mashup or service and its dependencies the process can end .

For the purpose of this patent application a mashup is defined as a software application that combines pre existing components from one or more information providing services into a single tool which can comprise a server side and a client side application where the components used by the mash up are visually presented to a user on a display at the client side in a manner which is different from the pre determined presentation of the information providing service and is configured in accordance with standards such as Enterprise Mashup Markup Language EMML XML interchanged as REST or Web Services RSS Atom and other evolutions and variations of mashup standards. A mashup is to be distinguished from a portal in which content is presented side by side in the manner which is the same as the pre determined presentation of the information providing service. The designation component as used in this paragraph refers to data which is retrieved by a mashup in real time from an information providing service. A mashup is frequently made by access to open APIs and other data sources to produce results that were not the original reason for producing the raw source data. An example of a mashup is the use of cartographic data from Google Maps to add location information to real estate data thereby creating a new and distinct Web service that was not originally provided by either source.

The designation MASHLET used herein refers to type of a mashup that is a client side process that runs in the browser a MASHLET sometimes can include a widget. A MASHLET is available from JackBe Corporation. The phrase MASHLET component refers to a mashup widget which is included in a MASHLET.

The term service sometimes referred to herein as an information providing service is used herein expressly to refer to an information providing service that provides data from a server in a visual presentation on a display to a user typically an application programming interface API or web API that can be accessed over a computer network and executed on a remote system hosting the requested services in accordance with Extensible Markup Language messages that follow the Simple Object Access Protocol SOAP standard such as SOAP Version 1.2 specification Web Services Description Language WSDL such as Web Services Description Language Version 2.0 Specification Representational State Transfer REST constraints and variations and evolutions thereof. An example of a service is Google Maps a Web service or an RSS feed.

The term widget as used herein is defined to be a stand alone application which comprises a portable chunk of code that can be installed and executed within a separate HTML based web page by an end user without requiring additional compilation. A widget frequently is written to use DHTML JavaScript or Adobe Flash variations and evolutions thereof. Widgets often take the form of on screen tools clocks event countdowns auction tickers stock market tickers flight arrival information daily weather etc. .

It should be understood that the invention is described in connection with logical groupings of functions or resources. One or more of these logical groupings may be omitted from one or more embodiments and still remain within the scope of the present invention. Likewise functions may be grouped differently combined or augmented without parting from the scope of the invention. Similarly the present description may describe various databases or collections of data and information. One or more groupings of the data or information may be omitted distributed combined or augmented or provided locally and or remotely without departing from the scope of the invention.

A computer readable storage medium is tangible and can be any of the memory or disks such as those examples described above or other removable or fixed storage medium.

The foregoing detailed description includes many specific details. The inclusion of such detail is for the purpose of illustration only and should not be understood to limit the invention. In addition features in one embodiment may be combined with features in other embodiments of the invention. Various changes may be made without departing from the scope of the invention as defined in the following claims.

As one example the computer system may be a general purpose computer or a specially programmed special purpose computer. It may be implemented as a distributed computer system rather than a single computer. Similarly a communications link may be World Wide Web a modem over a POTS line and or any other method of communicating between computers and or users. Moreover the processing could be controlled by a software program on one or more computer system or processors or could even be partially or wholly implemented in hardware.

Further the invention is not limited to particular protocols for communication. Any appropriate communication protocol may be used.

One or more displays for the system may be developed in connection with HTML display format. Although HTML is the preferred display format it is possible to utilize alternative display formats for interacting with a user and obtaining user instructions.

The above discussion has involved particular examples. However the principles apply equally to other examples and or realizations. Naturally the relevant data may differ as appropriate.

Further the above has been discussed in certain examples as if made available by a provider to a single customer with a single site. The above described system device and or method may be used by numerous users over distributed systems if preferred.

The above has been described in connection with example data formats for example XML and or proprietary or public formats. However it may be used in connection with other data formats structured and or unstructured unitary and or distributed.

The system used in connection with various embodiments may rely on the integration of various components including as appropriate and or if desired hardware and software servers applications software database engines server area networks firewall and SSL security production back up systems and or applications interface software. The configuration may be preferably network based and optionally utilizes the Internet as an exemplary interface with the user for information delivery.

The various databases may be in for example a relational database format but other standard data formats may also be used. Windows 2007 for example may be used but other standard operating systems may also be used. Optionally the various databases include a conversion system capable of receiving data in various standard formats.

Accordingly one or more embodiments provide a system method device and or computer readable storage medium which comprises providing a mashup including a relationship API wherein the relationship API is as described above. Also one or more embodiments provide a system method device and or computer readable storage medium which comprises providing a mashup including a security API wherein the security API is as described above. Also one or more embodiments provides for capturing inferring and or navigating dependencies between mashups and their data sources and consumers wherein the dependencies are expressed in a relationship API and or a security API.

It should be noted that the term computer system used herein denotes a device sometimes referred to as a computer laptop personal computer personal digital assistants personal assignment pads or equivalents thereof provided such units are arranged and constructed for operation with a mashup or service.

Furthermore the communication networks of interest include those that transmit information in packets for example those known as packet switching networks that transmit data in the form of packets where messages can be packetized and routed over network infrastructure devices to a destination. Such networks include by way of example the Internet intranets local area networks LAN wireless LANs WLAN wide area networks WAN and others and can be supported by networking protocols such as TCP IP Transmission Control Protocol Internet Protocol and UDP UP Universal Datagram Protocol Universal Protocol and or other protocol structures and variants and evolutions thereof. Such networks can provide wireless communications capability and or utilize wireline connections such as cable and or a connector or similar.

This disclosure is intended to explain how to fashion and use various embodiments in accordance with the invention rather than to limit the true intended and fair scope and spirit thereof. The invention is defined solely by the appended claims as they may be amended during the pendency of this application for patent and all equivalents thereof. The foregoing description is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications or variations are possible in light of the above teachings. The embodiment s was chosen and described to provide the best illustration of the principles of the invention and its practical application and to enable one of ordinary skill in the art to utilize the invention in various embodiments and with various modifications as are suited to the particular use contemplated. All such modifications and variations are within the scope of the invention as determined by the appended claims as may be amended during the pendency of this application for patent and all equivalents thereof when interpreted in accordance with the breadth to which they are fairly legally and equitably entitled.

