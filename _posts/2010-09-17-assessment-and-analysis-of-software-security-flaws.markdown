---

title: Assessment and analysis of software security flaws
abstract: Security analysis and vulnerability testing results are “packaged” or “bound to” the actual software it describes. By linking the results to the software itself, downstream users of the software can access information about the software, make informed decisions about implementation of the software, and analyze the security risk across an entire system by accessing all (or most) of the reports associated with the executables running on the system and summarizing the risks identified in the reports.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09069967&OS=09069967&RS=09069967
owner: Veracode, Inc.
number: 09069967
owner_city: Burlington
owner_country: US
publication_date: 20100917
---
This application is a continuation in part of and claims priority to and the benefits of U.S. patent application Ser. No. 12 819 627 filed on Jun. 21 2010 now abandoned which is a continuation in part of and claims priority to U.S. patent application Ser. No. 12 031 918 filed on Feb. 15 2008 now U.S. Pat. No. 8 499 353 which claims priority to and the benefits of U.S. provisional patent application Ser. No. 60 901 874 filed on Feb. 16 2007. This application also claims priority to and the benefit of U.S. provisional patent application Ser. No. 61 243 735 filed on Sep. 18 2009.

In recent years many companies and government agencies have been exposed to negative press and legal proceedings due to high profile security breaches in which sensitive data has been either inadvertently disclosed or stolen. While many of these incidents were the result of human error a significant percentage was traced back to poorly designed software architecture and or applications. Conventional techniques for testing software applications can identify many vulnerabilities but no one methodology is failsafe. Furthermore although many security analysis techniques require significant time and resources to administer not every application necessitates the same level or degree of analysis.

As a result companies face a difficult trade off between the desire to test software and limitations on available resources and time. Moreover many companies do not have the expertise to apply some of the more intricate and complex security assessment techniques and thus look to industry experts for such services. This creates yet another challenge in that often what is being tested is highly sensitive proprietary software.

There are a myriad of testing and assessment techniques for validating various properties of software applications and network implementations. However one of the most critical processes for ensuring that the deployment of software does not expose an organization to unacceptable risks is security and vulnerability testing. Some of the conventional techniques used to perform such testing includes static analysis automated code review dynamic analysis automated penetration testing and manual analyses such as code review design review and manual penetration testing. All of these analysis techniques are aimed at finding security weaknesses and vulnerabilities in an application and typically provided in report format to the programmers product managers and quality assurance QA staff. The report can provide detailed results e.g. program names line numbers variable names data connections etc. as well as a summary of the results. The report may be a conventional document such as a text file or a structured XML file.

However once the report is run and reviewed by a QA engineer or product manager it is typically no longer referenced or used. Furthermore as an executable or application is implemented and or provided to a customer the report is forever decoupled from the software that was tested. In fact an individual or organization using software has no knowledge that a report was ever created or used to analyze the software they are now using.

As such valuable information about what aspects of the application were tested how secure certain features or functions may be and what testing methodologies were used are unknown to those that value such information. What is needed therefore is a system and associated techniques that can not only produce vulnerability and security test reports using various testing methodologies but can create and maintain links between the application and its test results as the applications are deployed and throughout their lifecycle.

In general the present invention facilitates security assessment and vulnerability testing of software applications in a manner responsive to the technical characteristics and the business context in which the application operates collectively application metadata . The invention may for example determine an appropriate assurance level and test plan to attain it. In many instances a test plan may dictate performance of different types of analyses. In such cases the individual tasks of each test are combined into a custom or application specific workflow and the results of each test may be correlated with other results to identify a wide range of potential vulnerabilities and or faults that are detected by the different tests. As such a programmer reviewing the results can better understand how different potential vulnerabilities may relate to each other or in fact be caused by a common flaw.

Furthermore once an application is deployed the universe of threats that may impact the application continues to expand and therefore the platform preferably provides the infrastructure and methods for continuous periodic or event triggered application assessments even as the application operates in a secure production environment. Application users and or owners may also simultaneously view both the application infrastructure e.g. source code architectural components object code abstractions user case diagrams UML diagrams and or website maps as it exists in their operational environments and the results of the periodic security assessments which can remain stored within the analysis platform. For example in one implementation the analysis platform runs on a server accessible to the application user via the Internet. The server periodically uploads or otherwise accesses the application performs a security analysis and alerts the user to the results. Application owners and or users may access the results of this and previous assessments which are stored on or retrievable by the server.

Accumulating both application specific metadata and security analysis and assessment results for numerous applications from many companies facilitates benchmarking of applications against other applications at many levels within an organization. Use of various anonymizing and scrubbing techniques i.e. removing any information that could be deemed proprietary and or identify an application s user or owner permits the sharing of assessment data among otherwise unrelated entities. Benchmarking may take place on a global scale i.e. across all applications being monitored within particular subsets of applications e.g. those from a specific industry and or working with a specific technology or based on personnel e.g. for a particular developer team organization or company .

Therefore in a first aspect a computer implemented method for providing access to security data related to a software application includes creating a programmatic association between results of security analysis tests performed against a software application and the software application and storing the results for subsequent electronic access. Further instructions to access the results are provided such that users of the software application may review the results on demand.

The software application may include object code distributed over a network in which case the results may be distributed with the executable object code. In other cases the software application may be an application package and the results are included in the application package. The software application may also be a web based service accessible over a network and or a collection of unrelated computing functions available over the Internet. The results may be stored in a centralized database access to which may be limited based on user authentication credentials. In certain cases the database stores results from multiple software applications such that the results for each software application are individually accessible based on a unique key. The results may be displayed and or transmitted to the user over a network encrypted in some cases and done so in response to a query submitted to the database. In some implementations a hash function is used against at least a portion of the software application. The computed hash may then be included with the distributed application and upon receiving a request from the user to view the results that includes the hash the hash may be used to identify and access the results. In some cases the instructions to access the report comprise a URL directing the user to the report which may be formatted as an XML document having predefined tags.

In another aspect a system for providing access to security data related to a software applications includes testing engines for performing a plurality of vulnerability tests on the software applications and associating results of the tests with the respective application. The system also includes a database for storing the results and a communications server for receiving a request from a user of one of the software applications to access the results associated with the application and based on the received request provide and in some cases display and or transmit the results associated with the application to the user.

The software application may be executable object code and distributed over a network and in some cases an application package such that the results may included in the application package. In other instances the software application may be a web based service accessible over a network and or a collection of unrelated computing functions available over the Internet. The results associated with each software application may be individually accessible based on a unique key. For example the testing engine may compute a hash of at least a portion of the software application and the communication server then includes the hash with the distributed application. Upon receiving a request from the user to view the results that includes the hash the communications server and database use the hash to identify and access the results.

Other aspects and advantages of the invention will become apparent from the following drawings detailed description and claims all of which illustrate the principles of the invention by way of example only.

The techniques and supporting systems described herein provide a comprehensive and customizable approach to detecting security flaws in software applications recommending remedial courses of action and reporting and benchmarking against for example industry wide statistics other developers and or other development teams from within or outside of an organization. Software applications may include but are not necessarily limited to any sort of instructions for a machine including for example without limitation a component a class a library an script an applet a logic table a data block or any combination or collection of one or more of any one or more of these. An appropriate level type and frequency of security analysis needed for a software application may depend on many factors including but not necessarily limited to the technical details of an application e.g. the language in which it is written and the platform on which is to be deployed as well as the business context in which the application operates. For example an application that is customer facing and facilitates high volume secure transactions such as banking or ecommerce will require rigorous testing to ensure that customer data is not jeopardized. Conversely applications such as document control systems or desktop applications that are implemented entirely within an organization and operated behind secure firewalls require less stringent testing. Therefore balancing the added costs for executing additional security assessments and testing with the risks of potential for losses is critical

The analysis engine receives application code and programs from users either via the entity operating the platform or directly from customers using the platform as a subscription service. The analysis engine interacts with various testing engines and code review modules as well with assessment and threat databases and includes benchmarking and reporting capabilities for comparing assessment results among applications developers teams and or organizations. In one embodiment for example the analysis engine interacts with a dynamic testing engine a static testing engine a pen testing engine and a module for performing manual code review .

More specifically the dynamic analysis engine interacts with the application as an external entity and executes the application in a manner that mirrors or emulates the runtime environment in which it operates. In some embodiments the dynamic analysis engine receives a description of the interfaces to the application sends test and or simulation data to the application via the interfaces and analyzes the received responses. The test data may be application specific e.g. provided with the application as a library data file or structured input or application agnostic such as data and or scripts known to exploit application vulnerabilities. Based on the responses the dynamic analysis engine determines whether any security defects exist in the application and the extent to which it may be vulnerable to certain threats. The defects may be reported in real time e.g. via the communications server and or stored in a database for subsequent analysis and reporting.

The static analysis engine receives a binary or bytecode version of the application as input. For example a high level semantic model of the application is created containing control flow and data flow graphs of the application and this model then analyzed for quality defects including security flaws by a set of analysis scans.

The pen testing engine performs penetration testing of the application . Penetration testing includes for example simulating and analyzing various web based interactions between a client and the server on which the application operates. This includes executing standard HTTP commands such as GET and POST analyzing FORM elements and scripting elements both client and server side and manipulating inputs to elicit known vulnerabilities.

The analysis engine may also receive input from manual review processes executed using a manual code review module . Manual review processes typically include a human operator visually reviewing source code to determine if proper coding form and standards have been followed and looking for extra functions often left in applications such as trap doors easter eggs and similar undocumented functionality.

For web based applications a dynamic web scan may be used to crawl through the application by manually navigating the web site to be tested. In this manner a person or automated bot interacts with all or some selected subset of the user interface elements and enters valid data. In some cases pre defined invalid data either in format or substance may be included to test the application s response. In some cases an automated testing process such as a regression test harness may also be used. During the crawl a browser plug in or a proxy running on the client records all web requests to and responses from the web application. After the crawl has successfully navigated the web application the recording process is stopped. The recorded requests and responses may be uploaded to the analysis engine . In some instances the crawl may be performed by the entity operating the platform whereas in other instances the crawl may be performed by the owner of the application being tested and the resulting data and application loaded into the platform together.

The data scripts and functions used to operate the various testing engines and the analysis engine may be stored in a security threat database . The database may be operated as a stand alone server or as part of the same physical server on which the analysis engine operates. Portions of the threat database may in some cases be provided by entities other than the entity operating the platform on a subscription basis allowing the database to be kept up to date as threats and malware evolve over time. Likewise the results of each test and the overall analysis process may be stored in an assessment results database . In some embodiments the applications and analysis results are stored in an encrypted format using a unique key provided to the owner of the analyzed application such that only it can access and review the results of the analysis. In such cases decryption of the analysis is limited to authorized personnel and all traces of the analysis are deleted from memory other than the database following completion.

Examples of database applications that may provide the necessary features and services include the MySQL Database Server by Sun Microsystems the PostgreSQL Database Server by the PostgreSQL Global Development Group of Berkeley Calif. or the ORACLE Database Server offered by ORACLE Corp. of Redwood Shores Calif.

More specifically the assurance recommendation engine receives applications and application metadata and automatically determines various characteristics of the application. For example the recommendation engine may recognize the programming language used to write the application specific libraries used within the application the development environment used to build the application application programming interfaces APIs available to users the size of the application as well as other technical qualities. Moreover the entity responsible for submitting the application which may be the owner of the application a licensee or an end user may provide additional business context information such as the required availability e.g. 99.99 uptime expected throughputs or transaction volumes types of users who will operate the application whether the application will be exposed to the public the operating system in which the application executes other applications with which the application interacts and others.

The metadata is supplied by the entity operating the platform the owner of the application or in some cases may be provided by a third party. In such cases the metadata may include information related to the specific application a group of applications e.g. all banking applications within a retail bank an enterprise wide collection of applications or in some cases industry wide data.

The recommendation engine considers these technical and business characteristics and application metadata and determines a recommended assurance level. As described in more detail below the assurance levels are used by the workflow constructor to define an assessment workflow based on various testing techniques such as dynamic application testing static binary testing automated and manual pen testing as well as manual code review.

Once a workflow has been established by the workflow constructor a workflow engine submits the application to the various testing engines. The results of these tests may include such items as error rates specific occurrences of errors compliance with industry standards as well as other data. The assessment correlation engine correlates the different test results received from the testing engines and organizes them by application module and type of error identifies duplicates and recognizes correlations among different errors.

The analysis engine also may include a grading and reporting module that includes a benchmark module an anonymizer and a flaw viewer . The benchmark module compares the testing and analysis results for one or more applications having similar application profiles and or metadata. This allows the application s owner to see how the application s architecture and security features measures up against other similar applications.

In some instances the benchmark engine calculates and compares test results at a more granular level. For example an organization may wish to determine which of its developers or development teams produces the best code the most secure applications or is most prone to development errors. By including information such as the code author development group and or other organizational information the platform may be used within a company to identify core strengths and or key weaknesses.

The anonymizer removes company specific information from the results and or aggregates the results such that they may be provided to subscribers or the public in general. In this manner the platform provides global view of software development and implementation trends related to security and vulnerability testing across a wide spectrum of industries and technologies.

As an example a bank may be developing a new customer service application that allows its clients to execute transactions via the Web. Based on the technology used to develop the application e.g. Active Server Pages java PHP the fact that the application is available to the general public and the information transmitted is highly sensitive account numbers PINs etc. the assurance recommendation engine may determine that this application be tested as fully as possible. Each testing engine will then process the application either remotely or as received at the platform and the results are correlated into a comprehensive assessment report. Once completed project managers at the bank may log into the platform using secure IDs and passwords biometric authentication PKI techniques or other such methods and using the flaw viewer review and comment on any vulnerabilities identified during testing. On some cases the project managers may also see how the application fared against similar applications submitted by other banks.

In some embodiments the vulnerability and quality scans are performed during the development of an application and as such the results may be shared with the development team in real time. This allows programmers and project managers to be apprised of potential flaws in their code prior to system testing or deployment greatly reducing the time and cost to implement large scale systems. In some cases ongoing trends derived from industry wide statistics e.g. a bank s peer group is shifting to a newer more secure java framework or has migrated from MySQL to Oracle are provided to help guide developers efforts. In other instances the prevalence of certain code across an enterprise or industry e.g. commonly used open source components for example is tracked over time and periodic updates may be sent to developers know to be using the code if newly discovered issues technical legal or both are identified.

Regardless of the implementation the method of implementing and distributing the various components of the platform is arbitrary. For example in some implementations all components of the platform may be completely contained within an organization e.g. within a firewall accessible via a VPN or intranet and available as an on demand service as part of an overall development methodology. In other embodiments the platform may be implemented as a web based service available to numerous organizations that subscribe to the platform and are therefore able to subject their software applications to structured security assessment testing on an as needed basis. Furthermore various anonymizing or aggregation techniques can be used to remove or otherwise protect proprietary information and or data that would identify the application owner. Assessment results from numerous applications across industries technical platforms application sizes etc. can be extracted to provide cross entity benchmarking data to platform subscribers. In addition analysis of the assessment results and subsequent monitoring of the applications for undetected security flaws or unexpected operational reactions to certain threats for example allow the platform and specifically the workflow engine to be refined and improved. By operating the platform as a centralized yet secure resource for multiple entities assessment data can be used for historical and industry benchmarking as well as to upgrade the techniques used to determine assurance levels and built appropriate workflows.

In such cases the need to securely transmit application code both binary and source to and from the platform is crucial. One method for implementing the needed security measures is via digital rights management DRM . In general DRM refers to various access control technologies used by publishers and copyright holders to limit access to and or usage of digital media or devices. Just as DRM is used to protect conventional copyrighted material e.g. audio and video content it may also be employed to protect source and binary code of an application as well the analysis and testing results generated by the platform . More specifically a DRM packager may be used to encrypt some or all of the application information and produce a key to decrypt the information. A DRM engine executes the encryption and decryption functions that allow users to securely view application data via a remote device. Further operational and functional characteristics of DRM modules are set forth below.

Referring now to one embodiment of the assessment and recommendation techniques of the invention includes three phases a data collection phase an assurance level determination phase and a workflow build phase. More specifically the data collection phase includes collecting technical details STEP about the application such as the platform on which it will be built and or implemented the network topology over which it will operate the language or languages used to develop the application third party applications or modules the application will interact with or use the security environment in which the application will operate as well as other application characteristics. In addition the business context in which the application will operate is determined STEP and combined with the technical details to produce an application profile P. In one non limiting example some or all of the business factors identified in the Federal Information Processing Standard FIPS i.e. damage to reputation financial loss or business liability harm to business interests unauthorized release of sensitive information personal safety civil liability and potential criminal violations can be used as guidelines for measuring the security risks in light of the business context of the application. Each of the FIPS factors can be assigned a rating e.g. as n a minimal moderate or serious and in some embodiments certain factors are weighted more than others according to relative importance e.g. as defined by a user or industry standards . For example an application that processes healthcare data including personally identifiable information may accord a rating of serious to factors such as damage to reputation liability unauthorized release of sensitive information and criminal liability but n a for personal safety. In instances in which this analysis has previously been done and an assurance level already determined that assurance level can be imported STEP and in some circumstances updated if necessary.

If an assurance level was provided with the application as part of the data collection phase DECISION STEP the analysis workflow can be built. Otherwise the assurance recommendation engine reviews the application profile P and determines an appropriate assurance level STEP . One approach for determining an appropriate assessment level is to consider the ratings assigned to each of the business context factors and select an appropriate assurance level based on the highest rating. For example if any of damage to reputation financial loss harm to business interests release of sensitive information or civil or criminal violations are rated serious the highest assessment level is recommended. If however all factors are either minimal or n a except for e.g. the civil violations factor which is assigned a moderate rating a lower but still relatively high assurance level is specified. Table 1 below summarizes one possible mapping of business impact factors and their ratings to recommended assessment levels.

The recommended assurance level and in some cases options to modify the level can then be presented to the user STEP who selects the assurance level STEP for the particular application.

In the workflow build phase varying combinations of analysis techniques can be used to adapt a security review workflow to the particular technical and business criteria of an application with one key goal being the reduction of false negatives i.e. undetected security flaws. Different types of analysis e.g. automated manual static dynamic etc. have different false negative rates because they are either unable to detect particular security defects 100 false negative rate or they have varying levels of false negatives depending on the threat. As a result introducing additional security analysis processes into the workflow lowers the false negative rate. But multiple analysis techniques require the expenditure of more time and resources and so should be integrated into the workflow when they contribute meaningfully to the overall reliability of the analysis or to lower the false negative rate below a predetermined threshold.

In one implementation the workflow W is constructed STEP by selecting different analysis techniques from the following table. The higher the desired assurance level the more analysis techniques are recommended. The analysis techniques are arranged according to the time and resources estimated to perform the analysis thereby minimizing costs and only introducing more stringent analyses when the impact of a security event is greater. Once the workflow is determined and approved by the user the various analysis techniques are performed. Table 2 below illustrates how various analysis techniques may be used against applications with different assurance levels.

Combining multiple types of application analysis generally produces a broader application vulnerability profile. For example combining binary static analysis and dynamic analysis techniques provides increased accuracy and more informative analysis results because the outcome of a binary static analysis can be used as input into a secondary dynamic analysis. The dynamic analysis process itself produces two results a dynamic assessment and a static coverage map. The static coverage map contains each dynamic path used to reach a flaw detected during the static analysis.

The static results dynamic results and static coverage map are used to produce a report of static flaws not pathed lowest priority static flaws with a dynamic path high priority and dynamic flaws not related to the portions of the application that have been statically analyzed e.g. environment configuration . The data flow and control flow graphs generated by static analysis may also be used to compute a dynamic test case for each identified flaw. In such cases input data and an input vector may be generated that will recreate and retest each flaw dynamically to determine if the flaws have been addressed. More specifically and with reference to the following steps can be performed to combine results from both the static and dynamic testing 

In some embodiments continuous application assurance provides for automatic re analysis of an application. Re analysis is triggered by changes in the external application environment e.g. threat space business intelligence detected attacks and or the implementation of enhanced analysis capabilities e.g. a new scan has been added to an analysis workflow to detect new class of vulnerability . An intelligent re analysis decision can be made by taking into account factors such as application profile previous vulnerability assessment results and the type of change e.g. threat and or scan capability .

A decision to initiate a re analysis can be based for example on an application s technological profile metadata describing the application s functionality the deployment environment of the application new information about vulnerabilities that may affect the application and or increases in a likelihood of a threat. External data feeds and internal scan capabilities database are used to trigger rescans of the application. For example suppose a new vulnerability is discovered in how data is transmitted and processed using XML and Web Services that did not exist when the application was first scanned. All applications having metadata that includes both XML and Web Services are identified and the relevant analysis workflows are updated with the new scan information and re processed.

In one embodiment with reference to the initial steps for an application specific or customer driven rescan include 

In some implementations the rescanning process may be implemented as a required step for submitting code or applications to a third party application platform. For example an entity that provides a suite of community developed applications for its communications and entertainment devices e.g. the AppStore by Apple may as a condition for offering an application require the application be scanned prior to being made available to the public. The scan may be done prior to an initial upload as well as on a periodic basis. In some instances the scan may not be required but a recognizable label e.g. an icon or image is shown alongside the application to indicate that it has been scanned for potential vulnerabilities. In other cases a user may be offered the application for free but if they want the additional assurance of having the application scanned may pay a nominal fee e.g. 2.99 .

In addition to single application rescans as described above a platform wide rescan may also be initiated in which multiple applications possibly owned and or operated by unrelated entities are rescanned. In addition application owners may subscribe to a periodic and or event driven rescan service that continuously determines if rescans are necessary and if so performs the appropriate analysis. More specifically and referring to one method for implementing a global rescan includes the following steps 

In some embodiments in which a static binary analysis is performed remotely e.g. within the security assessment platform separate from the operational environment in which the application is implemented or where its source code is stored the results of the binary analysis can be linked to the original application source. These results are typically stored and managed securely on within the platform but can be viewed by a remote user together with local application source code using a viewer application.

Referring to one method for providing simultaneous viewing of identified application flaws along with the application source code that caused the flaws can include the following steps 

In some embodiments the platform provides a common repository for application metadata as well as assessment results for numerous applications across a variety of technical and business implementations and or of known quality. By maintaining such a database the platform can provide cross application reporting that compares a particular application or family of applications to others in the same industry to applications that use the same technology and or based on other criteria rendering one class of application relevant to another. In some instances assessment results may be compared to those generated by a template application to determine the quality of the application as compared to an application of known quality. Such reporting referred to as peer benchmarking allows an organization to gauge the effectiveness of its own security initiatives relative to other companies in the same industry. Because the assessment platform provides consistent and repeatable security analysis techniques a common assessment vocabulary and a large sample size the information provided to users has a greater global relevance than individual application assessment data.

Referring to one method for providing peer benchmarking reporting to users of the platform includes the following steps 

Once the results database is populated with assessment results from a sufficient number of applications users can specify and view various reports. Some reports for example can indicate how statistically an application compares to its peers by indicating the percentage of all assessed applications or some subset thereof that resulted in fewer potential vulnerabilities. In one example with reference to the benchmark reporting process can include the following steps 

The vulnerability assessment process consumes and produces data that is considered highly confidential by most organizations. For example input into the analysis phase can include application source code application binaries and debug symbols and or environment data URLs usernames passwords site maps . Because of the sensitive nature of this data and because they indicate potentially exploitable security flaws in the associated application provision is desirably made to keep the analysis results confidential. In instances in which the platform is operated as a centralized offsite service the need to secure this sensitive information becomes even more crucial. In various embodiments the DRM packager and engine provide the following capabilities 

Using the DRM engine steps may be taken to protect the initial data provided as input to the assessment process as well as the analysis results. Once the submission data has been packaged into a secure container access is granted to the trusted analysis application for the duration of the analysis. Analysis results can then be packaged into a secure container for remote viewing. A trusted secure viewer application in conjunction with the DRM Client engine and access token ensures that the analysis results are viewed by authorized users and prevents unauthorized copying via printer cut paste print screen or file copy.

Referring to the following steps provide the secure receipt and analysis of application source files and assessment data to and within the platform 

Referring to once the analysis data is stored in the database it can then be packaged and transmitted using similar DRM techniques and the following steps 

In some implementations security analysis and vulnerability testing results may be packaged or bound to the actual software it describes. In some cases the software may be a commercially available product delivered via traditional methods such as CD ROM or download whereas in other cases the software may be a website or collection of websites that provide the software and or services over the Internet commonly referred to as software as a service or SaaS . In still other cases software may refer to a collective of otherwise unrelated applications and services available over the internet each performing separate functions for one or more enterprises i.e. cloud computing . By linking the report to the software itself downstream users of the software can access information about the software make informed decisions about implementation of the software and analyze the security risk across an entire system by accessing all or most of the reports associated with the executables running on the system and summarizing the risks identified in the reports.

Numerous techniques may be used for binding the report to and or associating the report with the executable. In some implementations for example the binding can be weak in that the executable name and version number are listed in the report and referenced either manually or automatically. If the report information is accessed programmatically an executable a query can be submitted to a database storing a collection of software security reports and the desired report retrieved. The database may be private e.g. behind a firewall and accessible only to authorized users or employees or public and made available via the Internet to the general population for query and review.

In other instances the report may be loosely bound to the software by computing a cryptographically secure hash of the software and including the hash in the body metadata or header of the report. In such cases users of the software are provided with a hash program that computes the required hash and submits the hash as a lookup key to a database of reports. In this instance the reports remain somewhat decoupled from the software as there may be many report providers and the reports may be updated over time without needing to redistribute the software which is desirable given the ever changing threat landscape.

In another implementation a strong binding between the software and its vulnerability report uses a URL as a unique reference address of the report or in some cases the report is embedded alongside software binaries in environments that support application packages. While not as flexible as the weak or loose techniques described above no lookup is needed and the report can travel with the software. For environments that support application packages WAR EAR JAR Mac OS X app packages the report is a file alongside the manifest in the bundle.

The vulnerability reports can be expressed in an XML format so that automated processes can query the report based on predetermined tags and find the information needed to make security decisions regarding the executable. The report may be cryptographically signed by the report provider so that tampering with the report contents can be detected particularly important when the report is embedded in the binary or included in an application package. An example of XML that may be used to generate a report or a portion of a report is provided in the table below 

One example of an automated process that references a bound vulnerability report may include a whitelisting agent operating as software. The software agent may execute on a server or client including hand held devices smart phones PDAs and the like. Procedurally the agent computes the hash value for the executable for which it is attempting to validate and sends the hash to its whitelist database. If the hash is in the whitelist the executable is permitted to execute or be installed copied transferred or otherwise used . Conventional whitelisting databases only consider software provenance when making a binary decision whether to allow the software to execute if the provenance is known it runs if not the software is not executed. In contrast the whitelist agent described herein takes advantage the software security report to make a more informed decision based on numerous data points. For example an overall software quality rating or the number and type of known security defects may affect the decision whether to execute the software or not or under what conditions the software may be executed.

For example an organization may have a policy stating that a web application on the external network cannot have any cross site scripting XSS vulnerabilities yet software running on the internal network may allow XSS vulnerabilities. The policies used by the whitelisting agents running externally can refer to the software security report for a count of XSS defects and if the count is non zero restrict the execution of the software.

In other cases the security report may be used to verify that proper change and release processes were followed for new versions of the software. In a controlled change and release process decision gates may be used to control a release of the software into a production environment or for use as a gold disk for reproduction. With the report bound to an executable an automated scanning application may investigate a production environment and verify the efficacy of the change and release process by ensuring that all deployed binaries have a recent report and a valid security rating.

In another example in which software is distributed through a central repository e.g. SourceForge iTunes App Store BlackBerry AppWorld Android Marketplace etc. bound security reports offer a higher assurance level to the consumer because the application has been rated for security and not tampered with prior to downloading. In some instances the reports may be made available through the same central repository. In certain instances the software vendor may make one version of the application available for free or a reduced price but another version that includes the security report or access to it available at a higher price as some customers may appreciate the added value and security that access to the report and data provides.

The bound security report may also be used in conjunction with an application installation process for desktop or server applications. Where today operating systems such as Windows Vista alert the user if an unsigned application is to be installed a future system might detect the presence of a ratings report and display it or alert to the absence of a ratings report. Similarly bound security reports may be used to strengthen browser security policies by providing more information about the applet to be run.

The invention can be embodied in other specific forms without departing from the spirit or essential characteristics thereof. The foregoing embodiments are therefore to be considered in all respects illustrative rather than limiting on the invention described herein.

