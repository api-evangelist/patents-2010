---

title: Ruleset implementation for memory starved systems
abstract: Provided are techniques for retrieval of data from a data store, including techniques for receiving a request for a dataset corresponding to stored data, generating a first handle to the dataset, generating a plurality of parameters corresponding to the dataset, such that each parameter of the plurality of parameters corresponds to a distinct subset of the dataset, generating a first internal handle based upon the first handle and corresponding to a first parameter of the plurality of parameters, executing a data retrieval request based upon the first internal handle to retrieve a first subset of the dataset, receiving a navigation request corresponding to the first internal handle, navigating, if possible, the first subset in accordance with the navigation request and, when navigating the first subset in accordance with the navigation request is not possible, generating a second internal handle corresponding to a second parameter of the plurality of parameters.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08442993&OS=08442993&RS=08442993
owner: International Business Machines Corporation
number: 08442993
owner_city: Armonk
owner_country: US
publication_date: 20101116
---
The claimed subject matter relates generally to memory management in a computing system and more specifically to the management of data queries results.

Provided are techniques for the management of search queries that may generate search results containing too much data for a particular computing system to efficiently handle. Examples of application programming interfaces APIs that may encounter this issue include but are not limited to JAVA Database Connectivity JDBC published by Sun Microsystems Inc. of Santa Clara Calif. and Open Database Connectivity ODBC . Briefly known approaches to the issue include the following 

Each of approaches 1 5 may provide some relief from the disclosed memory issues but often raising other issues such as but not limited to increased client server traffic lack of control of amount of memory used for buffering vendor compatibility issues requirements for upgrades to equipment software licenses and so on.

Provided are techniques for the improvement of retrieval of data from a data store including a method apparatus and computer programming product for receiving a request for a dataset corresponding to stored data generating a first handle to the dataset generating a plurality of parameters corresponding to the dataset such that each parameter of the plurality of parameters corresponds to a distinct subset of the dataset generating a first internal handle based upon the first handle and corresponding to a first parameter of the plurality of parameters executing a data retrieval request based upon the first internal handle to retrieve a first subset of the dataset receiving a navigation request corresponding to the first internal handle navigating if possible the first subset in accordance with the navigation request and when navigating the first subset in accordance with the navigation request is not possible generating a second internal handle corresponding to a second parameter of the plurality of parameters such that the second parameter is in accordance with the navigation request and executing the second data retrieval request based upon the second internal handle to retrieve a second subset of the dataset corresponding to the second parameter.

This summary is not intended as a comprehensive description of the claimed subject matter but rather is intended to provide a brief overview of some of the functionality associated therewith. Other systems methods functionality features and advantages of the claimed subject matter will be or will become apparent to one with skill in the art upon examination of the following figures and detailed description.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally he referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

One embodiment in accordance with the claimed subject is directed to a programmed method for efficient memory management during database operations. The term programmed method as used herein is defined to mean one or more process steps that are presently performed or alternatively one or more process steps that are enabled to be performed at a future point in time. The term programmed method anticipates three alternative forms. First a programmed method comprises presently performed process steps. Second a programmed method comprises a computer readable medium embodying computer instructions which when executed by a computer performs one or more process steps. Finally a programmed method comprises a computer system that has been programmed by software hardware firmware or any combination thereof to perform one or more process steps. It is to be understood that the term programmed method is not to be construed as simultaneously having more than one alternative form but rather is to be construed in the truest sense of an alternative form wherein at any given point in time only one of the plurality of alternative forms is present.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to. an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may he transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable. RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Turning now to the figures is a block diagram of one example of a computing system architecture that may implement the claimed subject matter. A client system includes a central processing unit CPU or processor coupled to a monitor a keyboard and a pointing device or mouse which together facilitate human interaction with computing system and client system . Also included in client system and attached to CPU is a data storage which may either be incorporated into CPU i.e. an internal device or attached externally to CPU by means of various commonly available connection devices such as but not limited to a universal serial bus USB port not shown .

Data storage is illustrated storing an operating system OS a JAVA Virtual Machine JVM and a database management system DBMS all of which will be familiar to those with skill in the relevant art. In addition data storage stores a JAVA Database Connectivity JDBC driver that provides access to DBMS via JVM . Also stored on data storage is an abstraction layer designed to run on top of JDBC driver or a Large Result Set component LRSC . A user or programmer makes data access requests to DBMS by employing LRSC rather than JDBC driver in accordance with the disclosed technology. LRSC runs in conjunction with JDBC driver in the sense that in one embodiment a call to LRSC is processed and passed as a series of calls to JDBC driver . In this manner a call to LRSC is consistent with a call placed instead to JDBC driver . Further LRSC 1 Provides support for multiple JDBC vendors and database providers 2 Performs as fast as the convention client cursor approach direct cursor 3 Provides the ability to control how much memory is used 4 Provides memory control at the statement level instead of connection level and 5 Is easy to integrate into existing applications. LRSC is explained in more detail below in conjunction with .

Client system and CPU are connected to the Internet which is also connected to a database server . Although in this example CPU and server are communicatively coupled via the Internet they could also be coupled through any number of communication mediums such as but not limited to a local area network LAN not shown . Server is coupled to a data storage which like data storage may either he incorporated into server i.e. an internal device or attached externally to server by means of various commonly available connection devices such as but not limited to a universal serial bus USB port not shown . In addition functionality associated with data storage may be performed by one or more arrays of data storage devices in any configuration familiar to those with skill in the art. Data storage is illustrated storing a DBMS with associated data . Further it should be noted there are many possible computing system configurations of which computing system is only one simple example.

Process starts in a Begin Large Result Component LRSC Call block and proceeds immediately to a Receive Database DB Select Request block . During processing associated with block process receives a database DB access request in this example in the form of a SQL select request. In the following example a user application not shown calls LRSC with a request for access to data stored on database server . During processing associated with a Parse Parameters block process parses the parameters with which LRSC was called. Examples of calling parameters include but are not necessarily limited to the following 

Some methods that may be utilized to control the operation of process include but are not limited to the following 

It should be understood that because the original SQL statement is rewritten by LRSC the context of reading consistency is changed. Therefore methods setReadConsistent and releaseReadConsistent enable the user application to maintain data consistency within the scope of the original SQL statement.

During processing associated with a Generate SQL Statement block process modifies the original SQL statement passed in the selectSQL parameter by filtering the data field identified by the target parameter with the filter identified by the replacement parameter. For example with respect to the following parameters 

At this points the s are replaced. in the first iteration of process with values that represent a beginning range of the requested database field b.CMID and returns a number of records equal to the value specified by the fetchIncremental method. During processing associated with an Execute Call block process calls JBDC driver with the SQL statement generated during processing associated with block which in this example results in the generation of calls to DBMS and DBMS for the requested data from data .

During processing associated with a Return LRSC Handle block process returns a pointer or handle that corresponds to the expected result set of the original SQL statement i.e. a LargeResultSet handle that conforms to a standard JDBC interface and incorporates typical JDBC driver result set behavior. Thereafter a subset of the results is retrieved for the calling application to display see on in this example monitor . It should be noted that a user application may display present or process one or more rows at a time. Once a user has viewed or processed the rows that have been presented typically a request for another subset of the results i.e. a navigation request is initiated. During a Wait for Navigation Request block process waits for such a navigation request which in this simplified example may either be a request for the next or previous row or set of rows.

Once a navigation request has been received control proceeds to a transition point A which is explained in more detail below in conjunction with . Reentry to block via transition point B is explained in detail below in conjunction with . Process enters a Release Resources block via a transition point C which is explained in conjunction with . During processing associated with block process releases any locked data resources at database server typically by calling method releaseReadConsistent. In addition the LRSC handle returned during block is released. Finally control proceeds to an End LRSC process block in which process is complete.

If process determines that the navigation request is not a request for a row forward of the current row position as defined by an internal JDBC handle which is explained below control proceeds to a transition point D which is explained in more detail below in conjunction with . If process determines that a request for a row in a forward direction was received control proceeds to an Out of Range block . During processing associated with block process determines whether or not the navigation request received during block is a request for a row of data within the range of the handle returned during the processing associated with the current internal JDBC handle i.e. the current results. If determined that the navigation request may be satisfied by a row within the scope of the current handle process proceeds to a Return Forward Row block . During processing associated with block LRSC returns the requested row i.e. the next row or a row corresponding to a jump within the current results for display on monitor and returns via transition point B to Wait for Nay. Request block and processing continues as described above in conjunction with .

If during processing associated with block process determines that the navigation request requires a row or rows outside the current results control proceeds to a Release Resources block . During processing associated with block process releases resources including the current internal JDBC handle in client system that correspond to the current range and in this manner conserves resources of client system . It should be noted that during a first iteration through process a LRSC handle has not yet been generated and therefore any navigation request received during block is determined to out of range during block . Furthermore during the first iteration there would not he either resources or a LRSC handle to release.

During processing associated with a More Data block process determines whether or not the navigation request received during block can be satisfied within the limits defined by the original query i.e. the SQL statement stored in the selectSQL parameter described above in conjunction with . If so process proceeds to an Increase Range block during which process increases the range of the target parameter in the example b.CMID. to retrieve a handle that represents another set of results. During a Generate internal JDBC Handle block process generates a new internal to LRSC JDBC handle corresponding to a next result set. It should be noted the internal JDBC handle is different than the LRSC or LargeResultSet handle returned during Return LRSC Handle block . The generated internal JDBC handle is employed within LRSC and the use is transparent to the user or application that initiated the data request. Typically the generation on an internal JDBC handle is done by modifying the original SQL statement and executing a SQL call see and . Processing then returns to Return Forward Row block via the LRSC handle generated during processing associated with block and processing continues as described above.

If during processing associated with block process determines that the end of the range defined by the selectSQL statement has been reached control proceeds via transition point C to Release Resources block during which processing continues as described above in conjunction with . It should be understood that processes and represent one simple example of an implementation of the claimed subject matter. For example rather than a determination that data has been exhausted during block initiating termination of process the user may be presented with an option to return to the beginning of data defined by selectSQL. In this case the range would be reset to the original range by resetting or regenerating the internal JDBC handle during block and process would return to block and processing would continue as described above. Those with skill in the computing arts will appreciate that there are many possible navigation option within the scope of the claimed subject matter.

The following are examples of successive SQL statements that might be generated by iterations through processes and in accordance with the claimed subject matter 

If during processing associated with block process determines that the navigation request requires a row outside the current results control proceeds to a Release Resources block . During processing associated with block process releases resources if any in client system that correspond to the current range corresponding to the current internal JDBC handle and in this manner conserves resources of client system . During processing associated with a More Data block process determines whether or not the navigation request received during block can be satisfied within the limits defined by the original query. i.e. the SQL statement stored in the selectSQL parameter described above in conjunction with . If so process proceeds to an Decrease Range block during which process decreases the range of the target parameter in the example b.CMID to generate a new internal JDBC handle that represents another set of results. During a Generate Internal JDBC Handle block process generates a new internal JDBC handle corresponding to a next result set that is backward in direction. Typically the generation on a new LRSC handle is done by modifying the original SQL statement and executing a SQL call see and . Processing then returns to block and processing continues as described above.

If during processing associated with block . process determines that the end of the range defined by selectSQL has been reached control proceeds via transition point C to Release Resources block during which processing continues as described above in conjunction with . It should be understood that processes and represent one simple example of an implementation of the claimed subject matter. For example rather than an Out of Data determination of block initiating termination of process the user may be presented with an option to return to the beginning of data defined by selectSQL. In this case the range would be reset to the original range see by resetting or regenerating the internal JDBC handle during processing associated with block and process would return to block and processing would continue as described above. Those. with skill in the computing arts will appreciate that there are many possible navigation option within the scope of the claimed subject matter.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will he apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order. depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

