---

title: In-place user interface and dataflow modeling
abstract: Systems and methods for in-place user interface (UI) and dataflow modeling, including a number of UI elements of a graphical user interface (GUI) grouped in several GUI fragments. A first fragment of the several GUI fragments is switched from UI design mode to dataflow design mode, where the UI elements are replaced by data elements. The data elements in the first fragment may be related to define one part of a dataflow. A second fragment of the several GUI fragments is separately switched from UI design mode to dataflow design mode, where the UI elements are replaced by data elements. The data elements of the second fragment may be related to define another part of the dataflow. A relationship is created between the data elements of the first fragment and the data element of the second fragment based on the dataflow.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08683359&OS=08683359&RS=08683359
owner: SAP AG
number: 08683359
owner_city: Walldorf
owner_country: DE
publication_date: 20100518
---
The field of the invention relates generally to data processing and digital processing systems. More specifically the field concerns providing graphical user interface for in place user interface and dataflow modeling.

For many years research and development in the area of software engineering has implemented different concepts for facilitating software production. One such concept regards graphical user interface GUI builders also known as GUI designers. Generally a GUI builder is a software tool for programming computer applications that simplifies the creation of GUIs by allowing the developers to arrange user interface UI controls using visual editors including drag and drop editors what you see is what you get WYSIWYG editors etc. GUI builders typically skip the manual coding of each UI control parameters and provide visual feedback before the code is executed.

Usually a GUI is a part of an event driven software application where the flow of the execution of a computer program is determined by events e.g. user actions messages input from other applications etc. When a particular event happens it may trigger changes in the values of a number of variables or data elements causing a dataflow. The dataflow of a computer application determines that when a value of a data element changes values of one or more related data elements change as well. Often the UI controls of GUIs are based on dataflows. For example when a UI control receives a user action it may trigger changes in series of values of related data elements according to an underlying dataflow. Some of the UI controls or elements of a GUI themselves may correspond to data elements of a dataflow and may show one or more current values of the data elements. A growing number of vendors of GUI builders supplement the UI design with dataflow design capabilities. Such combination of GUI design tools and dataflow design tools can be found in Microsoft Access NetBeans integrated development environment IDE Yahoo Pipes etc.

Those software development tools that allow switching between different design tools e.g. UI design mode dataflow design mode source code editor mode etc. help the creation of software applications in various ways. For example one application developer may create the UI design and the dataflow design of a computer application in parallel within the same application builder tool by switching between different design modes. This approach increases productivity and minimizes the risk of errors in the integration between application functionality dataflow and GUI. However there are some drawbacks in the simultaneous work with different software design modes. For example the software developers may be overloaded with information especially when working on complex applications. Other drawbacks may be caused by inefficient UI controls interaction during development poor layout realism caused by the attempts to display all layout and data aspects at once a tendency of cluttering of the UI controls or of the data elements during the development process that needs to be regularly resolved etc.

Various embodiments of systems and methods for in place user interface UI and dataflow modeling are described herein. A number of UI elements of a graphical user interface GUI are grouped in several GUI fragments. Each of the GUI fragments includes one or more UI elements. In one aspect a first fragment of the several GUI fragments is switched from UI design mode to dataflow design mode where instead of UI elements of the first GUI fragment one or more data elements are included. The data elements in the first fragment may be related by one or more relationship elements based on a dataflow. In another aspect a second fragment of the several GUI fragments is separately switched from UI design mode to dataflow design mode where instead of the UI elements of the second GUI fragment one or more data elements are included. The data elements of the second fragment may be related by one or more relationship elements based on the dataflow. In yet another aspect a relationship is created between a data element of the first fragment and a data element of the second fragment based on the dataflow.

These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof presented in connection with the following drawings.

Embodiments of techniques for in place user interface and dataflow modeling are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

UI design area is used by software developers to design a single GUI page of a software application. In an exemplary GUI for a flight booking application is presented including UI container elements flight search flight details and flight booking . The three UI container elements and represent the three main steps a user takes to book a flight e.g. searching for relevant flights checking the details of a particular flight and booking the flight. Each of the UI container elements represents a GUI fragment where several simpler UI elements are grouped. Each of the simpler UI elements may correspond to a particular function of the software application or may present a particular type of information.

Container UI element flight search groups UI elements query and result . In query UI element search criteria for flights of interest may be described e.g. search string codes airlines jet models etc. The result UI element may dynamically list flights matching the criteria in query . Accordingly when the data in query UI element changes the data in result UI element also changes.

The details about a particular flight are provided with the help of UI elements and included in the container UI element flight details . The necessary controls for booking a particular flight are grouped in UI container element flight booking . A flight from the result UI element may be selected and the details for the selected flight may automatically appear in UI controls and and . Additional booking data may be entered or may be automatically loaded in UI element . Finally the booking as described in UI element may be submitted with the help of the UI control confirm .

The flow of information that starts with providing search criteria in query UI element and ends with submitting the booking with confirm UI control is based on an underlying dataflow. The dataflow itself needs to be created or defined during the application development. The GUI builder tool provides means for modeling dataflows. The GUI builder tool may switch from UI design mode to dataflow design mode as a response to several commands e.g. by selecting switch UI control by selecting a relevant command from menu by a key combination etc.

When compare with it can be noticed that UI design area and UI toolset in are replaced by dataflow design area and dataflow toolset in respectively. Menu in and menu in may be the same ensuring access to the same set of commands. Alternatively menu and menu may differ providing commands pertinent to the current design mode of the GUI builder tool . The switch UI control in and switch UI control in may be used to toggle between UI and dataflow design modes.

In dataflow design area UI elements are replaced by dataflow elements e.g. by data elements and relationships. Usually one or more dataflow elements correspond to a UI element. A data element may represent information e.g. one or more values associated with the data element. Additionally a data element may include represent actions e.g. methods functions procedures decision blocks etc. When a value of a data element is changed it may trigger changes in other related data elements. The relationships define dependencies between the data elements. In many cases the dataflow elements correspond to data structures e.g. some data elements may correspond to fields columns of database tables some relationship elements may correspond to database relationships etc. One technique for dataflow modeling may include defining data tables and database relationships. Another common technique for dataflow modeling is the creating of graph structures. Dataflows could be modeled as an acyclic or maybe even a cyclic graph. For example a tree is a restricted acyclic graph and may be used for modeling dataflows where the nodes correspond to data elements and the edges or arrows between the nodes correspond to the relationships as illustrated in .

According to data element search represents a search method performed in a flights database. When activated search reads a query stored in query data element . Data for the flights matching the selected search query is received in result data element . The data for a particular flight including identification ID could be distributed between data elements flight ID title and details . The data element details is further related to data elements departure arrival and other where the relevant information about the flight is stored in order to be displayed by the corresponding UI elements in the application GUI. Data element booking is related to flight ID and represents the next stage of the dataflow where the particular flight is booked. Values for data elements name and payment need to be provided before submitting the booking at confirm data item .

The GUI builder tool of and demonstrates a typical approach for simultaneous design of a GUI and a dataflow of a software application. The GUI builder tool usually contains a program code editor that may be visualized in the place of either UI design area or dataflow design area e.g. as another design mode. Alternatively the programming code editor may open in a separate window. Other modes could be also supported by the GUI builder tool including database design mode execution mode etc. The switch UI controls and may be used to toggle the available modes of the GUI builder tool .

For the software developers who use GUI builder tools similar to the GUI builder tool it is not always easy to follow the correspondence between the UI elements and the data elements especially when complex software applications are created. It becomes even more complicated when a new UI element is added or an old UI element is changed. Corresponding data elements have to be inserted or redistributed within the tree structure of the dataflow ensuring the necessary relationships.

In contrast with the prior art GUI builder tool does not use two separate design views within the GUI where design area does not switch between modes. The modeling of a GUI and an underlying dataflow for a software application is accomplished within the same design area . To demonstrate the in place UI and dataflow modeling in and the exemplary flight booking application from and is used. The UI modeling is performed in place with the dataflow modeling to diminish the difficulties met by software developers when working simultaneously with two different design environments.

Similar to the prior art example the design area in includes UI container elements flight search flight details and flight booking . The UI container element flight search groups UI elements query and result that will help the users of the flight booking application to find and select particular flights. The UI container element flight details includes UI element flight ID and UI element to show details for a particular flight. Finally the users of the flight booking system can provide booking information and confirm the booking with the UI elements and included in flight booking UI container element .

To each of the container UI elements and is assigned a switch UI control respectively and . Each of the UI container elements and may be separately switched between different design modes using the UI controls and according to one embodiment of the invention. In this way dataflow modeling can be done in place with UI modeling by separate fragments corresponding to the UI container elements.

The adjacent switch UI controls and ensure toggling of fragments and from dataflow design mode to UI design mode respectively. For better usability and layout realism especially for advanced users the switch UI controls could be hidden and their functionality replaced by hot keys for example. Fragment includes data elements query search result flight ID and title . The relationships between the data elements in fragment define a dataflow that is similar to the dataflow presented in In the relationship elements are represented by arrows between the related data elements showing the flow of information. In the same time it is much easier for a software developer to follow the correspondence between the UI elements and of container UI element flight search and the data elements and of fragment . Such an organization of the software development process is more intuitive convenient and efficient. It is not necessary to jump between two totally different design areas. The in place modeling facilitates the matching between a group of logically connected UI elements of a software application and an autonomous part of a dataflow of the software application.

For example it is easy to see the correspondence between UI element query in and data elements query and search in . A user may enter search criteria in query UI element . The search criteria may be stored in query data element . A UI control corresponding to the search data element may not be displayed in the GUI of the flights booking application. With the act of entering the criteria search data element may activate the assigned search method. Alternatively a button UI control corresponding to the search data element may be included in the UI model. The button may be used to submit the search criteria entered in query UI element . Similarly the correspondence between UI element result in and data elements result flight ID and title in is easily noticeable. The UI control result may not show the values of flight ID data element but only the values of title data element to make the GUI of the application simpler.

The dataflow of the software application for booking flights continues at fragment where data elements flight ID details departure and other are included. The data elements of fragment correspond to UI elements and grouped in UI container element in . Data element flight ID is related to data element flight ID of fragment . This is how the part of the application dataflow in fragment connects with the part of the application dataflow in fragment . Design area in also includes container UI element flight booking still in UI design mode where UI elements and are included. The container UI element flight booking may be switched to dataflow design mode to model the last part of the application dataflow by arranging the necessary dataflow elements and adding one or more relationships with the dataflow elements of the other dataflow parts.

In an alternative embodiment design area may open as a popup window. UI toolset and dataflow toolset may be hidden and popup in separate windows simultaneously or separately depending on whether the user is focused to a UI element or to a dataflow element. Further the adding of a UI element in UI design mode may automatically add one or more corresponding dataflow elements to the dataflow design mode and vice versa. Different ways for switching between modes of the fragments in the design area may be used besides the adjacent switch UI controls to e.g. drag and drop operations selecting corresponding menu items pressing keyboard keys etc. The modeling of UIs and dataflows may be facilitated by supplementary visual effects like for example highlighting compatible data elements during relationship definitions. The embodiments of the invention may not be limited to GUI builder tools or to design environments. Similar approaches for in place switching may be applied in other GUI environments where different view modes are involved.

In at the form and the distribution of the UI elements including the GUI fragments are defined. According to one embodiment of the invention nested UI elements could be defined as well. For example one GUI fragment could be nested into another GUI fragment. Similarly one UI element grouped in a GUI fragment could be nested or contained by another UI element in the same GUI fragment. The shape the orientation the type the distribution etc. of the UI elements in the design canvas may be defined. Alternatively only the UI elements of a particular GUI fragment may be arranged. The shape and the distribution of the UI elements in the design area will be reproduced by the GUI of the running software application.

In the design canvas one of the GUI fragments is switched from UI design mode to dataflow design mode at . The switch could be triggered by a user e.g. by selecting a special UI control of the design tool by pressing a hot key combination by activating a menu command by drag and drop of a dataflow element in the fragment etc. For example container UI element in in UI design mode switches to fragment in in dataflow design mode by selecting switch UI control . The rest of the GUI fragments remain in UI design mode according to one embodiment of the invention. At in a part of a dataflow corresponding to the GUI of the software application is modeled. This part of the dataflow corresponds to the UI elements grouped in this GUI fragment. The part of the dataflow is a fragment of the entire dataflow e.g. it is a fragment dataflow.

The in place dataflow modeling technique respects the actual modeling context by only showing context relevant dataflow elements. Usually one or more data elements of the fragment dataflow correspond to each UI element of the fragment. However some of the data elements may not be visualized by UI elements. The data elements of the fragment dataflow are related by relationship elements to define the flow of information during the execution of the software application. A relationship element may correspond to a UI element as well e.g. a UI element of the fragment in UI design mode may visualize either a data element or a relationship element of the fragment in dataflow design mode or both. When adding a UI element to a GUI fragment in a UI design mode one or more corresponding data elements and relationship elements may be automatically added to the dataflow design mode of the GUI fragment. The context sensitivity of the in place dataflow modeling facilitates an efficient and intuitive dataflow design.

At another GUI fragment in the design area is switched from UI design mode to dataflow design mode. At that stage two of the GUI fragments in the design area are in dataflow design mode while the rest GUI fragments if any are still in UI design mode. At a part of the dataflow pertinent to both GUI fragments in dataflow design mode is modeled. Since the partial dataflow pertinent to the first GUI fragment is already designed at the modeling that takes place at is mostly concentrated at designing the partial dataflow pertinent to the second GUI fragment and at establishing relationships between the two partial dataflows. One or more relationships between the two partial dataflows may be defined to connect at least one data element of the first partial dataflow to at least one data element of the second partial dataflow.

The switching of the second GUI fragment to dataflow design mode could be triggered by similar events or user actions to those that cause the switch of the first GUI fragment. Additionally the second GUI fragment may switch to dataflow design mode as a result of a dragging of a dataflow element from the first fragment to the second fragment. The technique of drag and drop dataflow elements may be also used for establishing relationships between different data elements including between data elements of different GUI fragments as illustrated with process in according to one embodiment.

At a data element is selected in a first GUI fragment when the GUI fragment is in dataflow design mode. At the selected data element is dragged from the first GUI fragment to a second GUI fragment. The selection of a data element and its dragging could be accomplished by different means or combination of means e.g. with a pointing device a computer mouse a trackball a touch screen etc. a keyboard menu commands etc. Once the dragging reaches the area of the second GUI fragment a check is performed to verify whether the second fragment is in dataflow design mode at . At the second GUI fragment is switched automatically to dataflow design mode if the verification is negative.

At a look up or a search among the data elements currently included in the second GUI fragment is performed for data elements that are compatible with the selected data element. A relationship may be defined only between compatible data elements according to one embodiment of the invention. At a check is performed whether data elements compatible with the selected data element are found in the second GUI fragment. If compatible data elements are found they may be highlighted at to assist the definition of a relationship between the selected data element and one of the compatible data elements according to one embodiment of the invention.

At the selected data element is dragged to one of the compatible data elements in the second GUI fragment. In an alternative embodiment the compatible data elements in the second GUI fragment may not be highlighted until the selected data element is dragged over or near one of them. Only the compatible data element to which the selected data element is dragged may be highlighted. At the selected data element is dropped over a compatible data element in the second GUI fragment to create a relationship between the two data elements from different GUI fragments.

Drag and drop is an intuitive technique for defining relationships between data elements which could be applied to data elements from different GUI fragments as well as between data elements within the same GUI fragment. A relationship element may also be dragged from one GUI fragment to another for the purpose and with the effect as explained with respect to process . The drag and drop technique may be used for including new data elements new relationship elements and new UI elements in a GUI fragment where the GUI fragment may automatically switch to the relevant design mode view when necessary. In one embodiment the checking for compatible data may be used to decide when to automatically switch to a particular design view of a checked GUI fragment.

Processes and illustrated with and respectively are based on a design approach where the in place modeling of the dataflow of a software application follows the UI modeling. In an alternative embodiment of the invention similar processes may be defined based on an approach where the in place modeling of the dataflow of a software application is performed first and the UI modeling is done according to the dataflow elements distribution. The switching of a GUI fragment between different design or view modes may not lead to a replacement of one or more UI elements with one or more dataflow elements and vice versa according to one embodiment. Instead the UI elements of the GUI fragment may be prominently displayed and the dataflow elements of the GUI fragment may be displayed as transparent or shaded when the GUI fragment is in UI mode. Respectively dataflow elements of the GUI fragment may be prominently displayed and the UI elements of the GUI fragment may be displayed as transparent or as shaded when the GUI fragment is in dataflow mode.

GUI fragment flight details groups UI elements flight ID get flight details and details . A particular flight title from the result UI element may be selected causing the ID information for the selected flight to automatically appear in flight ID UI element . Alternatively an ID of a particular flight may be entered directly in flight ID UI element . After the ID value for a particular flight is set at UI element detailed information for this flight may be requested by activating e.g. selecting get flight details UI control . The details for the flight appear in details UI element and may include values for flight number departure date arrival date flight duration additional comments etc.

The selected flight may be booked using UI controls and in GUI fragment flight booking . Personal details may be entered or loaded in UI control including passenger name surname city ZIP code country etc. The booking of a particular flight is confirmed and submitted by selecting UI control book flight . Selectable UI controls and are adjacent to each of the GUI fragments and respectively and may be used for switching between different design modes. The selectable UI controls and may be represented by GUI buttons selectable by GUI pointing device or by other means for UI interaction according to one embodiment of the invention.

In the GUI fragment flight search from is in dataflow design mode represented by GUI fragment . The GUI fragment in UI design mode was switched to GUI fragment in dataflow design mode by selecting switch UI element in according to one embodiment of the invention. The GUI fragment may be toggled back to UI design mode by selecting switch UI element in . The selection of a UI element may be performed by a pointing device or by other means. Using a pointing device pointer may be moved over a UI control causing that UI control to be highlighted as illustrated with switch UI control . The highlighting of a UI control may occur when the UI control is selected.

Data elements query search result ID and title in GUI fragment represent UI elements query search and result in GUI fragment . Relationship element defines a relationship between data element result and data elements ID and title . Vertical scroll UI element may appear when some of the dataflow elements in GUI fragment cannot be fully visualized. Horizontal scroll UI element may also be included when necessary. Thus as much space as needed to define a partial dataflow pertinent to the GUI fragment may be secured. UI element may provide help information or any other human readable information to a user. Such information as well as any other useful information may be provided via UI controls similar to tool tips according to another embodiment of the invention.

In the dragging part of the drag and drop operation is illustrated in more advanced state. GUI fragment flight details in to has switched to dataflow design mode represented with GUI fragment in . The flipping of GUI fragment to dataflow design mode might happen automatically when the dragging of UI element the projection of data element ID had reached the GUI fragment . The GUI fragment may be flipped back to UI design mode by selecting UI control switch .

The GUI fragment includes data elements ID get flight details flight number departure date arrival date duration and comment . The data elements to correspond to UI elements flight ID get flight details and details accordingly. No relationships between the data elements have been defined yet. Vertical scroll UI element provides scrolling in order to expand the dataflow design area when necessary and UI element may provide help information or any other readable information to a user.

The data element ID is in highlighted state to indicate a compatibility with data element ID . This means that if the dropping part of the drag and drop operation is performed above the data element ID a relationship between data element ID and data element ID may be defined.

GUI fragment flight booking in to has been switched to dataflow design mode represented by GUI fragment in . Data elements flight ID Name Surname City ZIP Country and book flight in GUI fragment correspond to UI elements and in GUI fragment respectively. Scroll UI element helps to expand the dataflow design area of GUI fragment . The changing from dataflow design mode to UI design mode of GUI fragment may be performed by UI element switch .

Some embodiments of the invention may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment of the invention may be implemented using Java C or other programming languages and development tools. Another embodiment of the invention may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather the scope of the invention is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

