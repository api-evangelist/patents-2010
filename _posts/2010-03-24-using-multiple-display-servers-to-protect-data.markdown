---

title: Using multiple display servers to protect data
abstract: A first display server and a second display server execute on a processing device. The first display server provides a secure environment for data presented in first application windows of the first display server and the second display server provides an unsecure environment for data presented in second application windows of the second display server. The processing device receives at least one user command to copy data from one of the first application windows of the first display server to one of the second application windows of the second display server. The processing device prompts a user to perform an authentication upon receiving the at least one user command. In response to the user successfully performing the authentication, data is copied from said one of the first application windows to said one of the second application windows.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09355282&OS=09355282&RS=09355282
owner: Red Hat, Inc.
number: 09355282
owner_city: Raleigh
owner_country: US
publication_date: 20100324
---
Embodiments of the present invention relate generally to protecting data and more specifically to using multiple display servers to prevent unauthorized copying of data.

Typically a computing device includes a single display server and window manager for managing application windows presented on a display of the computing device. The single display server provides an unsecure environment to applications running within the display server. In the unsecure environment provided by the single display server a user can freely copy and paste between application windows can perform screen shots and can perform drag and drop operations. Thus typical computing systems are not ideal for the storage and use of confidential or secret information.

Described herein is a method and system for protecting data from unauthorized copying. In one embodiment a processing device executes a first display server and a second display server. The first display server provides a secure environment for data presented in first application windows of the first display server and the second display server provides an unsecure environment for data presented in second application windows of the second display server. The processing device receives at least one user command to copy data from one of the first application windows of the first display server to one of the second application windows of the second display server. The processing device prompts a user to perform an authentication upon receiving the at least one user command. In response to the user successfully performing the authentication data is copied from the first application window to the second application window.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as executing copying receiving prompting rendering or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The present invention may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the present invention. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. .

The computing device includes a general display server and a secure display server that acts as a client of the general display server . A display server is a windowing system that supports the implementation of window managers and provides a framework for a graphical user interface. Display servers may be responsible for presenting and maintaining rendered graphics drawing lines arcs dots or other graphical primitives rendering fonts and so on. Display servers enable a user to work with several applications programs concurrently where each application has its own application window. Examples of commonly used display servers windowing systems include the X Window System used in Linux and Unix machines Desktop Window Manager of Windows Vista and Windows 7 and Quartz Compositor of OS X also known as WindowServer .

One or both of the general display server and secure display server may include a window manager . In one embodiment functions of the window manager are built into the general display server . For example on Windows operating systems the display server windowing system and window manager are one and the same e.g. the Desktop Window Manager in Windows Vista is both a display server and a window manager . Alternatively the window manager may be a separate application that runs on top of the general display server . For example the display server of the X Window System does not include a window manager . Instead a user may choose from one of many available window managers to use with the display server of the X Window System . Similarly the functions of window manager may be built into secure display server or window manager may be a separate application that runs on top of secure display server . However in one embodiment secure display server does not include window manager e.g. window manager is not a component of secure display server and does not run on top of secure display server .

A window manager controls the placement and appearance of application windows. Window managers perform actions such as drawing windows and their borders and moving and resizing windows in response to requests from applications. Window managers control how windows are displayed on the screen how they are moved and modified how the user interacts with application windows how windows interact with each other e.g. allowing windows to overlap and so forth.

In one embodiment window manager or window manager is a stacking window manager. A stacking window manager renders windows one by one at specific coordinates to a screen output which is sent to display . If the coordinates of one window overlap the coordinates of another window then the later window overwrites a visible part of the previous window where the overlap occurs. In another embodiment window manager or window manager is a tiling window manager which organizes the screen into mutually non overlapping frames. In yet another embodiment window manager or window manager is a compositing window manager. A compositing window manager renders windows in off screen buffers and then combines the contents of those off screen buffers and outputs a result to the screen output. Compositing window managers are described in greater detail with reference to .

The general display server provides input output I O services to client applications. In the illustrated embodiment client applications of the general display server include application and secure display server . When an input device event e.g. a mouse click key press of a keyboard cursor movement etc. is received from an input device general display server identifies applications to which the input device event should be sent e.g. an active application an application associated with current desktop coordinates of a cursor etc. . Each application has an application window that is assigned particular desktop coordinates. If the current desktop coordinates for the cursor match those of an application window the input device event is passed on to the application controlling that application window. Additionally if an application window is active or has otherwise requested to be informed of input device events then the input device event e.g. key strokes of a keyboard may be passed on to the application.

The general display server also provides display services to client applications e.g. to application and to secure display server . General display server may receive graphics data from application windows and output the graphics data to a screen output. The graphics data may be rendered by the client or by the general display server and or window manager prior to being sent to the screen output and on to display .

The secure display server is a display server that operates as a client to the general display server . The general display server may treat the secure display server as any other client. The secure display server and the general display server may be different instances of the same display server e.g. both may be X Window Display Servers or may be different display servers e.g. general display server may be Windows Desktop Window Manager and secure display server may be an X Window Display Server .

As a display server secure display server may have its own clients such as application . Accordingly clients e.g. application of secure display server may send graphics information to secure display server which may in turn forward the graphics information to general display server . Similarly general window server may send input device events from the input devices to secure display server which may then forward the input device events to clients e.g. to application .

Typically all resources available to a display server including resources of applications that are clients of the display server are made available to all clients of the display server. Such resources include the graphics data associated with application windows e.g. data presented in application windows of the display server s clients input events received by the display server e.g. received keystrokes from a keyboard and so forth.

Any application can be a client of general display server . This may include word processor software games drawing programs spreadsheet software presentation software etc. Applications that execute on the general display server are typically executed without requiring a user to enter any credentials or otherwise authenticate themselves. Moreover operations such as copying data taking screen shots etc. can be performed by clients of the general display server without requiring the clients to provide credentials or otherwise authenticate themselves. Therefore general display server provides an unsecure environment to its clients. The unsecure environment provided by general display server introduces minimal or no user inconvenience and may be appropriate for working with unsecure information such as public information or information that is neither confidential nor secret. However the unsecure environment is unsuitable for applications that operate on confidential or secret information because in the unsecure environment such information can be easily obtained by clients of the general display server .

Secure display server includes its own environment that is separate from the general display server s environment. Secure display server may require that any application executing within the secure display server satisfy one or more security conditions. For example when application is started up a user of application may be required to enter a username and or password. Additionally application may be checked against a list of approved applications before it is permitted to become a client of secure display server . Thus secure display server provides a secure environment for client applications e.g. for application .

Certain documents or other files may be tagged as secure and may have security conditions associated with them. In one embodiment such documents and files can only be opened by applications that are running in the secure environment . Alternatively all documents and files stored at a particular location e.g. on a secure storage device may be associated with security rules that prohibit those documents files from being opened by applications running in the unsecure environment . Thus when a user attempts to open a secure document a word processor application for example would initiate in the secure environment of secure display server . When the word processor application is initiated a user may be prompted to enter a password username and or additional credentials associated with the document and or with the application.

In one embodiment when a user attempts to open a secure document file or attempts to open an application in the secure environment authorization framework is invoked. Authorization framework then handles user authentication and or authorization. Authorization framework is discussed in greater detail below with reference to .

In one embodiment general display server provides inter client communication services that enable clients of the general display server to send data to other clients and or obtain data from other clients. Clients may send data to the general display server along with a request that the general display server send an event or other message that includes the data to a specified client. Secure display server may provide similar inter client communication services for clients of the secure display server .

Clients of secure display server may communicate with clients of general display server . For example application may communicate with application . Application may send data to secure display server along with a request for an event to be sent to application . Secure display server may then forward the request and data to general display server which may send the requested event to application . Similarly application may send data to general display server along with a request for an event to be sent to application . General display server may send the requested event to secure display server which may forward the event to application .

One common reason for inter client communication is to copy data from one application window to another application window. Such copying of data between application windows includes cut and paste operations and drag and drop operations. There are two principal techniques to perform a cut and paste operation. In a first cut and paste technique commonly known as selection when a user issues a copy command for a selected data item e.g. a block of text image chart or other data an address to the application window controlling that data item and to the specific selected item within that application window is recorded by the display server. Upon a user issuing a paste command in another application window that application sends a request to the display server for the data item which in turn forwards the request to the application window that controls the data item. The application window controlling the data item then sends a copy of the data item to the requesting application window. In a second cut and paste technique commonly known as a cut buffer when the user issues a copy command for a selected data item controlled by an application that data item is copied to a buffer that is not controlled by the application. Thereafter when a user issues a paste command in another application window that application sends a request to the display server for the data item which obtains the data item from the buffer and sends it to the requesting application window. A clipboard e.g. as offered in Microsoft Windows OSes is one example of a cut buffer.

The drag and drop operation is performed when a user selects a block of text or another item in a first application window clicks on the selection and drags it into another application window. As with selection drag and drop requires active communication between the requesting application window and the application window that controls the data. Once the selection has been dragged to a destination application window that destination application window requests the data associated with that selection from the controlling application window. In response the controlling application window sends the data to the destination application window.

On occasion a user may attempt to copy data from an application window running in the secure environment to an application window running in the unsecure environment . When a user attempts to copy information from an application window in the secure environment to an application window in the unsecure environment authorization framework is invoked. Authorization framework may be invoked for example by secure display server general display server or a client of secure display server e.g. application .

In one embodiment authorization framework is responsible for administering security conditions for obtaining user credentials for authorizing and authenticating applications and for otherwise maintaining the security of secure environment . Authorization framework determines whether a particular client e.g. application communicating with a privileged trusted application e.g. application can access data of the privileged trusted application. The authorization framework may combine the functionalities of authorization and authentication in a unified application programming interface API which may be implemented for example as an inter process call IPC or system bus message mechanism e.g. D bus or UNIX pipes . If a user successfully authenticates himself the authorization framework may authorize the request for data e.g. authorize a copy operation to be performed . Otherwise the requested data may not be copied to the requesting application window.

In one embodiment when the selection technique for performing a copy and paste action is used the authorization framework is invoked upon a client of general display server e.g. application issuing the paste command. Similarly for the drag and drop action the authorization framework is invoked upon a user completing the drag and drop action e.g. when the user has moved a selected data item onto the application window where the data item is to be copied and has released a mouse button . In these examples the authorization framework may be invoked by the secure display server or by a client of the secure display server e.g. application before sending data outside of the secure environment e.g. to application . If a user of the requesting application window is unable to successfully meet authentication and or authorization conditions then the paste or drag and drop operation is not completed.

In another embodiment when the cut buffer technique for performing a copy and paste action is used the authorization framework is invoked upon a user issuing the copy command. Alternatively the authorization framework may be invoked whenever a client of general display server tries to access the contents of the cut buffer. In one embodiment a separate cut buffer is maintained for the secure display server and for the general display server . Data copied to the general display server s cut buffer may be freely accessed while data copied to the secure display server s cut buffer may only be accessed upon authorization and or authentication by authorization framework .

By using authorization framework and multiple display servers confidential and secret data may be secured from copying between application windows. Thus security is increased for such data.

Note that though only a single secure display server is shown as a client of general display server general display server may include multiple secure display server clients. Each of the secure display server clients may provide different levels of security and be used for different categories of documents files. For example a first secure display server may be used for secret documents and a second secure display server may be used for top secret documents. The authorization framework may be invoked whenever data is to be copied to an environment having a lower security than the present environment in which it is presented.

In one embodiment a separate secure display server is loaded for each application that is to be run in a secure environment. When a confidential or secret document is to be opened a new secure display server may be loaded as a client of the general display server. An application associated with the confidential or secret document is then loaded as a client of the new secure display server. This may restrict sharing of information even between applications running in secure environments because each runs in its own separate secure environment. is a block diagram of an authorization framework in accordance with one embodiment of the present invention. Authorization framework can be accessed by a privileged or trusted application via an authorization API which may be implemented as a part of IPC or system bus mechanism e.g. D Bus or UNIX pipes . Privileged trusted application may be any system component that is trusted by the system which is running within the trusted system context. For example privileged trusted application may be a secure display server or a client of secure display server e.g. application . In one embodiment general display server is also a privileged trusted application . Alternatively general display server is an untrusted application .

In one embodiment when a client application e.g. client of general display server communicates with a privileged application e.g. secure display server or application for accessing a service provided by the privileged application privileged application communicates with authorization framework to determine whether client is authorized for accessing the requested service. In response authorization unit is configured to authorize client in view of one or more authorization policies which may be stored in memory local storage or remote storage.

When privileged trusted application communicates with authorization framework certain information for identifying client may also be communicated to the authorization framework such as for example a user identifier ID identifying a user of the client application a process ID identifying the client application a session ID identifying a user or desktop session within which the client application is running and or an action ID identifying an action to be carried out by the privileged trusted application . Certain OS specific attributes such as security context may also be included. Additionally whether the client application is operating in the unsecure environment or secure environment may be included. Based on such information authorization unit examines one or more authorization policies to determine whether client is authorized to access a particular service e.g. action carried out by the privileged trusted application e.g. whether to permit a copy operation a paste operation or a drag and drop operation .

The result of the authorization process may be a yes which indicates that the requested action should be carried out by the trusted application . Alternatively the result of the authorization process may be a no which indicates that the requested action should not be carried out by the trusted application . Further the result of the authorization process may be an authentication required which indicates that the requested action should only be carried out by the trusted application if the user of the client application has been successfully authenticated. According to one embodiment the privileged trusted application may specify or include an attribute indicating whether a user interaction is allowed.

If it is determined that client is authorized to access the requested service but would require authentication authorization framework further determines whether a user associated with client should be authorized to access the requested services by authenticating the user. If it is determined that the user of client needs to be authenticated authentication unit invokes an authentication agent which may run within the same user session of client which may be identified by a session ID or which may run on an entirely separate computing device. Authentication agent may display a dialog box for prompting the user to enter certain credentials to authenticate the user. Based on the credentials entered by the user authentication unit is configured to authenticate the user in view of authentication information stored in the authorization policies. If the user is successfully authenticated authorization framework returns a value to privileged trusted application indicating whether the requested service is authorized to be carried out by the privileged trusted application . Authentication agent may ask for passwords or other kinds of authentication e.g. checking fingerprint etc. 

In one embodiment authentication agent runs on a separate computing device than authorization framework . For example authentication agent may run on a mobile phone universal serial bus USB device or other mobile computing device and the authorization framework may run on a laptop computer desktop computer or other larger computing device. Where the authentication agent and authorization framework operate on separate computing devices the computing devices may communicate for example using transmission control protocol internet protocol TCP IP a USB protocol or other communication protocol.

Thus authorization framework provides an authorization API to be used by privileged trusted application offering services to unprivileged application through some forms of IPC mechanisms such as D Bus or UNIX pipes. The privileged application typically treats client as an untrusted application. For every request received from client privileged trusted application needs to determine if the request is authorized or privileged trusted application should refuse to service client . By using the authorization API privileged trusted application can offload the authorization and or authentication process to authorization framework .

In computing device of the general display server is a parent to secure display server . Clients of a display server typically have access to all graphics data display output available to that display server. This includes the graphics data associated with all clients of the display server. Therefore one disadvantage of having the general display server be the parent display server is that clients of the general display server may have access to the graphics data output by clients of the secure display server . Similarly clients of the general display server may be able to log keystrokes and other input device events that are associated with clients of secure display server .

Accordingly in computing device of general display server is a client to secure display server . In one embodiment only authorized applications are clients of secure display server . In a further embodiment users must provide credentials to execute an application as a client of secure display server . Thus secure display server provides a secure environment to clients of secure display server . Accordingly only authorized clients may have access to all graphics data available to secure display server and to all input device events from input device .

Secure display server may forward input device events associated with general display server and or to clients of general display server on to general display server . However general display server and clients of general display server may not be informed of input device events that are associated with any other clients of secure display server . Moreover general display server and its clients may have limited or no access to graphics data of applications running in secure environment . Accordingly if application attempts to log keystrokes it will only log those keystrokes associated with applications running in unsecure environment . Additionally if application requests access to graphics data from all applications it may receive graphics data only of other applications running in unsecure environment . In one embodiment application may request graphics data of applications running in secure environment . In response secure display server may invoke authorization framework and may only comply with the request if authorization framework authorizes the requesting application e.g. application .

In one embodiment secure display server is a client of secure display server . In a further embodiment only display servers e.g. secure display server and general display server are clients of secure display server . In such an embodiment all additional applications programs are either clients of general display server such as application or of secure display server such as application . Secure display server provides a secure environment to its clients e.g. to application . Secure environment and secure environment may include the same or different security measures. For example secure environment may be more secure than secure environment or vice versa. In one embodiment documents and files associated with a first level e.g. a low or medium level of security are opened by clients of secure display server and documents and files associated with a second level e.g. a high level of security are opened by clients of secure display server . To copy data from a higher level of security to a lower level of security even between different secure environments may cause authorization framework to be invoked.

General display server includes a compositing window manager . Unlike other window managers which render graphics information e.g. windows straight to a screen output for display a compositing window manager composits combines contents of off screen buffers e.g. individual buffers in system memory or video memory. The contents of the off screen buffers can be manipulated and composited before being sent to the screen output. This enables each application window to behave as an independent D or D object.

In one embodiment secure display server writes graphics data for its clients to one or more off screen buffers and general display server writes graphics data for its clients to one or more additional off screen buffers . Alternatively clients of secure display server e.g. application write graphics data to off screen buffers while clients of general display server write graphics data to off screen buffers .

Compositing window manager combines the contents of off screen buffers and off screen buffers and outputs a result to the screen output for presentation on display . The compositing window manager in one embodiment does not maintain a record of the contents of the off screen buffers or of the final composited result. Therefore this data is not readily available to clients of general display server . When a client of general display server requests graphics data of one or more application windows e.g. requests a screenshot general display server accesses the contents of the off screen buffers to provide the requested data. In one embodiment general display server invokes authorization framework prior to accessing off screen buffers . If the authorization framework fails to authorize the requesting client general display server only provides the graphics data of off screen buffers to the requesting client. Thus the information displayed in application windows operating in the secure environment is not readily available to application windows operating in unsecure environment increasing security of the secure environment .

Referring to at block of method a computing device executes a first display server that provides a secure environment for data presented in application windows of the first display server. At block the computing device executes a second display server that provides an unsecure environment for data presented in application windows of the second display server. The first display server may be a client of the second display server. Alternatively the second display server may be a client of the first display server. The display servers may be the same type of display server e.g. both may be X Window System display servers or may be different types of display servers.

At block processing logic receives a user command to copy data from a first application window to a second application window. The command may be a copy command or a paste command of a copy and paste operation or may be a command of a drag and drop operation. The user command may be received by the first display server or by the second display server.

At block processing logic determines whether the first application window is operating in the secure environment e.g. is a client of the first display server . If the first application window is not operating in the secure environment then the method continues to block and the requested data is copied from the first application window to the second application window. If the first application window is operating in the secure environment then the method continues to block .

At block processing logic determines whether the second application window is operating in the secure environment. If both the first application window and the second application window are operating in the secure environment then the method continues to block and the requested data is copied from the first application window to the second application window. If the second application window is not operating in the secure environment then copying the data to the second application window would cause the data to leave the secure environment. In such an instance the method continues to block .

At block an authorization framework is invoked which prompts a user to provide authentication data. The user may be required to enter a username and password supply a digital certificate provide biometric information e.g. via a fingerprint reader eye retina scanner etc. or provide other authenticating information. At block if the user successfully authenticated himself the method continues to block and the requested data is copied from the first application window to the second application window. If the user was unable to authenticate himself the method ends without copying the requested data.

Referring to at block of method a computing device executes a first display server that provides a secure environment for data presented in first application windows of the first display server. At block the computing device executes a second display server that provides an unsecure environment for data presented in second application windows of the second display server. The first display server may be a client of the second display server. Alternatively the second display server may be a client of the first display server. The display servers may be the same type of display server e.g. both may be X Window System display servers or may be different types of display servers.

At block processing logic writes graphics data of a first application window to a first off screen buffer. The graphics data may be written by a client application of the first display server or may be written by the first display server. At block processing logic writes graphics data of a second application window to a second off screen buffer. This graphics data may be written by a client application of the second display server or may be written by the second display server.

At block a compositor composits the contents of the first off screen buffer and the second off screen buffer. At block the compositor outputs the composited contents to a display.

At block processing logic receives a command to perform a screen capture or to otherwise access graphics data of the first application window. At block processing logic determines whether the command originated from an application running in the secure environment. If the command originated form an application operating in the secure environment the method continues to block . If the command originated from an application operating in the unsecure environment the method continues to block . At block processing logic prompts a user to provide authentication. In one embodiment the processing logic invokes an authorization framework that prompts the user.

At block processing logic e.g. the authorization framework determines whether the user has successfully authenticated himself. If authentication was successful the method continues to block and the graphics data from the first buffer and the second buffer are sent to the requesting application. The requesting application can then perform a screen shot with the received graphics data. If authentication was unsuccessful the method continues to block and graphics data from only the second buffer is sent to the requesting application. The requesting application can then perform a screenshot that does not include the graphics data of the first application window.

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a secondary memory e.g. a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processing device is configured to execute instructions for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The secondary memory may include a machine readable storage medium or more specifically a computer readable storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine readable storage media.

The machine readable storage medium may also be used to store one or more display servers which may correspond for example to general display server and secure display server of . The machine readable storage medium may also be used to store an authorization framework which may correspond for example to authorization framework of . The machine readable storage medium may also include a software library containing methods that call the display servers and or the authorization framework. While the machine readable storage medium is shown in an exemplary embodiment to be a single medium the term machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable storage medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine readable storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

