---

title: Systems and methods for delaying termination of a process to capture data relating to a potential threat
abstract: A computer-implemented method for delaying termination of a process to capture data relating to a potential threat is described. A process that executes an event that indicates a threat is monitored. The event is allowed to execute on the process until a predetermined indicator is triggered. Data associated with the execution of the event is recorded when the predetermined indicator is triggered. The recorded data is transmitted to a processing system for analysis. The process is terminated from continuing to execute the event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08392993&OS=08392993&RS=08392993
owner: Symantec Corporation
number: 08392993
owner_city: Mountain View
owner_country: US
publication_date: 20100623
---
The use of computer systems and computer related technologies continues to increase at a rapid pace. This increased use of computer systems has influenced the advances made to computer related technologies. Indeed computer systems have increasingly become an integral part of the business world and the activities of individual consumers. Computer systems may be used to carry out several business industry and academic endeavors. The wide spread use of computers has been accelerated by the increased use of computer networks including the Internet.

Many businesses use one or more computer networks to communicate and share data between the various computers connected to the networks. The productivity and efficiency of employees often requires human and computer interaction. Users of computer technologies continue to demand that the efficiency of these technologies increase. Improving the efficiency of computer technologies is desirable to anyone that uses and relies on computers.

Malware may be installed or executed on computers in order to hinder the functionalities of computers. Malware may also be used to allow an authorized user to gain control of a computer as well as access to data stored on the computer. This data may be sensitive data to the user of the computer i.e. passwords account numbers financial information and the like . Detection programs may attempt to prevent malware from being installed on a computer. Developers of malware and other threats to computers however are aware of programs designed to block the installation and execution of malware. As a result developers of malware may design the malware to not be accessible each time a computer attempts to access the malware for analysis purposes . In other words the malware may not be accessible when a backend device attempts to perform an analysis of the malware. Accordingly benefits may be realized by providing improved systems and methods for detecting malware and other threats to a computing device. In particular benefits may be realized by providing systems and methods for delaying termination of a process to capture data relating to a potential threat.

According to at least one embodiment a computer implemented method for delaying termination of a process to capture data relating to a potential threat is described. A process that executes an event that indicates a threat is monitored. The event is allowed to execute on the process until a predetermined indicator is triggered. Data associated with the execution of the event is recorded when the predetermined indicator is triggered. The recorded data is transmitted to a processing system for analysis. The process is terminated from continuing to execute the event.

In one embodiment the event includes accessing an exploit uniform resource locator URL that includes a download URL. The download URL may be configured to download a file. The event may also include accessing a message box that comprises a message requesting confirming input from a user.

In one example an information requesting URL may be accessed upon receiving the confirming input from the user. The information requesting URL may be configured to download an information requesting form. In one configuration a pattern of data that is input to the information requesting form may be analyzed. The process may be terminated from continuing to execute the event if the patter of data matches a predetermined pattern of data.

The process may be terminated when a file is downloaded. The process may also be terminated if a call to a predetermined application programming interface API call is executed. The process may further be terminate if a call to a predetermined API call sequence is executed.

A computing device configured to delay termination of a process to capture data relating to a potential threat is also described. The device may comprise a processor and memory in electronic communication with the processor. The device may include a monitoring module configured to monitor a process that executes an event that indicates a threat and allow the event to execute on the process until a predetermined indicator is triggered. The monitoring module may also be configured to record data associated with the execution of the event when the predetermined indicator is triggered and terminate the process from continuing to execute the event. The device may further include a reporting module configured to transmit the recorded data to a processing system for analysis.

A computer program product for delaying termination of a process to capture data relating to a potential threat is also described. The computer program product may include a computer readable medium having instructions thereon. The instructions may include code programmed to monitor a process that executes an event that indicates a threat and code programmed to allow the event to execute on the process until a predetermined indicator is triggered. The instructions may also include code programmed to record data associated with the execution of the event when the predetermined indicator is triggered and code programmed to transmit the recorded data to a processing system for analysis. The instructions may further include code programmed to terminate the process from continuing to execute the event.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

While the embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

Computing devices may be constantly monitored for threats against the integrity of the device. A threat may be the danger of an attack on the computing device. A threat may include without limitation an exploit social engineering malware virus and the like. These programs may attempt to harvest data stored on a device. An example of a program that may attack a computing device may be an exploit. In one configuration an exploit may be a piece of software a piece of data or a sequence of commands that may take advantage of a vulnerability of a computing device in order to cause unintended or unanticipated behavior to occur on the software or hardware of the device. This may include such things as gaining control of the computing device allowing privilege escalation denying services buffer overflow directory climbing defaults denial of service and the like.

Programs that may attack a computing device may use social engineering to carry out the attack. Social engineering may refer to the act of a program manipulating users into performing actions or divulging confidential information rather than the program breaking into the device or using technical hacking techniques. Social engineering may refer to an act of deception for the purpose of information gathering fraud computer system access and the like.

There may be many ways to obtain technical or administrative information about a computing device. For example the information may be obtained from the devices and systems themselves. In addition the information may be obtained from the administrators and users of the devices. Surreptitious or unauthorized attempts to obtain such system information may be known as hacking or cracking if the attempt involves obtaining the information from the devices and as social engineering if they involve manipulating or tricking a person into divulging the information. The term social engineering may describe the tricks used by mass mailing viruses to entice recipients messages with viral attachments to run or view those attachments.

Exploits and social engineering programs may cause a harmful file or other executable to be downloaded to the computing device. This file may then execute and damage the computing device by collecting sensitive data destroying software and or hardware of the device causing the device to malfunction and the like.

When a possible exploit or social engineering threat is detected the code or scripts executing at the time on the computing device may be blocked and prevented from continuing to execute. Terminating the execution of the code or scripts may be done in order to prevent the harmful file from being accessed via a download uniform resource location URL and the prevent the file from actually being downloaded to the computing device. Preventing the code and scripts from continuing to execute however may result in losing the opportunity to capture the download URL and the harmful file for analysis.

In one embodiment when a possible exploit or social engineering threat is detected the present systems and methods may continue to allow the code and scripts running at the time of the detection to continue to execute. This may allow the download URL and the harmful file to be captured. After the download URL and file have been captured the present system and methods may then terminate the process and prevent the file from actually executing on the device.

The captured download URL and the captured harmful file may then be analyzed in order to determine the damage the file would have caused and how the file would have caused such damage to the device. This analysis may then be used to improve security features and detection mechanisms on the computing device.

Present security features on computing devices do not collect files insitu from user machines when a threat is detected by allowing code and scripts to continue executing after the detection of the threat. Instead present security features terminate the code and scripts and attempt to capture the files by use of a backend honey client. Developers of exploits and social engineering threats are aware of this current process and may prevent a download URL or harmful file from being accessed if the threat is terminated. In other words the backend honey client may not be able to recreate the download URL in order to access the harmful file is the code and scripts are terminated on the user machine when the threat is detected. By allowing the code and scripts to continue executing on the computing device after the threat is detected a collection of harmful files across of multiplicity of clients all running an adaptor in accordance with the present systems and methods may be captured. The download URLs may be recorded and the security features of computing devices may be improved.

In one embodiment the client may include a monitoring module . The monitoring module may monitor a process that may be executing on the client . The monitoring module may monitor the process in order to detect a threat indicator that may execute within the process . The threat indicator may be associated with an actual threat . For example the process may be a web browser application. The threat indicator may be a specific URL that is accessed by the process . If the process is allowed to continue to execute after the threat indicator is detected the actual threat may execute on the process . The threat may cause the client to malfunction. In addition the threat may cause data stored on the client to be lost or corrupted. The threat may also allow a third party to take control of the client and the like. When the monitoring module detects the threat indicator a reporting module may transmit data or information regarding the threat indicator to the server for analysis. In one embodiment the threat indicator may be allowed to continue to execute in order for the monitoring module to be able to capture the threat or information regarding the threat .

In one embodiment the server may include an analyzing module . The analyzing module may analyze the data or information received from the reporting module . In one configuration a database may store known signatures associated with various threat indicators and actual threats. For example the signatures may be signatures of known malware known threats known viruses and the like. The analyzing module may compare a signature associated with the threat indicator and or the threat to the signatures stored in the database . The analyzing module may provide a summary of the analysis of the threat indicator and or the threat to the client .

In one configuration the client and the server may access the Internet . The devices may access the Internet in order to access a website identified by a particular URL. For example the process may access the Internet in order to display a website to a user of the client . The server may also access the Internet in order to access the threat indicator and the threat which may be identified by a URL.

In one example the monitoring module may monitor data accessed by the browser application . A collecting module may collect the data accessed by the browser . In one example the browser application may be a web browser and may access an exploit URL that may represent a potential threat to the client . The exploit URL may be flagged or identified by the monitoring module as a potential threat to the client . In one embodiment the exploit URL may include shell code . The shell code may access a download URL . The download URL when accessed may download a file . The file may represent the actual threat to the client .

In one example if the monitoring module detects a potential threat from the exploit URL the shell code may be allowed to continue to execute and access the download URL which may begin to cause the file to be downloaded to the client . A terminating module may determine when to terminate or stop the shell code from executing. For example the monitoring process may terminate if a download of the file occurs. In addition the terminating module may terminate the monitoring process is calls to specific application programming interfaces APIs calls are made that may lead to undesirable system changes i.e. CreateRemoteThread . Further the monitoring process may be terminated if calls to specific APIs call sequences are made that may lead to undesirable system changes. The terminating module may also terminate the monitoring process if a timer expires. If the user attempts to navigate away from the context of the threat the monitoring process may be terminated. For example if the user attempts to navigate away from the exploit URL . If one or all of the events described above occur the terminating module may prevent the actual file from being downloaded. In another embodiment the terminating module may allow the file to be downloaded but not opened or executed. In other words the downloaded file may be saved into a quarantine and remained isolated from the client .

In one configuration a scanner may scan the captured exploit URL and or the download URL and determine if the monitoring module has previously collected or captured this information. If the exploit URL and or the download URL have not been previously captured by the collecting module a reporting module may transmit this information to the server for analysis.

In one configuration the browser application may produce a message box that includes a message to a user. The message may instruct the user to click a particular button to confirm or request a particular action. In one example the message box and the message may be a deceiving message intended to corrupt the client when the user performs the confirming or requesting action by clicking a button in the message . For example the user may click a button within the message and this may cause a download URL to be accessed. The download URL may then be used to download a malicious file . The monitoring module may detect when the user performs an action within the message e.g. clicking a button . When the user performs the action the collecting module may collect or capture the download URL and or the file that are subsequently accessed. A terminating module may prevent the file from actually downloading to the client . The terminating module may also wait until the file has been downloaded to the client and then prevent the file from executing on the client .

The reporting module may report the data and information collected by the collecting module to a backend device such as a server . The server may then analyze the data and information received from the reporting module . In one configuration the collecting module may collect or capture the actual download URL . In a further embodiment the collecting module may collect the file downloaded from the download URL . The backend server may analyze the download URL and or the file and provide a report to the client regarding the analysis.

The monitoring module may further include a timer that expires after a certain period of time if the user has not performed the confirming action requested by the message . The timer also expire if the user performs one or all of the actions described previously. If the timer expires the terminating module may prevent the user from performing the confirming action and the reporting module may notify the user that a potential threat had been detected.

In one embodiment the browser application may be a web browser and may display a message box that includes a message to the user. The message may request a confirming action to be performed by the user. For example the message may request the user to click a particular button or location within the message . If the user performs the confirming action an information requesting URL may be accessed which may provide an information requesting form to the user. The form may request the user to provide sensitive information such as account information credit card information and the like.

The monitoring module may include a pattern analyzing module . The pattern analyzing module may analyze the type of data or information the user enters into the information requesting form . If the pattern analyzing module determines that the information the user is providing to the information requesting form is sensitive information a terminating module may terminate the process so that the user is prevented from continuing to provide information in the information requesting form . For example the pattern analyzing module may determine that the pattern of data the user is providing to the form is similar to a credit card number. The terminating module may disable the for so that the user is prevented from providing the complete credit card number into the form . The form may be disabled by preventing the form from being displayed to the user by preventing data from being stored in a field of the form by causing the browser application to navigate away from the information requesting URL etc.

A collecting module may collect or capture the information requesting URL and or the information requesting form before the terminating module terminates the process. The reporting module may then transmit or report the captured information to a backend server for analysis.

In one embodiment the analyzing module may analyze the received or downloaded data . The module may include a file analyzing module that may compare a signature associated with the file and or the information requesting form . The analyzed signatures may be compared with the signatures stored in the database that are associated with known malware viruses malicious files and the like. If the analyzed signatures match one of the signatures stored in the database the notification module may notify the client that the file and or the information requesting form is a malicious threat. Further the content of the file and or information requesting form may be analyzed instead of or in addition to their signatures. The analyzing module may determine whether the file and or the form are malicious based on the content analysis. If the file and or the form are determined to be malicious an identifier or signature for the file and form may be stored in the database . The notification module may also provide a notification to the client that the file and or form have been determined to be malicious and a corresponding identifier or signature for the file and form has been stored in the database .

In one configuration a process may be monitored for an event that indicates the possibility of a threat. The event that indicates the possibility of the threat may be detected . In one configuration the event may be allowed to execute until a predetermined indicator is triggered. Data associated with the execution of the event may be recorded . The recorded data may be transmitted to a processing system for analysis and the process may be terminated .

In one example a browser process may be monitored for accessing a URL of an exploit page. Accessing the URL of the exploit page may be detected . The URL of the exploit page may be allowed to execute until a URL of a downloadable file is detected. The URL of the downloadable file may be recorded and the URL of the downloadable file may be transmitted to a server for analysis. The process accessing the URL of the downloadable file may be terminated .

A browser process may be monitored for an execution of a message box. The execution of the message box on the browser process may be detected . The message box may include a message requesting configuration input from a user. A determination may then be made as to whether confirmation input from the user has been detected. If it is determined that confirmation input from the user has not been detected the method may return to monitor the browser process for the execution of a message box. If however it is determined that confirmation input from the user has been detected a URL of a downloadable file may be allowed to be accessed in response to the confirmation input. The URL of the downloadable file may be recorded and the recorded URL of the downloadable file may be transmitted to a server for analysis. In one embodiment the browser process may be terminated .

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components or devices. For example the monitoring module to implement the present systems and methods may be stored within the system memory . Applications resident with computer system are generally stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit or other storage medium. Additionally applications can be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem or interface .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present systems and methods. The devices and subsystems can be interconnected in different ways from that shown in . The operation of a computer system such as that shown in is readily known in the art and is not discussed in detail in this application. Code to implement the present disclosure can be stored in computer readable medium such as one or more of system memory fixed disk optical disk or floppy disk . The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 UNIX Linux or another known operating system.

Moreover regarding the signals described herein those skilled in the art will recognize that a signal can be directly transmitted from a first block to a second block or a signal can be modified e.g. amplified attenuated delayed latched buffered inverted filtered or otherwise modified between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next other embodiments of the present systems and methods may include modified signals in place of such directly transmitted signals as long as the informational and or functional aspect of the signal is transmitted between blocks. To some extent a signal input at a second block can be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved e.g. there will inevitably be some attenuation and delay . Therefore as used herein a second signal derived from a first signal includes the first signal or any modifications to the first signal whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and or final functional aspect of the first signal.

With reference to computer system modem network interface or some other method can be used to provide connectivity from each of client computer systems and to network . Client systems and are able to access information on storage server A or B using for example a web browser or other client software not shown . Such a client allows client systems and to access data hosted by storage server A or B or one of storage devices A N B N N or intelligent storage array . depicts the use of a network such as the Internet for exchanging data but the present systems and methods are not limited to the Internet or any particular network based environment.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

Furthermore while various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the present systems and methods and their practical applications to thereby enable others skilled in the art to best utilize the present systems and methods and various embodiments with various modifications as may be suited to the particular use contemplated.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

