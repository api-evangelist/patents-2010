---

title: System and method for running a multi-module telephony application
abstract: A method for running an accountable multi-module telephony application including receiving an application request to a number associated with an account of a telephony platform; directing application control to a first module of an application of the account; passing application control from the first module to a second module of the account through a linking system; and metering use of the first module and the at least second module independently.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08582737&OS=08582737&RS=08582737
owner: Twilio, Inc.
number: 08582737
owner_city: San Francisco
owner_country: US
publication_date: 20101007
---
This application claims the benefit of US Provisional Application No. 61 249 491 filed 7 Oct. 2009 titled SYSTEM AND METHOD FOR CUSTOMIZED TELEPHONY APPLICATIONS which is incorporated in its entirety by this reference.

This invention relates generally to the telephony field and more specifically to a new and useful system and method of a customized telephony application in the telephony field.

Traditional telephony applications such as Interactive Voice Response IVR and Private Branch Exchange PBX systems are used to provide customized telephone services e.g. an automated phone directory bill paying or account info . A telephone application is generally launched through phone actions such as pressing a phone key e.g. 5 or speaking a phrase. Performing a phone action may launch another IVR or PBX server hosting a different application. When using such a system multiple telephone applications need to be individually configured and integrated to achieve a desired functionality. In some situations a single company will offer a variety of first party applications that are designed to work together but in this situation the available application options are often limited. In other situations the applications are sold and operated by different companies. The applications of different companies may use different telephony hardware and software stacks which prevents the ability to transfer call state meta data or call control between applications. Additionally each of these services may have separate billing contracts and operation costs which not only can become financially expensive but also is bothersome to manage. Additionally there are many technology platforms such as telephony platforms web service platforms and other technology platforms that have numerous third party developing tools on top of and it is often challenging for the technology platform provider and or the third party developers to create a profitable product due to the complicated relationship between users technology providers and products. Thus there is a need in the telephony application field to create a new and useful system and method for running a multi module telephony application. This invention provides such new and useful system and method.

The following description of the preferred embodiments of the invention is not intended to limit the invention to these preferred embodiments but rather to enable any person skilled in the art to make and use this invention.

As shown in a method S for running a multi module telephony application of a preferred embodiment includes receiving an application request to a number associated with an account of a telephony platform S directing application control to a first module of an application of the account S passing application control from the first module to a second module of the account through a linking system S and metering use of the first module and the at least second module S. The method S functions to allow an application to have the functionality of multiple modules linked so application control can be passed between modules. The method S further functions to allow highly customized telephony applications to use modules or applets developed and operated by any suitable party. The modules can preferably be customized within a container app or some abstraction of overall flow between modules that determines overall configuration in module flow. The modules may vary in functionality and performance. The customization process is preferably facilitated by an online store but any customization environment may alternatively be used. The method S further provides ways for modules to pass parameters and share state information. The different modules may be developed by any suitable entity such as third party developers or operators of the telephony platform. The method S is preferably implemented on the telephony platform substantially similar to the telephony platform described in US U.S. Patent Application publication no. 2009 0252159 filed Apr. 2 2009 titled SYSTEM AND METHOD FOR PROCESSING TELEPHONY SESSIONS which is incorporated in its entirety by this reference but the method may alternatively be used by any suitable telephony platform. The method further functions to enable a module to be used by users on a usage based technology platform. An additional benefit of the method S is that usage of a module is individually metered which can preferably be used to simplify the payment process. Preferably the design of the system as described below and the method of use allows for outside developers to easily create and operate telephony application modules without performing complicated tasks to manage state of the call or coordinating with other module developers for how to communicate and collaborate within an application.

Step S which includes receiving an application request to a number associated with an account of a telephony platform functions to handle an incoming request to the telephony platform. The application request is preferably an incoming phone call which may be a phone call from the public switched telephone network PSTN a voice over internet protocol VoIP or any suitable telephone network. The application request may alternatively be a request made from a telephony message such as a message received over short message service SMS a multimedia messaging service MMS or any suitable messaging service. As another alternative the application request may be over fax or any suitable communication channel. Additionally or alternatively the application request may be initiated from a web application or a server such as in the example where an outgoing phone call is initiated by the web application. The incoming application request is preferably directed to an application assigned to a phone number. The application is preferably composed of at least one module. The at least one module is preferably configured to direct application control to at least one other module. The second module that the first module directs application control to may be determined through the application logic of the module. More preferably the application is preconfigured to include a plurality of modules that have a configured flow as shown in . A user customized application which may be described as being defined by a container application may be setup through a user interface that links the different modules and defines the functionality and operation parameters of the modules as shown in . The modules may be developed by any suitable party. For example the functionality of an application may utilize one module by a company A which can pass application control to a second module by company B. These modules are preferably stored outside of the telephony platform e.g. on a server determined by the respective developers owners but the modules may alternatively be stored within the telephony platform. Additionally similar to how one application may be configured to use a plurality of modules a module may itself be configured to use a plurality of other modules as shown in .

Step S which includes directing application control to a first module of an application of the account functions to direct the telephony platform to communicate with the first module to determine application logic. Application control preferably includes the a server hosting the module communicating with a call router of the telephony platform or any other suitable portion of a telephony platform. Directing application control to the first module preferably includes having the call router communicate with the module at a Universal Resource Identifiers URI . The module is preferably stored on an application server but the module may alternatively be stored in any suitable location. Modules preferably have a specified initial URI i.e. a module inlet . The URI may be a resource indicator for Hypertext Transfer Protocol HTTP Session Initiation Protocol SIP or any suitable communication protocol. As described more below the initial URI may additionally be used to pass operation parameters to the module. In some variations the operation parameters may be information to determine what module will be passed application control. In this variation a single URI can be used to define the application configuration for a plurality of modules.

Step S which includes passing application control from the first module to a second module of the account through a linking system functions to transfer the application control as viewed by the telephony platform to a second module. The passing of application control is preferably initiated through programmatic logic of the first module such as entering an operational state or some action. This module state or action can be thought of an outlet. There may be a plurality of outlets of which application control may be passed to varying modules. As an example a phone tree module may have the actions of various dual tone multi frequency DTMF or alternatively speech recognition phrases assigned to different modules that will be passed control if that action is taken. As discussed above the first and second module may be operated by any suitable party and the second module preferably does not need to have any knowledge of the first module to be passed control. Operation of the first module is additionally independent of the second module except that the mechanism of the linking system may require being implemented by the first module. The linking system may be operated in a number of ways. In a first variation the linking system includes performing a URI redirect to the initial URI of the second module. For example the first module will issue a command to the telephony platform to next communicate with the initial URI of the second module instead of a URI of the first module. The redirect URI the initial URI of the second module may be stored by the first module. The URI redirect may alternatively be preloaded through the initial URI of the first module. So one initial URI may include all the application logic to use a plurality of modules by embedding the application configuration parameters in the initial URI of the first module. As a second variation shown in the linking system may include using a dispatcher engine that performs the steps of passing a module identity code of the second module to a dispatcher engine of the telephony platform S converting the code to a URI for the second module S and directing call control to the second module at the URI for the second module S. The module identity code is any suitable representation of the second module. Each module usable by the telephony platform is preferably assigned a module identity code. The dispatcher engine is preferably a service ran on the telephony platform that maps module identity codes to initial URI s of modules. The module identity codes functions to allow the location of the module to be aliased so that a developer may change the location and setup of a module without breaking links to an initial URI that other modules include. The dispatcher engine may additionally provide a level of security such that use of a module may not be achieved if it is not allowed. As yet another variation the dispatching engine may store module to module flows in an application configuration datastore i.e. a container app and the first module preferably signals that the next module or module of a particular outlet should be transferred control. In this variation the first module may not have knowledge of what module is being linked to. The application configuration datastore preferably includes aliasing of the initial URI s of modules and will direct application control to appropriate initial URI. The dispatching engine preferably additionally works in cooperation with a policy engine that determines if application control is allowed and or a billing engine that uses a designated usage model for billing management of various parties as shown in . The policy engine and the billing engine are discussed below. The dispatcher engine and the policy engine preferably cooperate to determine where application control should be directed and if application control should be allowed for the particular user account. The billing engine is preferably used in combination with the policy engine to determine billing factors that would prevent module access.

Step S which includes metering use of the first module and the at least second module functions to account for the different modules of the application separately. The first and second module usage of the telephony application for a user account is preferably individually metered. The independent metering can preferably be achieved because use of the telephony platform during application control by each module is preferably isolated and accountable. The telephony platform e.g. a call router can preferably track what module URI s are being used for application control and more preferably the dispatching engine or the policy engine preferably tracks application control. In addition to metering application control actions outside of application control asynchronous usage may be monitored. For example API calls made by a module or other use of the telephony platform that do not relate to an instance of application control may be included in the metered activity. Metering preferably includes maintaining usage statistics. The metrics used for metering preferably may include per period use e.g. unlimited usage for one month amount of usage in a fixed period e.g. 100 minutes of call time per month or 500 text messages in a month or a usage limit e.g. 500 text messages or any suitable usage model. Alternatively the metering may include noting that a module is in use during a particular period. This may be used for a usage model with unlimited use in a time period. Preferably the comparison of time period of unlimited use and the current time is used in verifying permission for the account to use a module. For example if a usage model is set so that the module may see unlimited use during month period the metering preferably notes that the month is being used in a particular month and a policy engine preferably verifies permission for an account to be used that month e.g. check if the current date is included in the month of unlimited use . This particular alternative may be further used during the configuration of telephony application. A particular module may not be prevented from being configured within a telephony application until the current time period is paid for. The metric used to measure usage of the first module and the second module can preferably differ such that the usage model of each module may be individually assigned.

As an additional step of the preferred embodiment shown in the method S may include assigning a usage model of the account for the first module and the second module S and prior to directing application control to the initial URI of the second module a policy engine verifying permission for the account to use the second module S. The usage model of a module is preferably assigned during a prior configuration of the application and the information is stored for the application of the account. The usage model may be an agreement of what resources can and cannot be used but preferably includes a billing agreement that specifies a pricing model for the use of the module. When verifying permission the policy engine is preferably checking that the users usage model is being followed. Conditions for permission may include having a fully paid account having current billing information having funds in an account or any suitable condition. Other permission rules may additionally be included such as categorization of user banned user lists or any suitable permission setting. In some cases the policy engine may need to communicate with the billing engine to obtain information pertinent to the rules for permitting usage. The policy engine is preferably used when the linking system is being used when passing of application control is made between two modules. The policy engine and the dispatcher engine may be used in any suitable order or configuration.

As an additional step of the preferred embodiment the method S may include a billing engine that performs the steps including transferring payment from an account based on a usage model for the first module and the second module S which functions to charge accounts and or pay entities based on independent usage models and metered usage by a first module and at least second module. The billing engine preferably provides a simplified billing process for applications composed of multiple modules. A user account may enter numerous subscriptions contracts with different entities when using an application with a plurality of modules but the billing engine is preferably used to consolidate the different usage models so that the user pays a single bill for all module use as shown in . Similarly developers owners or any entity associated with the module has simplified billing procedure by preferably having the cost of telephony platform use and payment from a plurality of user accounts consolidated into a single payment as shown in . Preferably transferring of payment from an account includes charging the user account for combined usage of the first module and the at least second module as indicated by the metered use of the first module and at least second module and distributing payment to an entity of the first module based on usage record of the first module and distributing payment to an entity of the second module based on a usage record of the second module. When distributing payment to an entity of a module there may be some portion of payment that the telephony platform receives and thus the payment delivered may factor in this cost. This preferably enables the telephony platform provider to act as a single point of billing even though each user may have numerous contracts with different module operators. The user account instead of paying numerous bills each with possibly different usage plans pays just the telephony platform provider and the developers. Similarly operators of the modules receive a payment from the telephony platform instead of developing their own infrastructure to track usage of the module and also implementing their own billing system. Additionally the billing engine preferably cooperates with the policy engine so that the policy engine may verify the user account has satisfied the billing requirements. These billing requirements may be for the overall application but may be for each module individually.

As previously discussed the method may include sharing state information of the first and the at least second module S. Each module can preferably have individual configuration parameters which may be stored by the module operators on the telephony platform or through any suitable device. The configuration parameters combine to form a configuration state. Additionally the application as defined by the collection of modules may have configuration parameters. The application configuration parameters may be the flow of the modules in the application but may alternatively be variables that are globally available to the modules of the application. For example an account ID a call number text message and or any suitable parameter may be available to the modules. The configuration parameters in one variation are passed through the initial URI s of the modules that is used when passing application control. For example settings for a simultaneous ring app may have two phone numbers 415 555 1234 and 415 555 6789. Rather than storing and accessing these settings from a database the applet reference may have them embedded in the reference such as 

As another variation the parameters may be accessible through an API call to the telephony platform where the configuration parameters are stored. A presassigned key value pairing may be provided for use by the modules. In a variation where multiple instances of the same module are used settings may be setup globally for all instances or saved individually for each instance of a module. Settings and information that may be collected may include phone numbers email addresses sound files text to read with a text to speech service URIs to other media other module references initial URI s or any suitable inputs. In addition to configuration parameters that may be set for every application use instance parameters i.e. parameters that are unique for every phone call or text message or application use may additionally be shared through similar techniques. After application control has been passed to the second module then telephony platform requests are preferably sent to a URI of the second module.

Additionally the telephony platform may include a notification engine that preferably performs the step of notifying a module of activity on the telephony platform. The notification engine preferably sends an event notification during any suitable event. Such events may include an incoming call to an application an end to an application instance a billing event or any suitable event.

As shown in a method S for providing metered API access of a second preferred embodiment preferably includes receiving a request to add an application for use on a platform S receiving user account information for the platform S receiving usage agreement information for the user account S metering the application usage for the account S and permitting use of a platform resource for the user account according to the metered usage and usage agreement S. The method S preferably functions to enable a single application to be used by users of a usage based technology platform. The technology platform may be any paid platform such as an API a REST API SOAP API or any suitable API or may alternatively have usage limits. More preferably the technology platform is a paid or usage based platform where usage of the technology platform either by the user or of the application is of importance to the services provided. There may be usage limitations or alternatively billing requirements based on usage. Method S can preferably by used with the method S above for the modules of an application and method S may additionally be used for a telephony platform and used in a manner substantially similar to the method S. But the method S can preferably be used with standalone applications such as a third party mobile app that uses a web service. For example a social network that wants to charge for third party mobile phone application access to the social network API could use method S. The method S can preferably be performed by a system as in the above method that includes a policy engine a billing engine and or a dispatcher engine. The method S may additionally be extended for use with a plurality of applications associated with a user account where the user is accountable for different usage models of each application as in the method S.

Steps S S and S which include receiving a request to add an application for use on a platform receiving user account information for the platform and receiving usage agreement information for the user account functions to authorize an application to access resources of an account and provide suitable usage metering. This process can be setup similar to other authorization processes such as oauth. However the process additionally includes receiving usage agreement information. The usage agreement information may be a variety of items depending on the particular technology platform. Preferably the usage agreement information includes billing information and an agreed upon usage plan. The usage plan may be a fee per time period a fee per amount of resource use fee per amount of time or any suitable usage model. In another variation the usage agreement information may be an acknowledgement to the amount of use available to the user such as a limit of data usage per time period. The Steps S S and S preferably result in an application receiving access to account resources on the technology platform and a usage model being setup for the user account of the application.

Step S which includes metering the application usage for the account functions to create a record of the usage of the application by the user account. The metering is preferably substantially similar to the metering as performed in method S. Metering of application usage may additionally be targeted to particular actions such as the number of times an API call is made or use during a particular time period. The technology platform preferably meters the activity by the application.

Step S which includes permitting use of a platform resource for the user account according to the metered usage and usage agreement functions to regulate the use of the application by the user. A policy engine substantially similar to the one described above is preferably used for this step. The policy engine may additionally communicate with a billing engine to determine permission. In the method S above this step preferably includes passing application control to a module or application . In other alternatives the permitting use of a platform may include allowing specific API calls or resources to be used by an application. Depending on the usage agreement information this may be limited to specific API calls or be overall access to the technology platform. When permission is not allowed any suitable error message or action may be taken. Depending on the usage agreement when access is not allowed because usage has reached a limit of the plan a billing engine may automatically charge a user account to enable uninterrupted use of the technology platform. A billing engine may additionally perform steps substantially similar to the billing steps of method S. The platform preferably collects payment from a user account and then distributes payment to the entity associated with the application e.g. the developer . Users that utilize multiple applications on a technology platform can preferably receive a single bill and developers of applications can similarly receive a consolidated payment for all users delivered by the telephony platform.

As shown in a particular system for performing the above methods preferably includes a telephony platform with a linking system and a plurality of modules. The linking system preferably includes a dispatcher engine a policy engine and a billing engine but may contain any alternative combination or alternative components. The dispatcher engine preferably works to determine what initial URI to pass application control. The policy engine preferably enforces permissions and can communicate with the billing engine to determine billing related restrictions.

The call router functions to initiate or receive calls from a telephony device and to connect to a deployed container app and or applet. The call router is preferably connected to a Public Switched Telephone Network PSTN device over the PSTN network such that the call router can receive and make calls from PSTN connected devices such as landlines cellular phones satellite phones or any other suitable PSTN connected devices as well as non PSTN devices such as Voice Over Internet Protocol VoIP phones SIP devices Skype Gtalk or other Internet addressable voice devices. The call router may alternatively or additionally function as or include a message router for use with short message service SMS messages. The call router can preferably connect to an SMS network such that it can receive and send messages from SMS network devices cellular phones computers smartphones or any suitable SMS network devices. The call router may also send or receive text messages multimedia messages emails faxes and other suitable PSTN compatible communication messages. The call router preferably communicates with the application or modules using an application layer protocol more preferably using the HTTP or secure HTTPS protocol. SIP or any suitable internet protocol may alternatively be used. The communication between the module and the call router is preferably stateless and any state information e.g. call state or data is preferably located in a URI or the request parameters such as HTTP headers GET URI parameters POST request body parameters HTTP cookies or in configuration parameters of the application or module. The call router preferably stores state information in call router resources. The call router resources are preferably accessible by the application server and other devices through a call router API. The call router preferably associates each incoming phone number with a starting URI The starting URI is preferably the location of the application or the initial module. Before a call is received at the call router the starting URI is associated with the incoming call address such as DID SIP address etc. or by the application upon initiation of an outgoing call. The call router can preferably send call data such as the caller number obtained via Caller ID caller geographic data country city and or state zip the number dialed the time of the call or any other suitable information or parameter.

The module is preferably a resource such as document containing telephony instructions interpreted by the call router. The instructions are preferably translated into actions and handling of the telephone call text message or other telephony communication. A module may provide any suitable functionality. Some exemplary modules may include a store locator an e commerce order status app call analytics a find me application an RSS feed powered app a call directory and routing app an advertising application that calls another applet reference after playing an advertisement a voicemail app menu app a simultaneous call app a find me app that calls a list of numbers until one of them is answered or any suitable application. Developer modules can be remotely hosted at a site selected by the developer utilizing any suitable architecture yet the modules can be made available in a single marketplace to provide better exposure and lower the barrier of acceptance by potential customers.

The system may additionally include a billing engine that functions to manage and track telephony platform usage by a module to appropriately charge a user. The billing engine preferably tracks all modules according to set billing policies agreed to by a customer in a usage model. This may include tracking time of use number of uses or according to any suitable subscription model. The billing engine preferably consolidates all module fees for both the customers and the developers. It is envisioned that a customer may have multiple service agreements and contracts for various modules. The bills for the various modules are preferably consolidated into a single periodic bill created and sent out by the billing engine. Similarly it is envisioned that a developer may have a plurality of customers with varying agreements. The payments from the various customers are preferably consolidated into a single periodic payment. Account information and billing information is preferably stored in any suitable database.

As a person skilled in the art will recognize from the previous detailed description and from the figures and claims modifications and changes can be made to the preferred embodiments of the invention without departing from the scope of this invention defined in the following claims.

