---

title: Automated certificate management
abstract: A certificate management system provides automated management of certificate lifecycles and certificate distribution. Rather than depend upon an administrator to manually distribute and manage certificates, the system self-generates certificates, distributes the certificates to appropriate servers or other parties, and transitions from old certificates to new certificates in a well-defined manner that avoids breaking functionality. After generating one or more certificates, the system securely shares certificates in a way that parties that use them can find the new certificates without an administrator manually distributing the certificates. When it is time to update certificates, the system generates new certificates and shares the new certificates in a similar way. During a transition period, the system provides a protocol by which both old and new certificates can be used to perform authenticated access to resources, so that the transition from an old to a new certificate does not break services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09197630&OS=09197630&RS=09197630
owner: Microsoft Technology Licensing, LLC
number: 09197630
owner_city: Redmond
owner_country: US
publication_date: 20100308
---
Many organizations and systems include server computer systems that provide various important functions to the organization. For example even a small business may have an email server one or more database servers a company intranet portal hosted by a web server a file server and so forth. These functions may reside on a single computer system or on several computer systems such as to increase scalability and provide adequate resources for each function based on anticipated or measured loads. Products such as MICROSOFT WINDOWS Small Business Server provide multiple server functions in a single product.

When an organization has multiple servers the servers may include various authentication mechanisms and security protocols to allow servers to trust one another and to allow users to sign on to access the functions provided by each server. One security system for allowing servers to communicate using a single sign on is MICROSOFT ACTIVE DIRECTORY Federation Services ADFS . ADFS was introduced in MICROSOFT WINDOWS SERVER 2003 for organizations to participate in standards based identity federation. ADFS provides claims based authentication across servers and even across organizations. Claims based authentication uses tokens and certificates to authenticate a user or server with a set of claims contained within the token.

Unfortunately introducing certificates also introduces the problem of certificate management as certificates expire over time. In a product deployment that uses Public Key Infrastructure PKI or similar policies to perform some of its functions it is very common to assume that the product relies on an administrator to manually manage the certificate lifecycle. In addition such products rely on the administrator to do the heavy lifting of sharing these certificates in a server farm. For many organizations particularly small businesses where sophisticated administrators are typically not employed this assumption often leads to loss of functionality and servers that cannot communicate correctly to provide the expected functions to the organization. Even when an administrator does replace an old certificate with a new one as scheduled there is a chance that something in a system might break because of this sudden change by not giving a warning to others dependent on the system about this change ahead of time. In addition certificate updates involve significant planning as certificates are typically updated manually on each server on the same day as part of scheduled downtime.

A certificate management system is described herein that provides automated management of certificate lifecycles and certificate distribution. Rather than depend upon an administrator or other user to manually distribute and manage certificates the certificate management system self generates certificates distributes the certificates to appropriate servers or other parties and transitions from old certificates to new certificates in a well defined manner that avoids breaking functionality. After generating one or more certificates the system securely shares certificates in a way that parties that use them can find the new certificates without an administrator manually distributing the certificates. When it is time to update certificates the system generates new certificates and shares the new certificates in a similar way. During a transition period the system provides a protocol by which both old and new certificates can be used to perform authenticated access to resources so that the transition from an old to a new certificate does not break services. Sometime later the system removes the old certificates and the cycle repeats as the new certificates approach expiration. During each of these phases no administrative intervention is expected or required. Thus the certificate management system greatly simplifies the process of establishing trust between the various servers of an organization and relieves users from diagnosing complex problems that commonly occur under manual management of certificate lifetimes.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A certificate management system is described herein that provides automated management of certificate lifecycles and certificate distribution. Rather than depend upon an administrator or other user to manually distribute and manage certificates the certificate management system self generates certificates distributes the certificates to appropriate servers or other parties and transitions from old certificates to new certificates in a well defined manner that avoids breaking functionality. After generating one or more certificates the system securely shares certificates in a way that parties that use them can find the new certificates without an administrator manually distributing the certificates. For example a certificate server in a small business may provide certificates to other servers e.g. an email server without manual intervention. When it is time to update certificates the system generates new certificates and shares the new certificates in a similar way. For example some time prior to certificate expiration the system may create replacement certificates for soon to expire certificates. During a transition period the system provides a protocol by which both old and new certificates can be used to perform authenticated access to resources so that the transition from an old to a new certificate does not break services. Sometime later the system removes the old certificates and the cycle repeats as the new certificates approach expiration. During each of these phases no administrative intervention is expected or required. Thus the certificate management system greatly simplifies the process of establishing trust between the various servers of an organization and relieves users from diagnosing complex problems that commonly occur under manual management of certificate lifetimes.

In some embodiments upon first configuring a new server farm using the certificate management system the system creates its own self signed issued certificates for token signing and encryption. The system publishes these certificates to other security token services or applications as federation metadata using a standard protocol. If the system is configured for farm configuration the system encrypts these certificates with a symmetric key and shares the encrypted certificates with other certificate management machines in the farm. The symmetric key or a key derivation key from which others servers can derive the symmetric key is also saved and made accessible to other machines in the farm using a secure method. After the system creates certificates the system starts monitoring the certificates regularly e.g. daily to determine whether the certificates are about to expire. A predetermined time before the expiration of the certificates e.g. a couple of weeks the system creates new certificates and starts to publish the new certificates as secondary certificates e.g. using the standard called federation metadata . Publishing these certificates as secondary certificates ensures that no security token service or application is broken with a quick expiration of old certificates and gives other parties enough time to make appropriate changes on their side. After creating the new certificates the certificate management system automatically shares the new certificates with other machines in the farm using the symmetric key and does not rely on an administrator to share certificates. Once the originally created certificates expire the system deletes them. At a configurable time after creating new certificates and before the old certificates expire the system promotes the new certificates to primary certificates. The time between generating publishing new certificates and promoting the new certificates to primary defines the transition period. The system then repeats the process by monitoring the new certificates and managing their life cycle.

The certificate generation component generates one or more certificates for token signing and encryption. The component creates an initial set of certificates upon installation of the system and configuration of a server farm for automated certificate management. Later as the initial set of certificates is close to expiration the certificate generation component creates new certificates to replace the old ones. The component repeats this process over time to maintain a current set of certificates that is available to perform encryption and signing services needed by application servers.

The certificate publishing component publishes new certificates created by the certificate generation component to make the certificates available to other servers with which the system communicates. The certificate publishing component may use standard protocols such as federation metadata and WS Trust to make new certificates available upon request to other servers. A primary server may exchange a symmetric key in a secure manner with other servers and encrypt certificates using the symmetric key. In this way certificates can be shared in the open e.g. via a file share but can only be accessed and used by those with an appropriate level of access as demonstrated by possession of the symmetric key . When publishing to members of the same farm the component publishes the certificate in an encrypted manner and the content includes the public as well as the private key of the certificate. In some embodiments this publishing is done via a web service internal to the farm e.g. using WINDOWS Communication Foundation WCF . When publishing to external trust partners of the ADFS farm the component may just publish the public key of the certificates and this publishing is done using externally visible federation metadata. In some embodiments the component may include separate subcomponents for publishing to external parties and for publishing to internal farm members.

The certificate publishing component may publish both primary and secondary certificates. For example the initially created set of certificates are primary certificates but later replacement certificates may initially be published as secondary certificates for some period of time to allow a smooth transition between old and new certificates. After the transition period the certificate publishing component publishes the replacement certificates as primary certificates.

The certificate retrieval component operates on a server that depends on the certificate management system to retrieve new certificates shared by the certificate publishing component . Application servers or other servers may periodically poll a primary server of the system to determine whether new certificates are available for download to the application server s certificate store.

The certificate update component operates on a server that depends on the certificate management system to add primary certificates retrieved from the system through the certificate publishing component to a certificate store local to a server in the server farm. The certificate update component also retrieves secondary certificates and places the secondary certificates into a certificate store in a manner that accesses can be made by clients using either the primary or secondary certificates during a transition period. Thus even if a particular server has failed to update to a set of replacement certificates clients can still communicate with the particular server using one of the primary or secondary certificates. By the time the system promotes the secondary certificates to primary certificates e.g. at the close of the transition period all servers will have had sufficient time to update to the latest set of certificates.

The certificate expiration component removes expired certificates from the system and promotes secondary replacement certificates to primary certificates. Once a certificate is beyond its lifetime servers will no longer be using the certificate for encryption and signing so the component deletes certificates that have expired. By this time the system has distributed a set of secondary certificates as replacements as described herein and the component promotes the secondary certificates to primary certificates.

The certificate store stores certificates for ADFS generated by the certificate generation component . The certificate store may include primary certificates and secondary certificates. In addition individual application servers may include their own certificate store for storing downloaded primary and secondary certificates for encrypting and signing data. There may be a separate cryptographic store provided by a cryptographic service provider CSP that is not shown.

Although the above components are described above in the context of a single certificate management system those of ordinary skill in the art will recognize that the components can be distributed on various servers and computer systems to carry out the functions described herein. For example each server in an organization may include its own certificate expiration component that removes old and promotes new certificates for that server. Alternatively or additionally a primary certificate server may remove old certificates on one or more servers in a centrally managed manner. The system is not limited to any particular distribution of components and is compatible with various distributions that fulfill the purposes and functions described herein.

The computing device on which the certificate management system is implemented may include a central processing unit memory input devices e.g. keyboard and pointing devices output devices e.g. display devices and storage devices e.g. disk drives or other non volatile storage media . The memory and storage devices are computer readable storage media that may be encoded with computer executable instructions e.g. software that implement or enable the system. In addition the data structures and message structures may be stored or transmitted via a data transmission medium such as a signal on a communication link. Various communication links may be used such as the Internet a local area network a wide area network a point to point dial up connection a cell phone network and so on.

Embodiments of the system may be implemented in various operating environments that include personal computers server computers handheld or laptop devices multiprocessor systems microprocessor based systems programmable consumer electronics digital cameras network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and so on. The computer systems may be cell phones personal digital assistants smart phones personal computers programmable consumer electronics digital cameras and so on.

The system may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures and so on that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Continuing in block the system publishes the certificates at a location available to each server in the server farm. For example the system may share the certificates at a file share or via a common protocol at a port of a certificate server. The system may also indicate a purpose for each certificate and whether the certificate is a primary or secondary certificate. Sometime later one or more servers request published certificates as described by the following steps. Continuing in block the system listens for requests to access published certificates. For example the system may listen at a well known port for server requests to access certificates associated with the server farm. Continuing in decision block if the system receives a request to access a certificate then the system continues at block else the system loops to block to continue listening for requests.

Continuing in block the system processes the received request to access a certificate. For example a server in a server farm may periodically poll the certificate server for new certificates. Continuing in block the system replies with the requested certificate. In some embodiments servers may request multiple certificates or certificates newer than a specified date time from the certificate server and the system replies with one or more certificates that meet the specified criteria. After block the system loops to block to listen for additional certificate access requests.

Continuing in block the system identifies the new certificate as a secondary certificate so that servers retrieving the certificate will continue to use existing certificates as well as accepting requests that use the new certificate. Continuing in block the system publishes the new certificate at a location available to each server in a server farm. Servers will pick up the new certificate automatically and begin allowing accesses that rely on the new certificate. Publishing the new certificate may also include publishing the certificate to external partners outside of the ADS farm. Continuing in block the system detects whether a transition period has ended and if so continues at block else the system loops to block to wait for the end of the transition period. The transition period ends when the certificate expires or sometime after certificate expiration it may be useful to allow a certificate to stay valid until slightly after expiration .

Continuing in block the system promotes the new certificate from a secondary certificate to a primary certificate. This completes the replacement of the expiring certificate with the new certificate. The system may simply mark the certificate differently in the certificate store so that dependent servers notice the change and update their own certificate stores to indicate the new primary certificate. Continuing in block the system removes the expired certificate from the certificate store. This may also prompt dependent servers to remove the expired certificate if they have not already removed it according to their own expiration management schedules. The transition period provided ensures that no security token service or application is broken with a quick expiration of old certificates and gives other parties enough time to make appropriate changes on their side. After block these steps conclude.

In some embodiments the certificate management system provides each server in a server farm with a common service account through which each server can access shared certificates. For example by sharing certificates in a store that is marked as accessible by the service account any other server that holds the credentials of the service account can access the store and any data within the store. This provides an easy way of sharing data among multiple machines in a secure manner that is already provided by existing server user access management.

In some embodiments the certificate management system provides configurable parameters that an administrator can adjust to increase security or to increase the likelihood of a successful transition between certificates. For example some administrators may want a shorter transition period for added security while others may prefer a longer transition period for added compatibility. The system allows an administrator to configure the transition period to facilitate tuning the system to accommodate such differing goals.

In some embodiments the certificate management system publishes metadata that indicates information such as which certificates are in use which are expired which are primary which are secondary and so forth. In this way servers in a server farm can periodically check the published metadata to determine if it is time for further action such as updating or promoting certificates.

In some embodiments the certificate management system retrieves certificates from a separate certificate authority CA . Although described herein as generating its own certificates the system can also defer to a particular CA trusted by accessing servers to generate certificates shared and managed by the system. For example the system may invoke the WINDOWS SERVER 2008 R2 web services API to get certificates from a public CA.

From the foregoing it will be appreciated that specific embodiments of the certificate management system have been described herein for purposes of illustration but that various modifications may be made without deviating from the spirit and scope of the invention. Accordingly the invention is not limited except as by the appended claims.

