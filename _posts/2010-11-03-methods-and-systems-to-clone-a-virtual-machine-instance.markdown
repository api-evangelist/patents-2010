---

title: Methods and systems to clone a virtual machine instance
abstract: In one embodiment, an initialization script including instructions to define a value of a parameter at a cloned virtual machine instance is generated and stored at a virtual disk of a source virtual machine instance. The value of the parameter at the cloned virtual machine instance is different from the value of the parameter at the source virtual machine instance. An image of the virtual disk is then sent to a virtual machine module. The cloned virtual machine instance is instantiated at the virtual machine module based on the image of the virtual disk.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08443365&OS=08443365&RS=08443365
owner: Hewlett-Packard Development Company, L.P.
number: 08443365
owner_city: Houston
owner_country: US
publication_date: 20101103
---
Cloning virtual machine instances can be problematic because cloning yields two identical entities i.e. virtual machine instances within a computing system such as a group of computing devices interconnected via a communications link such as a communications network and hosting virtual machine modules. Furthermore cloning virtual machine instances can be complicated because it can be useful for a cloned virtual machine instance to have an identity value e.g. a name an identifier a password a security credential such as a digital certificate a locale a time zone and or some other value associated with an identity of a virtual machine instance distinct from an identity value of a source virtual machine instance.

Some systems i.e. computing devices and or groups of computing devices distinguish cloned virtual machine instances from source virtual machine instances using parameters stored at a hypervisor. For example a cloned virtual machine instance can communicate with a hypervisor to access runtime parameters to be applied to the cloned virtual machine instance to differentiate the cloned virtual machine instance from a source virtual machine instance. Thus the cloned virtual machine instance must be able to communicate with the hypervisor.

Communication with hypervisors can be difficult because hypervisor vendors implement or support different communications protocols. Thus if a virtual machine instance will be hosted at virtual machine modules in communication with hypervisors from different hypervisor vendors that virtual machine instance will include multiple software applications to communicate with each of the different hypervisors.

Including these software applications in a cloned virtual machine image and thus in the image of the virtual disk of that cloned virtual machine image complicates the cloning process because it results in an increased size of the virtual disk image and additional maintenance overhead to support i.e. update these software applications. Additionally system administrators or system integrators are limited to the parameters provided by the vendor of these software applications and or hypervisor. Moreover because these software applications are typically specific to a hypervisor or type of hypervisor system administrators or system integrators typically must implement the software applications or other processes for each type of hypervisor that will be hosting virtual machine. Furthermore generating multiple versions of a virtual machine instance e.g. a different version for each hypervisor at which that virtual machine instance will be hosted complicates maintenance of that virtual machine instance because each version of the virtual machine instance should be changed in response to changes to one of the versions of the virtual machine instance to ensure consistency across the various versions of the virtual machine instance. As a result administration of virtual machine instances can be complex and cost intensive.

A virtual machine module is an environment that interprets or executes instructions or code. For example a virtual machine module can be a software implementation of a processor or machine that executes code or instructions that are executable at that processor or machine. In other words a virtual machine module is a software module stored at a memory and executed at a processor i.e. a virtual machine module is a software module hosted at that processor that functions as a processor or machine. As a specific example a virtual machine module can be a software module stored at a memory and executed at a processor that emulates a personal computer.

A hypervisor is a hardware module software module stored at a memory and executed at a processor and or a combination of a hardware module and or a software module that controls monitors and or provisions one or more virtual machine modules. For example a hypervisor can instantiate initialize pause shut down and or restart virtual machine modules. Additionally a hypervisor can communicate with virtual machine modules. As a specific example a hypervisor can communicate with virtual machine modules using a virtualized network interface defined by the hypervisor. Furthermore a hypervisor can provision or provide access to e.g. multiplex components of a computing device or machine such as communications interfaces e.g. a Universal Serial Bus USB interface an RS232 interface or a network interface data stores such as hard disk drives or compact disc CD drives and or other components of a computing device to virtual machine modules. In other words a hypervisor can be an intermediary between a virtual machine module and a computing device and or other virtual machine modules. As a specific example a hypervisor can define virtualized components of the physical components of a computing device. The virtual machine modules and virtual machine instances at those virtual machine modules associated with that hypervisor can access the virtualized components and the hypervisor can operate as a multiplexer and demultiplexer between the virtualized components and the physical components those virtualized components represent.

A virtual machine module executes or hosts a virtual machine instance. A virtual machine instance is the code instructions and or data that are executed or accessed within a virtual machine module. In other words a virtual machine instance is an instantiation of executable code and or data within a virtual machine module. For example a virtual machine instance can include a virtual disk i.e. a file or group of files with an operating system and data such as data files and state information related to a virtual machine module or virtual machine module state . The virtual machine module accesses the virtual disk and executes the operating system i.e. instructions or code that implements the operating system . Additionally data stored at the virtual disk is accessible e.g. can be read and or modified within the virtual machine. The virtual machine instance can also include applications e.g. software applications or programs that are executable for example within the operating system of the virtual machine instance. Furthermore the virtual machine module state can include information related to a present state or execution context or context of the virtual machine module. For example the virtual machine module state can include values of an instruction pointer or counter i.e. a reference an instruction that is to be interpreted registers e.g. a stack pointer register an accumulator register and or a data register of the virtual machine module and or other state information related to the virtual machine module.

A virtual machine instance therefore is executed within a virtual machine module and can be referred to as being independent from a physical processor or machine. In other words a virtual machine instance is interpreted by a virtual machine module rather than at a processor. Although the virtual machine module is hosted at a processor the virtual machine instance can be interpreted by the virtual machine module. For example a first virtual machine module can be hosted at a processor of a first processor class i.e. a type architecture or model of processor and a second virtual machine module can be hosted at a processor of a second processor class that is incompatible with the first processor class. Said differently the processor of the first processor class can interpret instructions or code that the processor of the second processor class cannot interpret.

The first virtual machine module and the second virtual machine module however can implement a common virtual machine architecture and a virtual machine instance can be hosted at either the first virtual machine module or the second virtual machine module. That is because the first virtual machine module and the second virtual machine module implement a common virtual machine architecture i.e. the first virtual machine module and the second virtual machine module interpret the same set of instructions in functionally equivalent ways the virtual machine instance can be hosted or executed at the first virtual machine module or the second virtual machine module. Thus the virtual machine instance can be hosted at the first virtual machine module or the second virtual machine module independent of the processor class of the processors at which the first virtual machine module and the second virtual machine module are hosted.

Virtual machine instances can typically be migrated from one virtual machine module to another virtual machine module. In other words a virtual machine instance can be removed from one virtual machine module and moved to another virtual machine module. Similarly virtual machine instances can be cloned. Said differently a virtual machine instance can be copied from a first virtual machine module to a second virtual machine module and the virtual machine instance can continue to execute at the first virtual machine module and the copy of the virtual machine instance can execute at the second virtual machine module. Migration of virtual machine instances can be useful for example during maintenance and or failure of a processor or machine hosting virtual machine modules. Cloning of virtual machine instances can be useful for example to aid in load balancing and or handling increased processing or storage demands of a service implemented by virtual machine instances e.g. a service implemented by an application of a virtual machine instance .

Cloning virtual machine instances however can be problematic because cloning can yield two identical entities i.e. virtual machine instances within a computing system such as a group of computing devices interconnected via a communications link such as a communications network and hosting virtual machine modules. For example each entity within a communications network typically has a unique within that communications network network address such as a Media Access Control MAC address an Internet Protocol version 4 IPv4 address and or Internet Protocol version 6 IPv6 address. An exact copy or clone of a virtual machine instance within a communications network would yield two entities the original or source virtual machine instance and the copy or cloned virtual machine instance with a common network address. Typical communications networks can fail to reliably provide communications between entities within those communications networks if multiple entities share a common network address.

Furthermore cloning virtual machine instances can be complicated because it can be useful for a cloned virtual machine instance to have an identity value or identifier e.g. a name an identifier a password a security credential such as a digital certificate a locale a time zone and or some other value associated with an identity of a virtual machine instance distinct from an identity value of a source virtual machine instance. For example a data storage service can require a username and a password to store data at that data storage service and allow only a single login for a username and password combination at a time. Accordingly a source virtual machine instance and a cloned virtual machine instance cannot each be logged in to the data storage service if a single username and password combination is shared between the source virtual machine instance and the cloned virtual machine instance. Thus it can be desirable to alter a cloned virtual machine instance such that the cloned virtual machine instance is distinct or can be distinguished from a source virtual machine instance of that cloned virtual machine instance. For example it can be desirable to provide alternate runtime parameters e.g. a network address and or other identity values to a cloned virtual machine instance that are different from the runtime parameters of the source virtual machine instance to distinguish the cloned virtual machine instance from the source virtual machine instance.

Some systems i.e. computing devices and or groups of computing devices distinguish cloned virtual machine instances from source virtual machine instances using parameters stored at a hypervisor. For example before cloning a virtual machine instance a hypervisor can store runtime parameters or values of runtime parameters at a data store of that hypervisor to be associated with a cloned virtual machine instance when that cloned virtual machine instance is instantiated at a virtual machine module. The virtual machine instance can then be copied e.g. an image of the virtual disk of that virtual machine instance is generated and sent to the virtual machine module and instantiated. A software application within the cloned virtual machine instance can then communicate with the hypervisor to retrieve the stored runtime parameters and apply those runtime parameters to differentiate the cloned virtual machine instance from the source virtual machine instance. Said differently the cloned virtual machine instance communicates with the hypervisor to access runtime parameters at the hypervisor to be applied to the cloned virtual machine instance.

Because the cloned virtual machine instance accesses or retrieves its runtime parameters at the hypervisor the cloned virtual machine instance must be able to communicate with the hypervisor. Typically hypervisors from different hypervisor vendors implement or support different communications protocols. Thus if a virtual machine instance will be hosted at virtual machine modules in communication with hypervisors from different hypervisor vendors that virtual machine instance will include multiple software applications to communicate with each of the different hypervisors. Including these software applications in a cloned virtual machine image and thus in the image of the virtual disk of that cloned virtual machine image complicates the cloning process because it results in an increased size of the virtual disk image and additional maintenance overhead to support i.e. update these software applications. Furthermore generating multiple versions of a virtual machine instance e.g. a different version for each hypervisor at which that virtual machine instance will be hosted complicates maintenance of that virtual machine instance because each version of the virtual machine instance should be changed in response to changes to one of the versions of the virtual machine instance to ensure consistency across the various versions of the virtual machine instance.

Embodiments discussed herein can clone virtual machine instances without accessing runtime parameters of the cloned virtual machine instances at a hypervisor. In other words embodiments discussed herein can clone virtual machine instances independent of a communications protocol of the hypervisors in communication with the virtual machine modules at which the cloned virtual machine instances will be hosted. Thus virtual machine instances can be cloned to or hosted at various classes or types of hypervisors such as hypervisors from different hypervisor vendors.

As a specific example an initialization script is stored at a virtual disk of a source virtual machine instance in response to a clone request for the source virtual machine instance. The initialization script includes instructions to define runtime parameters of a cloned virtual machine based on a virtual machine instance identifier. An image of the virtual disk is generated and sent to a virtual machine module to clone the source virtual machine instance.

The initialization script is included within the image of the virtual disk because the image is a copy of the virtual disk of the source virtual machine instance. The cloned virtual machine instance is then instantiated at the virtual machine module e.g. an operating system included within the virtual disk image is booted within the virtual machine module . Furthermore the virtual machine module can define or receive a virtual machine instance identifier and provide the virtual machine instance identifier to the cloned virtual machine instance during instantiation of the cloned virtual machine instance. For example the virtual machine instance identifier can be a MAC address of a virtualized network interface accessible to the virtual machine module and therefore the cloned virtual machine instance .

The initialization script is executed with the virtual machine instance identifier as an argument during instantiation of the cloned virtual machine instance and the runtime parameters of the cloned virtual machine instance are generated or defined based on instructions of the initialization script and the virtual machine instance identifier. That is the virtual machine instance identifier is an operand of the operations defined by the instructions of the initialization script and the results of those operations are the runtime parameters or values of runtime parameters of the cloned virtual machine instance. Alternatively for example the initialization script can be executed at a time other than at initialization of the cloned virtual machine instance. For example an initialization or other script can be scheduled to be executed or processed in response to an event such as expiry of a timer at a predetermined time or in response to data or a signal received at a communications interface associated with the cloned virtual machine instance such as a network interface. As a specific example an initialization script can be scheduled to executed at the expiry of a timer e.g. using the cron utility in a Linux based environment or system set to expire two hours after the cloned virtual machine instance is instantiated or initialized .

The runtime parameters can then be applied to the cloned virtual machine instance to differentiate the cloned virtual machine instance from the source virtual machine instance. Thus the runtime parameters of the cloned virtual machine instance can be defined without accessing those runtime parameters or other values at a hypervisor. Accordingly cloned virtual machine instances at virtual machine module associated with various hypervisors can be differentiated from a source virtual machine instance without including software applications to communicate with each of the various hypervisors. Said differently the cloned virtual machine instances are agnostic to the class of hypervisors or the communications protocol of the hypervisors associated with the virtual machine modules at which the cloned virtual machine instances are hosted.

As used herein the singular forms a an and the include plural referents unless the context clearly dictates otherwise. Thus for example the term virtual machine instance is intended to mean one or more virtual machine instances or a combination of virtual machine instances. Additionally as used herein the term module refers to circuitry and or software firmware programming machine or processor readable instructions commands or code that are stored at a memory and executed or interpreted at a processor.

An initialization script including instructions or codes or commands that when executed define or generate runtime parameters for a cloned virtual machine is accessed at block . For example an initialization script can be generated in response to input e.g. a number of cloned virtual machine instances or an identifier of one or more runtime parameters to be generated from a user and then accessed. In some embodiments an initialization script can be accessed from a library or collection of initialization scripts. In some embodiments an initialization script can be accessed at e.g. selected from a library of initialization scripts and modified based on input from a user.

Typically an initialization script is configured to receive arguments such as environment variables and or command line options. These arguments are operands to the operations defined by the instructions of the initialization script to define one or more runtime parameters. For example an initialization script can receive or access an environment variable including the value of a MAC address universally unique identifier UUID or other virtual machine instance identifier and can define runtime parameters based at least in part on that virtual machine instance identifier. As a more specific example a hash value can be defined from a MAC address and that hash value can be an index to a table of runtime parameters within the initialization script. Thus a runtime parameter can be selected from the table using the hash value. As another example a byte i.e. eight bits of a UUID can be used as the last octet of an IPv4 address runtime parameter.

The initialization script is then stored at the virtual disk of the source virtual machine instance at block . That is the initialization script is stored within the virtual machine instance that will be cloned. The initialization script can be for example an rc script for a Linux based operating system and can be stored in a file system directory of the virtual disk related to rc scripts such as an etc rc.d directory. Alternatively for example the initialization script can be a startup task in a Microsoft Windows operating system and can be stored in a task directory. In some embodiments a reference to the initialization script can be stored within a registry or a list of startup or initialization items of an operating system at the virtual disk.

An image or copy of the virtual disk is then sent to a virtual machine module that will host the cloned virtual machine instance at block . In other words a copy of the virtual disk of the source virtual machine module is generated and sent to the destination virtual machine module. In some embodiments a virtual machine module state is also sent to a destination virtual machine module i.e. the virtual machine module that will host the cloned virtual machine instance . Thus the destination virtual machine module can have the same state as the source virtual machine module i.e. the virtual machine module that will host the source virtual machine instance . In other words the context of the cloned virtual machine instance can be initialized using a virtual machine module state of the source virtual machine instance to have the same context within the destination virtual machine module as the source virtual machine instance has within the source virtual machine module.

The cloned virtual machine instance is then instantiated at the destination virtual machine module at block . For example an operating system within the virtual disk image can be booted to instantiate the cloned virtual machine instance. In some embodiments a virtual machine module state of the source virtual machine module can be applied to the destination virtual machine module to instantiate the cloned virtual machine instance. For example register values an instruction pointer or counter and or memory contents of the source virtual machine module can be applied to the destination virtual machine module such that the destination virtual machine module and therefore the cloned virtual machine instance has the same execution context as the execution context of the source virtual machine module and therefore the source virtual machine instance .

One or more virtual machine instance identifiers are typically received at the cloned virtual machine instance during instantiation of the cloned virtual machine instance. For example a MAC address of a virtualized network interface is typically accessed by an operating system of a cloned virtual machine instance in a manner similar to an operating system hosted at a computing device with a physical network interface. That is the operating system of the cloned virtual machine instance can discover or detect a virtualized network interface such as a virtualized network interface defined by a hypervisor and access a MAC address of that virtualized network interface using the same methodology used by an operating system to discover a physical network interface and access a MAC address of that physical network interface. Similarly for example a cloned virtual machine can access or receive a UUID or other virtual machine instance identifier in the same way an operating system hosted at a computing device accesses a machine or system identifier from for example a trusted platform module TPM . Alternatively a cloned virtual machine can access or receive identifiers of virtualized and or physical components e.g. hard disk drives network interfaces graphics interfaces and or other components and can define a virtual machine instance identifier in the same way an operating system hosted at a computing device accesses identifiers of physical components of that computing device. In other words a virtual machine instance identifier is a value that uniquely identifies a virtual machine module and can be derived from for example identifiers of components or virtual components of a computing device and or a hypervisor.

The initialization script is then executed at the cloned virtual machine instance at block to initialize the cloned virtual machine instance to be different from the source virtual machine instance. In other words the instructions of the initialization script are executed or interpreted within the cloned virtual machine instance to define runtime parameters of the cloned virtual machine instance and to apply those runtime parameters to the cloned virtual machine instance. As discussed above a virtual machine instance identifier can be provided or accessible to the initialization script and the runtime parameters generated can be based at least in part on the virtual machine instance identifier. Moreover the initialization script can be executed during initialization of the cloned virtual machine instance and or at a time other than at initialization of the cloned virtual machine instance. For example an initialization or other script can be scheduled to be executed or processed in response to an event such as expiry of a timer at a predetermined time or in response to data or a signal received at a communications interface associated with the cloned virtual machine instance such as a network interface.

As a specific example MAC address of a virtualized network interface can be a virtual machine instance identifier and can be provided to an initialization script as an environment variable of an execution environment of the initialization script. Alternatively for example the initialization script can invoke an application programming interface API of the execution environment e.g. an operating system of the cloned virtual machine instance to access the MAC address. An IPv4 address different from an IPv4 address of the source virtual machine instance can be defined by the initialization script based on the MAC address and that IPv4 address can be assigned to the cloned virtual machine instance or the virtualized network interface of the cloned virtual machine instance .

Process can include blocks in addition to those illustrated in . Additionally one or more blocks can be rearranged. Furthermore although process is discussed above with reference to an example environment including a hypervisor process is applicable within other environments.

As illustrated in computing device includes communications interface processor and memory . Processor is operatively coupled to communications interface and memory . Typically as illustrated in memory includes instructions or codes e.g. computer codes or object codes defining software modules that are executed by processor during operation of computing device . For example memory includes instructions that define operating system device drivers and applications e.g. software application programs . In other words operating system device drivers applications and other software modules stored as instructions not shown at memory and executed at processor are hosted at computing device . Applications can include for example an application module a hypervisor a virtual machine module and or an environment such as a runtime environment and or virtual machine instance.

Communications interface is an interface accessible to processor to communicate with i.e. transmit symbols representing data to and receive such symbols from other processors and or computing devices via a communications link. In other words communications interface can receive data from processor and transmit symbols representing that data via a communications link. Moreover communications interface can receive symbols from other communications interfaces via a communications link and send data represented by those symbols to processor . For example communications interface can be a telephone network interface a twisted pair network interface a coaxial network interface a fiber optic network interface a wireless network interface such as a wireless local area network WLAN or a cellular network and or some other network or communications interface.

Referring to virtual machine module the source virtual machine module includes source virtual machine instance . Source virtual machine instance includes virtual disk and virtual machine module state . Virtual disk includes operating system and data . In other words operating system is hosted at virtual machine module as an element of source virtual machine instance . After a clone operation is requested e.g. by a user or in response to an event such as a utilization value of source virtual machine instance exceeding a threshold an initialization script labeled INIT SCRIPT is generated at initialization script module . Initialization script module can be an application module hosted at computing device at virtual machine module or within hypervisor . Initialization script can be generated based on input or arguments or parameters provided by a user or within a configuration file accessible to initialization script . For example a user can specify a number of cloned virtual machine instances and virtual machine instance identifiers and IP addresses for those virtual machine instances. An initialization script can then be generated to output a particular IP address for each of the virtual machine instance identifiers received as an argument when the initialization script is executed.

In some embodiments initialization script module includes or can access an initialization script library not shown at a data store and select initialization script from the initialization script library. Additionally if initialization script is selected from the initialization script library initialization script can be modified at initialization script module for example based on user input such as a number of cloned virtual machine instances to be generated from source virtual machine instance .

Initialization script is then copied to virtual disk . Thus initialization script is included at virtual disk . In some embodiments initialization script can be scheduled to execute when operating system is booted or initialized. In other words initialization script can be scheduled to be executed when a cloned virtual machine instance based on source virtual machine instance is instantiated. For example initialization script can be stored within a directory of virtual disk that is accessed to locate startup or login items for execution during a boot loading or initialization process of operating system . Alternatively for example an identifier of initialization script such as a path to initialization script within a file system of virtual disk can be stored in a list of startup items for operating system .

Referring to virtual machine module is started or instantiated by hypervisor to receive an image of virtual disk . As illustrated in an image of virtual disk including operating system data and initialization script is transferred to virtual machine module . The image of virtual disk can be transferred to virtual machine module via for example a shared memory interface of hypervisor or an environment such as an operating system hosted at computing device a system call interface or API of hypervisor or an environment such as an operating system hosted at computing device or one or more virtualized network interfaces of hypervisor or an environment such as an operating system hosted at computing device .

As illustrated in cloned virtual machine instance is instantiated using the image of virtual disk . For example operating system can be booted from the image of virtual disk and virtual machine module state stores the current state information or context of virtual machine module . Initialization script is then executed during instantiation of cloned virtual machine module and runtime parameters defined by initialization script are applied to cloned virtual machine instance to differentiate cloned virtual machine instance from source virtual machine instance for example as described above in relation to .

Similarly a virtual machine instance can be cloned from a computing device to other computing devices operatively coupled to the computing device. for example is a schematic block diagram of a system for cloning an instance of a virtual machine instance including a group of computing devices with virtual machine modules according to an embodiment. As illustrated in computing devices and are operatively coupled via communications link . The system of is illustrated logically rather than physically. In other words the placement of and connections among the elements of the system e.g. computing devices and and communications link represent logical relationships between the elements rather than their physical configuration. For example computing devices and can be located at one physical location and computing device can be located at another physical location. Said differently the placement of and connections among the elements of the system illustrate communication of data symbols or data signals transmitted within the system.

Communications link can include any connector and or system that allow computing devices and to communicate with one another. For example communications link can be one or more of a cable e.g. telecommunication cable twisted pair cable coaxial cable or fiber optic cable wireless link or connection e.g. radio frequency link wireless optical link or infrared link or any other connector or system that supports transmission of communications symbols. Additionally communications link can include a communications network or combination of communications networks capable of transmitting information e.g. symbols or signals representing data such as for example an Ethernet network a fiber optic network a wireless network an intranet and or the Internet.

In some embodiments communications link can include multiple communications links and or communications networks operatively coupled one to another by for example bridges routers switches hubs and or gateways. For example computing device can be operatively coupled to a cellular network not shown and computing device can be operatively coupled to a fiber optic network not shown . The cellular network and fiber optic network can each be operatively coupled one to another via one or more network bridges routers switches and or gateways such that the cellular network and the fiber optic network are operatively coupled to form a communications link. Alternatively the cellular network and fiber optic network can each be operatively coupled one to another via one or more additional networks. For example the cellular network and the fiber optic network can each be operatively coupled to the Internet such that the cellular network the fiber optic network and the Internet are operatively coupled to form a communications link.

Computing device includes or hosts hypervisor . Computing device includes hypervisor . Computing device includes hypervisor . Although not illustrated in source virtual machine module includes a source virtual machine instance including virtual disk destination virtual machine module includes a cloned virtual machine instance including an image of virtual disk and destination virtual machine module includes a cloned virtual machine instance including an image of virtual disk .

In response to a request to clone the source virtual machine instance hosted at source virtual machine module initialization script labeled INIT SCRIPT is generated and stored at virtual disk of the source virtual machine instance. In some embodiments hypervisor requests not shown at hypervisor and at hypervisor instantiation of destination virtual machine modules and respectively. Moreover in some embodiments hypervisor sends not shown to hypervisor and to hypervisor parameters related to virtual disk such as for example a number of cloned virtual machine instances to be instantiated and or a range of virtual machine instance identifiers to be applied to the instantiated cloned virtual machine instances. Hypervisors and can instantiate one or more destination virtual machine modules such as destination virtual machine module and destination virtual machine module respectively illustrated in .

An image of virtual disk including initialization script is then send via communications link to destination virtual machine module and destination virtual machine module . For example the image of virtual disk can be sent to computing devices and and stored at directories of those computing devices at which hypervisors and respectively access virtual disks to instantiate virtual machine instances. Alternatively for example the image of virtual disk can be sent to hypervisors and and hypervisors and can associated the image of virtual disk with destination virtual machine module and destination virtual machine module respectively.

Cloned virtual machine instances are then instantiated at destination virtual machine module and destination virtual machine module based on the image of virtual disk and those cloned virtual machine instances are differentiated from the source virtual machine instance as discussed above in relation to for example . In other words initialization script is provided one or more arguments or input values and executed at the cloned virtual machine instance at destination virtual machine module and at the cloned virtual machine instance at destination virtual machine module and the runtime parameters defined by initialization script can be applied to those cloned virtual machine instances. Said differently the cloned virtual machine instance at destination virtual machine module and the cloned virtual machine instance at destination virtual machine module can each be instantiated and or initialized to include runtime parameters that differentiate the cloned virtual machine instances from the source virtual machine instance as discussed above.

In some embodiments instantiation of cloned virtual machine instances is request by for example a hypervisor such as hypervisor . That is hypervisor can send a signal command instruction or other request to hypervisor and or hypervisor to request that cloned virtual machine instances be instantiated based on virtual disk . Alternatively for example a hypervisor or network administration tool can send such a request to a hypervisor in response to input from a user. In other embodiments 

A request to clone a virtual machine instance or a clone request is received at block . The request can include for example an identifier of a source virtual machine instance a number of cloned virtual machine instances to be cloned one or more identifiers such as network addresses or names of computing devices at which the cloned virtual machines will be cloned and or a group or range of virtual machine instance identifiers to be associated with the cloned virtual machine instances.

If the source virtual machine instance exists i.e. if a virtual machine instance having a source virtual machine instance identifier received at block is accessible to a hypervisor at block permissions of the source virtual machine instance can be accessed at block . For example permissions of the source virtual machine instance can be accessed at block to determine whether a user providing the input values at block is authorized to clone the source virtual machine instance based on for example an identifier and or credential e.g. a username and password or digital certificate of that user received at block . In some embodiments the cloning can be requested by for example a software application such as a performance monitoring tool and that software application can be the user that requested the cloning. Thus permissions of that software application with respect to the source virtual machine module can be accessed at block .

Process proceeds to block to determine whether the source virtual machine module is in an appropriate state for cloning if the user is authorized or allowed to clone the source virtual machine instance. For example a state such as whether the source virtual machine instance is operational whether the source virtual machine instance is idle and or whether the source virtual machine instance is interruptible can be determined at block . If the source virtual machine instance is in an appropriate state for cloning e.g. cloning can be effected when the source virtual machine instance is in its present state process can proceed to block .

If the source virtual machine instance does not exist at block if the user is not authorized or does not have adequate permissions to clone the source virtual machine instance at block and or if the source virtual machine instance is not in an appropriate state for cloning at block process terminates in an error condition at blocks and or respectively. The error condition can be reported to the user as a failure error and or exception notification. Alternatively process can include additional steps to attempt to rectify an error condition. For example if the user is not authorized to clone the source virtual machine instance at block additional or different credentials for the user can be requested. As an example a different username and or password e.g. a username and password associated with an elevated privilege level of the user can be requested and received. If the additional credentials provided by a user are sufficient process can proceed to block . Alternatively if the source virtual machine instance is not in a state appropriate for cloning at block process can wait at block until the source virtual machine instance is in an appropriate state for cloning or until a timeout period expires. For example if the source virtual machine instance is not in an interruptible state at block process can wait at block until the source virtual machine instance is in an interruptible state. Similarly for example if the source virtual machine instance is not powered on i.e. is not operational at block a hypervisor can attempt to power on the source virtual machine instance at block . If the hypervisor successfully powers on the source virtual machine instance process can proceed to block .

An initialization script is stored at a virtual disk of the source virtual machine instance at block . As discussed above the initialization script can be generated dynamically in response to a request for cloning received for example at block and or can be accessed from a library of initialization scripts. In some embodiments multiple initialization scripts are stored at the virtual disk at block . For example a group of initialization scripts that are executed at different times during a boot or initialization process of an operating system within a cloned virtual machine instance can be stored at the virtual disk. Initialization scripts can also be defined using various programming languages scripting languages and or APIs. Furthermore initialization scripts can be specific or generic. For example an initialization script can access an API of an operating system and therefore be specific to that operating system. Alternatively an initialization script can be implemented using a language that can be interpreted in multiple environments e.g. within multiple operating systems such as Java Python and or Perl and be operating system agnostic. Additionally initialization scripts can be specific to a particular computing device or architecture of a computing device to a particular hypervisor or class of hypervisor or virtual machine module or class of virtual machine module or to a particular version or revision of a software module such as a firmware version. In other words initialization scripts can include instructions or operations that are specific to a particular computing device software module hypervisor and or virtual machine module and or that are generic or applicable to various computing devices software modules hypervisors and or virtual machine modules.

The initialization scripts can then be scheduled for execution at block . For example the initialization scripts can be scheduled by storing the initialization scripts in specific directories within the file system of the virtual disk of the source virtual machine instance. As a specific example the initialization scripts can be scheduled for execution at specific stages of initialization of a Linux based operating system by storing the initialization scripts in directories of the etc rc.d directory structure that are associated with each stage of initialization. As another example a path of each initialization script can be stored within one or more startup items entries in the registry of a Microsoft Windows operating system at the virtual disk of the source virtual machine instance. In other words the initialization scripts or references to the initialization scripts can be stored at the virtual disk of the source virtual machine instance such that the initialization scripts will be executed in a particular order during initialization or booting of an operating system also stored at that virtual disk or during specific stages of initialization of that operating system .

Alternatively the initialization script can be executed at a time other than at initialization of the cloned virtual machine instance. For example an initialization or other script can be scheduled to be executed or processed in response to an event such as expiry of a timer at a predetermined time or in response to data or a signal received at a communications interface associated with the cloned virtual machine instance such as a network interface. As a specific example the initialization script can be executed when a user first logs into the cloned virtual machine instance or when a particular software module i.e. software application program is started or instantiated at the cloned virtual machine instance.

In addition to the initialization scripts customization scripts can be stored at the virtual disk of the source virtual machine instance at block . Customization scripts include instructions that are executed after initialization scripts are executed at a cloned virtual machine instance i.e. after the runtime parameters generated by the initialization scripts have been applied to the cloned virtual machine instance . Customization scripts apply customizations such as for example downloading and installing software applications at the cloned virtual machine instance generating public private key pairs or digital certificates at the cloned virtual machine instance setting environment variables at the cloned virtual machine instance defining hierarchical relationships e.g. client and server relationships between the cloned virtual machine instance and other virtual machine instances and or computing devices and or other customizations.

Additionally cleanup scripts can be stored at the virtual disk of the source virtual machine instance at block . Cleanup scripts include instructions to remove i.e. delete disable and or move i.e. store in a different location initialization scripts and or customization scripts. Thus cleanup scripts are typically scheduled for execution after execution of initialization scripts and customization scripts.

Customization scripts and cleanup scripts can be scheduled for example as discussed above in relation to block . In other words initialization scripts customization scripts and cleanup scripts can be scheduled using a common methodology or mechanism. Alternatively for example customization scripts and cleanup scripts can be scheduled within initialization scripts. As a specific example the initialization script that is scheduled to be executed last in a group of initialization scripts can include an instruction or instructions to initiate execution of one or more customization scripts. In some embodiments the customization scripts and cleanup scripts can be chained together such that execution of the first customization script is initiated by instructions within the last initialization script to be executed execution of the second customization script is initiated by instructions within the first customization script execution of the first cleanup script is initiated by instructions within the last customization script to be executed and execution of the second cleanup script is initiated by instructions within the first cleanup script. Thus initialization scripts customization scripts and cleanup scripts can be executed in a particular order or sequence within a cloned virtual machine module.

After the initialization scripts customization scripts and cleanup scripts are stored at the virtual disk of the source virtual machine instance the source virtual machine instance can be cloned to one or more virtual machine modules at block . Cloning the source virtual machine instance to one or more virtual machine modules is discussed in more detail herein for example in relation to .

Process can include blocks in addition to those illustrated in . Additionally one or more blocks can be rearranged. Furthermore although process is discussed above with reference to an example environment including a hypervisor process is applicable within other environments.

Input parameters related to cloning a source virtual machine instance are received at block at block . The input parameters are received from a user another hypervisor or a software module hosted at a computing device. The input parameters can include for example a description of a hardware configuration of a source virtual machine module an identifier of a source virtual machine instance a number of cloned virtual machine instances to be cloned and or a group or range of virtual machine instance identifiers to be associated with the cloned virtual machine instances.

If the source virtual machine instance exists i.e. if a virtual machine instance having a source virtual machine instance identifier received at block is accessible to a hypervisor at block permissions of the source virtual machine instance can be accessed at block . For example permissions of the source virtual machine instance can be accessed at block to determine whether a user providing the input values at block is authorized to clone the source virtual machine instance based on for example an identifier and or credential e.g. a username and password or digital certificate of that user received at block . In some embodiments the cloning can be requested by for example a software application such as a hypervisor and that software application can be the user that requested the cloning. Thus permissions of that software application with respect to the source virtual machine module can be accessed at block .

Process proceeds to block to determine whether the source virtual machine module is in an appropriate state for cloning if the user is authorized or allowed to clone the source virtual machine instance. For example a state such as whether the source virtual machine instance is operational whether the source virtual machine instance is idle and or whether the source virtual machine instance is interruptible can be determined at block . If the source virtual machine instance is in an appropriate state for cloning process can proceed to block .

If the source virtual machine instance does not exist at block if the user is not authorized or does not have adequate permissions to clone the source virtual machine instance at block and or if the source virtual machine instance is not in an appropriate state for cloning at block process terminates in an error condition at blocks and or respectively. The error condition can be reported to the user as a failure error and or exception notification. Alternatively process can include additional steps to attempt to rectify an error condition. For example if the user is not authorized to clone the source virtual machine instance at block additional or different credentials for the user can be requested. As an example a different username and or password e.g. a username and password associated with an elevated privilege level of the user can be requested and received. If the additional credentials provided by a user are sufficient process can proceed to block . Alternatively if the source virtual machine instance is not in a state appropriate for cloning at block process can wait at block until the source virtual machine instance is in an appropriate state for cloning or until a timeout period expires. For example if the source virtual machine instance is not in an interruptible state at block process can wait at block until the source virtual machine instance is in an interruptible state. Similarly for example if the source virtual machine instance is not powered on i.e. is not operational at block a hypervisor can attempt to power on the source virtual machine instance at block . If the hypervisor successfully powers on the source virtual machine instance process can proceed to block .

A destination virtual machine module is generated or instantiated at block . For example a destination virtual machine module is generated at block based on a description of the hardware configuration of the source virtual machine module received at block . The description of a hardware configuration of a source virtual machine module can describe the virtualized and or physical components that were or are available to the source virtual machine instance at the source virtual machine module via a hypervisor associated with the source virtual machine module. In other words a destination virtual machine module that provides a virtual machine instance with access to the same types of components or resources that are provided to the source virtual machine instance via the source virtual machine module can be instantiated based on the description of the hardware configuration of the source virtual machine module received at block . Said yet another way the architecture of the source virtual machine module can be replicated at the destination virtual machine module based on the description of the hardware configuration of the source virtual machine module.

After the virtual machine module is instantiated an image of the virtual disk of the source virtual machine instance including initialization scripts customization scripts and or cleanup scripts can be generated and sent to the destination virtual machine module at block . For example the image of the virtual disk of the source virtual machine instance can be sent to the destination virtual machine module via a shared memory interface of a hypervisor or an environment such as an operating system a system call interface or API of a hypervisor or an environment such as an operating system or one or more virtualized network interfaces of a hypervisor or an environment such as an operating system.

The image of the virtual disk of the source virtual machine instance is accessed at block to instantiate a cloned virtual machine instance from the image of the virtual disk. As discussed above for example the cloned virtual machine instance can be instantiated by booting an operating system stored at the image of the virtual disk. During the instantiation of the cloned virtual machine instance arguments such as a virtual machine instance identifier can be provided to or accessed by the cloned virtual machine instance at block . For example a hypervisor can set a MAC address of a virtualized network interface to a value of a virtual machine instance identifier received at block and the cloned virtual machine instance can access that MAC address. In other words a hypervisor can define an identifier of a virtualized component provided to a destination virtual machine module to have a value of a virtual machine instance identifier received as an input parameter to process .

The arguments e.g. a virtual machine instance identifier received at block are provided to the initialization scripts customization scripts and or cleanup scripts stored at the image of the virtual disk and scheduled to execute in an order or sequence defined by the scheduling discussed above of those initialization scripts customization scripts and or cleanup scripts within the cloned virtual machine module at block . The execution of initialization scripts customization scripts and or cleanup scripts is discussed in more detail herein for example in relation to .

Process can include blocks in addition to those illustrated in . Additionally one or more blocks can be rearranged. Furthermore although process is discussed above with reference to an example environment including a hypervisor process is applicable within other environments.

An initialization script is accessed at block and executed at block . For example the initialization script from a group of initialization scripts that is scheduled for execution first can be selected at block . As a more specific example the initialization script that is scheduled by an rc script architecture for execution first during booting of a Linux based operating system within a cloned virtual machine instance can be selected at block . As another example the initialization script scheduled that is scheduled for execution as a task before other initialization scripts in a Microsoft Windows operating system can be selected at block . Said differently initialization scripts are selected at block in an order defined by the scheduling of those initialization scripts.

The selected initialization script is then executed at the cloned virtual machine instance at block to initialize the cloned virtual machine instance to be different from the source virtual machine instance. In other words the instructions of the initialization script selected at block are executed or interpreted within the cloned virtual machine instance to define runtime parameters of the cloned virtual machine instance and to apply those runtime parameters to the cloned virtual machine instance. As discussed above in some embodiments a virtual machine instance identifier can be provided or accessible to the initialization script and the runtime parameters generated can be based at least in part on the virtual machine instance identifier. As a specific example a MAC address of a virtualized network interface can be a virtual machine instance identifier and can be provided to an initialization script as an environment variable of an execution environment of the initialization script. Alternatively for example the initialization script can invoke an API of the execution environment to access the MAC address. An IPv4 address different from an IPv4 address of the source virtual machine instance can be defined by the initialization script based on the MAC address and that IPv4 address can be assigned to the cloned virtual machine instance or the virtualized network interface of the cloned virtual machine instance as for example a static IP address of the virtualized network interface of that cloned virtual machine instance.

If there are more initialization scripts scheduled for execution at block process returns to block and the initialization script scheduled to be executed next is selected. Thus as illustrated in blocks and are repeated until each initialization script from a group of initialization scripts is executed. If there are no more initialization scripts scheduled for execution at block process proceeds to block .

A customization script is accessed at block and executed at block . For example the customization script from a group of customization scripts that is scheduled for execution first can be selected at block . As discussed above and similar to initialization scripts customization scripts can be scheduled for executed and executed according to the schedule or the order defined by the scheduling using various methodologies. For example the rc script architecture of a Linux based operating system or a task architecture of a Microsoft Windows operating system can be used to schedule and or execute customization scripts. Said differently the customization scripts can be selected and executed in the order defined by the scheduling of those customization scripts.

If there are more customization scripts scheduled for execution at block process returns to block and the customization script scheduled to be executed next is selected. Thus as illustrated in blocks and are repeated until each customization script from a group of customization scripts is executed. If there are no more customization scripts scheduled for execution at block process proceeds to block .

A cleanup script is accessed at block and executed at block . For example the cleanup script from a group of cleanup scripts that is scheduled for execution first can be selected at block . As discussed above and similar to initialization scripts and customization scripts cleanup scripts can be scheduled for executed and executed according to the schedule or the order defined by the scheduling using various methodologies. For example the rc script architecture of a Linux based operating system or a task architecture of a Microsoft Windows operating system can be used to schedule and or execute cleanup scripts. Said differently the cleanup scripts can be selected and executed in the order defined by the scheduling of those cleanup scripts.

If there are more cleanup scripts scheduled for execution at block process returns to block and the cleanup script scheduled to be executed next is selected. Thus as illustrated in blocks and are repeated until each cleanup script from a group of cleanup scripts is executed. If there are no more cleanup scripts scheduled for execution at block process terminates.

Process can include blocks in addition to those illustrated in . Additionally one or more blocks can be rearranged. For example illustrates a methodology of processing initialization scripts customization scripts and or cleanup scripts in which initialization scripts are executed before customization scripts customization scripts are executed before cleanup scripts and cleanup scripts are executed after all initialization scripts and customization scripts are executed. In other embodiments initialization scripts customization scripts and or cleanup scripts can be scheduled to have a different order. For example an initialization script can be associated with a customization script and or a cleanup script that is executed e.g. scheduled for execution after that initialization script and before a different initialization script. In other words execution of initialization scripts customization scripts and or cleanup scripts can be interleaved with the execution of other initialization scripts customization scripts and or cleanup scripts. Furthermore although process is discussed above with reference to an example environment including a hypervisor process is applicable within other environments.

Some embodiments include a processor and a related processor readable medium having instructions or computer code thereon for performing various processor implemented operations. Such a processor can be a general purpose processor or an application specific process and can be implemented as a hardware module and or a software module. A hardware module can be for example a microprocessor a microcontroller an application specific integrated circuit ASIC a programmable logic device PLD such as a field programmable gate array FPGA and or other electronic circuits that perform operations. A software module can be for example instructions commands and or codes stored at a memory and executed at another processor. Such a software module can be defined using one or more programming languages such as Java C C an assembly language a hardware description language and or another suitable programming language. For example a processor can be a virtual machine hosted at a computer server including a microprocessor and a memory.

In some embodiments a processor can include multiple processors. For example a processor can be a microprocessor including multiple processing engines e.g. computation algorithmic or thread cores . As another example a processor can be a computing device including multiple processors with a shared clock memory bus input output bus and or other shared resources. Furthermore a processor can be a distributed processor. For example a processor can include multiple computing devices each including a processor in communication one with another via a communications link such as a computer network.

Examples of processor readable media include but are not limited to magnetic storage media such as a hard disk a floppy disk and or magnetic tape optical storage media such as a compact disc CD a digital video disc DVDs a compact disc read only memory CD ROM and or a holographic device magneto optical storage media non volatile memory such as read only memory ROM programmable read only memory PROM erasable programmable read only memory EPROM electronically erasable read only memory EEPROM and or FLASH memory and random access memory RAM . Examples of computer code include but are not limited to micro code or micro instructions machine instructions such as produced by a compiler and files containing higher level instructions that are executed by a computer using an interpreter. For example an embodiment may be implemented using Java C or other object oriented programming language and development tools. Additional examples of computer code include but are not limited to control signals encrypted code and compressed code.

As an example of a system including one or more processors and processor readable storage media is a schematic block diagram of system including a processor and storage media according to an embodiment. As illustrated in system includes one or more processors operatively coupled to storage medium storage medium and storage medium . One or more processors can access instructions or code at storage medium storage medium and storage medium . Storage media and can be any processor readable media and or related devices to access processor readable media. For example storage medium can be a hard disk drive including a magnetic storage medium storage medium can be an optical drive such as a DVD drive and can accept DVD storage media on which processor readable instructions can be stored and storage medium can be a FLASH memory drive with a Universal Serial Bus USB interface. In some embodiments storage media and or can be local to e.g. coupled to a common computing device one or more processors . In some embodiments storage media and or can be remote from e.g. coupled to a separate computing device one or more processors and in communication with one or more processors via communications link. Furthermore one or more of storage media and or can be local to one or more processors and one or more of the remaining of storage media and or can be remote from one or more processors .

As a more specific example one or more processors can be included within a computing device such as a communications device having an internal solid state data store represented by storage medium and a removable solid state data store such as a Secure Digital High Capacity SDHC memory card represented by storage medium . The computing device can also include a USB host controller to communicate with a USB FLASH memory drive represented by storage medium . One or more processors can access processor readable instructions such as processor readable instructions that implement an operating system software application and or one or more processes at any of storage media and or . Said differently one or more processors can interpret or execute instructions at processor readable media via storage medium storage medium and or storage medium . In some embodiments system can include one or more memories such as RAM that function as a cache between one or more of storage medium storage medium and or storage medium and one or more processors for instructions or code stored or accessible at one or more of storage medium storage medium and or storage medium .

While certain embodiments have been shown and described above various changes in form and details may be made. For example some features of embodiments that have been described in relation to one embodiment and or process can be related to other embodiments. In other words processes features and or properties of various embodiments described in relation to one embodiment can be useful in other embodiments. Furthermore it should be understood that the systems and methods described herein can include various combinations and or sub combinations of the components and or features of the different embodiments described. As a specific example embodiments discussed in relation to cloning a source virtual machine can be applicable to migration of virtual machines. That is a source virtual machine instance can be copied to another virtual machine module as described in various embodiment discussed above and the source virtual machine instance can then be powered down or halted such that the copied or migrated virtual machine instance is active or running and the source virtual machine module is halted. Thus features described with reference to one or more embodiments can be combined with other embodiments described herein.

