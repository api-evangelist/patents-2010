---

title: Dynamic priority queue level assignment for a network flow
abstract: Forwarding a flow in a network includes receiving the flow at a switch, determining an optimized priority queue level of the flow at the switch, and forwarding the flow via the switch using an optimized priority queue level of the flow at the switch. The flow passes through a plurality of switches, including the switch, in the network, and the optimized priority queue level of the flow at the switch is different from a priority queue level of the flow at a second switch of the plurality of switches. The second switch routes the flow at the second switch using the different priority queue level for the flow.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08537846&OS=08537846&RS=08537846
owner: Hewlett-Packard Development Company, L.P.
number: 08537846
owner_city: Houston
owner_country: US
publication_date: 20100427
---
The present application contains some common subject matter with U.S. patent application Ser. No. 12 768 723 entitled Priority Queue Level Optimization for a Network Flow filed on Apr. 27 2010 by Puneet Sharma et al. which is incorporated by reference in its entirety.

The scale of computing infrastructure has experienced explosive growth at least partially due to multiple applications being supported on network fabric. For instance data centers support multiple applications on the same infrastructure. Similarly in an enterprise setting multiple services like VoIP and traditional best effort traffic may co exist concurrently on a single network. In most instances existing networks are designed for best effort traffic and they are unable to meet strict and sometimes orthogonal quality of service QoS requirements such as high bandwidth and low latency for certain applications. The networks are over provisioned or there is no mechanism to shield applications from each other.

Two of the most commonly adopted techniques to sustain QoS are network isolation and network over provisioning. Data center networks for instance have isolated networks with specialized hardware and communication protocols for each class of traffic. In some cases networks are over provisioned by a large factor of 2.5 to 8 to avoid QoS violations. Both solutions can lead to heavy under utilization and are not cost effective.

For simplicity and illustrative purposes the present invention is described by referring mainly to exemplary embodiments. In the following description numerous specific details are set forth to provide a thorough understanding of the embodiments. However it will be apparent to one of ordinary skill in the art that the present invention may be practiced without limitation to these specific details. In other instances well known methods and structures may not be described in detail to avoid unnecessarily obscuring the description of the embodiments. Also the embodiments may be used in combination with each other.

According to an embodiment a QoS controller determines per switch priority levels for a flow to maintain flow QoS requirements. The QoS controller may assign different priorities for the same flow in different switches that form an end to end path for the flow in a network. Through implementation of the embodiments diverse QoS requirements of different flow classes may be concurrently satisfied in a single network.

A flow comprises an aggregation of packets between a source and a destination in a network. For instance all hypertext transport protocol HTTP packets between two hosts may be defined as a flow. A flow may be a subset of another flow. For example a specific HTTP connection from the source to the destination can be a subset of all HTTP packets from the source to the destination. In addition more than one flow can be aggregated and a flow can be disaggregated into multiple flows. A flow may be bidirectional or unidirectional.

The switch includes a set of ports . The ports are configured to receive and send flows in the network . The switch also includes a chassis . The chassis includes switch fabric a processor and data storage . The switch fabric may include a high speed transmission medium for routing packets between the ports internally in the switch . The switch may be configured to maximize a portion of packet processing. The processor and the storage may be used for processing or storing data. The switch also includes priority queues . The switch may include multiple priority queues for each port. The priority queue may be on a line card or provided elsewhere in the switch. The priority queue includes priority levels. Received packets may be stored in the priority queue in a specific level and then processed according to the level. Priority queues are further described below with respect to .

The QoS controller provides a global set of rules for the network . For instance a manager or administrator may enter the global set of rules into the QoS controller . The QoS controller thereafter maintains global policies using the global set of rules for the network . The global rules may be based on quality of services QoS and performance goals. The QoS controller determines a current load on the switches in the network for example based on metric reports from nodes in the network . The QoS controller also maintains a current topology of the network through communication with the switch and other nodes in the network .

The QoS controller may use the topology of the network and the load on the network in a feedback control system to direct switches including the switch to make adjustments to maintain global policies specified in the global rules. For instance certain flows as specified by rules provided by the QoS controller through the switch may be rate limited or a flow may be routed through other switches in the network .

In one embodiment based on rules received from the QoS controller and stored at the switch the switch may thereafter reliably forward each of the flows using a single path or multiple paths as defined in the rules. The QoS controller may asynchronously i.e. independent of a flow setup request send an update to the switch to change rules at the switch . New local rules may be received in an instruction from the QoS controller based on the metric report. For instance a flow may be rate limited depending on bit rate through other switches in the network . Alternately the QoS controller may place a timeout or expiration in terms of seconds or a limit in terms of a number of flows on the switch .

In one embodiment the system receives QoS requirements for flows. For example an administrator may input QoS requirements to the QoS controller using the GUI window and automates the process of deriving configuration specifications and configuring the switches using the QoS controller . By way of example the inputs to the QoS controller include different QoS requirements for new flows such as bandwidth and delay thresholds.

Each flow may be identified through bits in one or more header fields in network packets e.g. source IP . In one embodiment each flow is identified based on flow specifications. Flow specifications are defined as a set of header fields but there are wildcard fields to identify multiple flows belonging to a group. Each flow specification may have a reference to slice specifications that specify performance requirement for the flows in the slice. A slice is a network slice and the term slice may interchangeably be used with a service or a network service. The QoS controller may reserve resources for the flow in the slice. In one embodiment the switch receives the packets at the ports as shown in . The switch generates a flow specification from the packet by extracting certain header fields and other meta information and then looks up the flow in its flow table.

The system makes available existing hardware switch capability in a flexible manner to the QoS controller . In one embodiment the switches and implement the CEE Converged Enhanced Ethernet and DiffSery QoS frameworks which is internally based on rate limiters and priority queues. The system is operable to allocate flows flexibly to those rate limiters and priority queues.

By way of example a flow illustrated as a thick arrow is routed from the host to the host via the switch the switch and the switch in . When the flow routes from the host to the host via the switch the switch and the switch or when the flow is first received prior to being routed by the switches the system receives a QoS requirement for the flow and derives configuration specifications and configures the switches using the QoS controller to accommodate the QoS requirement e.g. bandwidth and delay thresholds for the flow. By way of example in the QoS controller communicates with the switch the switch and the switch through switch configuration APIs dashed lines to collect information about network states such as topology and performance metrics. When the flow is to be routed in the network from the host to the host the QoS controller calculates resource allocation based on the database and performance models. Then the QoS controller installs a rate limiter in the flow s edge switch and configures each priority queue level at each switch in the flow path such as the switch the switch and the switch .

For each switch the priority queue mapping scheme used by the QoS controller for dynamic priority mapping includes mapping different flows to different priority queue levels irrespective of the incoming priority queue level of the flow. Each of the switches and is shown as having priority queues respectively. Priority queue may be included in priority queues shown in . It should be noted that each switch is shown with a single queue by way of example and each switch may have multiple queues such as queues for each port. Each queue includes queue priority levels shown as PQ levels by way of example. More or less than four priority queue levels may be used. As packets for each flow are received they are stored in a priority queue level and then processed for forwarding towards a destination according to their level. Packets may be stored in a specific priority queue level based on a priority of the flow for the packets. Packets in a higher priority queue level for example are processed first for forwarding. Different switches may have different priority queue levels for the same flow and the same switch may have different priority queue levels for different flows. When a packet is received the priority queue level is determined from the packet header and put into the associated priority queue level. For example a VoIP flow may require a relatively short delay and a flow of a large file may require a relatively high bandwidth. Thus when the VoIP flow and the flow of the large file route via the switch the VoIP flow and the flow of the large file may have different priority queue levels at the switch according to the dynamically changing traffic load in the switch . Likewise when the VoIP flow and the flow of the large file route via the switches and the VoIP flow and the flow of the large file may have different priority queue levels at the switches and according to the dynamically changing traffic load in the switches and . The priority queue level for the VoIP flow at the switch may be different from the priority queue levels for the VoIP flow at the switches and because the switches and are different switches having different configuration specifications and different traffic loads.

In one embodiment when a new flow with QoS requirements arrives in the network the QoS controller dynamically computes the priority queue levels for the flow at each switch in the flow path such as the switch the switch and the switch . The priority queue level assigned to each switch for a particular flow is referred to as a mapping. The mappings for the switches may be decided based on the current utilization traffic in each switch along the flow path. By way of example in the priority queue level for the flow at the switch is the second level which has a priority queue PQ the priority queue level for the flow at the switch is the fourth level which has a PQ and the priority queue level for the flow at the switch is the first level which has a PQ . Thus the flow may be routed via the switch the switch and the switch according to the priority queue levels PQ PQ and PQ respectively. The priority queue level of the flows may be changed along various path hops such as the switch the switch and the switch in to increase the resource utilization of the network while still guaranteeing the QoS requirements of the flows.

In one embodiment the priority queue mapping may be done by changing or modifying a type of service ToS bit on all the packets of the flow when the flow traverses each switch based on mappings installed in the device by the QoS controller . In another embodiment the priority queue mapping may be done by changing or modifying a virtual local area network ULAN priority ceiling protocol PCP bit on all the packets of the flow when the flow traverses each switch based on mappings installed in the device by the QoS controller . In yet another embodiment the priority queue mapping may be done by directly inserting or placing the packet into the appropriate queue of each switch based on mappings installed in the device by the QoS controller . As the load on the network changes new mappings for various existing flows may be dynamically computed and installed. Thus the priority queue mapping scheme provides per flow QoS guarantees while utilizing the network resources better by identifying the individual flow requiring QoS and dynamically optimizing the priority queue levels of the flow along the path taken by the flow.

The dynamic mappings based on the priority queue mapping scheme are more flexible than the conventional static tagging because the QoS controller is able to decide the mappings based on the current workloads in each switch such as the switch the switch and the switch . In conventional tagging the priority queue level of each flow remains the same throughout the path and this may result in underutilization of resources. Through the system the QoS controller collects states of the network and manages databases about topology active flows and available resources in networks. The collected states may include measured metrics related to the topology active flows and available resources in networks. Based on the databases and end to end performance models the QoS controller may decide resource allocations for the new incoming flows in network . By way of example the output of the QoS controller includes priority queue levels for a new flow at each switch in a path for the flow. Resources for flows are reserved in the switch the switch and the switch through the system . Through implementation of the priority queue mapping scheme the network fabric convergence may be improved by providing automated and scalable QoS control for various flow types with varying QoS requirements or multiple tenants on single network with performance isolation requirements without need for over provisioning the network or running the risk of QoS violations.

Methods in which the systems and may be employed for dynamically forwarding flows will now be described with respect to the following flow diagram of the method depicted in . It should be apparent to those of ordinary skill in the art that the method represents generalized illustrations and that other steps may be added or existing steps may be removed modified or rearranged without departing from the scope of the method .

The descriptions of the method are made with reference to the systems and illustrated in and thus makes reference to the elements cited therein. It should however be understood that the method is not limited to the elements set forth in the systems and . Instead it should be understood that the method may be practiced by a system having a different configuration than that set forth in the systems and .

With reference to there is shown a flowchart of a method for dynamically forwarding flows in a network according to an embodiment. The method may be performed at the switch . The processor in the switch may implement or execute the system to perform one or more of the steps described in the method in forwarding flows in the network . In another embodiment the QoS controller devolves some controls to a subset of co operating switches rather than each switch acting alone in conjunction with the QoS controller . The cooperation between switches may be done via an inter switch control management protocol in addition to the QoS controller issued commands.

At step the switch receives flow arrival information. The switch may also receive a flow. The flow passes through a plurality of switches such as the switch the switch and the switch in the flow forwarding system .

At step the switch determines an optimized priority queue level of the flow at the switch . An optimized priority queue level of the flow is a priority queue level that is determined based at least on one or more QoS requirements for the flow and may additionally be based on the network state and other information. The optimized priority queue level for a flow may be different for different switches in the flow path. The switch may determine the optimized priority queue level of the flow at the switch based on the information communicated from the QoS controller . The information communicated from the QoS controller may include a QoS requirement for the flow. Thus the optimized priority queue level of the flow at the switch may be determined based on the QoS requirement for the flow. For example the switch may determine the optimized priority queue level of the flow at the switch that maximizes the QoS requirement for the flow in the flow forwarding system . The optimized priority queue level of the flow at the switch may be different from the priority queue level of the flow at the switch and the switch . In another example the QoS controller determines the optimized priority queue level of the flow for each switch in the flow path based on the QoS requirement for the flow and existing flow requirements handled by the switches and then sends the optimized priority queue level of the flow to each switch. Then each switch implements the received optimized priority queue level of the flow. The implementing includes storing packets for the flow in a queue having the optimized priority queue level whereby for example packets in higher queues are forwarded first.

At step the switch routes the flow based on the optimized priority queue level of the flow at the switch to the next switch which is the switch . For example packets in higher queues are routed first. When the switch routes the flow to the switch packets for the flow may be stored at a different priority queue level for the flow at the switch than the priority queue level for the flow at the switch .

At step the switch through the QoS controller may update the optimized priority queue level of the flow at the switch . In one embodiment the switch may determine and update the optimized priority queue level of the flow at the switch based on a current workload in the switch . In another embodiment the switch may determine and update the optimized priority queue level of the flow at the switch relative to an optimized priority queue level of another flow at the switch . The switch may route the flow via the switch based on the updated optimized priority queue level of the flow at the switch . The updated priority queue level may be determined by the switch or the QoS controller .

Here the optimized priority queue level of the flow at each of the plurality of switches may be relative to an optimized priority queue level of different flows at each of the plurality of switches. For instance when there are two different flows flow and flow the QoS controller maps flow based on the optimized priority queue level of flow at each of the switches. In this situation the optimized priority queue level of flow at each of the switches and may be determined by considering the optimized priority queue level of flow which is also routed by each of the switches and . The priority queue levels of other flows routed by a switch are considered because inserting a new flow may impact existing flows. The QoS controller may map the flow based on the optimized priority queue level of the flow at each of the switches and either before or after receiving the flow at the switches and .

The computer system includes a processor providing an execution platform for executing software. The processor is configured to route a flow in a network. The processor is configured to receive the flow at a switch when the flow passes through a plurality of switches including the switch in the network to determine an optimized priority queue level of the flow at the switch that is different from a priority queue level of the flow at a second switch of the plurality of switches and to route the flow via the switch using the optimized priority queue level of the flow at the switch. The second switch routes the flow at the second switch using the different priority queue level for the flow.

At each of the plurality of switches the processor is further configured to map the flow to an optimized priority queue level of the flow to modify a ToS bit on packets of the flow based on the mappings while the flow passes through the plurality of switches to modify a VLAN PCP bit on packets of the flow based on the mappings while the flow passes through the plurality of switches and to place a packet of the flow in a queue in the switch associated with the optimized priority queue level of the flow at the switch. The processor is configured to determine the optimized priority queue level of the flow at the switch based on a QoS requirement for the flow to update the optimized priority queue level of the flow at the switch based on a current workload in the switch and to route the flow via the switch based on the updated optimized priority queue level of the flow at the switch.

Commands and data from the processor are communicated over a communication bus . The computer system also includes a main memory such as a Random Access Memory RAM where software may reside during runtime and a secondary memory . The secondary memory may include for example a nonvolatile memory where a copy of software is stored. In one example the secondary memory also includes ROM read only memory EPROM erasable programmable ROM EEPROM electrically erasable programmable ROM and other data storage devices include hard disks. The main memory as well as the secondary memory may store the optimized priority queue levels of different flows at different switches as discussed before.

The computer system includes I O devices . The I O devices may include a display and or user interfaces comprising one or more I O devices such as a keyboard a mouse a stylus speaker and the like. A communication interface is provided for communicating with other components. The communication interface may be a wireless interface. The communication interface may be a network interface. The communication interface is configured to input information used to determine the optimized priority queue levels of different flows at different switches. The communication interface is also configured to input information used to maximize the QoS requirement for the flow in the network.

Although described specifically throughout the entirety of the instant disclosure representative embodiments of the present invention have utility over a wide range of applications and the above discussion is not intended and should not be construed to be limiting but is offered as an illustrative discussion of aspects of the invention.

What has been described and illustrated herein are embodiments of the invention along with some of their variations. The terms descriptions and figures used herein are set forth by way of illustration only and are not meant as limitations. Those skilled in the art will recognize that many variations are possible within the spirit and scope of the invention wherein the invention is intended to be defined by the following claims and their equivalents in which all terms are mean in their broadest reasonable sense unless otherwise indicated.

