---

title: Plug-in architecture for dynamic font rendering enablement
abstract: A computer system provides a plug-in architecture for creation of a dynamic font. The computer system can incorporate a new filter function into a filtering layer of a font program. The filtering layer includes pre-defined filter functions to transform a base font into a new font. The computer system applies one or more font rules in the filtering layer to the base font. The font rules are implemented by the new filter function and at least one of the pre-defined filter functions to randomize an appearance of each character in a character string. The character string rendered with the new font has a dynamic and randomized appearance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08624900&OS=08624900&RS=08624900
owner: Red Hat, Inc.
number: 08624900
owner_city: Raleigh
owner_country: US
publication_date: 20100409
---
Embodiments of the present invention relate to font creation and more specifically to the generation and rendering of a dynamic font.

Typography is the technique of designing and arranging type. The design and arrangement of type involves the selection of typefaces point size line length leading line spacing adjusting the spaces between groups of letters tracking and adjusting the space between pairs of letters kerning . Examples of a typeface include Liberation Sans Times New Roman Arial etc. A font has a specific size designation. For example Liberation Sans 10 point is a font. A font author designer or creator is a person that writes the software driving the usage of the typeface

For artistic effect font authors may sometimes create fonts with distressed rough or otherwise organic effects. Typically these effects are statically embedded in the fonts. If an end user uses the same character in a sequence these effects are conspicuously repeated and the illusion of organic effect to the font is broken.

To obtain a more dynamic or organic looking type treatment a font user often converts a font to vector or bitmap artwork and manually applies the dynamic or organic effects to the type. The process is manual and time intensive. Further manipulation of vector or bitmap artwork necessitates the work of a skilled artist which means automation of the effects would be extremely difficult. Additionally an end user who simply wishes to consume a font without an intimate knowledge of font creation would be unable to use a font that requires manipulation of vector artwork.

Described herein is a method and system that provides a plug in architecture for creation of a dynamic font. The plug in architecture can be provided by a computer system. The computer system incorporates a new filter function as a plug in into a filtering layer of a font program. The filtering layer includes pre defined filter functions to transform a base font into a new font. The computer system applies one or more font rules in the filtering layer to the base font. The font rules are implemented by the new filter function and at least one of the pre defined filter functions to randomize an appearance of each character in a character string. The character string rendered with the new font has a dynamic and randomized appearance.

According to embodiments of the invention a font can have one or more textures of various priorities and orderings embedded in it. The priorities and orderings as well as various transformations can be applied to the font on the fly as type is written out to a data output device e.g. a display a printer etc. .

For font creators embodiments of the invention can be realized by a font creation application that allows the font creators to determine a base font select one or more textures to embed in the font and dictate rules and randomization levels upon which the texture will be transformed. The font creator may preview the font with textures and rules in place to see how the font looks and tweak those configurations as necessary to achieve the desired effect. Finally font creators can save their font creation as a new font manage any applicable licenses for the original base font and included textures and output the new font in any number of supported formats TrueType Font TTF OpenType Font OTF etc. .

In one embodiment a font creator may be able to set some of the configuration variables such as textures by providing texture bitmaps randomization level by specifying how much randomness is used in the application of the textures e.g. how often is the texture applied within the string whether it is applied to every character to every other character or somewhere in between. For each texture a font creator may be able to set the following parameters the order of precedence a texture should be applied which affects how often the texture is applied the opacity of the texture which may be an explicit value or a range of values the size of the texture which may be an explicit value or a range of values the space between subsequent applications of the same textures which may be an explicit value or a range of values and the jitter of subsequent applications of the same texture where jitter is defined as how much a texture is rotated upon subsequent applications which may be an explicit value or a range of values .

Additionally in one embodiment a font creator may also indicate ranges of particular effects to be applied dynamically and randomly to a font on the fly as they are used to type out characters. The particular effects include but are not limited to the percentage a character deviates from the base font with respect to the point size the deviation from the base font s kerning i.e. the space between letters the deviation from the base font s leading i.e. the space between lines of text a given standard vector based transform and the deviation from a base application of that transform. An example of a base application of a vector based transform is a blur filter applied to an entire font at a base value of 5 blur. A font creator may indicate that she would like individual characters to randomly deviate up to 50 of the base value blur. As a result the individual characters may have blur values anywhere from 2.5 blur to 7.5 blur.

Embodiments of the invention allow an end user to use a font in the following ways. In one scenario an end user may obtain a font with embedded textures application rules and randomization scheme built into it. The end user only consumes the font and may not be able to customize any of the configurations that the font creator set into the font. When the end user consumes a font e.g. e.g. by typing a string of characters such as A A A A A A A A A the characters have textures applied to them according to the rules set by the font creator. Thus each character A may look slightly different from every other A .

In another scenario an end user may obtain a font with embedded textures application rules and randomization scheme built into it. The end user may be able to tweak some of the configurations set by the font creator. For example if the font creator specified that the texture opacity is 50 the end user may in her application of the font override that value 50 with a different value e.g. 40 100 or any other desired percentage .

In yet another scenario an end user may script the production of type using a dynamic font overriding some of the default values set by the font creator. The end user may use an Application Programming Interface API to automate the creation of a scriptable type that looks organic and dynamic. The script that produces the type may be called in an automated manner e.g. by a Web server for the display of type on a Web page.

Embodiments of the present invention provide a plug in architecture that allows font creators to create new fonts that have dynamic and randomized appearances. The plug in architecture can be expanded by font creators with new plug ins that define new textures and new functions. The plug in architecture is portable across different platforms. Textures rules functions and configurations are embedded in the font itself so no additional code is necessary.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

In one embodiment the computer system also includes a font management module to provide fonts that have a dynamic and randomized appearance. The font management module provides a filtering layer to a font program to transform a base font into a new font. The filtering layer includes pre defined font rules and pre defined filter functions that serve as a base plug in architecture upon which font creators can add their own designs including new filter functions and textures to produce new fonts. A font creator may also add new font rules or at the very least to add lines that reference the filter functions and textures added by them. The new filter functions and textures can be added as plug ins that cooperate with the pre defined font rules and pre defined filter functions. The font rules filter functions and textures are embedded in the font program. Thus the entire font program including the filtering layer can be ported to any compatible system and can be used by an end user to generate type in the new font.

In one embodiment the filtering layer also includes pre defined filter functions designer defined filter functions and designer provided textures . According to the font rules the font management module applies one or more of the filter functions and one or more of the textures to abuse font to implement the font rules .

In an alternative embodiment the font program including the filtering layer may be stored in the data storage and retrieved when receiving a type generation request.

In one embodiment the definition of the new font is read by a font rendering module which contains rendering instructions for rendering the type of one or more alphanumeric characters that are provided by an end user or a script. The alphanumeric characters may be typed into the computer system via the keyboard or retrieved from a file in the data storage . The operating system may read and execute the rendering instructions and display the rendered type on the display . Alternatively the rendering instructions may be directly executed by functions provided by the printer which then prints the rendered type on a print medium.

In one embodiment the filtering layer allows one or more transformations to be applied to a character string in a base font with a degree of randomness specified by the configuration module . The transformations may be applied to one or more textures that are tiled and overlaid on top of the character string or directly applied to the character string. Each texture in or may be in the for of a bitmap or vector graphic of a given size e.g. 500 pixels by 500 pixels . The character string may be part of a document which is stored in memory or being created by a user as the user inputs characters into the computer system . When applied to the textures the transformations may change the appearance of the textures with respect to the opacity scaling factor position orientation etc. When applied directly to a character string the transformations may change the appearance of the character string with respect to the positions and or orientations of the characters. For example the transformations may apply a shaped envelope to the outer contour of the string to produce a distortion effect.

For example a font creator may specify in the font rules that the opacity of a given texture is a random value in the range of 20 to 40 . That is each time the bitmap representing the texture is overlaid on the character string anew random strength of the bitmap is chosen in the range of 20 to 40 . In a scenario where the opacity of the texture is 20 a black pixel in the texture bitmap may remove 20 of the darkness of the corresponding pixel in the character string. As another example a font creator can specify in the font rules that a texture is to be rotated by a degree in the range of 10 to 20 when the texture bitmap is overlaid on a character string. A font creator may also specify how multiple textures can be applied to a character string for example in a round robin fashion or by a random selection.

In the example of three strings and are shown. The first row is a string of A in the base font without any font rule applied to it. The second row is a string of A having the font rule applied to it. Font rule specifies a randomization scheme in which some or all of the letters in the string are each scaled by a scale factor randomly chosen in the range of 75 100 and distorted by a distortion factor randomly chosen in the range of 10 50 . Font rule further includes rules for determining whether a letter in the string is to be scaled and or to be distorted. The specific letters being scaled are determined by condition that includes counters m n and a parameter SKIPFACTOR. The specific letters being distorted are determined by condition that includes counters p n and the parameter SKIPFACTOR.

The third row is a string of A having the font rule applied to it. Font rule specifies a texture application scheme in which a texture in the file sometexture.svg is applied to each letter in the string sequentially. The texture is applied with strength opacity determined by t where t is incremented by 10 for each letter.

Referring to in one embodiment the method begins when the computer system receives a request to generate a type having a specified font block . The request may be sent by a user or a script. The request may specify the location of an input file or may provide the input via a user interface e.g. keyboard keypad etc. . The computer system identifies the base font on which the requested font is based and determines whether the requested font is defined by one or more font rules e.g. the font rules of . After the base font and the font rules are identified the computer system determines for each font rule whether or not the font rules apply a texture to the base font block . If the font rule applies no texture the computer system determines whether or not the font rule applies a transformation to the base font block . If a transformation is to be applied to the base font the computer system proceeds to apply the transformation to the base font block . As described above the transformation to the base font may include the percentage a character deviates from the base font with respect to the point size the deviation from the base font s kerning leading or the deviation from a base application of a given standard transform. After the transformation is applied to the base font or at block it is determined that there is no transformation to be applied the computer system proceeds to process the next font rule if any rule is left .

If at block the font rule specifies one or more textures the computer system applies the one or more textures according to the font rule. If there are multiple textures to be applied block the textures may be applied sequentially randomly or in any priorities and orderings specified by the font rule. The multiple textures may be tiled or overlaid according to the specified priorities and orderings. The font rule may specify that one or more transformations are to be applied to each texture or at least one of the textures before the texture is applied to the base font. After a texture is applied to the base font block the computer system determines whether or not the font rule further specifies a transformation to be applied to the texturized font block . If a transformation is to be applied the computer system proceeds to apply the transformation to the texturized font. After the transformation is applied to the texturized font or if there is no transformation to be applied to the texturized font the computer system proceeds to process the next texture until all of the textures specified in the font rule are applied block .

After all of the textures specified in the font rule are applied the computer system proceeds to block to determine whether or not the font rule applies a transformation to the font which in this case is the texturized font. The computer system applies the transformation if there is any block . After the transformation is applied to the base font or at block it is determined that there is no transformation to be applied the computer system proceeds to process the next font rule if any rule is left .

After all of the font rules are applied the computer system then proceeds to render the type in the requested font block . It is noted that the application of the font rules occurs on the fly as the type is rendered. That is each character in a character string in a sequential order is applied with the font rules and then rendered before the next character in the string is processed. Each time the filter functions implementing the font rules are called to generate the type for a character different randomization parameters priority or ordering may be used. Therefore the character string can be rendered with a dynamic and randomized appearance.

Embodiments of the invention provide a system and method that is portable automatable customizable and realistic. It is portable because all the textures and or rules an end user needs to transform a type are embedded in the font file. It is automatable because no human intervention is necessary to generate non uniform and organic type effects. It is customizable because an end user can tweak the configurations of the fonts on the fly in a live manner until the randomization results in a visual effect that most appeals to the end user. The resulting creative type effects are more realistic as they are truly random and not statically baked into the font file. Therefore text with many instances of the same character repeated in succession or within proximity of each other maintain an organic appearance of randomness.

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a secondary memory e.g. a data storage device which communicate with each other via a bus .

The processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. The processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute filtering logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The secondary memory may include a machine readable storage medium or more specifically a computer readable storage medium on which is stored one or more sets of instructions e.g. filtering logic embodying any one or more of the methodologies or functions described herein e.g. the filtering layer of . The filtering logic may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine readable storage media. The filtering logic may further be transmitted or received over a network via the network interface device .

The machine readable storage medium may also be used to store the filtering logic persistently. While the machine readable storage medium is shown in an exemplary embodiment to be a single medium the term machine readable storage medium should be taken to include a single media or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable storage medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine that cause the machine to perform any one or more of the methodologies of the present invention. The term machine readable storage odium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

The computer system may additionally include a filtering module for implementing the functionalities of the filtering layer of . The module components and other features described herein for example in relation to can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS FPGAs DSPs or similar devices. In addition the module can be implemented as firmware or functional circuitry within hardware devices. Further the module can be implemented in any combination of hardware devices and software components.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be born in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as incorporating applying rendering transforming or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer system selectively programmed by a computer program stored in the computer system. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic disk storage media optical storage media flash memory devices other type of machine accessible storage media or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

