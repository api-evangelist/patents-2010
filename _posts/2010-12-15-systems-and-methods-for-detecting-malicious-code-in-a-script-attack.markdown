---

title: Systems and methods for detecting malicious code in a script attack
abstract: A computer-implemented method to detect malicious code in a script attack, is described. An activity associated with calling a function is detected. An operation code set associated with the activity to call the function is identified. A predetermined sequence of characters included in the operation code set is identified. The identified predetermined sequence of characters is analyzed. The operation code set is classified as malicious or non-malicious based on the analysis of the predetermined sequence of characters.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08839428&OS=08839428&RS=08839428
owner: Symantec Corporation
number: 08839428
owner_city: Mountain View
owner_country: US
publication_date: 20101215
---
The use of computer systems and computer related technologies continues to increase at a rapid pace. This increased use of computer systems has influenced the advances made to computer related technologies. Indeed computer systems have increasingly become an integral part of the business world and the activities of individual consumers. Computer systems may be used to carry out several business industry and academic endeavors. The wide spread use of computers has been accelerated by the increased use of computer networks including the Internet.

Many businesses use one or more computer networks to communicate and share data between the various computers connected to the networks. The productivity and efficiency of employees often requires human and computer interaction. Users of computer technologies continue to demand that the efficiency of these technologies increase. Improving the efficiency of computer technologies is important to anyone who uses and relies on computers.

Computing systems may be capable of accessing information across a network connection. For example a computing system may access information from the World Wide Web. This information may be accessed by using a web browser to locate a desired website that includes the information. Developers of malware however may engage a script attack that affects the functionality of the web browser or other functions of the computing system. As a result benefits may be realized by providing system and methods for detecting malicious code in a script attack.

According to at least one embodiment a computer implemented method to detect malicious code in a script attack is described. An activity associated with calling a function is detected. An operation code set associated with the activity to call the function is identified. A predetermined sequence of characters included in the operation code set is identified. The identified predetermined sequence of characters is analyzed. The operation code set is classified as malicious or non malicious based on the analysis of the predetermined sequence of characters.

In one embodiment the operation code set includes a no operation NOP sled. In one configuration the operation code set includes shellcode. In one example the called function comprises a JavaScript function. The JavaScript function may include at least one of the following functions Unescape Eval CharCodeAt Split or Char.

In one embodiment at least one non printable character included in the operation code set is identified. In addition two consecutive non printable characters included in the operation code set may be identified. At least one printable character included in the operation code set may also be identified. The at least one printable character may be allowed to execute when the at least one printable character is included in an operation code set for printable characters.

A computing device configured to detect malicious code in a script attack is also described. The computing device may include a processor and memory in electronic communication with the processor. The computing device may further include a protection application configured to detect an activity associated with calling a function and identify an operation code set associated with the activity to call the function. The protection application may also be configured to identify a predetermined sequence of characters included in the operation code set and analyze the identified predetermined sequence of characters. The protection application may be further configured to classify the operation code set as malicious or non malicious based on the analysis of the predetermined sequence of characters.

A computer program product for detecting malicious code in a script attack is also described. The computer program product may include a computer readable medium having instructions thereon. The instructions may include code programmed to detect an activity associated with calling a function and code programmed to identify an operation code set associated with the activity to call the function. The instructions may further include code programmed to identify a predetermined sequence of characters included in the operation code set and code programmed to analyze the identified predetermined sequence of characters. The instructions may also include code programmed to classify the operation code set as malicious or non malicious based on the analysis of the predetermined sequence of characters.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

While the embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

In computer technology operation code opcode may be the portion of a machine language instruction that specifies the operation to be performed. Opcodes may be found in byte codes and other representations intended for a software interpreter. These software based instruction sets i.e. opcode sets may employ higher level data types and operations than most hardware counterparts. For example an opcode set may be provided in the JavaScript language. JavaScript may be used to write functions that are embedded in or included from hyper text markup language HTML pages that interact with Document Object Model DOM of the page. A web browser is a common host environment for JavaScript. Web browsers may user a public application programming interface API to create host objects responsible for reflecting the DOM into JavaScript.

JavaScript may provide the potential for malicious authors to deliver scripts to run on a client computing device via the web. Many browser exploits include no operation performed NOP sleds in these scripts that are delivered to client computing devices via the web. A NOP may be assembly language instructions sequence of programming language statements or computer protocol commands that effectively do nothing at all. In some instances a NOP opcode may be used to form a NOP sled which may allow code to execute when the exact value of the instruction pointer is indeterminate e.g. when a buffer overflow causes a function s return address on the stack to be overwritten . In other words a NOP sled may be a sequence of NOP instructions meant to slide a central processing unit s CPU s instruction execution flow to its final desired destination. As a result NOP sleds may be used in buffer overflows and similar exploits designed to take over a program s execution path.

In order for the exploiting scripts to supply NOP sleds to targets the scripts may use a set of functions to convert the string text values of the NOP sleds. If the NOP sleds are detected then the exploiting Java scripts may also be detected and blocked even for previously unknown new targets allowing for zero day detection. Protection applications presently use a set list of NOP sleds that form the set of all the NOPs appearing in several Java script functions such as Unescape Eval CharCodeAt Split return value and Char. Examples of NOP sleds that are currently included in the list of NOP sleds may include 

When a website script calls a JavaScript function such as the functions provided above e.g. Unescape Eval CharCodeAt Split and Char and one of the above NOP sleds are detected in the opcode the NOP sled may be classified as malicious. To mitigate false positives if the website is on a white list the reporting of the NOP sled may be done silently.

A shortcoming with the current method described above is that it is limited to the list of currently known NOP sleds to detect new attacks on objects and other targets. The present system and methods provide a new NOP sled detection system for script attacks on web browsers.

In one configuration the client device may include a protection application that may protect the client device from an attack originating from an attack source A B C. In one example the protection application may include a detection module that may detect an attack on the client device . The client device may communicate information regarding a detected attack to the server . The server may then analyze the information regarding the attack to determine if the attack is malicious or if the attack has been improperly identified by the client device as an attack i.e. a false positive .

In one embodiment the non printable character detection module may include a single non printable character detection module and a multiple non printable character detection module . In one example the single non printable character detection module may analyze an opcode set to detect non printable content. In one configuration the opcode set may include a NOP sled. In particular the single non printable character detection module may detect any one non printable character that is in the opcode set for single byte instructions. When the single non printable character detection module detects any one non printable character in the opcode set for single byte instructions the opcode set may be blocked. Alternatively or additionally a user may receive a warning message or a report may be silently sent to the user as a remediation action. Examples of single byte NOPs that include non printable characters may be but are not limited to the following 

In one example the multiple non printable character detection module may also detect non printable content in an opcode set. In particular the multiple non printable character detection module may detect any two consecutive non printable characters that are in the opcode set for two byte instructions. When the multiple non printable character detection module detects these non printable characters a warning or silent report may be sent to a user. In addition the opcode set may be blocked from executing when the multiple non printable character detection module detects any two consecutive non printable characters in the opcode set for two byte instructions.

In another embodiment the multiple non printable character detection module may also detect any sequence of two three or four non printable one byte or two byte instructions in a possible opcode set. If a sequence of two three four non printable characters are detected in an opcode set of one byte or two byte instructions a stronger action may be triggered to remediate the detection of these characters. For example the opcode set may be completely blocked from executing on the client device and a notification may be sent to a user.

The mixed character detection module may detect mixed non printable characters and printable characters within an opcode set that includes a NOP sled. In one example the mixed character detection module may allow printable characters as long as the printable characters are in an opcode set for printable characters. Examples of single byte NOPs that include printable characters may be but are not limited to the following 

An additional detection module may detect all the characters in a particular opcode set. The additional detection module may perform additional lexicon checks such as the percentage for length and fewer spaces. Further the additional detection module may detect when no matches occur between characters in the opcode set and a basic dictionary language dependent . In one embodiment checks to filter widely used encoder tools common artifact may be done where they exist because it may be difficult to make a total new unique printable NOP and or shellcode string .

In order to limit false positives the detection actions provided above may be filtered by the filter . In one embodiment the filter may specify that the action is only triggered if the website from where the script or chained uniform resource locators URLs immediate to this are of low reputation. In addition the action may be triggered if an action that is initiated for exploitation could cause damage to a user i.e. loss of money infection sensitive API calls etc. . As a further example the detection actions may be triggered if the action initiated for exploitation could cause damage by initiating a file download or entry of details to a malicious website. The filter may also be used to filter false positives by specifying that the action is only triggered if a certain repetition of the detection occurs.

In one embodiment an attack sequence may include both a NOP sled section and a shellcode section. The detection module may be implemented or applied to each section separately and also the combination as a whole. Further for non printable character examples a percentage may be applied so that when a particular threshold is satisfied the detection module may determine that a particular opcode set that includes a NOP section and or a shellcode section is invalid.

In one configuration the detection module may apply checks on various JavaScript functions. For example the checks may be applied on but not limited to the following JavaScript functions Unescape Eval CharCodeAt Split and Char. In addition the detection module may apply the checks on variables built during the execution of a script. As indicated above the checks may be applied on a single call to the checked JavaScript functions variables or to the sum of all calls to these functions as found at the exit from the script s execution. In one embodiment the results may be aggregated at a back end server in order to identify correct detections and false positives.

In one configuration the protection application may include a detection module . As previously described the detection module may detect a NOP section and or a shellcode section that may be included as part of the attack sequence . The attack sequence may be a java script that includes an opcode set.

In one example the detection module may transmit information regarding the attack sequence to a server through the network for example . The server may include an aggregation module that may collect and aggregate information received from various client devices such as the client device . The aggregation module may then aggregate the various information regarding multiple NOP sections and shellcode sections that may be classified as malicious.

In one example a called function may be detected . For example the opcode set may call a JavaScript function such as but not limited to Unescape Eval CharCodeAt Split Char and the like. In one configuration the opcode set associated with the called function may be detected . The opcode set may include NOP sleds shellcode etc. A sequence of non printable characters and printable characters in the opcode set may be analyzed . The opcode set may be classified as malicious or non malicious based on the analysis of the sequence of non printable characters and printable characters in the opcode set. In one example information regarding the opcode set may be transmitted to a backend server that determines whether a section in the opcode set such as a NOP sled shellcode etc. is malicious.

In one example a called function may be detected . An opcode set associated with the called function may also be detected . A determination may be made as to whether a non printable character is detected in the opcode set. If it is determined that a non printable character is not detected the method may return to detect a called function. If however it is determined that a non printable character is detected the opcode set may be classified as a malicious opcode set. In one example the NOP sled or shellcode detected in the opcode set may be classified as malicious. In one embodiment a remediation action may be performed . For example the opcode set may be blocked from executing. Alternatively or in addition a warning may be reported to a user.

In one embodiment a called function may be detected . An opcode set associated with the called function may also be detected . For example the opcode set that called the function may be identified. A determination may be made as to whether two consecutive non printable characters are detected in the opcode set. If it is determined that two consecutive non printable characters are not detected the method may return to detect a called function. If however it is determined that two consecutive non printable characters are detected the opcode set may be classified as a malicious opcode set. In addition a remediation action may be performed . The remediation action may include blocking the execution of the opcode set sending a notification to a user and the like.

In one configuration a called function may be detected . An opcode set associated with the called function may also be detected . A determination may be made as to whether a sequence of a plurality of non printable characters is detected in the opcode set. For example the opcode set may include a NOP sled section and or a shellcode section. The method may determine whether one or both of these sections include a sequence of a plurality of non printable characters. If it is determined that a sequence of a plurality of non printable characters is not detected the method may return to detect a called function. If however it is determined that a sequence of a plurality of non printable characters is detected the opcode set may be classified as a malicious opcode set. In particular the detected NOP sled and or shellcode may be classified as malicious In addition a remediation action may be performed .

In one example a called function may be detected . The called function may be a JavaScript function. In addition an opcode set associated with the called function may also be detected . For example the opcode set that called the JavaScript function may be detected . A first determination may be made as to whether a sequence of a plurality of non printable characters and printable characters is detected in the opcode set. If it is determined that a sequence is not detected the method may return to detect a called function. If however it is determined that a sequence is detected a second determination may be made as to whether the detected printable characters are included in an opcode set for printable characters. If it is determined that the printable characters are included in an opcode set for printable characters the method may continue to allow the printable characters. If however it is determined that the printable characters are not included in an opcode set for printable characters the opcode set may be classified as a malicious opcode set. In addition a remediation action may be performed as previously described.

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components or devices. For example the protection application to implement the present systems and methods may be stored within the system memory . Applications resident with computer system are generally stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit or other storage medium. Additionally applications can be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem or interface .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present systems and methods. The devices and subsystems can be interconnected in different ways from that shown in . The operation of a computer system such as that shown in is readily known in the art and is not discussed in detail in this application. Code to implement the present disclosure can be stored in computer readable medium such as one or more of system memory fixed disk optical disk or floppy disk . The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 UNIX Linux or another known operating system.

Moreover regarding the signals described herein those skilled in the art will recognize that a signal can be directly transmitted from a first block to a second block or a signal can be modified e.g. amplified attenuated delayed latched buffered inverted filtered or otherwise modified between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next other embodiments of the present systems and methods may include modified signals in place of such directly transmitted signals as long as the informational and or functional aspect of the signal is transmitted between blocks. To some extent a signal input at a second block can be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved e.g. there will inevitably be some attenuation and delay . Therefore as used herein a second signal derived from a first signal includes the first signal or any modifications to the first signal whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and or final functional aspect of the first signal.

With reference to computer system modem network interface or some other method can be used to provide connectivity from each of client computer systems and to network . Client systems and are able to access information on storage server A or B using for example a web browser or other client software not shown . Such a client allows client systems and to access data hosted by storage server A or B or one of storage devices A N B N N or intelligent storage array . depicts the use of a network such as the Internet for exchanging data but the present systems and methods are not limited to the Internet or any particular network based environment.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

Furthermore while various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the present systems and methods and their practical applications to thereby enable others skilled in the art to best utilize the present systems and methods and various embodiments with various modifications as may be suited to the particular use contemplated.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

