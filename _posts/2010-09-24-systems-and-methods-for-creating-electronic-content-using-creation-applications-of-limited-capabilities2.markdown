---

title: Systems and methods for creating electronic content using creation applications of limited capabilities
abstract: One exemplary embodiment involves receiving electronic content to be displayed and edited in an application that has limited capabilities for editing an item of the electronic content. The application opens the electronic content for editing and displays a notification indicating that editing of the item is restricted in the application. Such an application can also be configured to address one or more of various additional circumstances. For example, the application may identify representations to be displayed for items that cannot be directly displayed. As another example, the application may provide an edit approver that determines whether edits that have effects on the item are allowed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09594468&OS=09594468&RS=09594468
owner: Adobe Systems Incorporated
number: 09594468
owner_city: San Jose
owner_country: US
publication_date: 20100924
---
This disclosure relates generally to computer software that runs displays provides shares or otherwise uses electronic content.

Various computer applications are used to create graphics applications animations videos and other electronic content. Many such applications provide a what you see is what you get WYSIWYG interface that allows the appearance of the electronic content being created to be specified on a graphical canvas area. For example such an interface may allow the size shape and other display attributes of a button to be changed by a content creator manipulating a graphical representation of the button. Many aspects of electronic content cannot be fully specified through interactions with a WYSIWYG canvas. Property selection panels are used to supplement the canvas interfaces of such editors. For example a color selection panel may pop up to allow a creator to specify the background color of a displayed button. Other aspects of electronic content must be specified in manually entered software code. For example the function and or text of a button may be specified in software code.

The creation of electronic content can involve persons with different skills and experiences. Many of those involved in the creation of electronic content cannot or will not write or read software code or otherwise dislike having to work with software code. Such persons are collectively referred to herein as designers while persons who interpret read write create and or edit code are collectively referred to as developers. 

Designers commonly use WYSIWYG interfaces to design the appearance of electronic content. Some WYSIWYG interfaces facilitate the creation of graphical and some interactive aspects of electronic content without requiring knowledge or use of software code. However the use of some electronic content features functions and customizations requires that developers add software code. To create such electronic content designers often collaborate with one or more other people who add the software coding to the electronic content. Different electronic content creation applications can be designed to edit the same piece of electronic content yet target the different types of content creators i.e. designers and developers. An electronic content creation application that targets designers can provide a limited interface so that the designers are not encumbered with features that will not be used.

The use of separate electronic content applications that provide different interfaces can provide various benefits. However they also provide a potential for incompatibility. An electronic content creation application that targets designers may for example understand only a subset of the possible elements that might be used in the electronic content. As a specific example a creation application that targets designers may not provide functionality to display cascading style sheet CSS features even though such features can be added to the electronic content being created by the developer. Such lack of capability may provide an advantage since CSS relates to program like logical rules that are applied to define the appearance of objects. Avoiding CSS and other software code specific features can simplify the creation application s interface and make it easier for designers to use. Moreover it can be advantageous to limit or avoid interpreting developer entered arbitrary code with respect to a WYSIWYG interface. Programming languages designed for developer coding are generally very complex and have many constructs that have no visual representation.

Because a creation application that targets designers may have limited capabilities incompatibility issues may arise if it opens electronic content that contains features added by another more capable creation application. Compatibility issues can occur if manual code is inserted in a collaborative project by a developer for example to add business logic data connectivity etc. Opening a project a designer might find that it does not compile does not quite work or cannot be edited. Because of such incompatibilities a common workflow involves a designer creating the visuals for a project handing those visuals off to development and then not expecting to change anything except by sending mockups or textual requests to the developer who then integrates the changes. This can be inefficient and often sacrifices the integrity of the designer s vision and intentions.

One exemplary embodiment involves receiving electronic content to be displayed and edited in an application that has limited capabilities for editing an item of the electronic content. The application opens the electronic content for editing and displays a notification indicating that editing of the item is restricted in the application. Such an application can also be configured to address one or more of various additional circumstances. For example the application may identify representations to be displayed for items that cannot be directly displayed by the application. As another example the application may provide an edit approver that determines whether edits that have effects on the item are allowed.

These illustrative embodiments are mentioned not to limit or define the disclosure but to provide examples to aid understanding thereof. Additional embodiments are discussed in the Detailed Description and further description is provided there.

Methods and systems are disclosed that facilitate electronic content creation using creation applications of differing capabilities. An exemplary system involves at least a first electronic content creation application that provides a WYSIWYG interface and a second electronic content application providing at least one creation feature different from those provided by the first application. For ease of understanding such a first application is referred to as a design application and such a second application is referred to as a development application. A design application has limited editing capabilities with respect to items that cannot be fully edited by the design application. In contrast a development application may provide for creating and editing electronic content features that cannot be fully displayed and or edited by the design application. In many scenarios but not always a development application will provide code creating editing features not provided by a design application. A development application may provide for the creation and editing of software code added by a developer which is referred to herein as arbitrary code in contrast to code provided by a creation application itself for example to define standard electronic content components e.g. standard buttons lists text boxes etc.

A design application and a development application can be used in collaborative content creation projects including projects in which a design application is used to edit electronic content after such content is edited by a development application. In many scenarios design and development can even proceed in parallel on a single electronic content creation project. Various techniques are used to address potential incompatibility issues arising from developer application created electronic content features not being fully displayable or editable in a design application.

A design application can be configured to identify electronic content containing features that the design application does not provide full editing capabilities. The design application includes a compatibility checker that evaluates such features and determines whether to prohibit opening of the electronic content entirely or whether to open the electronic content. If such content is opened the interface of the design application may provide various graphical representations notifications and or limit editing capabilities so that the inclusion of the elements that are not fully editable does not confuse the designer or otherwise allow editing that is undesirable e.g. that breaks a developer created element.

The design application can be configured to display representations for electronic content elements are not fully displayable and or editable. For example if a developer has provided a custom checkbox component the design application may provide a square or other graphic to represent that component even though it cannot fully display or allow editing of the component. The design application may be able to infer size shape or other characteristics of the component and use those inferences to provide a graphical approximation for the component. The design applications may further provide notifications regarding such elements for example identifying that the checkbox component is developer created and or cannot be edited.

A design application can alternatively or additionally include an edit approver that evaluates and at least sometimes prevents the editing of certain elements provides notifications and otherwise ensures that the design application provides a reliable experience even if the electronic content includes for example arbitrary code that is not editable by the design application. For example a designer may attempt to edit a developer added custom checkbox component. An edit approver can determine whether the potential edit is allowed or prohibited. As specific examples it may allow resizing of the checkbox but prohibit deletion of the checkbox. A design application may thus ensure that it will not improperly edit or delete developer created elements that the design application is not configured to edit.

Generally a design application can be configured to allow at least some editing of partially compatible electronic content. In some scenarios a designer may even edit certain attributes of developer created components that are not fully editable in the design application. Providing for the limited editing of electronic content allows designers to make design changes directly rather than having to send mock ups or other instructions for a developer to use in editing the electronic content in a development application. This direct designer editing can save time for both designers and developers and result in better electronic content.

Compatibility can also be checked within a development application. For example a development application may include a compatibility checker that checks whether elements that are being added by a developer will be acceptable for use in one or more design applications. For example if a developer creates a checkbox by providing arbitrary code the development application s compatibility checker may provide a notification that the component will prevent the electronic content from being edited in a design application or that the component will not be editable in the design application. The design application and development application may thus both include compatibility checking components. In some scenarios the design application and development application use the same compatibility component. This helps ensure consistency and may reduce the effort required to build and use multiple compatibility checkers.

As used herein the term device refers to any computing or other electronic equipment that executes instructions and includes any type of processor based equipment that operates an operating system or otherwise executes instructions. A device will typically include a processor that executes program instructions and may include external or internal components such as a mouse a CD ROM DVD a keyboard a display or other input or output equipment. Examples of devices are personal computers digital assistants personal digital assistants cellular phones mobile phones smart phones pagers digital tablets laptop computers Internet appliances other processor based devices and television viewing devices. The exemplary devices are respectively used as special purpose computing devices to provide specific functionality offered by their respective applications and by the interaction between their applications. As examples device is shown with a display and various user interface devices and device are shown with a display and various user interface devices . A bus such as bus or bus will typically be included in a device.

As used herein the phrase electronic content refers to any text graphics video audio application executable code or other material that can be stored on and or presented on or through a computer or other device. A piece of electronic content can be provided as one or more electronic files and developed as part of a single content creation project. An electronic content creation application may open such electronic content for editing for example such that edits made using the electronic content creation application result in changes to the one or more electronic files that define or otherwise make up the piece of electronic content being created.

As used herein the term item refers to any object component code reference construct representation graphic file element or anything else that is or can be a part of electronic content. An item may comprise features and attributes that define specify influence or affect how the item appears behaviors or is otherwise used in electronic content. An item may have features and attributes that include one or more other items within the item or that otherwise associate the item with one or more other items.

As used herein the phrase arbitrary code refers to any code that is added by a developer to create a new item attribute interactivity or other aspect of electronic content. Electronic content may be created using a framework of standard items attribute interactivity or other aspect e.g. standard buttons standard lists boxes text boxes standard colors etc. that can be included in the electronic content by the content creators. For example a designer may add a standard button to electronic content being developed and adjust its display attributes in the editing interface. Such standard elements are generally defined by standard framework code that is not arbitrary code. A design application may provide editing capabilities for some framework constructs but may not provide editing for all constructs. For example it may not provide for editing of behavior oriented constructs complex imperative code or custom code constructs. The Adobe Flex SDK provides an exemplary framework that provides illustrative standard framework elements. The Adobe Flash Catalyst application is an example of a design application that allows editing of many but not all items that are based on Adobe Flex SDK elements. The Adobe Flash Builder application is an example of a development application that provides for editing of arbitrary code that uses Adobe Flex SDK elements though it may only provide visual editing features for some elements.

As used herein the term application refers to any program instructions or other functional components that execute on a device. An application may reside in the memory of a device that executes the application. As is known to one of skill in the art such applications may be resident in any suitable computer readable medium and execute on any suitable processor. For example as shown the devices each comprise a computer readable medium such as memory coupled to a processor that executes computer executable program instructions and or accesses stored information. Such processors may comprise a microprocessor an ASIC a state machine or other processor and can be any of a number of computer processors. Such processors comprise or may be in communication with a computer readable medium which stores instructions that when executed by the processor cause the processor to perform the steps described herein.

An application is referred to herein as having limited editing capabilities where the item comprises an feature or attribute that the application is not capable of editing. For example as described above a design application may not provide for editing of one or more of behavior oriented constructs complex imperative code or custom code constructs. As another example an application may not provide features for editing an items whose features or attributes where added to or modified by another application and may thus have limited editing capabilities.

A computer readable medium may comprise but is not limited to an electronic optical magnetic or other storage device capable of providing a processor with computer readable instructions. Other examples comprise but are not limited to a floppy disk CD ROM DVD magnetic disk memory chip ROM RAM an ASIC a configured processor optical storage magnetic tape or other magnetic storage flash memory or any other medium from which a computer processor can read instructions. The instructions may comprise processor specific instructions generated by a compiler and or an interpreter from code written in any suitable computer programming language including for example C C C Visual Basic Java Python Perl JavaScript and ActionScript.

Design application is provided on device to provide features for the creation and editing of a copy the electronic content stored on device . Similarly development application is provided on device to provide features for the creation and editing of another copy the electronic content stored on device . The different copies of the electronic content can be passed back and forth between the devices for editing by both the design application and the development application in a collaborative electronic content creation project. The design application and development application have different capabilities and may each include various features to address potential incompatibilities resulting from any such differences in capabilities.

In the design application provides a WYSIWYG interface a compatibility checker and an edit approver . These features are shown for exemplary purposes and these and other features of an application can be provided as modules of such an application. A design application need not include all or any of these features and may include additional or alternative features useful in the editing of the electronic content . The compatibility checker prevents and or restricts the use of electronic content if such content is incompatible or partially incompatible with the features provided by the design application . For example the compatibility checker may only allow the design application to open the electronic content for editing if the electronic content conforms to a set of rules or requirements. The compatibility checker may mark the electronic content as incompatible if for example it uses any coding constructs that the design application does not support. Compatibility rules can be configured to ensure that the design application provides a reliable intuitive and WYSIWYG editing experience for any electronic content that is compatible. In one embodiment the compatibility checker comprises an engine that has one or modules for checking different aspects of a piece of electronic content. For example a first module may be used to analyze one or more files and the associated file structures and another module may be used to check more specific data structures derived from such files such as a parse tree of the file. Such modules may be parameterized such that when instantiated or otherwise used the modules perform compatibility checking according to their parameters. Such parameters may be used to define compatibility criteria. Thus in checking the compatibility of code assets files or other items of electronic content a module of the engine may perform such checking according to parameters provided from for example a separate schema or grammar file. Using such separation may provide various benefits for example allowing a given engine to be used with different schemas. A schema or grammar file can be configured to facilitate compatibility checking. In one embodiment a grammar file comprises declarative statements that parameterize modules of the engine to facilitate compatibility checking. In one embodiment a grammar file comprises recursively defined rules i.e. rules defined in terms of each other that define how content should be checked for compatibility. Rules of such a grammar file can thus be configured like the rules in the grammar used by a conventional recursive decent parser except that rather than defining rules for processing text the grammar file can define rules for processing disparate high level data structures for example a file system tree parse tree asset decoder or other data structures used to process electronic content.

Compatibility checker can be configured to prevent the opening of some of the electronic content in certain circumstances because of incompatibilities but is also configured to allow the opening of electronic content in other circumstances even though the electronic content contains one or more incompatible elements. Thus in certain circumstances the design application can be used to edit the electronic content even though it is only partially compatible. The design application may display and allow editing of such partially compatible electronic content but may impose certain restrictions provide certain notifications and or otherwise control the use of the electronic content . The compatibility checker can ensure that display and or use of incompatible elements facilitates rather then hinders the creation process. The compatibility checker may be able to obtain or infer enough information about the incompatible parts that it can isolate them indicate that they are incompatible parts and allow the user to work around them. For example the compatibility checker can allow the WYSIWYG interface to display approximations of incompatible elements so that a designer can visualize generally how the inclusion of such elements affects the appearance of the electronic content . Certain elements may be displayed with notification or other indicia indicating that such elements are developer created and or that such elements cannot be edited in the design application .

As shown in block of the exemplary method involves receiving electronic content at a first content creation application such as design application of . The electronic content may be retrieved over a network . The electronic content may be retrieved in response to input selecting the electronic content for download. Alternatively the electronic content may be retrieved after being exported by another content creation application such as development application . As yet another alternative the electronic content may simply be received from memory on device .

The method next determines whether to allow the opening of the electronic content as shown in block . Such a determination can involve various considerations. In one exemplary embodiment the electronic content is examined to identify any items that would cause the design application to crash or otherwise malfunction. If the opening of the electronic content is not allowed the method proceeds to block and displays a notification. For example design application may display a notification that reads THIS PROJECT CANNOT BE OPENED BECAUSE IT CONTAINS INCOMPATABLE ITEMS. 

If however opening of the electronic content is allowed the method proceeds to block to determine whether all of the items of the electronic content are displayable in the first content creation application. For example in one exemplary scenario all items are displayable if the electronic content does not include any arbitrary code or other developer added features. If all items are displayable the method proceeds to block to open the electronic content and display the electronic content on an editing interface. The WYSIWYG interface of is an example of such an editing interface. Non WYSIWYG interfaces may alternatively or additionally be used to display the electronic content for editing.

If all items are not displayable in the first content creation application the method proceeds to block to determine representations for items that are not displayable. For example design application may recognize that a developer added item has certain recognizable characteristics such as position and shape. Even though the developer added item may also have functional characteristics such as code defined interactivity of the item that cannot be displayed and or edited by the design application the design application may use the recognizable information that it can obtain or infer about the item to determine one or more graphical representations that can be used to represent the item in the editing interface. Those representations can be used in block to display the electronic content on an editing interface that includes WYSIWYG interface of . Block may not be able to determine graphical representations for some or all of the items that are not displayable. Such items can be omitted from the display of the electronic content .

The canvas area shows items of the electronic content . In the example of the electronic content includes an image a title that presents the text SURVEY and text items that present the text strings MALE and FEMALE respectively. The canvas area also includes representations of items that the design application is not otherwise able to display. In this example each of the representations represents an instance of a developer coded custom checkbox component. A developer may have used development application to create such a component and then include the two instances of the checkbox component in the electronic content .

The arbitrary code defining the characteristics of the custom checkbox component and its two instances may be included in the electronic content that is received and opened by the design application . The design application for example through a compatibility checker may determine that the electronic content is allowed to be opened even though there is arbitrary code in the electronic content . The design application may then identify representations to use for the items that cannot otherwise be displayed and determine positions for those representations. In the example of the design application determines to use square shaped representation to represent the checkbox instances and positions those representations as shown in . The size shape and other display characteristics of the representation can be obtained or inferred by examining the items. For example such items may have declarative statements that define the size shape and position of the component and script based procedural code that defines the interactivity of the items. In such a case the design application may parse the declarative statements and recognize the size shape and position information which can then be used in displaying the representations. Accordingly a design application is able to display a representation for an item even though would not otherwise be able to display the item.

The representations are displayed along with indicators that indicate that those representations are different from other items that are displayed. For example such indications may indicate that those items came from developer provided code and or that such items cannot be edited. Such indications and other notifications and information can be included in the exemplary interface to aid a developer in easily recognizing circumstances in which an item is displayed by a representation in the design application and thus recognize that interaction with and or editing of the item may be limited.

In the exemplary method involves displaying electronic content in an editing interface of a creation application as shown in block . For example electronic content may be displayed in the WYSIWYG interface of design application of . The exemplary method next involves receiving a selection as shown in block . For example a designer may use a mouse or other UI device to position a pointer and then select an item on the WYSIWYG interface . The method next determines whether the selected item is fully editable as shown in block . For example design application may search the electronic content for any code specification or other references to the selected item that do not satisfy certain predefined criteria. As a specific example the design application may identify a reference in a portion of arbitrary code to an item and based on this identification determine that the item is not fully editable. In many scenarios a design application determines that a selected item is not fully editable when all or a portion of it is specified by developer code.

If the selected item is fully editable the method proceeds to display any item edit panels associated with the item as shown in block . provides an illustration of a text item that has been selected as indicated by selection indicator . Upon such a selection the exemplary interface displays the interactivity panel and the properties panel to facilitate editing of that text item .

Returning to if the selected item is not fully editable the method proceeds to block and displays a notification. illustrates the exemplary interface of showing notifications both that certain editing features for a selected item that is not fully editable are not available. In the item that is not fully editable has been selected as indicated by selection indicator shown in its new position in . Upon such a selection the exemplary interface changes to display notifications both indicating that EDITING OF THIS ITEM IS RESTRICTED BECAUSE IT IS CONTROLLED BY DEVELOPER CODE. Limited editing of the item may be allowed. For example the designer may be able to reposition and resize object even though the designer cannot use the interactivity panel or property panel to edit the interactivity or properties of the item respectively.

In an alternative embodiment the design application allows certain attributes of an item to be edited and restricts other attributes from being edited. For example the exemplary interface may allow the properties of item to be edited but prohibit editing of the interactivity of the item .

Returning to the design application also includes an edit approver that can restrict or prevent editing of incompatible elements in the electronic content . In many circumstances the edit approver will prevent any editing of incompatible parts since such edits may have effects may not be intended. The edit approver can execute upon each attempted edit made by a designer to determine whether the potential edit is allowed or prohibited. That determination can be based on one or more rules that attempt to infer whether a given edit will result in a problem. For example deleting an item may be allowed in a circumstance in which there are no references to the item elsewhere in the electronic content but prohibited in the circumstance in which a piece of developer code in the electronic content contains a reference to the to be deleted item.

In the exemplary method involves displaying electronic content in an editing interface of a creation application as shown in block . For example electronic content may be displayed in the WYSIWYG interface of design application of . The exemplary method next involves receiving an edit as shown in block . For example a designer may use a mouse or other UI device to position a pointer and then select an item on the WYSIWYG interface and then press the delete key in an attempt to delete the item.

The method next determines whether the edit will affect any item that is not fully editable as shown in block . For example design application may search the electronic content for any items affected by the edit to determine if any such items are not fully editable by further searching for any code specification or other references to any such items that do not satisfy certain predefined criteria. If the edit does not affect any items that are not fully editable the method proceeds to allow the edit as shown in block . However for each item that is not fully editable that is affected by the edit the method proceeds to determine if the effect is acceptable. This may involve analyzing any code specification or other references to any such items to determine whether certain predefined criteria are satisfied. If the effect is acceptable the method proceeds to allow the edit in block . If not the method proceeds to block to prohibit the edit and display a notification.

As a specific example a developer may have provided the following exemplary arbitrary code related to a databinding for a checkbox item.

The above expression is only valid if a checkbox exists if the checkbox is an item that has a selected property whose type is Boolean. The design application can ensure that any change to a checkbox does not invalidate that expression. If a designer attempts to delete a checkbox item the design application may determine an identifier of the checkbox item and search for any references to that identifier and ultimately identify the above expression. The design application may determine that allowing the delete would result in this checkbox expression no longer working and accordingly prohibit the deletion of the checkbox item. Alternatively the design application may simply determine that the data binding expression which may only be associated with the to be deleted item can itself also be deleted. A design application may apply rules to determine whether to allow an edit or not. For example such rules may specify that in circumstances in which arbitrary developer code is related to an item that is to be edited the design application will prohibit the edit. As another example the design. application may apply a rule that prohibits an edit in circumstances in which arbitrary code associated with a to be edited item cannot be itself be deleted because for example it is used by other items.

Whether developer code is fully editable or not can be determined in various ways. The syntax of developer code can be used in such determinations. For example a developer may provide code that defines that when a button is clicked several items will slide across the displayed electronic content. The developer may have done so by declaring an animation with a name by stating myanimation.play and then providing imperative code that specifies the animation specifics. The design application may not be capable of otherwise using this syntax and code but may be able to make certain inferences from it. For example the design application may determine from the syntax that this code is invoking a method on some object. It may be able to inspect to the code to determine the type of the object on which the method is being invoked. It may further be able to determine or categorize what is being done with the object i.e. determine that it is some sort of animation.

The design application may use this information in determining whether it can display and or allow editing of the item. In this example the design application may assume that it can manipulate this code because it knows so much about it. The design application may use the information it determines to provide information to a designer. For example it may show a message indicating that a click on this button will play an animation that slides certain other items across the displayed electronic content. In addition the design application may use this information to determine relationships between pieces of code. For example the design application may determine that deleting the button will have an effect on the items that are animated i.e. the items that are going to slide across the displayed electronic content . However the design application can determine that such a deletion can be allowed on the assumption that if the designer does not want the button then the items are not longer wanted either. Thus in response to deleting the button the design application may delete the animation as well. If however the developer had added code to the button code that specified accessing a data server before the animation the design application may determine that deletion of the button affects code that is not fully editable and prevent the deletion.

Certain embodiments disclosed herein are useful in addressing incompatibilities that result between content creation application used with electronic content that includes at least some content specified in an open ended format that allows a developer to add arbitrary code that may not be editable by a particular content creation application. Such code may be declarative or imperative. For example a developer may have written imperative code to define interactivity in electronic content . The design application receiving such electronic content may recognize that it contains code relating to interactivity and that such code is arbitrary such that it cannot be edited by the design application . As another example electronic content may include a file that cannot be opened or accessed by the design application because the file is created in a format that allows the inclusion of arbitrary code. The design application can recognize the existence of such arbitrary code and prevent opening of the electronic content or allow restricted editing of the electronic content as may be appropriate depending on the particular nature of the arbitrary code. In many circumstances the design application is able to analyze arbitrary code to break it down into component pieces and then apply a set of rules to determine whether certain conditions are met such that the electronic content can be displayed and if so which items and item characteristics of the electronic content should be editable by the design application .

In applying such rules the design application may apply different criteria to different types of code. For example if the electronic content includes developer code in both a declarative format and an imperative format the design application may apply more stringent compatibility criteria to the imperative formatted code since such code may be harder to interpret. In contrast since the declarative format code may conform to certain simple declarative rules known to the design application it may apply less stringent criteria. For example if a piece of declarative code includes a tag that is not editable by the design application but that is included as defining an attribute of a known component the design application may determine whether to allow an edit affecting that component based on the type of the attribute. For example the design application may allow the edit based on whether the arbitrarily coded attribute is a behavioral attribute e.g. specifying that a button can have either a normal or repeat click mode or a non behavioral attribute such as one defining an item s color. The design application may have a listing of all of the known properties of all standard items i.e. those that are not developer coded custom items that are used in the declarative language associated with the electronic content creation framework. The listing may identify whether the attribute is behavioral non behavioral or otherwise specify criteria that the design application can use to determine whether to display an item that is not fully displayable and or editable how to display such an item and how such item can be edited in the design application .

In the particular example of however a databinding has already been created for the listbox type item and included in the electronic content . As a result the design interface displays the message in the design time data panel stating that EDITING OF THIS LIST IS RESTRICTED BECAUSE IT IS CONTROLLED BY DEVELOPER CODE. Such a message and the associated restriction on editing may be appropriate for example in the circumstance in which a developer has associated a databinding with the listbox type item so that the designer is prevented from making an edit to design time data that could have a negative effect on the developer coded databinding. The designer may however be permitted to reposition and resize the listbox type item or change other characteristics of the listbox type item in the design application .

Alternatively rather then generating the dummy data the design application may use the information known about the schema to provide an interface that allows the designer to select appropriate dummy data from for example drop down selection tools. In the above example a string selection tool may be provided to accept one or more strings to use as dummy data and an image selection tool may be provided to select one or more images to use as dummy data in the appropriate portions of the listbox type item displayed in design application as may be appropriate based on the inferences drawn about the schema that is associated through the data binding.

Electronic content can include code that specifies use of items in the content and the appearance of such items separately. For example declarative language may be used to identify that a button is included in the electronic content. That declarative language may include a tag that identifies that a separate skin file specifies the appearance of the button. That skin file in this example can also be declarative and may have a root tag skin and other appearance defining tags for examples specifying that the button includes a rectangle or particular text. Many button items can reference a single skin file to define their respective appearances. A design application can provide a mechanism for editing the skin file attributes. For example if several buttons are associated with a particular skin a designer can select an isolation or skin editing mode to edit the skin associated with those items. In such a mode the design application may visually change the WYSIWYG interface so that one of the buttons is shown as editable and the rest of the content is grayed. This appearance indicates to the designer that the design application is in its skin editing mode. The designer can then change the displayed button and the design application will apply those changes to skin file that defines the appearance of multiple buttons in the electronic content thereby affecting the appearance of all of those buttons.

One embodiment of a compatibility checker analyzes such a skin file to determine whether it includes any items such as a datagrid of which the design application does not allow editing or use. If such items are found the design application may mark the file as an incompatible file and prevent opening of the file in the design application and thus prevent any edits that would affect the contents of that file. The designer is then still able to open the electronic content in the design application but can not select the associated skin for editing in skin editing mode. The design application may still display an approximation of the buttons based on analysis of the skin. Upon selection or attempted entry into skin editing mode the design application may provide a notification that indicates that it is a developer component.

Returning again to the development application on device includes a code editing interface and a compatibility checker . These features are shown for exemplary purposes. A development application need not include all or any of these features and may include additional or alternative features useful in the editing of the electronic content . The development application may provide features supporting many or all of the items supported by the design application for example allowing developer editing of visual objects such as buttons scrollbars and checkboxes states transitions animations between states and visual object properties. The development application may provide additional features for editing data bindings which as discussed previously are associations defined such that a value of a property tracks an expression that may change over time. An example of a databinding is a text field defined to be customer.first name where the databinding defines that the first name changes if the customer object changes.

The compatibility checker of the development application can be invoked to give a developer an early indication of whether the code has been added by the developer is compatible with the design application . For example the compatibility checker may provide warnings or errors when a developer attempts to compile the electronic content in circumstances in which the electronic content is of a type that is compiled export the electronic content or at any other appropriate occurrence during use of the development application .

Numerous specific details are set forth herein to provide a thorough understanding of the claimed subject matter. However those skilled in the art will understand that the claimed subject matter may be practiced without these specific details. In other instances methods apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.

Some portions are presented in terms of algorithms or symbolic representations of operations on data bits or binary digital signals stored within a computing system memory such as a computer memory. These algorithmic descriptions or representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. An algorithm is a self consistent sequence of operations or similar processing leading to a desired result. In this context operations or processing involve physical manipulation of physical quantities. Typically although not necessarily such quantities may take the form of electrical or magnetic signals capable of being stored transferred combined compared or otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to such signals as bits data values elements symbols characters terms numbers numerals or the like. It should be understood however that all of these and similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise it is appreciated that throughout this specification discussions utilizing terms such as processing computing calculating determining and identifying or the like refer to actions or processes of a computing device such as one or more computers or a similar electronic computing device or devices that manipulate or transform data represented as physical electronic or magnetic quantities within memories registers or other information storage devices transmission devices or display devices of the computing platform.

The system or systems discussed herein are not limited to any particular hardware architecture or configuration. A computing device can include any suitable arrangement of components that provide a result conditioned on one or more inputs. Suitable computing devices include multipurpose microprocessor based computer systems accessing stored software that programs or configures the computing system from a general purpose computing apparatus to a specialized computing apparatus implementing one or more embodiments of the present subject matter. Any suitable programming scripting or other type of language or combinations of languages may be used to implement the teachings contained herein in software to be used in programming or configuring a computing device.

Embodiments of the methods disclosed herein may be performed in the operation of such computing devices. The order of the blocks presented in the examples above can be varied for example blocks can be re ordered combined and or broken into sub blocks. Certain blocks or processes can be performed in parallel.

The use of adapted to or configured to herein is meant as open and inclusive language that does not foreclose devices adapted to or configured to perform additional tasks or steps. Additionally the use of based on is meant to be open and inclusive in that a process step calculation or other action based on one or more recited conditions or values may in practice be based on additional conditions or values beyond those recited. Headings lists and numbering included herein are for ease of explanation only and are not meant to be limiting.

While the present subject matter has been described in detail with respect to specific embodiments thereof it will be appreciated that those skilled in the art upon attaining an understanding of the foregoing may readily produce alterations to variations of and equivalents to such embodiments. Accordingly it should be understood that the present disclosure has been presented for purposes of example rather than limitation and does not preclude inclusion of such modifications variations and or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art.

