---

title: Cancelling digital signatures for form files
abstract: The embodiments described herein generally relate to methods and systems for enabling a client to request a server to cancel the digital signing of a form file associated with a form. Successful cancellation of the digital signing process results in a return of the form file to its initial state, in which data are not lost, and the form can be resubmitted and/or the application of the digital signature can be retried. Request and response messages, communicated between a protocol client and a protocol server, cause the performance of protocol functions for applying a digital signature to a form file and for cancelling the signature thereof where errors in the signing process are detected. A versioning mechanism enabling the detection of version differences and resulting upgrades to the digital signature control allows for robust communications between a client and a server operating under different product versions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745748&OS=08745748&RS=08745748
owner: Microsoft Corporation
number: 08745748
owner_city: Redmond
owner_country: US
publication_date: 20101015
---
A portion of the disclosure of this patent document may contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice shall apply to this document Copyright.COPYRGT. 2010 Microsoft Corp.

The use of the Internet for the access and completion of electronic forms such as Web browser forms has become increasingly prevalent and useful. For example forms are used both to support business processes internal to companies and to provide an easy way for users of the Internet to provide information to another entity for completion of a desired transaction. In completing forms for financial transactions software distribution and any forms requiring confidential and or secure information and data for example it is common to use a digital signature to authenticate the form. Digital signatures are electronic security marks that allow for verification of the source of the particular file and verification that the file has not been tampered with since it was digitally signed. Digital signatures thus provide assurances including authenticity of the signer of the digital information integrity of the content i.e. the content of the document has not been modified since the digital signature was applied and the ability to prove the origin of the signed content to prevent denial of association with the signed content by the signing party.

While there are numerous benefits associated with applying a digital signature to a form file of a form in which a form file such as an XML file contains data entered into a form problems can occur in the process of applying a digital signature to a form file. Such problems can cause failure of the signing process and or corruption of the form file of a form for example.

In applying a digital signature to a form file form applications running on a client and a server may be used. However it may be difficult if not impossible to apply a digital signature to a form file where the version of the form application running on the client is different from the version of the form application used by the server. Such problem is exacerbated by the numerous versions and version upgrades of form applications available on the market and the multiple actors involved in determining whether to purchase and or apply such version upgrades on the client versus server ends.

Although specific problems have been addressed in this Background this disclosure is not intended in any way to be limited to solving those specific problems.

Embodiments generally relate to enabling a client to request to cancel the application of a digital signature to a form file such as an XML file associated with a form. Cancelling the application of a digital signature avoids the corruption of the form file for example which can occur when the signing process fails. In embodiments a client requests to apply a digital signature to a form file. The form file in embodiments is stored on a server. During the signing session errors may occur. Instead of having such errors cause the form file to enter a corrupted state in which data entered into the form associated with the form file are lost embodiments of the present disclosure provide for cancellation of the application of the application of the digital signature to the form file. With a successful cancellation of the digital signature the form file is returned to its initial state and data used to populate the form such as data entered by a user is not lost. In such embodiments a user is able to retry applying a digital signature to the form file or simply resubmitting the form in other embodiments without having to reenter the data. The ability to cancel the application of the digital signature to prevent the loss of data when errors occur thus results in savings of time and the promotion of accuracy given that a user for example will not need to try to remember the data previously entered into the form fields for the reentry thereof.

Embodiments of the present disclosure provide for the digital signing of a form file to occur through the interactions of a protocol client and a protocol server. An example protocol client according to embodiments uses MICROSOFT SHAREPOINT DIGITAL SIGNATURE CONTROL FOR FORMS SERVICES produced by MICROSOFT CORPORATION of Redmond Wash. Further an example protocol server according to embodiments is provided by MICROSOFT INFOPATH FORMS SERVICES produced by MICROSOFT CORPORATION of Redmond Wash. The form in embodiments may thus be an InfoPath form provided by MICROSOFT INFOPATH FORMS SERVICES. Request and response messages are transmitted between the protocol client and protocol server to apply a digital signature to a form file and to cancel the digital signature in situations where error codes are received by the protocol client from the protocol server for example.

Further embodiments provide for the ability of a protocol client to compensate for differences in product versions such as when a protocol client operates with a product version that is different from the version used by the protocol server with which the protocol client is in communication. For example an embodiment provides for a protocol client using MICROSOFT SHAREPOINT DIGITAL SIGNATURE CONTROL FOR FORMS SERVICES 2010 to make any necessary changes to communicate with a protocol server operating with MICROSOFT INFOPATH FORMS SERVICES 2007. In embodiments for example a protocol client operating under MICROSOFT SHAREPOINT DIGITAL SIGNATURE CONTROL FOR FORMS SERVICES 2010 can effectuate digital signing for a form file stored by a protocol server operating under MICROSOFT INFOPATH FORMS SERVICES 2007. In other example embodiments a protocol client operating under MICROSOFT SHAREPOINT DIGITAL SIGNATURE CONTROL FOR FORMS SERVICES 2007 can effectuate digital signing for a form file stored by a protocol server operating under MICROSOFT INFOPATH FORMS SERVICES 2010. Such versioning capabilities thus result in a robust mechanism for upgrading the digital signature control for example. MICROSOFT INFOPATH FORMS SERVICES and MICROSOFT SHAREPOINT DIGITAL SIGNATURE CONTROL FOR FORMS SERVICES and the above mentioned product versions are offered by way of example only to illustrate the versioning capabilities of embodiments disclosed herein.

This Summary is provided to introduce a selection of concepts in a simplified form that is further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used in any way as to limit the scope of the claimed subject matter.

This disclosure will now more fully describe example embodiments with reference to the accompanying drawings in which specific embodiments are shown. Other aspects may however be embodied in many different forms and the inclusion of specific embodiments in this disclosure should not be construed as limiting such aspects to the embodiments set forth herein. Rather the embodiments depicted in the drawings are included to provide a disclosure that is thorough and complete and which fully conveys the intended scope to those skilled in the art. Dashed lines may be used to show optional components or operations.

Embodiments generally relate to enabling a client to request to cancel a digital signing process of a form file. Such form file may be associated with a form or form template according to embodiments and is stored on a protocol server. According to an embodiment the protocol server is provided by MICROSOFT INFOPATH FORMS SERVICES produced by MICROSOFT CORPORATION of Redmond Wash. for example.

To initiate a digital signing process of a form file associated with a form a protocol client sends a message to the protocol server to initiate the application of a digital signature to the applicable form file. In an embodiment the protocol client and protocol server communicate over a Hypertext Transfer Protocol HTTP connection. The protocol server maintains a mapping between client data and the associated form file stored on the protocol server according to embodiments. In embodiments this mapping is stored as part of an Event Log or EventLog in which the EventLog comprises protocol server specific information specified by a string of values separated by semicolons. The EventLog in embodiments comprises a header entry and state as discussed further below. The request by a protocol client to initiate the creation and addition of a digital signature to a form file maintained by a protocol server comprises local information including a rendered image of the form file and operating system information to be embedded in the signed form file. The request in embodiments includes an EventLog in addition to other specific elements. In an embodiment this request to initiate the application of a digital signature is referred to as a Retrieve Form File Hash request. In response the protocol server sends an HTTP response to the protocol client comprising a digest of the local information and other data stored in the form file. In embodiments this response is referred to as a Retrieve Form File Hash response.

Next the protocol client generates encrypted ciphertext of a digest value received from the protocol server. The ciphertext value and certificate used to encrypt it are sent to the protocol server and stored in the form file as value and context respectively of the digital signature. In embodiments the message sending the ciphertext value and certificate is referred to as an Add Signature Value and Context message. This message comprises an EventLog in addition to other specific elements according to embodiments. The digital signature process is complete when the protocol server is successful in processing this request from the protocol client.

During this signing session the protocol server thus modifies an applicable form file using data sent by the protocol client. In embodiments the form file transitions between three different states during the signing session. These three states include 1 Initial State the state of the form file before the start of a signing session 2 Pre Signed State the state of the form file after successfully processing a Retrieve Form File Hash message and 3 Signed Complete State the state of the form file after successfully processing an Add Signature Value and Context message. In embodiments the Signed Complete State is equivalent to the Initial State. According to embodiments the digital signature applied during the signing session conforms to a property structure defined for such signature. For example a digital signature property structure is described in the InfoPath Form File Format Specification MS IPFFX by MICROSOFT CORPORATION of Redmond Wash. The InfoPath Form File Format Specification is hereby incorporated by reference in its entirety for all that it teaches and discloses. The file format for InfoPath form templates is described in the InfoPath Form Template Format Specification MS IPFF by MICROSOFT CORPORATION for example. The InfoPath Form Template Format Specification is hereby incorporated by reference in its entirety for all that it teaches and discloses. The file format for InfoPath form templates is described in the InfoPath Form Template Format Version 2 Specification MS IPFF2 by MICROSOFT CORPORATION for example. The InfoPath Form Template Format Version 2 Specification is hereby incorporated by reference in its entirety for all that it teaches and discloses.

In embodiments where errors are detected in the digital signing process the client sends a request such as an HTTP request to the protocol server to cancel the signing process. In embodiments this cancel request comprises an EventLog to provide information to the server specifying protocol server specific information for acting on the request. To provide such information EventLog parsing occurs in which the client extracts data and from the extracted data identifies data with a certain structure to send with the request to cancel a digital signature for example. With the cancel digital signature function the protocol server is thus notified that the signing process has been cancelled and is provided with specific information for acting on the request from the protocol client. After a successful cancellation process the form file is returned to the Initial State. By returning the form file to its Initial State the fields of the associated form for example remain populated with data previously entered. The form is thus prevented from entering a corrupt state with loss of data and instead may be resubmitted and or retried for application of the digital signature and submission.

In accordance with embodiments digital signing and cancelling of the digital signature is enabled by providing application programming interfaces APIs on the protocol client and the protocol server hosting the form application. The APIs process request messages and response messages such as messages for Retrieve Form File Hash Add Signature Value and Context and Cancel Digital Signature. In embodiments the APIs process request messages to put such messages in the proper format structure and syntax for calling the functionality of the application. Such format structure and syntax are governed by a protocol such as specified in the InfoPath Digital Signing Protocol Specification MS IPDSP provided by MICROSOFT CORPORATION of Redmond Wash. according to embodiments disclosed herein. Specific methods and message processing events are thus defined in accordance with the InfoPath Digital Signing Protocol for example for conducting a signing session cancelling a digital signature process and or otherwise generally handling communications between a protocol client and a protocol server. The InfoPath Digital Signing Protocol is offered for example purposes as a type of protocol to be used in accordance with embodiments disclosed herein. The InfoPath Digital Signing Protocol Specification is hereby incorporated by reference in its entirety for all that it teaches and discloses.

Further embodiments provide for a versioning mechanism to allow for communications between a protocol client and protocol server operating under different product versions. A protocol client receives an indication from the protocol server of the version of the form application being used by the protocol server. The protocol client then compares the received version indication to the version implemented by the protocol client. If there is a difference in versions the protocol client makes adjustments to its message requests syntax structure etc. to compensate for any such differences according to embodiments. Multiple versions of the protocol server are thus enabled to interoperate with the latest version of the protocol client. Consequently the latest or most recent protocol client version can apply a digital signature to a document stored on previous version releases of the protocol server. Such versioning mechanism provides for robust communications and compatibility between protocol clients and protocol servers regardless of product versions used.

An example logical environment or system for applying and or cancelling the application of a digital signature to a form file stored on a protocol server is shown in logical environment of in accordance with embodiments disclosed herein. A client computer or protocol client renders data of an electronic document such as a form or file template hereinafter form according to embodiments for receipt of data entered by user . While user thus provides data according to an embodiment disclosed herein it is to be understood that user refers to multiple users in other embodiments. For example users can sign other users data. User may thus refer to a user providing data a user signing the data and or any user involved in the form lifecycle according to embodiments of the present disclosure. In yet further embodiments no user is directly involved but instead client computer receives data from another client computer and or server for example.

The form is rendered using view information with a Web browser in accordance with embodiments. In other embodiments the form is rendered with a naked network browser such as a browser with no plug ins ActiveX controls etc. Any type of browser or client computer allowing the running of a protocol client implementation as known to those of ordinary skill in the art can be used in accordance with embodiments disclosed herein. The form is received over network from server or protocol server in response to a request for such form from client computer . In embodiments any number of servers and can be used as shown by ellipses . In turn server retrieves the requested form file associated with the form from database over network .

Logical environment is not limited to any particular implementation and instead embodies any computing environment upon which the functionality of the environment described herein may be practiced. Further networks and although shown as individual single networks may be any types of networks conventionally understood by those of ordinary skill in the art. In accordance with an example embodiment the network may be the global network e.g. the Internet or World Wide Web i.e. Web for short . It may also be a local area network e.g. intranet or a wide area network. In accordance with embodiments communications over networks and occur according to one or more standard packet based formats e.g. H.323 IP Ethernet and or ATM.

Further any type of environment or system can be used in accordance with embodiments of the present disclosure. is offered as an example only for purposes of understanding the teachings of the embodiments disclosed herein. For example shows servers and . However embodiments also cover any type of server separate servers server farm or other message server. Further yet shows client computer . However any type of small computer device can be used without departing from the spirit and scope of the embodiments disclosed herein. Indeed environment or system represents a valid way of practicing embodiments disclosed herein but is in no way intended to limit the scope of the present disclosure. Further the example network environment may be considered in terms of the specific components described e.g. protocol server protocol client etc. or alternatively may be considered in terms of the analogous modules corresponding to such units.

Although only one client computer is shown for example another embodiment provides for multiple small computer devices to communicate with server . In an embodiment each small computer device communicates with the network or in other embodiments multiple and separate networks communicate with the small computer devices. In yet another embodiment each small computer device communicates with a separate network.

While shows example environment or system for applying and or cancelling the application of a digital signature to a form file illustrates an example user interface UI of a form as retrieved in the logical representation of the environment or system of for example with controls and spaces used for entering and displaying information submitting data and electronically signing data in accordance with embodiments of the present disclosure. Such data may be entered for example through the use of a Web browser or through a client application such as MICROSOFT SHAREPOINT DIGITAL SIGNATURE CONTROL FOR FORMS SERVICES. Other types of browsers or applications may be used for entering data or otherwise modifying a form such as user interface . User interface of a form is displayed on the user interface of client computer for example. While a single user interface is shown in multiple user interfaces can be used in accordance with embodiments disclosed herein. User interface displays example URL address www.companyA.library.form supplies showing the retrieval of form from a library of forms located in database for example and retrieved over network at companyA for example. Order Supplies title indicates that form is a form for ordering supplies. User for example is then able to order particular supplies by entering data into form and selecting from available choices. For example user is prompted as to What Supplies Would You Like to Order with radio buttons designating possible selections of Paper Pens Folders etc. Other supply selections may also be available not shown as indicated by the ability to use scroll or toggle bar to move up down to reveal more information in the display. Having selected Paper and Pens these selections appear at Paper and Pens with the ability to Please Enter the Quantities You Would Like from Above . In this example form user has selected 1000 2000 sheets of paper and 301 500 units of pens . Next user is prompted to enter delivery and billing address instructions including the desired address in text box of form . Finally user may click on the Submit Form button and or click on the Sign Form button to request that a digital signature be applied to the form file associated with form according to embodiments. User interface is offered for purposes of illustration only. Any type of user interfaces can be used in accordance with embodiments disclosed herein. Further the specific buttons radio controls text entry boxes text selection indicators etc. are offered by way of example only for purposes of illustration. Any type arrangement and content of buttons radio controls text entry boxes text selection indicators and or other form features and functions may be used in accordance with embodiments disclosed herein. Further while user interface shows an indicator of Local intranet as consistent with the Order of Supplies from CompanyA in the example depicted other embodiments provide for the use of any network such as the Internet including the World Wide Web WWW or Web for example.

While a user may select to apply a digital signature to a form file as shown in the user interface of illustrates an example conceptual representation or model of three states of a form file during a signing session of the form file for an associated form in accordance with embodiments disclosed herein. A protocol server receives or accepts a request from a protocol client to create and add a digital signature to a particular form file stored or maintained by the protocol server. The multi step process involved in this process of applying a digital signature is referred to as a signing session. The signing session contains calls for the protocol server to modify a form file using data sent by the protocol client. The calls are made by a software component for example. The protocol server maintains a mapping between the client data and the form file stored on the protocol server. Such mapping is stored as part of the EventLog according to embodiments. During a signing session a form file may possess three different states in accordance with an embodiment disclosed. For example as shown in conceptual representation or model depicts an Initial State representing the state of the form file before the start of a signing session. As shown in Initial State comprises some data such as the data entered in the form by a user for example and in some embodiments metadata related to the form file template and processing thereof. From Initial State the form file moves to Pre Signed State in which this state represents the state of the form file after the protocol server successfully processes a Retrieve Form File Hash message sent by the protocol client. Pre Signed State comprises partial signature information and some data such as the data entered in the form by a user metadata etc. according to embodiments. Following the Pre Signed State the form file transitions to Signed Complete State representing the state of the form file after the successful processing of an Add Signature Value and Context message by the protocol server. Signed Complete State comprises signed data. In embodiments the Signed Complete State is equivalent to the Initial State. According to some embodiments only specific sections of the form file are signed. These sections may be specified by the user or in other embodiments the form file itself dictates those sections to which a digital signature applies. In further embodiments all sections of a form are considered as signed at the Signed Complete State . Conceptual representation or model is offered for purposes of illustration only in which other names may refer to the various states of the form file during a signing session. The specific names used in model to refer to the various states of the form file are offered for example purposes only.

While depicts three example different states of a form file during a signing session illustrates conceptual representation or model of example states of a form file during a digital signature cancellation process. Assuming that an error in the digital signing session occurs during the Pre Signed State a request is received from the protocol client to cancel the digital signature process. If this cancellation is successful the protocol server restores the form file from the Pre Signed State to the Initial State . With the form file returned to the Initial State a client is then able to resubmit the form or retry the application of a digital signature to the form without having to reenter the data populating the fields and entry boxes of the form. Conceptual representation or model is offered for purposes of illustration only in which other names may refer to the various states of the form file during a signing session. The specific names used in model to refer to the various states of the form file are offered for example purposes only.

Turning to this figure depicts the operational steps for applying a digital signature to a form file in accordance with embodiments of the present disclosure. For purposes of illustration shows operations on the protocol server end. START operation is initiated and process proceeds to receive by the protocol server a request for a form . Protocol server then sends the form to client . As shown at steps and such form is sent to the protocol client in response to a request for such form by the protocol client. In embodiments such request is made by entering by a user for example the URL address of the form browsing through a library of forms for example or otherwise indicating request and identification of the particular form desired. After entering data and populating the fields of the form for example the client or user selects in embodiments to digitally sign the form. Consequently the protocol client sends a request to initiate the signing process such as with a request for Retrieve Form File Hash. The protocol server thus receives the request for Retrieve Form File Hash in embodiments. To process this request for Retrieve Form File Hash the protocol server determines whether the form file identified by the protocol client message is in the Initial State. If the form file is not in the Initial State process proceeds NO to error code in which the protocol server stops processing the request and returns an error code indicating the presence of the error. In embodiments an error code other than 1 indicates an error causing the failure of the process. If the form file is in the Initial State process proceeds YES to query for determining by the protocol server whether an error has occurred while processing the request. In embodiments step occurs simultaneously with step for determining whether the form file is in the Initial State. In other embodiments steps and are separate as indicated in process . In yet other embodiments these steps are rearranged such that step occurs before step . If an error occurs while processing the request process proceeds YES to return form file to Initial State in which the state of the form file is returned to the Initial State by the protocol server. If no error occurs in processing the request process proceeds NO to add signature element to form file in which the protocol server adds a signature element to the form file identified by the protocol client message.

Process next continues through off page connector A to populate digital signature properties operation depicted in in which the protocol client uses the protocol message data to populate the digital signature properties as specified in the Microsoft InfoPath Form File Format Specification for example. Next the protocol server determines the digest value associated with the form file by applying processing rules for such form file. Query next determines whether operations and for example are successfully completed. If the operations are not successful process proceeds NO to error code in which an error code indicating failure of the signing process is indicated. If query operation determines that the operations are successful process proceeds YES to move the state of the form file to the Pre Signed State . The protocol server also sends a Retrieve Form File Hash response in which such response includes in embodiments an ErrorCode ResponseData and PageStateData. The ErrorCode may indicate failure or success of the request through the use of a value indicating such. Where the process is successful ResponseData in turn represents the digest value associated with the form file. The ResponseData is empty if the ErrorCode indicates a failure. In embodiments the PageStateData comprises a set of properties of protocol server implementation specific data where the protocol server maintains such properties. If the protocol server does not maintain such properties the value for PageStateData is empty.

Next process continues through off page connector B to receive request for Add Signature Value and Context message depicted in in which the protocol server receives such message request from the protocol client. To process this request the protocol server determines whether the form file identified in the Add Signature Value and Context message from the protocol client is in the Pre Signed State . If the form file is not in the Pre Signed State process proceeds NO to error code operation in which the protocol server ceases processing the request and returns an ErrorCode indicating failure of the process. In an embodiment for example the ErrorCode returns a value other than 1 to indicate failure. If the form file is in the Pre Signed State process next proceeds YES to query for determining whether an error has occurred while processing the request. If an error occurs process proceeds YES to error code operation in which the protocol server stops processing the request and returns an ErrorCode with a value other than 1 for example to indicate failure of the process. In embodiments step occurs simultaneously with step for determining whether the form file is in the Pre Signed State. In other embodiments steps and are separate as indicated in process . In yet other embodiments these steps are rearranged such that step occurs before step for example. If no error occurs while processing the request process next proceeds to query for verifying whether the State entry of the EventLog in the client message is different from the PageStateData sent in the Retrieve Form File Hash response. If differences exist process proceeds YES to error code operation in which the protocol server ceases the processing of the request and returns an error code with a value indicating failure such as for example a value of 1 in embodiments.

Where there are no differences process proceeds NO through off page connector C to query operation for determining whether the value of the DataDefinition in the protocol client request message matches the value received in the request for Retrieve Form File Hash as depicted in in accordance with embodiments. If the values for the DataDefinition property are not identical between the messages process proceeds NO to error code operation in which the protocol server returns an ErrorCode indicating a signing error. If the values for the DataDefinition property match process proceeds YES to update the SignatureValue element operation in which the SignatureValue element is updated as consistent with the request from the protocol client. Process next proceeds to query to determine whether operations and for example are successfully completed in which process proceeds NO to error code operation if success is not determined and an ErrorCode indicating such failure is returned in response to the protocol client from the protocol server. If the operations are successful process proceeds YES to move the form file to Signed Complete State operation in which the protocol server moves the state of the form file to the Signed Complete State. The protocol server also sends an Add Signature Value and Context response to the protocol client in which such response comprises an ErrorCode indicating success or failure of the process ResponseData and PageStateData. In an embodiment the ResponseData comprises an empty string and the PageStateData comprises a set of properties of protocol server implementation specific data where the protocol server maintains such properties. If the protocol server does not maintain such properties the value for PageStateData returned is empty in accordance with embodiments. Process then terminates at END operation .

While depict a process for applying a digital signature to a form file illustrates the operational characteristics of a process for detecting whether to request to cancel the application of a digital signature to a form file for the form depicted in for example in accordance with embodiments of the present disclosure. START operation is initiated and process proceeds to request form operation in which a protocol client requests a form or other document from a server such as a protocol server storing form files. In embodiments a user indicates the form desired based on browsing through a library of forms entering a form s URL access address etc. After requesting the form from the server the client receives the form which is displayed to a user for example. The client next receives information and or data for populating the form fields or groups for example such as through data received from an input device acted upon by a user in viewing the form rendered by a user interface module at the client computer. In embodiments the client also receives an indication such as from a user to apply a digital signature to the form . In response to such indication the client sends a message request to the server to initiate the signing process. In embodiments such request is a Retrieve Form File Hash request for initiating the signing process. After the server processes such request the client receives a response such as a Retrieve Form File Hash response in embodiments.

Process next continues through off page connector A to query operation for determining whether an error indicating failure is received in the response message as depicted in in accordance with embodiments disclosed herein. If an error indicating failure such as an ErrorCode with a value other than 1 in embodiments is received process proceeds YES to request to cancel digital signature operation . The client thus sends a request message to the server to cancel application of the digital signature to the form file. After processing the request to cancel digital signature the server sends a response message to the client indicating whether the processing of the request was successful. The client receives this response to the request to cancel . Next the client determines if the form file has been returned to its Initial State . If the form file has been returned to its Initial State process proceeds YES to display the populated form in which any data previously entered in the form is maintained. Process then terminates at END operation .

Returning to step if no error is indicated in the response message from the server process proceeds NO to request to Add Signature Value Context in which the client proceeds with the signing process by requesting that the Signature Value and Context be added for the digital signature. The client receives a response to the Add Signature Value Context request and determines whether an error indicating failure of the process is indicated in the response . If no error is detected process proceeds NO to the storing of the form on the server with the completed signature e.g. Signed Complete State. Process then terminates at END operation . On the other hand if an error is indicated in the response to Add Signature Value Context process proceeds YES to request to cancel digital signature and steps through then occur as described above in which process terminates at END operation .

While illustrate the operational characteristics for detecting whether to request to cancel the application of a digital signature to a form file depicts an example user interface UI of a form such as the form depicted in for example showing an error message received for a failed signing process of the form file in accordance with embodiments of the present disclosure. As shown in features and similar to features display various example fields data entry boxes text selectors etc. for completing a form. In response to selecting or clicking the button to Sign Form and if an error occurs in the processing of the signing request an error message is displayed. In embodiments the error message indicates that the user may elect to retry the signing and or submitting of the form. In other embodiments only an error message is displayed with no indication to Try Again . In yet another embodiment no error message is displayed. The error message shown in is offered as an example embodiment. In another embodiment where there is an error during the signing process a JavaScript dialog is presented in which the JavaScript dialog states that an error has occurred and the user should retry signing. In a further embodiment where there is an error with the EventLog for example an error dialog showing a security mismatch error message is displayed. In an example implementation an INFOPATH FORM SERVICES error dialog is displayed. In yet a further embodiment where there is a problem with a certificate being transmitted an error message rendered in the ActiveX dialog is displayed for example.

According to embodiments the error message is displayed after the client has received an indication of an error from the server in processing the signing request and after the signing process is successfully cancelled in response to a request from the client for the same. If the signing process is successfully cancelled the form file is returned to the Initial State in which the data selected and entered in user interface form is not lost and can be displayed to the user at the client computer. In other embodiments the error message is displayed during the signing process when an error is detected and before the sending of a request message to cancel the digital signature. In yet other embodiments the error message is displayed after the sending of a request to cancel the digital signature but before the completion of the processing of such request. While error message is displayed in user interface in accordance with an embodiment disclosed herein other embodiments as discussed above provide for no error message to be displayed but rather for the user to be otherwise notified of an error in the processing of the signing request. In yet other embodiments no error message is displayed but the client instead automatically retries the request for the digital signing of the associated form file. As noted above UI with error message is offered for purposes of illustration only. Any type of user interfaces can be used in accordance with embodiments disclosed herein. Further the specific buttons radio controls text entry boxes text selection indicators etc. are offered by way of example only for purposes of illustration. Any type arrangement and content of buttons radio controls text entry boxes text selection indicators and or other form features and functions may be used in accordance with embodiments disclosed herein. Further as noted any type of error message known to those of skill in the art may be displayed. While user interface shows an indicator of Local intranet as consistent with the Order of Supplies from CompanyA in the example depicted other embodiments provide for the use of the Internet or other network including the World Wide Web WWW or Web for example.

Turning to this figure depicts the operational steps for processing a request for cancelling the application of a digital signature to a form file for the form illustrated in for example in accordance with embodiments of the present disclosure. START operation is initiated with the sending by a server of an error code to a client indicating the presence of an error during a signing session and process proceeds to receive request for cancel signature operation . For example in embodiments the client receives and or detects an error in the signing process in a response transmitted from the server and sends a request to the server to cancel the application of the digital signature to the particular form file. After receiving the request to cancel digital signature process proceeds to query for determining whether the form file identified by the protocol client message is in the Pre Signed State. If the form file is not in the Pre Signed State process proceeds NO to error code operation in which the protocol server stops processing the request and returns an ErrorCode indicating a failure such as a value other than 1 according to embodiments. If the server determines that the form file is in the Pre Signed State process proceeds YES to query for determining whether an error occurs while processing the request . If an error occurs while processing the request process proceeds YES to error code operation in which the protocol server ceases with the processing of the request and returns an ErrorCode indicating a failure such as a value other than 1 for example. In embodiments step occurs simultaneously with step for determining whether the form file is in the Pre Signed State. In other embodiments steps and are separate as indicated in process . In yet other embodiments these steps are rearranged such that step occurs before step for example. If no error occurs while processing the request to cancel the digital signature process next proceeds NO to query for determining whether the State entry of the EventLog in the client message differs from the PageStateData sent in the response to the initial signing request such as a Retrieve Form File Hash response. If differences exist process proceeds YES to error code operation in which the server returns an ErrorCode indicating a failure such as a value other than 1 in accordance with embodiments.

Where no differences exist process next proceeds NO through off page connector A to query operation for verifying whether the value of the DataDefinition sent by the client message is identical to the value received in the initial signing request such as in a Retrieve Form File Hash request according to embodiments as depicted in in accordance with embodiments disclosed. If the values of the DataDefinition property differ process proceeds NO to error code operation in which the server returns an ErrorCode indicating a signing error. On the other hand if the values of the DataDefinition property match process proceeds YES to remove any digital signature elements that have been added to the form file as the result of the processing of a request for digital signing such as a request for Retrieve Form File Hash message in the same signing session. Next it is determined whether the operations and for example have been successful at query . If the operations have not been successful process proceeds NO to error code operation in which the server returns an ErrorCode indicating a failure of the cancel digital signature process. If the operations have been successful process proceeds YES to move the state of the form file to Initial State operation in which the server moves the state of the form file. Next the server returns a response to the cancel digital signature request in which the response comprises in embodiments an ErrorCode indicating success or failure of the processing of the request ResponseData and PageStateData. In an embodiment the ResponseData is an empty string and the PageStateData comprises a set of properties of protocol server implementation specific data where the server persists such properties. If the server does not persist such properties the value of PageStateData is empty according to embodiments. Process then terminates at END operation .

Next depicts a logical representation of example functional component modules for the interactions of a protocol client and a protocol server during a signing session of a form file and or during cancellation of the application of a digital signature to a form file in accordance with embodiments of the present disclosure.

While shows example environment or system for applying and or cancelling the application of a digital signature to a form file stored on a protocol server illustrates example software functional modules corresponding to such computing units for enabling such digital signing and cancellation capabilities by a protocol client and a protocol server in accordance with embodiments disclosed herein. Storage means for storing form files for example are also depicted in . These storage means and functional modules are offered by way of example only. Numerous types of modules components and or storage means can be used in accordance with embodiments disclosed herein. At client computer of a browser not shown retrieves protocol client . For example in an embodiment protocol client is downloaded at client computer through a Web browser such as MICROSOFT INTERNET EXPLORER produced by MICROSOFT CORPORATION of Redmond Wash. Any type of browser can be used as consistent with embodiments disclosed herein. For example in embodiments where the protocol client is implemented by MICROSOFT SHAREPOINT DIGITAL SIGNATURE CONTROL FOR FORMS SERVICES and is an ActiveX control for example any type of browser supporting ActiveX can be used. For example MICROSOFT INTERNET EXPLORER as mentioned above supports ActiveX. In other embodiments custom ActiveX plug ins are available for other types of browsers. As a further example embodiment a Mozilla Firefox plug in for working with an ActiveX control is used. In still further embodiments involving protocol client implementations other than MICROSOFT SHAREPOINT DIGITAL SIGNATURE CONTROL FOR FORMS SERVICES types of browsers without support for ActiveX technology may be used. Thus embodiments provide for types of protocol client implementations to operate in browser environments with no support for ActiveX technology.

In embodiments the protocol client is already downloaded or otherwise available in non removable or removable memory associated with client computer . In such embodiments protocol client and client computer can be used interchangeably. Protocol client receives input data from a user s for filling out a form for example in accordance with embodiments. In other embodiments protocol client receives input data from another computing device s and or computer program s . Upon receiving input data filling out a particular form protocol client requests that such form be digitally signed by sending a request message over network to protocol server . Protocol server thus receives the request message . In embodiments API on protocol server acts as an interface between protocol client and protocol server . API thus processes the received request message to initiate the digital signing process. In embodiments an API on protocol client acts as an interface between protocol client and protocol server for formulating request messages and processing response messages. For example API formulates request messages into the proper format syntax and structure for example for sending to protocol server for processing. Such messages for example may be formatted in accordance with the InfoPath Digital Signing Protocol Specification MS IPDSP provided by MICROSOFT CORPORATION of Redmond Wash.

After processing the received request message to initiate the signing process for example protocol server responds with a response message which is transmitted over network to protocol client . An example embodiment disclosed herein provides for the following request and response messages in accordance with the InfoPath Digital Signing Protocol Specification Retrieve Form File Hash request Retrieve Form File Hash response Add Signature Value Context request Add Signature Value Context response Cancel Digital Signature request and Cancel Digital Signature response .

For example the following request is sent by protocol client to protocol server over network to initiate the signing process in accordance with embodiments disclosed herein 

The message body in embodiments is an XML document as specified in W3C XML which conforms to the following XML Schema 

The following W3C XML Schema XMLSCHEMA1 section 2.1 fragment specifies the contents of this simple type.

This element specifies the version of the operating system on the client computer at the time of signing.

This element specifies the version of the form server that last edited the form file. When the form server signs the form in the Web browser the value of this element is 12 or 14 according to embodiments. When signing using the client computer this element is omitted according to embodiments.

This element specifies the width of the primary monitor on the client computer at the time of signing.

Unit This attribute specifies the unit of measure being used for the value of Width. The value of this attribute is set to px according to embodiments.

This element specifies the height of the primary monitor on the client computer at the time of signing.

Unit This attribute specifies the unit of measure being used for the value of Height. The value of this attribute is set to px according to embodiments.

This element specifies the color depth of the primary monitor on the client computer at the time of signing.

Unit This attribute specifies the unit of measure being used for the value of ColorDepth. The value of this attribute is set to bpp according to embodiments.

An example protocol client request message to initiate the signing process is as follows according to embodiments of the present disclosure 

An example of a protocol client request message to initiate a signing process as specified in section 2.2.1.2.1 is illustrated here 

In embodiments the protocol server specific EventLog sent in request and response messages is provided for as follows 

A semicolon separated string of values specifying protocol server specific information. Using the ABNF syntax as specified in RFC5234 the event log in embodiments conforms to the following specification 

In an embodiment the following request message is sent by protocol client to protocol server over network to complete the signing process in accordance with embodiments disclosed herein 

The message body in embodiments comprises an XML document as specified in W3C XML which conforms to the following XML Schema 

The following W3C XML Schema XMLSCHEMA1 section 2.1 fragment specifies the contents of this simple type.

An example protocol client request message to the protocol server to add a signature value and context to a form file is illustrated as follows in accordance with embodiments of the present disclosure 

An example of a protocol client request message to add a signature value and context to a form file as specified in section 2.2.1.2.2 is illustrated here. The CERTIFICATE CONTEXT specified in the following example is a binary representation of a certificate specified as key in the section 2.2.1.2.2. The value of CERTIFICATE CONTEXT is abbreviated for readability.

In further embodiments the following request message is sent by protocol client to protocol server over network to cancel the signing process in accordance with embodiments disclosed herein 

The message body in embodiments comprises an XML document as specified in W3C XML which conforms to the following XML Schema 

The following W3C XML Schema XMLSCHEMA1 section 2.1 fragment specifies the contents of this simple type.

An example protocol client request to cancel the application of a digital signature to a form file is shown as follows in accordance with embodiments of the present disclosure 

An example of a protocol client request to cancel the application of a digital signature to a form file as specified in section 2.2.1.2.3 is illustrated here 

In turn the following response message is sent by protocol server to protocol client over network in response to a request to initiate the signing process in accordance with embodiments disclosed herein 

Specifies the result of processing a request for Retrieve Form File Hash as specified in section 2.2.1.2.1. This value in embodiments is Base64 encoded as specified in RFC4648 . The Base64 encoded string in embodiments is not empty. When decoded this value in embodiments is 1 to specify success. Any other decoded value indicates a failure.

Specifies the digest value associated with the form file after applying the processing rules specified in XMLDSig section 3. This string value in embodiments is Base64 encoded as specified in RFC4648 and in embodiments is not empty.

Specifies a set of properties that the protocol server uses to persist implementation specific data across protocol messages. This string value in embodiments is Base64 encoded as specified in RFC4648 . If the protocol server does not persist any properties this value in embodiments is empty.

An example protocol server response message to a request to initiate the signing process is as follows according to embodiments of the present disclosure 

An example of a protocol server response message to a request to initiate a signing process as specified in section 2.2.2.2.1 is illustrated in this section. The string value of PageStateData as specified in section 2.2.2.2 is empty in the message example. The required CRLF characters are present in the message example.

Specifies a set of properties that the protocol server uses to persist implementation specific data across protocol messages. This string value in embodiments is Base64 encoded as specified in RFC4648 . If the protocol server does not persist any properties this value in embodiments is empty.

In further embodiments the following response message is sent from protocol server to protocol client over network for responding to a request for Add Signature Value and Context for completing the signing process.

Specifies the result of processing a request for Add Signature Value and Context as specified in section 2.2.1.2.2. The string value in embodiments is Base64 encoded as specified in RFC4648 . The Base64 encoded string in embodiments is not empty. When decoded this value in embodiments is 1 specify success. Any other decoded value indicates a failure.

An example protocol server response to add a signature value and context to a form file is shown as follows in accordance with embodiments disclosed herein 

An example of a protocol server response to add a signature value and context to a form file as specified in section 2.2.2.2.2 is illustrated in this section. The string values of ResponseData and PageStateData as specified in section 2.2.2.2 are empty in the message example. The required CRLF characters are present in the message example.

Specifies a set of properties that the protocol server uses to persist implementation specific data across protocol messages. This string value in embodiments is Base64 encoded as specified in RFC4648 . If the protocol server does not persist any properties this value in embodiments is empty.

In embodiments the following response message is sent from protocol server to protocol client over network for responding to a request to cancel the application of a digital signature to a form file.

Specifies the result of processing a request for Cancel Digital Signature as specified in section 2.2.1.2.3. The string value in embodiments is Base64 encoded as specified in RFC4648 . The Base64 encoded string in embodiments is not empty. When decoded this value in embodiments is 1 to specify success. Any other decoded value indicates a failure.

An example protocol server response to cancel the application of a digital signature to a form file is shown as follows in accordance with embodiments of the present disclosure 

An example of a protocol server response to cancel the application of a digital signature to a form file as specified in section 2.2.2.2.3 is illustrated in this section. The string values of ResponseData and PageStateData as specified in section 2.2.2.2 are empty in the message example. The required CRLF characters are present in the message example.

Specifies a set of properties that the protocol server uses to persist implementation specific data across protocol messages. This string value in embodiments is Base64 encoded as specified in RFC4648 . If the protocol server does not persist any properties this value in embodiments is empty.

The example software functional modules are offered as an example of possible software functional modules for the embodiments described. Other embodiments may include the modules depicted fewer than the modules and or sub modules depicted additional modules and or sub modules combinations of modules and or sub modules expansions of the modules and or sub modules depicted etc. Further the message requests and responses may be referred to with different names in other embodiments without departing from the spirit and scope of the present disclosure.

While illustrates a logical representation showing the interactions of a protocol client and a protocol server during a signing session depicts the operational characteristics of a process for reconciling different versions of a form file application in accordance with embodiments of the present disclosure. As discussed above a versioning mechanism allows for multiple versions of a protocol server to interoperate with the latest or current version of the protocol client. Consequently the current protocol client can apply a digital signature to a document stored on previous releases of the protocol server. START operation is initiated in which a client receives data entered into a form. Such data may be entered by a user s or by another computing device for example. Next process proceeds to receive indication to sign form in which the client receives an indication that a digital signature is to be applied to the form file associated with the particular form. The client receives from the server the version of the application implemented by the server . This version may also be referred to as the release version of the protocol server. Next the client determines whether the received version from the server matches the version under which the client is operating . If the versions are identical process proceeds YES to proceed with signing process and process eventually terminates at END operation . If the versions of the client and server are not the same such that the client is operating under MICROSOFT SHAREPOINT DIGITAL SIGNATURE CONTROL FOR FORMS SERVICES 2010 and the server is operating under MICROSOFT INFOPATH FORMS SERVICES 2007 for example process proceeds NO to adjust signature process to correspond to server version in which the client makes any necessary adjustments to its message sequencing message syntax and structure elements properties etc. to correspond to the server version or to at least accommodate the server version differences. Following such adjustment s process proceeds with the signing session such as including a request from the client to the server to initiate the signing session e.g. sending a request to Retrieve Form File Hash. In an embodiment if the digital signing process is successful the digital signature is applied to the associated form file and process terminates at END operation . Process thus provides for upgrading the digital signature control for example to accommodate different and various versions of a protocol server and protocol client. is an example of possible operational characteristics for reconciling different versions of a form file application in accordance with embodiments of the present disclosure. Operational steps depicted may be combined into other steps and or rearranged. Further fewer or additional steps may be used for example.

Finally illustrates an example computing system upon which embodiments disclosed herein may be implemented. A computer system such as client computer or servers or in for example which has at least one processor for exchanging form data and messages related thereto as shown in is depicted in accordance with embodiments disclosed herein. The system has a memory comprising for example system memory volatile memory and non volatile memory. In its most basic configuration computing system is illustrated in by dashed line . Additionally system may also include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage .

The term computer readable media as used herein may include computer storage media. Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all computer storage media examples i.e. memory storage. Computer storage media may include but is not limited to RAM ROM electrically erasable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store information and which can be accessed by computing device . Any such computer storage media may be part of device . The illustration in is intended in no way to limit the scope of the present disclosure.

The term computer readable media as used herein may also include communication media. Communication media may be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may describe a signal that has one or more characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media.

System may also contain communications connection s that allow the device to communicate with other devices. Additionally to input content into the form fields displayed on a User Interface UI on client computer for example as provided by a corresponding UI module not shown on client computer for example in accordance with an example embodiment of the present disclosure system may have input device s such as a keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. All of these devices are well known in the art and need not be discussed at length here. The aforementioned devices are examples and others may be used.

Having described embodiments of the present disclosure with reference to the figures above it should be appreciated that numerous modifications may be made to the embodiments that will readily suggest themselves to those skilled in the art and which are encompassed within the scope and spirit of the present disclosure and as defined in the appended claims. Indeed while embodiments have been described for purposes of this disclosure various changes and modifications may be made which are well within the scope of the present disclosure.

Similarly although this disclosure has used language specific to structural features methodological acts and computer readable media containing such acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific structure acts features and or media described herein. Rather the specific structures features acts and or media described above are disclosed as example forms of implementing the claims. Aspects of embodiments allow for multiple client computers multiple servers and multiple networks etc. Or in other embodiments a single client computer with a single server and single network are used. One skilled in the art will recognize other embodiments or improvements that are within the scope and spirit of the present disclosure. Therefore the specific structure acts and or media are disclosed as example embodiments of implementing the present disclosure. The disclosure is defined by the appended claims.

