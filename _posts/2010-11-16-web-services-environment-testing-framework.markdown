---

title: Web services environment testing framework
abstract: A method of testing web services using a web service testing framework can include using a data parser to parse data for the web service to be tested. The data parser may be one of a plurality of data parsers in a test library for support of a plurality of data formats for the web service. If the web service is in a simple object access protocol (SOAP) protocol, the data can be converted into framework objects. These framework objects for the simple object access protocol (SOAP) protocol may then be converted into test objects. If the web service is in a representational state transfer (REST) protocol, the data itself can be converted into the test objects. A web service test can be accessed from the test library for testing the web service. The web service test can be executed using the test objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08739126&OS=08739126&RS=08739126
owner: salesforce.com, inc.
number: 08739126
owner_city: San Francisco
owner_country: US
publication_date: 20101116
---
This application claims the benefit of U.S. Provisional Patent Application 61 380 042 entitled WEB SERVICES ENVIRONMENT TESTING FRAMEWORK filed Sep. 3 2010 the entire contents of which are incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The subject matter described herein relates generally to a test framework for an on demand service environment.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also be inventions.

In order to provide test coverage for web services or applications different testing tools are typically utilized for different web service protocols as well as different data types. For example one test tool might be used to test a simple object access protocol SOAP based web service while a different test tool is used to test a representational state transfer REST based web service. Thus performing a full testing of various web service protocols and data types may require working with different test tools from different vendors making it more difficult to test web services across a wide variety of web environments.

Approaches are provided for a web service testing framework. These approaches such as various apparatuses systems and methods are described herein with reference to examples applicable to a multi tenant database system. These approaches are also applicable to many other computing environments including an MS Windows operating system environment any web browsing environment an Apple OS operating environment a cellular phone environment etc.

As used herein an example multi tenant database system includes those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers.

As noted above the example multi tenant database system as described herein represents only one possible example system where particular embodiments may be utilized. One or more embodiments are applicable to a wide variety of other systems and or arrangements.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system will be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that the present invention might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments of the present invention can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . Invocations to applications may be detected by one or more system processes which manages retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Particular embodiments are directed to a web service testing framework that is configured to test a variety of web service protocols and data format types. For example any suitable web service protocol e.g. simple object access protocol SOAP representational state transfer REST etc. as well as any suitable data format e.g. extensible markup language XML hypertext markup language HTML JavaScript object notation JSON plain text etc. are supported in various implementations. Such a web service testing framework can be used to test e.g. various web service interfaces for web applications and bidirectional data transactions to from disparate web services.

In one embodiment a method of testing web services using a web service testing framework can include using a data parser to parse data for the web service to be tested. The data parser may be one of a plurality of data parsers in a test library to support a plurality of data formats for the web services. Data validators may also be used to assert web service data. For example a data validator may be one of a plurality of data validators in a test library for asserting web service data. If the web services are in a SOAP protocol the data can be converted into framework objects. These framework objects for the SOAP protocol may then be converted into test objects. If the web services are in a REST protocol the data itself can be converted into the test objects. A web service test can be accessed from the test library for testing the web service and the web service test can be executed using the test objects. For example a web service test can access the test library to ensure data integrity and test objects to send receive data over the web service.

In this fashion a wide variety of different web service configurations can be supported. In one or more implementations both SOAP and REST web service protocols may be supported over any suitable transfer protocol e.g. hypertext transfer protocol HTTP HTTP secure HTTPS etc. and involving any suitable data format types e.g. XML HTML JSON plain text etc. . Further a web service testing framework in particular embodiments may be extendable to support any suitable web service configuration that is not initially covered. In one particular application the web service testing framework may be utilized by Salesforce customers for testing applications developed on a Salesforce platform.

Particular embodiments provide an ability to read create update and or delete any object used in a web service application. For example an object query language e.g. Salesforce object query language SOQL etc. can be used in constructing query strings in order to read create update and or delete data stored in a cloud arrangement. In addition any web services description language WSDL can be employed to automatically generate corresponding test objects e.g. Java objects to be used in tests. The use of Java test objects allows for interaction of the web service testing framework with a wide variety of web services e.g. those that support SOAP REST etc. .

In one or more implementations when testing using the web service testing framework connectivity or data problems may fail in such a way so as to facilitate diagnosis and correction of the underlying problem. For example various utilities supplied from a test library can be utilized by a test developer to customize web service tests. In addition various verifications of XML and HTTP data being transferred may be performed. Further XML or HTTP data that is sent and or received may be parsed and represented as Java objects for creating client applications for testing.

In one or more implementations of the web service testing framework Java test objects may be created based on a given WSDL such as for a SOAP web service protocol. Such Java objects can then be used by various tests to exercise a particular web service. The testing framework may provide an ability to create tests against standard or custom objects with fields that can be directly used or otherwise extended to access custom fields. Further an instance of each web service application object can be created updated read and or deleted and shared between applications from another source e.g. a customer organization etc. . Instances of objects can be retrieved by or from the framework or data from a specific field of an object instance can be retrieved for testing purposes.

In certain embodiments a web service testing framework provides a web service client e.g. loaded on user system that can provide data transactions e.g. in XML HTML etc. over various protocols e.g. HTTP secure sockets layer SSL etc. to from a server e.g. system . For example the server can be a REST web server a SOAP web server or any other suitable web server. Further interaction may be performed by using HTTP commands e.g. connect get post put delete etc. .

In one or more implementations data for the testing transactions e.g. XML data HTTP data etc. can be dynamically created e.g. created as part of the testing process via a user interface etc. or loaded statically from files e.g. an XML file . For example the testing data can be parsed to obtain specific values from that data to be used for validation. Alternatively an entire data file can be validated by comparing one data file to another data file.

In one or more implementations the web service testing framework can be packaged or otherwise distributed as a Java archive JAR file. A JAR file can essentially aggregate many files into one for ease of distribution. Such JAR files may be used to facilitate interaction with other frameworks. For example the JAR files can be used to distribute Java applications or libraries in the form of classes and associated metadata and resources e.g. text images etc. .

Web service testing frameworks of particular embodiments can also be used as a plug in e.g. test driver into other automation frameworks for operation as a contributing component. Examples of this particular application for web service testing frameworks in an overall testing framework structure will be discussed below with reference to . Further a web service testing framework of various implementations can also be plugged in to any other suitable framework such as those employing a Java interface.

A particular example automation framework can also include automation library which can be a library of utilities and tools used to form a core logic or core platform of automation framework and tests. In addition a separate administrator interface can provide access either directly to tests or via execution engine and may be used e.g. for writing or otherwise generating test scripts for tests . Tests can also utilize software configuration management SCM for tracking and controlling changes e.g. via revision control and baseline establishment in the software and for accessing the latest test cases.

Various implementations of the test framework can also be used to generate any suitable test reports . Examples of such test reports include test trend reports test result reports as well as graphical data to provide test results in summarized form. Further various aspects of the test result reporting are configurable by a user e.g. via a user interface dashboard etc. . One or more implementations provide for user configurability of summation forms of test result data e.g. test statistics grid chart test trends job statistics build statistics build executor status build queue etc. for test reports . Various implementations also provide many other user configurations related to testing control and reporting. For example real time email instant messages and or RSS feeds of testing status or other such notifications can be configured.

In one implementation an automation framework can include an automation server or execution engine e.g. an automation library e.g. and an automation dashboard e.g. . Execution engine can include a server and or a web application that may be installed on any web server container. Execution engine may also be configured to run jobs based on custom configurations. For example such jobs that may be run on execution engine include build test and deployment operations.

In one implementation automation library can include a Java archive for creating tests loading test data test execution drivers logging and verifying results. In this and other implementations dashboard can be used for categorizing and defining tests e.g. via user configurable inputs as well as collecting test status from each execution and archiving associated results. Such test results can be used by dashboard to provide various test reports e.g. custom graphical analysis reports . This framework can also run tests on demand scheduled and or based on a triggered event and may also run tests in parallel by pooling requests and distributing the tests to test clients for execution.

Automation library can also include core platform and plug ins . Plug ins can be used to extend the automation library to support any number of tests . For example various tests can represent different product lines or layers of a product application or service. Plug ins can provide for an integrated system of self contained modular testing components built upon a shared core platform. These pluggable components may act together as building blocks that provide test coverage for different layers e.g. GUI API web service database network etc. of the product. Thus in various implementations in order to support a new test a new plug in can be added to extend the reach of core platform . Plug ins thus allow for integration of each type of testing tool. Once the test tools are defined for a particular product plug ins can be identified or created to integrate the defined test tools e.g. tests into core platform . In this fashion automation framework is tool agnostic and extensible because each such test tool can be coupled with core platform by use of appropriate plug in .

The test framework in various implementations can also execute build or deployment tasks where each job e.g. build test deployment etc. may be configured as self contained tasks that can trigger other jobs and provide execution results. In various implementations such a job e.g. a deployment or a test run can be used as an event to trigger another job. A user can configure which specific jobs or types of jobs may be specified as an event for such event triggered operation. For example a user can specify that a first test is an event and that a second test is to run based on occurrence of the first test e.g. an event trigger . Any number of such event definition and triggering can be supported in particular embodiments.

In addition the automation framework may be controlled by a centralized dashboard whereby tests definitions and test results are archived. Further tests can be parameterized with test data e.g. using XML comma separated values CSV etc. to supply test input. Such input test data can be provided via dashboard or via any other suitable interface to execution engine . For example a file of test input can be accessed by e.g. from a memory location or database or otherwise sent to execution engine . Further default test inputs such as those derived from previous test runs of the same test can also be utilized as test input data by execution engine .

Alternatively or in addition to tests being executed on execution engine a pool of available client machines may be used to execute separate layers of a product to represent separate environments for the product or for any other suitable execution arrangement. In addition test descriptions user configurations and results can be stored in dashboard . In one or more implementations user configurations can be stored in association with a user interface e.g. in user system and or in association with dashboard e.g. in system or any suitable associated storage.

In order to accommodate operating system independence in one implementation the test framework can be built upon Java technology. Use of Java technology can allow the framework to run on a variety of major operating system platforms. In addition core platform code can be installed and updated as a JAR file. Such a test framework can also be built on a componentized modular design and a shared library thus allowing additional modules for extension of new features.

Automation library can include core platform and plug ins . Core platform can include an automation library of shared tools and utilities to perform core testing functionality. Plug ins can include test drivers tailored to execute or otherwise integrate specific types of tests via core platform . For example plug ins can target various aspects of a particular product or layer of the product. In some implementations one or more of tests may be provided by other vendors and are made to work with core platform by incorporating an appropriate plug in . Also in some implementations one plug in may service a variety of different tests . Each plug in may also be intended to test a particular layer of a product. Further plug ins may be directed to particular layers environments and or test tool vendors in order to facilitate product testing across desired layers and environments associated with that product.

Any number of plug ins can be coupled to core platform in order to support any number of suitable tests. Further any number of test clients can be utilized for executing various groupings of tests such as by use of corresponding distributed e.g. virtual machines. For example web user interface UI plug in can include test drivers for executing tests such as web development tests AppExchange tests help and training H T tests WebStore tests and Appstore tests . Test client can include web development tests AppExchange tests and H T tests . Also for example Apex Ftest plug in can include test drivers for executing tests such as Appstore tests . H T tests can e.g. test a portal application. Also for example web services plug in can include test drivers for executing tests such as Appstore tests Coupa tests and employee success ES tests . Test client can include WebStore tests Appstore tests and Coupa tests . Also HTTP protocol plug in can include test drivers for executing tests such as web development tests and database plug in can include test drivers for executing tests such as data warehouse DW tests . Test client can include ES tests web development tests and DW tests . In addition and as illustrated with respect to Appstore tests one or more plug ins may contain test drivers for this test or product line. As can be seen in the example of one plug in may support more than one test client such as web services plug in supporting test clients and .

Any suitable technologies can be utilized in one or more implementations of an automated test framework. For example a Selenium HTML unit can be used for web UI testing JUnit TestNG for test drivers and or API testing Apache Axis can be used for SOAP web service testing XMLUnit can be used for differentiating and validating XML data Apache HTTPComponents can be used for HTTP and REST web service testing Spring JDBC can be used for database testing Ant can be used to execute build test and deploy jobs DOM4j can be used for parsing XML and HTML data Log4j can be used for logging test data Hudson or any suitable tool of choice can be used for continuous integration and Perforce or any suitable tool of choice can be used source control management.

A protocol of the web service under test may also be determined in one or more implementations. For example packet header information or other suitable settings or indicators can be utilized to perform this protocol determination. Various embodiments support a wide variety of such web service protocols and data formats. If the web services are in a SOAP protocol the data can be converted into framework objects or such framework objects can otherwise be generated . These framework objects for the SOAP protocol may then be converted into test objects or these test objects can otherwise be generated . If the web services are in a REST protocol the data itself can be converted into the test objects or the test objects can otherwise be generated . It is the test objects that may be used in the actual web service test in various implementations. A web service test can be accessed from the test library for testing the web service . The web service test can be executed using the test objects completing the flow .

As will be discussed in more detail below in addition to data parsers other utilities can be accessed from the test library in order to generate and or execute the web service test such as validating or comparing data sent received via the web service. For example data validators may also be used to assert web service data. In various implementations a data validator may be one of a plurality of data validators in a test library for asserting web service data. For example a web service test can access the test library to ensure data integrity and test objects to send receive data over the web service.

In order to facilitate use of web service bindings in framework objects test objects can be generated from framework objects . Test objects can essentially be built to wrap around framework objects and thus provide a layer of abstraction to facilitate web service bindings use per framework objects . For example if WSDL changes framework objects can be regenerated without affecting web service tests . This is because web service tests utilize test objects instead of directly using framework objects when performing a test. Without this additional level of abstraction provided by test objects any changes made to WSDL might result in unintended test operations being performed. Thus changes are essentially taken care of by use of framework objects and web service tests need not be rewritten after every WSDL change.

A web service test or portions thereof e.g. utilities can be accessed via test library . As discussed above a web service test can utilize generated test objects to execute the particular web service test. Web service data for an application to be tested can be accessed via server side web service . Because a wide variety of formats for the web service data may be supported data parsers can be employed to understand data from WSDL and or server side web service and feed into a converter for conversion into framework objects and or test objects . For example an appropriate data parser can be accessed from test library such as by test objects . Further WSDL can be used to define available web services or otherwise describe aspects of the web service to be tested from server side web service .

Test objects may remain substantially the same where framework objects can vary along with a change in protocol connections. For example an API from a company could change and Java objects in framework objects may automatically be updated as a result. Thus a suitable layer of abstraction is formed by WSDL first being converted into framework objects which can then be converted into test objects . A user of a test tool may use test objects whereby remaining objects reside substantially in framework objects . In addition custom platforms e.g. for different abstraction layers different web service descriptors etc. can also be supported in particular embodiments.

Test library may be accessed by test objects as well as by a writer or generator of web service tests . Test library may provide any number of utilities e.g. data parsers data verifiers data comparators general purpose utilities etc. to facilitate web service test development and or execution. For a SOAP web service protocol actual data may be sent and received over HTTP in an XML data format. For this particular example data coming in and out of web service framework may use a schema to describe how to read this XML. Tools in test library may provide for reading of the schema to determine how to parse the XML data. Thus utilities available in web service framework e.g. data parsers utilities in test library can be utilized in development and or operation of web service tests . Such utilities need not be rewritten by each user of web service framework .

One example test object can relate to login for a particular web service such as a Department of Motor Vehicles DMV web service. For example if a person logs in to such a DMV web service an associated test login can automatically be created as a Java object communicating with DMV. Thus a Java test object can pass some data to a corresponding object e.g. a login object and can also expect a response e.g. successful login or not . A Java object can also represent features or functions e.g. an account of a particular web service. Further attributes associated with the objects can include sub functions that may cause data to be moved around to from the account.

Various company or organization e.g. Oracle IBM tenants in a multi tenant system etc. implementations of SOAP or REST protocols can be tested such as by utilizing an appropriate utility e.g. via web service utilities . Here WSDL can be used in converting data via such utilities and or binding creator to framework objects . For example SOAP partner may be part of framework objects or otherwise interface with test objects via test base object . Thus a test generator may write a test e.g. web service test in Java WSDL can define an API for the particular web service to be tested and test interaction can be performed via test objects . For example web service test may be written in a Java native language and two layers of abstraction e.g. via test objects and framework objects can be utilized from that native test language. Framework objects can be converted into a protocol suitable for interacting with another company s web services e.g. via web service bindings at SOAP partner . Thus one layer of abstraction can be used to convert to test objects and another layer of abstraction may be to provide conversion to transfer to a remote web service e.g. at server side web service . For example while web service testing framework can be implemented in Java the framework can communicate with applications that are in another language e.g. Apex thus providing support for third party web based applications.

WSDL may be provided by a service provider of the particular web service to be tested and a call from web service framework can be made in order to receive the WSDL file for conversion into framework objects . For example WSDL can be accessed by server side web service and may utilize binding creator for conversion into framework objects . Further Java binding stubs from WSDL can be formed in SOAP partner which can represent any company or other party. In this fashion binding creator can convert WSDL into Java bindings in association with framework objects at SOAP partner . In this fashion any WSDL or other type of descriptive language can be supported by using such raw Java bindings or other such objects.

As discussed above framework objects can be derived from WSDL and test objects can be derived from framework objects . Test base object can also be coupled to an object behavior interface that indicates how various test objects operate such as which methods are available via those particular test objects. Other test objects which may be accessed as part of the web service testing can include test objects account opportunity and contract . In one example arrangement test base object can be leveraged or otherwise used for generation of test objects account opportunity and contract . Test library can include web service connector and web service utilities which can be utilized by web service tests to facilitate generation and or execution of web service tests .

Thus in REST web service protocols test objects can be more directly used for testing the server side web service . Data may be embedded in e.g. HTTP and sent across the interface between web service framework and server side web service . Because this HTTP communication for REST web service protocols can support XML plain text JSON etc. an appropriate data parser can be accessed from test library . Thus test library can be used in order to read HTTP packets and pull out the parsed data e.g. plain text to be used for the particular web service test . For example in an HTTP packet a header that indicates whether the data format therein is plain text XML etc. can be accessed and this header identification can be used for determining an appropriate data parser from test library for performing proper conversions for the data. In this fashion REST web service protocol support is provided in various embodiments for plain text XML JSON etc. can be accommodated such that data sent received via HTTP packets to from server side web service or other web server.

In addition test objects generated as discussed above can include element and document . An example web service test may then access test data via file list e.g. over HTTP and then use test objects to send and receive data over the web service to be tested. In one or more implementations file list may also be part of test library . As shown element and can be part of test objects and may be used to verify e.g. received XML files as well as send XML files to server side web service . In this example test data can thus represent data desired to be communicated with the web service. This data shown here on a client side can be imported over HTTP and sent to a remote service or server side web service . In this fashion web service test can be generated using web service framework and by utilizing web service client and utilities that are part of test library of the web service framework.

In one or more implementations a web service testing framework can be built on a Java and Web 2.0 technology based architecture thus reducing installation requirements as compared to other approaches. Particular embodiments also allow for integration with any test content repository defect management system as well as any suitable continuous integration CI tool resulting in increased flexibility. In addition certain embodiments provide modular and extensible testing by accommodating testing of different products web service protocols data types application layers as well as different types of testing.

Various embodiments also provide agnostic testing of web service applications such as in a cloud arrangement or in a client server arrangement. Any web service application can be tested in a cloud and or client server mode. In addition aspects of various implementations may be browser and platform independent and can also run in a distributed environment using virtual machines or test clients.

Thus particular embodiments provide an ability to test different protocols and data format types related to a web service application. In one particular order management example an opportunity for a billing business process can include multiple sub processes such as user interface API and or web service calls between systems and transactional data processing bulk with database commits. One or more implementations as described herein may be effectively used to create tests for testing various aspects of web services and ensuring transactional data integrity across a variety of data formats and protocols.

Various aspects of particular embodiments can be implemented using any suitable function tool application code add on etc. to a website or navigation tool such as a special cookie that may be configured on the website. The code may be downloaded from a server to a client from system to user system and or from any suitable arrangement. As discussed above such code to implement various aspects of particular embodiments can include any suitable programming language e.g. HTML Apex C Javascript etc. .

In a multi tenant database system a database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to the present invention. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table. 

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

Any suitable programming language can be used to implement the routines of particular embodiments including C C Java assembly language etc. Different programming techniques can be employed such as procedural or object oriented. The routines can execute on a single processing device or multiple processors. Although the steps operations or computations may be presented in a specific order this order may be changed in different particular embodiments. In some particular embodiments multiple steps shown as sequential in this specification can be performed at the same time.

Particular embodiments may be implemented in a computer readable storage medium for use by or in connection with the instruction execution system apparatus system or device. Particular embodiments can be implemented in the form of control logic in software or hardware or a combination of both. The control logic when executed by one or more processors may be operable to perform that which is described in particular embodiments.

A processor includes any suitable hardware and or software system mechanism or component that processes data signals or other information. A processor can include a system with a general purpose central processing unit multiple processing units dedicated circuitry for achieving functionality or other systems. Processing need not be limited to a geographic location or have temporal limitations. For example a processor can perform its functions in real time offline in a batch mode etc. Portions of processing can be performed at different times and at different locations by different or the same processing systems. A computer may be any processor in communication with a memory. The memory may be any suitable processor readable storage medium such as random access memory RAM read only memory ROM magnetic or optical disk or other tangible media suitable for storing instructions for execution by the processor.

Particular embodiments may be implemented by using a programmed general purpose digital computer by using application specific integrated circuits programmable logic devices field programmable gate arrays optical chemical biological quantum or nanoengineered systems components and mechanisms may be used. In general the functions of particular embodiments can be achieved by any means as is known in the art. Distributed networked systems components and or circuits can be used. Communication or transfer of data may be wired wireless or by any other means.

It will also be appreciated that one or more of the elements depicted in the drawings figures can also be implemented in a more separated or integrated manner or even removed or rendered as inoperable in certain cases as is useful in accordance with a particular application. It is also within the spirit and scope to implement a program or code that can be stored in a machine readable medium to permit a computer to perform any of the methods described above.

As used in the description herein and throughout the claims that follow a an and the includes plural references unless the context clearly dictates otherwise. Also as used in the description herein and throughout the claims that follow the meaning of in includes in and on unless the context clearly dictates otherwise.

While the invention has been described by way of example and in terms of the specific embodiments it is to be understood that the invention is not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

