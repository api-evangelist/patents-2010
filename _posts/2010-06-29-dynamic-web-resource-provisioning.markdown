---

title: Dynamic web resource provisioning
abstract: In one embodiment, Dynamic Web Resource Provisioning (DWRP) is a web services based mechanism for dynamic web services application programming interface (API) extensibility. A director network device provisions one or more agent network devices with a message in the form of a POST request to a first API. The message includes instruction configured to extend a second API in the agent network device. The director network device delivers dynamic language code to the second API by way of a PUT request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08898658&OS=08898658&RS=08898658
owner: Cisco Technology, Inc.
number: 08898658
owner_city: San Jose
owner_country: US
publication_date: 20100629
---
Web services include application programming interfaces API accessed over a network by another system. Two popular implementations of web services include representational state transfer REST and simple object access protocol SOAP . In both systems servers process requests and return responses. A web resource may be referenced using a uniform resource identifier URI obtainable over hypertext transfer protocol HTTP .

Web services must be upgraded when their functionality no longer meets the requirements of the user. Generally when a new version is required the entire web service must be wholesale changed to the new version. Naturally the web service cannot be replaced when the web service is running resulting in system down time.

Conventional web services may be modified or extended by a complete replacement of the software infrastructure. Dynamic Web Resource Provisioning DWRP modifies or extends web services on the fly. DWRP first provisions the system with a web services application programming interface API extension. The API extension may equip the system with new resource definitions API contracts and dynamic language code to enable new web services functionality.

In a first aspect a method includes sending a message to a first application programming interface API of at least one agent network device wherein the message includes instructions configured to extend a second API in the at least one agent network device and delivering dynamic language code to the second API wherein the dynamic language code defines a contract with the at least one agent network device.

In a second aspect an apparatus includes a first application programming interface API a second API and an execution engine. The first API is configured to receive a message from a network device. The second API is extended by instructions in the message and configured to receive dynamic language code from the network device. The execution engine is configured to execute the code received from the network device according to a contract between the network device and the apparatus.

DWRP permits modification of web services on the fly. The web services are stored on one or more agent network devices that receive requests from a director network device. The director network device first provisions the agent with a web services application programming interface API extension. The API extension equips the system with new resource definitions API contracts and dynamic language code to enable new web services functionality. The agent and director labels are merely placeholders. The agent network devices may be considered agents because they receive requests from the director network device. Along the same lines the director network device may be considered a director in the sense in sends requests to the agent network devices.

In a command sequence line illustrates the interaction between director network device and agent network device . The director network device may execute a series of workflows over a REST architecture and the following description will be discussed in terms of hypertext transfer protocol HTTP however other implementation outside of both HTTP and REST are possible. HTTP defines the following six operations GET PUT POST DELETE HEAD and OPTIONS.

First the director network device may issue a message in the form of a GET request to the provisioning API of the agent network device . The agent network device responds with a list of the web resources currently supported by the agent network device . The director network device may compare a potential new web resource for agent network device against the list of the web resources. The list of web resources may be in the form of uniform resource identifiers URIs .

Next the director network device may issue a message in the form of a POST request to the provisioning API of the agent network device in order to add new web resources to the work API . The manager includes instructions or logic configured to control the provisioning of the new web resources to work API . The POST request may include XML code. An example XML code may include 

The above example XML code adds two web resources to work API . The first sample1 accepts HTTP GET requests. The second sample1 state accepts both GET and PUT requests. The work API has been extended with two web resources by instructions in the POST request from director network device .

Next the director network device sends an HTTP PUT request to agent network device via provisioning API . The HTTP PUT request delivers dynamic language code to the agent network device using the web resource previously added to the work API . For example the web resource may be the sample1 state web resource. Dynamic language code executes at least one aspect of the program that would typically be executed at compilation. For example dynamic language code may extend the program itself by adding new objects and definitions during execution of the program. The dynamic language code delivers the methods parameters code and error handling that make up an execution contract between the network device and the agent network device for the two new web resources. Parameters may be referred to as arguments.

The dynamic language code may be delivered as text within an XML payload of the HTTP put request. The dynamic code provides all of the definitions necessary for agent network device to respond to future work API requests such as an HTTP GET requests on the new web resource. The dynamic language code may be written in languages such as PowerShell Ruby Python or other languages.

Finally the network device initiates execution of the code according the execution contract by sending an HTTP GET request and an HTTP PUT request to the agent network device via the work API . Specifically the HTTP GET request reads data from the dynamic code execution engine by invoking one of the newly created web resources and the HTTP PUT request updates data by invoking the other newly created web resource. The agent network device passes any parameters to the dynamic language code and executes the dynamic language code and returns data to network device .

The native OS interface layer includes the interfaces provided by the OS for interaction with agent web services . The operating system may be Microsoft Windows Server based Linux based or based on another operating system. The security layer enforces the security policies the agent network device .

Referring back to the display is configured to display status information received from one or more agents at the director network device . The display may be a cathode ray tube CRT monitor a liquid crystal display LCD panel or another type of display.

The input device allows a user or administrator to input commands to the director network device . The input device may be a keyboard trackball touch pad a mouse or other user input. Alternatively the input device and or the display may be provided remotely at another terminal by way of a network or the Internet.

The memory may be a volatile memory or a non volatile memory. The memory may include one or more of a read only memory ROM dynamic random access memory DRAM a static random access memory SRAM a programmable random access memory PROM a flash memory an electronic erasable program read only memory EEPROM static random access memory RAM or other type of memory. The memory may include an optical magnetic hard drive or any other form of data storage device. The memory may be located in a remote device or removable such as a secure digital SD memory card.

The memory may store computer executable instructions. The controller may execute computer executable instructions. The computer executable instructions may be included in computer code. The computer code may be stored in the memory . The computer code may be written in any computer language such as PowerShell Ruby Python C C Java Pascal Visual Basic Perl HyperText Markup Language HTML JavaScript assembly language extensible markup language XML and any combination thereof.

The computer code may be logic encoded in one or more tangible media or one or more non transitory tangible media for execution by the controller . Logic encoded in one or more tangible media for execution may be defined as instructions that are executable by the controller and that are provided on the computer readable storage media memories or a combination thereof. Instructions for instructing a network device may be stored on any logic. As used herein logic includes but is not limited to hardware firmware software in execution on a machine and or combinations of each to perform a function s or an action s and or to cause a function or action from another logic method and or system. Logic may include for example a software controlled microprocessor an ASIC an analog circuit a digital circuit a programmed logic device and a memory device containing instructions.

The web applications may be stored on any computer readable medium. A computer readable medium may include but are not limited to a floppy disk a hard disk an application specific integrated circuit ASIC a compact disk CD other optical medium a random access memory RAM a read only memory ROM a memory chip or card a memory stick and other media from which a computer a processor or other electronic device can read.

The controller may comprise a general processor digital signal processor application specific integrated circuit field programmable gate array analog circuit digital circuit combinations thereof or other now known or later developed processor. The controller may be a single device or combinations of devices such as associated with a network or distributed processing. Any of various processing strategies may be used such as multi processing multi tasking parallel processing remote processing centralized processing or the like. The controller may be responsive to or operable to execute instructions stored as part of software hardware integrated circuits firmware micro code or the like. The functions acts methods or tasks illustrated in the figures or described herein may be performed by the controller executing instructions stored in the memory . The functions acts methods or tasks are independent of the particular type of instructions set storage media processor or processing strategy and may be performed by software hardware integrated circuits firmware micro code and the like operating alone or in combination. The instructions are for implementing the processes techniques methods or acts described herein.

The I O interface may include any operable connection. An operable connection may be one in which signals physical communications and or logical communications may be sent and or received. An operable connection may include a physical interface an electrical interface and or a data interface. An operable connection may include differing combinations of interfaces and or connections sufficient to allow operable control. For example two entities can be operably connected to communicate signals to each other directly or through one or more intermediate entities e.g. processor operating system logic software . Logical and or physical communication channels may be used to create an operable connection. For example the I O interface may comprise a first communication interface devoted to sending data packets or datagrams and a second communication interface devoted to receiving data packets or datagrams. Alternatively the I O interface may be implemented using a single communication interface.

One specific application of DWRP is the management of a software upgrade. The administrative burden of implementing the software upgrade is lessened using DWRP. When an upgrade becomes available director network device through communication over a network dynamically extends the functionality of the agent network devices as required from one upgrade release to another upgrade release. The director network device provisions the agents network devices with new functionality in order to facilitate upgrade scenarios. As discussed above the functionality is implemented by extending the work API and delivering dynamic language code using HTTP requests. The dynamic language code includes the routines data structures object classes or protocols that the agent network devices will need to communicate with the director network device in performing the upgrade.

Subsequently the director network device orchestrates the upgrade across the agent network devices which may include different product components or product families. Some of the agent network devices may require implementation of the upgrade before the upgrade can be successfully implemented in other agent network devices . As discussed above the director network device may send HTTP requests to the agent network device that initiate the agent executing the dynamic language code using the provisioned work API . The director network device may also provide real time upgrade feedback via an interactive Web 2.0 style or other administrative user interface.

Further the director network device may orchestrate complex upgrade scenarios using a workflow script. The workflow script orchestrates the upgrade by controlling tasks in a predetermined execution order which prevents upgrade deadlocks. An upgrade deadlock occurs when one component or process depends on another component or process and vice versa. For example an upgrade deadlock occurs in the situation when a first component upgrade is put on hold pending a second component upgrade and the second component upgrade is put on hold pending the first component upgrade. The director network device prevents this problem from a higher level by identifying any potential upgrade deadlocks without involving users of the system.

The director network device may be a web application portal from which distributed upgrade orchestration may be triggered scheduled and monitored. The director network device provisions the agent network devices to extend the work API within agent network devices . During provisioning the agent network devices receive data on what and how the tasks will be executed. For example the director network device delivers specific instructions to the agent network devices . The instructions include the web resources and the dynamic language code to execute when the director network device engages the agent network devices .

Specifically the agent network devices are delivered instructions for what components will be upgraded and what procedures will be followed when the director network device later orchestrates the upgrade. The agent network devices may be servers or routers running a web service application. As the web service requests reach the agent network devices the web service requests securely provision the agent network devices with the functionality required to perform the upgrade. The director network device instructs the agent network devices to perform the component upgrade.

The director network device may receive status information back from the agent network devices at the I O interface . Status information may include the success or failure of the various workflows a completion bar or errors. The director network device may present the status information to the user by way of the display . The status information may be continuously periodically or upon request transmitted to the director network device during a part or all of the commencing upgrade. The director network device may provide the user with a graphical representation including a centralized status view of the upgrade across the agent network devices as the upgrade occurs.

Dynamic web resource provisioning DWRP dynamically extends web resources to agent network device on the fly. Functionality may be added to agent network devices without any down time. The web resources may define any type of functionality. In one scenario DWRP streamlines the upgrade experience for software. A new URI using for example REST web services maps to the dynamic language code and the associated HTTP request methods and responses. The simplicity of RESTful web services over HTTP may simplify the security and scalability requirements of DWRP.

To the extent that the phrase one or more of A B and C is employed herein the phrase is intended to convey the set of possibilities A B C AB AC BC and or ABC e.g. the data store may store only A only B only C A B A C B C and or A B C . It is not intended to require one of A one of B and one of C. When the applicants intend to indicate at least one of A at least one of B and at least one of C then the phrasing at least one of A at least one of B and at least one of C will be employed.

Various embodiments described herein can be used alone or in combination with one another. The foregoing detailed description has described only a few of the many possible implementations of the present invention. For this reason this detailed description is intended by way of illustration and not by way of limitation.

