---

title: Method and apparatus for rule-based automatic layout parasitic extraction in a multi-technology environment
abstract: A system for extracting a layout from an object in a fabric includes means for providing fabric data to a rule-based layout extraction engine; means for maintaining a layout extraction rule to select a layout object from the fabric data; means for maintaining a binding rule to bind the layout object to a solver; means for maintaining a boundary rule to specify a boundary condition for a solver; and means for executing the solver on the layout object to generate a model of the object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08650518&OS=08650518&RS=08650518
owner: Cadence Design Systems, Inc.
number: 08650518
owner_city: San Jose
owner_country: US
publication_date: 20100108
---
The embodiments of the invention relate to circuit design and more particularly to simulating models of parasitic effects in technologies which span multiple fabrics. Although embodiments of the invention are suitable for a wide scope of applications it is particularly suitable for automatically under the guidance of user defined rules extracting layout objects from a layout spanning multiple fabrics recognizing custom design patterns in the layout binding the layout objects to specialized solvers to generate models of parasitic effects and simulating combinations of the models arising from layout objects which span multiple fabrics.

In general an electronic system include a plurality of integrated circuit chips IC for performing various electronic functions. Each IC includes many electronic components e.g. transistors diodes inductors capacitors inverters logic gates multiplexers etc. interconnected in a prescribed manner to respond to input electrical signals and produce other electrical signals according to the desired electronic function performed by the IC. The electronic system may also include one or more package and one or more board such as a printed circuit board PCB . Each of the die the board and the package constitutes a fabric for exchanging electrical signals between the various electrical components.

The electronic components or objects in the electronic system are interconnected with signal paths that carry electrical signals into and out of an IC die through a package substrate to the package input output connectors across the multiple fabrics. The signal path traverses multiple fabrics through package balls wirebonds vias to interconnect the electronic components.

The related art RF system of also includes a RF coupler provided on the PCB. The RF coupler is connected to a capacitor via an interconnection . The RF coupler is also connected to an inductor on the PCB via an interconnection .

The design of an electronic system such as the RF system of may involve multiple phases with particular requirements. For example during an exploration phase the designer of an electronic system may use quick design tools to obtain initial models for an RF signal path such as RF path . The designer may use more accurate but slower design tools to refine the initial models or obtain more accurate models at a verification phase. Moreover a design team may prefer to use one or more specific solver to model specific physical structures in an electronic system.

There are many tools targeted to verification of circuits but there is a tradeoff between specialized tools targeted towards verification of specific elements of circuits and general tools targeted towards verification of a broader range of elements and entire circuits. Verification tools addressing entire circuits are often ill suited to the verification of specialized components of a circuit. For example a circuit verification tool may be both inaccurate and slower than a more specialized verification tool when faced with a specialized component.

These structures cannot all be modeled optimally with a single electromagnetic field solver but specialized solvers exist which are capable of modeling these specific structures more quickly or with greater accuracy. For example a specialized wirebond solver may be required for accurately modeling the behavior of the interconnection between the microprocessing unit the capacitor and the wirebond interconnection . Similarly a specialized RF solver may be required to model the behavior of the interconnection from the microprocessing unit through the via . Moreover the designer may want to use a customized algorithm for modeling the transmission line between the rectangular inductor and the capacitor .

A portion of the layout for an electronic system need be extracted to use specialized solvers for particular elements of the electronic system. For instance to use a specialized wirebond solver for portion of the RF system of a designer needs extract the layout of the wirebond portion of the RF system including the microprocessing unit from the corresponding die the capacitor from the PCB and the wirebond interconnection . Similarly to use a specialized RF solver for the RF path from the RF system the designer needs to extract the layout of the elements interconnected by the RF path including the microprocessing unit the via and the connector . To use a customized algorithm for modeling the transmission line the designer needs extract the layout of the elements of the RF system that are interconnected by the T line including the rectangular inductor and the capacitor .

Simulation of behaviors of a circuit may be done using models created by solvers. If various pieces of a circuit were solved by different solvers the models must be combined to simulate behaviors of portions of the circuit which encompass pieces modeled by different solvers. However each solver may have its own format and each simulator may also have its own format.

According to the related art models generated by different solvers are combined or stitched manually to provide the output of a modeled component to the input of another modeled component and imported into a simulator or simulation test bench. However manual stitching of models is error prone.

Moreover the models generated by the solvers are generally in one or more standard formats. However the input to individual solvers may be in various formats. The manual translation of a solver s output in a format compatible with another solver s input is time consuming and also error prone.

Furthermore changes made to the layout in one or more of the fabrics require rerunning the extraction process which is also time consuming and error prone in a manual environment because of the many combinations of models required for the simulator or simulation test bench.

Circuits which are embedded in multiple fabrics present additional challenges to verification and simulation. Specialized tools may be able to extract and solve objects from any single fabric but there is a need to extract objects from multiple fabrics create models of objects which span multiple fabrics and to simulate behaviors of circuits such as RF circuits which span multiple fabrics. There may also be instances where the layout objects spanning multiple fabrics may be designed with a specific geometry and it would be desirable to recognize those geometries for potential use with specialized solvers targeted towards objects with those geometries. The current approach used to solve signal paths which pass through multiple fabrics is to manually identify special geometries from the multiple fabrics and to generate models for simulation which are stitched together manually for use in simulation.

Accordingly embodiments of the invention are directed to a method and apparatus for rule based automatic layout parasitic extraction in a multi technology environment that substantially obviates one or more of the problems due to limitations and disadvantages of the related art.

An object of embodiments of the invention is to provide a method for automatically extracting layout objects in a multi technology environment based on a specified extraction rule.

Another object of embodiments of the invention is to provide a method for binding layout objects to corresponding solvers based on a specified binding rule.

A further object of embodiments of the invention is to provide a design environment capable of comparing multiple layouts using a test bench and to update a layout based upon the results.

Additional features and advantages of embodiments of the invention will be set forth in the description which follows and in part will be apparent from the description or may be learned by practice of embodiments of the invention. The objectives and other advantages of the embodiments of the invention will be realized and attained by the structure particularly pointed out in the written description and claims hereof as well as the appended drawings.

To achieve these and other advantages and in accordance with the purpose of embodiments of the invention as embodied and broadly described a system for extracting a layout from an object in a fabric includes means for providing fabric data to a rule based layout extraction engine means for maintaining a layout extraction rule to select a layout object from the fabric data means for maintaining a binding rule to bind the layout object to a solver means for maintaining a boundary rule to specify a boundary condition for a solver and means for executing the solver on the layout object to generate a model of the object.

In another aspect a method for extracting a layout from an object in a fabric includes providing fabric data to a rule based layout extraction engine selecting a layout object from the fabric data based upon a layout extraction rule binding the layout object to a solver based upon a binding rule specifying a boundary condition for a solver based upon a boundary rule and executing the solver on the layout object to generate a model of the object.

In another aspect a computer program product includes a computer readable medium the computer readable medium including instructions which when executed by a processor causes the processor to execute a process for extracting a layout from an object in a fabric the process including providing fabric data to a rule based layout extraction engine selecting a layout object from the fabric data based upon a layout extraction rule binding the layout object to a solver based upon a binding rule specifying a boundary condition for a solver based upon a boundary rule and executing the solver on the layout object to generate a model of the object.

In another aspect a computer readable medium is provided for storing a set of instructions which when executed by a computer processing system causes the computer processing system to process input data representing the layout of an electronic circuit to extract one or more object from the layout for binding with a corresponding binding solver the set of instructions includes selecting a first object from the layout applying at least one of a plurality of layout extraction rules relating the first object to a second object from the layout the layout extraction rules including a proximity rule a cross fabric rule an extended net rule a via rule a pruning rule and a pattern matching rule extracting the first and second objects from the layout in accordance with the applied layout extraction rule and binding the extracted first and second objects to a solver in accordance with the applied layout extraction rule to generate a model of the interconnection between the first and second objects.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are intended to provide further explanation of embodiments of the invention as claimed.

Reference will now be made in detail to the preferred embodiments of the invention examples of which are illustrated in the accompanying drawings. The invention may however be embodied in many different forms and should not be construed as being limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the concept of the invention to those skilled in the art. In the drawings the thicknesses of layers and regions are exaggerated for clarity. Like reference numerals in the drawings denote like elements.

In an embodiment the physical data may include the physical layout of a SiP. In another embodiment the physical layout includes an IC layout representing a circuit like a wireless LAN WLAN device.

The physical data may be provided in different formats for layouts embedded in different fabrics. In a system design involving multiple fabrics the physical data can be converted to a common intermediate format. In an embodiment the physical data is converted to a format readable by one or more design tool to be used in the design of the electronic circuit.

At block layout objects are extracted from the physical data based on user defined layout extraction rules . A layout object may represent a physical element such as a package ball wirebond via RF element capacitor etc. A layout object may include a pattern like a meander line a shape like a spiral inductor shape or electronic components such as interdigital capacitors bond fingers etc. One or more of the layout objects may require special processing for example solving a corresponding electromagnetic or electrostatic field equation. A user may manually enter one or more of the layout extraction rules to guide the layout extraction at block .

The layout objects extracted at block are bound at block to corresponding solvers using user defined solver binding rules . Each of the solvers creates models for example for the parasitic effects of the extracted layout objects. For example a wirebond layout object might be bound to a 3D electromagnetic solver to calculate a model of the wirebond s parasitic effects.

In an embodiment one or more of the layout objects is bound to one or more solver automatically using user defined binding rules. In other embodiments the user can bind one or more of the layout objects manually to one or more specific solver. In still another embodiment one or more first layout object can be automatically bound to corresponding solvers to proceed either automatically or manually at the choice of the user thus allowing for different choices depending upon the needs of the situation.

After the binding of the layout objects the corresponding solvers are scheduled at block based on solver callbacks specified at block . The solver callbacks at block call the appropriate solvers to create models of the extracted layout objects.

The scheduling of the solvers at block is controlled based on available resources. For example in a multi process environment as shown in the solver callbacks of block can be scheduled to be performed in parallel by invoking a plurality of solver processes . In another example solver callbacks of block can be scheduled to be performed serially by invoking a single solver process .

The scheduling of the solvers at block can also be based on user defined priority rules. In an embodiment solver callbacks at block are performed automatically. Then absent user defined priority rules defining an specific ordering for calling the solvers solvers with the same priority level are scheduled based upon the order of the input data. In another embodiment a user can manually enforce a particular ordering for performing the solver callbacks at block . In other embodiments the user may choose whether calls of solvers occur automatically or with user guidance depending upon the user s needs at that particular moment.

A scheduled solver callback at block launches a corresponding solver process includes to create models of the extracted layout objects. The solver process returns the created model for the layout object to the corresponding solver callback process . When execution returns from the solver process to the solver callback the server callback frees the available resources to be reallocated to other solver processes creating a framework for forking the solver and for technology stack up. Examples of callback include SKILL procedures and C C functions loaded through a shared library. In an embodiment the solver callbacks are provided in a database. Then a table is provided for looking a corresponding function name for the solver callback during the scheduling process at block .

The solvers also make use of user defined boundary rules. Each solver may have its own format for objects. Therefore a call to a solver on a layout object will entail a conversion of the layout object to a format compatible with that solver if the format is not identical to the format of the layout object in the physical data.

The models generated by the one or more solver process are combined with other models at block . Each solver process may generate one or more type of models e.g. S parameter model type for the extracted layout objects. Moreover the extracted layout object may include an RF transmission line element having a specific shape such as a meander line MLIN or a bending line BEND depending on the routing topology. The solver process combines the generated models in accordance with the types of the generated models and the shapes of the extracted layout objects for binding with the appropriate solver such as SPICE using an appropriate format for the solver e g. XML. The combination of the generated models at block may include stitching across interfaces to provide the output of the model of one object to the input of the model of another object.

After the combination of the models at block one or more simulation is scheduled for the combined models at block . As shown in the scheduling of the simulations at block may includes invoking a plurality of simulation processes to be performed in parallel. Assignment of simulations to simulation processes may be done via standard operating system calls.

The results from the simulation process are provided at block . Each simulation result at block represents the behavior of one or more layout object or of the entire circuit. For example a simulation process may calculate the gain of an RF amplifier. Another simulation process may calculate the insertion loss of a T R switch.

In an embodiment of the invention the simulation processes can be provided to the solver integration environment in a user defined table that maps each of the simulation processes to a corresponding conversion function for converting a combination of models of parasitic effects to a compatible format for the simulation process .

In an embodiment of the invention the simulation processes provided in the user defined table are automatically called and the corresponding simulation is performed on the models generated by the solver processes at block . In another embodiment the user can specify a test bench involving one or more of the simulation processes and the specified one or more of the simulation processes is automatically performed on the models generated from the physical data . In another embodiment of the invention the user controls which simulations and when to launch the simulation. In another embodiment of the invention the user chooses whether the simulations are performed automatically or whether the user guides the creation of simulations.

According to an exemplary embodiment of the invention the physical data in may correspond to a layout for an electronic circuit spanning multiple fabric technologies in an OpenAccess database format. The OpenAccess format provides an object based e.g. C application programming interface for the IC design data which allows a user to incorporate design tools and data from multiple sources. The OpenAccess format provides a standard model for describing data to be exchanged between the various electronic design tools and an interface for invoking software modules across various electronic design automation tools.

During extraction of the layout objects at block the process determines the type of fabric underlying the particular layout object calls the appropriate extraction tool to extract layout objects from that fabric and selects the appropriate layout extraction rules to guide the extraction process. Layout objects are extracted automatically by processing the user defined extraction rules in an order defined by the user and the layout objects are automatically bound to appropriate electromagnetic field solvers according to the user defined binding rules. Scheduling of the solver callbacks is also done automatically using user defined precedence rules with callbacks assigned to each solver. The models of parasitic effects created by the solvers are automatically combined and a suite of test bench simulations are automatically performed resulting in a process guided by user defined rules which is entirely automated from layout object extraction through performing the suite of test bench simulations.

According to another exemplary embodiment of the invention the physical data in may correspond to a layout for an electronic circuit involving a single fabric. Thus extraction of the layout objects at block may target the particular fabric involved. Extraction of layout objects binding of those objects to solvers scheduling of the solvers to create models and simulation of combinations of those models are all performed automatically based on the user defined extraction rules the order defined by the user and according to the user defined binding rules.

According to yet another exemplary embodiment of the invention the physical data may correspond to a layout for an electronic circuit spanning multiple fabric technologies. One or more of the processing steps may be manually controlled by the user in accordance with user defined rules. For example the user may choose to apply a specific layout extraction rule to select particular layout objects. Moreover the user may also specify particular solver callbacks to be scheduled so that the extracted objects be bound to the specified solver callbacks . Furthermore the user can choose which a specific combination of the extracted models for simulation and manually launch the specified simulations manually.

The layout extraction rules may include for example one or more proximity rule one or more cross fabric extraction rule one or more extended net extraction rule one or more via extraction rule one or more technology extraction rule and one or more geometry extraction rule . Pattern matching rules may also be provided to be associated with the one or more geometry extraction rule .

A proximity extraction rule may specify that layout objects be selected based upon how their proximity other layout objects. For example a proximity extraction rule may include a coupling coefficient depending on an input frequency. Thus during layout object extraction at block of according to the proximity extraction rule for the selected object a range is calculated based upon the coupling coefficient and all objects falling within that range in a three dimensional layout space are extracted.

A cross fabric extraction rule may specify that layout objects in a fabric be selected based upon their interconnection with one or more other layout object in another fabric. When an object is selected during layout object extraction the cross fabric extraction rule applicable to the selected object may require for example that all metallic objects of a specified type connected to the layout object in another fabric be also extracted. For example a cross fabric extraction rule may require that for a given net in an interface connected to a fabric all metallic objects connected to the interface in one or more other fabric.

Thus according to an embodiment of the invention a cross fabric extraction rule may require the selection of devices connected to a layout object. Another cross fabric extraction rule may require selection of ports connected to a layout object. Yet another cross fabric extraction rule may select only specific metal layers encountered in another fabric. Still another cross fabric extraction rule may select any metallic object connected to a layout object in a particular fabric.

An extended net extraction rule specifies that multiple layout objects be selected if the layout objects are part of the same extended net according to the extended net extraction rule . During layout object extraction if an object in a layout is selected and the rule is an extended net extraction rule all objects within the same extended net are extracted and returned to the calling routine. For example Pcells or embedded passive components can belong to the same extended net as a layout object. As another example connected shapes or c lines in a layer might be extracted according to the extended net extraction rule to be modeled together by a solver.

A via extraction rule determines how objects connected through a via be processed by the extraction routine. For example the via extraction routine may specify that the via be extracted as an individual element. The via extraction routine may also specify that the associated tracks and or shape be extracted as a single layout entity to be sent together to the appropriate solver.

According to an embodiment of the invention a technology pruning rule may be provided to combine a plurality of technologies across multiple fabrics into a single technology. For example if an object in an IC and another object from an SiP are selected a combined technology can be generated in accordance with the technology pruning rule . The technology pruning rule may also specify additional details e.g. additional layers to be pruned. Accordingly the technology pruning rule may simplify the layout objects which are bound to solvers particularly in the case of stacked dies.

In an embodiment the specialized SiP technology pruning routine at block transfers all layers on the SiP to a multi technology file. The specialized SiP technology pruning routine at block also provides for each layer in the multi technology file an elevation relative to a base layer.

In an embodiment the specialized IC Digital technology pruning routine at block processes each layer in the current fabric to determine the elevation of the layer relative to the base layout. The specialized IC Digital technology pruning routine at block also computes the height or thickness of each layer.

If the current layer intersects a previously transferred layer the specialized IC Digital technology pruning routine at block remove all the previously transferred layers from the multi technology file. Then the specialized IC Digital technology pruning routine at block disregards the current fabric because it is not a stacked fabric.

Otherwise if the current layer does not intersect any previously transferred layer the specialized IC Digital technology pruning routine at block transfers the current layer to the multi technology file.

According to an embodiment of the invention a geometry extraction rule is provided to select groups of layout objects matching a specified geometric arrangement based upon pattern matching algorithms. A geometry extraction rule includes a geometry name and one or more of a callback to a function to determine whether the layout object matches a pattern and a database entry corresponding to the pattern. If the geometry extraction rule contains a callback function the function is called upon the layout object and a token indicating a match or not a match is returned. If a match is found the layout object is associated with the geometry name and returned. If no match is found the layout object is returned without an associated geometry.

If the geometry extraction rule contains a database entry corresponding to a pattern a point by point shape transformation and comparison is used to determine if the pattern matches the database entry. If the geometry of the layout object matches the pattern the layout object is associated with the geometry name of the extraction rule returned otherwise the layout object is returned without an associated geometry.

Geometric pattern matching can identify special elements like inductors or meander lines. In some embodiment of the invention rules containing callbacks for several pre defined shapes are included in the embodiment and thus recognizable without any intervention by the user. In an embodiment of the invention these callbacks identify inductors meander lines and coplanar wave guides realized through connect lines or shapes. In other embodiments of the invention the user defines database entries for geometric patterns and or develops his own pattern recognizing function to recognize any pattern the user desires and then defines a rule referencing that database entry or a callback to that function. In another embodiment of the invention default geometry extraction rules exist which can identify certain patterns such as meander lines inductors and co planar wave guides but which can be supplemented and or overridden by user defined geometry extraction rules.

In another embodiment of the invention each pattern matching rule is tried sequentially upon all of the objects and all object and geometry associations are returned. In another embodiment of the invention each pattern matching rule is tried sequentially upon all the objects that have not yet been associated with a geometry and objects and their associated geometries are returned.

An extracted layout object is bound to one or more solvers to model the parasitic effects of that layout object.

The methods described above can be implemented on a computer system to automate the rule based extraction of layout parasitics in a multi technology environment. For example the methods can be implemented as a computer program including a set of instructions written in a high level programming language executable on a computer or a computer system. The computer program can be provided in a computer readable medium that can be read by a computer or computer system to be loaded into an internal memory e.g. RAM of the computer or computer system. Then one or more processor of the computer or computer system can execute the program loaded into the internal memory thereof to perform the tasks described in reference to the flow charts shown in above.

The user defined rules include the layout extraction rules the solver binding rules and the solver callback rules . The layout extraction rules include the geometry extraction rules including both entries containing callback functions and entries containing references to database entries of patterns. One or more the layout extraction rules the solver binding rules and the solver callback rules can be stored on a storage area e.g. a hard drive of the computer system or a network accessible storage for the computer system.

In an embodiment the user defined rules can be represented in a simple text file stored in the storage area of the computer system. In another embodiment an xml file can also be generated to incorporate the user defined rules. In yet another embodiment the user defined rules can be specified as callbacks to be executed at run time that is when the one or more processor of the computer or computer system executes the program loaded into the internal memory thereof to perform the tasks described in reference to the flow charts shown in above.

The solver integration environment plug in connects to the layout extraction engine and can launch the process of extracting layout objects and associated geometries from physical layout data using the user define layout extraction rules including geometry extraction rules and pattern matching rules . The layout extraction rules includes a proximity rule a cross fabric rule an extended net extraction rule a via extraction rule a technology pruning rule a geometry extraction rule stored in the storage area of the computer system. New layout extraction rules may be added through the database interface provided by the plug in simply by adding an additional entry.

The solver integration environment plug in can be implemented as a software module residing on the computer system. In an embodiment the solver integration environment plug in can invoke computer software modules implementing blocks and from above respectively. Specifically the computer module implementing block includes a set of instructions which when loaded into the internal memory of the computer system and executed by the computer system causes the computer system to extract the physical data based on the user defined layout extraction rules retrieved from the storage area of the computer system and provide the extracted layout objects for example in a shared memory area of the computer system for access by other computer program modules executed by the processors in the computer system.

Once layout objects are extracted the solver integration environment plug in can automatically launch a solver assignment process for binding layout objects to solvers using user defined solver rules . The computer module implementing block causes the computer system to bind the extracted layout objects retrieved from the shared memory area of the computer system to the corresponding solvers in accordance with the user defined solver rules retrieved from the storage area or loaded in the shared memory area of the computer system. These bindings are returned to the plug in for example as output parameters from the returning callback routine or in the shared memory area of the computer system.

New solvers designed to handle specialized elements can be added at any time simply by adding a solver binding rule to the database indicating what types of objects the solver acts upon and a solver callback rule indicating how to launch the solver on objects of those types. A pattern matching rule could also be entered for the solver to act upon objects with a specific geometry not recognized by the plug in by default so that during layout extraction objects of that type are recognized as having that specific geometry.

The plug in is also connected to the solver scheduler and as bindings are returned to the plug in they are furnished to the scheduler . In an embodiment the solver scheduler includes a computer module implementing block of above. The computer module implementing block causes the computer system to launch solver execution processes on the layout objects in accordance with the user defined solver callback rules stored in the storage area of the computer system or in a shared memory thereof. The models created by the solver execution processes are returned to the plug in for example as output parameters from the returning callback routine or in the shared memory area of the computer system.

The plug in also connects to the simulation control engine . In an embodiment the simulation control engine includes a computer module implementing blocks and of above. The computer module implementing blocks and causes the computer system stitches together the models of parasitic effects of the layout objects created by the solvers and launches a test bench of user defined simulations. The simulation results are returned to the plug in for inspection for example as output parameters from the returning callback routine or in the shared memory area of the computer system.

The solver integration environment plug in the layout extraction engine the solver assignment process the solver launch engine and the solver execution process can communicate with each other through a system bus if they are all on the same computer system or through an interconnection network for example a local area network LAN or a wide area network WAN if any of the components are distributed geographically.

In another embodiment the plug in also provides the ability to manually control or override various steps of the process including the ability to manually bind a layout object to a solver and the ability to manually select models of parasitic effects to send to a specific simulation agent.

It will be apparent to those skilled in the art that various modifications and variations can be made in embodiments of rule based automatic layout parasitic extraction in a multi technology environment without departing from the spirit or scope of the invention. Thus it is intended that embodiments of the invention cover the modifications and variations of this invention provided they come within the scope of the appended claims and their equivalents.

