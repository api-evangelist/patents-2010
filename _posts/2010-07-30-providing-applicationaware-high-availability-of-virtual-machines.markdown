---

title: Providing application-aware high availability of virtual machines
abstract: Various systems and methods can provide application-aware high availability of virtual machines. For example, one method involves receiving information indicating a state of an application executing in a virtual machine. The information is received by a computing device implementing a virtual machine monitoring agent that is monitoring the virtual machine. In response to receiving the information, the method determines whether the virtual machine should be restarted, based at least in part on the state of the application executing in the virtual machine. The method then generates information indicating whether the virtual machine should be restarted, in response to making the determination.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08413144&OS=08413144&RS=08413144
owner: Symantec Corporation
number: 08413144
owner_city: Mountain View
owner_country: US
publication_date: 20100730
---
This invention relates to high availability and more particularly to providing highly available applications in virtual machines.

Virtualization systems allow multiple operating systems which can actual be separate instances of the same type of operating system to execute during the same time period on the same hardware. Each executing operating system acts as an independent virtual machine and can be interacted with and used in substantially the same manner as standalone operating system executing on independent hardware. Virtual machines allow increased usage of hardware resources by effectively turning one hardware computing device into several virtual machines.

Some virtualization systems provide a virtualization controller that can manage one or more virtual machines implemented on one or more computing devices. Such a virtualization controller can communicate with the virtual machines and control the operation of those virtual machines. In some environments the virtualization controller can even manage the virtual machines in a manner that provides high availability of the virtual machines such that if a particular virtual machine experiences a failure the virtualization controller can restart that failed virtual machine on another computing device. Unfortunately in conventional virtualization systems that provide highly available virtual machines it may not be possible to also efficiently make an application that executes within a highly available virtual machine highly available.

Various systems and methods for providing application aware high availability of virtual machines are disclosed. For example one method involves receiving information indicating a state of an application executing in a virtual machine. The information is received by a computing device implementing a virtual machine monitoring agent that is monitoring the virtual machine. In response to receiving the information the method determines whether the virtual machine should be restarted based at least in part on the state of the application executing in the virtual machine. The method then generates information indicating whether the virtual machine should be restarted in response to making the determination. If the information indicates that the virtual machine should be restarted generation of the information will cause the virtual machine to be restarted e.g. this can be state information accessed by a cluster controller which will restart the virtual machine based upon the value of the state information . In one embodiment the determination is made by an agent executing in a virtual machine monitor.

Receiving the information can involve accessing state information associated with a cluster service group. The method can also involve identifying an order in which the plurality of applications should be stopped or started e.g. based upon dependencies between cluster service groups .

In some embodiments receiving the information involves receiving information identifying an operating status of each of several applications executing in the virtual machine. In such embodiments the determination can be based upon the operating status and a priority of each of the applications. The method can determine that the virtual machine should not be restarted in response to the information identifying that a higher priority application of the plurality of applications is executing properly and a lower priority application of the plurality of applications is failed. Alternatively the method can determine that the virtual machine should be restarted in response to the information identifying that a higher priority application of the plurality of applications is failed and a lower priority application of the plurality of applications is executing properly.

The method can also involve generating the information indicating the state of the application. This operation can be performed by an application monitoring agent executing outside of the virtual machine where the application monitoring agent obtains the state of the application by interacting with an operating system interface provide by an operating system of the virtual machine. In some embodiments the method can involve deciding that the application monitoring agent should attempt to restart the application in response to the operating system interface indicating that the application is not operating properly where the attempt to restart the application takes place prior to the determination as to whether the virtual machine should be restarted. The method can also involve starting or stopping the application by interacting with the operating system interface provided by the operating system of the virtual machine this can be done even if no failure is detected .

An example of a system can include one or more processors and memory coupled to the one or more processors. The memory stores program instructions executable to perform a method like the one described above. Similarly such program instructions can be stored upon a computer readable storage medium.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail consequently those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects inventive features and advantages of the present invention as defined solely by the claims will become apparent in the non limiting detailed description set forth below.

While the invention is susceptible to various modifications and alternative forms specific embodiments of the invention are provided as examples in the drawings and detailed description. It should be understood that the drawings and detailed description are not intended to limit the invention to the particular form disclosed. Instead the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims.

The virtual machines VM VM each provide a self contained instance of an executing operating system. VMs executing on the same computing device can be implemented using the same or different operating systems. In one embodiment the VMs execute an operating system from the Windows family of products available from Microsoft Corporation of Redmond Wash. A client interacting with a VM will typically interact in exactly the same manner that a client would interact with a standalone operating system operating on independent hardware. The virtual machines and virtual machine monitors can be implemented using virtualization software such as that in the HyperV family of products available from Microsoft Corporation of Redmond Wash. The virtual machine monitors can execute directly on the hardware of their respective computing devices while the VM operating systems operate within their respective virtual machine monitors. Each virtual machine monitor is configured to monitor the state of each VM on the same computing device to identify whether each VM is executing properly. In response to detecting the failure of a VM a virtual machine monitor can restart the failed VM on another computing device.

The two computing devices and can be coupled to communicate via a network such as the Internet. In some embodiments the computing devices can be located in the same geographical vicinity e.g. in the same room building or city . In other embodiments such as those that facilitate disaster recovery the computing devices may be geographically remote from each other e.g. in different cities states or even countries .

One or more applications executes within each of the VMs. For simplicity only a single application is illustrated within each VM of however multiple applications may execute within each VM in other situations. Such applications can be database applications mail servers and the like. Here application A executes in VM application B executions in VM application A executes in VM application B executes in VM application executes in VM application A executes in VM application B executes in VM and application C executes in VM .

The type of application executing on a given VM can be the same or different than the type of application executing on another VM within the same virtualization system. Here the same types of applications are assigned the same parenthetical numerical while different instances of the same type of application are assigned different alphabetic identifiers. Thus applications A and B are different instances of the same type of application.

Computing devices and are coupled to a shared storage device by a storage area network or other network. Various applications executing on computing devices and can store information on shared storage device .

At least two monitoring agents a special type of application execute within each virtual machine monitor. In this example a single VM monitoring agent executes in each virtual machine monitor. VM monitoring agent executes in virtual machine monitor and is configured to provide monitoring of VMs executing on computing device . VM monitoring agent executes in virtual machine monitor and is configured to provide monitoring of VMs executing on computing device . VM monitoring agents and monitor the state of each VM on the same computing device by monitoring shared storage the configuration information for the monitored virtual machines the operating status e.g. failed operating properly or intentionally taken offline of the monitored virtual machines and the like.

In this example each VM monitoring agent monitors all of the VMs executing on the same computing device as the VM monitoring agent. However in alternative embodiments there may be more than on VM monitoring agent per computing device or even a one to one correspondence between VM monitoring agents and the VMs being monitored.

The second type of monitoring agent is an application monitoring agent configured to monitor one or more instances of a specific type of application executing in VMs on the same computing device as the application monitoring agent. Each application monitoring agent is configured to monitor the state of one or more applications executing within the same VM which allows a decision making agent decide whether the monitored state requires any action to be taken and to provide information indicative of the monitored state to a decision making agent e.g. in the form of status information associated with a cluster service group as described in more detail below .

In this example each application monitoring agent executes in a separate partition than the application s monitored by that application monitoring agent. The application monitoring agents are configured to remotely communicate with each VM operating system OS e.g. using interfaces such as the Windows Management Instrumentation WMI or remote WIN32 application programming interface API provided in the Windows family of operating systems in order to obtain information about the state of the applications executing within the VM.

A decision making agent executes in each virtual machine monitor and receives information generated by the VM and application monitoring agents in the same virtual machine monitor. Based upon the monitored state of the VMs and or applications the decision making agent can decide whether an application or a VM should be restarted.

As shown application monitoring agent executes in virtual machine monitor and monitors the state of type 1 applications A in VM and B in VM . Application monitoring agent executes in virtual machine monitor monitors the state of type 2 applications A in VM and B in VM . Application monitoring agent executes in virtual machine monitor and monitors the status of type 3 application in VM . Application monitoring agent executes in virtual machine monitor and monitors the state of type 4 applications A in VM B in VM and C in VM .

Decision making agent executes in virtual machine monitor and makes decisions based upon the statuses monitored by application monitoring agents and and VM monitoring agent . Decision making agent executes in virtual machine monitor and makes decisions based upon the statuses monitored by application monitoring agents and and VM monitoring agent .

While illustrates an embodiment in which a single application monitoring agent can monitor multiple applications of the same type alternative embodiments may employ multiple monitoring agents per type such that for example there is a one to one correspondence between applications being monitored and application monitoring agents. Alternatively alternative embodiments may employ a single monitoring agent to monitor all types of applications on the same computing device regardless of the number of and different types of applications executing on that computing device.

In some embodiments the decision making and VM and application monitoring agents are implemented as VERITAS Cluster Server VCS agents available from Symantec Corp. of Mountain View Calif. In such embodiments the virtual machine monitors can be configured as nodes of a cluster. Here virtual machine monitors and form a two node cluster. The VM monitoring agents can each be configured as a service group of a respective cluster. Thus VM monitoring agent can be configured as a service group in the node containing virtual machine monitor and VM monitoring agent can be configured as a service group in the node containing virtual machine monitor . Each application monitoring agent can also be configured as a service group of the cluster. Thus application monitoring agents can be configured as respective service groups in the node containing virtual machine monitor and application monitoring agents can be configured as respective service groups in the node containing virtual machine monitor . Alternatively the VM and application monitoring agents within the same node may be configured as a single service group. The decision making agents can be configured as part of the cluster controller. The VM and application monitoring agents can each be configured with the same information identifying acceptable failover nodes on which a VM monitored by those agents can be restarted. In the case of the application monitoring agents the configuration information can also uniquely identify the operating systems of each VM s in which those application monitoring agents are monitoring applications.

In embodiments in which the VM and application monitoring agents are configured as different service groups a dependency can be created between the VM monitoring agent and the application monitoring agents in the same node of the cluster i.e. within the same virtual machine monitor . For example each application monitoring agent can be configured as one or more resources that are entirely within a service group corresponding to that specific application monitoring agent which are in turn entirely within a service group corresponding to the VM monitoring agent on the same VM. Alternatively a dependency can be created between the VM and application monitoring agents. Creating a dependency regardless of the technique used allows the decision making agent to determine the order in which applications should be restarted after the virtual machine in which those applications execute is restarted. The dependencies between service groups can also identify the order in which the applications should be stopped before stopping the virtual machine in which those applications execute e.g. in order to restart the virtual machine .

In this example the cluster can be configured so that if the decision making agent decides that a VM needs to be restarted the decision making agent will communicate this decision to the appropriate VM monitoring agent which will then indicate that the VM should be restarted by setting state information associated with the VM e.g. to indicate that the VM is failed . If a VM monitoring agent indicates that a VM needs to be restarted that VM will be restarted on another computing device e.g. by the cluster controller . Thus if VM monitoring agent indicates that VM needs to be restarted e.g. by setting state information associated with a service group to indicate that VM is failed such that a cluster controller not shown can read the state information VM will be restarted. Alternatively setting the state information can cause the VM monitoring agent to restart the VM. The VM can be restarted on the same or on another computing device other than computing device .

As described above application monitoring agents will monitor applications and communicate the results of the monitoring to a decision making agent which will decide whether to take no action e.g. if the application is executing properly and or has been intentionally taken offline cause a failed application to be restarted e.g. if a number of retry attempts for the application has not been exceeded or cause a VM containing a failed application to be restarted. The decision making agent can cause a VM containing a failed application to be restarted by communicating information indicating that the application has failed to the appropriate VM monitoring agent.

For each monitored application an application monitoring agent can detect whether that application is executing properly. In at least some embodiments an application monitoring agent can also distinguish between whether a non executing application is not executing due to failure or due to being intentionally taken offline. For example an application monitoring agent can provide an interface e.g. a graphical user interface command line interface or the like via which an administrator can inform the application monitoring agent that an application is being taken offline and the application monitoring agent can in response update state information associated with the monitored application to indicate that the application is intentionally offline. When the application monitoring agent detects that an application is not executing the application monitoring agent can check e.g. by accessing stored information associated with the application to see whether an administrator indicated that the application was being taken offline prior to the application ceasing execution. When an application is restarted after being intentionally taken offline the administrator can again e.g. via the interface inform the application monitoring agent about the change in application status. Alternatively the application monitoring agent can simply detect that the application has been restarted the next period and clear any state information previously associated with that application.

In addition to allowing an administrator to indicate when applications are being intentionally taken offline in order to distinguish applications in that state from applications that have failed the application monitoring agents can also allow the administrator to stop and start applications via the application monitoring agents. In other words the application monitoring agents can allow the administrator to select an application to be stopped or started. In response to an administrator selecting an application the application monitoring agent can communicate with the operating system of the VM in order to stop or start the application as specified by the administrator. The application monitoring agent may also start or start applications in other situations e.g. as part of the VM in which those applications execute being stopped or started absent direct involvement of an administrator. Accordingly the application monitoring agent can stop and start applications within the VM from outside of the VM.

As described above the monitoring agent identifies whether each monitored application is executing properly or not. If not the monitoring agent at least in some embodiments further distinguishes whether the application is not executing due to failure or due to being intentionally taken offline. The monitoring agent can generate information describing the application and its detected execution state and provide this information to the decision making agent. For example application monitoring agent can detect that application A has failed and can provide information e.g. in the form of status information for the service group containing application monitoring agent that can be read by the decision making agent indicating that application A is failed to decision making agent .

If there is only a single monitored application in a VM the decision making agent for that application can simple decide what action to take if any for that VM based upon the state of that single application. The decided upon action is effected by generating information describing the ultimate state of the application s on a given VM and providing that information to a VM monitoring application. If the application is executing normally the decision making agent can decide to take no action. This action can be effected by simply setting state information e.g. as associated with a service group corresponding to the application to indicate that the application is executing normally. If the application has failed the application monitoring agent and or decision making agent can decide to try to restart the application and or to restart the VM containing the application. In the latter situation restarting the VM containing the application effectively restarts the failed application. If the application has been intentionally taken offline i.e. if the application is not executing but has not experienced a failure the decision making agent can decide that there is no need to take further action. The decision making agent can obtain the state of each monitored application make a decision based on that state and generate information accessible by the VM monitoring agent indicating that state and or decision repeatedly throughout the operation of the system e.g. once per pre defined monitoring period .

If multiple applications are being monitored on a single VM the decision making agent will use the status of each monitored application as detected by the application monitoring agents for each type of application being monitored in the VM to decide which action to take based upon the status and a priority of each application. The application priorities can be configured by an administrator e.g. by entering information via a command line interface or a graphical user interface and stored by the decision making agent.

In general when there are multiple applications in a VM a decision making agent will give more weight to the status of a higher priority application than a lower priority application when making its decision. Any of a variety of different algorithms that takes application priority into account can be used to implement this process. For example a simple algorithm can simply evaluate the status of the highest priority application and make the determination based on that application s status. If the highest priority application is executing properly the decision making agent can decide that no further action needs to be taken regardless of the state of any lower priority application. Similarly even if all lower priority applications are operating properly the decision making agent can decide that the VM should be restarted if the highest priority application has failed. In this example all of the weight is given to the status of the highest priority application.

Other algorithms can allocate more weight to lower priority applications than the above example which allocated no weight to any application other than the highest priority one. For example one algorithm can compare the sum of the priorities of failed applications being monitored within the VM to the sum of the priorities of the properly executing applications being monitored within the VM. If the sum corresponding to failed applications is greater the decision making agent can decide that the VM should be restarted if the failed application s cannot be restarted by their respective application monitoring agents . Similarly if the sum corresponding to properly executing applications is greater the decision making agent can decide that the VM does not need to be restarted. If the sums are equal the decision making agent can in one embodiment decide to restart the VM. Another algorithm can compare the sum of priorities of properly executing and intentionally offlined applications to the sum of priorities of failed applications. If the former sum is greater the decision making agent will decide that the VM does not need to be restarted. If the latter sum is greater the decision making agent will generate status information indicating that the VM has failed causing the VM monitoring agent to restart the VM.

In some embodiments instead of automatically communicating the failed status of a failed application to a decision making agent as soon as the failure is detected the application monitoring agent may instead first decide that the application monitoring agent should attempt to restart the failed application. The application monitoring agent can be configured e.g. by an administrator entering information via an interface with a maximum number of retry attempts to allow that can control the number of times this decision is reached for a failed application before the application monitoring agent instead communicating the status of the failed application to a decision making agent.

As noted above various information used to control each application monitoring and or VM monitoring agent can be configured by an administrator entering information via an interface. This information can vary from VM to VM and from application to application. Thus in one VM an administrator can select to have Application A have a higher priority than was assigned to an instance of Application A in another VM.

The method begins when an application monitoring agent executing within the virtual machine monitor detects the state of an application executing within a virtual machine e.g. by remotely communicating with the virtual machines operating system OS as shown at . Performance of operation may involve a service group agent monitoring the status of the application being monitored and generating information indicating the monitored status.

If the monitored application is executing properly as determined at the application monitoring agent can generate status information e.g. for a service group associated with the application monitoring agent indicating that the application is operating properly as shown at . If the application is not executing properly a decision can be made as to whether the application is failed or has been intentionally taken offline as shown at . If the application has been intentionally taken offline the monitoring agent will generate information indicating that the application is operating properly as shown at and since there is no need for the monitoring agent to attempt to restart the application or the VM containing the application in this situation. Performance of operation can involve an application monitoring agent detecting the state of the application using information entered by an administrator in the case of the application having been intentionally taken offline.

If the application is failed the application monitoring agent will determine whether an option to attempt to restart the application is available as shown at . Performance of operation can involve accessing information entered by an administrator indicating an acceptable number of times to attempt to restart the application before reporting the application as being failed to a decision making agent. If restarting the application is an available option the application monitoring agent will attempt to restart the application as shown at . If restarting the application is not an available option or if the attempt to restart the application failed the application monitoring agent will generate information indicating that the application has failed and make this information accessible to a decision making agent as shown at . The decision making agent can request that the VM monitoring agent restart the VM based on the priority of the faulted application if there are multiple applications executing within the VM.

The method of begins at when a VM monitoring agent detects the operating state e.g. executing properly failed or intentionally taken offline of each of one or more VMs. Detecting this operating state also involves accessing information generated by a decision making agent. The decision making agent detects the state of one or more applications executing on each monitored VM as generated by one or more application monitoring agents e.g. by accessing service group state information for each of those application monitoring agents . If there are multiple applications within a single monitored VM the decision making agent can also detect the priorities of each of those monitored applications e.g. by accessing configuration information entered by an administrator to identify those priorities .

At the VM monitoring agent determines whether a given VM is operating properly which includes the decision making agents determination as to how to handle the applications within the VM. If there are multiple applications executing on the VM of which some but not all of the applications are operating properly the decision making agent can use one of the algorithms described above to reach this decision or any other algorithm that takes the application priorities into account.

If the VM and the desired applications are executing properly as detected at or if the VM and or the desired applications have been intentionally taken offline as detected at the VM monitoring agent generates state information indicating that the VM is operating properly. This state information can then be read by a cluster controller which will determine that the VM does not need to be restarted if the state information indicates that the VM is operating properly.

If the desired applications and or the VM are not executing properly the VM monitoring agent can determine e.g. in response to the decision making agent having looked at the operating status of the highest priority application by comparing the sums of priorities of failed and intentionally offlined applications or the like whether the desired applications are failed as shown at . If the desired applications are failed the VM monitoring agent can then determine whether restart of the VM is an available option as shown at . If so the VM monitoring agent can attempt to restart the VM within the same computing device as shown at . If restart of the VM is not an available option the VM monitoring agent will set state information e.g. for a service group associated with the VM monitoring agent to indicate that the VM has failed as shown at which will in turn cause a cluster controller to restart the VM on another computing device.

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the embodiments described and or illustrated herein. For example processor may perform and or be a means for performing all or some of the operations described herein. Processor may also perform and or be a means for performing any other operations methods or processes described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation random access memory RAM read only memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of a VM monitoring agent e.g. one of VM monitoring agents from application monitoring agent e.g. one of application monitoring agents of and or decision making agent e.g. one of decision making agents of may be loaded into system memory .

In certain embodiments computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure . In certain embodiments memory controller may perform and or be a means for performing either alone or in combination with other elements one or more of the operations or features described and or illustrated herein.

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Serial Advanced Technology Attachment SATA and external SATA eSATA host adapters Advanced Technology Attachment ATA and Parallel ATA PATA host adapters Fibre Channel interface adapters Ethernet adapters or the like.

Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system . A storage device like primary storage device can store information such as configuration information e.g. indicating the priority of applications and the number of retry attempts per application as described above.

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in .

Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable storage medium. Examples of computer readable storage media include magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. CD or DVD ROMs electronic storage media e.g. solid state drives and flash media and the like. Such computer programs can also be transferred to computing system for storage in memory via a network such as the Internet or upon a carrier medium.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the embodiments described and or illustrated herein. Additionally or alternatively one or more of the embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an application specific integrated circuit ASIC adapted to implement one or more of the embodiments disclosed herein.

Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a wide area network WAN a local area network LAN a personal area network PAN or the Internet. In one example client systems and or and or servers and or may include decision making agents VM monitoring agents and or application monitoring agents as shown in .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent network attached storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers and may also be connected to a storage area network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between multiple storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

In some examples all or a portion of the system shown in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In addition one or more of the components described herein may transform data physical devices and or representations of physical devices from one form to another. For example an application monitoring agent and or a VM monitoring agent in may transform the configuration of a virtualization system by causing a virtual machine to be restarted on another host.

Although the present invention has been described in connection with several embodiments the invention is not intended to be limited to the specific forms set forth herein. On the contrary it is intended to cover such alternatives modifications and equivalents as can be reasonably included within the scope of the invention as defined by the appended claims.

