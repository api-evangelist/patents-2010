---

title: Method and apparatus for generating a language independent document abstract
abstract: A method of extracting significant phrases from one or more documents stored in a computer-readable medium. A sequence of words is read from the one or more documents and a score is determined for each word in the sequence based on the length of the word. The score for each word in the sequence is compared against a threshold score. The sequence of words is indicated to be a significant phrase if the number of words in the sequences that have a score greater than the threshold score equals or exceeds a predetermined number. A sentence containing the sequence of words is retrieved from the document, if the sequence of words is a significant phrase. An abstract of the document is searched to determine if the sentence has been previously included in the abstract. If not, the sentence is added to the abstract.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08005665&OS=08005665&RS=08005665
owner: Schukhaus Group GmbH, LLC
number: 08005665
owner_city: Dover
owner_country: US
publication_date: 20100723
---
This application is a continuation of U.S. application Ser. No. 12 239 495 filed Sep. 26 2008 which is a continuation of U.S. application Ser. No. 11 018 045 filed Dec. 21 2004 now U.S. Pat. No. 7 447 626 which is a continuation of U.S. application Ser. No. 09 619 025 filed Jul. 19 2000 now abandoned which is a continuation in part of U.S. application Ser. No. 09 165 675 filed Sep. 28 1998 now U.S. Pat. No. 6 104 990.

The present invention relates to the field of computerized linguistic analysis and document management. More specifically the present invention relates to automatic language independent identification of significant sentences in a machine readable document.

To ease the burden of sifting through the enormous volume of electronically available information modem computer systems and other machines are often used to extract meaningful content from stores of information and to organize the content for a human operator. Many information dispensing services employ some sort of language analyzer for this purpose.

Machine implemented language analyzers are usually one of two general types referential analyzers and mathematical analyzers. Referential analyzers also called semantic analyzers typically use a combination of syntactic analysis and definitional analysis to identify significant phrases in a document. Syntactic analysis is used to parse paragraphs sentences or other sequence of words into phrases and to remove conceptually insignificant terms such as conjunctions articles and prepositions. Definitional analysis involves identifying significant phrases by reference to the dictionary definitions of the terms constituting each phrase. Typically numeric weights are assigned to the words in a phrase according to their definitional significance and the average sum or some other combination of the weights is used to represent the definitional significance of the phrase. Because the definitional significance of the phrase is expressed as a numeric value sometimes called a relevance code numeric thresholds can often be used to discriminate between significant and insignificant phrases according to application needs.

Referential analyzers suffer from a number of disadvantages due mostly to their reliance on the definitional significance of words. First some sort of database of words and their respective numeric weights is usually required. The database consumes memory and makes for relatively slow linguistic analysis because a separate database search is usually required for each word in a phrase. Another disadvantage of referential analyzers is that they are language dependent requiring a different database of words for each language as well as specialized databases for different industries and fields. This places a significant burden on developers of referential analyzers and limits the applicability of systems that incorporate referential analyzers to the particular languages for which word databases are provided.

Mathematical analyzers perform linguistic analysis by measuring the relative frequency of occurrence of stemmed words. A stemmed word is a word that has been reduced to its root form by removing inflectional elements e.g. indications of plurality tense case and so forth and by truncating declensional and conjugative forms of the word. Groups of stemmed words having a relatively high frequency of occurrence relative to other stemmed words are considered to be significant phrases.

Unfortunately mathematical analyzers suffer from many of the same disadvantages as referential analyzers. A database of stemmed words and their various inflected forms is usually required. As with referential analyzers the database consumes memory and makes for relatively slow linguistic analysis because a separate database search is usually required for each word in a phrase to determine whether there is a corresponding stemmed word. Mathematical analyzers are also language dependent and require a different database of words for each different language. As with referential analyzers the language dependence of mathematical analyzers places a significant burden on developers of mathematical analyzers and limits applicability of systems that incorporate mathematical analyzers to the particular languages for which stemmed word databases are provided.

A method of extracting significant phrases from one or more documents stored in a computer readable medium is disclosed. A sequence of words is read from the one or more documents and a score is determined for each word in the sequence based on the length of the word. The score for each word in the sequence is compared against a threshold score. The sequence of words is indicated to be a significant phrase if the number of words in the sequences that have a score greater than the threshold score equals or exceeds a predetermined number.

A sentence containing the sequence of words is retrieved from the document if the sequence of words is a significant phrase. An abstract of the document is searched to determine if the sentence has been previously included in the abstract. If not the sentence is added to the abstract.

Other features and advantages of the invention will be apparent from the accompanying drawings and from the detailed description that follows below.

According to embodiments disclosed herein automatic phrase extraction is performed by analyzing a sequence of words and identifying sequences of relatively long or otherwise significant words to be significant phrases. Because phrase extraction is performed without regard to word definitions and without the need to reduce words to their stemmed form phrase extraction according to embodiments described herein can be performed significantly faster and with less system resources than the above described prior art techniques. Further because dictionary definitions and language specific stemming information is not required to extract phrases from a document the methods and apparatuses disclosed herein may be used to extract phrases in virtually any alphabet oriented language without knowledge of the language beyond the particular punctuation marks and other symbols used to delimit words and groups of words from one another.

As discussed below at least one embodiment of the linguistic analysis engine includes an interface to receive additional symbols that constitute word and phrase delimiters. This interface can be used to tailor the operation of the linguistic analysis engine according to application needs.

At block a score is assigned to each word in the sequence of words based on the length of the word. As discussed below the score may be increased if certain factors are present. For example the score of a word may be increased by a predetermined amount for each letter in the word that is capitalized. Also well known abbreviations and acronyms may be assigned increased scores. At block the score for each word is compared against a threshold score. At block the number of words having a score greater than the threshold score is determined and compared against a threshold number. If the number of words having a score greater than the threshold score exceeds the threshold number the sequence of words is considered to be a significant phrase.

At block a phrase buffer a phrase word count and a qualified word count are each cleared to prepare to accumulate a new phrase. The phrase buffer as its name implies is used to accumulate phrases that are conditionally added to the phrase list. The phrase word count is used to determine the total number of words in the phrase buffer and the qualified word count is used to determine the total number of qualified words in a phrase buffer. The purpose of the qualified word count is to indicate the extent to which insignificant words have been appended to a phrase. This operation is made clear in the following description.

At decision block execution of the method proceeds to block if the end of the document is detected and to block if the end of the document is not detected. At block a token is read from the document at the position pointed at by the document pointer and the pointer is advanced to point to the next token. Herein a token refers to either a word or a phrase delimiter so that in each read operation in block either the next word in a sequence of words or a phrase delimiter e.g. a period comma question mark etc. is read. The token evaluated at block to determine whether it is a phrase delimiter. If the token is a phrase delimiter execution proceeds to block . If the token is not a phrase delimiter the token is considered to be the current word and execution proceeds to block decision block . At decision block the current word is inspected to determine if it satisfies some other phrase delimiting criteria. For example in one embodiment a word longer than a predetermined length e.g. 40 characters is treated as a phrase delimiter. Also if a word is purely numeric and longer than a predetermined length it may be treated as a phrase delimiter. If the word does satisfy a phrase delimiting criteria in block execution proceeds to block otherwise execution proceeds to block . At block the score of the current word is calculated. According to one embodiment the score of a word is equal to the number of characters in the word plus an increment by one for example for each capitalized letter in the word. Word scores may be incremented for other particularities without departing from the scope of the present invention. At block the score of the current word is used to update a running average of word scores. In one embodiment the initial average word score set in block is weighted by a predetermined number e.g. 4 so as to have a stabilizing effect on the average computed for the first few word scores. For example if the average word score had been initialized to five in block and then word scores of nine eight one and seven had been computed in successive executions of block the running average of word scores computed in block would be Running Average 4 5 9 8 1 7 4 4 5.625

Also in at least one embodiment the running average is not permitted to fall below a predetermined minimum e.g. 4 . This value may be modified by a user.

At block the current word is added to the accumulated phrase buffer if appropriate. The logic of block is described below in reference to . From block execution loops back to decision block to determine if the end of the document has been reached and if not to read and process the next token read from the document. If the end of the document is detected at block block is executed to determine whether to add contents of the phrase buffer to the list of phrases. The logic of block is described in further detail below in reference to .

At block a sentence containing the phrase is retrieved from the document if the phrase is determined to be added to the phrase list. In one embodiment the document is searched and the sentence containing the phrase is located. If the execution of block determines that the contents of the phrase buffer should be added to the list of phrases then the sentence is retrieved. At decision block an abstract of the document is searched to determine if the retrieved sentence is included in the abstract. In one embodiment the abstract consists of concatenated sentences that contain phrases being added to the phrase list. If the sentence is included in the abstract then at block the phrase list is returned to the entity that invoked the linguistic analysis. Otherwise if the sentence is not included in the abstract at block the sentence is added to the abstract. In one embodiment the sentence is concatenated to the other sentences within the abstract.

As discussed above if the token is determined to be a phrase delimiter in block or if the token satisfies a phrase delimiting criteria in block execution proceeds to block .

Similar to the above discussion at block a sentence containing the phrase is retrieved from the document if the phrase is determined to be added to the phrase list. In one embodiment the document is searched and the sentence containing the phrase is located. If the execution of block determines that the contents of the phrase buffer should be added to the list of phrases then the sentence is retrieved. At decision block an abstract of the document is searched to determine if the retrieved sentence is included in the abstract. In one embodiment the abstract consists of concatenated sentences that contain phrases being added to the phrase list. If the sentence is included in the abstract then at block the phrase list is returned to the entity that invoked the linguistic analysis. Otherwise if the sentence is not included in the abstract at block the sentence is added to the abstract. In one embodiment the sentence is concatenated to the other sentences within the abstract.

Next at block the list of phrases is returned and the process ends. Execution then loops back to block to prepare to accumulate the next phrase in the document. As mentioned the logic of block is described in further detail below in reference to .

In an alternate embodiment subsequent to the execution of block if the phrase within the phrase buffer is determined to be added to the phrase list and the phrase list is returned at block each phrase within the phrase list may be retrieved and blocks and may be executed to form the abstract.

In yet another alternate embodiment blocks through may be executed after a phrase list has been returned at block . In this embodiment different abstracts may be created based on the number of phrases selected as significant and stored within the phrase list.

Returning to if the current word is found in the table of fixed length words then a corresponding score for the current word is retrieved from the table at block and used as the score of the word. If the current word is not found in the table of fixed length words then the length of the word is determined at block and the number of capitalized letters in the current word is determined at block . The score for the current word is then determined based as a function of the length of the current word and the number of capitalized letters. For example in one embodiment the score is the sum of the word length and the number of capitalized letters. Other functions for determining the score based on the word length the number of capitalized letters or both may be used without departing from the scope of the present inventions. After the score is determined at block or retrieved at block execution returns to the calling block.

Returning to decision block if the threshold score is not exceeded then the word is considered to be a short word and execution proceeds to decision block . At decision block the qualified word count is evaluated to determine whether the phrase buffer contains any qualified words. If not the word is not added to the phrase buffer and execution returns to the calling block in . The effect of the operation is to ignore short words that begin a phrase.

If at decision block the qualified word count is determined to be a greater than zero i.e. there is at least one qualified word in the phrase buffer then at decision block the phrase buffer is inspected to determine whether the phrase buffer contains any short words. In one embodiment a Boolean variable is set when a short word is added to the phrase buffer and cleared when the phrase buffer is cleared. If there are no short words in the phrase buffer then execution proceeds to block where the current short word is entered into the phrase buffer and then to block to increment the phrase word count as described above. In the embodiment that includes the Boolean variable that is set when a short word is added to the phrase buffer then Boolean variable would be set when the short word is added to the phrase buffer at block .

Returning to decision block if there is a short word or short words in the phrase buffer then at decision block the word most recently added to the phrase buffer is inspected to determine whether it is a short word. If not execution proceeds to block to conditionally add the phrase to the list after which execution of the method returns to the calling block in . The logic of block is described in further detail below in reference to .

If the word most recently added to the phrase buffer is determined to be a short word then the phrase buffer is inspected at block to determine if the last N words added to the phrase buffer are also short words. If so then block is entered to conditionally add the phrase to the list. If the last N words added to the phrase buffer are not short words then blocks and are entered as described above before returning to the calling block in .

Reflecting on the above described operation for determining whether to add the current word to the phrase buffer it will be noted that in the embodiment described sequences of N short words are treated as phrase delimiters see block . Also by the operation of block a phrase generally will not have more than a single sequence i.e. one or more of short words embedded between qualified words. In alternate embodiments the number of separate sequences of embedded of short words may be increased. Further referring to the operation at block the purpose of the assignment of the phrase word count plus 1 to the qualified word count should be clear the qualified word count tracks the phrase word count except for short words added to the end of a phrase. Consequently if a phrase ends with one or more short words the qualified word count will not reflect the addition of the short words to the phrase buffer and thus the qualified word count can be used to limit the phrase to the qualified words and any short words embedded between qualified words.

In one embodiment a phrase extraction engine that operates as described above is implemented by execution of a program of instructions in a processor. The program of instructions includes software routines which can be called by application programs to initialize the phrase extraction engine and to control the output generated by the phrase extraction engine. The software routines that can be called by application programs define an application programming interface API and in one embodiment includes routines that can be called to provide a pointer to a document to be processed by the phrase extraction engine provide a verbosity setting to the phrase extraction engine to control the verbosity of phrases considered by the phrase extraction engine to be significant phrases provide to a table of fixed length words that can be referenced by the phrase extraction engine provide to the phrase extraction engine a list of characters or sequence of characters that are considered to be phrase delimiters provide to the phrase extraction engine a list of characters or sequences of characters that are considered to be word delimiters provide to the phrase extraction engine a list of characters or sequences of characters that constitute the alphanumeric character set used in a particular language and so forth.

Still referring to a refine button is provided to allow the user to further control the display of the list of significant phrases in the phrase window . When the user clicks the refine button a small refine window is displayed showing two options a set phrase refine option and a clear phrase refine option. If the user selects the set phrase refine option a set refine specification window is displayed to allow the user to enter a word a phrase or a Boolean expression in a specification box to narrow the list of significant phrases displayed according to the specification entered by the user. Foe example if the user wants to see the significant phrases that contain the word information but not the word informative the user would enter the following in the specification box information AND NOT informative . The clear phrase option can be selected by the user to restore the full list of significant phrases to the phrase window .

The processing unit may include one or more general purpose processors one or more digital signal processors or any other devices capable of executing a sequence of instructions. When programmed with appropriate instructions the processing unit may be used to implement the above described embodiments of a phrase extraction engine.

The communication device may be a modem area network card or any other device for coupling the processing system to a computer network. The communications device may be used to generate or receive a signal that is propagated via a conductive or wireless media. The propagated signal may be used for example for obtaining pages of text images or other documents from a server computer on the World Wide Web or other network or for receiving updated program code or function extending program code that can be executed by the processing unit to implement embodiments of the present invention.

The memory may include both system memory and non volatile storage devices such as magnetic tape magnetic disk optical disk electrically erasable programmable read only memory EEPROM or any other computer readable medium. As shown in the memory may be used to store program code for performing the above described processing operations required to implement a phrase extraction engine and to implement the above described user interface of an application program. In one embodiment when power is applied to the processing system operating system program code is loaded from non volatile storage into system memory by the processing unit or another device such as a direct memory access controller not shown . Sequences of instructions comprised by the operating system are then executed by processing unit to load other sequences of instructions including the above described application programs from non volatile storage into system memory. Thus embodiments of the present invention may be implemented by obtaining sequences of instructions from a computer readable medium including the above described propagated signal and executing the sequences of instructions in the processing unit .

Having described a processing system for implementing embodiments of the present invention it should be noted that the individual processing operations described above may also be performed by specific hardware components that contain hard wired logic to carry out the recited operations or by any combination of programmed processing components and hard wired logic. Nothing disclosed herein should be construed a limiting the present invention to a single embodiment wherein the recited operations are performed by a specific combination of hardware components.

