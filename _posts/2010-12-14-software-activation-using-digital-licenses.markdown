---

title: Software activation using digital licenses
abstract: Systems and methods are provided for activation of software that uses digital licenses. In some embodiments, a software vendor may securely deliver at least one digital proof-of-purchase to an OEM (e.g., to avoid piracy of software licenses). The OEM may install an associated software copy on a computer system, and store the at least one digital proof-of-purchase on it. The OEM may communicate the proof(s)-of-purchase stored on the computer system and its system identifier to the software vendor. A user of the computer system may attempt to activate the OEM pre-installed software by sending an activation request to a software vendor, who may verify whether or not the digital proof-of-purchase and system identifier in the activation request match those previously reported by the OEM, and may either grant or deny the activation request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08683579&OS=08683579&RS=08683579
owner: Microsoft Corporation
number: 08683579
owner_city: Redmond
owner_country: US
publication_date: 20101214
---
Software products such as operating systems and application programs often contain materials that are protected under copyright law which grants the author of a piece of original work e.g. software code exclusive rights over the usage and distribution of the work. To obtain a copy of a software product from a vendor who owns rights to that software product a user and the vendor typically enter into a license agreement which governs how the user may use and or distribute the software product. For example the license agreement may restrict the number of times the user can install the software and or the number of computers on which the software may be installed.

It is damaging to vendors selling software product licenses if users obtain copies of software products without paying for them. To prevent use of such unauthorized copies software vendors often require that an activation process be completed when an attempt is made to install a copy of a software product. This process typically involves determining whether the copy is authorized for installation e.g. whether the copy was legitimately purchased by the user and or whether the installation is in compliance with one or more applicable license agreements e.g. whether the user has exceeded a maximum number of permitted installations .

Some conventional software activation techniques make use of a so called proof of purchase which is a piece of information made available to a user when the user legitimately purchases or otherwise legitimately obtains a copy of a software product and which serves as proof of legitimacy of the purchase. When such proof is accepted or validated the user is given permission to complete the installation and appropriate features in the software product are enabled depending on the license s granted to the user for that particular installation.

Often it is the case that a computer system purchased from a retailer has software pre installed by an original equipment manufacturer OEM or an original design manufacturer ODM . Hereinafter the terms OEM and ODM are used interchangeably. In this setting one of the conventional approaches to software activation is based on the so called bypass mechanism wherein the OEM buys a generic license from a software vendor and stores a static token associated to the generic license on the computer system s hardware e.g. the motherboard BIOS . Next an individual proof of purchase paper sticker called a certificate of authenticity COA is affixed to the computer. The COA allows users to visually verify whether or not the software they purchased is genuine. Users may input the COA to activate the software pre installed by the OEM without interfacing with and thereby bypassing the software vendor.

The inventors have recognized a number of deficiencies in conventional software activation techniques based on the bypass mechanism including their susceptibility to software license piracy. One example occurs when certificates of authenticity are forged. Another example occurs when a computer manufacturer illegally installs one software copy on multiple new computers and affixes previously sold COAs to them.

Another shortcoming of the conventional bypass mechanism is the cost of its implementation. Affixing paper COAs to each computer is expensive and labor intensive as it requires inventorying the COAs secure physical storage and secure transportation. For example armored trucks are sometimes used to deliver paper COAs. Returning purchased software and or computer systems is expensive for similar reasons.

The inventors have also recognized that the conventional bypass mechanism makes it difficult to collect so called correlation data which herein refers to any information that may be useful to a software vendor or an OEM. Examples of correlation data include business related data often termed business intelligence which may include information such as the number of computers pre installed with a software product their hardware configurations and or the locations of these computer systems once they are shipped. Other examples of correlation data include how often computer systems pre installed with the software fail and the nature of these failures.

Some embodiments of the invention address these and or other shortcomings by using digital proofs of purchase i.e. licenses instead of conventional paper COAs and electronically delivering them from a software vendor to an OEM over a secure network. This may not only reduce the cost of the software activation process by eliminating costs associated with storing and transporting paper COAs but may also make software piracy and license forgery more difficult.

In some embodiments after a software product is installed on a computer the corresponding digital proof of purchase may be associated to a system identifier that depends on the system s hardware configuration. This differs from the conventional bypass mechanism wherein each COA was associated with the same static token derived from a generic license. Before shipping the system to a user the OEM may store the digital proof of purchase and the system identifier on the system hardware and may report both to the software vendor. This may make illegally installing a copy of a software product on multiple computers an example of software piracy more difficult.

In some embodiments the user may send an activation request to the software vendor that includes the proof of purchase and system identifier stored on the system. The software vendor may permit the user to complete the installation. This may make software piracy more difficult because information associating a specific proof of purchase to a specific computer system may be used by the software vendor to decide whether or not to give the user permission to complete the installation.

In some embodiments an OEM and a software vendor may share correlation data with one another. For instance the OEM may report to the software vendor the number of systems pre installed with a specific software product having a specific hardware configuration that were sold in the last year. The inventors have recognized that gathering and sharing such information may be easier if specific copies of software products are associated to specific computer systems.

In accordance with some embodiments of the present disclosure information identifying software copies e.g. proofs of purchase computer systems e.g. system identifiers and OEMs e.g. OEM identifiers may be created by and or exchanged among various parties involved in the software activation process. Herein the term digital authorization information set DAIS is used to refer at least to some of this information. For example a digital authorization information set may comprise a proof of purchase of a software product copy and a system identifier. A digital authorization information set may further comprise any information that an OEM may wish to report to a software vendor such as an OEM identifier.

The proof of purchase comprises information made available to a customer e.g. OEM third party user when the customer legitimately purchases or otherwise legitimately obtains a copy of a software product. The PoP serves as proof of legitimacy of the customer s software copy. A unique proof of purchase may be associated to each copy of the software product.

In some embodiments the proof of purchase may be generated by a software vendor and may be of any suitable type. For example it may be a number or an alphanumeric string.

In some embodiments the proof of purchase may be a product key of the type described in U.S. patent application Ser. No. 12 950 777 filed Nov. 19 2010 and entitled Secure Software Product Identifier for Product Validation and Activation which is incorporated herein by reference in its entirety. A brief description of this type of product key follows.

In some embodiments a product key may include two components an identification component for identifying a specific copy of a software product or a group of copies in case of a corporate license and a security component that can be used to verify that the product key was generated by some proper authority e.g. the software vendor and or has not be tampered with during distribution. For example the identification component may include a serial number and the security component may include an electronic signature over the serial number that is generated using a secret key of the software vendor.

An illustrative product key in a so called 5 5 format where 24 of the 25 characters are drawn from an alphabet of 24 characters BCDFGHJKMPQRTVWXY2346789 and a special character N is inserted into the 9position is shown as EXAMPLE 1 below 

This format may be compatible with existing product key implementations that also use the 5 5 format and the position of the special character N may be used by an installation program for auxiliary purposes.

In some embodiments the product key of EXAMPLE 1 with the special character N removed may be decoded into a string of 114 bits. The first 50 bits in the bit string may correspond to an identification component of the product key with the first 20 bits representing a group ID and the remaining 30 bits representing a serial number. The next 63 bits may correspond to a security component of the product key where 40 13 and 10 bits are allocated respectively to a first security value a second security value and a checksum. The final bit may indicate whether the copy of the software product associated with the product key is distributed via a third party.

Referring to the OEM identifier includes information that may uniquely identify the OEM and may be of any suitable type. For instance it may be an alphanumeric identifier. The OEM identifier may be obtained in any number of ways. For instance it may be generated by the OEM or assigned to the OEM by another party. The OEM may provide the OEM identifier to the software vendor or third parties that the OEM may interface with during the purchase of software licenses.

The system identifier may be an identifier of a computer system. In some instances the system identifier may be unique and in other instances it may be non unique. It may be generated by the OEM and may be of any suitable type and may be a number or alphanumeric string. An example system identifier in this case an alphanumeric string is shown as EXAMPLE 2 below 

The system identifier may depend on the aspects of the computer system. For instance it may depend on the system s hardware such as the motherboard processor and Random Access Memory RAM . In other embodiments since hardware components of a computer system may need to be replaced it may be useful to employ system identifiers that do not depend on the replaced hardware. Accordingly the system identifier may depend only on a subset of the computer system s hardware. For example if a system identifier does not depend on the hard drive then a computer will have the same system identifier even if the computer s hard drive were replaced. However not all embodiments of the invention are limited to such an implementation. For example the system identifier may depend on the software installed on the computer system in addition to its hardware configuration.

A digital authorization information set may comprise additional information that is useful in the software activation process. Additional information may be of any suitable type and may for example include a date and time stamp of a software and or a system purchase an alphanumeric stock keeping unit SKU identifier an OEM model number a service tag and software related information from any of numerous software distributors including for instance software vendors OEMs distributors and retailers.

In the example system communications among any subset of components e.g. between the software vendor and the OEM may be realized via networks which may comprise for example the Internet a LAN a WAN and or any other wired or wireless network or combination thereof. Communications may also be realized via portable storage devices including USB keys portable hard drives compact disks and or any other suitable computer readable storage media.

In some embodiments the software vendor may deliver at least one digital proof of purchase to the OEM . The delivery may be accomplished in any number of ways for instance by using a secure channel. Communications over a secure channel may comprise using the Hypertext Transfer Protocol Secure HTTPS or any other cryptographic device or protocol.

In other embodiments the software vendor may deliver at least one digital proof of purchase to the OEM through a third party proof of purchase distributor in any of numerous ways. For instance the OEM may first provide at least one digital proof of purchase to the third party proof of purchase distributor . The third party proof of purchase distributor may then provide the at least one digital proof of purchase to the OEM .

In some embodiments each proof of purchase provided to the OEM authorizes the OEM to install a copy of a software product on a computer. For each software product copy the OEM installs on a computer system the OEM may store additional information which may be useful in the software activation process on the system hardware. For instance the OEM may generate a system identifier associated to the computer system and may store it on the system hardware. Another example comprises storing the proof of purchase on the system hardware. Still another example comprises storing correlation data on the system hardware. The OEM may create a digital authorization information set comprising the proof of purchase and the system identifier and may store this digital authorization information set in an electronic storage system.

The OEM may alert the software vendor that copies of a software product were installed e.g. the software product to which the delivered proofs of purchase were associated . This may be accomplished in any of numerous ways. For instance the OEM may alert the software vendor to which proofs of purchase were used by sending the software vendor a report comprising the stored proofs of purchase coupled with system identifiers of the systems they were stored on. Although not depicted in the software vendor may store this information in an electronic storage system. The OEM may ship at least one of the systems pre installed with the software to a user . Once the user receives said system the system is referred to as the user s computer .

In some embodiments the user s computer may attempt to automatically activate software installed on it. This may be accomplished using any suitable means for instance by establishing a connection to the software vendor and sending an activation request. The activation request may comprise a proof of purchase and a system identifier stored on the user s computer .

In other embodiments the user may attempt to activate the software installed on the user s computer by establishing a telephone connection with the software vendor and communicating information to activate and validate the pre installed software. The information may comprise an identification number that may be provided by the user s computer and which may depend on the proof of purchase and system identifier stored on the user s computer . Any of numerous other techniques for activating the software installed on the user s computer may instead be employed. For example the system identifier may not be employed in the activation process in order to allow activation of software on computers that may not have valid system identifiers associated to them.

The software vendor may receive an activation request from a user s computer or a user . The activation request may comprise a proof of purchase and a system identifier . The software vendor may use any of numerous techniques to decide whether or not to grant or deny the activation request. For instance the software vendor may compare the proof of purchase and the system identifier to see if they match to within a tolerance a proof of purchase and a system identifier reported by the OEM .

Communications among any subset of computers e.g. among servers and may be realized via networks which may comprise for example the Internet a LAN a WAN and or any other wired or wireless network or combination thereof. Communications may also be realized via portable storage devices including USB keys portable hard drives compact disks and or any other suitable computer readable storage media. The software vendor servers and need not be separate computers. As an example servers and may comprise programmed instructions which execute on the PoP generation server . Similarly OEM servers need not be separate computers. Though not shown in the example system components may comprise a plurality of software vendors a plurality of OEMs and or a plurality of users.

The example system components depicted in may perform a process to activate software pre installed on a computer by an OEM. The process illustrates how digital proofs of purchase may be associated to individualized hardware systems and how the resultant pairings of proofs of purchase and system identifiers may be created reported by the OEM to the software vendor and subsequently used in the activation process by the user .

In act the PoP generation server generates a plurality of digital proofs of purchase and transmits them to the PoP delivery server . In act a plurality of digital PoPs may be delivered to the OEM PoP server in any of numerous ways. For example the digital PoPs may be delivered from the PoP delivery server to the OEM PoP server directly. Another possibility is that PoPs may be delivered from the software vendor to the OEM through a third party PoP distributor. For instance the PoPs may be first delivered from the PoP delivery server to the third party PoP distribution server and then delivered from the third party PoP distribution server to the OEM PoP server . Digital PoPs may be delivered securely using any suitable means for instance by using the Hypertext Transfer Protocol Secure HTTPS and or any other cryptographic procedure.

In some embodiments the OEM may purchase PoPs directly from the software vendor. This transaction may be accomplished in any of numerous ways. For instance the OEM may connect to a website hosted on the PoP delivery server place an order specifying the number of proofs of purchase to buy and download the purchased PoPs directly to the OEM PoP server . Many alternative implementations are possible. For instance connections not relying on the Hypertext Transfer Protocol HTTP may be used.

In some embodiments the OEM may purchase PoPs from the third party PoP distributor using any suitable means. For instance the OEM may connect to a website hosted on the third party PoP delivery server place an order specifying the number of proofs of purchase and download the purchased PoPs to the OEM PoP server . Many alternative implementations not relying on an HTTP connection are possible.

After the OEM receives proof s of purchase associated to a software product from the software vendor a system may be assembled pre installed with a copy of the software product at the OEM and shipped to the user . The OEM may generate and or collect information identifying aspects of the assembled system . For instance in act the DAIS assembly server may obtain a PoP and an OEM identifier from the OEM PoP Server generate a system identifier and assemble a digital authorization information set comprising said PoP OEM and system identifiers and any additional information . The OEM may communicate some of this information to the software vendor . For example the OEM may report the digital authorization information set to the software vendor .

In act the DAIS assembly server stores the proof of purchase on the system hardware e.g. on a hard disk or motherboard BIOS . This assignment of a proof of purchase to a computer system may be an indication of the software purchase by the user . Storing proofs of purchase on the system hardware eliminates the need for the user to input these PoPs during the software activation and validation process . The process of associating a software proof of purchase to a system identifier is further disclosed and illustrated by reference to below.

After the digital authorization information set is assembled in act it is sent to the OEM reporting server in act . In act the reporting server reports the digital authorization information set to the software vendor s reporting server . The reporting data may comprise the proof of purchase and the system identifier. The reporting data may further comprise the system hardware component profile the OEM identifier and any additional data that the OEM wishes to communicate to the software vendor . In act the OEM may ship the assembled system to the user . Alternatively the OEM may ship the assembled system any suitable entity such as for example a retail store or a distributor.

After receiving the digital authorization information set the software vendor s reporting server forwards the digital authorization information set to the AVS . The software vendor may store the information sent by the OEM using electronic file storage not shown . This information may be organized using any suitable means. For instance the electronic file storage may have an entry for every proof of purchase that has been stored on some system by the OEM along with the associated system identifiers. Additionally and or alternatively entire system hardware profiles may be stored along with every proof of purchase.

In act the user s computer and or the user may contact the AVS to activate the software pre installed on the user s computer by the OEM . The activation and validation process may also be performed prior to the shipping of the assembled system to the user . Details of the activation and validation process are further disclosed and illustrated by reference to and below.

The software vendor may share correlation data with the OEM in any of numerous ways. For instance the software vendor s reporting server reports correlation data to the OEM reporting server in act . Correlation data may be derived from information accumulated across multiple OEMs multiple systems and other sources. Illustrative examples include the number of software activations between two dates e.g. between November 2008 and December 2009 the number of system failures as a function of their hardware configuration or as a function of where they were sent. Other correlation data may additionally or alternatively be defined and collected as embodiments of the invention are not limited in this respect. The process performed by the example system components depicted in then completes.

In this example the process begins at act when the OEM assembles a system to be shipped to the user . Once the system is assembled the OEM may establish a connection to the system in any of numerous ways. For instance the OEM may connect to the system remotely from the DAIS assembly server or any other server. The OEM may interface with the system in other ways including direct physical operation of the system by a person.

In act the OEM installs a copy of the software product on the system and stores an associated proof of purchase on any location of the system in any of numerous ways in act . For example the proof of purchase may be saved by the DAIS assembly server . The system location may be any location accessible to an operating system running on the system . Examples of suitable system locations include the system BIOS a secure location in the file system the registry if a Microsoft Windows family operating system s is installed on the system text files storage locations accessible via an implementation of the Unified Extensible Firmware Interface UEFI and a Trusted Platform Module TPM . Other suitable locations include any computer readable storage medium e.g. USB key magnetic disk CD DVD etc. accessible by the system . The installation of the software product and storing the associated proof of purchase on the system may occur in any suitable order so that the proof of purchase may be stored before concurrently with or after the software product is installed.

In act the DAIS assembly server generates a system identifier corresponding to the assembled system . In act a digital is assembled comprising the stored digital proof of purchase and the generated system identifier . The digital authorization information set may further comprise the system hardware profile and any additional data that the OEM may wish to communicate to the software vendor . This process establishes the binding between the installed software copy represented by the proof of purchase and the system hardware represented by the system identifier and hardware profile . The system identifier may be obtained in any of other numerous ways. It may be generated by any suitable entity at any suitable location. It may for example be generated by any OEM server at the same location as the assembled system by the assembled computer system or by any OEM server at a different location. Many other possibilities will be apparent to those skilled in the art.

The OEM may alert the software vendor that copies of a software product were installed and provide any additional information of interest to the software vendor in any of numerous ways. For instance in act the assembled digital authorization information set is reported to the OEM reporting server . After the system is shipped to the user in act the process completes.

Referring to an illustrative process is shown that may be performed by the user and or user s computer system to activate and validate software on the user s computer system in accordance with some embodiments of the present disclosure. In alternative embodiments the activation and validation process may be performed by other entities. In some embodiments the OEM may activate and validate the software installed on the assembled system before shipping it to the user. In still other embodiments the assembled system may be shipped to a third party e.g. retailer that activates and validates the software prior to the user s acquiring the system . Many other alternatives are possible.

In the example shown in the process begins at act with the user receiving an OEM built computer herein referred to as the user s computer system. The process may proceed with or without user intervention. Determining whether user intervention may be required can be accomplished in any of numerous ways. For instance at act it is determined whether a network connection to an activation and validation server e.g. the AVS shown in is available.

If a network connection to the AVS is available the process may proceed without user intervention. The user s computer system e.g. the computer shown in and in establishes a connection with the AVS at act and sends an activation request to the AVS at act . The activation request may include a proof of purchase e.g. a product key the hardware component profile of the user s computer and an associated system identifier. The activation request may include additional and or alternative information. If the activation request is granted or denied any of numerous actions may be performed. For example notification of activation may be sent to the user software installation may be allowed to complete and software features may be enabled on the user s computer in act . On the other hand if the activation request is denied a notification of installation failure may be sent to the requesting computer in act . Details of the decision process at the activation and validation server are further disclosed and illustrated by reference to .

If a network connection to the AVS is unavailable the process may proceed with some intervention from the user. The user may help to communicate any necessary information to the software vendor . For instance at act the user may establish a connection with the software vendor e.g. by calling a customer care toll free number . However not all embodiments of the invention are limited to such an implementation. For example some embodiments may provide a capability whereby the user establishes a connection with the software vendor and or AVS using a different computer or any other suitable means.

The user may communicate an activation request to the software vendor in any of numerous ways. For instance in act the user reports an identification number which may be provided by a module of the software to be activated and or may depend on the proof of purchase and the system identifier. In other embodiments the user may report the proof of purchase and the system identifier directly. The activation request may comprise additional and or alternative information. If the activation request is granted or denied any of numerous actions may be performed. For example the user may be notified that the software installation is allowed to complete and may be given instructions for how to enable software features in act . If the activation request is denied the user may be notified of installation failure in act . The process then completes.

Any of numerous other activation methods are possible and are not limited to the process illustrated in . In some instances the system identifier may not be used as part of the activation and validation process. This may be useful if computer systems do not have a system identifier associated to them. Other activation methods may include online activation using an activation and validation server activation within a corporate network using an enterprise level volume activation management tool full offline activation or manual activation. Still other possibilities will be apparent to those skilled in the art.

Referring to an illustrative process is shown that may be performed by an activation and validation server e.g. the AVS shown in to activate and validate software on the user s system in accordance with some embodiments of the present disclosure. The process may be performed by at least one computer system by at least one customer service representative or by some combination thereof.

In this example the process begins at act with the reception of an activation request from a user. The request may come from the user or the user s computer. In alternative embodiments the request may come from any suitable OEM server or any suitable third party server. For instance if the activation and validation process is performed before the assembled system is sent to a user the OEM may generate and send the activation request to the activation and validation server .

The AVS may perform any of numerous actions to respond to the activation request. For instance at act the AVS may check whether the proof of purchase sent by the user s computer matches any proof of purchase reported by the OEM. If the proof of purchase in the activation request does not match the OEM reported proof of purchase to within a first tolerance a notification of activation denial and or installation failure may be sent in act . In this way the activation and validation process has the flexibility to allow for variations between the proof of purchase reported by an OEM and the proof of purchase in the activation request. Such variations could arise for any numerous reasons such as the addition of extra bits to specify additional information and or communication errors. The first tolerance may in some instances be pre specified and in other instances the first tolerance may be dynamically determined.

Determining whether a first proof of purchase matches a second proof of purchase to within a first tolerance may comprise determining whether a distance between the two proofs of purchase is less than the first tolerance. The first tolerance may be a number indicating the maximal allowed distance between the first and second proofs of purchase wherein distance between two proofs of purchase may be measured in any number of ways. For instance if both proofs of purchase are binary strings the distance could be the number of locations at which the bits are different.

If the proof of purchase in the activation request matches any OEM reported proof of purchase to within a first tolerance the AVS may perform additional acts in order to respond to the activation request. For example the AVS may look up the system identifier associated to the OEM reported proof of purchase in act . At act the AVS checks whether or not the system identifier in the activation request matches the OEM reported system identifier to within a second tolerance. In some instances the second tolerance may be pre specified and in other instances the second tolerance may be dynamically determined.

Determining whether a first system identifier matches a second proof of purchase to within a second tolerance may comprise determining whether a distance between the two system identifiers is less than the second tolerance. The second tolerance may be a number indicating the maximal allowed distance between the first and second system identifiers wherein the distance between two system identifiers may be measured in any number of ways. For instance if both system identifiers are binary strings the distance could be the number of locations at which the bits are different.

In some embodiments the comparison of the OEM reported system identifier to the user provided system identifier in act may be done to within a tolerance in order to account for possible modification in the hardware configuration of the system from the time the OEM generated system identifier was reported to the software vendor e.g. act in to the time that the software activation request was sent from the user computer to the software vendor. Examples of system modifications include installing and or removing a hard drive a Peripheral Component Interconnect PCI card and or RAM. Examples of PCI cards further comprise video cards network cards modems sound cards additional external ports TV tuners and disk controllers. In some embodiments matching the OEM reported system identifier and the user computer s system identifier to within some tolerance may allow the process to associate the user s system to the system built and shipped by the OEM to the user despite a number of modifications to the system hardware.

If the system identifier in the activation request does not match the OEM reported system identifier to within a second tolerance a notification of activation denial and or installation failure may be sent to the requesting computer in act . On the other hand if the system identifier in the activation request matches the OEM reported system identifier to within a second tolerance a notification of activation may be sent to the user and software features may be enabled on the user s computer. The process then completes. However not all embodiments of the invention are limited to such an implementation. For example in some embodiments a notification of activation may be sent to the user even if the system identifier does not match the OEM reported system identifier to within an acceptable tolerance. This may be done due to business considerations or any other suitable criteria. Other embodiments may involve performing additional and or alternative acts in order to respond to the activation request.

The computer includes a processor or processing unit and a memory that may include volatile and or non volatile memory. The computer may also include storage e.g. one or more disk drives in addition to the system memory . The memory may store one or more instructions to program the processing unit to perform any of the functions described herein. The memory may also store one more application programs and or Application Programming Interface API functions.

The computer may have one or more input devices and or output devices such as devices and illustrated in . These devices can be used among other things to present a user interface. Examples of output devices that can be used to provide a user interface include printers or display screens for visual presentation of output and speakers or other sound generating devices for audible presentation of output. Examples of input devices that can be used for a user interface include keyboards and pointing devices such as mice touch pads and digitizing tablets. As another example a computer may receive input information through speech recognition or in other audible format.

As shown in the computer may also comprise one or more network interfaces e.g. the network interface to enable communication via various networks e.g. the network . Examples of networks include a local area network or a wide area network such as an enterprise network or the Internet. Such networks may be based on any suitable technology and may operate according to any suitable protocol and may include wireless networks wired networks or fiber optic networks.

Having thus described several aspects of at least one embodiment of this invention it is to be appreciated that various alterations modifications and improvements will readily occur to those skilled in the art. Such alterations modifications and improvements are intended to be part of this disclosure and are intended to be within the spirit and scope of the invention. Accordingly the foregoing description and drawings are by way of example only.

The above described embodiments of the present invention can be implemented in any of numerous ways. For example the embodiments may be implemented using hardware software or a combination thereof. When implemented in software the software code can be executed on any suitable processor or collection of processors whether provided in a single computer or distributed among multiple computers. Such processors may be implemented as integrated circuits with one or more processors in an integrated circuit component. Though a processor may be implemented using circuitry in any suitable format.

It should be appreciated that a computer may be embodied in any of a number of forms such as a rack mounted computer a desktop computer a laptop computer or a tablet computer. Additionally a computer may be embedded in a device not generally regarded as a computer but with suitable processing capabilities including a Personal Digital Assistant PDA a smart phone or any other suitable portable or fixed electronic device.

Also a computer may have one or more input and output devices. These devices can be used among other things to present a user interface. Examples of output devices that can be used to provide a user interface include printers or display screens for visual presentation of output and speakers or other sound generating devices for audible presentation of output. Examples of input devices that can be used for a user interface include keyboards and pointing devices such as mice touch pads and digitizing tablets. As another example a computer may receive input information through speech recognition or in other audible format.

Such computers may be interconnected by one or more networks in any suitable form including as a local area network or a wide area network such as an enterprise network or the Internet. Such networks may be based on any suitable technology and may operate according to any suitable protocol and may include wireless networks wired networks or fiber optic networks.

Also the various methods or processes outlined herein may be coded as software that is executable on one or more processors that employ any one of a variety of operating systems or platforms. Additionally such software may be written using any of a number of suitable programming languages and or programming or scripting tools and also may be compiled as executable machine language code or intermediate code that is executed on a framework or virtual machine.

In this respect the invention may be embodied as a computer readable storage medium or multiple computer readable media e.g. a computer memory one or more floppy discs compact discs CD optical discs digital video disks DVD magnetic tapes flash memories circuit configurations in Field Programmable Gate Arrays or other semiconductor devices or other non transitory tangible computer storage medium encoded with one or more programs that when executed on one or more computers or other processors perform methods that implement the various embodiments of the invention discussed above. The computer readable storage medium or media can be transportable such that the program or programs stored thereon can be loaded onto one or more different computers or other processors to implement various aspects of the present invention as discussed above. As used herein the term non transitory computer readable storage medium encompasses only a computer readable medium that can be considered to be a manufacture i.e. article of manufacture or a machine. Alternatively or additionally the invention may be embodied as a computer readable medium other than a computer readable storage medium such as a propagating signal.

The terms program or software are used herein in a generic sense to refer to any type of computer code or set of computer executable instructions that can be employed to program a computer or other processor to implement various aspects of the present invention as discussed above. Additionally it should be appreciated that according to one aspect of this embodiment one or more computer programs that when executed perform methods of the present invention need not reside on a single computer or processor but may be distributed in a modular fashion amongst a number of different computers or processors to implement various aspects of the present invention.

Computer executable instructions may be in many forms such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Also data structures may be stored in computer readable media in any suitable form. For simplicity of illustration data structures may be shown to have fields that are related through location in the data structure. Such relationships may likewise be achieved by assigning storage for the fields with locations in a computer readable medium that conveys relationship between the fields. However any suitable mechanism may be used to establish a relationship between information in fields of a data structure including through the use of pointers tags or other mechanisms that establish relationship between data elements.

Various aspects of the present invention may be used alone in combination or in a variety of arrangements not specifically discussed in the embodiments described in the foregoing and is therefore not limited in its application to the details and arrangement of components set forth in the foregoing description or illustrated in the drawings. For example aspects described in one embodiment may be combined in any manner with aspects described in other embodiments.

Also the invention may be embodied as a method of which an example has been provided. The acts performed as part of the method may be ordered in any suitable way. Accordingly embodiments may be constructed in which acts are performed in an order different than illustrated which may include performing some acts simultaneously even though shown as sequential acts in illustrative embodiments.

Use of ordinal terms such as first second third etc. in the claims to modify a claim element does not by itself connote any priority precedence or order of one claim element over another or the temporal order in which acts of a method are performed but are used merely as labels to distinguish one claim element having a certain name from another element having a same name but for use of the ordinal term to distinguish the claim elements.

Also the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of including comprising or having containing involving and variations thereof herein is meant to encompass the items listed thereafter and equivalents thereof as well as additional items.

