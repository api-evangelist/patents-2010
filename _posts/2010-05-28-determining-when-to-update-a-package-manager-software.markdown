---

title: Determining when to update a package manager software
abstract: Updating package manager software on a client. An update tool can interface with a package manager running a first version of the package manager software to inspect an available update to a package installed on the client. The update tool can determine that a second version of the package manager software is required to install the update to the package. The update tool can access the second version of the package manager software, remove the first version of the package manager software from the package manager, and unpack and install the second version of the package manager software on the package manager. Further, the update tool can install the update to the package installed on the client, and can update other resources associated with the client as appropriate.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09417865&OS=09417865&RS=09417865
owner: Red Hat, Inc.
number: 09417865
owner_city: Raleigh
owner_country: US
publication_date: 20100528
---
The present teachings relate to systems and methods for determining when to update a package manager software and more particularly to platforms and techniques for ensuring compatibility between a package manager software and an update to resources installed on a client.

A package management system can facilitate the process of installing upgrading configuring and removing software packages associated with a client computer. The software packages can contain a set of related files chosen to perform a given application or task such as for example a group of software applications drivers and or other resources used to install and use messaging or media applications. In instances a software package can contain application software operating system software drivers patches and or other software components grouped as a logical set. In implementations the package can be stored or encoded as a single file or data object.

Package managers exist to help a user initiate and perform software package updates such as for example the yum Yellowdog update manager package manager available from Red Hat Inc. Raleigh N.C. and others. In general available package managers are configured to interact with the set of installed software packages on a client and with one or more software package repositories to directly connect to those databases and download available package updates.

The package manager itself can have a software version to facilitate the software package updates. Over time updated versions for the package manager software can be developed to accommodate changes in software packages or software repositories. However the ability to update the software packages can depend on a certain version of the package manager software being installed on a client. It may therefore be desirable to provide systems and methods for determining when to update a package manager software to ensure compatibility between a package manager software and an update to resources installed on the client. Further it may be desirable to update the package manager software without impacting the associated packages and resources.

Embodiments of the present teachings relate to systems and methods for determining when to update a package manager software. More particularly embodiments relate to platforms and techniques for ensuring compatibility between a package manager software and an update to application packages and or other packages or resources installed on a client. In embodiments the package manager can employ a first version of a package manager software and use the first version to access download or otherwise obtain a second version of the package manager software. An update tool associated with the package manager can inspect an update to a package installed on the client and can determine that the update to the package requires that the second version of the package manager software be installed on the client. The update tool can unpack and install the second version of the package manager software on the package manager. Further the update tool can update using the second version of the package manager software the package installed on the client and other associated resources of the client that may be needed for compatibility with or to support the execution of the second version of the package manager software.

The update tool can inspect detect diagnose or otherwise determine any potential conflicts bugs faults and or other conditions and causes thereof of a package manager software update or other package updates. Further the update tool can generate a notification to the user of those potential update issues. In embodiments the notification can indicate that a dependency issue exists before a further update can be performed such as that a specific version of the package manager software needs to be installed in order for a package already installed on the client to be updated. In further embodiments the notification can include an indication of which resources associated with the client need to be updated to support the specific version of the package manager software. A user can then confirm discontinue change or retry any processing associated with the package manager software update. For example the user can choose to update the package manager software and continue with applicable package updates. Further the user can choose to discontinue with the package manager software or other packages updates if for example the updates may produce an undesirable result. These and other embodiments described herein address the various noted shortcomings in known package manager software update technology and provide more capability for unpacking and installing new versions of package manager software or updates to other packages with less potential for software or hardware conflicts errors or other undesirable results of updating activity.

As used herein package manager can be a tool or collection of tools or resources configured to install unpack upgrade configure or remove software packages from a client computer. Further as used herein package manager software can be an application software or set of files executing in conjunction with the package manager to facilitate the functions of the package manager. For example the yum package manager available from Red Hat Inc. and others can have an associated version for its package manager software. Further the package manager software can be updated when there is a subsequent version available.

Reference will now be made in detail to exemplary embodiments of the present teachings which are illustrated in the accompanying drawings. Where possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

In embodiments set of installed software packages can be or include packages comprising various types of applications such as for example messaging applications spreadsheet or modeling applications social networking applications word processing applications and or other applications or utilities and can in embodiments include an operating system drivers and or components. Set of installed software packages can have an associated set of package attributes which can record file names versions dates software requirements and or other attributes related to each of set of installed software packages or to the package manager software.

Package manager can communicate with a network interface configured to connect to one or more networks such as the public Internet or other public or private networks. Package manager can thereby connect to one or more package repositories hosting software packages including package updates package manager software updates and or other software or resources.

Package manager can also interact and or communicate with set of installed software packages and one or more package repositories to initiate configure test update and or otherwise manage set of installed software packages operating on client . Package manager can for example provide a user with a set of package update options displayed via user interface such as a graphical user interface or others to select various test configuration and or other management activities on set of installed software packages . For example a user can select to initiate an update on one or more packages of set of installed software packages install a new package update on client or update an installed package manager software via user interface .

According to embodiments package manager can communicate with an update tool hosted on client to determine compatibility issues between updates to set of installed software packages and an installed version of the package manager software. It should be appreciated that update tool can be a standalone entity or resource or can be integrated as part of package manager . In embodiments update tool can determine potential instabilities of resources on client associated with unpacking and installing a new version of a package manager software. Update tool can update client resources to alleviate the potential instabilities such as for example by installing new application versions software patches and similar updates to resources.

In embodiments update tool can generate reports and notifications regarding a potential instability one or more causes of the potential instability and categories thereof or other conditions of package manager software update activities conducted on client . By determining the one or more causes of the potential instabilities a user can be notified of future potential instabilities or other conditions that might be caused by updating a package manager software or other packages. Update tool can record diagnostic information such as for example the one or more causes of the potential instabilities origins of the one or more causes and other data. Update tool can also contain or access diagnostic logic to examine data generated or hosted by various resources including set of installed software packages operating system or one or more repositories to generate user notifications and other output to support and manage the updating of package manager software or other packages.

As illustrated for example more particularly in package manager can connect to one or more package repositories via one or more networks . Package manager can present and manage set of update options to initiate and conduct download activity for example to initiate the download of one or more package updates. According to embodiments update tool can interface with package manger running a first version of package manager software. Further update tool can identify an update to one of set of installed software packages . Update tool can inspect the package update for an indication that a second or other version of the package manager software needs to be installed on package manager for the package update to be installed. In embodiments the package update can be made available in one or more package repositories and can be accessed and inspected by update tool via network . Further in embodiments the package update can comprise associated metadata that can indicate a version requirement for the package manager software. For example the metadata of the package update can indicate that the second version of the package manager software is required to install the package update.

Update tool package manager and or other logic can facilitate the update of a software version of package manager itself. For example package manager executing on the first version of a package manager software can connect to one or more package repositories to access download or otherwise obtain the second version of the package manager software. In embodiments the second version of the package manager software can be encompassed in a software package. In embodiments the second version of the package manager software can be one or more version numbers or iterations from the first version of the package manager software. For example there can be multiple update versions of the package manager software that were released between the releases of the first version and the second version. Further in embodiments the systems and methods can be configured to unpack and install the most recent version of the package manager software that is also compatible with resources of or updates to set of installed software packages on client . For example if a version 10.0 of a package manager software is both available and compatible with updates to set of installed software packages a version 9.5 that is compatible with the updates to set of installed software packages but not available and a version 9.0 of the package manager software is available but not compatible with the updates to set of installed software packages then update tool package manager or other logic can access the version 10.0 for unpacking and installation on package manager .

Update tool can using the first version of the package manager software unpack and install the second version of the package manager software on package manager . In embodiments update tool can remove files or data associated with the first version of the package manager software from package manager client or other components thereof. In response to unpacking and installing the second version of the package manager software update tool can install the update to the applicable one or more set of installed software packages that require the second version of the package manager software.

In embodiments update tool and or other logic can examine the second version of the package manager software to determine a set of resources on client for which an update is necessary to support the second version of the package manager software. In embodiments update tool can examine metadata contained in the package received from the one or more package repositories for indications of resource update information. Further in embodiments update tool can determine the set of resources automatically by for example examining current and future dependencies between the package manager software and the set of resources.

Update tool can update the determined set of resources on client . In embodiments update tool can retrieve files or data necessary for the update of the set of resources from the software package received from the one or more package repositories . In further embodiments update tool can retrieve files or data necessary for the update of the set of resources from local memory such as a database or from a network location accessible by network . Further in embodiments update tool can remove outdated files or data associated with the updated set of resources. In embodiments files or data associated with the updated set of resources can be removed at any point after updating the package manager software and or the one or more set of installed software packages . In embodiments update tool and or other logic can create and or maintain an event log to store update events on client . For example event log or other records may indicate an update to the software package manager set of installed software packages or one or more resources on client necessary to support any associated updates.

In embodiments update tool can be configured to handle any failures in the accessing unpacking or installing of the second version of the package manager software or the update to the applicable one or more set of installed software packages . For example update tool can be configured to revert any resources associated with client back to a previous state such as the state that the resources were in prior to the update attempt. Further update tool can reinstall a prior version of a package manager software if an installation of a newer version of the package manager software fails. It should be appreciated that other failure handling mechanisms are envisioned such as for example reverting only some or none of the resources associated with the client and other mechanisms.

According to embodiments update tool and or other logic can provide one or more notifications to users of client . For example notification can contain an indication that a new version of the package manager software needs to be installed in order to update one or more set of installed software packages . Further for example notification can contain information regarding which resources on client need to be updated to support the second version of the package manager software. In embodiments notification can contain an indication of the success or failure of an update associated with the embodiments as described herein. Other types of conditions related to the state of client and its resources as well as set of installed software packages and other resources can be identified and reported to the user via one or more notifications .

According to other embodiments update tool can identify and generate notifications automatically and or can generate notifications updates and or other activity based on user configuration settings such as selections to display or suppress the display of selected notifications and or to automatically perform selected update actions or other processes as described herein. In embodiments update tool can generate one or more notifications before during or after the update of the package manager software. When generating notifications update tool can access other data resources such as database that can contain for example monitored or recorded system data. According to embodiments update tool can utilize data stored in database for use during future package manager software updates.

One or more package updates can each have a set of associated attributes. For example as shown the set of attributes can comprise a package ID an update version number and a required package manager version number. In embodiments the package ID and the update version number can identify which package is to be updated and the associated version number of the update respectfully. Further in embodiments the required package manager version number can specify the version of the package manager software that is required to update the package specified by the package ID. For example if the current package manager software version is 2.0 there is a package installed on client with an update available and the required package manager version number of the available update specifies that version 3.0 of the package manager software version is required to install the update to the package then the available update for the package cannot be installed on client without first installing version 3.0 of the package manager software. In this example if version 2.0 of the package manager software is installed on client then update tool can be configured to access version 3.0 of the package manager software from for example one or more package repositories or other sources unpack version 3.0 and install version 3.0 on package manager . After installation of version 3.0 on package manager update tool can access and install the available package update using version 3.0 of the package manager software.

In a user of client can be notified that the package manager software needs to be updated. In embodiments the user of client can be notified via a communication via an interface such as a graphical user interface GUI or via other methods. In embodiments the user can provide approval to proceed with the updating of the package manager software. If the user does not provide approval processing can proceed to end at . If the user provides approval processing can proceed to in which the first version of the package manager software can be used to access the second version of the package manager software. In embodiments package manager can access the second version of the package manager software from one or more package repositories . Further in embodiments the second version of the package manager software can be encompassed in a package.

In the first version of the package manager software can be removed or uninstalled from package manger . In embodiments prior versions or outdated files of other resources associated with the first version of the package manager software can be uninstalled or otherwise removed from client . In the second version of the package manager software can be unpacked and installed on package manager of client . In the update to the package installed on the client can be installed using the second version of the package manager software. In embodiments package manager can access the update to the package from one or more package repositories . Further in embodiments the update to the package can be encompassed in the same package that contained the second version of the package manager software or other packages.

In one or more resources on client can be updated. For example the one or more resources can be used to support operation of or maintain compatibility with the second version of the package manager software or the updated package and can be any hardware or software associated with client such as for example an operating system application interface memory peripheral media card and other hardware or software. In embodiments update tool can facilitate the updating of the one or more resources. For example update tool can install a patch on an operating system of client . Further for example update tool can communicate with a remote download server to download an update to an application installed on client and install the update to the application. In processing can return to a prior processing point jump to a further processing point or end.

The foregoing description is illustrative and variations in configuration and implementation may occur to persons skilled in the art. For example while embodiments have been described in which a unitary package manager is configured to control package manager software update activity in embodiments multiple applications or software can interact to control the downloading unpacking installation testing and other management of package manager software updates. Further while embodiments have been described in which a package manager software can be updated from one version to another it should be understood that the systems and methods can replace one package manager with another package manager such as for example replacing the up2date package manager available from Red Hat Inc. with the yum package manager available from Red Hat Inc. While embodiments have been described in which package manager software update activity is conducted on one client in other embodiments multiple local or remote targets clients and or other machines can register to package manager and or other logic or resources to receive or perform package manager software update activity. Similarly while embodiments have been described in which one diagnostic database is accessed by update tool package manager and or other logic to identify causes of potential faults or issues in other embodiments multiple diagnostic or debugging databases can be used. Other resources described as singular or integrated can in embodiments be plural or distributed and resources described as multiple or distributed can in embodiments be combined. The scope of the present teachings is accordingly intended to be limited only by the following claims.

