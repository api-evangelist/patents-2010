---

title: Methods and systems for bulk uploading of data in an on-demand service environment
abstract: Methods and systems for bulk uploading of data in an on-demand service environment are described. In one embodiment, such a method includes retrieving a bulk transaction request from a transaction queue within a host organization, where the bulk transaction request specifies a plurality of database transactions to be processed against a multi-tenant database system of the host organization. Such a method further includes determining a current computational load of the multi-tenant database system, processing a subset of the plurality of database transactions specified by the bulk transaction request against the multi-tenant database system when the current computational load is below a threshold, and updating a bulk transaction results log based on the subset of the plurality of database transactions processed. Remaining database transactions specified by the bulk transaction request may then be re-queued for later processing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08965860&OS=08965860&RS=08965860
owner: salesforce.com, inc.
number: 08965860
owner_city: San Francisco
owner_country: US
publication_date: 20101220
---
This application is related to and claims priority to the provisional utility application entitled METHODS AND SYSTEMS FOR BULK UPLOADING OF DATA IN AN ON DEMAND SERVICE ENVIRONMENT filed on Apr. 1 2010 having an application number of 61 320 189 the entire contents of which are incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The subject matter described herein relates generally to the field of computing and more particularly to methods and systems for bulk uploading of data in an on demand service environment.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also correspond to embodiments of the claimed subject matter.

In a conventional client server transaction a client computing device submits a request to a server the server processes the request and then returns a result to the client thus completing the transaction cycle. While such a model works well for simple transactions that process quickly the above model does not scale well to transactions that require longer durations to process. One problem is that a client device awaiting a response from a server may appear to have hung or crashed while awaiting the response or may simply time out before a response is received thus having wasted the period of time awaiting a server response and potentially having caused a server to waste resources developing a response that is never received by the client.

Although a result from the server may eventually be forthcoming a client experiencing a perceived delay may terminate prematurely and potentially re submit the request causing duplicative effort on the part of the server and potentially introducing transactional errors such as having the server implement the same request multiple times.

Such a problem is exacerbated where a client device is attempting to upload a large amount of data to a database or initiate a large number of transactions with a database. Undesirable data inconsistencies may occur where a client terminates prematurely or times out without having received a response from the server especially where the client then re submits the same request.

The present state of the art may therefore benefit from the methods and systems for bulk uploading of data in an on demand service environment as described herein.

Described herein are systems devices and methods for bulk uploading of data in an on demand service environment. In one embodiment such a method includes retrieving a bulk transaction request from a transaction queue within a host organization where the bulk transaction request specifies a plurality of database transactions to be processed against a multi tenant database system of the host organization. Such a method further includes determining a current computational load of the multi tenant database system processing a subset of the plurality of database transactions specified by the bulk transaction request against the multi tenant database system when the current computational load is below a threshold and updating a bulk transaction results log based on the subset of the plurality of database transactions processed. Remaining database transactions specified by the bulk transaction request may then be re queued for later processing.

For example in an on demand service environment such as a cloud computing environment where a host organization provides computing resources and services to customer organizations customer organizations may transact with the host organization by way of a client request and a server response cycle. In such a cycle the client sends a request and awaits a response from the server before proceeding to another task. For example the client may submit a database transaction such as a record add a record retrieval a record update a record search and so forth and simply await the response from the server. This type of transaction cycle where the client device awaits a response from the server is sometimes referred to as synchronous processing.

However customer organizations utilizing such services may find it necessary to upload large amounts of data to the host organization thus making the synchronous client server request response model undesirable.

Take for example a customer organization needing to upload a large number of records e.g. thousands tens of thousands or hundreds of thousands of records etc. to a database provided by the host organization. Such a need may arise where a customer organization is migrating their locally implemented database to the cloud e.g. to the on demand service provided by the host organization where the customer organization is uploading locally transacted but non synced records to the on demand service for the purposes of creating a live backup resource in the cloud e.g. via the host organization for redundancy or for overflow processing etc.

Various problems arise where a customer organization attempts to submit all the data associated with a large request as a single request when using synchronous processing. For example such a request may exceed an allowable transfer data limit inherent to an http hyper text transfer protocol post based data transfer such a request may exceed an allowable time period for an http session such a request may require server processing time that exceeds a time out period of the client and so forth.

Additionally where a host organization provides parallel processing so that transactions are fulfilled more quickly there is a potential for a single customer organization to submit a large request that when parallelized by the host organization consumes an inordinate amount of resources within the host organization thus causing delays and detrimental effects for other customer organizations utilizing the same on demand services.

Utilizing the systems and methods described herein bulk transaction requests received from customer organizations may be received in a format that is convenient for the customer organizations and processed asynchronously in a manner that best utilizes the available computational resources of the host organization without detrimentally affecting other users of the same on demand services provided by the host organization. With asynchronous processing the client submits an asynchronous request such as a bulk transaction request.

In the following description numerous specific details are set forth such as examples of specific systems languages components etc. in order to provide a thorough understanding of the various embodiments. It will be apparent however to one skilled in the art that these specific details need not be employed to practice the disclosed embodiments. In other instances well known materials or methods have not been described in detail in order to avoid unnecessarily obscuring the disclosed embodiments.

In addition to various hardware components depicted in the figures and described herein embodiments further include various operations which are described below. The operations described in accordance with such embodiments may be performed by hardware components or may be embodied in machine executable instructions which may be used to cause a general purpose or special purpose processor programmed with the instructions to perform the operations. Alternatively the operations may be performed by a combination of hardware and software.

Embodiments also relate to a system or apparatus for performing the operations herein. The disclosed system or apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a non transitory computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing non transitory electronic instructions each coupled to a computer system bus. In one embodiment a computer readable storage medium having instructions stored thereon causes one or more processors within an on demand service environment implementing a multi tenant database system to perform the methods and operations which are described herein. In another embodiment the instructions to perform such methods and operations are stored upon a non transitory computer readable medium for later execution.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus nor are embodiments described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the embodiments as described herein.

In one embodiment each of the separate and distinct customer organizations A C may be remotely located from the host organization that provides on demand services to the customer organizations A C via multi tenant database system executing therein. Alternatively one or more of the customer organizations A C may be co located with the host organization such as within the same organization that hosts and provides the multi tenant database system upon which underlying data is persistently stored such as data provided within a bulk transaction request from a customer organization A C. Where the customer organizations A C are remote host organization provides remotely implemented cloud computing services.

In one embodiment the hardware software and logic elements of the multi tenant database system include at least a non relational data store and a relational data store which operate in accordance with the hardware software and logic elements that implement the database functionality and code execution environment within the host organization .

In one embodiment host organization retrieves a bulk transaction request from a transaction queue . In such an embodiment the bulk transaction request specifies a plurality of database transactions to be processed against the multi tenant database system of the host organization . In such an embodiment host organization further determines a current computational load of the multi tenant database system and processes a subset of the plurality of database transactions specified by the bulk transaction request against the multi tenant database system when the current computational load is below a threshold. A bulk transaction results log is then updated based on the subset of the plurality of database transactions processed.

Host organization may receive a variety of requests including bulk transaction requests for asynchronous processing from one or more of the plurality of customer organizations A C via the network . Incoming requests may be received at web server and may specify a requests for services from the host organization such as a real time transaction request for synchronous processing to retrieve or store data on behalf of one of the customer organizations A C or bulk transaction requests specifying multiple database transactions. For example web server may be responsible for receiving bulk transaction requests from various customer organizations A C via network and provide a web based interface to an end user client machine originating the bulk transaction request .

In one embodiment the bulk transaction request is received at the host organization and stored in a file repository . The file repository may be a datastore separate from the multi tenant database system configured specially for storing the received bulk transaction requests such as a file system operating in conjunction with web server . Alternatively host organization may store the received bulk transaction request in the multi tenant database system for later retrieval or within another location designated as a landing site for data associated with incoming requests.

Received bulk transaction requests are queued for processing. In one embodiment host organization inserts the bulk transaction request into transaction queue . The bulk transaction request may be inserted into the transaction queue among a plurality of bulk transaction requests and a plurality of real time transaction requests in the transaction queue . Transaction queue may maintain a link pointer or reference to the data associated with the bulk transaction request e.g. a link pointing to corresponding data stored within file repository rather than hosting the contents bulk transaction request directly. Alternatively the plurality of database transactions specified by a bulk transaction request may be loaded into the transaction queue as a bulk transaction request .

In accordance with one embodiment a plurality of real time transaction requests for synchronous processing within the transaction queue are assigned a higher priority than the plurality of bulk transaction requests for asynchronous processing. In such an embodiment the real time transaction requests are selected for processing against the multi tenant database system based on the higher priority. Correspondingly in one embodiment the plurality of bulk transaction requests in the transaction queue are assigned a lower priority than the plurality of real time transaction requests and are selected for processing against the multi tenant database system based on the lower priority. In accordance with disclosed embodiments the bulk transaction requests are additionally selected and scheduled for processing based on determined current computational load of the multi tenant database system in addition to their designation as lower priority tasks.

For example in one embodiment real time transaction requests are designated as higher priority compared to bulk transaction requests as a matter of policy. Real time transaction requests may be those transactions received by the host organization for processing which adhere to a client server request response model in which a client device e.g. within customer organization A C submits a request and awaits a response from the host organization . Such policy or prioritization schemes may be implemented by for example a load balancer working in conjunction with transaction queue to distribute work to the multi tenant database system . Alternatively transaction queue may implement the prioritization scheme and send work to the load balancer in an order determined by the transaction queue .

In accordance with prioritized processing schemes in one embodiment the host organization receives a real time transaction request subsequent to having received a bulk transaction request . In such an embodiment despite the bulk transaction request having been received first the host organization processes the real time transaction request against the multi tenant database system before processing any part of the bulk transaction request based on the higher priority of the real time transaction request. In such an embodiment the host organization sends a response to a client device having submitted the real time transaction request e.g. a requestor having originated the real time transaction request from one of the customer organizations A C . In such an embodiment the response specifies a result for the real time transaction request and further indicates processing of the real time transaction request is completed. This out of order processing may be appropriate so as to apply the available computational resources to the work load that most directly affects a perceived quality of service on behalf of the customer organizations A C and or an actual average response time for processing service requests from customer organizations A C which are submitted with the expectation of real time e.g. synchronous instantaneous or immediate processing.

In one embodiment sending a response to a client device having submitted the bulk transaction request includes sending a response specifying a session identifier assigned to the bulk transaction request and further acknowledging the bulk transaction request is queued for processing or queued for asynchronous processing. For example although host organization may respond to a client having submitted a bulk transaction request such a response does not indicate that the bulk transaction request has completed but instead provides an indication of successful receipt of such a request and provides information to the client device which enables the customer organization A C to check for appropriate status at a later time or to retrieve a bulk transaction results log describing the results of the plurality of database transactions incorporated within the bulk transaction request .

In one embodiment the host organization validates the bulk transaction request against one or more specifications. For example validating the bulk transaction request may include a verifying the bulk transaction request complies with a maximum record count threshold b verifying the bulk transaction request complies with a maximum size threshold and or c verifying the bulk transaction request complies with an accepted request format. In such an embodiment the bulk transaction request is submitted to the transaction queue once the bulk transaction request is successfully validated. For example logic within the web server or transaction queue may apply such a validation scheme to incoming bulk transaction requests.

The one or more specifications or requirements applied against incoming bulk transaction requests may be based on policy system performance or system limitations. For example where such requests are submitted over http there are size limitations which are inherent to http post based transactions and thus limit the overall size that may be accommodated for any given request presented to the host organization. Accordingly the host organization e.g. via web server may reject bulk transaction requests in excess of a specified size such as 10 megabytes. Accepted formats may similarly be specified. For example the host organization may specify that it will reject any bulk transaction request that is not presented in one of several enumerated formats such as an XML eXtended Markup Language based flat file a CSV Comma Separated Values based flat file a specified object type and so forth. Additionally the host organization may specify a maximum number of records or a maximum number of database transactions that are acceptable within a bulk transaction request . For example the host organization may specify a 10 000 record or transaction limit per bulk transaction request or a 20 000 or 30 000 limitation based on policy system performance or other considerations.

In some embodiments one set of specifications are applied to bulk transaction requests received at web server via http transfer protocol while a different set of specifications is applied to bulk transaction requests received via alternative transfer protocols e.g. via a File Transfer Protocol FTP etc. .

In some embodiments validation is performed via host organization while in alternative embodiments validation of bulk transaction requests is performed via a client device at the requesting submitting customer organization A C for example via logic downloaded locally to the client from the host organization or via a client side interface of a customer organization A C linking to corresponding API Application Programming Interface logic at the host organization .

In accordance with one embodiment the bulk transaction request is a bulk record upload request in which each of the plurality of individual database transactions specified by the bulk transaction request includes a record and or row to be uploaded to a table in the multi tenant database system. For example the entire bulk transaction request may constitute a large data upload or a data dump from a customer organization A C to the host organization s multi tenant database system in which all of the database transactions specified by the bulk transaction request are record adds or record inserts each individual database transaction specifying all the requisite data fields required to populate one row within a table.

Alternatively each of the plurality of database transactions specified by the bulk transaction request may include a database transaction of varying types. For example allowable transaction types may include adds updates or deletes. Processing numerous updates and or deletes may require processing times that more appropriate for a bulk transaction request rather than a real time processing request. Deletes and or updates may be simple for example specifying a table and a primary key to transact against or may be more complex for example specifying a WHERE clause to select an appropriate record or appropriate records to transact against potentially requiring more time consuming full table scans or corresponding references to index tables and associated non indexed tables to complete a delete or an update.

In one embodiment the bulk transaction request specifies a a named table within the multi tenant database system against which to process the respective database transaction based on the transaction type and b provides or specifies transaction data to be added updated or selected for deletion based on the transaction type during the respective database transaction.

In accordance with the described embodiments work associated with bulk transaction requests is applied processed or transacted against the multi tenant database system based at least in part on the current computational load of the multi tenant database system .

Taking the current computational load of the multi tenant database system into account may permit improved overall system performance and increased flexibility to the host organization . For example the operators of host organization implementing the on demand services may be sensitive to how subscribers such as customer organizations A C perceive the quality and capabilities of the on demand services provided. Customer organizations may assess the quality and capabilities of the on demand services is based on system responsiveness e.g. response time or delay associated with processing a request for services and receiving a result and also convenience. Some requests such as a simple data search or data retrieval may be submitted by an end user via a client side interface in which the end user awaits a corresponding result response from the host organization . In such a scenario a long delay may be interpreted as poor service quality.

Conversely bulk transaction requests may be submitted as part of a large data upload or data transfer. In such a scenario an end user responsible for such a request may value the convenience of submitting and managing such a request over any subjective assessment of how long such a request should take. For example a database administrator coordinating a large data upload may place a great value on the ability to upload a bulk of database transactions rather than having to develop a systematic process for uploading many thousands or even millions of individual records to the multi tenant database system as individual database add transactions.

The ability to schedule work such as the many database transactions specified in a bulk transaction request based on current system performance and current computational load may therefore enable the host organization to emphasize processing resources for time sensitive transactions e.g. real time transaction requests while accommodating the convenience of submitting other transactions in bulk. Scheduling work in such a way may further enable the host organization to negate potentially negative effects associated with receiving bulk transactions. For example immediately processing a bulk transaction request when the multi tenant database system is operating at high computational loads may cause all transactions including time sensitive real time transaction requests to experience unacceptable delay thus deteriorating perceived quality levels on the part of customer organizations A C.

Therefore in accordance with described embodiments determining a current computational load of the multi tenant database system includes retrieving one or more operational statistics from the multi tenant database system upon which to make an assessment. For example determining the current computational load may be performed by the statistics engine or by a load balancer operating within the host organization . Similarly the host organization may compute operational loads on an ongoing basis and store appropriate information so that current operational loads may be retrieved as needed for example by the transaction queue or by a load balancer seeking to schedule work.

In accordance with one embodiment the one or more operational statistics upon which a current operational load is determined includes operating statistics describing Input Output utilization of the multi tenant database system CPU utilization of the multi tenant database system number of free server nodes available for processing database transactions within a pool of server nodes number of active threads currently processing database transactions against the multi tenant database system current queue time of real time database transactions to be processed against the multi tenant database system and number of queued real time database transactions to be processed against the multi tenant database system.

The host organization may consider any number of operational statistics in determining a current operational load for the multi tenant database system . The determined current operational load may result in a binary result such as available for processing bulk transaction requests or not available for processing bulk transaction requests or may result in a numeric or percentage based value. For example where all nodes within the server pool are in a non idle state or have at least one active work thread assigned to them the host organization may determine the current computational load to be not available for processing bulk transaction requests. Accordingly such requests pending in the transaction queue will be delayed or simply not scheduled for processing at that time.

Alternatively a current computational load may be calculated to be for example 60 or 40 etc. based on CPU utilization rates I O usage as a percentage of operational maximums and so forth. Such data may be collected and analyzed by for example statistics engine which then provides the current operational load based on its analysis.

Accordingly in one embodiment processing the subset of the plurality of database transactions when the current computational load is below the threshold includes determining computational resources are available for processing bulk transaction requests based on a comparison of the one or more operational statistics against a corresponding one or more operational thresholds.

For example depicts a bulk transaction request having been queued in transaction queue . The queued bulk transaction request specifies multiple database transactions . As shown database transactions and are associated with a first subset of database transactions specified by the bulk transaction request and database transactions and are remaining or second subset of database transactions of the queued bulk transaction request .

Responsive to a determination that current computational load is below a specified threshold the host organization e.g. via load balancer retrieves a queued bulk transaction request from the transaction queue for processing. For example load balancer may call a queue handler which is responsible for selecting queued items from the transaction queue . Such a queue handler may be implemented via for example within an Oracle compatible transaction queue or other queuing mechanism capable of working in conjunction with a load balancer . The load balancer may additionally specify a type of job such as specifying that a bulk transaction request is to be retrieved from the transaction queue based on a determination that the current computational load is below an appropriate threshold. Alternatively the load balancer may request a queued transaction which by default will retrieve any queued real time transaction and specify that a bulk transaction request is only to be returned when a there no queued real time transaction requests and b current computational load is below a specified threshold e.g. below 60 load for example .

In one embodiment a queue handler returns a reference pointer to the plurality of individual database transactions e.g. associated with a queued bulk transaction request . In alternative embodiments the queue handler returns a requested number of database transactions associated with a queued bulk transaction request . In other embodiments the queue handler returns a subset of database transactions e.g. or to the load balancer .

In accordance with one embodiment processing a subset of the plurality of database transactions e.g. subset or subset against the multi tenant database system includes processing the plurality of database transactions for a pre determined period of time. For example load balancer may issue as many of the database transactions corresponding to a bulk transaction request as are able to be processed during a specified period of time e.g. five seconds five minutes etc. . For example the load balancer may issue individual database transactions to a single server node one after another in serial fashion or may issue database transactions to multiple server nodes within the pool of server nodes . Alternatively the host organization may provide multiple database transactions to a particular server node directing the server node to process for the specified period of time and then respond indicating which database transactions were processed e.g. subset may be specified or marked as having been processed and which database transactions remain as unprocessed e.g. subset may remain as being unprocessed .

In an alternative embodiment the load balancer allocates a pre determined number of the plurality of database transactions for processing. For example the load balancer selects subset based on a pre determined number of transactions to be issued and assigns the subset of database transactions to a server node which then processes all of the subset of database transactions without regard to processing time. While the subsets of database transactions depicted is small e.g. four such transactions in subset and two such transactions in subset the number of transactions selected and issued for processing may be orders of magnitude larger in practice. For example the multi tenant database system hosts data associated with multiple distinct customer organizations A C and thus has processing capacity to deal with peak loads. In non peak times that capacity may be applied against bulk transaction requests in which case many database transactions e.g. thousands or tens of thousands may be processed quickly and efficiently by leveraging excess capacity without detrimentally affecting time sensitive transactions occurring in parallel including time sensitive real time transactions that are requested during non peak periods . During peak load periods it may be not be feasible to conduct any processing of asynchronous type bulk transaction requests as all available resources determined based on current computational load are being applied to other work.

In such embodiments where less than all database transactions associated with a bulk transaction request are processed e.g. subset completes leaving subset as unprocessed the host organization re queues the bulk transaction request in the transaction queue . The re queued bulk transaction request thus has a subset e.g. of the plurality of database transactions processed and further has a remaining portion subset e.g. of the plurality of database transactions unprocessed. For example the curved dashed arrows of depict a bulk transaction request being retrieved from the transaction queue being partially processed against the multi tenant database system via the server pool and subsequently re queued in the transaction queue as requiring further processing.

In accordance with described embodiments the host organization updates a bulk transaction results log based on the subset of the plurality of database transactions e.g. or processed. The bulk transaction results log may be stored in file repository or hosted within the multi tenant database system . In accordance with one embodiment the updated bulk transaction results log includes a transaction result for each of the subset of database transactions e.g. or processed. For example each database transaction processed may be written to the bulk transaction results log along with a completion code e.g. pass fail or 0 for a pass and a non zero code indicating a failure mode etc. .

In accordance with one embodiment the contents of the updated bulk transaction results log are transmitted to a customer organization e.g. one of A C responsive to a request soliciting the bulk transaction results log . For example an end user may retrieve the log in the process of monitoring the progress of the bulk transaction request or the end user may retrieve the log to perform error analysis on any database transactions that triggered a failure or error code e.g. due to malformed data improper data type null values incorrect query syntax etc. .

In accordance with one embodiment host organization issues a job status for the bulk transaction request . For example job status may be updated and or issued each time a portion or a subset of the database transactions or are processed. Job status may provide summary type information rather than detailed and individualized transaction by transaction information such as that which is included in the bulk transaction results log . For example issuing a job status for a corresponding bulk transaction request may include indicating one or more of completion status queue status percentage complete number of records transacted number of records successfully transacted number of transaction errors total aggregate queue time total aggregate processing time and estimated time to completion. Such job status may be stored in multi tenant database system so that it is easily locatable and retrievable by the host organization when requested. The job status may alternatively be written to for example file repository or cached within a global caching layer of the host organization for fast accessibility without having to query the multi tenant database system .

In one embodiment job status information is returned to a customer organization A C responsive to a status request from the customer organization identifying a bulk transaction request submitted previously. For example because the customer organizations A C submit the bulk transaction requests and receive for example only an acknowledgement of successful receipt or perhaps an indication that the request is queued the customer organization may subsequently submit a status request to the host organization soliciting the latest job status information regarding the previously submitted bulk transaction request .

The architecture depicted enables host organization to iteratively retrieve a bulk transaction request process portions of the bulk transaction request e.g. subset or re queue the bulk transaction request and then continuously loop through such a process until all database transactions specified by a bulk transaction request have been processed against the multi tenant database system .

Thus in accordance with one embodiment the host organization e.g. via a load balancer re retrieves the bulk transaction request from the transaction queue e.g. as a second third forth iteration etc. re determines the current computational load of the multi tenant database system processes a second subset of the plurality of database transactions e.g. processes subset where subset was processed on a prior iteration and where the second subset is non overlapping with the first subset of the plurality of database transactions as specified by the bulk transaction request by applying or transacting the second subset of database transactions against the multi tenant database system when the current computational load is below a threshold. Such subsequent iterations may further include a re updating of the bulk transaction results log based on the second subset of the plurality of database transactions processed and issuing a job status for the bulk transaction request reflecting the latest or most up to date status information e.g. updating or revising a previously issued job status where necessary .

In accordance with one embodiment so as to facilitate subsequent iterations and partial processing of bulk transaction requests during any iteration cycle the host organization marks each of the subset of the plurality of database transactions e.g. each of database transactions within subset or database transactions within subset specified by the bulk transaction request as processed. For example as each individual database transaction is processed the transaction may be flagged to indicate whether it is processed or not. In an alternative embodiment processed database transactions are removed from the bulk transaction request thus leaving only unprocessed transactions within the bulk transaction request.

In one embodiment the bulk transaction request is re queued in the transaction queue based on a determination that one or more database transactions specified by the bulk transaction request remain unprocessed. Alternatively the host organization finalizes the bulk transaction results log based on a determination that all database transactions specified by the bulk transaction request are processed. For example all database transactions are either marked or flagged as processed or are deleted from the bulk transaction request thus negating the need to re queue the bulk transaction request for subsequent iterative processing.

In some embodiments the host organization may automatically initiate an outgoing message to the requesting customer organization A C associated with a completed bulk transaction request indicating that processing is complete. Alternatively the host organization provides job status information responsive to a status request.

Because multiple server nodes or instances are present within the server pool it may be advantageous to issue parts or subsets e.g. or of a bulk transaction request in parallel for expedited processing based on an evaluation of current computational load. At other times the current computational load may be such that it is more appropriate to issue parts or subsets e.g. or of a bulk transaction request in serial. Both may be accommodated in a dynamic and flexible manner by having distinct trigger points or multiple trigger points by which the host organization may programmatically determine to issue work associated with bulk transaction requests aggressively using parallel processing or more conservatively using serial sequential processing.

Thus in accordance with one embodiment processing the subset of the plurality of database transactions e.g. or specified by the bulk transaction request against the multi tenant database system when the current computational load is below the threshold includes selecting serial processing when the current computational load is below the threshold by a first margin wherein serial processing comprises issuing the subset of database transactions to one server node within a pool of server nodes for processing. For example if a specified threshold at which point bulk request processing work may be distributed to the server pool is for example 60 current computational load a first margin of 20 for example may dictate that only serial processing be selected for current computational loads of 40 up to 60 . In such an embodiment parallel processing may therefore be selected only when the current computational load is below the threshold by a second margin. Any margin greater than 20 below a specified threshold may therefore allow distribution of bulk transaction request workload to be distributed to the server pool in a parallel manner. Using the above example a current computational load of 0 up to 40 may therefore allow for selecting parallel processing current computational loads of 40 up to 60 may correspond to selecting serial processing and current computational loads in excess of 60 would delay all processing associated with bulk transaction requests. The above specified thresholds are exemplary only. Other thresholds and margins may be specified so as to enable a dynamic and flexible selection mechanism between serial and parallel processing.

In accordance with one embodiment parallel processing includes a segmenting the subset of database transactions e.g. or into a plurality of parts and b issuing the plurality of parts constituting the subset of database transactions e.g. or to a plurality of server nodes within the pool of server nodes for processing in parallel. For example a subset of database transactions e.g. selected for parallel processing may be broken into four parts e.g. via load balancer and then issued simultaneously to four separate server nodes within the server pool such as individual server nodes and each server node processing its respective part and transacting with the multi tenant database system in parallel. Similarly work may be broken into work threads and assigned to redundant instances such as virtual machines or Java Virtual Machines JVMs for multi threaded parallel processing.

In accordance with one embodiment bulk transaction request is one of a plurality of requests received from a plurality of customer organizations e.g. A C . In such an embodiment each customer organization corresponds is one of a separate and distinct remote organization an organizational group within the host organization e.g. such as a division or department within a business Enterprise a business partner of the host organization or a customer organization that subscribes to cloud computing services provided by the host organization .

Because the host organization supports multiple tenants e.g. customer organizations A C with the same underlying shared multi tenant database system implementation the host organization may organize bulk transaction requests in such a way that resources are allocated evenly or prevented from being consumed in an un even manner by one or more of the multiple customer organizations. For example one customer organization A C submitting numerous bulk transaction requests may inadvertently consume more than an appropriate share of computational resources of the host organization where there is contention for resources between such bulk transaction requests e.g. multiple bulk transaction requests from multiple customer organizations A C are queued and awaiting processing .

Thus in accordance with one embodiment the host organization receiving a second one or more bulk transaction requests e.g. within the file repository of the host organization responsively associates the bulk transaction request and the second one or more additional bulk transaction requests with one of a plurality customer organizations A C based on an Organization ID OrgID and or a User ID UserID accompanying each bulk transaction request . For example such an OrgID or UserID may uniquely identify a customer organization A C so that any number of received bulk transaction requests from a single customer organization A C from end users of a single customer organization or from client devices associated with a particular customer organization may appropriately be linked to the customer organization for whom work is being performed.

Thus in accordance with one embodiment a job session is instantiated on behalf of any customer organization A C having one or more bulk transaction requests received by the host organization . In some embodiments a customer organization requests a job session to be instantiated and then submits bulk transaction requests into the job session. In other embodiments job session is instantiated automatically and bulk transaction requests are associated with a job session based on the OrgID and or UserID accompanying such requests. In such a way host organization may ensure evenly distributed processing opportunities for each customer organization A C. Where desirable multiple job sessions may be allowed for select customer organizations A C thus allowing preferential processing of submitted bulk transaction requests .

In accordance with some embodiments all received bulk transaction requests are loaded into the transaction queue and retrieving a bulk transaction request from the transaction queue is performed on a round robin scheduling basis selecting one bulk transaction request from among all bulk transaction requests in the transaction queue at a time. Where job sessions are utilized for grouping such request retrieving a bulk transaction request from the transaction queue is performed by first selecting one of the instantiated job sessions on a round robin basis and then retrieving a bulk transaction requests associated with the selected job session e.g. on a FIFO first in first out basis on a round robin basis etc. .

In one embodiment system includes a memory and a processor or processors . For example memory may store instructions to be executed and processor s may execute such instructions. System includes bus to transfer transactions and data within system among a plurality of peripheral devices communicably interfaced with bus . System further includes web server for example to receive requests return responses and otherwise interface with remote clients such as client devices located within customer organizations A C.

System is further depicted as having a statistics engine designed to collect aggregate and process operational statistics associated with a communicatively interfaced multi tenant database system such as that depicted at element of and optionally to calculate a current operational load of the multi tenant database system. File repository receives and stores bulk transaction requests submitted to system such as bulk transaction requests awaiting processing. Transaction queue queues a plurality of requests awaiting processing on behalf of users of the multi tenant database system such requests include bulk transaction requests and real time transaction requests pending processing against the multi tenant database system. System further includes a global caching layer to provide caching services to communicably interfaced devices and systems and in particular provide caching of status information and results data e.g. meta data etc. .

Distinct within system is hardware based load balancer which includes transaction retriever load analyzer results module and distribution module . In accordance with one embodiment transaction retriever retrieves database transactions for processing from the transaction queue including retrieving bulk transaction requests and real time transaction requests for processing. Load analyzer retrieves calculated current computational loads e.g. from statistics engine or retrieves information necessary to calculate and determine a current computational load of the multi tenant database system. In some embodiments load analyzer further selects a method of processing including making a determination to schedule database transactions within a bulk transaction request in serial or parallel. Distribution module operates in conjunction with load analyzer to distribute work to available server nodes within a server pool based on information or directives provided by load analyzer . Results module collects results and exit codes and updates a bulk transaction results log based on the collected information.

Method begins with processing logic receiving a bulk transaction request at a host organization the bulk transaction request specifying a plurality of database transactions to be processed against a multi tenant database system of the host organization block . At block processing logic validates the bulk transaction request against one or more specifications and at block processing logic inserts the bulk transaction request into a transaction queue.

At block processing logic determines a current computational load of the multi tenant database system. At block processing logic retrieves a bulk transaction request from the transaction queue. At block processing logic processes a subset of the plurality of database transactions specified by the bulk transaction request based on the current computational load. Alternatively processing logic may delay processing of the bulk transaction request based on the current computational load.

At block processing logic updates a bulk transaction results log based on the subset of the plurality of database transactions processed and at block processing logic of the host organization issues a job status for the bulk transaction request indicating completion status e.g. partially complete percentage complete all transactions complete etc. .

At block processing logic re queues the bulk transaction request in the transaction queue having the subset of the plurality of database transactions processed and having a remaining portion of the plurality of database transactions unprocessed.

At block processing logic iteratively repeats method operations as necessary until processing of the bulk transaction request is complete. For example the method may re retrieve a partially processed bulk transaction request from the transaction queue process all of a remaining portion or part of the remaining portion based on a re determined current computational load etc.

The exemplary computer system includes a processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. static memory such as flash memory static random access memory SRAM volatile but high data rate RAM etc. and a secondary memory e.g. a persistent storage device including hard disk drives and persistent multi tenant database implementations which communicate with each other via a bus . Main memory includes transaction queue e.g. queues and manages multiple pending requests including bulk transaction requests and real time transaction requests pending processing against a communicatively interfaced multi tenant database system . Also within main memory is global cache layer which caches data metadata transaction status etc. on behalf of connected components. Main memory and its sub elements e.g. and are operable in conjunction with processing logic and processor to perform the methodologies discussed herein. Hardware based load balancer operates in conjunction with processing logic and processor to retrieve pending transaction requests from transaction queue for processing against a connected multi tenant database system.

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processor is configured to execute the processing logic for performing the operations and functionality which is discussed herein.

The computer system may further include a network interface card . The computer system also may include a user interface such as a video display unit a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. an integrated speaker . The computer system may further include peripheral device e.g. wireless or wired communication devices memory devices storage devices audio processing devices video processing devices etc.

The secondary memory may include a non transitory machine readable storage medium or more specifically a non transitory machine accessible storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable storage media. The software may further be transmitted or received over a network via the network interface card .

While the subject matter disclosed herein has been described by way of example and in terms of the specific embodiments it is to be understood that the claimed embodiments are not limited to the explicitly enumerated embodiments disclosed. To the contrary the disclosure is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements. It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the disclosed subject matter is therefore to be determined in reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

