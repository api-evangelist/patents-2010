---

title: Method and system for synthetic backup and restore
abstract: A method and system for backing up and restoring data. First, a full backup is performed to create a full dataset. Thereafter, incremental or differential datasets may be created by incremental or differential backups, respectively. When a new full dataset is needed, instead of performing a full backup, a previous full dataset may be combined with subsequent incremental or differential datasets to create the new full dataset. The new full dataset may be created on a computer other than the computer which hosts the data of the previous full dataset. The new full dataset may be used for offsite storage or to quickly restore data in the event of a failure or corruption of a computer's file system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08533189&OS=08533189&RS=08533189
owner: Microsoft Corporation
number: 08533189
owner_city: Redmond
owner_country: US
publication_date: 20100709
---
This Application is a continuation of and claims the benefit of and priority to U.S. patent application Ser. No. 10 948 009 filed on Sep. 22 2004 and entitled METHOD AND SYSTEM FOR SYNTHETIC BACKUP AND RESTORE now U.S. Pat. No. 7 756 833 issued on Jul. 13 2010 which application is expressly incorporated herein by this reference in its entirety.

Performing full backups of data on a computer is a very costly management task. Typically it involves enumerating all files on the file system of the computer and backing up each of those files individually. Because of the random nature in which these files are spread over the file system and the significant overhead imposed by extracting metadata associated with the files enumerating over all the files in performing a backup tends to be very slow. Despite the expense most organizations perform a full backup on a weekly basis both to limit the time that it takes to recover from a disaster and because of the need to store datasets created by these backups offsite in case of data center loss e.g. fires flooding and earthquakes .

Incremental or differential backups may be performed between full backups to capture the changes that happen between the full backups. The datasets created by both incremental and differential backups may consume considerable resources in storing the differences between the file system at the time of the full backup and the time of the differential backup. With incremental backups restoring the files on a computer after a disaster may consume substantially more time as the dataset created by the full backup may need to be restored and then datasets created by one or more incremental backups applied.

What is needed is a method and system that quickly and efficiently allows a file system to be fully backed up without severely impacting the performance of a computer. Ideally such a method and system would also provide an efficient mechanism for restoring files to the computer in the case of partial or complete failure of the computer s file system.

Briefly the present invention provides a method and system for backing up and restoring data. First a full backup is performed to create a full dataset. Thereafter incremental or differential datasets may be created by incremental or differential backups respectively. When a new full dataset is needed instead of performing a full backup a previous full dataset may be combined with subsequent incremental or differential datasets to create the new full dataset. The new full dataset may be created on a computer other than the computer which hosts the data of the previous full dataset. The new full dataset may be used for offsite storage or to quickly restore data in the event of a failure or corruption of a computer s file system.

In another aspect of the invention a physical backup is performed which allows shadow copies included on a volume to also be backed up.

In another aspect of the invention datasets may be created using differential compression to allow multiple datasets to be efficiently stored in online storage.

In another aspect of the invention a file system filter tracks which blocks or extents of certain files e.g. large files in a file system have changed. Upon backup rather than copying each large file only the blocks or extents that have changed are copied.

In another aspect of the invention data from a dataset may be read directly from the dataset by an application to allow access to the data prior to or without restoring the dataset.

Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings in which 

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microcontroller based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner a touch sensitive screen of a handheld PC or other writing tablet or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Instead of performing full backups on a periodic basis a full backup may be performed once with incremental or differential backups performed thereafter. Whenever a new full dataset is needed e.g. on a weekly basis for off site storage or otherwise a synthetic full backup may be performed using the last full dataset and either the last differential dataset or all the incremental datasets created after the last full dataset. A synthetic full backup creates a dataset that is equivalent to what a normal full backup would have created if executed at the create time of the last dataset used by the synthetic full backup. Hereafter the term full backup may refer to a normal full backup and or to a synthetic full backup.

The term full dataset refers to a representation of data of a data source at a point in time. A data source may include a volume e.g. for file oriented data a database e.g. for data stored in a complex store or some combination thereof. A full dataset may be created by performing a normal full backup a synthetic full backup or a physical full backup.

A differential dataset is created by a differential backup and includes the differences between a data source at the time of the last full backup and the data source at the time the differential backup is performed. An incremental dataset is created by an incremental backup and includes the differences between a data source at the time of the last backup full differential or incremental and the data source at the time the incremental backup is performed.

An algorithm for doing a merge of the datasets created by a full backup and a differential backup in a synthetic full backup is described below. This algorithm assumes that each dataset is formatted in Microsoft . Tape Format MTF although the methodology applies to datasets formatted in any format where there is an existing or creatable catalog enumerating the contents of the datasets or at least the deltas from the previous full differential or incremental dataset.

In each dataset created in MTF format by a full incremental or differential backup an entry for each file or directory on the volume appears in a header of the dataset. Hereafter the term object is sometimes used to refer to a file or directory or both. For a full dataset created in MTF format by a full backup the metadata and data for all files and directories on the volume appear in the full dataset. For datasets created in MTF format by differential or incremental backups the metadata and data for an entry may only appear in the dataset created by the differential or incremental backup if the object has been newly created or changed from the previous dataset on which the differential or incremental dataset is based. MTF orders objects within a dataset in a well defined order and ensures that if an object F appears in the dataset then all of the object s ancestor directories parent grandparent etc. up to the root of the volume have also previously appeared within the dataset.

As used herein data associated with an object includes the content associated with the object while metadata associated with an object includes any attributes or other data associated with the object.

At block the pointer associated with each dataset is assigned to the first entry associated with the dataset. At block each pointer is advanced if necessary until the entry associated with the pointer is either equal to or greater than the entry pointed to by Bas described in more detail in conjunction with . A pointer may not need to be advanced if the entry it points to is already greater than or equal to the entry pointed to by Bor if the pointer has passed the last entry of its associated dataset.

At block information from the first dataset that includes metadata and data is added to the new dataset as described in more detail in conjunction with . At block the pointer Bis advanced to examine the next entry found in the dataset. At block if Bindicates that the end of its dataset has been reached processing ends at block otherwise processing branches to block .

At block a determination is made as to whether the index e.g. X is greater than the number of pointers e.g. N . If so all the pointers have been examined and advanced if necessary and processing branches to block where the process returns to the calling process. If not processing branches to block where the next pointer is selected.

Note that under MTF if a dataset contains an entry for an object but no metadata or data this means that each previous dataset contains such an entry for this object until some dataset also contains the data and metadata for the object.

As noted above the algorithm described above has been described based on MTF format. It will be recognized however that without departing from the spirit or scope of the present invention this algorithm may be readily modified to account for other formats as long as each incremental or differential dataset includes a way of determining what objects were deleted from the previous dataset and what objects were modified or added to the previous dataset.

While the algorithm described above may be used to merge datasets which are either on disk or on tape in practice it may be most efficient when all of the incremental differential datasets and the full dataset that are being merged are on disk.

Furthermore the algorithm described above may be generalized to a multi pass merge but overheads associated with multiple passes may make the algorithm less interesting in practice. Since tape is a sequential media having all datasets open simultaneously may use a moderately large number of tape drives e.g. one drive per dataset and may work best with no collocation of the datasets i.e. one and only one merging dataset per media .

Finally to offload merge processing from a production computer a separate backup computer may be used to perform the merge processing. It will be recognized that this has many advantages including freeing the production computer for production purposes.

One problem with existing technology for performing full backups is that there is no association between the logical objects that are backed up and the physical representation of those objects on disk. This problem may be overcome through the use of a shadow copy. A shadow copy is a snapshot of one volume. Logically a shadow copy is an exact duplicate of a volume at a given point in time even though the volume may not be entirely copied e.g. via copy on write in creating the shadow copy. A shadow copy may be viewed as a separate volume by the operating system and any executing applications. For example a shadow copy may have a volume device a volume name a drive letter a mount point and any other attribute of an actual volume. In addition a shadow copy may be exposed through a network remote path such as a network share sometimes referred to simply as a share associated with it that allows access to a portion or all of the data contained within the shadow copy from a network.

A shadow copy may be created by various well known techniques including copy on write split mirror specialized hardware that creates a copy of the disk itself and other methods and systems known to those skilled in the art.

Shadow copy technology may use a differential area to implement copy on write shadow copies. The differential area maps blocks on the volume to the contents of those blocks at the point in time that the shadow copy was created. The difference technology of the shadow copy technology may operate on the physical block level instead of at the object file or directory level.

For example referring to in copy on write a driver may divide a disk into extents. An extent refers to a number of contiguous blocks on a storage media and may differ depending on application. For example one application may divide a disk into extents having one size while another application may divide the disk into extents having a different size.

If a block on the disk changes after creation of the shadow copy before the block is changed the extent containing the block e.g. extent is copied to a storage location e.g. extent in a differential area . For a particular shadow copy an extent is only copied the first time any block within the extent changes. When a request for information in the shadow copy is received first a check is performed to determine if the block has changed in the original volume e.g. by checking whether an extent containing that block exists in the differential area . If the block has not changed data from the original volume is retrieved and returned. If the block has changed data from the differential area is retrieved and returned. Note that if a block is overwritten with the same data that an extent containing the block is not written to the differential area .

In order to backup a shadow copy the mapping from the original volume physical blocks to differential area extents is preserved. One way to backup both the volume and any shadow copies persisted thereon is to do a physical backup of the volume. The term physical backup refers to copying physical blocks associated with a volume instead of performing an object by object backup. Note that blocks in empty extents may or may not be copied in a physical backup. A backup application may save a bitmap or other indication of which extents were empty and which were not empty in a dataset created by the backup. It will be recognized that not copying the empty extents will generally cause the dataset created by the physical backup to be smaller.

While various aspects of the invention have been described in conjunction with copy on write shadow copy techniques other shadow copy techniques may also be used without departing from the spirit or scope of the invention.

At block the process is started. At block a backup shadow copy of the volume involved in the backup is created. The backup shadow copy may be deleted as soon as the backup completes. Note that creating the backup shadow copy instead of attempting to copy blocks from the volume directly may be done to obtain a consistent and stable image of the volume.

At block the shadow copy is opened as a raw volume i.e. as a file representing the physical blocks underlying the shadow copy.

Whenever the differential areas used for persisted shadow copies are not collocated with the original volume both the volume containing the differential areas and the original volume are backed up together. This may be done by taking shadow copies of both volumes at the same time and then accessing the shadow copies to create a dataset. An exemplary method and system for taking such shadow copies is described in U.S. Pat. No. 6 647 473 which is assigned to the assignee of the present invention and hereby incorporated by reference.

A dataset created by a physical backup may also be used for a fast recovery in conjunction with a normal backup rotation that includes differential and or incremental backups. The dataset created by the physical backup may be treated as a full dataset and the dataset created by the differential or incremental backups may reference the dataset created by the physical backup. In this case a subsequent incremental or differential dataset may be restored by first restoring the dataset created by the physical backup and then applying any subsequent differential and incremental datasets.

In addition optional shadow copies may be created after applying each differential or incremental dataset. Creating these optional shadow copies may allow for quick reverting to a disk state represented by any of the shadow copies so that a volume may be restored to a state having as much good data as was available on the volume just prior to a disastrous loss or corruption of the volume.

Also note that when a full dataset is created by a physical full backup the restore speed may be substantially faster than restoring a dataset created through a non physical backup as the restore may be accomplished through a spiral write of blocks instead of object by object.

Typically a data source does not change substantially from week to week. Furthermore there are certain types of data sources where it is expected that very little change will occur. These data sources include 

Since the cost of maintaining a full dataset online is relatively expensive i.e. on the order of the size of the volume that is backed up being able to compress full datasets to take advantage of their slowly changing nature is advantageous and may allow many more full datasets to be maintained online using the same amount of storage.

2. Overwrite the original dataset on the original volume with a new full dataset or new synthetic full dataset as described in conjunction with .

2. Create a new full dataset or new synthetic full dataset as described in conjunction with on a volume other than the volume containing the original volume.

When the original dataset is overwritten with the new dataset the shadow copy technology described above places extents containing blocks that have changed in content between the original and new datasets into the differences area. Changing the name from the original dataset name to the new dataset name causes extents containing blocks with metadata regarding the original dataset to change and be placed in the differences area. This allows a program to access either the new dataset or the original dataset via the shadow copy . It will be recognized that by using the technique described above that the additional disk space needed for a new full dataset may simply comprise extents changed between the last full dataset and the new full dataset.

2. Apply one of the exemplary remote compression algorithms described above to the original full dataset and the synthetic full dataset created in step to create a differentially compressed dataset.

After the differentially compressed dataset is created using remote differential compression a full dataset may be obtained by applying the differential compressed file to the previous full dataset.

A differential or incremental backup may be performed by examining each object on a storage device to see if the object has changed since the previous backup upon which the differential or incremental backup is based. Determining whether an object has changed may be performed for example by looking at the last modify time of the object. If it is determined that the object has changed then the entire object may be copied to the dataset. Copying an entire object into a incremental or differential dataset each time any portion of the object changes may consume significant resources for large objects such as databases and e mail stores which change frequently but where only a small portion of the object is actually changed.

In one embodiment of the invention the extents in an object that have actually changed since a last backup are tracked so that they may be backed up when an incremental or differential backup is performed. Tracking these extents may be accomplished with a file system filter that keeps track of changes to large files e.g. any files larger than 16 MB on the volumes of a computer. The size of files tracked by the file system filter may be pre configured or selected.

A file system filter may maintain the following information in a persistent store associated with a volume 

In one embodiment of the invention the file system filter tracks the set of blocks that have changed in the object rather than the set of extents that have.

With an incremental backup scheme the persistent store that tracks the extents may be reset each time an incremental or full backup is performed so that changes from each previous backup are tracked. If a differential backup scheme is used the persistent store that tracks the extents may be reset each time a new full backup is performed.

A differential or incremental backup may use the persistent store as follows. If a reference to an object appears in the persistent store then the differential or incremental backup may simply back up 

To reconstruct an object from a set of incremental datasets and a full dataset or from a differential dataset and a full dataset the following actions may be performed 

1. For each extent in the object find the most recent dataset that has that extent in its list of extents that have changed or has a full dataset of the object and

In one embodiment of the invention two lists of extents may be maintained to support a full differential and incremental backup scheme. The file system filter tracks whether each candidate object e.g. of sufficient size or other criteria has changed in the two lists by 

A differential dataset may be created using the first list of extents while an incremental dataset may be created using the second list of extents. The second list may be reset whenever an incremental or differential backup is performed. The first list may be reset when a full backup is performed.

Many applications e.g. e mail document management active directory and the like store objects in a database. It is often desirable to restore particular sets of objects from the database rather than restoring the entire database. This is often the case when recovering from a user error such as when a user accidentally deletes documents or email messages that the user did not intend to delete. For example it is very common to restore mailboxes from e mail databases and individual documents from a document management system.

Typically these kinds of objects may be restored by allocating space for the entire database restoring the entire database to the point in time that the objects to be restored are at the desired state e.g. not deleted or changed and then using an application e.g. an e mail system document management system or other suitable application to mount the database and extract the desired objects.

By keeping a dataset on a disk there may be no need to restore the dataset to a disk before accessing the desired objects via the appropriate application. Instead the application may access the files directly as stored in the dataset. If a dataset created by a physical backup is stored as a copy of a volume as opposed to in MTF format the dataset may be mounted directly as a volume after removing any header or trailer in the dataset.

If the dataset is stored in an MTF format or some other archive format a file system filter may perform the following actions 

The file system filter may utilize an online catalog associated with the dataset that maps each object in the dataset to a corresponding offset in the created volume. This catalog may be created for datasets that do not store a catalog therein. For example when opening an object in the volume the online catalog may be searched for that object and the offset into the dataset found.

Headers at the offset may be used to extract metadata for the object and to create a mapping between the offsets to the object and offsets into the data for the object. Any read operations on the object may result in a corresponding read operation on the dataset at the computed offset based on this mapping.

For datasets stored in MTF or non MTF format if a dataset is created by an incremental or differential backup then a file system filter may treat the dataset and any other datasets it is based on as a unit. To obtain information related to an object the unit of datasets may be searched to find the most recent dataset containing the information. Prior to allowing access to the volume based on the group of datasets created by backups an online catalog may be created to map objects to their corresponding locations within the datasets.

As can be seen from the foregoing detailed description there is provided an improved method and system for creating restoring and using datasets associated with backups. While the invention is susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention.

