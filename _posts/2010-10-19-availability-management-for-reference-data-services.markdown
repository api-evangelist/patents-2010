---

title: Availability management for reference data services
abstract: Various aspects for scaling an availability of information are disclosed. In one aspect, a response performance associated with responding to data consumption requests is monitored. A characterization of the response performance is ascertained, and a scaling of resources is facilitated based on the characterization. In another aspect, a data consumption status indicative of data consumed is ascertained. Here, a scalability interface is provided, which displays aspects of the status, and receives an input from a content provider. An allocation of resources is then modified in response to the input. In yet another aspect, a response performance associated with responding to data consumption requests is monitored. An application programming interface (API) call is generated based on a characterization of the response performance, and transmitted to a content provider. An API response is then received from the content provider indicating whether a scaling of resources for hosting the data was performed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09483313&OS=09483313&RS=09483313
owner: Microsoft Technology Licensing, LLC
number: 09483313
owner_city: Redmond
owner_country: US
publication_date: 20101019
---
The subject disclosure relates to scaling resources to facilitate the availability of data in connection with providing information as a service.

By way of background concerning some conventional systems computing devices have traditionally stored information and associated applications and data services locally to the device. Yet with the evolution of on line and cloud services information is increasingly being moved to network providers who perform none some or all of service on behalf of devices. The evolution of network storage farms capable of storing terabytes of data with potential for petabytes exabytes etc. of data in the future has created an opportunity to mimic the local scenario in a cloud with separation of the primary device and the external storage.

However no cloud service or network storage provider has been able to effectively provide information as a service on any platform with publishers developers and consumers easily publishing specializing applications for and consuming any kind of data in a way that can be tracked and audited for all involved. In addition due to the disparate number of content providers and their typically proprietary schemas for defining data today where disparate content providers do not coordinate their publishing acts to the cloud with one another there is little opportunity to leverage the collective power of such disparate publishing acts.

Web services are typically built with a certain audience size in mind wherein the data centers infrastructure that host and make the data services available are built and resourced with these goals in mind. However as Web services become more popular increased consumption can bring such services down as a result of too many requests to read. Namely there are sometimes insufficient resources to adequately respond to the increase in requests. Similarly a content provider may over allocate resources in circumstances where data consumption decreases which results in the content provider unnecessarily paying for unused resources. As a result today dealing with significant increases or decreases in demand for web services for data is a fragmented problem with no common solution.

The above described deficiencies of today s devices and data services are merely intended to provide an overview of some of the problems of conventional systems and are not intended to be exhaustive. Other problems with the state of the art and corresponding benefits of some of the various non limiting embodiments may become further apparent upon review of the following detailed description.

A simplified summary is provided herein to help enable a basic or general understanding of various aspects of exemplary non limiting embodiments that follow in the more detailed description and the accompanying drawings. This summary is not intended however as an extensive or exhaustive overview. Instead the sole purpose of this summary is to present some concepts related to some exemplary non limiting embodiments in a simplified form as a prelude to the more detailed description of the various embodiments that follow.

In accordance with one or more embodiments and corresponding disclosure various non limiting aspects are described in connection with providing information as a service from any platform. In one such aspect a method that facilitates a scalable availability of information is provided. The method can include receiving a plurality of requests directed towards a consumption of data associated with a content provider. The embodiment further can include monitoring a response performance associated with responding to the plurality of requests as well as determining a characterization of the response performance. A scaling of resources allocated for the data is then facilitated based on the characterization.

In another aspect a method for facilitating a scalable availability of information is provided. A communication between a content provider and a server is established and a data consumption status is ascertained. Here the data consumption status is indicative of content provider data consumed via the server. The method can further include providing the content provider with a scalability interface. For this embodiment the scalability interface displays at least one aspect of the data consumption status to the content provider and also receives an input from the content provider. An allocation of data availability resources associated with the content provider is then modified in response to the input.

In yet another aspect an additional method is provided which facilitates a scalable availability of information. This embodiment includes monitoring a response performance associated with responding to data consumption requests. Here the data consumption requests are requests for data hosted by a content provider. The method further includes generating an application programming interface API call based on a characterization of the response performance and transmitting the API call to the content provider. An API response is then received from the content provider which indicates whether a scaling of resources for hosting the data was performed and such that a processing of the data consumption requests is modified according to the scaling of resources.

Other embodiments and various non limiting examples scenarios and implementations are described in more detail below.

As discussed in the background Web services are typically built with a certain audience size in mind wherein the data centers infrastructure that host and make the data services available are built and resourced with these goals in mind. However as Web services become more popular increased consumption can bring such services down as a result of too many requests to read wherein there are insufficient resources to handle the responses or other unpredictable variations can occur. If a global information marketplace is desired it would be desirable for the architecture of such marketplace to overcome these limitations by providing a way for content providers to scale their data centers up or down as appropriate whether the data is hosted internal or external to the management system.

The various embodiments disclosed herein are directed to scale out systems and methods as well as to interfaces used to communicate with content providers to facilitate such scaling of resources and to the communications attendant to such systems methods and interfaces.

Referring next to a block diagram of an exemplary resource management unit that facilitates a scalable availability of information according to an embodiment is provided. As shown resource management unit can include processor component memory component communication component monitoring component evaluation component scaling component generation component and billing component .

In one aspect processor component is configured to execute computer readable instructions related to performing any of a plurality of functions. Processor component can be a single processor or a plurality of processors dedicated to analyzing information to be communicated from resource management unit and or generating information that can be utilized by memory component communication component monitoring component evaluation component scaling component generation component and or billing component . Additionally or alternatively processor component can be configured to control one or more components of resource management unit .

In another aspect memory component is coupled to processor component and configured to store computer readable instructions executed by processor component . Memory component can also be configured to store any of a plurality of other types of data including generated by any of communication component monitoring component evaluation component scaling component generation component and or billing component . Memory component can be configured in a number of different configurations including as random access memory battery backed memory hard disk magnetic tape etc. Various features can also be implemented upon memory component such as compression and automatic back up e.g. use of a Redundant Array of Independent Drives configuration.

In yet another aspect resource management unit includes communication component which is coupled to processor component and configured to interface resource management unit with external entities. For instance communication component can be configured to receive data consumption requests for data associated with a particular content provider.

As illustrated resource management unit can further include monitoring component and evaluation component . Within such embodiment monitoring component is configured to monitor a response performance associated with responding to the data consumption requests whereas evaluation component is configured to ascertain a characterization of the response performance.

Resource management unit can also include scaling component which is configured to facilitate a scaling of resources allocated for the data based on the characterization. To this end it is noted that scaling component can be configured to facilitate such scaling in any of a plurality of ways. For instance it is contemplated that scaling component can be configured to facilitate a scaling of resources performed external to resource management unit . Indeed since it is contemplated that content providers themselves can host their data scaling component can be configured to generate response performance status messages which are communicated to the content provider via communication component . In a particular embodiment generation component can be included and configured to generate an application programming interface API call to the content provider wherein the API call includes a request associated with the at least one aspect of the response performance e.g. a warning message a mandatory scaling message etc. An API response to the request can then be received from the content provider wherein the response identifies a scaled set of locations associated with the data e.g. locations of additional databases allocated by the content provider.

Scaling component however can also be configured to facilitate a scaling of resources performed within resource management unit . Within such embodiment resource management unit hosts the content provider s data within a set of replicated databases such that scaling component is configured to scale resources by removing and or adding a replica database. Content providers can also be provided with a scalability interface to facilitate receiving instructions from the content provider associated with the scaling of resources allocated to the content provider.

In a further aspect resource management unit includes billing component . Within such embodiment billing component can be configured to monetize the scaling of resources allocated to the content provider. Moreover it is contemplated that costs associated with scaling resources either up or down can be automatically quantified. Accordingly actual and or hypothetical costs associated with the scaling of resources can be made readily available via billing component .

As illustrated interface can also include scaling adjustment . Here since content providers can prefer to scale resources in terms of business metrics e.g. costs number of requests etc. scaling adjustment can be included wherein content providers simply slide multiplier knob across scaling adjustment as desired. For example a baseline indicator can be provided wherein sliding multiplier knob to the right increases a business metric multiplier e.g. scales resources up whereas sliding multiplier knob to the left decreases a business metric multiplier e.g. scales resources down.

Referring next to a block diagram illustrates an exemplary scalability interface that facilitates scaling resources in accordance with various aspects. As illustrated scalability interface can include processor component memory component status component display component input component modification component and conversion component .

Similar to processor component in resource management unit processor component is configured to execute computer readable instructions related to performing any of a plurality of functions. Processor component can be a single processor or a plurality of processors dedicated to analyzing information to be communicated from scalability interface and or generating information that can be utilized by memory component status component display component input component modification component and or conversion component . Additionally or alternatively processor component can be configured to control one or more components of scalability interface .

In another aspect memory component is coupled to processor component and configured to store computer readable instructions executed by processor component . Memory component can also be configured to store any of a plurality of other types of data including data generated by any of status component display component input component modification component and or conversion component . Here it is noted that memory component is analogous to memory component in resource management unit . Accordingly it can be appreciated that any of the aforementioned features configurations of memory component are also applicable to memory component .

As illustrated scalability interface can also include status component and display component . Within such embodiment status component is configured to ascertain a data consumption status indicative of content provider data consumed whereas display component is configured to display any of various aspects of the data consumption status to the content provider. Here it is contemplated that such aspects of the data consumption status can be displayed in any of a plurality of ways. For instance display component can be configured to provide a graphical representation of the data consumption status e.g. a bar graph tracking a number of data requests over time.

Scalability interface can further include input component and modification component . Within such embodiment input component is configured to receive an input from a content provider whereas modification component is configured to modify an allocation of data availability resources associated with the content provider in response to the input. To facilitate such modifications scalability interface can also include conversion component which is configured to perform a conversion between scalability metrics and business metrics. Moreover a particular business metric is convertible into a corresponding scalability metric whereas a particular scalability metric is convertible into a corresponding business metric. In an aspect scalability metrics can be associated with any of a plurality of metrics directly related to a processing of the content provider s data consumption e.g. a capacity to process a number of queries per unit of time whereas business metrics can be associated with any of a plurality of business related metrics e.g. a demand associated with the content provider data a cost of hosting a scaled amount of the content provider data etc. Indeed since content providers can prefer to enter business metrics rather than scalability metrics various tools for toggling between such metrics can be provided. For instance in an aspect input component can be configured to receive the content provider s input as a multiplier of a desired business metric wherein conversion component is configured to convert the desired business metric into a corresponding scalability metric based on the multiplier. To this end input component can be implemented as a multiplier knob wherein the multiplier is ascertained from the content provider via the multiplier knob.

Referring next to a block diagram illustrates an exemplary application programming interface API unit that facilitates scaling resources in accordance with various aspects. As illustrated API unit can include processor component memory component monitoring component generation component communication component and triggering component .

Similar to processor components and in resource management unit and scalability interface respectively processor component is configured to execute computer readable instructions related to performing any of a plurality of functions. Processor component can be a single processor or a plurality of processors dedicated to analyzing information to be communicated from API unit and or generating information that can be utilized by memory component monitoring component generation component communication component and or triggering component . Additionally or alternatively processor component can be configured to control one or more components of API unit .

In another aspect memory component is coupled to processor component and configured to store computer readable instructions executed by processor component . Memory component can also be configured to store any of a plurality of other types of data including data generated by any of monitoring component generation component communication component and or triggering component . Here it is noted that memory component is analogous to memory components and in resource management unit and scalability interface respectively. Accordingly it can be appreciated that any of the aforementioned features configurations of memory components and are also applicable to memory component .

As illustrated API unit can also include monitoring component and generation component . Within such embodiment monitoring component is configured to monitor a response performance associated with responding to data consumption requests for data hosted by a content provider whereas generation component is configured to generate an API call based on a characterization of the response performance.

In another aspect API unit includes communication component which is coupled to processor component and configured to interface API unit with external entities. For instance communication component can be configured to transmit the API call generated by generation component to the content provider. Communication component can also be configured to receive an API response from the content provider wherein such response indicates whether a scaling of resources for hosting the data was performed. Within such embodiment a processing of the data consumption requests can then be modified according to the scaling of resources.

In a further aspect it is contemplated that API calls are generated transmitted according to a tiered characterization of the response performance. Within such embodiment triggering component can be included wherein triggering component is configured to determine when the response performance exhibits a particular characterization based on any of a plurality of tiered performance thresholds. For instance triggering component can be configured to detect a triggering of a warning threshold wherein the API call includes a warning message indicating that the response performance has exceeded a pre determined warning threshold e.g. at 25 slowdown.

Triggering component can also be configured to detect a triggering of a mandatory scaling threshold wherein the API call includes a mandatory scaling message indicating that the response performance has exceeded a pre determined mandatory scaling threshold e.g. at 50 slowdown. Here it is noted that particular details can be included in the API call and or API response to facilitate such a mandatory scaling threshold. For instance the API call can include an indication of a current number of replicas of the data a response time associated with the triggering of the mandatory scaling threshold and or an average response time whereas the API response can include an indication of a new number of replicas of the data a location of a new data source associated with the data and or a status of a scaling procedure performed by the content provider and or a third party associated with the content provider.

More severe tiers are also contemplated e.g. at 50 slowdown. For instance triggering component can be configured to detect a triggering of a policy modification threshold. Within such embodiment in response to the triggering of the policy modification threshold a processing of the data consumption requests can include a modification of a cache policy associated with the data consumption requests.

The following description contains supplemental context regarding potential non limiting infrastructure architectures and or associated services to further aid in understanding one or more of the above embodiments. Any one or more of any additional features described in this section can be accommodated in any one or more of the embodiments described above with respect to updating of data set semantics and corresponding access APIs for information as a service from any platform. While such combinations of embodiments or features are possible for the avoidance of doubt no embodiments set forth in the subject disclosure are to be considered limiting on any other embodiments described herein.

By way of some additional background today while information can be obtained over networks such as the Internet today s offerings tend to the proprietary in terms of access and framework and are thus limited in terms of third party provider participation. For instance currently there is no adequate business model for commercial content providers to publish their data in a way that does not relinquish at least some of the value of such commercial content and thus historically owners of valuable content have tended to expose that content through limited proprietary means. Or in instances where storage of such content is provided by secure cloud storage providers there is little value in storage alone when a consumer wades through thousands of tables to potentially find an item of interest as a result. In addition even where cloud storage providers attempt to collect data from various providers at best such providers can boast a modest small or incomplete catalog of data.

Much of the stunting of potential growth in this area has been the result of mistrust over handling and IP e.g. copyrights. In short big players don t trust cloud providers with crown jewels because a single compromise can end the value of the data. In addition such cloud providers to date have had a weak position with respect to information workers who wish to extract value from such data for their informational needs and in addition due to the proprietary nature of such systems developers have thus far had limited ability to expand tools for developing informational capabilities.

Accordingly as described for one or more embodiments an infrastructure for information as a service is provided that accommodates all classes of individuals publishers developers information workers and consumers. The infrastructure enables information discovery e.g. the ability to discover acquire and consume structured and blob datasets to power any application on any platform and any form factor e.g. any screen size. The infrastructure further enables brokerage business e.g. a partner driven ecosystem and global reach to deliver data and functionality to developers and information workers. The infrastructure also allows analytics and reporting e.g. a single click analysis to augment private data with public data. In this regard due to the open nature of various implementations of the infrastructure any application developer can develop mobile cloud and or desktop applications to facilitate the publishing processing querying and or retrieval of data.

To write applications one can register for account information e.g. sign in with Live ID and be provided with an account key by which to access the blob via structured and real time web services enabled for the infrastructure for information as a service as described for one or more embodiments herein. In one aspect developers can explore the APIs visually before coding begins. For instance a service explorer module or set of modules can be used by developers to visually construct representational state transfer REST API queries and preview the content according to a variety of packages such as but not limited to extensible markup language XML ATOM RAW for blob and real time content or in a table view e.g. for structured data. For example a developer merely provides his or her account key and selects to preview the content.

Accordingly developers can build mobile desktop or service applications on any platform. While resulting REST queries can be copied into a new developer application the infrastructure for information as a service also enables the ability to consume automatically generated C proxy classes to eliminate any need to create a local object model or generate and understand the details of XML or web service code. In this regard in another non limiting beneficial aspect a developer can download the proxy classes and include them in the developer s applications to consume service data with as few as a couple lines of code.

In this regard the various embodiments of an infrastructure for information as a service allow developers and information workers to find acquire and consume data in their applications and analytics scenarios instantly periodically or over some other function of time specified by the application developer. As mentioned a developer obtains an account key which then accompanies web services calls to the network services enabling information as a service as described for one or more embodiments herein for content requests and subscribing to the content of interest.

Thus in one aspect the account key provided by the infrastructure for information as a service as described for one or more embodiments herein is the developer s private key. This key enables billing and reporting on content used in connection with the developer s applications. As such this private developer key is not to be shared without purpose and precautions in securing the key are to be taken where developing native applications running on mobile or desktop solutions and planning to integrate the key as part of the deployment. For example cryptographic storage can be used to ensure the key is not cracked.

In addition to the account key which is used to track the application consuming the content the user ID can be a unique user ID that is a globally unique identifier GUID that represents the developer s individual users. This field allows billing for content that is priced on a per user basis programmatically. For example if a developer is developing a mobile application with an individual user consuming the application the developer returns the same GUID each time requests are made on behalf of that individual user. However if the developer is developing a web portal and issuing web service requests on behalf of a variety of users it is up to the developer to assign a new GUID for each user visiting the portal. For example each registered user can be assigned a GUID or each IP address port combination can be assigned a user ID GUID etc.

While REST APIs can be constructed on any platform to consume content from the infrastructure for information as a service as described for one or more embodiments herein in one embodiment proxy classes can be dynamically generated for services in C . Achieving this is a matter of downloading the object models adding them to the current developer project and updating the account and user values e.g. unique user values.

If a developer would like to issue requests manually an example is provided below but for any service the preview function can be used or the URLs created from the Service Explorer can be invoked as well. An exemplary non limiting REST query to a sample dataset is illustrated below. It is noted that some or all calls can be secure socket layer SSL secured.

The accountKey and uniqueUserId elements are also placed in the header of the request which appears as follows for example 

The value in accountKey represents the developer s account key found in the Accounts Tab and the value in uniqueUserID represents the GUID for the user accessing the service.

The above example authenticating approach is non limiting in that other authenticating approaches are also possible and thus the various embodiments described herein can implement any alternative authentication approaches. For instance Basic Authorization RFC 1945 with the AccountKey as the password or Access Control Server ACS using a token based approach or other token based approaches can be used as well.

Accordingly the infrastructure for information as a service as described for one or more embodiments herein is a new service or framework allowing developers and information workers to easily discover purchase and manage premium data subscriptions in any platform. The infrastructure is an information marketplace that brings data imagery and real time web services from leading commercial data providers and authoritative public data sources as well as non authoritative publishers together into a single or multiple locations that are unified under a common provisioning and billing framework. Additionally developers and information workers can consume this premium content with virtually any platform application or business workflow.

Some exemplary non limiting scenarios for using the infrastructure for information as a service as described for one or more embodiments herein include a finding premium content to next generation killer apps for consumer and business scenarios b discovering and licensing valuable data to improve existing applications or reports c bringing disparate data sets together in innovative ways to gain new insight into business performance and processes e.g. aggregation algorithms d instantly and visually exploring APIs across all content providers for blob structured and real time web services and e consuming third party data inside existing applications and data base systems such as existing word processing spreadsheet database query systems etc. for rich reporting and analytics.

Benefits for developers include a trial subscriptions allow content to be investigated and applications to be developed without paying data royalties b simple transaction and subscription models allow pay as you go or grow access to multi million dollar datasets c consistent REST based APIs across datasets facilitate development on any platform d visually building and exploring APIs previewing results and e automatic C proxy classes provide instant object models and eliminate the need to write tedious XML and web service code.

Benefits for Information Workers include a integration with PowerPivot to easily work with data in existing spreadsheet software such as but not limited to Excel b simple predictable licensing models for acquiring content and c the ability to consume data from SQL Server SQL Azure Database and other pre existing assets.

Benefits for Content Partners include a easy publication and onboarding process regardless of blob data structured data or dynamic web services b developer tooling on the selected platform to ease development e.g. via Visual Studio and .NET or other runtime system development c exposing developer content to global developer and information worker community d content discovery and integration inside pre existing content consumption applications and e a scalable cloud computing platform handles storage delivery billing and reporting on behalf of all parties.

In a non limiting implementation of the infrastructure for information as a service as described for one or more embodiments herein some features for Rich Web Services include a secure REST based model for consuming services across the entire content catalog b dynamic pagination built into the APIs to simplify access c Standard ATOM 1.0 feeds are available for most of the services and d consistent billing provisioning and usage reporting across all services.

In a non limiting implementation of the infrastructure for information as a service as described for one or more embodiments herein some features for a Service Explorer component include a C proxy classes generated to simplify development b preview of data in tabular form and as a feed such as an ATOM 1.0 feed if supported c invocation of the service to understand the results that the compiled service call returns d discovery of documentation and sample values for each of the parameters and e instant copying of the visually built URL for a service call into clipboard to ease development.

In a non limiting implementation of the infrastructure for information as a service as described for one or more embodiments herein some features for a Marketplace Integration and Discovery Portal component include a discovery of new data across domains including consumers and businesses b management of service subscriptions and usage limits c management of account keys to access the services and d detailed access reporting containing the services datasets that were accessed grouped by date and by account key.

The infrastructure provides a variety of value propositions for content owners application developers ISVs and for information workers and other consumers subscribers. For content owners the infrastructure enables monetization from data for data providers who charge for the data in addition to social benefits for data providers who do not charge for data but derive benefit from the publication of such data in other ways. Due to the openness of the infrastructure content owners enjoy greater availability and reach of data to ISVs and consumers information workers and all of this comes at a lower cost particularly over developing a proprietary model as in the past.

For application developers ISVs the infrastructure enables access to data in a consistent format variable and low cost pricing model for data access. predictable pricing profit potential from consumers IWs using the applications built using the data broader reach to consumers through any platform and a single billing and data source

For information workers consumers the infrastructure enables added value from applications consumption of data in current large object LOB or IW software a variable and low cost pricing model for data access in addition to a single billing and data source.

Accordingly the infrastructure solves a current customer and developer pain point with a potentially significant revenue upside creates business intelligence opportunities attached with instant data for modeling reporting analysis and trending and creates adoption and stickiness for any platform by encouraging data owners to store their data via the infrastructure thereby differentiating the infrastructure s value proposition when compared with conventional cloud storage environments.

As shown in the flow diagram of at described herein are various ways for content owners or publishers to publish data via the infrastructure. At there are a variety of tools that allow developers to developer applications for consuming the data via the infrastructure. At consumers or information workers use the applications or can directly query over the data to consume the data. Lastly the infrastructure provides a rich variety of tools at that enable automatic administration auditing billing etc. on behalf of all parties in the content chain enabled by the transaction model.

In this regard some key parties in the infrastructure include data owners the application developers ISVs and the consumers information workers. In general data owners are entities who want to charge for data or who want to provide data for free for other reasons or enforce other conditions over the data. In turn application developers ISVs are entities who want to monetize their application e.g. through advertising direct payments indirect payments etc. or provide their application for free for some beneficial reason to such entities. Information workers and consumers are those who can use the raw data or those who want to use an application provided by the application developers.

In this regard various embodiments for the user friendly data platform for enabling information as a service from any platform is an infrastructure to enable consumers of data IWs developers ISVs and consumers of data to transact in a simple cost effective and convenient manner. The infrastructure democratizes premium private and community public data in an affordable way to allow IWs to draw insights rapidly allows developers to build innovative apps using multiple sources of data in a creative manner and enables developers to monetize their efforts on any platform. For instance the infrastructure supports Pay Per Use as well as Subscription Pricing for Content Pay for Content retail price set by content owner Pay Data Fee Shipping and Handling and BW and further supports Data fees as a brokerage fee on a per logical transaction basis per report per API per download etc. .

For Information Workers e.g. Office SQL Server Dynamics users the infrastructure supports subscriptions to allow for future EA integration as well as predictable spend requirements as well as caching to support on and off premise BI as well as HPC workloads . Thus alternatives include content priced per user per month which may or may not bundle to deliver content packs or per transaction pricing e.g. allowing cloud reporting business intelligence on demand pricing to eliminate the need to move large amounts of data while allowing per usage pricing or vertical apps via report galleries.

For content providers any data type any cloud using any platform the infrastructure becomes a value proposition to incent sales within any particular desired platform auto scaling higher level SLA possibilities at no additional cost. For some non limiting examples data can be secure and associated data in the following domains Location aware services data Commercial and residential real estate Financial data and services etc. A non limiting scenario can include delivery of data to top 30 non governmental organization NGO datasets. In addition the infrastructure can include the ability to showcase BI visualization through Bing for information as a service HPC etc. Vertical application opportunities exist as well.

In one non limiting embodiment the data brokerage can be analogized to conventional brick and mortar strategies For instance capacity can be represented as shelf space e.g. a mix of structured and unstructured blob data cost of goods COGS can be represented as square footage SA platform dependency bandwidth and content can be represented as merchandise e.g. optimize content providers to cover COGS maximize profits from IWs and developers . In various embodiments an onboarding process can be implemented with quality bars for data and services as well as accommodation of service level agreements SLAs .

As supplemental services to the data billing and discovery services can include online billing e.g. MOCP or discovery services e.g. pinpoint and authentication services can include credentials management e.g. Live ID or content authentication e.g. authenticated content services ACS . Accounts services can include logging audit services or account management . Management and operations services can include an operations dashboard service and network operations service e.g. Gomez.

Those skilled in the art will appreciate that network interactions and information services can be practiced with a variety of computer system configurations and protocols. In this regard one non limiting implementation for querying and updating data that can be used in one or more embodiments described herein is the Open Data Protocol OData .

OData is a web protocol for querying and updating data. OData applies web technologies such as HyperText Transfer Protocol HTTP Atom Publishing Protocol AtomPub and JavaScript Object Notation JSON to provide access to information from a variety of applications services and stores. For some general background OData emerged organically based on the experiences implementing AtomPub clients and servers in a variety of products over the past several years. OData can be used to expose and access information from a variety of sources including but not limited to relational databases file systems content management systems and traditional web sites. OData has been released under the Open Specification Promise OSP to allow anyone to freely interoperate with OData implementations in order to encourage growth of the ecosystem. Features of OData can be incorporated into other protocols as well to form hybrid protocols with similar functionality for querying and updating network data.

OData is consistent with the way the web works. In one aspect OData uses universal resource identifiers URIs as a way to identify resources and uses an HTTP centric protocol with a uniform interface for interacting with those resources e.g. similar to the way that the Internet works. In one non limiting aspect OData builds on the conventions over HTTP popularized by AtomPub which have simplified the process of sharing data content and information across independently developed systems. OData defines additional conventions that implementations can optionally implement to support basic query and schema information to be exchanged. To simplify integration with HTML and JavaScript clients OData defines an optional JSON representation of the protocol that complements the XML based AtomPub format. As one can appreciate additional implementation specific or other details regarding the OData protocol can be found at www.odata.org.

One of ordinary skill in the art can appreciate that the various embodiments of methods and devices for an infrastructure for information as a service from any platform and related embodiments described herein can be implemented in connection with any computer or other client or server device which can be deployed as part of a computer network or in a distributed computing environment and can be connected to any kind of data store. In this regard the various embodiments described herein can be implemented in any computer system or environment having any number of memory or storage units and any number of applications and processes occurring across any number of storage units. This includes but is not limited to an environment with server computers and client computers deployed in a network environment or a distributed computing environment having remote or local storage.

Each computing object or device etc. and computing objects or devices etc. can communicate with one or more other computing objects or devices etc. and computing objects or devices etc. by way of the communications network either directly or indirectly. Even though illustrated as a single element in network may comprise other computing objects and computing devices that provide services to the system of and or may represent multiple interconnected networks which are not shown. Each computing object or device etc. or etc. can also contain an application such as applications that might make use of an API or other object software firmware and or hardware suitable for communication with or implementation of an infrastructure for information as a service from any platform as provided in accordance with various embodiments.

There are a variety of systems components and network configurations that support distributed computing environments. For example computing systems can be connected together by wired or wireless systems by local networks or widely distributed networks. Currently many networks are coupled to the Internet which provides an infrastructure for widely distributed computing and encompasses many different networks though any network infrastructure can be used for exemplary communications made incident to the techniques as described in various embodiments.

Thus a host of network topologies and network infrastructures such as client server peer to peer or hybrid architectures can be utilized. In a client server architecture particularly a networked system a client is usually a computer that accesses shared network resources provided by another computer e.g. a server. In the illustration of as a non limiting example computing objects or devices etc. can be thought of as clients and computing objects or devices etc. can be thought of as servers where computing objects or devices etc. provide data services such as receiving data from computing objects or devices etc. storing of data processing of data transmitting data to computing objects or devices etc. although any computer can be considered a client a server or both depending on the circumstances. Any of these computing devices may be processing data or requesting services or tasks that may implicate an infrastructure for information as a service from any platform and related techniques as described herein for one or more embodiments.

A server is typically a remote computer system accessible over a remote or local network such as the Internet or wireless network infrastructures. The client process may be active in a first computer system and the server process may be active in a second computer system communicating with one another over a communications medium thus providing distributed functionality and allowing multiple clients to take advantage of the information gathering capabilities of the server. Any software objects utilized pursuant to the user profiling can be provided standalone or distributed across multiple computing devices or objects.

In a network environment in which the communications network bus is the Internet for example the computing objects or devices etc. can be Web servers with which the computing objects or devices etc. communicate via any of a number of known protocols such as HTTP. As mentioned computing objects or devices etc. may also serve as computing objects or devices etc. or vice versa as may be characteristic of a distributed computing environment.

As mentioned various embodiments described herein apply to any device wherein it may be desirable to implement one or pieces of an infrastructure for information as a service from any platform. It is understood therefore that handheld portable and other computing devices and computing objects of all kinds are contemplated for use in connection with the various embodiments described herein i.e. anywhere that a device may provide some functionality in connection with an infrastructure for information as a service from any platform. Accordingly the below general purpose remote computer described below in is but one example and the embodiments of the subject disclosure may be implemented with any client having network bus interoperability and interaction.

Although not required any of the embodiments can partly be implemented via an operating system for use by a developer of services for a device or object and or included within application software that operates in connection with the operable component s . Software may be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Those skilled in the art will appreciate that network interactions may be practiced with a variety of computer system configurations and protocols.

With reference to an exemplary remote device for implementing one or more embodiments herein can include a general purpose computing device in the form of a handheld computer . Components of handheld computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit .

Computer typically includes a variety of computer readable media and can be any available media that can be accessed by computer . The system memory may include computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and or random access memory RAM . By way of example and not limitation memory may also include an operating system application programs other program modules and program data.

A user may enter commands and information into the computer through input devices A monitor or other type of display device is also connected to the system bus via an interface such as output interface . In addition to a monitor computers may also include other peripheral output devices such as speakers and a printer which may be connected through output interface .

The computer may operate in a networked or distributed environment using logical connections to one or more other remote computers such as remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node or any other remote media consumption or transmission device and may include any or all of the elements described above relative to the computer . The logical connections depicted in include a network such local area network LAN or a wide area network WAN but may also include other networks buses. Such networking environments are commonplace in homes offices enterprise wide computer networks intranets and the Internet.

As mentioned above while exemplary embodiments have been described in connection with various computing devices networks and advertising architectures the underlying concepts may be applied to any network system and any computing device or system in which it is desirable to publish build applications for or consume data in connection with interactions with a cloud or network service.

There are multiple ways of implementing one or more of the embodiments described herein e.g. an appropriate API tool kit driver code operating system control standalone or downloadable software object etc. which enables applications and services to use the infrastructure for information as a service from any platform. Embodiments may be contemplated from the standpoint of an API or other software object as well as from a software or hardware object that facilitates provision of an infrastructure for information as a service from any platform in accordance with one or more of the described embodiments. Various implementations and embodiments described herein may have aspects that are wholly in hardware partly in hardware and partly in software as well as in software.

The word exemplary is used herein to mean serving as an example instance or illustration. For the avoidance of doubt the subject matter disclosed herein is not limited by such examples. In addition any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs nor is it meant to preclude equivalent exemplary structures and techniques known to those of ordinary skill in the art. Furthermore to the extent that the terms includes has contains and other similar words are used in either the detailed description or the claims for the avoidance of doubt such terms are intended to be inclusive in a manner similar to the term comprising as an open transition word without precluding any additional or other elements.

As mentioned the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. As used herein the terms component system and the like are likewise intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on computer and the computer can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

The aforementioned systems have been described with respect to interaction between several components. It can be appreciated that such systems and components can include those components or specified sub components some of the specified components or sub components and or additional components and according to various permutations and combinations of the foregoing. Sub components can also be implemented as components communicatively coupled to other components rather than included within parent components hierarchical . Additionally it is noted that one or more components may be combined into a single component providing aggregate functionality or divided into several separate sub components and any one or more middle layers such as a management layer may be provided to communicatively couple to such sub components in order to provide integrated functionality. Any components described herein may also interact with one or more other components not specifically described herein but generally known by those of skill in the art.

In view of the exemplary systems described supra methodologies that may be implemented in accordance with the disclosed subject matter can be appreciated with reference to the flowcharts of the various figures. While for purposes of simplicity of explanation the methodologies are shown and described as a series of blocks it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks may occur in different orders and or concurrently with other blocks from what is depicted and described herein. Where non sequential or branched flow is illustrated via flowchart it can be appreciated that various other branches flow paths and orders of the blocks may be implemented which achieve the same or a similar result. Moreover not all illustrated blocks may be required to implement the methodologies described hereinafter.

While in some embodiments a client side perspective is illustrated it is to be understood for the avoidance of doubt that a corresponding server perspective exists or vice versa. Similarly where a method is practiced a corresponding device can be provided having storage and at least one processor configured to practice that method via one or more components.

While the various embodiments have been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function without deviating therefrom. Still further one or more aspects of the above described embodiments may be implemented in or across a plurality of processing chips or devices and storage may similarly be effected across a plurality of devices. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

