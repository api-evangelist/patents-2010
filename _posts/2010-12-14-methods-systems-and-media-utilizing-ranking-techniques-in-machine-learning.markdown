---

title: Methods, systems and media utilizing ranking techniques in machine learning
abstract: Methods, systems and media are taught utilizing ranking techniques in machine learning to learn a ranking function. Specifically, ranking algorithms are applied to learn a ranking function that advantageously minimizes ranking error as a function of targeted ranking order discrepancies between a predetermined first ranking of a training plurality of data elements and a second ranking of the training plurality of data elements by the ranking function. The ranking algorithms taught may be applied to ranking representations of chemical structures and may be particularly advantageous in the field of drug discovery, e.g., for prioritizing chemical structures for drug screenings.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08862520&OS=08862520&RS=08862520
owner: Massachusetts Institute of Technology
number: 08862520
owner_city: Cambridge
owner_country: US
publication_date: 20101214
---
The present application claims the benefit of provisional patent application entitled Methods Systems and Media Utilizing Ranking Techniques in Machine Learning For Prioritizing Representations of Chemical Structures which was filed on Dec. 14 2009 and assigned Ser. No. 61 286 362. The entire contents of the foregoing provisional patent application are incorporated herein by reference.

This invention was made with government support under Grant No. DMS0732334 awarded by the National Science Foundation. The government has certain rights in this invention.

Ranking problems may arise in a wide variety of information retrieval IR applications such as ranking data elements for example documents websites or the like according to relevance to a query. In exemplary IR applications it may be desirable to utilize ranking algorithms which are adapted for ranking chemical structures or representations of chemical structures. The cost of developing a new drug today is estimated to be over one billion dollars. See Shekhar C. In silico pharmacology Computer aided methods could transform drug development Chemical Biology 2008 15 413 414. A large part of this cost is due to failed molecules i.e. chemical structures that appear to be promising drug candidates during initial stages of screening but after several rounds of expensive pre clinical and clinical testing turn out to be unsuitable for further development. With chemical libraries today containing millions of structures for screening there is an increasing need for computational methods that can help alleviate some of these challenges. See Shekhar C 2008 Jorgensen W. L. The many roles of computation in drug discovery Science 2004 303 1813 1818 and Bajorath J. Chemoinformatics Concepts Methods and Tools for Drug Discovery Humana Press 2004. Particularly there is a need for computational tools that can rank chemical structures e.g. according to their chances of clinical success.

Notably ranking problems are mathematically distinct from the classical learning problems of classification and regression and require distinct analysis and distinct algorithms. See e.g. Cortes C. Mohri M. AUC optimization vs. error rate minimization Advances in Neural Information Processing Systems 16 2004.

Advantageous methods systems and media are taught herein utilizing ranking techniques in machine learning. The ranking techniques disclosed herein may be applied to and or tailored for a wide variety of IR applications. For example the ranking techniques may be adapted for ranking data elements in a chemical structure domain a database domain an Internet domain an Intranet domain or other information domain.

The methods for learning a ranking function may generally comprise i determining for example with a computing process on a computing device ranking error as a function of ranking order discrepancies between a predetermined first ranking of a plurality of data elements for example a plurality of documents or a plurality of representations of chemical structures and a second ranking of the plurality of data elements determined by the ranking function and ii solving e.g. with the computing process on the computing device the ranking error function for the ranking function whereby the ranking error is minimized with respect to the second ranking of the plurality of data elements.

Methods are also disclosed herein for ranking a plurality of data elements using a learned ranking function. Methods for ranking a plurality of data elements typically comprise i providing a ranking function which minimizes ranking error as a function of ranking order discrepancies between a predetermined first ranking of a training plurality of data elements and a second ranking of the training plurality of the data elements determined by the ranking function ii applying the ranking function to rank a test plurality of data elements for example in the same domain as the training plurality of data elements and iii identifying from the ranking of the test plurality of data elements a data element having a characteristic consistent with the training plurality of data elements.

System implementations and non transitory storage medium embodiments for the forgoing methods for learning a ranking function and methods for ranking are also disclosed herein. System implementation generally comprises a computing device programmed to carry out a computing process including the steps of the forgoing methods. Similarly non transitory storage medium embodiments typically involve a non transitory storage medium storing computer executable instructions for carrying out the steps of the foregoing methods.

Methods for ranking a plurality of data elements are also disclosed herein generally comprising i receiving a query characterizing a ranking problem for a set of data elements ii processing the query to learn a ranking function iii applying the ranking function to rank a test plurality of the data elements and iv returning a result to the query based on the ranking of the test plurality of data elements Learning the ranking function may generally include i determining e.g. with a computing process on a computing device ranking error as a function of ranking order discrepancies between a predetermined first ranking of a training plurality of the data elements and a second ranking of the training plurality of the data elements determined by the ranking function and ii solving e.g. with the computing process on the computing device the ranking error function for the ranking function whereby the ranking error is minimized with respect to the second ranking of the training plurality of data elements.

System implementations for the previous methods are also disclosed generally including input means for inputting the query a processor for processing the query by executing a computing process storage means storing computer executable instructions for the computing process and output means for returning the result to the query.

Methods for ranking a plurality of data elements are also disclosed generally comprising i providing a known ranking for a plurality of data elements in a training set ii deriving a ranking function that minimizes ranking error for the ranking function with respect to the known ranking of the plurality of data elements in the training set and iii ranking a plurality of data elements in a test set using the derived ranking function.

Additional features functions and benefits of the disclosed methods systems and media will be apparent from the description which follows particularly when read in conjunction with the appended figures.

Methods systems and media are taught herein utilizing ranking techniques in machine learning to facilitate optimize prioritization of data elements. In some exemplary embodiments data elements may for example be in or from a chemical structure domain such as data representations of chemical structures. Thus exemplary methods systems and media are taught herein for applying ranking techniques in machine learning to the task of ranking representations of chemical structures. The exemplary ranking algorithms taught herein may be particularly advantageous in the field of drug discovery e.g. for prioritizing chemical structures for drug screenings. The exemplary ranking algorithms taught herein are not limited to chemical structure applications but may also be applied to any number of IR applications that include data different from data representative of chemical structures. Indeed in some exemplary embodiments data elements may for example may be documents text files mark up language files and other types of data.

The exemplary methods systems and media taught herein may advantageously utilize ranking algorithms which contrasted with conventional SVM and SVR algorithms minimize ranking loss rather than classification regression loss. The ranking algorithms taught herein may be derived e.g. from either bipartite or real value labeled sets of training data and may be used e.g. in both virtual screening and QSAR ranking applications. The bipartite and real value labeled sets of training data may advantageously represent a predetermined ranking for a plurality of representations of chemical structures. Thus the ranking algorithms may advantageously determine ranking functions such that targeted ranking discrepancies are minimized relative to the predetermined ranking. The effectiveness of exemplary ranking algorithms taught herein was evaluated for both bipartite and real value labeled sets of training data e.g. relative to conventional classification based approaches SVM in virtual screening and conventional regression based approaches SVR in QSAR ranking.

In exemplary embodiments the ranking algorithms taught herein may account for preferences e.g. pair wise preferences e.g. more active than less active than relationships preferences characterized by bipartite labels e.g. active inactive or preferences characterized by real valued labels representing numerical activity levels . The preferences may advantageously represent objective or subjective criteria as between data elements. In exemplary embodiments preferences may be used to supplement bipartite or real value labeled sets of training data. Thus for example in the chemical structure domain preferences may be used to distinguish e.g. on the basis of cost availability potential side effects etc. between two compounds having similar rankings e.g. wherein the difference in activity level is below a certain threshold . Alternatively preferences e.g. pair wise preferences may be used to indicate a predetermined ranking for a plurality data elements. For example preferences may be used to indicate a predetermined ranking of representations of chemical structure with respect to activity level. Advantageously ranking loss may be approximated even where only relative preferences between instances e.g. relative activity levels of chemical structures are known. In general preferences present a strong tool for optimizing fine tuning and or tailoring ranking loss for a particular set of circumstances. Thus in exemplary embodiments ranking loss may account for and weight multiple preferences based on a number of difference criteria.

Real value labeled ranking algorithms utilized by the exemplary methods systems and non transitory media taught herein may prove particularly advantageous. Specifically in exemplary embodiments the real valued ranking algorithms taught herein weight incorrectly raked pairs of data elements by the disparity in relevance between the data elements in each pair. Thus for example in the chemical structure domain the ranking algorithms may be designed to focus the most attention on correctly ranking instance pairs that exhibit the greatest disparity in activity levels since errors in ranking chemical structures with similar activity levels are often less crucial than errors in ranking chemical structures with a greater differences in activity levels . The effectiveness of various exemplary real value labeled ranking algorithms taught herein was evaluated relative to conventional algorithms for various data sets.

In exemplary embodiments ranking algorithms may minimize average pair wise loss. For example an error function may be selected to advantageously normalize aggregate pair wise loss e.g. aggregate relevancy weighted pair wise loss by the number of pairs. In other exemplary embodiments ranking algorithms may minimize a maximum pair wise loss e.g. a maximum relevancy weighted pair wise loss. For example an error function may be selected to advantageously represent the maximum ranking margin across all pairs. The effectiveness of both exemplary ranking algorithms minimizing average pair wise loss and exemplary ranking algorithms minimizing maximum pair wise loss was evaluated relative to conventional algorithms for various data sets.

In practice ranking accuracy at a top portion of a ranked list may be more important than accuracy at the bottom of the list. Thus the ranking algorithms and methods systems and non transitory media taught herein may incorporate constraints that encourage accuracy in a top portion of the learned ranking for example in a top x percentage such as top 50 top 25 top 10 top 5 or the like of the learned ranking or top n number of results such as top 100 top 50 top 10 or the like in the learned ranking. In exemplary embodiments an error function may be selected to advantageously account for the fraction of positives ranked below the highest ranking negative. Such an error function may be minimized so as to maximize the number of positives that appear before the first negative in the ranked list. In other exemplary embodiments ranking algorithms may incorporate constraints that give greater weight to ranking data elements with higher relevancy. For example each pair wise loss for a given data element or aggregate pair wise loss for a given data element may be normalized relative to a characterization of relevancy for the data element such as a real value label for the data element or the inverse of a preferred rank position of the data element. The effectiveness of various exemplary ranking algorithms taught herein which encourage accuracy at the top was evaluated relative to conventional algorithms for various data sets.

In ranking representations of chemical structures it may also be desirable to obtain as many different lead structures at a top of the ranking as possible. Thus the ranking algorithms taught herein may incorporate diversity constraints e.g. by including a term in the error function that encourages diversity among the chemical structures in a top portion of the learned ranking. Thus in exemplary embodiments ranking algorithms may optimize a suitable trade off between ranking accuracy e.g. high activity chemical structures at the top of the list and diversity e.g. diverse chemical structures at the top of the list . Different diversity criteria may be used depending on the particular chemical structure collection and specific requirements of the prioritization task at hand.

In exemplary embodiments the ranking algorithms may be kernel based ranking algorithms. Experimental results indicate that depending on the kernel selection such kernel based ranking algorithms outperform both conventional SVR and SVM algorithms. Furthermore the kernel based ranking algorithms taught herein may be solved efficiently using gradient based optimization methods. In particular in exemplary embodiments the kernel based ranking algorithms taught herein involve solving a quadratic program QP resulting from the Lagrangian dual of the actual optimization problem. Standard implementations of SVM type algorithms resulting in similar QPs generally use a standard QP solver which takes O n time to solve a QP in n variables. The optimization problems taught herein however may involve mvariables where m is in some embodiments the number of training chemical structures and in some embodiments the number of training documents or other data. The resulting O m computation time is prohibitive for large data sets. Thus in exemplary embodiments a gradient projection algorithm may be used to solve the optimization problems presented taking only O m time to converge to an accurate solution a significant improvement over a standard QP solver.

Referring now to a block flow diagram is presented utilizing machine learning to apply the ranking algorithms taught herein. Specifically the block flow diagram which in system implementations may be a computer implemented computing process executed by one or more computational devices includes steps for learning a ranking function for ranking data elements. In some embodiments the data elements are representations of chemical structures. In some embodiments the data elements are documents. Thus the block flow diagram generally includes a step of deriving selecting a ranking error function for a ranking algorithm. A ranking error is determined as a function of ranking order discrepancies between a predetermined first ranking for a training set of data elements and a second ranking of the training plurality of data elements determined by the ranking function. The error function may further be tailored to meet specific needs of an application at hand. Thus for example in the chemical structure domain the error function may be designed e.g. to emphasize ranking accuracy at the top of the ranked list and or to encourage diversity.

Once an appropriate ranking error function is determined machine learning may be utilized in step to derive the ranking function so as to minimize the ranking error. In exemplary embodiments the ranking function is learned from a reproducing kernel Hilbert space RKHS . The kernel may advantageously be selected to best suit the data type being investigated e.g. a Tanimoto kernel for binary fingerprint vectors in virtual screening and a RBF kernel for descriptor vectors in QSAR ranking . In the chemical structure domain the ranking function may alternatively be derived using chemical similarity functions designed specifically to measure similarities between chemical structures.

Often a discrete nature of the ranking error function prevents direct minimization thereof. depicts an exemplary block flow diagram for deriving a ranking function in such instances as taught herein. In step a regularized version of a convex upper bound of the error function is derived. In step a ranking function is derived by solving the optimization problem presented by the regularized version of the convex upper bound of the error function e.g. to minimizing the regularized upper bound of the error function. For example if the hinge ranking loss is selected as the convex upper bound the resulting optimization problem is a convex quadratic program QP which can be solved efficiently.

Referring now to an exemplary block flow diagram is presented for deriving and applying a ranking function as taught herein. In step a known ranking for a training plurality of data elements e.g. representations of chemical structures is provided. In step a ranking function is derived that minimizes ranking error for the ranking function with respect to the known ranking of the training plurality of data elements. Finally in step a test plurality of data elements are ranked using the derived ranking function.

Referring now to an exemplary block flow diagram is presented for processing a query related to a ranking problem as taught herein. In step a query is received characterizing a ranking problem for data. In the chemical structure domain the query may for example designate a database of representations of chemical structures a training plurality of representations of chemical structures having a predetermined known ranking and ranking criteria e.g. regarding focus on diversity accuracy at the top of the ranking etc. . In step the query is processed to learn a ranking function. Exemplary steps for learning a ranking function are described herein e.g. with respect to and step of . In step the learned ranking function is applied to rank a test plurality of data elements. In some embodiments the test plurality of data elements are representations of chemical structures. In some embodiments the test plurality of data elements are documents. Finally in step a result to the query is returned based on the ranking of the test plurality of data elements.

The rankings algorithms taught herein may likewise be included in system implementations e.g. involving a computer or distributed computer architecture such as a computer network or a multiple core processor. Systems may generally be utilized to input constraints process data and output results. System implementations are discussed in greater detail later herein.

The following sections describe in greater detail exemplary applications of the ranking techniques presented herein. A bipartite ranking setting is discussed first followed by a real valued label ranking setting. For both settings exemplary ranking algorithms are presented and evaluated with respect to past methodologies such as SVM and SVR. It is noted that the specific ranking error terms optimized and methods algorithms used for optimization are exemplary embodiments and are not limiting of the scope of the methods systems and media taught herein.

Bipartite ranking problems have received significant attention over past few years. In the bipartite setting data elements are assigned to one of two categories classes e.g. positive or negative active or inactive etc. Thus training data including examples of data elements labeled in a bipartite manner e.g. as positive or negative may be used to derive a ranking function e.g. such that positive data elements are ranked higher than negative ones.

An exemplary bipartite ranking problem can be described as follows. The learner is given a training sample S S S including a sequence of positive examples S x . . . x and a sequence of negative examples the S x . . . x xand xbeing instances in some instance space X and the goal is to learn a real valued ranking function X that ranks accurately future instances in X in other words that assigns higher scores to positive instances than to negative ones. The ranking quality of in this setting is often measured in terms of the bipartite ranking error. Equation 1 presents one embodiment of a bipartite ranking error function 

where Iis 1 if is true and 0 otherwise this is simply the expected fraction of data element pairs incorrectly ranked by e.g. where a negative data element is ranked higher than a positive data element by . Note that the

A number of learning algorithms have been developed for minimizing bipartite ranking error on the training sample. In exemplary embodiments Bipartite ranking error may be determined as one minus the AUC. The AUC is often used to measure the ranking quality in the binary bipartite settings. Thus ranking algorithms such as those taught herein may be viewed conceptually as inter alia maximizing an approximation of the training AUC.

An exemplary ranking algorithm for a bipartite setting is presented below. The algorithm advantageously learns a ranking function from a reproducing kernel Hilbert space RKHS much as SVMs and SVR do in the case of classification and regression. The discrete nature of the bipartite ranking error function presented in Equation 1 cannot be minimized by an algorithm directly. Rather a bipartite kernel based ranking algorithm may minimize instead a regularized version of the convex depicted in .

This is similar to the use of the hinge loss as a convex upper bound on the zero one classification loss in SVMs and is graphically depicted in .

In exemplary embodiments instances in X are described by d dimensional vectors such as chemical descriptor vectors as is the case for virtual screening in the chemical structure domain . Thus X for some appropriate d. For the bipartite example presented above given a training sample S S S X X the linear kernel based ranking algorithm learns a linear ranking function X given by x w x wherein the weight vector w is selected as follows 

More generally if is an RKHS of real valued functions on X the kernel based ranking algorithm learns a ranking function as follows 

where denotes the RKHS norm of in . In practice the above optimization problem may be solved by reduction to a convex quadratic program QP much as is done in the case of SVMs for classification. In particular if K X X is the kernel function associated with then the above optimization problem reduces to the following QP over mn variables 1 i m 1 j n 

Thus given a training sample S S S X Xand a kernel function K corresponding to an RKHS the bipartite kernel based ranking algorithm learns a ranking function X in by solving the QP in Equation 5 and then constructing as in Equation 6.

In practice ranking accuracy at the top of a ranked list may often be more important than accuracy at the bottom of the list. Indeed in virtual screening e.g. where the goal may be to identify active chemical structures in a large chemical library containing mostly inactive chemical structures it is especially important that active chemical structures are returned at the top of the ranking. Taught herein is an exemplary ranking algorithm that focuses on ranking accuracy at the top in the context of bipartite ranking. Note that a similar extension is possible for ranking with real valued labels.

As above consider the bipartite ranking setting in which the input consists of a training sample S S S including a sequence of positive examples S x . . . x and a sequence of negative examples S x . . . x wherein xand xare instances in some instance space X and wherein the goal is to learn a real valued ranking function X that ranks accurately future instances in X. For the situation where correct ranking is particularly important at the top of the list the ranking quality of can be measured as follows 

where Iis 1 if is true and 0 otherwise. Equation 1a advantageously accounts for the fraction of positives ranked below the highest ranking negative in expectation assuming ties are broken uniformly at random . Therefore minimizing such corresponds to maximizing the number of positives that appear before the first negative in the ranked list. Similar to Equation 1 Equation 1a may be minimized using an appropriately regularized version of the following convex upper bound 

Where is an RKHS of real valued functions on X an algorithm may be designed to minimize a regularized version of the above quantity over as follows 

wherein denotes the RKHS norm of in and wherein C 0 is an appropriate regularization parameter. As in the previous example the above optimization problem may be solved by considering the dual of an equivalent optimization problem. In particular if K X X is the kernel function associated with the above optimization problem may be rewritten with the help of slack variables and taking the Lagrangian dual as the following problem over mn variables 1 i m 1 j n 

In contrast with the previously presented bipartite kernel based ranking algorithm the above dual is not a quadratic program QP due to the form of the constraints. A gradient projection method may still be used solve the above dual in this case the projection step is more complicated but can be performed using an lprojection. With this projection the algorithm converges to an accurate solution in O m n mn log mn time. Given the solution to the above optimization problem the solution to Equation. 3a is given by 

Thus given a training sample S S S X Xand a kernel function K corresponding to an RKHS the above modified bipartite kernel based ranking algorithm learns a ranking function X in by solving the optimization problem in Equation 4a and then constructing as in Equation 5a.

In many cases a training set of data elements may be provided where the data elements are known or expected to have a real valued labels pertinent to relevance. For example representation of chemical structures may be provided where all of the chemical structures are known or expected to have varying degrees of a desired characteristic structure and or property with respect to a particular target. In such cases it is of interest to establish a fine grained ranking among data elements in order to identify the most promising candidates. Thus in exemplary embodiments a training set of representation of chemical structures may be provided where each chemical structure is associated e.g. with an activity level such as an experimentally determined level of biological activity. The goal in such circumstances is to derive a ranking function whereby those chemical structures with higher degrees of a desirable characteristic structure and or property are ranked higher.

Contrasted with binary ranking methods where data elements are associated with one of only two states e.g. active or inactive for chemical structures real value based ranking associates data elements with real valued labels ranking with real valued labels has been studied by Agarwal S. Niyogi P. Generalization bounds for ranking algorithms via algorithmic stability Journal of Machine Learning Research 2009 10 441 474 . Real value based ranking can generally be described as follows A labeled training sample S x y . . . x y is provided wherein xis an instance in some instance space X and the yis a real valued labels denoting relevance of a corresponding x. The label training Sample may be advantageously analyzed to determine a ranking function X that ranks accurately future instances in X by relevance e.g. ranks instances with higher relevance values higher. The ranking quality of in this setting can be measured in terms of the following relevance weighted ranking error 

where P i j y y denotes a pair of instances in S. The error contribution as between each pair of instances may be weighted by the difference in relevance between the instances i.e. y y . Thus incorrectly ranked pairs of instances with a large differences in relevance values e.g. pairs of chemical structures with large differences in activities result in a greater error contribution than incorrectly ranked pairs of instances with smaller differences in relevance values e.g. pairs of chemical structures with similar activities .

An exemplary kernel based ranking algorithm for minimizing the relevance weighted ranking error of Equation 7 is taught herein. As in the bipartite case the ranking error in Equation 7 cannot be minimized directly. Thus the kernel based ranking algorithm minimizes a regularized version of the following convex upper bound on the ranking error 

Given a training sample S X and an RKHS of real valued functions on X the kernel based ranking algorithm taught herein advantageously selects a ranking function as follows 

It can be shown that if K X X is the kernel function associated with then the above optimization problem reduces to the following convex QP in P variables i j P 

Thus given a training sample S X and a kernel function K corresponding to an RKHS the kernel based ranking algorithm for the real valued labels setting learns a ranking function X in A by solving the QP in Equation 10 and then constructing as in Equation 11.

In virtual screening experiments conducted the data sets included five sets of representations of chemical structures that each target a different protein and a background set of chemical structures assumed to be inactive. The five active sets contained representations of fifty chemical structures each in the following classes reversible inhibitors of cyclin dependent kinase 2 CDK2 cyclooxygenase 2 COX2 factor Xa FXa phosphodiesterase 5 PDE5 and reversible antagonists of the adrenoceptor AR . The inactive set contained representations of 1 892 chemical structures drawn from the National Cancer Institute NCI diversity set. Thus for each of the five targets a total of fifty active chemical structures were represented and 2092 inactives including the 1 892 background chemical structures and the 200 chemical structures belonging to the other four active sets were represented. Additional details on the data sets may be found in Jorissen R. N. Gilson M. K. Virtual screening of molecular databases using a support vector machine Journal of Chemical Information and Modeling 2005 45 549 561.

Given the prevalence of binary molecular fingerprints as chemical descriptors in virtual screening see e.g. Wassermann A. M. Geppert H. Bajorath J. Searching for target selective chemical structures using different combinations of multi class support vector machine ranking methods kernel functions and fingerprint descriptors Journal of Chemical Information and Modeling 2009 49 582 592 Wilton D. Willett P. Comparison of ranking methods for virtual screening in lead discovery programs Journal of Chemical Information and Computer Sciences 2003 43 469 474 and Geppert H. Humrich J. Stumpfe D. Gumlaut over artner T. Bajorath J. Ligand prediction from protein sequence and small molecule information using support vector machines and fingerprint descriptors Journal of Chemical Information and Modeling 2009 49 767 779 each chemical structure in the above data sets was represented using Molprint2D fingerprints see e.g. Bender A. Mussa H. Y Glen R. C. Reiling S. Molecular similarity searching using atom environments information based feature selection and a naive Bayesian classifier Journal of Chemical Information and Computer Sciences 2004 44 170 178 which can be computed using publicly available software e.g. MOLPRINT 2D http www.molprint.com and have been shown recently to give superior performance compared to other types of fingerprints in SVM based ranking applications. A Molprint2D fingerprint associated with a chemical structure includes of a set of strings describing the atom environments present in the chemical structure. These strings were converted to bit vectors by enumerating all the atom environment strings present in the data sets and assigning a unique fingerprint position to each such string. For each chemical structure the bit corresponding to a given string was set to 1 if the associated atom environment was present in the chemical structure and 0 otherwise. For the experiments conducted the result was a fingerprint representation with a total of 17 221 bit positions.

Three different ways were considered to split representations of the active chemical structures into training and test sets. In particular representations of the fifty active chemical structures for each target were listed in a manner such that chemical structures with similar chemistries were grouped together. The chemical structures were then split in two ways. In the first split representations of the top twenty five chemical structures in each list were separated from the bottom twenty five with one half going to the training set and the other half going to the test set in this case representations of the active chemical structures in the training and test sets were mostly quite different. In the second split representations of the odd numbered chemical structures in each list were separated from representations of the even numbered chemical structures again with one half going to the training set and the other half going to the test set in this case the active chemical structures associated with the training and test sets were highly similar. In each case the representations of background chemical structures were partitioned in a fixed manner odd numbered entries in a fixed ordering were separated from even numbered entries with representations of half the chemical structures going to the training set and representations of half going to the test set. The above two splits are both extremes representing the worst case and best case possibilities respectively. In practice the training set is likely to be more representative of the test set than in the first worst case split above and less representative than in the second best case split. To simulate this a third split was considered in which the active and background sets were each partitioned randomly with one half going to the training set and the other half going to the test set.

In addition to evaluating the impact of the training set size experiments in which 20 40 60 80 and 100 of the training chemical structures were used. This process was repeated with ten random partitions of the representations of chemical structures into training and test sets.

As discussed above the performance of the exemplary bipartite kernel based ranking algorithm was compared with that of a conventional SVM based ranking method on the above data sets. Thus the following performance measures were considered 

1. Bipartite ranking error as approximately optimized by the bipartite kernel based ranking algorithm. Specifically given a ranking function X and a test sample T T T including m positive instances T x . . . x Xand n negative instances T x . . . x Xthe bipartite ranking error of with respect to T measures the fraction of positive negative pairs in T mis ranked by and is given by 

2. Area under the ROC curve AUC simply one minus the bipartite ranking error this measure was included since it has the intuitive interpretation of being the fraction of positive negative pairs in T that are ranked correctly by and is widely used as a ranking performance measure in the binary setting for more information about the AUC see Hanley J. A. McNeil B. J. The meaning and use of the area under a receiver operating characteristic ROC curve Radiology 1982 143 29 36 .

3. Average precision the precision at a given position r is widely used in information retrieval to measure the concentration of relevant results in the top r results in a ranked list. Applied to the virtual screening experiments disclosed herein the precision of at position r in T for 1 r m n is defined as the proportion of actives in the top r chemical structures returned by 

where yis the label 1 for active and 1 for inactive of the ith ranking instance returned by . In particular if T xy . . . x y is constructed from T according to

then k to denote the position of xin the ranking returned by and i to denote the index in T of the ith ranking instance returned by . Precision is closely related to the enrichment factor EF used for example by Jorissen et al. 2005 to evaluate rankings in virtual screening. In particular the enrichment factor at a given position r measures the proportion of actives in the top r chemical structures relative to the overall proportion of actives in the complete sample 

Unlike bipartite ranking error and AUC which measure global ranking quality of a ranked list the average precision emphasizes ranking quality at the top of a ranked list. We note that if the ranking function f assigns distinct scores to all the chemical structures in T then the average precision can also be written as 

See also the modified enrichment factor taught by Jorissen et al. 2005 which when evaluated over the complete sample is inversely proportional to the average rank AR of the actives 

4. Number of actives in the top twenty five A simple measure of the quality of a ranking at a cutoff r is the number of actives returned in the top r chemical structures 

The number of actives in the top twenty five chemical structures act T is reported herein. Note that the precision at r is simply 

Together with precision another measure frequently reported when evaluating a ranking at a cutoff r is the recall which is the proportion of all actives in the sample that are returned in the top r chemical structures 

In the present data sets the total number of actives in each test sample is m twenty five. In an ideal ranking in our case all twenty five active chemical structures would be placed above all the inactive chemical structures which would give act T 25.

5. Number of active in the top one hundred the number of actives in the top one hundred chemical structures act f T . Since the total number of actives in each test sample in is m 25 see above act act 25.

As discussed above the performance of an exemplary bipartite kernel based ranking algorithm was compared with that of SVM based ranking on five data sets including actives with respect to CDK2 COX2 FXa PDE5 and AR and a background set of inactives. Each representation of a chemical structure in these data sets was represented using a binary molecular fingerprint vector with 17 221 bit positions thus the instance space in this case was X 0 1for d 17 221.

For the SVM algorithm Joachim s SVMlight software was used SVMlight http svmlight.joachims.org. see also Joachims T. Making large scale SVM learning practical In Advances in kernel Methods Support Vector Learning MIT Press 1999 Chapter 11 pp 169 184 . The regularization parameter C in each training run was selected by 5 fold cross validation from the range 0.1 1 10 100 1000 in each case the value of C that gave the lowest average bipartite ranking error equivalently the highest average AUC across the five folds was used in training. An exemplary bipartite kernel based ranking algorithm was also run through SVMlight using the z p software option see SVMlight http svmlight.joachims.org . The regularization parameter C was selected as above.

As described above three different splits of the data sets into training and test sets were considered. The results on the 1st 2nd splits are shown in Table 1 for the linear kernel and in Table 2 for the Tanimoto kernel. In each case the better performance is shown in boldface. While not much can be said about the superiority of one algorithm over the other from these results one observation is that in the case of kernel based ranking algorithms the use of the Tanimoto kernel almost consistently improves performance over the linear kernel when measured in terms of the bipartite ranking error or AUC. SVM based ranking did not exhibit similar improvement.

Tables 3 and 4 show the results on the Odd Even splits using the linear kernel and the Tanimoto kernel respectively. As taught herein the use of the Tanimoto kernel leads to near consistent improvement in kernel based ranking algorithm performance over the linear kernel in terms of the bipartite ranking error or AUC. A second observation is the drastic improvement in performance on the Odd Even splits Tables 3 4 as compared to the 1st 2nd splits Tables 1 2 regardless of the particular algorithm kernel used. This is consistent with the 1st 2nd splits representing a worst case scenario and the Odd Even splits representing a best case scenario.

As previously discussed the third group of train test splits in which the data sets were randomly partitioned into training and test sets was designed to simulate a situation in which the training set would be more representative of a real world situation as opposed to best and worst case scenarios . Results for the random splits using linear and Tanimoto kernels are shown in Tables 5 and 6 respectively. Each number shown in these tables is the average over ten different random splits. In addition experiments were conducted in which increasing fractions of the training set were used to train the algorithms.

There are several observations made First as in the other two splits above the Tanimoto kernel near consistently showed improved performance compared to the linear kernel in the case of the kernel based ranking algorithm when measured in terms of the bipartite ranking error or AUC. Second the performance on the test set improves with an increase in the training set size this was true for all five data sets and regardless of the algorithm kernel used. Third when the complete training set including representations of twenty five actives and representations of 1046 inactives was used same training set size as in the 1st 2nd and Odd Even splits above the performance in the case of these random splits lies between the best case and worst case performance levels observed with respect to the 1st 2nd and Odd Even splits. Finally for random train test splits using the Tanimoto kernel the ranking performance of the exemplary kernel based ranking algorithm as taught herein in terms of the bipartite ranking error and AUC is in generally superior to conventional SVM based ranking. This is also illustrated in which depicts the performance of each algorithm using the Tanimoto kernel averaged over the five data sets. This figure also shows that when measured in terms of the other performance measures such as average precision or number of actives retrieved in the top portion of the ranking the performance of the two algorithms is similar. Indeed the exemplary kernel based ranking algorithms considered with respect to the virtual screening experiments reported herein optimize approximately the bipartite ranking error or AUC which are global measures of ranking performance whereas the other three measures focus on local ranking accuracy at the top of a ranking.

In QSAR ranking experiments using exemplary algorithms taught herein two QSAR data sets were used which included inhibitors of dihydrofolate reductase DHFR and cyclooxygenase 2 COX2 respectively together with corresponding biological activities represented as pICvalues. The DHFR inhibitor data set contained representations of 361 chemical structures with pICvalues ranging from 3 3 to 9 8. The COX2 inhibitor data set contained representations of 282 chemical structures with pICvalues ranging from 4 0 to 9 0. Each chemical structure in the above data sets was represented using 2.5D chemical descriptors such as disclosed in Sutherland et al. 2004 . The 2.5D chemical descriptors advantageously included 2D descriptors that were calculated simply from the connection graph of a molecule such as X indices counts of rotatable bonds molecular weight and E state indices as well as whole molecule 3D descriptors such as molecular volume and charged partial surface area descriptors . Details regarding the descriptors can be found in aforementioned Sutherland et al. 2004 . The DHFR inhibitor data set contained a total of seventy descriptors the COX2 inhibitor data set contained seventy four descriptors. All descriptors were real valued descriptors scaled between 0 and 1.

Two different types of train test splits were considered for the above data sets. The first split involved for each data set selecting approximately one third of the representations of chemical structures using a maximum dissimilarity algorithm for the test set and using the remaining two thirds of the representations of chemical structures as the training set. Thus this split resulted in a training set of 237 representations of chemical structures and test set of 124 representations of chemical structures for the DHFR inhibitor data set and a training set of 188 representations of chemical structures and test set of ninety four representations of chemical structures for the COX2 inhibitor data set. Again the above split represents a worst case possibility with the test set being maximally diverse and requiring considerable extrapolation from the training set. A random split was also considered in which each data set was partitioned randomly into training and test sets of the same sizes as above. In addition to evaluate the impact of the training set size experiments were conducted in which each of 10 20 30 . . . 100 of the representations of training chemical structures were used. The above experiments were repeated with ten random partitions of the representations of chemical structures into training and test sets.

As discussed above the performance of an exemplary real value kernel based ranking algorithm as taught herein was compared with that of a conventional SVR based ranking method on the above data sets. Thus for each train test split of the QSAR data sets described above the performance of the ranking function learned by each algorithm on the training set was evaluated on the corresponding test set. The following performance measures were considered with respect to the real value ranking problems presented 

1. Ranking error approximately optimized by the exemplary kernel based ranking algorithm as taught herein in the real valued labels setting described above. Specifically given a ranking function X and a test sample T x y . . . xY X the ranking error of with respect to T measures the average relevance weighted ranking loss of on preference pairs in T 

2. Correlation Two performance measures that have frequently been used in evaluating QSAR models are the root mean squared error RMSE and correlation. The RMSE measures the predictive in accuracy of a model the correlation on the other hand can be viewed as a measure of ranking performance. Specifically the Pearson correlation between the vector f x . . . x of predicted activities or in the discussed situation scores assigned by the learned function and the vector y y . . . y of actual activities is given by 

where are the mean and standard deviation of respectively and are similarly the mean and standard deviation of y respectively. This measures the strength of a linear relationship between the two vectors. In particular if the relative differences in the scores activities of chemical structures under the two vectors are roughly proportional to each other resulting in a similar ranking the correlation will be high. Note however that if the rankings are similar but the scores have a non linear relationship then the correlation may not be an accurate measure of ranking performance. The correlation lies between 1 and 1 with 1 representing a perfect positive linear relationship and 1 representing a perfect negative linear relationship.

3. Kendall s rank correlation coefficient a rank correlation coefficient used to measure the agreement between two rankings it effectively measures the fraction of pairs of data elements on which two rankings agree. In the present case Kendall s rank correlation was used to measure the expected agreement between the learned ranking of the representations of chemical structures in T and the true ranking based on their biological activities assuming that ties in the learned ranking are broken uniformly at random 

The Kendall coefficient takes a value between 1 and 1 with 1 representing perfect agreement between the rankings and 1 representing perfect disagreement. For more information see Kendall M. A new measure of rank correlation Biometrika 1938 30 81 89.

4. Spearman s rank correlation coefficient another rank correlation coefficient used to measure the agreement between two rankings it measures the standard Pearson correlation between the vectors of ranks of data elements i.e. their positions in sorted order resulting from two rankings. Spearman s rank correlation coefficient was used to measure the correlation between the learned ranking of the representations of chemical structures in T and the true ranking based on biological activities. If i denotes the rank of xin the ranking returned by such that chemical structures that are assigned the same score by receive the average rank among them and i denotes similarly the rank of xin the ranking based on the actual activities then the Spearman coefficient is given by the Pearson correlation between the vectors and 1 . . . m and 1 . . . m 

where are mean and standard deviation of respectively and are similarly the mean and standard deviation of respectively. The Spearman coefficient also takes a value between 1 and 1 with 1 representing perfect agreement and 1 representing perfect disagreement. For more information see Spearman C. The proof and measurement of association between two things American Journal of Psychology 1904 15 72 101.

5. Normalized discounted cumulative gain NDCG a measure of ranking performance in information retrieval where the relevance of the top few items returned by a ranking is especially important and is used instead of the average precision when there are more than two possible relevance levels. As with average precision NDCG places greater emphasis on ranking accuracy at the top of a ranked list starting from the top it accumulates a gain value for each data element in the list that is based on the relevance of the data element but applies a logarithmic discounting factor that reduces the gain for data elements lower down in the list. For the present case NDCG was used to evaluate the ranked list of chemical structures in T returned by . The gain value of each representation of chemical structure in the list was based on the biological activity of the chemical structure. In particular if i denotes the index of the chemical structure in T that appears in the ith position in the ranking returned by then NDCG is given by

where 1 log i 1 is the discounting factor for the ith ranking instance and Z is a normalization constant chosen so that NDCG is at most 1. Higher values of NDCG correspond to better ranking performance.

As discussed previously the performance of the kernel based ranking algorithm for ranking with real valued labels was compared with that of SVR based ranking on two QSAR data sets containing inhibitors of DHFR and COX2 respectively. For both algorithms experiments were conducted using two types of kernels the simple linear kernel described above and the Gaussian or radial basis function RBF kernel that may be used with real valued descriptor vectors 

For the SVR algorithm Joachim s SVMlight software was used. The regularization parameter C and the sensitivity parameter in each training run were selected by 5 fold cross validation from the ranges 0.1 1 10 100 1000 10000 and 0.01 0.05 0.1 0.5 1 respectively. In addition when using the RBF kernel the parameter was similarly selected from the range

The kernel based ranking algorithm described with respect to real valued rankings was not supported in the SVMlight software and was consequently implemented in C i.e. rather than use a standard QP solver which can be slow even for moderate sized ranking problems. Thus a gradient projection algorithm was implemented to solve the QP involved in training an exemplary real value kernel based ranking algorithm see Equation 10 . Since the constraints on the variables in the QP were simple box constraints the projection step in this case is simple and efficient. The gradient projection algorithm has two additional parameters namely the number of iterations t and the learning rate . The regularization parameter C optimization parameters t and and the kernel parameter when using the RBF kernel were all selected in each training run by 5 fold cross validation as above. The parameters C and were chosen from the same ranges as above the parameters t and were selected from the ranges 100 250 500 750 1000 and 10 10 10 10 10 respectively.

Two different splits of the data sets into training and test sets were considered for the real valued ranking experiments an original split where roughly one third of each data set was chosen to form the test set using a maximum dissimilarity algorithm and a second split in which each data set was randomly partitioned into training and test sets of the same sizes as in the original split. The results on the original split are shown in Table 7 for the linear kernel and in Table 8 for the RBF kernel. The performance of the RanksSVM algorithm on these splits is similar overall. Furthermore both the kernel based ranking algorithm and the conventional SVM algorithm demonstrated improvement in performance when using the RBF kernel as compared to the linear kernel.

Similar to the first split in the bipartite ranking experiments the original splits for the real value ranking experiments represented a worst case scenario i.e. since the test chemical structures were selected to be maximally diverse and therefore were most likely to require considerable extrapolation from the training set. By comparison random splits were designed to simulate a situation in which the training set would be more representative of the test set. The results on these random splits using the linear and RBF kernels are shown in Tables 9 and 10 respectively. Each number shown in these tables is the average over ten different random splits. In each case 237 out of 361 representations of chemical structures in the DHFR data set and 188 of 292 representations of chemical structures in the COX2 data set were randomly selected to form the training set the remaining representations of chemical structures were assigned to the test set same sizes as in the original splits as above . In addition in order to evaluate the impact of the training set size experiments were conducted using increasing fractions of the training set.

The first observation is that as with the original splits above the use of the RBF kernel leads to an overall improvement in performance over the linear kernel. Notably the improvement in overall performance is more pronounces in the in the case of the kernel based ranking algorithm when compared to the conventional SVR algorithm. The exemplary kernel based ranking algorithm as taught herein with the linear kernel shows some unstable behavior where an increase in training set size sometimes leads to deterioration. In contrast the kernel based ranking algorithm with RBF kernel is not only stable but also exhibits better performance.

A second observation is that in most cases an increase in training set size leads to improvement in performance on the test set particularly when measured in terms of the ranking error except in the anomalous linear kernel instances noted above .

A third observation is that when the complete training set 237 representations of chemical structures for DHFR and 188 representations of chemical structures for COX2 is used the performance on the COX2 data set is considerably better than in the original split using any algorithm kernel while for the DHFR data set the performance is roughly the same except in unstable linear kernel case . Thus the ranking for the COX2 data set appears to suffer from the use of maximum dissimilarity algorithms in constructing the test set while the ranking for the DHFR data set does not.

Finally we observe that on these random train test splits when the RBF kernel is used the ranking performance of the kernel based ranking algorithm in terms of the ranking error and to some degree the correlation is in general superior to conventional SVR based ranking. This improvement may be attributed to the fact that the kernel based ranking algorithm optimizes the relevance weighted ranking error which takes into account the actual activity values of the chemical structures.

In view of the forgoing results for both the virtual screening experiments and the QSAR ranking experiments it is noted the use of a kernel function more suited to the chemical structure data type e.g. the Tanimoto kernel for binary fingerprint vectors in virtual screening and the RBF kernel for descriptor vectors in QSAR ranking showed clear performance gains with ranking techniques when compared to conventional SVM and SVR techniques. Furthermore since the kernel function in RKHS can be viewed as a similarity function chemical similarity measures between chemical structures may be applied. See e.g. Willett P. Chemical similarity searching Journal of Chemical Information and Computer Sciences 1998 38 983 996 and Nikolova N. Jaworska J. Approaches to measure chemical similarity a review QSAR Combinatorial Science 2003 22 1006 1026. While not all such chemical similarity measures satisfy the requirements for a kernel function namely the kernel function must be symmetric and positive semi definite in cases where the library of representations of chemical structures to be ranked is known in advance one can construct a chemical similarity graph over the representations of chemical structures in the training set and test library and then use graph based ranking methods that effectively construct a kernel function from such a similarity graph. See e.g. Agarwal S. 2006 . As taught herein using a kernel function corresponds to constructing an implicit representation of each chemical structure in a new often high dimensional space. Thus constructing a chemically inspired kernel function in this manner can be thought of as obtaining an implicit chemical representation of the chemical structures.

The ranking approach as taught herein outperformed classification and regression approaches in terms of the bipartite ranking error or AUC in virtual screening and in terms of the ranking error in QSAR ranking. This can be attributed to the fact that the kernel based ranking algorithms used in the experiments optimized precisely these criteria. The algorithms however may be modified to optimize any desired performance measures such as average precision and number of actives in the top portion of a list in the bipartite setting and the rank correlation coefficients and NDCG in the real valued labels setting.

Empirical studies were also conducted evaluating the performance of a ranking algorithm the Infinite Push algorithm derived from an error function 

Notably the error function for the Infinite Push algorithm is similar and minimized using the same techniques as the error function in equation 1a above. The error function for the Infinite Push algorithm similar to the error function in equation 1a accounts for the fraction of positives ranked below the highest ranked negative. Therefore minimizing the error function corresponds to maximizing the number of positives that appear before the first negative in the ranked list.

In experiments conducted the Infinite Push algorithm was analyzed together with a number of other ranking algorithms including RankSVM see Joachims T. Optimizing search engines using clickthrough data. In Proceedings of the 8th ACM Conference on Knowledge Discovery and Data Mining 2002 and Herbrich R. Graepel T. Obermayer K. Large margin rank boundaries for ordinal regression Advances in Large Margin Classifiers 2000 115 132 SVMMAP see Yue Y. Finley T. Radlinski F. Joachims T. A support vector method for optimizing average precision In Proceedings of the 30th ACM SIGIR Conference on Research and Development in Information Retrieval. 2007 RankBoost see Freund Y. Iyer R. Schapire R. E. Singer Y. An efficient boosting algorithm for combining preferences Journal of Machine Learning Research 4 2003 933 969 and the P Norm Push algorithm see C. Rudin. The P norm push A simple convex ranking algorithm that concentrates at the top of the list. Journal of Machine Learning Research 10 22332271 2009 .

Performance of these algorithms was evaluated for three different data sets the Ionosphere dataset see A. Frank and A. Asuncion. UCI Machine Learning Repository 2010 http archive.ics.uci.edu ml. the Spambase dataset Id. and a cheminformatics data set that has been used to test virtual screening algorithms for drug discovery see R. N. Jorissen and M. K. Gilson. Virtual screening of molecular databases using a support vector machine. Journal of Chemical Information and Modeling 45 549561 2005 .

Note that average precision and DCG also emphasize ranking accuracy at the top. For all four performance measures a larger value corresponds to better ranking performance.

The first data used was the Ionosphere data set containing 351 data elements representing radar signals collected from a phased array of antennas of these 225 are good positive representing signals that react back toward the antennas and indicating structure in the ionosphere and 126 are bad negative representing signals that pass through the ionosphere. Each data element in the data set was described by thirty three features each scaled to lie in 0 1 . To train the algorithms the data set was divided into two thirds for training and one third for testing subject to both having the same proportion of positives this was repeated 10 times. In each run the number of iterations tin the gradient projection algorithms for RankSVM and the Infinite Push was fixed to 1000 the parameters C and 0 were selected from the ranges 0 1 1 10 100 1000 and 10 10 10 10 10 respectively using 5 fold cross validation on the training set in each case the parameters giving the highest average precision across the 5 folds were selected . The parameter C for SVMMAP was selected similarly. The number of iterations tin the P Norm Push was fixed to 100.

For each performance measure the two algorithms giving the best performance in terms of that measure are highlighted in bold typeface. As expected the RankSVM algorithm performs well in terms of the AUC. On this data set the SVMMAP algorithm gives the highest number of positives at the top but the Infinite Push algorithm follows closely behind. In particular the Infinite Push gives more positives at the top than both RankSVM and the P Norm Push for various values of p. ROC curves for the four algorithms on a sample run using the best value of p in terms of number of positives at the top for the P Norm Push are shown in .

The second data set used was the Spambase data set containing 4601 email messages of which 1813 are spam. If spam messages are treated as positives the goal is to learn a ranking that maximizes the number of positives at the top. Each email message is represented as a 57 dimensional feature vector representing various word frequencies and other attributes each feature was scaled to lie in 0 1 . In this case only a small randomly divided fraction 5 of the data set was used for training and the rest for testing. The parameters for the various algorithms were selected same as for the Ionosphere dataset.

As before for each performance measure the two algorithms giving the best performance in terms of that measure are highlighted in bold typeface. Again RankSVM gives the best performance in terms of AUC. In this case however the Infinite Push algorithm gives the highest number of positives at the top it also gives the best performance in terms of the other measures emphasizing accuracy at the top namely the average precision and DCG. ROC curves for the four algorithms on a sample run using the best p for the P Norm Push are shown in .

The third data used in the Infinite Push Algorithm experiments was a cheminformatics data typically used to test virtual screening algorithms in drug discovery. The data set contained five sets of fifty representations of chemical compounds each set targeting a different protein and a background set of 1892 representations of always inactive chemical compounds. Thus for each of the five targets there were fifty representations of active compounds and a total of 2092 representations of inactives including the 1892 representations of background compounds and the 200 representations of compounds belonging to the other four target sets . Each chemical compound in the above data set was represented using a molecular fingerprint representation specifically a 1021 bit vector FP2 fingerprint available with the OpenBabel chemical informatics software package . To train the algorithms for each target the fifty representations of actives and 2092 representations of inactives were randomly divided into a small fraction 10 for training and the rest 90 for testing subject to both having the same proportion of actives and inactives this was repeated ten times. The parameters for the various algorithms were selected as before. In each case given the training set the goal was to rank representations of compounds in the test set such that active compounds would be retrieved at the top of the ranked list.

The results are shown in Table 13 in this case there were ten random trials for each of the five targets therefore each value is first averaged over the ten random trials corresponding to each target and then averaged across the five targets 

As before for each performance measure the two algorithms giving the best performance in terms of that measure are highlighted in bold typeface. In this case the Infinite Push algorithm gives the best performance in terms of all four performance measures. The RankSVM performs well in terms of the AUC SVMMAP performs well in terms of the average precision. ROC curves for the four algorithms on a sample run using the best p for the P Norm Push are shown in .

The above experiments suggest that in the linear case the Infinite Push algorithm is superior in terms of accuracy at the top when compared to RankSVM and the P Norm Push for various values of p and is comparable to SVMMAP which is an adaptation of structural SVMs to optimizing the average precision . One benefit of the Infinite Push algorithm over SVMMAP however is that it can be applied efficiently with nonlinear kernels as well for SVMMAP efficient algorithms are known primarily in the linear case.

Three exemplary real value label ranking algorithms derived according too the ranking techniques presented herein were considered. The ranking algorithms learned a linear ranking function w by solving an optimization problem of the following form 

where L w S denotes a query level loss function incurred by a ranking function fon the training sample S S y . . . y associated with the ith query q d . The function L w S is constructed from relevance weighted pair wise hinge loss lwhich may be viewed as a convex upper bound on the following relevance weighted ranking error 1 

Notably land therefore linclude a relevancy weighting y y such that mis ranking a pair of instances with relevance labels 1 and 5 incurs a larger penalty than mis ranking a pair of instances with relevance labels 1 and 2.

Thus in addition to the relevance weighting in lthe loss functions differs from the earlier SVM ranking algorithms in that the loss may be normalized by query taking into account different numbers of data element pairs for different queries.

Stochastic subgradient methods such as presented in Shalev Shwartz S. Singer Y. Srebro N. Pegasos Primal estimated sub gradient solver for SVM. In Proceedings of the 24th International Conference on Machine Learning. 2007 may be used to directly solve the resulting optimization problem. However to facilitate development of similar algorithms using other loss formulations a dual version is considered herein. Using standard techniques involving the introduction of slack variables the minimization problem corresponding to the above loss may be written as 

Introducing Lagrange multipliers and taking the Lagrangian dual then results in the following convex QP 

A simple stochastic gradient projection method may be used to solve the QP which starts with some initial values for and on each iteration t randomly selects a single query i and updates the corresponding R variables using a gradient projection step for i i 

wherein 0 is a learning rate is the partial gradient of the objective function in the above QP with respect to evaluated at 

Introducing Lagrange multipliers and taking the Lagrangian dual then results in the following convex QP after an appropriate scaling of variables and introduction of an additional variable for each i 

The constraints in the above problem force to lie in the simplex of distributions over R 1 elements for each i. This allows for derivation of an efficient exponentiated gradient EG algorithm which in this case starts with an initial set of distributions . . . and on each iteration t updates the distribution associated with a single randomly chosen query i using an exponentiated gradient step 

wherein 0 is a constant learning rate is the partial derivative of the objective in the above QP with respect to evaluated at and Zchosen to ensure .

The third algorithm considered RankMM 3 was constructed using a hybrid of average and maximum pair wise loss 

This distinguishes ranking errors at the top of the list from ranking errors at the bottom of the list since in practice ranking errors at the top of the list may often be more costly. Thus P j y y

To see why this loss term might penalize ranking errors at the top more heavily than ranking errors at the bottom note that the cost of each mis ranking up of a data element is inversely weighted by the number of data elements preferred to it therefore mis ranking up a lower relevance data element by a few positions is less costly than mis ranking up a higher relevance data element. By minimizing the largest such mis ranking up cost over all data elements the resulting algorithm should therefore discourage mis ranking of higher relevance data elements resulting in good accuracy at the top of the returned ranking.

Introducing Lagrange multipliers and taking the Lagrangian dual then results in the following convex optimization problem after an appropriate scaling of variables 

The constraints in this case can be interpreted as a set of constraints on the l norm of the for each i together with non negativity constraints. Algorithms for calculating the l norm projection are presented in Quattoni A. Carreras X. Collins M. Darrell T. An efficient projection for 11 1 regularization In Proceedings of the 26th International Conference on Machine Learning. 2009 . By obtaining the l norm projection a stochastic gradient projection method similar to above may be applied.

The RankMM 1 RankMM 2 and RankMM 3 algorithms were evaluated for an OHSUMED data set using a benchmark data set for IR ranking algorithms available publicly as part of the LETOR distribution LETOR 3.0 . The data set consisted of 106 medical queries. Each query was associated with a number of documents each of which was judged by human experts as being either definitely relevant to the query label 2 partially relevant label 1 or not relevant label 0 . There were a total of 16 140 such query document pairs with relevance judgments an average of roughly 152 judged documents per query . Each query document pair was represented as a vector of 45 features.

There were five folds provided in the data set each fold consists of a split of the queries into roughly 60 for training 20 for validation and 20 for testing. The algorithms were evaluated on these five folds and their performance compared to several other ranking algorithms regression RankSVM see Joachims T. Optimizing search engines using clickthrough data. In Proceedings of the 8th ACM Conference on Knowledge Discovery and Data Mining 2002 and Herbrich R. Graepel T. Obermayer K. Large margin rank boundaries for ordinal regression Advances in Large Margin Classifiers 2000 115 132 RankBoost see Freund Y. Iyer R. Schapire R. E. Singer Y. An efficient boosting algorithm for combining preferences Journal of Machine Learning Research 4 2003 933 969 ListNet See Cao Z. Qin T. Liu T. Y. Tsai M. F. Li H. Learning to rank From pairwise approach to listwise approach. In Proceedings of the 24th International Conference on Machine Learning 2007 two versions of AdaRank Xu J. Li H. AdaRank A boosting algorithm for information retrieval In Proceedings of the 30th ACM SIGIR Conference on Research and Development in Information Retrieval 2007 and SVMMAP see Yue Y. Finley T. Radlinski F. Joachims T. A support vector method for optimizing average precision In Proceedings of the 30th ACM SIGIR Conference on Research and Development in Information Retrieval. 2007 .

1. NDCG k The NDCG k is simply NDCG truncated to the top k documents returned by ranking function . See Jumlaut over rarvelin K. Kekumlaut over alumlaut over ainen J. Cumulated gain based evaluation of IR techniques. ACM Transactions on Information Systems 20 4 2002 422 446.

2. Prec k Prec k is the proportion of relevant documents in the top k documents returned by the ranking function .

3. Average Precision AP or MAP MAP is the average Prec k over all positions k occupied by relevant documents.

The results are shown in . Of the algorithms shown for comparison regression is a point wise algorithm that predicts labels of individual documents RankSVM and RankBoost are pair wise ranking algorithms and the remainder are list wise ranking algorithms with the last three directly optimizing the MAP or NDCG. Other than RankBoost which uses thresholded features as weak rankers all algorithms learn a linear ranking function. The performance of the algorithms particularly RankMM 1 and RankMM 3 were considerably superior to the standard pair wise and point wise ranking algorithms2 and in many cases is comparable to the performance of the algorithms that directly optimize the MAP or NDCG. The RankMM 2 appears not to have been as suited to IR performance measures RankMM 3 appears to have been particularly suited to MAP. The best overall performance for this data set was obtained using RankMM 1.

It is contemplated that the methods systems and non transitory media presented herein may be carried out e.g. via one or more programmable processing units having associated therewith executable instructions held on one or more non transitory computer readable medium RAM ROM harddrive and or hardware for solving for deriving and or applying ranking functions according to the algorithms taught herein. In exemplary embodiments the hardware firmware and or executable code may be provided e.g. as upgrade module s for use in conjunction with existing infrastructure e.g. existing devices processing units . Hardware may e.g. include components and or logic circuitry for executing the embodiments taught herein as a computing process.

Displays and or other feedback means may also be included to convey detected processed data. Thus in exemplary embodiments ranking results may be displayed e.g. on a monitor. The display and or other feedback means may be stand alone or may be included as one or more components modules of the processing unit s . In exemplary embodiments the display and or other feedback means may be used to facilitate selection of one or more chemical structures or portions of chemical structures for as drug candidates.

The software code or control hardware which may be used to implement some of the present embodiments is not intended to limit the scope of such embodiments. For example certain aspects of the embodiments described herein may be implemented in code using any suitable programming language type such as for example C or C using for example conventional or object oriented programming techniques. Such code is stored or held on any type of suitable non transitory computer readable medium or media such as for example a magnetic or optical storage medium.

As used herein a processor processing unit computer or computer system may be for example a wireless or wireline variety of a microcomputer minicomputer server mainframe laptop personal data assistant PDA wireless e mail device e.g. BlackBerry trade designated devices cellular phone pager processor fax machine scanner or any other programmable device configured to transmit and receive data over a network. Computer systems disclosed herein may include memory for storing certain software applications used in obtaining processing and communicating data. It can be appreciated that such memory may be internal or external to the disclosed embodiments. The memory may also include non transitory storage medium for storing software including a hard disk an optical disk floppy disk ROM read only memory RAM random access memory PROM programmable ROM EEPROM electrically erasable PROM etc.

Referring now to an exemplary computing environment suitable for practicing exemplary embodiments is depicted. The environment may include a computing device which includes one or more non transitory media for storing one or more computer executable instructions or code for implementing exemplary embodiments. For example memory included in the computing device may store computer executable instructions or software e.g. instructions for implementing and processing an application for solving for deriving and or applying a ranking algorithm for ranking data elements as taught herein. For example execution of application by processor may programmatically i determine a ranking error as a function of ranking order discrepancies between a first predetermined ranking of a plurality of data elements and a second ranking of the plurality of data elements by a ranking function and i solve the ranking error function for the ranking function whereby the ranking error is minimized with respect to the first ranking of the plurality of data elements. In some embodiments execution of application by processor may apply a ranking function minimizing ranking error between a first predetermined ranking of a training plurality of data elements and a second ranking of the training plurality of data elements by the ranking function as taught herein to rank a test set of data elements for example in response to a query.

The computing device also includes processor and one or more processor s for executing software stored in the memory and other programs for controlling system hardware. Processor and processor s each can be a single core processor or multiple core and processor. Virtualization can be employed in computing device so that infrastructure and resources in the computing device can be shared dynamically. Virtualized processors may also be used with application and other software in storage . A virtual machine can be provided to handle a process running on multiple processors so that the process appears to be using only one computing resource rather than multiple. Multiple virtual machines can also be used with one processor. Other computing resources such as field programmable gate arrays FPGA application specific integrated circuit ASIC digital signal processor DSP Graphics Processing Unit GPU and general purpose processor GPP may also be used for executing code and or software. A hardware accelerator such as implemented in an ASIC FPGA or the like can additionally be used to speed up the general processing rate of the computing device .

The memory may comprise a computer system memory or random access memory such as DRAM SRAM EDO RAM etc. The memory may comprise other types of memory as well or combinations thereof. A user may interact with the computing device through a visual display device such as a computer monitor which may display one or more user interfaces . The visual display device may also display other aspects or elements of exemplary embodiments e.g. databases ranking results etc. The computing device may include other I O devices such a keyboard or a multi point touch interface and a pointing device for example a mouse for receiving input from a user. The keyboard and the pointing device may be connected to the visual display device . The computing device may include other suitable conventional I O peripherals. The computing device may further comprise a storage device such as a hard drive CD ROM or other storage medium for storing an operating system and other programs e.g. application characterized by computer executable instructions solving for deriving and or applying a ranking algorithm for ranking data elements as taught herein.

The computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections controller area network CAN or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. Moreover the computing device may be any computer system such as a workstation desktop computer server laptop handheld computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the MacOS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. The operating system may be running in native mode or emulated mode.

In the network environment the servers and may provide the clients and with software components or products under a particular condition such as a license agreement. The software components or products may include one or more components of the application . For example the client may solve for and or derive a ranking function which is subsequently applied over the server for ranking representations of chemical structures.

Although the teachings herein have been described with reference to exemplary embodiments and implementations thereof the disclosed methods systems and media are not limited to such exemplary embodiments implementations. Rather as will be readily apparent to persons skilled in the art from the description taught herein the disclosed methods systems and media are susceptible to modifications alterations and enhancements without departing from the spirit or scope hereof. Accordingly all such modifications alterations and enhancements within the scope hereof are encompassed herein.

