---

title: Reliable data message exchange
abstract: Various embodiments of systems and methods for data message exchange in a client server network are described herein. In various embodiments, a client and a server network may implement a data message protocol for message exchanges. A method of an embodiment ensures message delivery, acknowledge message delivery, message delivery in a specific order, resending of lost data messages, and the like. In various embodiments, such data exchange may optimize data transmission and resource consumption in a client server network. A server can store data messages in a buffer and resend them only when requested by the client, as in the case of lost or out of sequence data message. A client with limited storage space need not concern itself with storing data messages and processing them at a later point in time. Furthermore, a client may optimize data transmission by acknowledging bulk data messages, rather than acknowledging them individually.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08370521&OS=08370521&RS=08370521
owner: SAP AG
number: 08370521
owner_city: Walldorf
owner_country: DE
publication_date: 20100727
---
The field relates generally to communication using reliable data messages and more specifically to a reliable exchange of data messages in a client server network.

With the increasing usage of mobile devices data communication and transmission between a client and server has evolved. As smart phones have increased in popularity due to their capabilities users may wish to use them to the fullest potential. Mobile devices allow the possibility to perform job responsibilities remotely through network communication. This requires a seamless and reliable data connection between two working entities. An average business user for example may wish to update account information or even publish sales data on their Customer Relationship Management CRM system from their mobile device. In order for this to be achieved one could simply install an enterprise application onto their mobile device and connect to their server so that they may perform the task at hand.

Communication and data transmission is done through a client server network model. The overall structure is divided in two working entities. A client may be considered a service requester also referred to as subscriber and a server may be considered a service provider also referred to as publisher . Data messages are constantly being exchanged between the client e.g. a mobile device and the server as information is being received processed and then sent from both ends of the communication channel. Such data messages may require guaranteed delivery or delivery in a specific order. Any number of requirements may be imposed on a client server communication with messages to achieve efficiency accuracy and quality of service.

These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof presented in connection with the following drawings.

In various embodiments a client server network is presented. In various embodiments the client server network may implement a reliable data message exchange protocol for exchanging business data between a client and a server using data messages.

In various embodiments a method is presented. In various embodiments the method may implement a reliable data message exchange protocol for message communication between a client and a server.

Embodiments of techniques for reliable data message exchange are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

In various embodiments a communication using messages may be implemented. Further one or more techniques may be used to ensure message delivery acknowledge message delivery ensure message delivery in a specific order and others. Such techniques may optimize data exchange and resource consumption.

In a client server network a client may be a desktop laptop mobile device mobile telephone and the like. A server may be a device designated to provide services to other devices on the network. Both a client and a server may send and receive messages. In a data communication using messages a publish subscribe model may be implemented where one or more devices subscribe to a publisher. When the publisher publishes messages one or more devices on the network receive such messages. In various embodiments the roles of publisher and subscriber may alternate. For example a server acting as a publisher may publish messages and one or more subscribers e.g. desktops mobile devices acting as subscribers may receive the messages. If a device on the network needs to send data back to the server or to another device on the network that device would act as a publisher while the other devices may act as subscribers. In such a client server network there may be business scenarios in which one or more quality of service measures require messages to be delivered reliably in a specific order or in specific ranges. From the perspective of a mobile device such quality requirements may impose additional difficulties. For example a mobile device has limited battery life thus processing loads may need to be managed to conserve battery life. Also a mobile device may lose network coverage at times. Thus if some messages are lost a mobile device may have a mechanism to notify the sender e.g. server which messages are received and which messages should be resent.

In various embodiments data message exchange may be implemented using web services. In various embodiments reliable messaging may be implemented to allow data messages to be reliably delivered between distributed applications in case of software component system or network failures. To accomplish this the application source sends a data message to the reliable messaging source. The reliable messaging source transmits the message to the reliable messaging destination and then it delivers it to the application destination.

In various embodiments piggybacking may be a technique used to attach an acknowledgement operations or other form of data to another piece of data. In various embodiments piggybacking may be used in message communication to attach an acknowledgement operations or other form of data to a message that may also include data business data or other useful information. Thus administrative type data such as but not limited to control information status information and others may be transmitted in the same messages as regular data. For example if a sender is required to acknowledge receipt of received messages it piggybacks this acknowledgement to a message that is created for the purpose of updating or manipulating business object data rather than sending a message meant for acknowledgement only.

In various embodiments a sliding window may be a technique to limit the maximum number of message that may be in use at any given time. The sliding window size may be defined during registration between a client and a server. For example the sliding window size may specify a maximum number of messages to send out before receiving an acknowledgement for the previously sent out messages. In other embodiments the sliding window size may specify a number of messages to be stored in a buffer.

In various embodiments acknowledgement receipts may be used. Acknowledgement receipts may be represented as values and may be piggybacked to a data message. Acknowledgement receipts may indicate a successfully received data messages a successfully received number of messages an out of sequence message a lost message and others. Thus messages may be delivered in a specific order. For example if an out of sequence message is received it may be ignored and the sender may be notified via an acknowledgement receipt that another message is expected. In various embodiments an acknowledgement receipt may be requested or sent out in the following manner. If for example a client is out of range and has not sent out an acknowledgment receipt to the server the server may send out a request asking the client to send out the current delivery status of the last received messages. This may also be performed by the client in which the client may send out a request asking the server for the status of the messages that were received. In addition to status requests a client may choose to implement a time based e.g. every 30 seconds or message based e.g. every 20 messages event to send out acknowledgment receipts.

In various embodiments in order delivery is a procedure to guarantee each data message is processed in the order that they are sent. A gap in the message traffic may prevent future messages from being delivered. This ensures that missing messages are resent and delivered therefore eliminating out of sequence delivery of data messages.

At process block two counters are initialized. One counter is for incoming data messages and one is for outgoing data messages. After receiving a data message at process block the client compares the message identifier value with respect to the incoming counter at process block . This is so that the client may determine whether to accept reject or ignore the data message. If the incoming counter is greater than the message identifier value at process block then the data message is ignored such as in block . It is presumed that the data message has already been received. Otherwise another comparison may be made at process block .

At process block two counters are initialized. One counter is for incoming data messages and one is for outgoing data messages. At block a plurality of data messages are sent while simultaneously storing a copy of the data messages in a buffer. After receiving a data message at process block the server compares the message identifier value to the incoming counter at block . At block a comparison is made between the incoming counter and that of the message identifier value. A data message is accepted at process block if at process block the incoming counter is equal to the message identifier value. If at process block the incoming counter is not equal to the message identifier value a data message is rejected at process block and another comparison may be made at process block .

In one embodiment data message exchange described above can be further explained. In an enterprise computing system running business software a Customer Relationship Management CRM system may be configured to use such a reliable messaging protocol. The CRM system may maintain sales data in various types of storage and may implement business logic in business objects. The CRM system may run on a server and various client devices such as mobile devices that may communicate with the CRM system on the server using messages.

For example a sales representative is returning home from a business trip. After performing a successful sales transaction the sales representative decides to add customer information along with the products sold and total costs from his mobile phone rather than waiting to get into the office. The sales representative would load his CRM application on his mobile phone and log onto the server. After retrieving a list of accounts he creates a new account for his client. Once the account is created all relative data pertaining to the sales transaction will be entered in the mobile application and sent to the server where it is stored for later use. Thus the business data is transferred from the server to a client using data messages.

In various embodiments a reliable data message exchange such as the reliable data message exchange described herein may have a number of benefits. For example a benefit is the ability to acknowledge data messages in bulk. Data messages are constantly being published by the server. An acknowledgement may be sent out by the client for a specified range of data messages instead on acknowledging individual data messages. This allows the client to optimize data transmissions and reduce communication to the server. By optimizing data transmission the device uses less CPU thus conserving battery life of the mobile device. Also by optimizing data transmission the client also guarantees data message reliability and in sequence data message transfer. Furthermore data messages that need to be resent due to being lost or out of sequence are stored on the server side. The client may have limited storage space and processing power so the lost or out of sequence data messages may not be required to be stored and processed at a later time by the client.

The introduction of the sliding window size for the data transmissions is used so that the server does not overload the client with data messages. For example when the mobile device is not in network range the server will stop transmitting data messages once the sliding window size has been reached. This allows bandwidth optimization by waiting for an acknowledgement by the client before sending more data messages. The sliding window size also eliminates the building up of a queue of data messages for the client to cache and process which also decreases load on the client s hardware e.g. CPU local disk battery etc. . . . .

Some embodiments of the invention may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment of the invention may be implemented using Java C or other object oriented programming language and development tools. Another embodiment of the invention may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather the scope of the invention is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

