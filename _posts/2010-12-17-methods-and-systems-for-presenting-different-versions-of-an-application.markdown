---

title: Methods and systems for presenting different versions of an application
abstract: Methods and systems for presenting different versions of an application are described. In one example, a selection of a version of application code is received. Such a selection may include a simultaneous selection of all versions. Information about the selected version is retrieved. A description of features contained within the selected version is presented and then a version summary for each listed feature is displayed, together with the description of features, to indicate the versions of the application code that contain the respective feature.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08782605&OS=08782605&RS=08782605
owner: Salesforce.com, Inc.
number: 08782605
owner_city: San Francisco
owner_country: US
publication_date: 20101217
---
This application claims the benefit of U.S. Provisional Patent Application 61 349 503 entitled Methods and Systems for Presenting Different Version Prototypes of an Apex Class in a Multi Tenant Environment by Dvinov et al. filed May 28 2010 the entire contents of which are incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

One or more implementations relate generally to the presentation of versions of software code to a user or developer in a database network system computing environment.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also be inventions.

In conventional database systems users access their data resources in one logical database. A user of such a conventional system typically retrieves data from and stores data on the system using the user s own systems. A user system might remotely access one of a plurality of server systems that might in turn access the database system. Data retrieval from the system might include the issuance of a query from the user system to the database system. The database system might process the request for information received in the query and send to the user system information relevant to the request. Additional functions and faster use of databases has led to the development of specialized applications that are applied to the database. Through a well designed application information can be retrieved modified displayed and used more quickly and more easily than by performing manual operations. New functions can be developed using the database that otherwise would not be available.

Code development generally and for such database applications presents many challenges. When there is more than one version of the code there are difficulties not only for developers but also for the users of the code. A typical code viewing tool will allow the developer to view and edit code. In some instances there may be some sort of analysis that will provide some information about the features in the code such as variables operations commands number of lines etc. Such a viewer is helpful but does not readily allow the developer to consider different versions and readily compare them to each other.

As software development kits continue to provide easier and faster development of new applications comparison and analysis tools can be further improved as well.

In an embodiment and by way of example methods and systems are provided for presenting different versions of application code. An embodiment includes a list of features contained within a selected version of application code a description of characteristics of each listed feature and a version summary for each listed feature to indicate the versions of the application code that contain the respective feature.

In one example a selection of a version of application code is received. Such a selection may include a simultaneous selection of all versions. Information about the selected version is retrieved. A description of features contained within the selected version is presented and then a version summary for each listed feature is displayed together with the description of features to indicate the versions of the application code that contain the respective feature.

While one or more implementations and techniques are described with reference to an embodiment in which methods and systems are provided for presenting different versions of application code are implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the one or more implementations and techniques are not limited to multi tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the embodiments claimed.

Any of the above embodiments may be used alone or together with one another in any combination. The one or more implementations encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments do not necessarily address any of these deficiencies. In other words different embodiments may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

Methods and systems are provided for presenting different versions of application code. In the described examples different version prototypes of a class written in an object oriented programming language developed and used in a multi tenant environment are presented. However the presentation system may be applied to other types of code in other applications.

As used herein the term multi tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers. As used herein the term query plan refers to a set of steps used to access information in a database system.

The present description is in the context of Apex Code a strongly typed object oriented programming language that executes on the Force.com platform a platform maintained by Salesforce.com . However the invention is not so limited and may be applied to a variety of other code class and application development environments. Apex is used to add additional functionality to applications to write database triggers and to program controllers in a user interface layer. It has a tight integration with the database and query language good web services support and includes features such as futures and governors for execution in a multi tenant environment. Apex has syntax that that is similar to Java and C . It has the usual array of features such as classes interfaces constants class variables and annotations.

The classes contain fields or attributes and methods each of which has an access level such as global private package etc. The classes contain the source code for a particular object and can be called by other classes.

For context in understanding the examples provided below Apex supports a number of different data types primitive data types such as Integer and Date sObject types that represent persistent objects collections and enumerations and user and system defined Apex classes. The primitive data types include Blob for storing binary data Boolean Date Time and Datetime Decimal for representing arbitrary precession numbers including currency ID a database record identifier type and Integer Long Double and String.

A package in Apex is a bundle of components that make up an application or piece of functionality. Packages are typically created so that their components can be distributed to other companies or individuals. Packages come in two forms unmanaged and managed. Unmanaged packages can be used for a one time distribution like a template. These may be used for sharing application templates or code samples. The installer receives an independent copy of the components. Managed packages hide the source code of many components and provide a way for the package creator to offer upgrades to the package. A package typically consists of a number of different components. For example it may contain user interface components database components such as objects and triggers Apex code page layouts reports and more. All of these components can be bundled together into what is called a package for the purposes of distribution and installation. Packages can be versioned with version numbers to show older and newer versions.

Developers of managed packages may choose to expose the implementations of classes in their package. In effect this exposes the Apex source code of the package that was written. One of the possible uses for exposing the source code is to allow users to create extension packages that is packages that are built on top of the original or base package. An extension package may contain Apex code that calls in to the base package. This allows users to add new functions to existing packages.

The identification panel also provides several additional options for the user. An edit button allows the user to go to a code editing function in this or in another interface. A delete function allows the user to completely delete the selected class. A download button allows a user to download this or any other class. A security button allows a user to change the security privileges or access privileges for the class and a show dependencies button allows the user to view dependencies for the class and see any other related classes. All of these functions from the edit button to the show dependencies button can be provided within the presentation display system or in one or more other utilities.

The identification panel also provides a set of views for the selected class. Each view provides different information about the class. A first view is called class body. This shows the actual source code for the class. The class body provides a viewer for all of the source code of the class. The class body may provide an editing function or as shown in an editing function can be accessed through a separate button. A second view is a class summary which is shown in more detail in . A third view is a versions setting view which may provide a variety of different functions. One function is to allow a developer or an authorized user to choose the version of Salesforce.com API Application Programming Interface that is used by the class. If a class refers to an installed package such as a base package then a developer or user could choose a particular version of that base package to be used by the class.

In the particular example of a simplified code sequence is shown. The source represents an example view of code which is a short global Apex class with a variable a constructor and a few methods. The class also implements an interface named myGlobalInterface This class is presented as being included in a managed package and released as version 1.1. In the identification panel indicates the version of myGlobalClass as being version 1.0. While the version of is version 1.1. Several modifications have been performed to form the new version of the class named myGlobalClass version 1.1. A new variable COUNT was added along with a new method getCount . The method set Str String str is now annotated as deprecated. In the source code the name of the class myGlobalClass is set forth in the first line as well as the interface that it implements which has been named myGlobalInterface . The property of String str is identified as well as the variable static Integer count is identified. In addition to the properties of static integer count and String str in which both are global. The class also has a signature of myGlobalClass String str .

The class also has several methods the String getStr method which in this case has been deprecated by a deprecated line a void incrementCount method an Integer getCount method and a void interfaceMethod . All of these methods and properties are similar to those of other object oriented programming languages and similar functions can be performed. Further information regarding exactly how the class is executed and the functions it performs can be obtained from a study of the force.com platform.

The summary display provides a table which includes information for interfaces properties constructors and methods . For each item the name or signature is provided in a column and the version availability is provided in another column. In the illustrated example three columns are provided which identify the nature of the summarized attribute and then provide in the second and third columns the name and version availability. In some cases an attribute may be in all versions. Additional columns may be added or the name or version availability columns may be removed depending on the particular implementation.

As shown in for the interfaces there is a first interface providing global access having the name myGlobalInterface this interface is available in all of the version. In other words the interface has not been changed in any of the versions. It is shown in to indicate that it is a part of version 1.0. The properties column indicates a global property with the name of string str. This property is also available in all of the versions. Similarly there is a constructor with global access with a signature of myGlobalClass String str also available in all versions. Finally under methods there are three global methods listed String getStr void interfaceMethod and void setStr String str .

Referring to a similar presentation for version 1.1 is shown. Again the pick list shows the version number. In addition the classification for the class is provided as well as the name of the class . In the presentation of the same features are shown to the extent that they are the same as those of version 1.0. As can be seen in version 1.1 the presentation display shows that an additional property had been added with version 1.1 a static integer count. Two additional methods have also been added a static integer getCount and a static void incrementCount. In addition the void setStr method has been deprecated.

The displays of allow the two versions to be analyzed and compared in detail without referring to the source of . The features are easier to identify using the columns. If the developer is already familiar with the properties constructors and methods and how they are used in the particular class then there may be no need to refer to the source at all. On the other hand the source can easily and immediately be viewed by selecting the class body tab. Using the pick list each version can be studied individually or all of the versions can be compared in the class summary as shown in .

Referring to an operational flow diagram is shown illustrating a high level overview of a technique for presenting different versions of application code. Before these operations a user will typically log on to the system provide credentials and identification and select a particular class. The system can then determine whether the class is available and whether the user has access to the class. These operations are not shown. Beginning at the top of after a class has been identified at block a version selection is received by the presentation system. At block information is retrieved about the version that has been selected. At block descriptions are displayed for each of the features in the version. The features might include as shown for example in interfaces properties constructors and methods among others. The description may include names variables and signatures among others. The description may also include a body for the class and version settings. At block a version summary is provided for each listed feature to indicate the versions of the application code that contain that feature. This version summary as presented for example in and can be presented simultaneously with a description of the features.

The above description is presented as first receiving or making a version selection and then retrieving or presenting information about the selected version. Alternatively information about all versions could be retrieved as the first step. The system would then display information about all of the versions. After viewing this presentation then upon receiving a version selection the data could be filtered to display only data relevant to the selected version. The particular ordering of the operations is not essential to the invention and a session can be started or finished in a variety of different ways. The described presentation system may be adapted to suit the needs tastes workflow patterns and preferences of many different users and developers.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system will be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that the one or more implementations might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language embodiments is discussed in commonly owned co pending U.S. Provisional Patent Application 60 828 192 entitled PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS by Craig Weissman filed Oct. 4 2006 which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manages retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server N 1 might be coupled via a direct network link and another application server N might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. patent application Ser. No. 10 817 161 filed Apr. 2 2004 entitled Custom Entities and Fields in a Multi Tenant Database System issued on Aug. 17 2010 as U.S. Pat. No. 7 779 039 and which is hereby incorporated herein by reference teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

While one or more implementations have been described by way of example and in terms of the specific embodiments it is to be understood that one or more implementations are not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

