---

title: Automated contrast verifications
abstract: A developer tool is used to programmatically calculate the contrast between the text and background in a user interface. A luminosity ratio is automatically calculated by the tool by capturing an image of a user interface, archiving user interface elements that do not contain text, performing optical character recognition on the remaining user interface elements to find pixels on the text part of the user interface element and pixels on the background part of the user interface element, and finally calculating the luminosity ratio. Results including errors, warnings and luminosity ratio for one or more hotspots in the image can be returned. Results can be used to identify user interface elements that comply or fail to comply with visibility guidelines for contrast between user interface text and background.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08917275&OS=08917275&RS=08917275
owner: Microsoft Corporation
number: 08917275
owner_city: Redmond
owner_country: US
publication_date: 20100614
---
Even more so than for others people with disabilities can find using a computer to be a challenge. For example vision difficulties and impairments including low vision color blindness and blindness can make reading the screen difficult. Among adult computer users in the United States it is estimated that more than one quarter experience some kind of vision difficulty.

Today there are a number of options for individuals with vision difficulties to modify their computer displays and appearance to make them easier to see or alternatively to receive information through sound or touch. One aspect of making it easier for people with visual and cognitive impairments to use a computer is ensuring that user interfaces adhere to certain standards of text contrast. For example a 5 1 luminosity ratio for text against the background color is generally considered vision friendly.

A user interface can be programmatically analyzed for compliance noncompliance with provided text contrast standards for visibility. To determine if a user interface element complies with text contrast standards areas of text in the user interface can be cropped. Using a tree structure representation of the user interface elements elements that are containers for other user interface elements or elements that do not include text can be eliminated to avoid duplicate processing. The user interface elements that include text can be identified by optical character recognition OCR processing. Images in a color model such as a RGB Red Green Blue color model a YUV color model or the like can be transformed to 8 bit grayscale images from which a grayscale histogram can be created. Hotspot regions in the RGB images and the grayscale images can be marked by identifying peaks of interest in the histogram and calculating locations of the identified peaks using the grayscale value to reverse look up the RGB or YUV components. Luminosity values for each background pixel and text pixel in the hotspot can be calculated. A luminosity ratio for text against the background color can be calculated.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A developer tool can be used to programmatically calculate the contrast between the text and background colors in a user interface. A luminosity ratio is automatically calculated by the tool by capturing an image of a user interface discarding user interface elements that are containers for other elements and or are determined to not include text cropping the background to a one pixel border around the text and performing optical character recognition to find pixels on the text part of the user interface element and pixels on the background part of the user interface element. A luminosity ratio is calculated. Results including errors warnings and luminosity ratio for one or more hotspots in the image can be returned. Results can be used to determine if a particular user interface element meets or fails to meet guidelines for readability can increase or decrease a priority level of a user interface element in a list of user interface elements to receive programmer attention e.g. to be changed before a next release or a next service pack or update and the like. The results can be generated and displayed on a display screen of a software development computer or printed on a printer or otherwise presented as known in the arts.

System may include one or more of a processor such as processor a memory such as memory and an automated contrast verification tool . System may also include an image capturing tool or alternatively the image capturing tool may be integrated within the automated contrast verifier tool not shown . System may also include a user interface model that includes information about user interface elements and or an optical character recognition engine that translates scanned images into machine encoded text. Alternatively the optical character recognition engine may be integrated within the automated contrast verification tool not shown . Other components well known in the arts may also be included but are not here shown. It will be appreciated that one or more modules implementing the automated contrast verification tool and or image capturing tool and or optical character recognition engine can be loaded into memory to cause one or more processors such as processor to perform the actions attributed to the automated contrast verification tool and or image capturing tool and or optical character recognition engine .

In response to initiation of the automated contrast verification tool by for example a user clicking on a run verification button or selecting a contrast verification option on a menu displayed on a computer display device or by any other well known human or machine initiated means an image or screenshot can be taken of a user interface that is identified or focused on. The user interface for which the image or screenshot is to be taken can be identified by various well known ways such as by clicking on the user interface selecting the user interface from a list or by otherwise obtaining focus by selecting or highlighting the image.

If the snapshot taking module is included within the automated contrast verification tool the automated contrast verification tool can receive a focused user interface a user interface that has been selected is highlighted or that has the focus and can capture a screen image. Alternatively as pictured in a selected user interface can be received by the image capturing tool such as image capturing tool .

In response to receiving the selected user interface the image capturing tool can create an image such as a user interface image of the selected user interface . In accordance with some aspects of the subject matter disclosed herein a TIFF screenshot can be captured. Tagged Image File Format abbreviated TIFF is a lossless file format for storing images. The TIFF format is widely supported by image manipulation applications by publishing and page layout applications by scanning faxing word processing optical character recognition OCR applications and other applications. Originally due to limitations of desktop scanners TIFF was a binary image format in which there were only two possible values for each pixel. As scanners became more powerful and as desktop computer disk space became more plentiful TIFF grew to accommodate grayscale images and then color images. Today TIFF is a popular format for high color depth images.

It will be appreciated that other types of image formats including but not limited to JPEG and PNG may be used in addition to or instead of TIFF images. JPEG is an acronym for Joint Photographic Experts Group the group that developed the JPEG standard. PNG is an acronym for Portable Network Graphics and is a format that was created to improve upon GIF Graphics Interchange Format . The image such as user interface image captured by the image capturing tool or automated contrast verification tool can be a TIFF image a PNG image or any image in any suitable format. The user interface image can be received by the automated contrast verification tool . If viewed from a programmatic access API application programming interface such as MSAA Microsoft Active Accessibility UIA UI Automation a Microsoft computer accessibility technology or IAccessible 2 an open standard in the Linux Foundation computer accessibility technology user interface elements can be arranged in a tree structure. The automated contrast verification tool may discard the user interface elements which are containers for other user interface elements to avoid duplicate processing. In addition in accordance with some aspects of the subject matter disclosed herein heuristics can be applied so that only elements that include text as indicated by a programmatic access API specification are processed. This approach can avoid many false positives because the OCR engine only reviews user interface elements that include text. Specifically the heuristics can use the UI Automation ControlType variable that identifies which user interface elements include text or which user interface elements are likely to include text. The ControlType variable may also include information that identifies user interface elements that include text.

The automated contrast verification tool may also or alternatively receive a model of the user interface elements such as user interface model which can include data that describes the user interface elements. The model of the user interface element may include information such as but not limited to a variable that identifies which user interface elements typically include text or which user interface elements are likely to include text. The user interface elements that typically include or may include areas of text can then be passed to an optical character recognition engine for processing. User interface elements that do not have text can be archived in an archive such as archive . For example user interface elements such as the check box combo box header item list item radio button tab item and tree item typically have text and can be passed to the optical character recognition engine . User interface elements such as document edit hyperlink menu item text title bar tooltip are likely to have text and can be passed to the optical character recognition engine . User interface elements including the button calendar data grid data item group header image list menu menu bar pane progress bar scroll bar separator slider spinner split button status bar tab table thumb tool bar tree and window do not typically have text and may be archived in archive . Elements with text can be cropped before being passed to the optical character recognition engine .

In accordance with some aspects of the subject matter described herein archived user interface elements do not appear in the results of the automated contrast verification tool . The cropped user interface element images containing text can be sent to the optical character recognition engine to be further cropped. The optical character recognition engine can be run on each of the cropped user interface element images. In response to detecting text the image can be further cropped to form a tight rectangle around the identified text. In accordance with some aspects of the subject matter described herein the text may be surrounded by a border of pixels forming a perimeter around the text. For example in the one pixel border around the text CLIP is delimited by the space between outer rectangle and inner rectangle . This technique can be applied to fonts including but not limited to Microsoft ClearType . ClearType is a subpixel rendering technology that attempts to improve the appearance of text on certain types of computer display screens by making the text appear smoother less jagged increasing edge contrast and readability of small fonts.

If text is not identified by the optical character recognition engine a check may be performed on the role control type information provided by MSAA UIA. If the user interface element is one in which text is typically encountered an error can be generated. If the role indicates that text is likely see tables above then a warning can be generated.

Each image which may have been further cropped by the optical character recognition engine may undergo a transformation in which each colored pixel e.g. an RGB pixel is represented by 3 values ranging from 0 255 is changed to an 8 bit grayscale pixel 1 value ranging from 0 255 . This conversion may be achieved by a color blending of the RGB components as described in the following computation Grayscale value 0.21260.71520.0722 Alternatively any other formula for converting to a grayscale value can be used.

This conversion returns a value between 0 pure black and 255 pure white comprising the 8 bit grayscale representation of the pixel. For example a pixel at position x y e.g. position 2 7 in in an original RGB image may have an RGB value of 255 136 136 meaning the red component of the color of the pixel has a value of 255 the green component has a value of 136 and the blue component has a value of 136. Converting the RGB value of such a pixel returns a grayscale value of 161 for the pixel at position 2 7 . The original cropped image can be converted to a grayscale image and then to an image where each pixel position is a number representing the grayscale values of the pixel at that location as represented in grayscale image .

The 1 pixel border e.g. border can be used to identify background pixels with which the text pixels can be compared. To identify the background pixels a data set can be created that includes the grayscale values from the one pixel border layer. The pseudo code appearing in is an example of code that can be used to find the background pixels although it will be appreciated by those of skill in the art that other ways of finding the background pixels are possible.

In accordance with aspects of the subject matter disclosed herein one mode can be chosen for solid backgrounds. For simple gradient backgrounds two modes can be chosen and for complex gradient backgrounds three modes can be chosen. For gradient backgrounds that include more than three modes the additional modes may be ignored. It will be appreciated that in accordance with aspects of the subject matter disclosed herein while background colors are assumed to potentially contain gradients of color text is assumed to be non gradient that is text is assumed to be a single solid color. The dataset comprising the grayscale set of pixels from the transformed image can be converted to a histogram to identify the color of the text in the image. In accordance with aspects of the subject matter disclosed herein the histogram created from the dataset may comprise 256 bins ranging from 0 to 255 where 0 is pure black and 255 is pure white. An example of a histogram appears in

The maxima representing the background and corresponding background noise can be removed from the histogram so that the only relevant peaks remaining are indicators of the text. That is the portions of the histogram that pertain to the background e.g. peak can be ignored. Similarly any bins within a threshold value e.g. plus or minus 7 of the maxima can be considered to be noise from the rendering on screen. For example in peak can also ignored. As an alternative example suppose that a text containing user interface element image includes a single background mode of 230 and the threshold value is determined to be 7. Any values in the histogram between 223 230 7 and 237 230 7 can then be ignored. If the background included more than one mode the values in the threshold vicinity of the additional modes can also be ignored. After eliminating the histogram values corresponding to the background values the remaining peaks in the histograms represent the values for the text. In accordance with aspects of the subject matter disclosed herein the three remaining local maxima can be determined.

In two maxima representing text are found peak and peak . Of the determined maxima representing the text the maxima farthest from the value representing the background pixels is chosen for the color of the text peak in . A reverse look up can be performed on the grayscale value chosen for the color of the text to transform the grayscale value back to the RGB values. For example if the reverse look up of the pixel at position 2 7 is performed the grayscale value of 161 can be replaced with the RGB value of 255 136 136 . Suppose for example that the histogram indicates that there is a single grayscale value of 138 for the text and a single grayscale value of 255 for the background pixels. The grayscale image can be examined for an occurrence of a value of 138.

The pixel location at which the value of 138 in the grayscale image is detected can be recorded e.g. x y 3 12 and the corresponding RGB pixel from the original image can be determined by reverse look up. Similarly the pixel location at which the value of 255 in the grayscale image is detected is recorded e.g. x y 1 1 and the corresponding RGB pixel from the original image can be determined by reverse look up e.g. 255 255 255 . The RGB component values are recorded for locations representing text and background values and the recorded values are used to calculate luminosity ratio at this particular location. An image that has a gradient background may include several areas for which the luminosity ratio is calculated. That is a luminosity ratio may be calculated between each of the background pixels chosen and the text pixel chosen. To find these ratios the original RGB values for the 2 pixels of interest are determined. To determine the original values for the first background pixel and the text pixel the linearized R G and B components are found where linearized lin color FS 2.2 FS Full Scale 255 for 8 bit color channels 

The linearized color components are used to calculate the luminosity value for each pixel. Luminosity 0.2126 0.7152 0.0722 The luminosity ration is calculated where L and L are the two luminosity values found for each pixel. Luminosity Ratio is defined as 1 0.05 2 0.05 1

In accordance with some aspects of the subject matter disclosed herein if the ratio is greater than 5 1 then the text and background is deemed to be a passed test case. If there are 3 background pixels with an assumed single text pixel to test 3 luminosity ratios are calculated with one for each text background comparison.

In order to provide context for various aspects of the subject matter disclosed herein and the following discussion are intended to provide a brief general description of a suitable computing environment in which various embodiments may be implemented. While the subject matter disclosed herein is described in the general context of computer executable instructions such as program modules executed by one or more computers or other computing devices those skilled in the art will recognize that portions of the subject matter disclosed herein can also be implemented in combination with other program modules and or a combination of hardware and software. Generally program modules include routines programs objects physical artifacts data structures etc. that perform particular tasks or implement particular data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. The computing environment is only one example of a suitable operating environment and is not intended to limit the scope of use or functionality of the subject matter disclosed herein.

With reference to a computing device for efficient resumption of co routines on a linear stack in the form of a computer is described. Computer may include a processing unit a system memory and a system bus . The processing unit can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit . The system memory may include volatile memory and nonvolatile memory . Nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM or flash memory. Volatile memory may include random access memory RAM which may act as external cache memory. The system bus couples system physical artifacts including the system memory to the processing unit . The system bus can be any of several types including a memory bus memory controller peripheral bus external bus or local bus and may use any variety of available bus architectures.

Computer typically includes a variety of computer readable media such as volatile and nonvolatile media removable and non removable media. Computer storage media may be implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other transitory or non transitory medium which can be used to store the desired information and which can be accessed by computer .

It will be appreciated that describes software that can act as an intermediary between users and computer resources. This software may include an operating system which can be stored on disk storage and which can control and allocate resources of the computer system . Disk storage may be a hard disk drive connected to the system bus through a non removable memory interface such as interface . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It will be appreciated that computers can be implemented with various operating systems or combinations of operating systems.

A user can enter commands or information into the computer through an input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone and the like. These and other input devices connect to the processing unit through the system bus via interface port s . An interface port s may represent a serial port parallel port universal serial bus USB and the like. Output devices s may use the same type of ports as do the input devices. Output adapter is provided to illustrate that there are some output devices like monitors speakers and printers that require particular adapters. Output adapters include but are not limited to video and sound cards that provide a connection between the output device and the system bus . Other devices and or systems or devices such as remote computer s may provide both input and output capabilities.

Computer can operate in a networked environment using logical connections to one or more remote computers such as a remote computer s . The remote computer can be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . Remote computer s can be logically connected via communication connection . Network interface encompasses communication networks such as local area networks LANs and wide area networks WANs but may also include other networks. Communication connection s refers to the hardware software employed to connect the network interface to the bus . Connection may be internal to or external to computer and include internal and external technologies such as modems telephone cable DSL and wireless and ISDN adapters Ethernet cards and so on.

It will be appreciated that the network connections shown are examples only and other means of establishing a communications link between the computers may be used. One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the subject matter disclosed herein may pertain to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. Aspects of the subject matter disclosed herein may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. Aspects of the subject matter disclosed herein may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

A user can create and or edit the source code component according to known software programming techniques and the specific logical and syntactical rules associated with a particular source language via a user interface and a source code editor in the IDE . Thereafter the source code component can be compiled via a source compiler whereby an intermediate language representation of the program may be created such as assembly . The assembly may comprise the intermediate language component and metadata . Application designs may be able to be validated before deployment.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus described herein or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing aspects of the subject matter disclosed herein. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the creation and or implementation of domain specific programming models aspects e.g. through the use of a data processing API or the like may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the subject matter disclosed herein has been described in connection with the figures it is to be understood that modifications may be made to perform the same functions in different ways.

