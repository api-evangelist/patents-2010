---

title: Method and system for abstracting non-functional requirements based deployment of virtual machines
abstract: A system and method for allocating resources in a cloud environment includes providing an abstraction layer between a cloud environment and one or more data centers by generating a virtual hypervisor as an application programming interface. Responsive to a workload request by the one or more data centers, resources are partitioned and virtual machines are instantiated in the one or more data centers using the virtual hypervisor such that non-functional requirements of the workload are addressed at the abstraction level using the virtual hypervisor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08301746&OS=08301746&RS=08301746
owner: International Business Machines Corporation
number: 08301746
owner_city: Armonk
owner_country: US
publication_date: 20100126
---
The present invention relates to computer networks and more particularly to system and methods for resource allocation in cloud environments.

Virtualization has rapidly gained popularity which affects multiple levels of computing stacks. Since virtualization decouples resources from their users it provides greater flexibility in terms of resource allocation but also brings in new challenges for optimal design provisioning and runtime management of systems. Cloud computing is a paradigm of computing that offers virtualized resources as a service over the internet. Cloud Managers are responsible for lifecycle management of virtual resources efficient utilization of physical resources and they expose basic application programming interfaces APIs for operations to users. Software solutions can then be deployed on these virtual resources.

Virtualization which decouples physical resources from their users has emerged as one of the key drivers of data center innovation and optimization. Operating system virtualization was first proposed by IBM in the 1960 s. Recently with increased computing capacity of the low end machines similar capabilities are now available for many platforms. A virtualized server runs a thin software or firmware layer called a hypervisor which presents an abstraction of the underlying hardware to host multiple virtual machines VMs . VMs execute either an unmodified in case of full virtualization or a slightly modified in case of para virtualization version of the operating system. Virtualization increases server utilization and therefore increases data center efficiency by combining several workloads on a single server.

Referring to a hybrid cloud VM deployment scenario is illustratively shown where a customer A data center requests to place three workloads 1 Workload contains a server workload with a critical business application that has to be highly available within a data center and recoverable in another data center in case of a disaster 2 Workload is a Virtual Desktop assigned to a user with lower security restrictions but highly sensitive to latency and 3 Workload is a Virtual Desktop assigned to a user with higher security requirements. Deployment of a virtual machine VM typically involves the following steps indicated in the diagram Step . A Cloud Manager requests a Resource Pool Manager in an appropriate data center for an available hypervisor with enough capacity. Step . Cloud Manager calls the hypervisor using standard APIs like libVirt or VMWare SDK to deploy a VM from a template appliance. Step . The hypervisor creates a VM VM .

Deployment of Workload requires provisioning three Virtual Machines VM is the primary VM is a backup for High Availability VM is a backup in another datacenter data center . Deployment of Workload requires one Virtual Machine VM to be created in a Service Provider SP Data Center data center located physically close to the user customer A for reduced latency. Deployment of Workload requires one Virtual Machine VM to be created in a Customer Data Center for improved security. Based on the type of workload and non functional requirements NFR the calls from the cloud manager could get complex and could be different each time.

A system and method for allocating resources in a cloud environment includes providing an abstraction layer between a cloud environment and one or more data centers by generating virtual hypervisor as an application programming interface. Responsive to a workload request by the one or more data centers resources are partitioned and virtual machines are instantiated in the one or more data centers using the virtual hypervisor such that non functional requirements of the workload are addressed at the abstraction level using the virtual hypervisor.

A system for allocating resources in a cloud environment includes a cloud network managed by a cloud manager and configured to satisfy workload requests from at least one data center the at least one data center including a resource manager configured to manage virtual machines. At least one virtual hypervisor is configured to provide an interface between the cloud manager and the at least one data center. The at least one virtual hypervisor is configured to address non functional requirements of the workload at an abstraction level to reduce complexity of interactions between the cloud manager and the at least one data center.

These and other features and advantages will become apparent from the following detailed description of illustrative embodiments thereof which is to be read in connection with the accompanying drawings.

In accordance with the present principles a Virtual Hypervisor abstraction is provided which permits customers to have improved control over resource allocation decisions regarding their virtual machines while a cloud manager maintains its role as the ultimate physical resource manager. In addition methods are provided for resource allocation illustrating how the Virtual Hypervisor abstraction can be efficiently realized by a global cloud manager. The present concepts can be used to achieve fairer resource sharing and isolation across different Virtual Hypervisors.

In accordance with particularly useful embodiments the cloud model is enhanced to provide better control over the resource allocation decisions regarding virtual machines VMs . A partition of the management of the cloud physical infrastructure is maintained from the management of the solutions hosted on the cloud. With this partitioning in accordance with customers resource pool managers can concentrate on optimizing their environments and cloud management can focus on making the most efficient use of the physical resources and making sure that Service Level Agreements SLAs with its customers are fulfilled.

To achieve this separation a Virtual Hypervisor VH is introduced and provides an abstraction permitting a solution to decide how the underlying resources should be shared and how the resource contention should be resolved. The cloud manager can map virtual machines to physical servers in the most optimal fashion from its point of view as long as it meets the constraints defined by the Virtual Hypervisor.

The cloud manager requests virtual hypervisors from the cloud instead of from specific VMs. It then uses these virtual hypervisors just as it would use actual hypervisors on the physical hosts interfacing with them using an application programming interface API similar to that used with actual physical servers and a virtualization or resource pool manager. These virtual hypervisors are not real entities. They are simply abstract groupings of resources which are managed by the cloud with respect to a single service level agreement customer request or other event between the cloud cloud manager and data centers. The actual mapping of the virtual hypervisor onto physical servers is the responsibility of the cloud manager and the deployment and management of VMs on top of the virtual hypervisors is handled in a virtualized infrastructure of the data centers e.g. by hypervisers associated with physical servers.

In a virtual desktop a solution manager of e.g. a customer first requests some number of virtual hypervisors providing specific requirements such as geography where they should execute or network distance from a given location which affects the remote desktop experience capacity that should be available as well as other parameters such as network bandwidth between VMs created within this virtual hypervisor and storage requirements. Subsequent to this the solution manager creates virtual machines within the virtual hypervisors and assigns capacity limits resource usage shares and other properties similarly to virtualization models. During system operation the solution manager can adjust the shares of its virtual machines within the virtual hypervisor or migrate VMs from one virtual hypervisor to another. Those actions have an explicit effect on resource allocation and user experience. For example if a desktop solution manager knows that certain desktops are performing less important work it can migrate a larger number of them to a single virtual hypervisor while moving more important VMs to a less congested virtual hypervisor. Note that this migration does not necessarily result in actual VM migration at the infrastructure level. It is up to cloud manager to decide how to realize the isolation and resource allocation specified by virtual hypervisors. Similar expressiveness could be achieved by complex language on a set of VMs in the cloud model.

A Virtual Hypervisor abstraction permits solution managers or resource pool managers to have improved control over the resource allocation decisions regarding their virtual machines while maintaining a cloud manager s role as the ultimate physical resource manager. Resource allocation methods illustrate how the virtual hypervisor abstraction can be efficiently realized by the global cloud manager. The present solutions introduce the virtual hypervisor to abstract hypervisors that could be on different physical servers geographically distributed on different networks service provider customer . This virtual hypervisor simplifies the deployment of cloud solutions

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the FIGS. illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Referring now to the drawings in which like numerals represent the same or similar elements and initially to an illustrative block diagram shows a system which includes a cloud network in accordance with one embodiment. The cloud network includes a cloud operations center which includes hardware and software components for providing cloud services to customers. In one illustrative application the cloud network may provide virtual desktop services to customers. The cloud network may include an image database a configuration management database CMDB and a policy database . The image database may store snapshots of the network to provide a way for restoration of portions of the network in the event of a problem or failure. The CMDB supports all cloud manager functions and policies are employed by a cloud manager in managing the cloud network and its interfaces.

The cloud network includes the cloud manager and is maintained by an administrator . The cloud manager is configured to allocate resources among a plurality of users customers nodes etc. In one illustrative embodiment interactions between the cloud manager and virtualized resources in a data center and can be simplified by inserting an abstraction layer in between. Data centers and may be geographically distributed service provider data centers or on premises customer data centers.

Data centers and each include an associated resource pool manager configured to manage resources internally in its respective data center. Physical servers in each data center include a hypervisor .

Manager deploys virtual machines VMs and manages them based on problem space specific knowledge and runtime information including current workload calendar wall clock time historical workload models etc. To perform these management functions the manager interacts with the hypervisor on individual servers or with a central virtualization infrastructure manager or pool resource manager . The virtualization manager monitors resource usage on each of the servers and by each of the VMs as well as to make configuration changes such as adding removing starting stopping VMs . Manager can also control the placement of VMs on physical servers and the relative shares of resources that are allocated to each of the VMs during the periods of contention. The manager manipulates these controls to optimize performance and resource utilization.

The abstraction layer includes or provides a virtual hypervisor or hypervisors . The virtual hypervisor provides an application programming interface API similar to a real hypervisor e.g. which may be similar to libVirt VMWare SDK which are known in the art . Virtual hypervisors are employed on the physical hosts interfacing with them using an API similar to that used with actual physical servers and virtualization managers e.g. . These virtual hypervisors are not real entities. They are simply abstract groupings of resources which are managed by the cloud manager e.g. with respect to a service level agreement between the cloud manager and the manager or managers of data centers and or . The actual mapping of the virtual hypervisor onto physical servers e.g. servers is the responsibility of the cloud manager and the deployment and management of VMs on top of the virtual hypervisors is handled by the pool resource manager .

Advantageously a call from the cloud manager to the virtual hypervisor no longer depends on non functional requirements NFRs of a workload. The NFRs are one of the inputs to the calls to the virtual hypervisor . The virtual hypervisor acts as a proxy and hides the complexity associated with virtual machine or resource assignments. The virtual hypervisor handles contacting the resource pool manager in the appropriate data center contacting the hypervisors of physical servers and instantiating the VMs .

A non functional requirement is a requirement that specifies criteria that can be used to judge the operation of a system rather than specific behaviors. Non functional requirements define how a system is supposed to be and non functional requirements are often called qualities of a system. Non functional requirements include constraints quality attributes quality goals and quality of service requirements etc. In particularly useful embodiments NFRs may include disaster recovery criteria latency criteria security criteria and other system qualities. Non functional requirements can be divided into two main categories 1. Execution qualities such as security and usability which are observable at run time. 2. Evolution qualities such as testability maintainability extensibility and scalability which are embodied in the static structure of the software system. Sufficient network bandwidth may be a non functional requirement of a system.

Workload NFRs may include e.g. accessibility service level agreement criteria resource constraints processor speed memory disk space network bandwidth etc. online response times timing of the company offices security back up etc. The NFRs add a level of difficulty in responding to workload requests made of the cloud manager . In accordance with one aspect of the present principles the virtual hypervisor can instantiate VMs and partition resources among data centers or other entities at the abstraction level to provide ease of compliance with the NFRs. The NFRs may be provided to the virtual hypervisor as an input and once an assessment of the network conditions are determined NFRs can be addressed. This significantly reduces complexity in addressing NFRs.

The virtual hypervisor permits multi VM deployment e.g. in High Availability Disaster Recovery HADR scenarios. In one example a single create command from the cloud manager to the virtual hypervisor can result in a plurality of VMs being instantiated. Using the example from above three VMs may be created with a single command. For example VM VM and VM are created on different physical servers in different data centers . The virtual hypervisor permits handling of a heterogeneous operation set associated with different types of hypervisors e.g. hypervisors . The virtual hypervisor provides features and functionality to permit a more fair and efficient distribution of resources and provide users service providers with greater flexibility and reduced complexity.

Referring to a system method for allocating resources in a cloud environment is illustratively depicted. In block an abstraction layer is provided or generated between a cloud environment and one or more data centers by generating a virtual hypervisor as an application programming interface. In block responsive to a workload request by the one or more data centers partitioning resources and instantiating virtual machines are performed in the one or more data centers using the virtual hypervisor such that non functional requirements of the workload are addressed at the abstraction level using the virtual hypervisor.

In block communicating between the cloud environment and the one or more data centers is provided through the virtual hypervisor. This may include e.g. contacting a resource pool manager of a data center contacting a hypervisor associated with a physical server of a data center etc. In block simplified commands may be deployed. For example a single create command is deployed at the virtual hypervisor to create a plurality of virtual machines at different servers. The different servers may be located at different data centers. In block non functional requirements are input to the virtual hypervisor to address the non functional requirements at the abstraction level.

Having described preferred embodiments of a system and method for abstracting non functional requirements based deployment of virtual machines which are intended to be illustrative and not limiting it is noted that modifications and variations can be made by persons skilled in the art in light of the above teachings. It is therefore to be understood that changes may be made in the particular embodiments disclosed which are within the scope of the invention as outlined by the appended claims. Having thus described aspects of the invention with the details and particularity required by the patent laws what is claimed and desired protected by Letters Patent is set forth in the appended claims.

