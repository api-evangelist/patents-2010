---

title: Integrated application access
abstract: An integration portal provides a user with access to application entities of a plurality of remote applications. An authorization layer included in the integration portal includes a permission map indicating an association between the user and at least one of the application entities of the plurality of remote applications that the user is permitted to access. The authorization layer in the integration portal is synchronized with an authorization layer included in an application portal that provides the user with access to a subset of the remote applications, whereby the permission map is updated with information about at least one of the application entities that the user is permitted to access through the integration portal. Corresponding systems and methods are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08156224&OS=08156224&RS=08156224
owner: Verizon Business Financial Management Corporation
number: 08156224
owner_city: Basking Ridge
owner_country: US
publication_date: 20101130
---
This application is a continuation application of U.S. patent application Ser. No. 11 584 111 filed on Oct. 20 2006 and entitled INTEGRATED APPLICATION ACCESS the content of which is incorporated herein by reference.

A typical enterprise computing environment includes multiple heterogeneous and distributed applications for accessing a variety of different systems covering different subject areas. For example many enterprises such as businesses and the like have different systems to support customer billing sales accounting inventory ordering procurement technical support field repairs etc. Such different systems each generally have a dedicated application e.g. a web application or a client server application for accessing each of the different systems in an enterprise. Applications allowing users to access different systems are often incompatible with one another for a variety of reasons particularly when to begin with such applications are not even part of the same enterprise.

In one common scenario where an enterprise is the result of a merger or acquisition the enterprise may have multiple unrelated systems for performing a single function. For example the two companies joined by a merger may each have had their own systems for tracking repairs prior to the merger and after the merger it may be impractical or difficult to combine the two systems. To take another example an enterprise may have one system for provisioning or fulfilling new orders and another system for tracking repair requests the two systems having been developed independently. However it may often be the case that the same user e.g. a customer wishes to access multiple systems within an enterprise because multiple systems include data of interest to the user. Indeed a customer s account information may be spread across multiple systems within the enterprise e.g. repair billing provisioning etc.

It is common for enterprises to have what is known as a portal e.g. a web site that is a single point of access through which users both within and without the enterprise can access diverse applications and systems. Often portals provide web pages with links to different applications. When a user selects such a link the user is invited to log in to the selected application. In some cases using a technique known as account aggregation the user may be permitted to provide to the portal login information for various applications. The portal then stores the user s login information for each of the various applications and maps this login information to the user s login information for the portal.

However to provide login information to the portal concerning each of the various enterprise applications that the user may need to access means first that the user have a login account for each enterprise application that the user will access and second that the user is aware of the enterprise application that the user needs to access. In many cases users will not have the time or knowledge to provide such information to a portal. Further an enterprise may have multiple portals e.g. due to a merger or the like as discussed above but such multiple portals may be un integrated and therefore data concerning user entitlements to various application features and functions included in one portal may not be included in a second portal.

In sum because present portals are able to allow users to view certain sets of data only according to application specific login information limited to the portal present portals make it difficult if not impossible for users to access data of interest to them. In general present portals do not allow users to quickly and efficiently access the data that they wish to see and do not create an interface to various systems within an enterprise that renders transparent to the user of the fact that all of these different systems exist.

As seen in portals and provide access to one or more applications that also are accessible through portal . In some cases a portal or may be dedicated to a particular single application . In any case each of the portals and are generally dedicated to a particular subset of applications . In general the set of applications available through portal and a set of applications available through portal do not overlap. Portal on the other hand provides a single integrated point of access for user to all applications .

Portals and are sometimes referred to as legacy portals because they generally although not necessarily pre exist portal . Portal may replace portals and although embodiments are possible and likely in which legacy portals and exist alongside portal thereby providing user with several ways in which to access an application . It should be understood that although shows two legacy portals and embodiments are possible in which integration portal provides access to applications that previously were and perhaps currently are accessed through three or more legacy portals such as exemplary portals and . Further in some embodiments some or all applications may be accessed directly e.g. by accessing a computing device on which application is installed through network etc.

As seen in user of computing device may be provided with access to multiple applications within enterprise through portal . Enterprise represents any enterprise or any collection of enterprises that includes multiple and disparate applications . In fact enterprise is depicted in for purposes of illustration and not limitation and it should be understood that portal may be used to provide access to a set of application entities included in applications . Application entities may be included in one or more applications and include items such as menus web pages and the like that provide various features and functions of applications to user . Alternatively embodiments are possible that do not include stand alone applications but simply include a set of application entities wherein various users are authorized to access various subsets of application entities . In any event application entities may be accessed through network or some other network connected to portal regardless of whether applications including an application entity are included within enterprise .

Portal and computer are generally each connected to network which may be any network capable of providing digital communications between portal in computer and is generally a packet switched network. For example network may be any combination of a local area network LAN a wide area network WAN or the Internet etc. Accordingly user generally accesses portal by using a Web browser or some other suitable client application that is installed on computer . As noted above portals and and in some cases applications may also be accessed through a network such as network .

Portal generally includes peripheral devices such as a keyboard a mouse or other pointing device a display etc. to facilitate administration of portal through administration interface . Administration interface is usually a graphical user interface GUI such as may be provided through a webpage accessible through a Web browser or the like. Portal further provides user interface also usually a GUI whereby user may access applications . User interface may include screens or web pages for accessing or providing functionality related to a single application or for more than one application . For example functionality related to a billing application and also to a provisioning application may be combined together within a single screen or webpage of user interface . Accordingly user may advantageously simultaneously access the two applications where ordinarily the user might be required to log in to the two applications separately with separate user names and passwords.

Interfaces and may be rendered according to various ways of programming web pages such as Java Server Pages JSPs . Further using server technologies e.g. Enterprise Java Beans EJB and the like data such as queries responses to requests for information etc. may be processed e.g. submitted applications databases and or data stores and discussed further below with reference to .

Portal generally includes authentication layer authorization layer and or data access layer each discussed in more detail below to provide for access to applications by user . Similarly portals and include authentication layers and respectively. In the embodiment illustrated in portals and further each include respectively authorization layers and . However it is possible for authorization layers or to be included in one or more applications . Further in the illustrated embodiment applications and accessible through portal include data access layers and respectively. Portal includes data access layer thereby negating any need for such to be included in applications accessible through portal .

Authentication layers and generally include program instructions such as are known for authenticating user to portals and respectively e.g. by requiring entry of a login identifier and a password for user by checking a digital certificate by verifying an Internet Protocol IP address for computer etc.

Authorization layers and are included in portals and respectively and generally include data and program instructions to provide for access by user to specified features and or functionality in one or more applications that user has been authorized to access.

Data access layers and generally include data and program instructions to provide for access by user to one or more specific sets of data in applications . Data access layers and are included in applications and respectively and accordingly include instructions only for accessing data in the relevant application database . Data access layer is discussed further below with reference to . Certain applications may allow all users accessing the application to access all data that may be provided by the application and therefore do not include a data access layer as is illustrated in with respect to application accessed via portal .

Queue manager illustrated in supports sending and receiving messages between portal and applications by providing for asynchronous communications between portal and applications . Also as discussed further below queue manager provides for portal to receive data updates from databases . In one embodiment queue manager includes IBM WebSphere MQ sold by International Business Machines Corp. of Armonk N.Y.

Computer may include any one of a number of computing devices including without limitation a computer workstation a desktop notebook laptop or handheld computer or some other computing device as is generally known such as a Java enabled cellular telephone or similar device. Computing devices such as the foregoing may employ any of a number of computer operating systems including but in no way limited to known versions and or varieties of the Microsoft Windows operating system the Unix operating system e.g. the Solaris operating system distributed by Sun Microsystems of Menlo Park Calif. the AIX UNIX operating system distributed by International Business Machines of Armonk N.Y. and the Linux operating system. Computer can include client applications such as web browser to permit access to portal as well as a display input devices memory storage etc. as needed to provide for access to portal .

Portal and also portals and generally include both hardware including computing devices and software for communicating with computer and also applications . For example in an embodiment portal includes one or more server computers provided with relational database and web server software and also software that includes program instructions for providing administration interface and also layers and . Such server computers may be provided with any of the computer operating systems mentioned above or some other computer operating system. Portal generally further includes storage devices such as disk arrays or the like attached to computing devices such as the afore mentioned server computers. Also it should be understood that portal generally includes input devices displays network connections and other peripherals necessary to support the functioning of portal .

Web server software enables a computing device within portal to respond to requests from a web browser installed on computer e.g. hypertext transfer protocol HTTP requests. Such Web server software in conjunction with program instructions included in authentication layer authorization layer and or data access layer generally provides for communicating with applications and for requesting and retrieving information from databases .

Applications may communicate with portal and databases through a network such as a LAN not shown network or some other network. Although not shown in it will be understood that applications generally run on one or more server computers provided with hardware peripherals and operating systems such as those mentioned herein. Applications are generally each associated with a database and in fact it is to be understood that applications and databases may be combined. Embodiments are also possible is which portal accesses one or more databases directly. For purposes of understanding illustrated embodiments it is important to understand simply that applications and databases together generally support a particular business function or set of functionality. For example an application may be a billing system a repair tracking system an ordering system etc.

Application entities may be included in one or more applications or may be accessible only through portals or etc. For example an application entity may include an API call that affects data seen in both a billing system and an ordering system. To take another example an application entity may include a menu item e.g. View Customer Status relevant to multiple back end systems.

With respect to relational databases included within portal and or databases relational database software generally refers to a relational database management system RDBMS as is known. An RDBMS generally employs the known Structured Query Language SQL in addition to a language for creating storing editing and executing stored procedures such as the PL SQL language mentioned above. However it is to be understood that databases may be some other kind of database such as a hierarchical database a set of files an application database in a proprietary format etc. Each database generally includes a computing device employing a computer operating system such as one of those mentioned above and are accessed via a network in any one or more of a variety of manners as is well known. Embodiments are possible in which at least some of databases are both included in one RDBMS or are located within a single computing device.

Computer and one or more computing devices included within portal may each include instructions executable by one or more computing devices such as those listed above. Such instructions may be compiled or interpreted from computer programs created using a variety of programming languages and or technologies including without limitation and either alone or in combination Java C C Visual Basic Java Script Perl etc. For example one embodiment includes Enterprise Java Beans EJBs and stored procedures written in the PL SQL language provided by Oracle Corporation of Redwood Shores Calif. In general a processor e.g. a microprocessor receives instructions e.g. from a memory a computer readable medium etc. and executes these instructions thereby performing one or more processes including one or more of the processes described herein. Such instructions and other data may be stored and transmitted using a variety of known computer readable media.

A computer readable medium includes any medium that participates in providing data e.g. instructions which may be read by a computer. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media include for example optical or magnetic disks and other persistent memory. Volatile media include dynamic random access memory DRAM which typically constitutes a main memory. Transmission media include coaxial cables copper wire and fiber optics including the wires that comprise a system bus coupled to the processor. Transmission media may include or convey acoustic waves light waves and electromagnetic emissions such as those generated during radio frequency RF and infrared IR data communications. Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape any other magnetic medium a CD ROM DVD any other optical medium punch cards paper tape any other physical medium with patterns of holes a RAM a PROM an EPROM a FLASH EEPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

As mentioned above portal includes authentication layer authorization layer and or data access layer . In embodiments discussed herein portal includes each of layers and although embodiments are contemplated in which not all of layers and are present. Some identification of users by authentication layer is generally necessary. However it is to be understood that embodiments are possible in which authorization layer is omitted and in which access to applications by user is determined solely by the entitlements provided through data access layer . Similarly data access layer may be omitted from portal in which case users may be given access to all data and or functionality included within applications that each user is authorized to access.

In embodiments disclosed herein users generally may access applications through portal . Applications are generally but not necessarily remote from portal i.e. accessed through a network such as a LAN WAN etc. Users are thereby provided access to diverse applications through a single portal user interface common to all applications that may be accessed through portal . By providing such unified access to applications portal provides user with a simpler and more efficient way to access applications than would be available to user if it were necessary to access applications separately or through different portals and and therefore to be authenticated authorized and entitled to diverse applications separately. For example because portal user interface is common to multiple applications user need not remember multiple login names and passwords nor need user remember multiple ways of accessing multiple applications e.g. multiple uniform resource locators URLs or web addresses.

The following sections discuss the steps of the process in detail. However a brief overview of process may be helpful before providing the following detailed discussion. Briefly process begins with step in which user is authenticated to portal e.g. by providing a user name and password to portal through interface . Next in step user is authorized to access items e.g. features and or functions in one or more applications . Permissions discussed in more detail below with reference to are generally determined according to the username and password provided in step and do not require further user interaction with portal through user interface . Next in step portal determines user data access entities also discussed in more detail below. Next in step user is provided access to authorized applications through portal user interface . Process ends after step .

Process will now be discussed in further detail. First in step user is authenticated by portal . Authentication layer as mentioned above is known for authenticating users to portal . Authentication layers and in portals and respectively generally operate in a similar fashion to authentication layer . For example it is common to require users accessing applications over the World Wide Web of the Internet and intranet etc. to provide a login identifier and password before access is permitted. Generally a user enters a login identifier and a password in a form provided through user interface . The entered login identifier and password are then checked against a database of users permitted to access portal . Such database of users may be protected by known security mechanisms including storing login and password data concerning users in encrypted form.

In one embodiment the eTrust SiteMinder software product sold by Computer Associates of Islandia N.Y. is used to provide authentication of users to portal . Further mechanisms such as digital certificates may be used to authenticate users . Users having digital certificates may provide portal with a digital key that may be processed by portal e.g. using a hashing technique or the like to authenticate user . In general authentication layer or some similar mechanism is generally necessary to uniquely and definitively identified user so that authorization and data access may take place as provided for by authorization layer and data access layer respectively.

Although not illustrated in it should be understood that if portal is unable to authenticate the user and step process will terminate. However assuming that user is successfully authenticated and step step is executed next.

Continuing with process in step portal provides user with requested access to one or more applications whereupon a user may request access to one or more application entities meaning that authorization or authorizations are determined as described hereinafter. However unless user is entitled to see all of the data presented by the requested applications portal next determines data access entities of user to access data included in applications and or databases as described below.

An authorization includes an identifier for user a permission and an application entity . Permissions represent various kinds of authorization to access application entities that may be accorded to users . Application entities are entities that may be identified in authorization data store pertaining to applications such as an application itself or a menu or webpage that may be provided in one or more applications or a method in an application program interface API that may be called or accessed by or on behalf of a user in an application . Accordingly permissions specify actions that user is authorized to take with respect to application entity e.g. authorizations to view modify delete download query select access etc. application entity .

Menu authorization pertains to menus or menu items that may be presented to user through portal user interface . For example user may be associated with an permission to access a billing system but may not be entitled to change any data in a billing system but rather is simply entitled to view data in a billing system. Accordingly authorization may provide user with access to menu items for viewing billing data but user will not be provided with authorization for modifying billing data.

Page authorization pertains to specific webpages or screens that may be presented to user through portal user interface . Continuing the example provided in the previous paragraph user may be provided with an authorization to access a webpage that displays billing data but not to access a webpage that allows support modification of billing data. Similarly user may be provided with an authorization to access a webpage that displays high level or summary level data but not to access a webpage that provides granular or detailed reporting.

Permissions and application entities generally have a many to many relationship in authorization data store with each other and with users . In other words while authorization generally includes one each of a permission and an application entity the permission and application entity may be included in other authorizations . Further authorizations may be and generally are associated with more than one user . Sometimes such associations are achieved through a user group . User groups are simply groups of one or more users that may be associated with authorizations i.e. permissions and application entities . Permissions generally have a many to many relationship with users and also with user groups .

Associations of users and authorizations are generally identified in user permission map while relationships between user groups and authorizations are generally identified in user group permission map . Generally user group map permission and user permission map are tables in a relational database included within portal such as authorization data store . Further a user profile including a unique user identifier is generally stored for each user of portal . A user profile may include various information concerning user including one or more user groups associated with user . Embodiments are possible in which authorizations may be stored directly in user profile e.g. a permission and application entity may be stored together in user profile thereby signifying an authorization associated with user .

By querying authorization data store or the like portal may determine authorization or authorizations associated with user i.e. the application entity or entities that a user is authorized to access and the manner in which the user is authorized to access such application entities . Such a determination may be used to govern the presentation of one or more applications to user e.g. as takes place in step .

Authorization data stage is also included in authorization layer . As discussed further below with respect to authorization data stage is used for receiving information from applications concerning authorizations and for using this information to update maps and in authorization data store . Similarly authorization data stage is used for receiving information from authorization data store concerning authorizations and for using this information to update authorization information maintained by applications . In an embodiment authorization data stage is maintained according to Lightweight Directory Access Protocol LDAP . As is known LDAP may be used to store and provide information concerning users of application .

Continuing with the description of process if portal determines that user is not authorized i.e. is not associated with any permissions to access any applications then process will terminate following step although such termination is not illustrated in . On the other hand if user is associated with one or more permissions i.e. user is authorized to access one or more applications then generally process proceeds to step wherein user is presented with requested application entities .

Further as was noted above embodiments are possible in which authorization layer is omitted entirely. As will be apparent step will also be omitted in such embodiments. Accordingly in these embodiments process will proceed directly from step to step . In such embodiments users may be allowed to access all applications that are available through portal but may be restricted to accessing only data to which they are entitled as described below with respect to step . Moreover in embodiments in which data access layer is omitted process ends after step .

In step portal using data access layer determines data access entities for user . illustrates data access layer according to an embodiment. Data access layer is described in further detail in co pending application Ser. No. 11 584 098 entitled INTEGRATED DATA ACCESS filed the same day as the present application assigned to the assignee of the present application and fully incorporated by reference herein in its entirety.

Data access entity represents an entitlement to access one or more data entities i.e. a specified subset of data in applications and or databases e.g. a record or set of records in tables in databases . For example data entities in a billing system may include a subscriber data entity whereby each subscriber represents a customer or subscriber billed by the system. In this example data access entity may include a data entity identifying a subscriber or if the subscriber data entity exists in a hierarchy whereby subscribers are included in subscriber groups data entity may include an identifier for a subscriber group. Generally a data entity identifies data that is of interest only to a particular user or set of users . Further data identified by a data entity in a data access entity is generally the only data that a user associated with the data access entity should be allowed to access in applications . That is data access entity effectively serves as mechanism to prevent users from accessing data that they are not entitled to access in addition to providing users with access to data that they are entitled to access. It is possible to include more than one data entity in a data access entity . For example a first data entity in data access entity may refer to a set of billing data and a second data entity in data access entity may refer to a set of repair data.

Returning again to process in step user accessing applications according to the authorizations determined in step is provided with requested data according to data access entities .

In step user is presented with one or more application entities in user interface . Step may generally occur only after a user has been authenticated to portal as described above. However it should be understood that step may occur at any time a user navigates to a web page or screen in user interface presenting one or more application entities . For example user may be presented with a screen or page in the user interface that provides a list of applications menus web pages screens features provided by calling into an API etc. that the user may access in portal .

Next in step it is determined whether user has requested to access an application entity . For example user might request a report enter a query request a particular web page or request to see some other portion of user interface such as a menu or set of menu items. If it is determined that user has not requested to access an application entity process proceeds to step in which it is determined whether user has requested a new screen presenting a different set of application entities . However if user has requested to access one or more application entities through application step is executed next.

In step it is determined whether portal is to check for authorizations according to a user group . Step is optional. In some embodiments portal may always check for authorizations according to user group while in other embodiments user groups may not be included and therefore such a check would not make sense. However in some cases it may be possible for portal to determine e.g. according to a user identifier or other information in a user profile whether authorizations may be associated with a user group to which the user belongs. If it is determined that portal should check for authorizations according to a user group step is executed next. Otherwise step is executed next.

In step portal identifies user group or groups to which user belongs. Portal may support both users who do not belong to any user groups as well as users who do belong to one or more user groups . There are a number of different ways in which portal may determine whether user belongs to one or more user groups . For example information concerning user groups may be stored in user profile or portal may check user group map to determine whether user may be found.

Next in step portal queries user group authorization map to determine authorizations for user group including user and stores authorizations for user in memory or some other medium e.g. using a session variable or the like. In one embodiment an Enterprise Java Bean EJB may be instantiated for storing and providing portal with access to authorization . Accordingly when portal needs to determine whether user is entitled to access particular data it may call the EJB that includes authorization by passing in an identifier for the item e.g. data menu items API methods etc. that user wishes to access to determine whether such access may be granted. Other kinds of programming instructions such as stored procedures may be used perhaps in combination with an EJB to determine authorizations .

In the embodiment illustrated by step is visited regardless of whether it has been determined in step not to check for authorizations for user according to user group . However embodiments are possible in which after checking for authorizations according to user group including user portal then omits to check for authorizations that are specifically associated with user and not with user group . Further in some embodiments if it has been determined not to check for authorizations according to user groups in step it is simply assumed that portal should check for authorizations according to the identity of user . Step is executed following step .

In step portal determines whether to check for authorizations pertaining to user simply according to the identity of user . Such determination may be made according to information in a user profile according to information encoded into an identifier for user or according to other rules programmed into portal . In any event if such a check for authorizations is to be made step is executed next. If not step is executed next. It should be noted that portal is preferably programmed so that at least either steps and or and are executed i.e. so that authorizations are checked according to at least one of user and user group .

In step portal queries user authorization map to determine authorizations for user in application . As noted above authorizations are generally keyed to a combination of user and permission .

Next in step authorizations relating to user are then stored in memory or some other medium as described above with respect to step . Step is executed following step .

Next in step authorization is verified according to the request for an application entity made by the user or on behalf of the user in step . Authorization may be accessed e.g. a call may be made to an EJB to determine what data user is entitled to access through application . If it is determined in step that user is entitled to the requested application entity then step is executed next. Otherwise step is executed next.

In step the GUI for application e.g. user interface provides the feature associated with application entity that was requested in step e.g. by displaying a menu menu items web page accessing an API etc.

In step which is executed if authorization could not be verified in step an error or message or the like may be displayed to user .

In step a determination is made as to whether user has requested a new screen or web page in user interface . If not process proceeds to step . Otherwise process returns to step .

In step a determination is made as to whether user has requested to exit portal or whether an indication that user has exited portal has been received in another manner e.g. by a session variable or the like timing out. If such a determination is made then process ends. Otherwise process returns to step .

In step authorization is revised added to or deleted from database authorization data store or a data store in one of authorization layers or where authorization pertains to an application entity . Such revisions or additions of authorization may occur in a variety of ways. For example an administrator of an application may add user to a list in database of users authorized to access application and may further add to database information concerning one or more authorizations granted to user with respect to application . It is also possible to provide an administrator of portal with the ability to add user as an authorized user in data store and further with the ability to grant one or more authorizations user with respect to application entity . Similarly administrators may be provided with the ability to delete users from database data store data stores in authorization layers or etc. or to grant or revoke authorizations to users . In any event the requirements of step are met when authorization is added to revised in or deleted from database authorization data store or a data store in one of authorization layers or .

Next in step an update mechanism in the data store modified in step is triggered to update authorization data stage in authorization layer with the information changed in step . The update mechanism may be a set of program instructions included in application and or database or in authorization layers or whichever is associated with the data store updated in step . For example in an embodiment the update mechanism may be a web service that periodically e.g. once every 24 hours synchronizes an LDAP data store associated with application and data stage which as noted above may be an LDAP data store. Other kinds of update mechanisms may also be used. For example it is possible for database to store all information relating to changed authorizations in a file e.g. using a stored procedure and to provide such file to a corresponding update data stage using file transfer protocol FTP . Similarly various stored procedures in database data store or data stores in authorization layers or may be created and utilized to provide information relating to changed authorizations to update data stage .

Next in step the update mechanism triggered in step is executed. For example as noted above a stored procedure in database in data store or a data store in authorization layers or may send information concerning changed authorizations to data stage .

Next in step authorization change information triggers an update mechanism in update data stage e.g. a stored procedure a web service synchronizing LDAP data stores etc. to update a table or tables in update data stage that include authorization information relating to application and user . In some embodiments update data stage includes only information concerning changed authorizations and is purged of all data after updating data access data store as described below. It is also possible for updates to data stage to include all information concerning authorizations relating to application and for update data stage to therefore be essentially copied over to authorization data store .

Next in step an update mechanism in update data stage is triggered to provide the authorization change information received in step to various data stores e.g. all data stores other than the one updated in step . For instance an authorization change to a database may be updated in authorization data store and may be further propagated to data stores in authorization layers and in portals and . An update to authorization data store may include an update to user permission map or user group permission map and it will be understood that similar structures in a database or in data stores in authorization layers and may be updated. Again the update mechanism may be provided in a variety of ways frequently according to a stored procedure executed in a database including data stage or a web service. Further the trigger for the update mechanism may be provided in a variety of ways such as according to scheduling program that triggers the update mechanism on a periodic e.g. once every 24 hours basis or the trigger may be event based e.g. based on updates being made to an LDAP data store associated with an application etc.

In step authorization layer detects a change in one or more data access entities . For example authorization layer may employ a database stored procedure a web service or some other mechanism for checking for changes to data access entities in data access data store on a periodic basis or according to an event such as the update of data access data store . Updates to data access entities and data store are described more fully in the above referenced co pending application Ser. No. 11 584 098 entitled INTEGRATED DATA ACCESS. 

Next in step authorization layer determines whether the change detected in step requires a change to authorizations e.g. an update to user permissions map and or user permissions map in data access data store . For example if a user is provided with a new entitlement to a data access entity such an association may require the user and a permission to be associated with an application entity . In such a case it may be that a user the ability to modify a certain set of data records associated with data access entity and an authorization including the appropriate permission should be established accordingly in authorization data store . For example such modification of the set of data records may be accomplished by accessing an API method. Therefore upon such modification to data access entities it is desirable to provide the user with the appropriate authorization to access the API method that will allow the user to modify data according to the data access entity .

If in step authorization layer determines that the change detected in step does require a change to authorizations step is executed next. If not process ends.

In step authorization layer triggers an update of user permission map and or user group permission map to make the authorization change required by the data access entity change detected in step . Again a database stored procedure a web service or some other mechanism may be used to trigger such a change in authorization data store .

In step portal determines whether an administrative user viewing administration interface has entered a selection to create a new authorization . Such selection may be entered by choosing a menu option or the like. Note that an administrative user may access portal using a computer included in or directly connected to portal rather than through network although access by an administrative user through network may also be possible. If user has selected to create a new authorization step is executed next. Otherwise step is executed next.

In step portal defines the authorization to be created. As noted above in an embodiment authorization may pertain to a specified application entity e.g. a menu menu item API call etc.

Next in step portal creates the defined authorization by creating a record in user map and or user group map including a user or user group as appropriate a permission and application entity .

In step it is determined whether user of administration interface has selected to create a new user for portal . If so process is executed next. Otherwise step is executed next.

In step portal accepts input through administration interface providing information to create a new user and saves the information in a user table or the like and also saves information in other relevant stores such as user group map user map user group data access map and user data access map . Information concerning a new user includes items to populate a user profile such as a user name a password permissions identifiers for user groups to include the new user data access entities granted to the new user etc. Once such information has been stored in the appropriate tables or the like process proceeds to step .

In step it is determined whether input has been received from user to create a new user group . If so step is executed next. Otherwise step is executed next.

In step portal accepts input through administration interface providing information to create a new user group and saves the information in a user group table or the like and also saves information in other relevant stores such as user group map . Input may also have been provided for associating the new user group with permissions and or data access entities in which case user group data access map and or user data access map may also be updated. Following step process proceeds to step .

In step it is determined whether input has been received from user of administration interface to modify an authorization . If so step is executed next. Otherwise step is executed next.

In step authorization is modified according to instructions received from user . It should be understood that modification of authorization may include deletion of authorization from portal including removing data access entity from user group map and user map . Other modifications to authorization may include substituting a different permission and or authorization entity into authorization . Process proceeds to step following step .

In step it is determined whether input has been received from user of administration interface to modify user e.g. to modify information in user profile such as that provided above as described with respect to step to modify user map associating user with authorizations etc. If such input has been received process proceeds to step . Otherwise step is executed next.

In step user profile user map etc. are updated according to the input received in step . Further it should be understood that information concerning user such as information concerning authorizations associated with user in user permission map may be updated in other ways e.g. as described above with reference to .

In step it is determined whether input has been received from a user of administration interface to modify user group . If so step is executed next. Otherwise step is executed next.

In step user group is modified according to input received in step . Such modification may include deletion of user group . Further user group may be modified by associating additional permissions with user group and user group map or by removing authorizations associated with user group from user group map .

In step portal determines whether user has selected an option in administration interface to modify either user group data access map or user data access map . If so process proceeds to step . However if such input has not been received from user step is executed next.

In step according to input received from user of administration interface user group permission map and or user permission map are modified. For example a user could be newly associated with a pre existing authorization in user map . Similarly user group could be associated with a pre existing authorization in user group map . Further such mappings could be deleted from map and or map .

In step it is determined whether input has been received to exit administration interface . If so process ends. Otherwise process returns to step .

The processes systems methods heuristics etc. described herein have been disclosed in the context of system . However the descriptions provided herein are intended to be illustrative and not restrictive and it is to be understood that the processes systems methods heuristics etc. described herein could be equally applicable to testing other systems.

Further with regard to the processes systems methods heuristics etc. described herein it should be understood that although the steps of such processes etc. have been described as occurring according to a certain ordered sequence such processes could be practiced with the described steps performed in an order other than the order described herein. It further should be understood that certain steps could be performed simultaneously that other steps could be added or that certain steps described herein could be omitted. In other words the descriptions of processes herein are provided for the purpose of illustrating certain embodiments and should in no way be construed so as to limit the claimed invention.

Accordingly it is to be understood that the above description is intended to be illustrative and not restrictive. Many embodiments and applications other than the examples provided would be apparent upon reading the above description. The scope of the invention should be determined not with reference to the above description but should instead be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled. It is anticipated and intended that future developments will occur in the arts discussed herein and that the disclosed systems and methods will be incorporated into such future embodiments. In sum it should be understood that the invention is capable of modification and variation and is limited only by the following claims.

All terms used in the claims are intended to be given their broadest reasonable constructions and their ordinary meanings as understood by those skilled in the art unless an explicit indication to the contrary in made herein. In particular use of the singular articles such as a the said etc. should be read to recite one or more of the indicated elements unless a claim recites an explicit limitation to the contrary.

