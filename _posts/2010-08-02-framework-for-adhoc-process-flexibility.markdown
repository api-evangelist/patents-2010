---

title: Framework for ad-hoc process flexibility
abstract: The present disclosure involves systems, software, and computer implemented methods for providing a unified runtime framework and graphical, process-centric user interface for ad-hoc business process flexibility. One process includes operations for providing process instances of one or more business processes in a process visualization user interface. A request to initiate an ad-hoc change of a selected process instance is received from the client, and client user interaction options for implementing the ad-hoc change are provided to the client. A selection of a particular user interaction option for implementing the ad-hoc change is received from the client, and the ad-hoc change is implemented.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348609&OS=09348609&RS=09348609
owner: SAP SE
number: 09348609
owner_city: Walldorf
owner_country: DE
publication_date: 20100802
---
The present disclosure relates to software computer systems and computer implemented methods for providing a unified runtime framework and graphical process centric user interface for ad hoc process flexibility.

Companies employ business process management suites BPMS to model document automate govern and monitor complex repetitive processes. A process surrounding conditions and contextual constraints tend to change frequently and rapidly. The changes may include all sorts of suddenly occurring exceptional situations such as short term changes in legislative regulations and administrative guidelines that are to be obeyed unexpected resource unavailability which must be compensated for additional customer requests that should be addressed suddenly occurring workload peaks that require simplifying processes to successfully handle the workload and the like. Business process end users face the need to flexibly read on the exceptional situations at low costs while still adhering to the business goals such as deliverables or interfaces of the end to end processes they participate in. Companies set themselves apart from their competitive environment by both being able to dynamically adapt to exceptional situations while still taking advantage of the inherent benefits of a BPMS infrastructure such as monitoring process measures and tracking progress enforcing mandatory process steps and constraining resource consumption etc. . Accordingly process flexibility helps companies broaden the spectrum of BPMS use cases and thus to dramatically improve their return of investment on BPMS acquisitions.

Having the means to flexibly adapt processes to exceptional situations opens up a new range of highly dynamic business scenarios to be supported through BPMS technology. In many cases manually reengineering the underlying process model to incorporate the required changes is impractical as it requires process expert skills for modeling the process from scratch requires unacceptably high turnaround times and is from a user experience point of view not sufficiently adjusted to the specific contextual situation and process end user role. In particular it does not guide an end user in performing the needed changes and also does not reduce the inherent complexity of performing process model changes in a full process modeling environment.

The present disclosure provides techniques for providing a unified runtime framework and graphical process centric user interface for ad hoc business process flexibility. A computer program product is encoded on a tangible storage medium where the product comprises computer readable instructions for causing one or more processors to perform operations. These operations can include providing process instances of one or more business processes in a process visualization user interface. A request to initiate an ad hoc change of a selected process instance is received from the client and client user interaction options for implementing the ad hoc change are provided to the client. A selection of a particular user interaction option for implementing the ad hoc change is received from the client and the ad hoc change is implemented.

While generally described as computer implemented software embodied on tangible media that processes and transforms the respective data some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features objects and advantages of the disclosure will be apparent from the description and drawings and from the claims.

This disclosure generally describes computer systems software and computer implemented methods for providing a unified runtime framework and graphical process centric user interface for ad hoc process flexibility. Business processes may be executed modeled documented automated governed or monitored by Business Process Management Suites BPMS . After designing a business process however the surrounding conditions and contextual constraints associated with the business process may change and the business process and associated users may need to adapt to the new changes or requirements while still utilizing the benefits of the BPMS infrastructure. Accordingly a flexible runtime framework and user interface may be implemented to allow a user to dynamically adapt and make changes to a business process at runtime using available components from the BPMS infrastructure. In particular the runtime framework and user interface may provide a single point of access for performing ad hoc changes via a lightweight runtime visualization of process instances based on process models. Semantically meaningful changes may be presented to a user and applied to a business process based on contextual information associated with the business process such that the ad hoc changes applied to the business process are particularly suited for the needs and context of the user. Further additional guidance may be available to the user for making changes to the business process such as implicit and explicit constraints that restrict the range of ad hoc change options and that prevent violation of the basic business intent of the process.

In some implementations the runtime framework of the present disclosure may plug in various runtime mechanisms to perform an ad hoc change. First built in i.e. pre planned functionality of a BPMS system may be used to perform local changes with limited impact on a process run e.g. assigning a different task owner rolling back an activity setting back a token etc. . Second an extensibility framework can be used to replace process fragments e.g. activities subflows tasks data mappings user interfaces business partners at well defined interfaces. Finally a migration framework where a process instance state is migrated from the original process definition to an altered process definition which enables highly invasive structural changes may be provided to the user. From a technical infrastructure perspective the runtime framework of the present disclosure avoids design time and runtime roundtrips where users do not have to edit and re deploy the underlying process model. The design time and runtime roundtrips generally require additional user interaction and lengthy processing times which can be avoided with the runtime framework of the present disclosure. The technical implementation and changes however are hidden from the end user to provide a joint easy to comprehend user experience for making ad hoc changes to a business process. Thus the present disclosure provides for a homogeneous process centric user experience which both transparently abstracts from the underlying technical differences of various ad hoc change options and may dramatically improve understanding of the impact of an ad hoc change.

A graphical process oriented user interface may be presented to allow a user to make the changes to the business process described above. For example a graphical Web browser based process visualization tool that offers a custom choice of ad hoc change options for a selected running process instance may be provided to a user. Process instances may be visualized in the user interface by displaying the underlying process models in a standard process modeling representation. In addition other options for making meaningfully targeted ad hoc changes to a business process may be presented to the user. For instance some out of bound process measures such as an overdue deadline for certain process fragments e.g. tasks subflows control flow branches etc. may proactively indicate the need to intervene with an ad hoc change at the corresponding process fragment. Certain constraints may be applied to changes to the business process such as implicit e.g. instance based and explicit e.g. model based constraints to prevent a user from altering the business process beyond the logical bounds of the overall process framework. Implicit constraints include constraints that are applicable to a process instance based on the particular state that the process instance is in. For example a process instance may be in a state in which the process instance has already progressed to a particular branch of the process model. Accordingly in view of the current state of the process instance an implicit constraint may prevent certain changes to the business process such as removal of the process branch. Explicit constraints include constraints that are applicable to a process model and are business rules that are generally complied with for each process instance associated with the process model.

One potential benefit of the unified runtime framework and graphical process centric user interface of the present disclosure is that a user may easily make ad hoc changes to a business process without technical knowledge of the underlying components of business processes. For example in response to altered conditions related to a business process the user may need to make particular changes to components associated with the business process. Various options may be presented to the user through a user interface even at runtime of the business process such that the user can flexibly adapt to situational changes involving the business process. Thus the user may not need to re design components of the business process and may using the unified runtime framework implement changes to the business process at runtime that address the user s particular need within a certain business context. If a particular business process has already been initiated for example the runtime framework may allow the user to make changes to the business process without repeating previously performed steps of the business process.

In some implementations the unified runtime framework and user interface may provide additional guidance to the user such as applying constraints that prevent the user from implementing changes outside the scope of a business process or educating the user of interdependencies between components of the business process. Accordingly the unified runtime framework and user interface may provide a homogeneous and intuitive user interface for performing ad hoc process changes in a time efficient manner. Additionally the runtime framework and user interface may facilitate guided flexibility for process users by providing constrained selection of change options and implementing the necessary runtime support for transparently changing running process instances in an ad hoc manner without having to manually perform a full design time and runtime iteration. Different methods for modifying parameters of a business process and various available resources such as pre existing resources provided in an underlying platform such as a BPMS system are aggregated by the runtime framework and user interface into a single tool to allow a user without technical knowledge of the underlying business process framework to implement changes to the business process at runtime.

Turning to the illustrated example illustrates an example environment for providing a unified runtime framework and graphical process centric user interface for ad hoc process flexibility. The illustrated environment includes or is communicably coupled with server and one or more clients at least some of which communicate across network . In general environment depicts an example configuration of a system capable of providing a unified runtime framework and graphical process centric user interface for ad hoc process flexibility. The environment also supports one or more servers operable to provide a set of services to the client or server in which the one or more servers can be logically grouped and accessible within a cloud computing network. Accordingly the unified runtime framework and graphical process centric user interface may be provided to a client or server as an on demand solution through the cloud computing network or as a traditional server client system. Further the environment also supports a BPMS system operated by one or more web application servers. Different components of the BPMS system may be used to support ad hoc runtime changes to a business process.

In general server is any server that stores one or more hosted applications where at least a portion of the hosted applications are executed via requests and responses sent to users or clients within and communicably coupled to the illustrated environment of . For example server may be a Java 2 Platform Enterprise Edition J2EE compliant application server that includes Java technologies such as Enterprise JavaBeans EJB J2EE Connector Architecture JCA Java Messaging Service JMS Java Naming and Directory Interface JNDI and Java Database Connectivity JDBC . In some instances the server may store a plurality of various hosted applications while in other instances the server may be a dedicated server meant to store and execute only a single hosted application . In some instances the server may comprise a web server or be communicably coupled with a web server where the hosted applications represent one or more web based applications accessed and executed via network by the clients of the system to perform the programmed tasks or operations of the hosted application .

At a high level the server comprises an electronic computing device operable to receive transmit process store or manage data and information associated with the environment . The server illustrated in can be responsible for receiving application requests from one or more client applications or business applications associated with the clients of environment and responding to the received requests by processing said requests in the associated hosted application and sending the appropriate response from the hosted application back to the requesting client application . Alternatively the hosted application at server can be capable of processing and responding to local requests from a user accessing server locally. Accordingly in addition to requests from the external clients illustrated in requests associated with the hosted applications may also be sent from internal users external or third party customers other automated applications as well as any other appropriate entities individuals systems or computers. Further the terms client application and business application may be used interchangeably as appropriate without departing from the scope of this disclosure.

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example although illustrates a single server environment can be implemented using two or more servers as well as computers other than servers including a server pool. Indeed server may be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further illustrated server may be adapted to execute any operating system including Linux UNIX Windows Mac OS or any other suitable operating system. According to one embodiment server may also include or be communicably coupled with a mail server.

In the illustrated implementation and as shown in the server includes a processor an interface a memory one or more hosted applications and a runtime module . The interface is used by the server for communicating with other systems in a client server or other distributed environment including within environment connected to the network e.g. client as well as other systems communicably coupled to the network . Although depicts a server client environment other implementations of the runtime framework for providing ad hoc changes are within the scope of the present disclosure. For example the runtime framework may be provided or accessed locally at a computer. Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated environment .

In some implementations the server may also include a user interface such as a graphical user interface GUI . The GUI comprises a graphical user interface operable to for example allow the user of the server to interface with at least a portion of the platform for any suitable purpose such as creating preparing requesting or analyzing data as well as viewing and accessing source documents associated with business transactions. Generally the GUI provides the particular user with an efficient and user friendly presentation of business data provided by or communicated within the system. The GUI may comprise a plurality of customizable frames or views having interactive fields pull down lists buttons and other controls operated by the user. For example GUI may provide interactive elements that allow a user to enter or select elements of business process instances in GUI . More generally GUI may also provide general interactive elements that allow a user to access and utilize various services and functions of application . The GUI is often configurable supports a combination of tables and graphs bar line pie status dials etc. and is able to build real time portals where tabs are delineated by key characteristics e.g. site or micro site . Therefore the GUI contemplates any suitable graphical user interface such as a combination of a generic web browser intelligent engine and command line interface CLI that processes information in the platform and efficiently presents the results to the user visually.

Generally example server may be communicably coupled with a network that facilitates wireless or wireline communications between the components of the environment i.e. between the server and client as well as between servers and or workstations as well as with any other local or remote computer such as additional clients servers or other devices communicably coupled to network but not illustrated in . In the illustrated environment the network is depicted as a single network in but may be comprised of more than one network without departing from the scope of this disclosure so long as at least a portion of the network may facilitate communications between senders and recipients. The network may be all or a portion of an enterprise or secured network while in another instance at least a portion of the network may represent a connection to the Internet. In some instances a portion of the network may be a virtual private network VPN such as for example the connection between the client and the server . Further all or a portion of the network can comprise either a wireline or wireless link. Example wireless links may include 802.11a b g n 802.20 WiMax and or any other appropriate wireless link. In other words the network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated environment . The network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. The network may also include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the Internet and or any other communication system or systems at one or more locations. The network however is not a required component of the present disclosure.

As illustrated in server includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular embodiments of environment . Each processor may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of server and specifically the one or more plurality of hosted applications . Specifically the server s processor executes the functionality required to receive and respond to requests from the clients and their respective client applications as well as the functionality required to perform the other operations of the hosted application .

Regardless of the particular implementation software may include computer readable instructions firmware wired or programmed hardware or any combination thereof on a tangible medium operable when executed to perform at least the processes and operations described herein. Indeed each software component may be fully or partially written or described in any appropriate computer language including C C Java Visual Basic assembler Perl any suitable version of 4GL as well as others. It will be understood that while portions of the software illustrated in are shown as individual modules that implement the various features and functionality through various objects methods or other processes the software may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate. In the illustrated environment processor executes one or more hosted applications on the server .

At a high level each of the one or more hosted applications is any application program module process or other software that may execute change delete generate or otherwise manage information according to the present disclosure particularly in response to and in connection with one or more requests received from the illustrated clients and their associated client applications . In certain cases only one hosted application may be located at a particular server . In others a plurality of related and or unrelated hosted applications may be stored at a single server or located across a plurality of other servers as well. In certain cases environment may implement a composite hosted application . For example portions of the composite application may be implemented as Enterprise Java Beans EJBs or design time components may have the ability to generate run time implementations into different platforms such as J2EE Java 2 Platform Enterprise Edition ABAP Advanced Business Application Programming objects or Microsoft s .NET among others. Additionally the hosted applications may represent web based applications accessed and executed by remote clients or client applications via the network e.g. through the Internet . Further while illustrated as internal to server one or more processes associated with a particular hosted application may be stored referenced or executed remotely. For example a portion of a particular hosted application may be a web service associated with the application that is remotely called while another portion of the hosted application may be an interface object or agent bundled for processing at a remote client . Moreover any or all of the hosted applications may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the hosted application may be executed by a user working directly at server as well as remotely at client .

As illustrated processor can also execute a unified runtime module that provides an environment and user interface for presenting to a user of client application options for applying ad hoc changes to a business process at runtime of the business process. In some implementations the unified runtime module can be executed by a different processor or server external to server such as by a server communicably coupled to server through network . For example the unified runtime module may be provided as an on demand service through a cloud computing network as a web service accessible via network or as a service provided on a dedicated server. The unified runtime module can provide interfaces modules services or metadata definitions that enable client application to provide support for implementing ad hoc changes to a business process executed at server or at a different server or workstation. In the present disclosure a business process may be any collection of related activities tasks or sequential steps performed in association with a particular business context business partner or customer. Business processes may be performed in software as a computer program and or in connection with a computer microprocessor server workstation instance of a computer program thread of execution within a computer program or other data processing element. Each business process may be associated with a workflow and each distinct case or occurrence of the workflow or a portion of the workflow may be a separate process instance of a particular business process.

In the illustrated example the unified runtime module may also provide a process visualization and ad hoc change web tool for presenting graphical tools to a user for selecting and applying ad hoc changes to a business process. Although the ad hoc change web tool is described in the present disclosure as a tool utilizing web based technologies other implementations of the ad hoc change web tool such as implementing ad hoc changes without necessarily using a web based tool are within the scope of the present disclosure. The ad hoc change web tool provides a single point of access for performing ad hoc changes via a lightweight runtime visualization of process instances based on process models. For example the runtime visualization may include rendering of the process model as a graph using Business Process Modeling Notation BPMN elements and contextual enrichment of instance data. The contextual enrichment of instance data may include for example depictions of the consumption of resources throughout the process instance status indicators runtime durations involved users or outcome of previous steps in the process instance. In some implementations the ad hoc change web tool is available to a user through a web browser based application at client .

The unified runtime module may also present and apply semantically meaningful changes to a business process based on contextual information associated with the business process and the user. Further the unified runtime module may provide additional guidance to the user for making changes to the business process such as implicit and explicit constraints that restrict the range of ad hoc change options and inhibit violation of the basic business intent of the process as formulated in business rules and in the process template. The implicit constraints include restrictions that are imposed due to a particular state of the process instance such as prohibiting removal of certain process steps after the process instance has progressed beyond those process steps. The explicit constraints include modeled business rules that are part of the process template and that generally apply to all process instances based on that process template. The unified runtime environment may be separate from hosted application while in other instances the unified runtime module may be embedded within or part of a particular one or more hosted applications.

The unified runtime module and ad hoc change tool provide various mechanisms for adapting a business process instance at runtime. These mechanisms are described in further detail below in connection with and generally include 1 dynamic configuration of a process instance by calling existing APIs of various components within a BPMS stack e.g. task management user management etc. 2 extensibility through late binding mechanisms replacing process building blocks such as automated activities user tasks or sub processes with other process building blocks at their interface boundaries and 3 migrating process instance data from one process template or process model to another process template that is dynamically generated at runtime. The terms process template and process model may be used interchangeably as appropriate without departing from the scope of this disclosure. By allowing for ad hoc changes at runtime the ad hoc change tool bypasses a runtime design time roundtrip. Accordingly the total cost of ownership and the turnaround times required for performing changes to a process instance are significantly reduced. Further the unified runtime module provides a level of abstraction to a user for implementing the ad hoc changes and reduces the user expertise required for making such changes. Additionally the unified runtime module can provide a unified user interface for performing the process adaptations which abstracts from the specific adaptation mechanisms and is dynamically adapted to the contextual situation. For example the ad hoc change tool may specifically suggest the change options that are permissible for a particular user or that are applicable to a current process instance.

In general the server also includes memory for storing data and program instructions. Memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. Memory may store various objects or data including classes frameworks applications backup data business objects jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the server and its one or more hosted applications .

Memory may also store data objects such as process models used by the unified runtime module . For example a particular process model may include process model definitions and parameters associated with a particular business process. The process models may be retrieved from memory when the unified runtime module is applying an ad hoc change to a business process including a change that may require creation of an entirely new process model and migration of the modified process instance from the original process model to the new process model. During a process instance migration the original process model may be retrieved from the store of process models in memory and used as a basis for defining parameters in the new process model along with the additional changes requested by the user. Memory may also store information associated with process instances . The process instances may be retrieved by a runtime environment during modification of a business process such as an ad hoc change based on built in change operations within an underlying BPMS system. A process instance can consist of variables that hold the status of a particular process. The variables capture the progress of control and data flows using elements such as instruction pointers and variables holding instances of business documents that were manipulated during execution of the process.

The illustrated environment of also includes one or more clients . Each client may be any computing device operable to connect to or communicate with at least the server and or via the network using a wireline or wireless connection. Further as illustrated in client includes a processor an interface a graphical user interface GUI a client application and a memory . In general client comprises an electronic computer device operable to receive transmit process and store any appropriate data associated with the environment of . It will be understood that there may be any number of clients associated with or external to environment . For example while illustrated environment includes one client alternative implementations of environment may include multiple clients communicably coupled to the server or any other number of clients suitable to the purposes of the environment . Additionally there may also be one or more additional clients external to the illustrated portion of environment that are capable of interacting with the environment via the network . Further the terms client and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while each client is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

The GUI associated with client comprises a graphical user interface operable to for example allow the user of client to interface with at least a portion of the platform for any suitable purpose such as creating preparing requesting or analyzing data as well as viewing and accessing source documents associated with business transactions. Generally the GUI provides the particular user with an efficient and user friendly presentation of business data provided by or communicated within the system. The GUI may comprise a plurality of customizable frames or views having interactive fields pull down lists and buttons operated by the user. For example GUI may provide interactive elements that allow a user to enter or select elements of business process instances in GUI . The visualization and ad hoc change web tool may be presented and accessible to the user through GUI such as through a web browser for example. The business process steps interdependencies and ad hoc change options may be graphically rendered by the ad hoc change web tool and presented in GUI . Further the user may request ad hoc changes to a business process select from a number of ad hoc change options available for a particular business process and apply a selected ad hoc change to a particular business process through GUI . More generally GUI may also provide general interactive elements that allow a user to access and utilize various services and functions of application . The GUI is often configurable supports a combination of tables and graphs bar line pie status dials etc. and is able to build real time portals where tabs are delineated by key characteristics e.g. site or micro site . Therefore the GUI contemplates any suitable graphical user interface such as a combination of a generic web browser intelligent engine and command line interface CLI that processes information in the platform and efficiently presents the results to the user visually.

As used in this disclosure client is intended to encompass a personal computer touch screen terminal workstation network computer kiosk wireless data port smart phone personal data assistant PDA one or more processors within these or other devices or any other suitable processing device. For example each client may comprise a computer that includes an input device such as a keypad touch screen mouse or other device that can accept user information and an output device that conveys information associated with the operation of the server and hosted application or the client itself including digital data visual information the client application or the GUI . Both the input and output device may include fixed or removable storage media such as a magnetic storage media CD ROM or other suitable media to both receive input from and provide output to users of client through the display namely the GUI

While is described as containing or being associated with a plurality of elements not all elements illustrated within environment of may be utilized in each alternative implementation of the present disclosure. For example although depicts a server client environment implementing a hosted application at server that can be accessed by client computer in some implementations server executes a local application that features an application UI accessible to a user directly utilizing GUI . Further although depicts a server external to network servers may be included within the network as part of a cloud network solution for example. Additionally one or more of the elements described herein may be located external to environment while in other instances certain elements may be included within or as a portion of one or more of the other described elements as well as other elements not described in the illustrated implementation. Further certain elements illustrated in may be combined with other components as well as used for alternative or additional purposes in addition to those purposes described herein.

Depending on the user s need in a particular situation the request for a change in a business process may be routed from the ad hoc change web tool to different underlying runtime frameworks within the BPMS system . For example the user may only need to make a limited change to the business process such as repeating a previous state of a current process instance. The change with limited scope may be performed exclusively using existing interfaces of the BPMS system without altering the underlying process template. The ad hoc change web tool may determine that the change selected by the user is a change of limited scope and the request for the limited change may be routed via an application programming interface API to the process runtime environment to access a repository of process instances . The specific process instance to be altered may be retrieved from the process instances repository for changes implemented by the user. These change operations may be options inherent to certain business processes and performed through APIs available to other BPMS components. In some instances the BPMS runtime environment includes various components such as task management context management process management data mapping engines and other modules that already offer limited modification options for business processes. For example a task management module in the BPMS runtime environment allows assigning of tasks to different users a user management module can change resolution rules for a user role that is referenced from the process a process management module permits skipping or repeating of process steps and a data mapping engine provides alternative implementations of a data mapping function. The ad hoc change web tool may aggregate the various change options from the different components within the BPMS runtime environment into a single user friendly tool for selection by the user. Further the ad hoc change web tool can dynamically filter the change options and determine the appropriate change options for a particular situation based on the applicability of the change options in the current context. The determination of the appropriate change options may be based on for example any applicable implicit or explicit constraints or the role of the user performing the ad hoc change and the user s privileges.

Alternatively requests for more substantial changes to a business process may be routed to the extensibility framework and the process compiler as depicted in . If the user has requested that a process step associated with the business process be replaced with a different process step for example the ad hoc change web tool may access the extensibility framework to perform the change. In some implementations the extensibility framework may be a service provided by the underlying web application server via an enterprise service bus ESB apart from the BPMS system . The extensibility framework may allow for customizing composite applications that publish associated building blocks including the corresponding technical interfaces using extensible component models such as Service Component Architecture SCA or an OSGi framework for example. In certain implementations the extensibility framework may allow for rewiring of components or process fragments such as tasks data mappings activities subflows and other components such that in effect one activity or application extension within a process instance may be replaced with another activity that shares the same interface. In other words certain interfaces associated with process fragments may be particularly well defined and accordingly suitable for replacement via the extensibility framework . For example a user task that provides a different user interface or has different deadlines but may gather the same data may have the same technical interface and may accordingly be suitable to replace a different user task of the same technical interface. The process fragments may be generated and compiled at process compiler after it is registered with an SCA infrastructure such as extensibility framework as a replacing component. Based on user input the ad hoc tool may not only select from pre existing process fragment templates but also generate those templates from patterns by incorporating user input on the fly. For instance the tool may generate a user task by generating the associated UI from 1 a user provided business document structure i.e. a list of items that are to be displayed or edited in the present task and 2 a user provided list of potential task processors.

The user may also request substantial invasive changes to the business process through the ad hoc change web tool . Certain changes to the business process such as re ordering of certain steps or removing of entire process branches may require extensive modifications that are not possible using the methods described above. Examples of substantial changes may include adding control flow branches or changing activity interfaces which may require the migration of the original process model to a new process model. In such instances the user s changes are made through a migration framework . The migration framework may initially create an entirely new process model using the original business process definitions as a starting point but incorporating the substantial changes made by the user. Here the migration framework may utilize the repository of process models to retrieve information associated with the process model of the current process instance or the process compiler to generate the new process model. The current running process instance may be suspended and migrated to the new process model by transferring the entire instance state including the process container variables instance tokens and other elements of the current process model such as control flow progress indicators to the new model. The migration framework may initiate compiling of the altered process model fetching the running process instance status from the process runtime and moving it to the new process model.

The displayed process model may be supplemented with progress indicators and other process measures such as run time durations resource consumption to provide guidance in performing meaningfully targeted ad hoc changes. For instance some out of bound process measures such as an overdue deadline for certain process fragments e.g. tasks subflows control flow branches etc. may pro actively indicate the need to intervene with an ad hoc change at the corresponding process fragment. Complementing this aspect the web based tool of the present disclosure also provides for both implicit e.g. instance based and explicit e.g. model based constraints which apply to the range of offered ad hoc change options. For instance the process progress may implicitly inhibit performing changes to already expired e.g. upstream process fragments and the end user role may explicitly exclude certain change options where tasks owners may only be allowed to make changes to the tasks they are involved in whereas process owners can perform more intrusive changes like removing adding or reordering activities to the process.

Next a request is received to initiate an ad hoc change of a selected process instance at . The ad hoc change may be a modification of a component parameter condition or other element of a process instance that is implemented after design time of the process instance such as at runtime of the process instance. For example sudden changes in business requirements customer requests workload peaks resource availability legislative regulations escalation scenarios in which exceptional situations require responsive action or other conditions may require a user to modify a previously defined business process at runtime to adapt to the changing conditions. The user may select a particular process instance presented in the process visualization interface for modification using an appropriate mechanism such as ad hoc change web tool for example.

After receiving the request to initiate an ad hoc change of a selected process instance user interaction options for implementing the ad hoc change are provided through the process visualization interface at . The user interaction options may include change options of different types or levels of intrusion on the process instances that may be applied to the process instances. The ad hoc change tool however may provide the change options with a level of abstraction from the levels of intrusion on the process instances such that the user does not need to understand the underlying mechanics. For example change options of three types may be presented through the ad hoc change web tool 1 change options that utilize built in functionality to perform local changes with limited impact on the process run e.g. assigning a different task owner rolling back an activity setting back a token etc. 2 change options that use an extensibility framework to replace process fragments like activities subflows tasks data mappings user interfaces business partners at well defined interfaces and 3 change options that provide for a migration framework where a process instance state is migrated from the original process definition to an altered process definition which enables highly invasive structural changes. Other user interaction options presented to the user may include the option to derive the underlying technical differences of various ad hoc change options in a manner that dramatically improves the user s understanding of the impact of an ad hoc change. In other words the ad hoc change web tool may present a homogeneous process centric user experience to assist the user in making ad hoc changes to a business process that are specific to the user s need.

Finally the user s selection of the ad hoc change to apply to the process instance is received at and implemented at runtime of the process instance at . Depending on the type of the ad hoc change selection received from the user a particular runtime framework may be used for applying the ad hoc change selected by the user to the process instance as described above in connection with .

Pre existing change operations such as the operation illustrated in may be limited in the extent to which the change operations can change a process instance in accordance with a user s particular needs. In order to overcome the limitations to pre existing change operations ad hoc process changes may alternatively use an extensibility framework as provided by a generic application server such as the web application server illustrated in .

In some implementations ad hoc changes are implemented by dynamically resolving calls to process building blocks having a well defined interface using late binding mechanisms. Process building blocks that may have well defined interfaces include atomic activities user tasks subflows data mappings user interfaces and other building blocks. Since certain building blocks of processes may have similar interfaces an ad hoc change may replace such a building block with a dynamically generated new building block. An example of this type of extensibility procedure is described below in connection with .

In certain instances the subflow may simply wrap an existing previously deployed process. After the subflow model has been created its runtime representation may be generated by invoking a Compiler component which yields an executable subflow representation. In general BPMS runtime environments use execution oriented formats such as state charts Business Process Execution Language BPEL models script languages or Java classes at runtime instead of process models such as BPMN diagrams. The newly built subflow is then stored in a Runtime Repository and is subsequently deployed and activated. The deployment and activation of the subflow is performed by the Process Management component . During deployment of the subflow the Process Management component may initially suspend the affected process instance and forward or deploy the executable subflow model extension to the Kernel which needs to publish the building block at the Extensibility Framework which is later responsible for dynamically resolving calls to the subflow using late binding techniques in which a callee of a process step is only resolved at runtime when that process step is reached. The Extensibility Framework is accessed through a connectivity adapter which is an interface to an enterprise service bus ESB associated with the Extensibility Framework . The connectivity adapter allows extensibility options to be available for other content types of the BPMS application server such as Enterprise JavaBeans EJBs . Finally the process instance is resumed and may start invoking the replaced subflow.

Process extensibility as illustrated in for example may be a simple and straightforward way of achieving ad hoc process flexibility. It is limited however to existing building block boundaries and to situations in which building blocks are replaced with others having the same interface. Accordingly although process extensibility permits more extensive changes to a business process than the pre existing built in operations more invasive changes are out of reach of process extensibility. To achieve an even greater deal of flexibility a process instance may be migrated to an altered process model. In some implementations the ad hoc change operation transparently generates an entirely new process model using the existing process model and process definitions as a basis upon which changes are incorporated. Examples of ad hoc changes that may require generating a new process model for applying the ad hoc changes include adding activities to existing control flow branches adding control flow branches or process fragments that integrate into the process model in a non block structured manner or changing the technical interfaces of building blocks such as process steps like subflows user tasks etc. in an incompatible manner such that plain extensibility mechanisms are not applicable.

In the process migration framework an existing process instance state is transported to the newly generated process model which requires moving and possibly adjusting state variables to have the process instance cleanly resuming its run on top of the new process model. A number of compatibility rules may apply at this stage to avoid incompatible process changes and other undesirable effects such as process flow deadlocks. For instance an ad hoc change may be prevented from removing control flow branches that would lead to a new process model that contradicts the state of the process instance that is to be migrated to the new process model. illustrates an example flow sequence and the component interactions in the instance migration case. First a new process model is blueprinted i.e. adapted from the existing process model after an existing process model associated with the current process instance is retrieved from the Runtime Repository . The new process model may be built based on the process model and definitions of the current process instance and the user s requested changes are applied to the new process model. The new process model may be compiled using the compiler . The current process instance is then migrated by the Process Management component onto the newly established process model taking into account any applicable compatibility constraints. The Process Management component may initiate migration through Kernel . During migration a process instance currently under execution may be suspended to implement the migration changes at the Process Management component . Associated components of the existing process model may also be copied to the new process model by a migration service . Thus migrating a process instance may involve migrating and copying the Container component which may include the set of all modeled status variables and is the primary component of the BPMS stack holding process instance data to the new process model. Once complete the existing process instance based on the old process model is cancelled.

The preceding figures and accompanying description illustrate example processes and computer implementable techniques. But environment or its software or other components contemplates using implementing or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time including concurrently individually or in combination. In addition many of the steps in these processes may take place simultaneously and or in different orders than as shown. Moreover environment may use processes with additional steps fewer steps and or different steps so long as the methods remain appropriate.

In other words although this disclosure has been described in terms of certain embodiments and generally associated methods alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly the above description of example embodiments does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

