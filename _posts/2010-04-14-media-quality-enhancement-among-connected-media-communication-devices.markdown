---

title: Media quality enhancement among connected media communication devices
abstract: In one aspect, a method includes collecting, at a sending device, information including first information regarding an amount of encoded media data produced by a media encoder, and second information regarding an amount of encoded media data passed to, but not yet transmitted by, a transport layer network protocol stack; calculating, from the first information, an intermediate quantity of produced encoded media data, and from the first information and the second information, a rate of encoded media data transmission by the transport layer network protocol stack; and if the intermediate quantity compares favorably to a current media rate set for media data provided to the media encoder, increasing the current media rate by a rate adjustment amount, if the rate of encoded media data transmission compares unfavorably to the current media rate, decreasing the current media rate, else, maintaining the current media rate.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08312164&OS=08312164&RS=08312164
owner: Adobe Systems Incorporated
number: 08312164
owner_city: San Jose
owner_country: US
publication_date: 20100414
---
The Internet is widely used to distribute media content including video graphic audio and scripting data. Media content can be downloaded as a file or streamed to a client computer where a media player application can process and output the media content to a display device and if applicable one or more speakers. The media player application or an application including media player functionality in some examples can be a program written for a particular operating system OS on a computer platform or a plug in based software that runs inside another program such as a runtime environment on a computer platform.

Digital content can be shared directly between two devices without an intervening central relay server using a peer to peer P2P communication architecture where a participant provides a portion of resources e.g. processor memory network bandwidth to one or more additional participants. Peers generally create a sharing relationship with each peer being both a consumer and a supplier of resources e.g. digital content .

The rate at which media content is presented upon a user device can depend upon a number of factors including the bandwidth and speed of the network connection the processor speed of the receiving device the processor load on the receiving device and network congestion. If the processor is too slow or the processor has too many applications vying for processing time at once the frame rate of particular media content rendered upon the user device can slow to a frame rate which is too slow for the user to properly experience. For example the media content can appear to be stalled or choppy.

Video quality or audio quality can be manually adjusted by a user to improve media presentation during network congestion or processor overload. For example a user can reduce the video bit rate or video complexity e.g. pixel density through manual adjustment. Audio quality can be similarly adjusted by reducing the sampling rate or the quality level.

This specification describes technologies relating to programs that are obtained and performed in conjunction with media content generation.

In general one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of collecting at a sending device information including first information regarding an amount of encoded video data produced by a video encoder and second information regarding an amount of encoded video data passed to but not yet transmitted by a transport layer network protocol stack calculating from the first information an intermediate quantity of produced encoded video data and from the first information and the second information a rate of encoded video data transmission by the transport layer network protocol stack and when the intermediate quantity compares favorably to a current video rate set for video data provided to the video encoder increasing the current video rate by a rate adjustment amount when the rate of encoded video data transmission compares unfavorably to the current video rate decreasing the current video rate else maintaining the current video rate. Other embodiments of this aspect include corresponding systems apparatus and computer programs configured to perform the actions of the methods encoded on computer storage devices.

These and other embodiments can each optionally include one or more of the following features. The actions can further include when the current video rate is increased more than once raising the rate adjustment amount when the rate of encoded video data transmission compares unfavorably to the current video rate and the video rate was previously increased lowering the rate adjustment amount else maintaining the rate adjustment amount. Moreover decreasing the current video rate can include setting the current video rate to a value under the rate of encoded video data transmission where the rate adjustment amount is lowered after the current video rate is decreased.

Collecting can be performed periodically in accordance with a first time interval the calculating can be performed periodically in accordance with a second time interval that is at least five times longer than the first time interval the current video rate can be a current video bit rate and the intermediate quantity can be a moving average of the produced encoded video data. The transport layer network protocol stack can conform to a transport layer network protocol including a peer to peer connectivity feature the actions further including opening a peer to peer connection between the sending device and a first peer device the peer to peer connection allowing a real time video collaboration between the sending device and the first peer device adding one or more additional peer devices to the real time video collaboration each additional peer device communicating with the sending device through an additional peer to peer connection determining that a total number of peer devices exceeds a predefined number and reconfiguring based upon the determining each peer to peer connection to use a client server transfer mechanism.

The first information and the second information can be collected from a media player runtime environment through an application programming interface API the media player runtime environment providing a peer to peer connectivity feature through the transport layer network protocol stack which includes a data prioritization feature that allows prioritization of audio data over video data the transport layer network protocol stack having an associated audio data buffer and an associated video data buffer the audio data buffer being separate from the video data buffer and the produced encoded video data can include layered video.

Other innovative aspects of the subject matter described in this specification can be embodied in a computer storage medium encoded with a computer program including instructions that when executed by data processing apparatus cause the data processing apparatus to perform operations as described. In addition a system can include an interface device a network connection and a computer coupled with the interface device and the network connection and programmed with a runtime environment including a media encoder an audio data buffer and an video data buffer the audio data buffer being separate from the video data buffer and the runtime environment can be configured to enhance transmitted media quality based on input received in response to output provided regarding an amount of encoded video data produced by the media encoder and regarding an amount of encoded video data passed to the video data buffer but not yet transmitted. The interface device and the computer can be part of single consumer electronic device such as a mobile telephone a personal digital assistant PDA a mobile audio or video player etc. Alternatively the interface device and the computer can be divided among two or more distinct components which can be locally connected or remotely connected by a network.

Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. A peer to peer bandwidth enhancement scheme can be used to adjust media content quality or media transmission rate at a sender based upon the available bandwidth of a remote peer. By monitoring the drain rate of a transport layer network protocol stack the available bandwidth of the remote peer can be determined. By matching the media content transmission rate to the available bandwidth of the remote peer the remote peer enjoys lower latency and a better media content rendering experience than may be experienced using a default transmission rate. If a data prioritization scheme is used along with the bandwidth enhancement scheme audio data can be provided with little or no latency even in times of congestion.

The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

When the first peer computing device and the second peer computing device begin a video conferencing session for example the audio and video data e.g. captured by a webcam and microphone can be encoded by the media encoder to provide a P2P data connection between the two endpoints. The P2P protocol in some examples can be based upon the real time transport protocol RTP or user datagram protocol UDP protocol standard. In some implementations the P2P protocol is a version of the Real Time Media Flow Protocol RTMFP a protocol developed by Adobe Systems of San Jose Calif. By transmitting via a P2P connection the video conference session can enjoy higher bandwidth and lower latency than a typical client server connection may achieve. During transmission the traffic optimizer can periodically collect statistics at a first time interval regarding the creation and consumption of data. Encoded data can be buffered for transmission to the second peer computing device for example in a data stack . Based upon the rate at which the buffered encoded data is consumed by the second peer computing device for example the traffic optimizer can provide the media player application or the media encoder with feedback to have the transmission rate of the media data adjusted accordingly.

Statistical analysis on the provision and consumption of encoded data in some implementations can include calculating a moving average over a second time interval which can be used to determine a quantity of media data e.g. bytes to send. This quantity can be determined in part upon a calculated drain rate of the data stack e.g. a comparison of the amount of data encoded versus an amount of data buffered . For example if encoded data are not gathering in the data stack the traffic optimizer can request that the media player application increase the video resolution VBR or audio output quality. If instead a considerable quantity of data is collecting in the data stack the traffic optimizer can request that the media player application decrease the VBR or video resolution or reduce audio output quality. To modify audio transmission bandwidth in some examples using the Speex audio compression codec the Speex audio rate can be changed by specifying a quality parameter or using the Nellymoser Asao codec the Nellymoser audio rate can be changed by specifying a different codec sampling frequency.

The amount by which the data transmission rate is adjusted in some implementations can depend in part upon whether or not the data transmission rate was previously adjusted. For example if the data transmission rate was previously upwardly adjusted and the traffic optimizer determines that additional bandwidth can be allocated towards the video conferencing session the rate adjustment amount can be raised. For example raising the rate adjustment can allow the transmission rate to more quickly converge on an enhanced or optimized rate. On the other hand if the data transmission rate was previously upwardly adjusted and the traffic optimizer determines that the current transmission rate is higher than the second peer computing device can consume the transmission rate can be decreased. For example based upon the current average consumption rate of the second peer computing device the rate adjustment amount can be set to achieve a transmission rate corresponding to approximately a percentage of the current data stack drain rate e.g. eighty percent ninety percent. etc. . The transmission rate in another example can be reduced to the previous good rate e.g. by the same rate adjustment amount as previously used to increase . In some implementations the rate adjustment amount for raising the transmission rate can differ from the rate adjustment amount for lowering the transmission rate. For example the transmission rate may be lowered more aggressively than it is raised.

Although the system includes two peer computing devices in some implementations a P2P connection can be created between the first peer computing device and two or more additional peer computing devices. In some implementations each additional peer computing device can receive media data at a data transmission rate enhanced to provide the lowest bandwidth peer with an adequate media consumption experience. The total bandwidth availability per peer for example can depend upon the uplink bandwidth allocated between the first peer computing device and the additional peer computing device since the uplink bandwidth is often significantly lower than the downlink bandwidth. Each additional peer computing device in some implementations can be allocated a separate network socket and separate transmission queues in the data stack . In this example the data transmission rate can be separately enhanced for each additional peer computing device.

The media player endpoint includes a runtime environment for encoding and transmitting streaming media data and an optimization framework for collecting and analyzing transmission rate statistics and adjusting the transmission rate of the streaming media data accordingly. The runtime environment for example can provide the optimization framework with both encoding statistics related to the quantity of data encoded by a media encoder and buffering statistics related to the quantity of data buffered by a protocol stack . The optimization framework can collect and analyze the statistics and and provide one or more adjusted camera properties to a camera application executing on the runtime environment .

When the media player endpoint enters into a P2P communication session with a first remote peer the media player endpoint can receive a bandwidth allocation declaration e.g. from the server or another network server . The bandwidth allocation can be used as a basis for establishing an initial media transmission rate or the transmission can be initialized to a default rate. The initial media transmission rate can be provided to the optimization framework where it can be stored in a statistics data store as a starting rate . A current rate can similarly be initialized to the value of the starting rate . A rate adjustment amount can be initialized to an initial rate adjustment amount for example as a percentage of the starting rate or a default value such as 200 kilobits per second kbps or 500 kbps.

The camera application can begin to generate video frames at a video quality and or frame rate determined based upon the initial media transmission rate. The individual media frames generated by the camera application in some implementations can vary in size from frame to frame depending in part upon whether a particular frame is a key frame. As such the media data provided to the media encoder can exhibit burstiness rather than a smooth data rate generated by similar sized frames.

The media encoder can encode the media data as P2P transmission packets. The total quantity of data encoded e.g. bits bytes words etc. as well as the total number of data packets encoded can be collected by the media encoder as encoding statistics . In some implementations a runtime environment class specifies various Quality of Service QOS statistics related to a streaming buffer for audio video and data. The P2P protocol transport layer in some implementations includes a QOS reporting mechanism including statistics related to the quantity of data encoded and the quantity of data pending transmission in a transmit buffer.

The optimization framework can sample the encoding statistics on a set statistics collection schedule describing a first time interval. The statistics collection schedule for example can be set to a number of milliseconds e.g. 50 ms 200 ms 400 ms etc. . In some implementations the statistics collection schedule is based upon the video frame rate. For example the statistics collection schedule can be set to an integer multiple of the video frame rate as generated by the camera application . The statistics can be stored in the statistics data store . In some implementations the encoding statistics are sampled through an application programming interface API . If the statistics are provided through an API library for example network condition events can be exposed to the optimization framework as well so that the optimization framework can provide adjusted camera properties based in part upon the current network state.

The encoded media data can be buffered for transmission in the protocol stack in an audio buffer or a video buffer as appropriate. The runtime environment can provide the optimization framework with buffering statistics regarding the amount of data accumulated in the video data buffer and optionally the audio data buffer for example on the statistics collection schedule .

In some implementations a data prioritization scheme can be applied to the buffered data for example to prioritize audio data in the audio buffer so that adequate audio quality can be provided to the remote peer s during times of network congestion or substantial video packet buffering. For example during traffic congestion video latency or video loss can occur while audio loss can be kept to a minimum.

The data collected in the protocol stack can be provided to the remote peer s on a consumption basis. For example the remote peer s can set the transmission rate of the data from the protocol stack based upon ability to consume the data provided. If the remote peer s have difficulty consuming data at the starting rate data can accumulate in the protocol stack .

To avoid data accumulation the optimization framework can set a statistics analysis schedule on a second time interval at which the optimization framework calculates a peer consumption rate or protocol stack drain rate based upon the amount of data accumulated in the protocol stack compared to the amount of data encoded by the media encoder . The optimization framework can perceive an estimated available bandwidth at the remote peer based upon the drain rate for example by subtracting the buffered data from the total data generated. The consumption rate can be collected within a rolling average . The rolling average for example can include the previous several seconds of consumption rate calculations. The statistics analysis schedule for example can be set to an integer multiple of the statistics collection schedule e.g. three times five times or ten times etc. .

In some implementations the optimization framework collects encoding statistics and buffering statistics at a statistics collection schedule of every 200 milliseconds and calculates the consumption rate at a statistics analysis schedule of approximately once every second e.g. every fifth collection period . The rolling average can collect for example the ten most recent consumption rate calculations.

Upon each statistics analysis schedule period the optimization framework can also analyze the consumption rates collected within the rolling average to determine whether the remote peer is keeping up with the current rate and if so if the transmission rate may be adjusted by the rate adjustment amount . If the remote peer instead appears to be falling behind the current rate the optimization framework can determine whether to decrease the transmission rate by the rate adjustment amount to alleviate accumulation of encoded data within the protocol stack .

If the optimization framework determines that the remote peer may benefit from a modification of transmission rate the optimization framework provides adjusted camera properties to the runtime environment . The adjusted camera properties for example can include an adjusted VBR for video data generation video quality modifications audio quality modifications or other media capture adjustments which when enabled by the camera application can change the quantity of data provided to the media encoder for transmission. The optimization framework can additionally store the new transmission rate in the current rate . In some implementations the optimization framework also tracks the number of times the transmission rate has been adjusted and in which directions e.g. raised or lowered . The optimization framework in some implementations may instead derive the upward or downward modification to the rate adjustment amount based upon the difference between the starting rate and the current rate .

In some implementations rather than providing adjusted camera properties to the camera application the optimization framework can provide an adjusted data encoding rate to the media encoder . If for example the runtime environment has no input into the functionality of the camera application the media encoder can instead throttle the amount of data provided to the protocol stack by discarding a portion of the video frames generated by the camera application e.g. dropping every Nth frame to match the buffer drain rate .

If another remote peer is later added to the P2P connection the allocated bandwidth can be shared between the two remote peers . In this manner a smaller total bandwidth is available to each remote peer. In some implementations the optimization framework determines a new starting rate for the shared P2P connection .

In some implementations separate protocol stacks can be allocated to each of the remote peers while both protocol stacks are fed by the same media encoder . If the media encoder encodes a layered bit stream the media encoder can provide a different quality level to each remote peer depending upon the consumption capabilities of each of the remote peers . For example if the first remote peer is connected to the media player endpoint by a local area network LAN connection while the second remote peer is connected to the media player endpoint by a home Integrated Services Digital Network ISDN connection the first remote peer can be provided with the enhanced quality video data and wide band audio and the second remote peer can be provided with basic quality video data and narrowband audio both data provided at the same frame rate. If the media encoder does not encode a layered bit stream the optimization framework can work with the runtime environment to determine a lowest common denominator transmission rate which is adequate for both the first and second remote peers .

In some implementations separate media encoders can be allocated in addition to separate protocol stacks . In this manner each of the media encoders and protocol stacks can behave in a similar manner as described above in the single remote peer scenario while the optimization framework can track separate statistics for each of the remote peers .

At some point while remote peers are added to the P2P connection the allocated bandwidth can become too fragmented to provide adequate quality to the remote peers . In some implementations the runtime environment can automatically tear down each P2P interface between each remote peer and the media player endpoint and switch the connections to the central relay server . The central relay server can continue to handle the traffic as long as the threshold number of remote peers is in communication with the media player endpoint . If one or more of the remote peers drop the connection with the media player endpoint in some implementations the media player endpoint can revert back to the P2P connection .

The process begins with collecting first information regarding an amount of encoded video data produced by a video encoder . The amount of encoded video data for example can be reported as a number of bytes received from a camera application by a media encoder and encoded into packets or as a number of encoded packets received by a network protocol stack from a media encoder.

Second information regarding an amount of encoded video data passed to but not yet transmitted by a transport layer network protocol stack is collected . For example the encoded video data can accumulate in a video data buffer of the protocol stack. The second information in some implementations can be reported as a number of bytes buffered for transmission to a peer computing device. In some implementations a number of packets buffered or a percentage of buffer space utilized can additionally or alternatively be collected.

The first and second information for example can be collected periodically on a first time interval the information stored in a collection of data points which can be analyzed on a second time interval. The first information and the second information in some implementations can be derived from statistics collected by the particular protocol standard. The statistics in some implementations are standard statistics collected by a runtime in which the media encoder executes. The first information and the second information for example can be retrieved through a runtime API.

An intermediate quantity of produced encoded video data is calculated . A rolling average for example of the quantity of produced encoded video data can be used to determine an average video data production rate over the second time interval.

A rate of encoded video data transmission by the transport layer network protocol stack is calculated . By comparing the average production rate of encoded video data to the average amount of encoded video data collected in the protocol stack an average transmission rate e.g. the encoded video data that has been shared with the remote peer can be derived. The average transmission rate for example suggests a consumption ability of the remote peer.

If the intermediate quantity compares favorably to the current video rate the process increases the current video rate . For example if little or no encoded video data has accumulated in the protocol stack the remote peer may be able to accept a higher data transmission rate. For example if less than ten percent of encoded video data has been accumulating in the protocol stack the drain rate may be considered to be favorable for a transmission rate increase. For example based upon a five hundred kbps encoding rate a maximum of fifty kilobits may be accumulated at a given time.

In some implementations the calculation can be based upon a percentage of the frame rate. For example a favorable quantity can correlate to no more than one hundred milliseconds of data accumulating based upon a thirty frames per second fps frame rate. Taking this example from the view of total number of frames a maximum of three frames may be buffered at any one time based upon a thirty fps frame rate.

In addition before increasing the current video rate the process can determine whether the video transmission rate was previously raised . If the video transmission rate was previously raised the transmission rate adjustment amount is increased . For example if the remote peer has handled the previous transmission rate increase the remote peer may be capable of handling substantially more data. The increment at which the transmission rate was increased can be adjusted to better accommodate the end user experience at the remote peer. In some examples the transmission rate adjustment amount can be incremented by a scalar quantity e.g. 100 kbps or a percentage of the current transmission rate. Whether or not the rate adjustment amount is modified the current video rate is increased . In some implementations a media player application can be instructed to increase video output quality or to increase VBR. If the media encoder encodes layered video data in some implementations the media encoder can be instructed to provide a higher quality layer of encoding to the remote peer. After making a modification to the video data transmission rate the process returns to collecting first information regarding the amount of encoded video data .

Returning to stage if the intermediate quantity did not compare favorably to the current video rate the process determines whether the intermediate quantity compares unfavorably to the current video rate . For example the amount of encoded data buffered in the protocol stack can be compared to a threshold number of bytes or packets. If the comparison is within an acceptable range the process returns to collecting first information regarding the amount of encoded video data . For example the process can determine that the current transmission rate is in good balance with the consumption abilities of the remote peer. An average of between ten and twenty percent accumulation within the protocol stack for example may be considered to be indicative of the transmission rate being in good balance with the available bandwidth.

In some implementations the calculation can be based upon a percentage of the frame rate. For example a favorable quantity can correlate to between one hundred and two hundred milliseconds of data accumulating based upon a thirty fps frame rate. Taking this example from the view of total number of frames a maximum of six frames may be buffered at any one time based upon a thirty fps frame rate. Additionally in some examples the process can monitor the average number of buffered frames e.g. no more than three or four on average .

If instead an unfavorable comparison has been found the current video transmission rate is decreased . In some implementations a media player application can be instructed to decrease video output quality or to decrease VBR. If the media encoder encodes layered video data in some implementations the media encoder can be instructed to provide a lower quality layer of encoding to the remote peer. For example if greater than twenty percent of encoded video data has been accumulating in the protocol stack a transmission rate decrease may be determined to be beneficial.

In some implementations if the comparison is found to be highly unfavorable e.g. there is a network overrun the transmission rate can be temporarily set to much lower than the estimated protocol stack drain rate. For example to allow the accumulated video data to drain down the transmission rate can be reassigned to seventy five percent of the calculated protocol stack drain rate. During network overrun the transmission rate in some implementations can be reset to a transmission rate which had been previously determined to be beneficial e.g. the transmission rate prior to a rate increase rather than being adjusted by the rate adjustment amount.

In addition after decreasing the current video rate the process can determine whether the video transmission rate was previously increased . For example the previously applied rate adjustment amount may have been too aggressive overshooting the consumption capacity of the remote peer. If so the rate adjustment amount is lowered . In some implementations the rate adjustment amount is lowered by a percentage amount by which it was previously raised. The rate adjustment amount in some implementations can be reset to an initial rate adjustment amount or decreased by the same amount by which it was previously raised. After making the adjustment in transmission rate and optionally the rate adjustment amount the process returns to collecting first information regarding the amount of encoded video data .

In some implementations the rate adjustment amount can be decreased prior to lowering the transmission rate. For example to fine tune the adjustment of the current video rate to best match the consumption capacity of the remote peer the current video rate can be decreased by a smaller amount corresponding to a decreased rate adjustment amount.

The process begins by opening a peer to peer connection with a first peer computing device . The connection for example can include a point to point streaming media connection such as a video conferencing application.

As long as the number of peers does not exceed a maximum threshold additional peers are added to the peer to peer connection . The maximum threshold in some implementations can be determined by the bandwidth available for the peer to peer connection. For example with each additional peer the P2P bandwidth allocation is split between participants. When the P2P bandwidth allocation becomes too small to provide an adequate end user experience for each participant the threshold has been reached.

In some implementations the maximum threshold can be a default number of participants. For example the bandwidth provided to each participant may be identical based upon a lowest common denominator consumption rate amongst the participants. The maximum threshold in some implementations can be based upon the number of participants receiving each level of service if different layered bit stream quality levels are provided based for example upon each participant s processing capabilities or network connection type. For example a given P2P connection may be capable of servicing two remote peer computing devices at an enhanced quality rate or four remote peer computing devices at a basic quality rate. As another example the peer to peer communications can be switched to the client server architecture when more than three clients are participating.

When the maximum threshold of peers has been reached each peer to peer connection is reconfigured as a client server transfer . The P2P transfer mechanism between the endpoint on which the process is executing and each remote participant can be shut down and a client server transfer mechanism constructed in its place. In some implementations rather than accepting the additional peer and reconfiguring the connections the process can deny the addition of the new peer. For example certain system configurations such as certain cloud computing configurations may not provide an opportunity for server relayed media. By blocking the addition of more than a threshold number of peers the system can continue to provide peer to peer media sharing.

The media player program s can be one or more applications for inputting processing and or outputting media content e.g. audio video graphical and or textual data . The media player program s can input media information from a camera device and optionally a microphone device. The media player program s can output media information to one or more output devices such as a display device and optionally one or more speakers. An application refers to a computer program that the user perceives as a distinct computer tool used for a defined purpose. An application can be built entirely into an operating system or other operating environment or it can have different components in different locations e.g. a remote server . The media player program s can include or interface with other software. The media player program s can include a stand alone media player program a media player program that relies on a runtime environment to operate e.g. a J virtual machine or an Adobe AIR runtime environment or multiple different media player programs which can be stand alone browser based or runtime environment based in some examples.

Interface software can also be included that operates over a network to interface with other processor s such as in a computer used by a remote peer communicating with the data processing apparatus in a video conferencing session. For example the media encoder can include software methods for transmitting media data to another computer accessible over a network using a peer to peer data connection to reach a remote peer computing device.

The traffic optimizer can interface between the media encoder and the media player programs or otherwise work in tandem with the media encoder and optionally the media player program s to enhance media quality at a peer computing device during a streaming media session.

The hardware level of the data processing apparatus includes one or more processors a memory and at least one computer readable medium e.g. random access memory storage device etc. . The hardware level can also include one or more input output devices including one or more user interface devices.

Each of the components and are interconnected using a system bus . The processor s can process instructions for execution within the system . In some implementations one or more single threaded processors can be included within the processor s . In other implementations one or more multi threaded processors can be included within the processor s . In some implementations the processor s can process instructions stored in the memory or on the storage device to display graphical information on the display device .

The memory can be a computer readable medium used to store information within the system and can include a volatile memory unit a non volatile memory unit or both. The storage device can provide mass storage for the system . The storage device can include a floppy disk device a hard disk device an optical disk device or a tape device.

The input output devices provide input output operations for the system . The input output devices can include a keyboard mouse stylus or pointing device a display unit for displaying graphical user interfaces such as the display device a camera such as the camera device a modem or other networking hardware firmware or any combination thereof to name a few examples.

The subject matter described in this specification can also be used in conjunction with other input output devices such as a printer or scanner. An input output device can be used to connect to a network and can furthermore connect to one or more processors via the network e.g. the Internet .

Therefore a user of the media player program s media encoder or traffic optimizer does not need to be local and may be connecting in a wired or wireless fashion using an internet or intranet connection on a personal computer personal digital assistant PDA smartphone e.g. a cellular phone including an operating system and advanced computing capabilities or using other suitable hardware and software at a remote location. For example a user can access a web interface via a remote processor in order to engage in a video conferencing session. In any event data can be transmitted over the network to from the data processing apparatus . Note that the data processing apparatus can itself be considered a user interface device e.g. when the media player program s or the traffic optimizer is delivered by a remote server as a web service .

The system can be used to generate and provide frame based media content to a remote peer over a P2P data communication transmission while dynamically adjusting the transmission rate based upon a perceived consumption capacity of the remote peer computing device. For example during generation of media data by the media player program s first information regarding an amount of encoded video data produced by the media player program s and second information regarding an amount of encoded video data passed to a transport layer network protocol stack by the media encoder can be collected by the traffic optimizer and temporarily stored within the memory on a statistics collection schedule based upon for example a system clock value maintained by the system e.g. processor clock output . The media content can be transmitted to a peer computing device connected to the data processing apparatus via a network connection. Based upon analysis of the collected statistics the traffic optimizer can adjust the transmission rate of the media content to better meet the consumption capability of the peer computing device or to alleviate network congestion.

Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on a computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be or be included in a computer readable storage device a computer readable storage substrate a random or serial access memory array or device or a combination of one or more of them. Moreover while a computer storage medium is not a propagated signal a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be or be included in one or more separate physical components or media e.g. multiple CDs disks or other storage devices .

The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer readable storage devices or received from other sources. The term data processing apparatus encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer a system on a chip or multiple ones or combinations of the foregoing The apparatus can include special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit . The apparatus can also include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system a cross platform runtime environment a virtual machine or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures such as web services distributed computing and grid computing infrastructures.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine object or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few. Devices suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN an inter network e.g. the Internet and peer to peer networks e.g. ad hoc peer to peer networks .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In some embodiments a server transmits data e.g. an HTML page to a client device e.g. for purposes of displaying data to and receiving user input from a user interacting with the client device . Data generated at the client device e.g. a result of the user interaction can be received from the client device at the server.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of the invention or of what may be claimed but rather as descriptions of features specific to particular embodiments of the invention. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Thus particular embodiments of the invention have been described. Other embodiments are within the scope of the following claims. In some cases the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous.

