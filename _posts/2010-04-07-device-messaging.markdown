---

title: Device messaging
abstract: An apparatus includes a messaging client and a server. The messaging client is configured to receive, utilizing a first protocol, a first communication, extract a request from the first communication, and send, utilizing a second protocol, the request to the server. The server is configured to receive the request, return, utilizing the second protocol, a response to the messaging client; and forward a job instruction included in the request, The messaging client is also configured to send, utilizing the first protocol, a second communication that includes the response to a source of the first communication.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09019532&OS=09019532&RS=09019532
owner: Hewlett-Packard Development Company
number: 09019532
owner_city: Houston
owner_country: US
publication_date: 20100407
---
Jobs can be delivered to devices such as printers via a data network. In particular a user delivers a document to a network service. The network service formats the document generating a job that is to be delivered to a particular network enabled device. Firewalls and other security measures prevent a network service from initiating the delivery of a job. However since the device has no inherent knowledge of when a job is available the device does not know how or when to request a job so the device first inquires as to whether a job is ready.

The device may use polling or hanging get techniques to learn if a job is ready to be delivered. When polling the device periodically sends a request to the network device to learn if a job is available and the server responds. That response either indicates no job is available or if available the job is returned in the response. With hanging get the device sends a request to the network service. The service holds on to the request keeping the session open and responds only when a job is available. Or if too much time elapses the session times out forcing the device to send another hanging get request.

The polling approach consumes network bandwidth and network service resources when requests are made and no job is available. The bandwidth consumption becomes problematic when polling is implemented on a large scale that is when multiple device are polling the network simultaneously. Furthermore polling results in a job delivery lag. In other words a job is not delivered until the device sends its next scheduled polling request. The hanging get approach consumes resources of the network service especially when multiple devices are competing for those resources. In particular the network service maintains a session or thread for each hanging get request.

Introduction Various embodiments described below were developed in an effort to notify a device that job is available at a network service. In particular the embodiments were developed to overcome disadvantages of techniques such as polling and hanging get. Overcoming such disadvantages allow a network service to deliver jobs to devices on a larger scale than otherwise possible.

A network service refers to a server or collection of servers that are configured to communicate with a collection of devices to fulfill intended purposes. Such purposes include selectively communicating messages and jobs to the devices. The term job is used to refer to data that can be processed by a device to produce a desired result. A job may cause the device to identify and communicate state information. Such information can include the device s physical location its current operational status and even usage statistics. Where the device is a printer a job may cause the device to produce printed output.

A job instruction as used herein refers to an instruction designed to cause a device to process a job. The job instruction may include the job itself or a reference such as an URL for retrieving the job. A job instruction can include or provide access to parameter settings that affect how the device processes a job. Parameter settings control options such as whether or not certain features are used when processing a job. Where the device is a printer such features may include color printing duplex printing stapling multiple copies collating and the like. When not included with job instruction itself the parameter settings may instead be retrieved using a reference included in the job instruction. This may be the same reference used to retrieve the job.

The following description is broken into sections. The first labeled Environment describes an exemplary environment in which various embodiments may be implemented. The second section labeled Components describes examples of various physical and logical components for implementing various embodiments. The third section labeled as Operation describes steps taken to implement various embodiments.

Environment depicts an exemplary network in which various embodiments may be implemented. Network is shown to include devices job service messaging service and clients and . Devices represent generally any devices capable of processing jobs received from job service . In the example of devices are shown as printers configured to produce printed output from print jobs. Job service represents a network service configured to work with messaging service to deliver jobs to devices . Messaging service represents a network service configured to communicate messages to and receive messages from devices for the purpose of enabling job delivery by job service .

Clients and each represent a computing device configured to interact with and direct job service to cause a job to be delivered to a selected device . In an implementation discussed in more detail below devices are printers and client devices and are configured to instruct job service to cause print jobs to be delivered. While network is shown to include three printers two clients and and two services and network may include any number of such components. Furthermore while services and are depicted as being distinct services and may instead be implemented in a more integrated fashion. For example job service and messaging service may represent a common server or collection of servers configured to implement the specified functions.

Components are interconnected via link . Link represents generally one or more of a cable wireless fiber optic or remote connections via a telecommunication link an infrared link a radio frequency link or any other connectors or systems that provide electronic communication. Link may include at least in part an intranet the Internet or a combination of both. Link may also include intermediate proxies routers switches load balancers and the like. The paths followed by link between components as depicted in represent the logical communication paths between these devices not necessarily the physical paths between the devices.

Components depicts various physical and logical components for implementing various exemplary embodiments. In device is shown to include interface communication engine and job engine . Interface represents generally any combination of hardware and programming configured to receive communications from and pass communications to via link . In particular interface may include one or more physical ports such as a wired or wireless network port via which communications may be sent and received on more than one data channel. As discussed below one such channel may be used for communications of a first protocol such as XMPP Extensible Messaging and Presence Protocol and another data channel may be used for communications of a second protocol such as HTTP Hypertext Transport Protocol .

Communication engine represents generally any combination of hardware and programming configured to process communications received via interface and to generate communications to be sent via interface . As addressed in more detail below communication engine is responsible for processing and generating communications of different types received and sent on different data channels using different protocols. In particular through those communications communication engine is operable to retrieve and pass a job to job engine Job engine represents generally any combination of hardware and programming configured to process a job received from communication engine to achieve an intended result. For example where device is a printer and the job is a print job job engine is responsible for processing the print job to produce printed output. In this example job engine would include components to deposit imaging material such as ink or toner onto a media sheet.

In communication engine is shown to include messaging client server and job client . Messaging client represents generally any combination of hardware and programming configured to communicate with messaging service using a first protocol In particular messaging client receives utilizing the first protocol a first communication from messaging service extracts a request from the communication and sends utilizing a second protocol the request to server . The request includes a job instruction to be processed by server . As noted above that first protocol may be XMPP while the second protocol is HTTP. Messaging client is configured to receive the first communication without having first requested it Messaging client is also configured to send utilizing the first protocol a second communication to messaging service the source of the first communication. That second communication includes a response received from server and is a response to the request extracted from the first communication 

Server represents generally any combination of hardware and programming configured to receive the request from messaging client process the request and return a response to messaging client using the second protocol. In processing the request server forwards the job instruction included in the request to job client . To generate the response server may communicate with job engine or job client to obtain information related to the state of job engine . Where device is a printer such state information can include consumable levels and usage successful receipt of a job instruction successful completion of a print and any other information relative to the state of job engine . Server can then include the state information in the response.

Job client represents generally any combination of hardware and programming configured to process a job instruction received from server . A job instruction for example may be or include a reference such as an URL Uniform Resource Locator for use in retrieving a job from job service . In such a case job client is responsible for using the reference to send a communication utilizing via interface utilizing the second protocol HTTP in the above example. That communication includes a request to retrieve a job identified by the reference from job service . In response to that request job client receives the job and passes it to job engine for processing. Where the job is a print job job engine produces printed output. The job instruction may also include parameter settings. Here job client passes those setting to job engine for use in processing the job.

Messaging client communicates with messaging service via the first protocol with communications passing over a first data cannel. Job client communicates with job service via a second protocol with communications passing over a second different data channel. The first and second protocols are different in that an external communication a communication form messaging service can be sent to messaging client without messaging client having first requested that communication A protocol such as XMPP can serve as the first protocol. On the other hand an external communication sent from job service to job client is first requested by job client . Thus HTTP can serve as the second protocol.

In a given implementation a job may be included in a job instruction. In this case job client may not communicate with job service directly but instead extract the job from the job instruction and forwarding the job on to job engine . Where for example device is a printer the extracted job can be a print job processed to produce printed output.

Job service is shown to include client interface formatter jobs spooler message interface and device interface . Client interface represents generally any combination of hardware and programming configured to receive data from clients and . In general this data is related to a job that is to be delivered to device . Where device is a printer the data includes a document. Formatter represents generally any combination of hardware and programming configured to process the data received from clients and to generate jobs . Where device is a printer formatter formats the data to create print jobs. Such may include formatting into a format compatible for printing by device or digital archiving for later access and printing Exemplary formats include Post Script PDL Page Description Language and PDF Portable Document Format .

Spooler represents generally any combination of hardware and programming configured to act as a queue for jobs and to release jobs when requested by device . Message interface represents generally any combination of hardware and programming configured to notify messaging service when a job is ready to be delivered. That notification includes a reference for requesting the job and it also identifies device . In particular the notification can take the form of a request an HTTP request to be issued to server . Message interface is also responsible for receiving responses to such requests from messaging service . Device interface represents generally any combination of hardware and programming configured to receive requests from job client . The request includes a reference such as an URL. Device interface then works with spooler to return a job identified by the reference.

Messaging service is shown to include job interface and messaging server . Job interface represents generally any combination of hardware and programming configured to receive requests from and return responses to message interface . Messaging server any combination of hardware and programming configured to send communications to and receive communications from messaging client . As noted those communications are of a first protocol that allows messaging server to send a communication to messaging client without having first received a request for the communication.

Communications sent to messaging client include requests received from job service . As noted such requests can include a job instruction that in turn can include a reference for retrieving a job held by spooler . In particular messaging server wraps the request in a communication and sends that communication to device where it is received by messaging client . Such may for example be accomplished by wrapping the request in an XMPP message. Messaging server is also responsible for receiving communications back from messaging client A received communications may for example be a response wrapped in an XMPP message. That response would be a response to a request included in an XMPP message previously delivered to device .

Client is shown to include application job service driver and network interface . Application and job service driver operate in conjunction to create and deliver job data to job service for use by job service to create a job to be delivered to device . Client is shown to include browser and job data . Here browser with or without the aid of an extension functions to upload job data to job service . Where device is a printer such job data may include a document to be formatted by job service into a print job and then delivered to device to be printed.

In foregoing discussion various components were described as combinations of hardware and programming. Such components may be implemented in a number of fashions. In one example the programming may be processor executable instructions stored on tangible memory media and the hardware may include a processor for executing those instructions. Thus certain elements operating on the same device may share a common processor and common memory media.

Operation are exemplary flow diagrams of steps taken to implement various embodiments. In discussing reference may be made to the diagrams of to provide contextual examples. Implementation however is not limited to those examples. and depict a workflow from the perspective of a device such as device . depicts steps taken from the perspective of network service such as messaging service . depicts a workflow from a system wide perspective.

Starting with a communication is received utilizing a first protocol step . That communication is received at the device without the device having first requested the communication. A request is encoded in the communication. For example the communication may be an XMPP message wrapping the request. The request is extracted from the communication step . Referring to the communication of step is received at device by messaging client . Messaging client is also responsible for extracting the request in step .

Following step the process can if appropriate split into two threads. The first thread includes steps and while the second thread includes steps and . In the first thread the request extracted in step is processed to generate a response step . Utilizing the first protocol that response is returned to a source of the communication received in step . Referring to server is responsible for processing the request and generating the response in step while messaging client is responsible for sending the response in step .

In a further example the request extracted in step can include a request for state information. Thus step would include generating a response that includes the requested state information Referring to in generating the response server communicates with job engine to obtain the state information. Where device is a printer such state information may include consumable levels and usage and the status of a particular print job or jobs being processed by job engine .

Moving to the second thread a reference if present is acquired from the request extracted in step step . As noted the reference may be an URL identifying a network location from which a job may be retrieved. With the reference a job is requested utilizing a second protocol step . The second protocol is different than the first protocol utilized in steps and . As noted above the second protocol may be HTTP. Referring to server is responsible for acquiring the reference in step while job client is responsible for using the reference to request the job in step .

A response to the request is generated step . From the second node the response is returned to the first node utilizing the second protocol step . From the first node a second communication is sent to a source of the first communication utilizing the first protocol step . Referring to server functions as the second node and is responsible for steps and . Messaging client serves as the first node and is responsible for step . In particular messaging client wraps the response in the second communication which as noted may be an XMPP message.

The request sent to the second node in step may include a request for state information. Thus step would include generating a response that includes the requested state information. Referring to in generating the response server communicates with job engine to obtain the state information. Where device is a printer such state information may include consumable levels and usage and the status of a particular print job or jobs being processed by job engine .

The request sent to the second node in step may include a job instruction. As noted a job instruction can include one or both of a reference and parameter settings for guiding device operation. Moving to the job instruction is forwarded to a third node step From the third node a third communication is sent utilizing a reference from the job instruction and the second protocol step . Referring to job client functions as the third node and uses the reference to request the job. In the example the reference may be an URL via which job client can retrieve a job from job service using an HTTP request. In response to the third communication a job is received step . The received job is a job identified by the reference. The job is caused to be processed step . Referring to job client is responsible for steps and . For example where device is a printer job client receives the print job from job service and passes the print job to job engine causing job engine to process the print job. As discussed above the job may be included as part of the job instruction. In such a case the job is extracted following step and then caused to be processed in step skipping steps and .

In addition to the reference the job instruction forwarded in step may include parameter settings. Were for example device is a printer such parameter settings may be printer settings that control options such as whether or not certain features are used. Such features may include color printing duplex printing stapling multiple copies collating and the like. Still referring to job client may be responsible for passing those parameter settings to job engine so that the job caused to be processed in step is processed using those parameter settings.

A second communication is received from the device via the first data channel step . A response is extracted from the second communication step . The response is communicated to a source of the request received in step step . Referring to messaging service receives the second communication and extracts the response in steps and . Messaging service then returns the response to job service .

Referring to where device is a printer the printer s internal server is the intended recipient of the request wrapped in the first communication. The request can include a job instruction that in turn includes one or both of a reference for retrieving a print job and print parameter settings for device . The device can use the reference to retrieve a job from print service using the reference and adjust parameters using the supplied settings. The request may also include a request for state information. The device can obtain the requested state information and generate an appropriate response to be communicated in step . Such state information can include printer consumable levels and usage as well as the status of one or more print jobs.

Communications on the first data channel are sent and received utilizing a first protocol while communications on the second data channel are sent and received using a second protocol. The first protocol as noted above may be XMPP while the second protocol may be HTTP. Referring to messaging service uses that first data channel to in effect notify device that a job is ready to be retrieved from job service . Device then utilizes the second data channel to retrieve the job from job service . Beneficially messaging service can send the first communication without waiting for a request from device .

In an exemplary embodiment messaging client implements XMPP core stack RFC 3920 3921 and IBS In Band Binary protocol XEP 0047 . Messaging service hosts XMPP server clusters with which device and other like devices communicate. Each node in the XMPP server cluster hosts an internal component with which device or another device communicates using XMPP messages. The content of the XMPP messages communicated between device and messaging server are LEDM REST requests and responses which allow device and print service conform to a common contract of communication.

When device is powered on for the first time it prompts a user to enable communication with print service . If the user agrees device registers itself with messaging service using for example a REST API Application Program Interface over TLS Transport Security Layer . Messaging service creates an XMPP account for device and assigns a new client id and a password to device . Messaging service also provides connection details like the host name and client id for messaging service and a list of ports along with their priority. Messaging client may maintain an XMPP roster or buddy list. The roster may be kept empty to avoid overhead involved with communicating presence information.

Device tries to connect to messaging service on its default port 5222 for example. In case the connection is not successful possibly because of firewall restrictions it re tries using fallback ports such as 5223 80 and 443 in order of priority. If the connection is successful messaging client logs in to messaging service using its client id and password received during registration. All XMPP communications may happen over TLS between the messaging client and messaging service to help ensure data integrity and to hide sensitive or personal information.

On successful login device is deemed ready to accept jobs from job service . Note that device creates only one TCP Transmission Control Protocol connection with messaging service and multiple IBB sessions to send and receive messages in parallel over the TCP connection. One IBB session can be used for LEDM requests and responses and another can be used by device to send job and device events to messaging service . This separation allows different types of messages to be served by different components of messaging service .

In the following discussion device is a printer and job service is responsible for delivering print jobs. Initially a user uploads a document and any parameter settings to job service . Job service renders the document into a print job for printer . The print job conforms to a particular format such as PCL Printer Control Language designed for printer . The print job is now ready to be sent to device along with any parameter settings.

Job service communicates a job instruction to messaging service step . Step in this example is accomplished by communicating an LEDM REST request using HTTP. That request includes the job instruction. The job instruction includes an URL for retrieving the print job and any parameter settings. Messaging service wraps the LEDM REST request in an XMPP message step and sends the XMPP message to messaging client step .

Messaging client extracts the LEDM REST request from the XMPP message step . Messaging client then makes an HTTP request of server using the extracted LEDM REST request step . Server processes the LEDM REST request and returns an HTTP response step . As noted above where the LEDM REST request includes a request for state information the response can include the requested state information. Messaging client receives and wraps the response in an XMPP message step and sends the XMPP message to messaging service step . Messaging service extracts the response from the XMPP message sent in step step and forwards the response to job service .

The request made of server in step includes the job instruction. Server forwards the job instruction to job client . Job client uses the URL included in the job instruction to make an HTTP request for the print job from job service step . In response job service returns the print job in an HTTP response step . Job client then causes device to produce the print job using any parameter settings included in the job instruction.

All LEDM REST requests and responses are communicated via XMPP messages via an XMPP channel. Each XMPP message is sent without first receiving a request for the message or its contents. Print job data is not sent on this channel instead as noted the print jobs are communicated via an HTTP channel as a response to an HTTP request. The communication on the XMPP channel is kept very light which allows each XMPP server cluster within messaging service to handle thousands of printers or more.

Conclusion The diagrams of show the architecture functionality and operation of various embodiments. Various components illustrated in are defined at least in part as programs. Each such component portion thereof or various combinations thereof may represent in whole or in part a module segment or portion of code that comprises one or more executable instructions to implement any specified logical function s . Each component or various combinations thereof may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Also the present invention can be embodied in any computer readable media for use by or in connection with an instruction execution system such as a computer processor based system or an ASIC Application Specific Integrated Circuit or other system that can fetch or obtain the logic from computer readable media and execute the instructions contained therein. Computer readable media can be any media that can contain store or maintain programs and data for use by or in connection with the instruction execution system. Computer readable media can comprise any one of many physical media such as for example electronic magnetic optical electromagnetic or semiconductor media. More specific examples of suitable computer readable media include but are not limited to a portable magnetic computer diskette such as floppy diskettes or hard drives a random access memory RAM a read only memory ROM an erasable programmable read only memory or a portable compact disc.

Although the flow diagrams of show specific orders of execution the orders of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession may be executed concurrently or with partial concurrence. All such variations are within the scope of the present invention.

The present invention has been shown and described with reference to the foregoing exemplary embodiments. It is to be understood however that other forms details and embodiments may be made without departing from the spirit and scope of the invention that is defined in the following claims.

