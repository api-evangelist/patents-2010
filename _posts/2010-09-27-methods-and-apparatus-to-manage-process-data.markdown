---

title: Methods and apparatus to manage process data
abstract: Example methods and apparatus to manage process control data are disclosed. A disclosed example method includes receiving a request for process data associated with a field device, searching a database for a descriptor file that includes the requested process data, and accessing the descriptor file to retrieve the process data to display within an application, wherein the process data is retrieved using a schema that specifies that the process data is located at an object referenced by a file entry that is part of a section of a file body included within the file. In the example method, the object may include at least one of an expression to calculate a value using the process data in a mathematical formula or a display transformation to instruct how the process data is to be displayed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09229947&OS=09229947&RS=09229947
owner: Fisher-Rosemount Systems, Inc.
number: 09229947
owner_city: Round Rock
owner_country: US
publication_date: 20100927
---
The present disclosure relates generally to process control systems and more particularly to methods and apparatus to manage process data.

Process control systems like those used in chemical petroleum or other processes typically include one or more process controllers and input output I O devices communicatively coupled to at least one host or operator workstation and to one or more field devices via analog digital or combined analog digital buses. The field devices which may be for example valves valve positioners switches and transmitters e.g. temperature pressure and flow rate sensors perform process control functions within the process such as opening or closing valves and measuring process control parameters. The controllers receive signals indicative of process measurements made by the field devices process this information to implement a control routine and generate control signals that are sent over the buses or other communication lines to the field devices to control the operation of the process. In this manner the controllers may execute and coordinate control strategies or routines using the field devices via the buses and or other communication links communicatively coupling the field devices.

Process data from the field devices and the controllers may be made available to one or more applications i.e. routines programs etc. executed by the operator workstation e.g. a processor based system to enable an operator to perform desired functions with respect to the process such as viewing the current state of the process e.g. via a graphical user interface evaluating the process modifying an operation of the process e.g. via a visual object diagram etc. Many process control systems also include one or more application stations. Typically these application stations are implemented using a personal computer workstation or the like that is communicatively coupled to the controllers operator workstations and other systems within the process control system via a local area network LAN . Each application station may execute one or more strategies routines or applications that perform campaign management functions maintenance management functions virtual control functions diagnostic functions real time monitoring functions safety related functions configuration functions etc. within the process control system.

Currently a Field Device Integration FDI standard supports multiple process control communication protocols e.g. Hart Foundation Fieldbus and Profibus which enables process control systems to manage field devices using a universal toolset. In some examples the universal toolset may be implemented by Electronic Device Description Language EDDL files. The EDDL files provide a structured and or standardized format to describe and specify functions of field devices. Process controllers and or workstations may use EDDL files to facilitate interpretation control and or management of field devices. In other examples the universal toolset may be implemented by defined client server interfaces that exchange process data in a universal format.

Example methods and apparatus to manage process data are described. In one example a method includes receiving a request for process data associated with a field device and searching a database for a descriptor file that includes the requested process data. The example method also includes accessing the descriptor file to retrieve the process data to display within an application wherein the process data is retrieved using a schema that specifies that the process data is located at an object referenced by a file entry that is part of a section of a file body included within the descriptor file.

In another example a method includes receiving process data transmitted by a field device that is to be stored within the descriptor file and determining a relationship between the process data. The example method also includes creating a file body for the descriptor file creating an open file description for each physical file to be associated with the descriptor file based on a number of components associated with the field device creating a section for the open file description that includes related portions of process data and creating a file entry within the section. The example method further includes selecting an object type based on a type of the process data to be stored within the file entry assigning an object associated with the selected object type to the file entry and storing the process data to the object.

An example apparatus includes a file processor to search a database for a descriptor file that includes requested process data originated from a field device within a process control system. The example apparatus also includes a process data reader to access the descriptor file to retrieve the process data to display within an application wherein the process data is located at an object referenced by a file entry that is part of a section of a file body included within the descriptor file.

Although the following describes example methods and apparatus including among other components software and or firmware executed on hardware it should be noted that these examples are merely illustrative and should not be considered as limiting. For example it is contemplated that any or all of the hardware software and firmware components could be embodied exclusively in hardware exclusively in software or in any combination of hardware and software. Accordingly while the following describes example methods and apparatus persons of ordinary skill in the art will readily appreciate that the examples provided are not the only way to implement such methods and apparatus. For example while the example methods and apparatus are described in connection with managing process data the example methods and apparatus are more generally applicable and may be implemented to manage data associated with any automation system batch processing system manufacturing system industrial control system safety instrumented system etc.

Process control systems generally include controllers to perform routines control strategies and or algorithms that manage field devices located in the control system. The field devices may be for example valves valve positioners switches and transmitters and may perform process control functions such as opening or closing valves and measuring process control parameters. In addition to managing field devices controllers may generate process data based on information received from the field devices. The process data may include process statistics alarms monitoring information process trend information diagnostic information field device status information and or messages from the field devices.

Controllers transmit process data to applications operating on workstations so that operators may manage the process control system. Typically applications display process data as at least one graphical data representation in a user interface. Data representations are helpful to operators as these data representations typically display process data graphically in the form of charts graphs data tables list boxes graphical symbols text etc. The data representations and corresponding text within the user interface are generally displayed in a format and or language associated with a locale of an operator viewing the information.

In many known systems workstations display process data from field devices using a corresponding electronic device description language EDDL file. In many instances the EDDL files are transported to a process control environment along with a corresponding field device. In some examples the EDDL files may be included within a field device and uploaded to a process control system upon installing the field device into the process control system. In these instances a controller may store the EDDL files. Alternatively each workstation coupled to the process control system may store a local copy of the EDDL files. In other examples process control personnel may store EDDL files to a central database and access the EDDL files to display process data from a corresponding field device.

Currently many well known process control communication protocols support the use of EDDL files. These process control protocols include for example Foundation Fieldbus Hart Communication Foundation and Profibus . Further the Field Device Integration FDI standard supports the use of EDDL files to create a universal toolset used by process control personnel to manage field devices communicatively coupled together within control systems.

The EDDL is a text based language that may be used to describe characteristics parameters and or functions of field devices. This functionality may include for example menu system descriptions general device information diagnostics performance analysis information operational statistics parameterization information range setup information simulation parameters override information calibration trim information monitoring information device security protocols and or reset information. Manufacturers of field devices use EDDL files to provide a standardized form and or structure for host workstations and or handheld devices to access and display process data independent of a communication protocol and or a device operating system e.g. Windows Android Blackberry OS iOS etc. .

While EDDL files specify how process data is to be displayed EDDL files do not store process data. Currently process data may be stored by a controller to a persistent storage system e.g. a database . In many instances stored process data may be organized by a field device that generated the process data an area of a process control system an identifier associated with the process data a time the process data was generated and or any other arrangement specified by process control personnel. Additionally process data may be stored in a format that is associated with a field device type that generated the process data a communication protocol used to transport the process data and or a type of the process data.

EDDL files may reference database locations of stored process data to display the process data in a graphical representation. To reference process data some EDDL files may have to specify a directory location of the process data within a database. Further the EDDL files may have to specify a parameter and or variable that matches a format of the process data. In this manner EDDL files may have to be manually configured to reference the appropriate location s of desired process data. If the process data is migrated to a different location EDDL files may have to be updated with the new location. Additionally an application that retrieves process data may have to search the entire database. Searching the entire database may be inefficient and time consuming. Further some applications may not be communicatively coupled to the database to enable a user to search for the process data.

Currently many workstations servers processors etc. within a process control system may utilize interfaces that convert process data into a universal format to enable applications to exchange process data in a standardized e.g. common format. For example some applications may be configured for viewing process data generated by field devices compliant with the Hart communication protocol. To transmit this process data to an application configured for viewing process data associated with the Foundation Fieldbus communication protocol interfaces between the applications convert the process data into a format that is compliant with both communication protocols. While these interfaces may enable the exchange of process data the interfaces are relatively complex and have to be updated for changes to any compliant communication protocol. Additionally some interfaces may not properly convert all process data into a universal format.

The example methods and apparatus described herein utilize a common e.g. universal and or standardized file format for storing process control data. The common file format includes a collection of process data that parameterizes one or more field devices within a process control system. The example common file format is utilized by the example methods and apparatus to create descriptor files that conform to an arrangement e.g. an organization architecture and or file structure for storing process data. A descriptor file may be created for each field device within a process control system. Alternatively a descriptor file may be created for a group of field devices within a process control area. The descriptor files may need a relatively small amount of memory to store process data thereby enabling the descriptor files to be portable and stored locally to devices.

The example common file format utilized by the example methods and apparatus described herein includes a header portion and a data portion. In other examples the common file format may include additional portions. The example header includes information that describes a descriptor file. This information may include for example a schema level of the common file format version information and or capabilities of the descriptor file. The identification information within the header provides a validation that an application is reading an appropriate version of a descriptor file. In other words the version information enables an application to determine if contents e.g. process data of a descriptor file are compatible with the application. In some examples the methods and apparatus described herein may use the version information to convert a descriptor file to a version that is requested by a client e.g. a user of a workstation associated with a process control system .

An application may also use identification information within the header to search for a descriptor file that matches a request for process data from a client. For example a user may request to view process data associated with a pump field device in an application. The application uses an identifier of the field device included within the request to match to corresponding identification information within a header of a descriptor file. Additionally an EDDL file may reference a descriptor file by identification information included within the header.

In addition to a header the common file format specifies a data portion. The example data portion includes entries e.g. blocks of process data that describe characteristics of a field device. The process data may also include outputs from a field device. The example methods and apparatus described herein arrange process data within a descriptor file so that global objects are defined first. For example the common file format structures process data in a hierarchy where global objects are defined relatively higher in the hierarchy while individual variables are defined relatively lower in the hierarchy. In this manner relatively lower objects within a descriptor file may reference relatively higher objects that provide a global definition of the lower objects.

In some examples entries within a descriptor file may be relatively complex by including for example bitmaps and or multiple data fields with links to other objects. In an example a descriptor file includes a file body that includes at least one physical file. The file body includes one or more open file descriptions that describe a respective physical file. An open file description is referenced by one or more sections that include one or more file entries. In this manner a section may include a list of file entries.

Additionally each file entry may include a variable that is associated with a feature function parameter and or component of a field device. A variable may be defined by for example a variable type field a value field and or a quality field. The variable type field specifies a type of a variable e.g. Boolean Integer Unsigned Float Double Enum ASCII BitString Time Datetime etc. . A value field stores process data described by the variable. The value field may include process data generated by a field device or alternatively process data that describes a feature function and or parameter of a field device. The variable quality field may specify a likelihood of process data stored to a corresponding value field being within a specified threshold.

Further a file entry may include an expression and or a display transformation that performs an action on process data located in one or more variables. In this manner process data may be stored to a descriptor file as a relatively complex formula and or method thereby providing applications flexibility to display process data stored within descriptor files. An expression may include for example a mathematical computation using process data stored in a variable. In some examples an expression may be implemented by for example Jscript. A display transformation may include for example instructions that specify how process data associated with a variable is to be displayed. In some examples a display transformation may be implemented using Extensible Stylesheet Language Transformation XSLT .

A file entry may also include a reference to another section. In this manner a descriptor file may include a nested hierarchy of file entries. For example a file entry may be implemented as an object including for example a collection and or a list of nested process data. In another example a file entry may be implemented as an object including for example a value array a reference array and or an entry array. In these other examples the file entry may include a count field that specifies a number of nested file entries with each nested file entry including a reference to a variable. In other words the value array reference array and or an entry array may be used to index a group of variables.

The example descriptor files implemented by the example methods and apparatus described herein are validated by a schema that provides a blueprint as to how process data is stored and retrieved. A schema is a type of document that expresses common file format requirements in terms of constraints on a structure and contents of descriptor files. For example a schema may specify the relationship between a header a data portion an open file description sections file entries and or variables described above. In some examples the common file format may be associated with an Extensible Markup Language XML and or an XSLT format. In these examples an XML schema may be implemented using any type of XML schema language including for example Document Definition Markup Language DDML Document Schema Definition Languages DSDL Document Structure Description DSD etc.

The example schema may arrange objects and or variables within a descriptor file based on an organization of a corresponding field device. For example a field device may include a temperature sensor a pressure sensor and an actuator. A corresponding descriptor file may include a single open file description for the field device with a section for the two sensors and a separate section for the actuator. A file entry for the sensor section includes an entry array object that includes a nested section for the temperature sensor and a separate nested section for the pressure sensor. Each of these nested sections may include nested file entries referenced to variables that store process data generated from and or parameterized for the respective sensor. The actuator section may include one or more file entries that reference variables associated with the actuator. In this manner an arrangement of the descriptor file mirrors the hardware arrangement of the field device while conforming to example common file format specified by the example schema.

The example method and apparatus described herein use a schema as a guideline for generating and or retrieving process data from descriptor files. By adhering to a schema the example methods and apparatus enable descriptor files to be relatively more portable and or useable by process control applications because the applications do not have to be supported by interfaces and or specific communication protocols to utilize a descriptor file. Further a common file format specified by a schema is relatively resistant to changes in process control technology because the process data hierarchy is independent of a specific communication protocol field device application type and or process control system.

In some examples the methods and apparatus described herein may use descriptor files conforming to the common file format in conjunction with EDDL files to display process data. For example the EDDL files may specify how process data stored in a descriptor file is to be displayed in an application. In these examples the EDDL file may reference variables within the descriptor file. Because the descriptor file conforms to the example schema the EDDL file may not have to be modified when a data location of the process data is modified. In other examples the descriptor file may include device functionality features and or display information thereby making a corresponding EDDL redundant.

The illustrated example also includes a server hosting a file generator . The file generator creates descriptor files in a universal e.g. common file format that conforms to a schema. While the file generator is shown within the server in other examples the file generator may be included within the workstation and operate in parallel with the display interface .

The example workstation and or the example server of may include any computing device such as a personal computer a laptop a server a controller a personal digital assistant PDA a micro computer etc. The example workstation may also include any mobile computing device such as for example a cell phone a smartphone a PDA a netpad a field communication etc. The workstation and or the server may be implemented using any suitable computer system or processing system e.g. the processor system P of . For example the workstation could be implemented using a single processor personal computer single or multi processor workstations etc.

The example process control system may include any type of manufacturing facility process facility automation facility safety instrumented facility and or any other type of process control structure or system. In some examples the process control system may include multiple facilities located at different locations. Additionally the example process control environment may include other process control systems not shown that may be included within the same facility and or located at a different facility.

The example process control system includes a controller that may be communicatively coupled to the workstation and or the server via a local area network LAN . The LAN may be implemented using any communication medium and or protocol. For example the LAN may be based on a hardwired or wireless Ethernet communication scheme. However any other suitable communication medium and protocol could be used. Furthermore although the LAN is shown more than one LAN and or wireless network and appropriate communication hardware may be used to provide redundant communication paths.

The process control environment may include a firewall not shown to provide remote workstations e.g. workstations outside of the process control environment access to process data generated by the process control environment . The process control environment may also include one or more routers not shown to communicatively couple workstations not shown to the LAN . The routers may also communicatively couple multiple process control systems.

The process control system also includes field devices e.g. input and or output devices . The field devices may include any type s of process control component s capable of receiving inputs generating outputs and or controlling a process. The field devices may include control devices such as for example valves pumps fans heaters coolers and or mixers to control a process. Additionally the field devices may include measurement or monitoring devices such as for example temperature sensors pressure gauges concentration gauges fluid level meters flow meters and or vapor sensors to measure portions of a process. The field devices receive instructions from the controller via inputs to execute a specified command and cause a change to the process implemented and or controlled by the field devices . Furthermore the field devices measure process data environmental data and or input device data and transmit the measured data via outputs to the controller as process data. This process data may include the values of variables corresponding to measured outputs from the field devices .

The field devices may be associated with EDDL files that are accessible by the controller the server and or the workstation . The EDDL files describe characteristics functions parameters and or features of the field devices . The workstation can access the EDDL files to determine how to display process data stored within descriptor files.

The process control system also includes an I O device e.g. one or more I O cards to receive data from the field devices and convert the data into communications capable of being processed by the example controller . Likewise the I O device may convert data or communications from the controller into a data format capable of being processed by the corresponding field devices .

The example controller of operates one or more control routines e.g. process control algorithms functions and or instructions to manage the field devices within the process control system . The control routines may include process monitoring applications alarm management applications process trending and or history applications diagnostic applications batch processing and or campaign management applications statistical applications streaming video applications advanced control applications safety instrumented applications etc. The example controller transmits process data e.g. process control information to the workstation . The process data transmitted by the controller may include for example process control values data values alarm information text status information diagnostic information error messages parameters events and or device identifiers.

In some examples the controller may also transmit process data from the field devices to a database . The database may be implemented by Electronically Erasable Programmable Read Only Memory EEPROM Random Access Memory RAM Read Only Memory ROM and or any other type of memory. The example database may store substantially all the process data generated by the controller . The process data may be stored and or organized based on an associated field device. For example output values e.g. process control information associated with a PS101 pump speed parameter of a pump with a PUMP01 identifier may be stored within the database indexed by the PUMP01 identifier and the PS101 parameters.

At least some of the process data stored within the database may also be stored in descriptor files. The descriptor files are stored in a descriptor file database which is communicatively coupled to the LAN . The descriptor file database may be implemented by Electronically Erasable Programmable Read Only Memory EEPROM Random Access Memory RAM Read Only Memory ROM and or any other type of memory. Further the descriptor file database may be implemented by a persistent storage system. While the example descriptor file database is shown as a separate database within the process control system in other examples the descriptor file database may be implemented locally within each workstation e.g. the workstation associated with the process control environment . Additionally or alternatively the descriptor file database may be included within the server and or the controller .

The example descriptor file database stores descriptor files that are configured to store process data in a common file format. The descriptor file database may include a descriptor file for each of the field devices or alternatively for a group of the field devices . The example descriptor files are generated by the example file generator . Process data may be stored to the descriptor files via the controller . For example process data generated by one of the field devices may be stored by the controller to a respective descriptor file. Process data may also be stored to the descriptor files via the server . For example parameterization information associated with one of the field devices may be stored by the server and or the workstation to the respective descriptor file when a corresponding field device is installed and or activated within the process control system . In this manner a descriptor file may store real time process data that describes an event a status and or measured value and may store configuration information associated with the field device. Additionally a descriptor file may store information defining features functions components and or display information associated with a corresponding field device.

The example workstation may access the example descriptor file database to retrieve manage and or display stored process data. Other workstations and or handheld devices not shown may also access the database for process data. In this manner any computing device with access to the process control environment may access the database to manage retrieve and or display process data. In instances where the descriptor file database does not include a descriptor file with requested process data the workstation may access the database for the process data.

The example workstation and or other workstations with access to the process control system may be configured to view modify and or correct one or more processes within the process control system via one or more applications. In the illustrated example an application is displayed via a user interface . Applications may include an enterprise view application a graphics studio application an explorer application and or any other type of process control based application. These applications display process data within the workstation via the user interface . The user interface may include a graphical window e.g. an application programming interface API that may be displayed within the workstation to show process control information displayed as graphical representation s e.g. functional block diagrams and or schematics . The workstation may be capable of displaying more than one user interface that may be communicatively coupled to the display interface .

In the illustrated example the application may utilize the common file format of the descriptor files within the descriptor file database to retrieve manage and or display process data. Because the process data is stored to a file format that is standardized based on a schema the application may access the descriptor file without a file format specific interface. In this manner any application operating on the workstation may access process data stored within descriptor files without having to convert translate and or otherwise format the process data into a standard compliant with the application. Further the application may access process data stored in descriptor files regardless of a communication protocol used to communicate between the I O device and the field devices a type of the field devices a protocol of the field devices and or any other proprietary format associated with the process data when the process data is generated by the field devices .

In the example of the file generator creates descriptor files based on a type of process data to be stored a relationship between process data to be stored and or an arrangement of process data generated from one of the corresponding field devices . The file generator also uses the example schema to organize and or arrange process data within a descriptor file. In some examples the file generator may receive inputs from process control personnel specifying how process data is to be organized. Additionally the file generator may validate a newly created descriptor file with the example schema. Upon creating descriptor files the file generator saves the descriptor files to the descriptor file database . The file generator is described in further detail in conjunction with .

The example display interface of enables a user of the workstation to manage process data stored in descriptor files. The example display interface may receive a request from a user to view access and or update process data. A user may specify one of the field devices to cause the display interface to locate a descriptor file associated with the field device . Alternatively a user may specify a parameter and or variable causing the display interface to locate descriptor files with matching parameters and or variables. In yet other examples a user may use the display interface to browse a directory of descriptor files within the descriptor file database . A user may then view process data by selecting a desired descriptor file.

The example display interface uses the example schema to locate requested process data within a descriptor file. Because the schema specifies how process data is to be stored the example display interface may apply the schema to search a descriptor file. In addition to retrieving process data the example display interface may enable a user of the workstation to write to a descriptor file and or modify process data stored within a descriptor file.

The example display interface may also use display transformations within a descriptor file and or a corresponding EDDL file to determine which of the retrieved process data is to be displayed within the application . To display process data the example display interface may render the process data within data fields of a template specified by an EDDL file and or a display transformation. The display interface may also generate a display file that includes instructions that the application uses to generate graphical representations of the process data within a template. In this manner the display interface enables a user to relatively quickly retrieve and view process data stored in one or more descriptor files.

The example file generator creates descriptor files and stores process data to the descriptor files. The example file generator may generate multiple descriptor files concurrently or alternatively process descriptor files in series. To create modify view and or edit descriptor files the example file generator includes an editor . The example editor may function as an interface to enable a field device developer and or process control personnel to create and or modify descriptor files. In examples where the descriptor files are in an Extensible Stylesheet Language Transformation XSLT format and or an Extensible Markup Language XML format the editor may be implemented using XMLSpy from Altova . In these other examples the editor may convert the descriptor files from an XML and or XSLT format into a HyperText Markup Language HTML file. The display interface may then access HTML formatted descriptor files in examples where the workstation is communicatively coupled to the descriptor file database via the Internet.

To create descriptor files the example editor may receive information describing functionality of the field devices . In other examples a user may utilize the editor to create a descriptor file based on specifications associated with the field devices . For example the editor may invoke a text editing application that a device designer may use to create a descriptor file. In other examples the editor may be a routine and or algorithm that generates descriptor files based on the inputs the outputs process data stored within the database and or any additional information associated with the field devices . For example the editor may identify types of outputs from a field device and create a descriptor file to store outputted process data based on the output type. In some examples the editor may be used to create a descriptor file that stores process data based on features and or functionality of one of the field devices . In other examples the editor may create a descriptor file that stores process data in a hierarchical manner based on features and or functionality of the field devices collectively.

The example editor of the illustrated example creates descriptor files using a schema . The example schema may be for example an XML file that provides a structure describing how process data within descriptor files is to be organized. The example schema may be stored in a cache e.g. memory of the file generator or alternatively may be stored in a memory of the server of and remotely accessed by the editor . The schema is described in greater detail in conjunction with .

To create a descriptor file for a field device the example editor uses information and or process data associated with the field device to determine a file structure that conforms to the schema . The example editor determines the file structure by determining a relationship between the process data that is to be stored to the descriptor file. To determine the relationship of the process data the example editor may determine a hierarchy of the process data by accessing an EDDL file associated with the field device. The EDDL file may be stored within the field device the server and or in a database within the process control system . The EDDL file may specify which features functions and or types of process data are related and or are to be grouped together. The example editor uses the relationship information within the EDDL file to create a file hierarchy using open file descriptions sections file entries and or objects.

The example editor may also determine a relationship of the process data based on which portions of the process data are associated with a component of a field device. In this manner the example editor groups portions of process data together within a same section that are associated with the same component. The example editor may also use a hierarchy of the field device to determine how to structure the process data. For example the editor may nest objects and or sections of a descriptor file to mirror nested components within a field device.

Further the example editor may determine a relationship of the process data by identifying a type of the process data. The example editor may identify a type by determining if the process data corresponds to a numerical value an array of values a string of text a Boolean value a logic value and or any other type of data. The example editor may also select an object type for a descriptor file based on a type of the process data. For example the editor may select a value array for process data that is associated with an array of numeric values. Based on a process data type the example editor may select an appropriate object from any number of objects including for example a value array a list a collection a reference array an entry array a variable an expression and or a display transformation. Further the example editor may select from any number of variable types based on a type of the process data. The variable value types include for example Boolean integer unsigned float double Enum ASCII bitsting time and or datetime.

After determining a relationship among the process data to be stored to a descriptor file the example editor creates a file body e.g. a data portion and a header for the descriptor file. The editor creates the header based on identification information included within the process data. The editor may also create fields within the header to specify a version of the descriptor file. The header may include for example a manufacturer name of a field device a type of a field device a major version of the descriptor file a minor version of the descriptor file a maintenance version of a field device a build version of a field device and or a model number of a field device. A major version of the descriptor file may be used by the display interface and or the application to determine compatible file entries within the descriptor file. A minor version of a descriptor file provides minor incremental versions for each major version. In this manner relatively older applications may read descriptor files and use the major minor version header information to determine compatible field entries. In other words the header enables descriptor files to be backward compatible so that relatively older applications may only access process data that is compatible with the older applications. In some examples if a major version of a descriptor file is incompatible with an application the application may not be allowed to access the process data thereby preventing the application from corrupting the descriptor file and or improperly displaying process data.

The example editor creates a file body by determining a number of physical files to associate with the descriptor file based on the relationship information. The number of physical files may correspond to a number of components of a field device. In other examples the number of physical files may correspond to different features and or functions associated with a field device. For example a first physical file may be created for a pressure sensor and a second physical file may be created for a temperature sensor that are included within a valve controller field device. Each of the physical files are referenced and or included within the file body of the descriptor file.

For each physical file the example editor references the physical file to the file body of the descriptor file using an open file description. The open file description includes identification information that identifies the physical file. The open file description also includes references to sections. The example editor creates sections within open file descriptions based on the relationship between the process data. For example the editor may create a section for alarm and event process data for a sensor component and a section for output values of process data for the sensor component. The example editor may include references to the created sections within the corresponding open file descriptions.

For each section the editor determines an object type for a file entry. The file entries are references within a section to objects. The editor may select an object based on a type and or relationship of the process data. Thus a collection or list of process data may be stored to the descriptor file as a list or collection object referenced within a file entry. In examples where the process data may include a group and or set of variables parameters and or values the editor may determine that a file entry is to be associated with an array object. Based on a type of the group and or set the array may include a value array a reference array and or an entry array. Each of these arrays may include a nested section with file entries of values parameters and or variables. In this manner the editor may create nested sections and or objects within a descriptor file.

Additionally the editor may create an expression object file entry within a section for process data that is to be included within a mathematical expression prior to being displayed and or accessed. For example the editor may specify an object is to be an expression that converts a value of a variable from a numeric level of a tank into a percentage of tank capacity. The editor may also create a display transformation object in examples where the descriptor file is to include instructions describing how stored process data is to be displayed. To create a display transformation object the example editor may create a reference in a file entry to a set of instructions.

To identify a section the example editor may assign a section name and or a section index to the section. The section name may describe the section. The section index may be referenced to an open file description and or may be referenced by file entries. To identify a file entry the example editor may assign an entry name an entry type and or a count to the file entry. The entry name may be referenced by a section and describe the file entry. The entry type corresponds to an object type that is associated with the entry. The count may identify a number of items within an array object. If the file entry corresponds to a variable object the editor may assign a variable type a value and or a quality to the variable. The variable type identifies a type of the process data. The value field within a variable object stores process data.

The example editor arranges and or organizes the sections file entries and or corresponding objects based on the relationship of the process data. The example editor utilizes the example schema to ensure that the organization and or arrangement of the descriptor file conforms to the rules and or guidelines of the schema . In some examples the editor may rearrange the sections file entries open file descriptions if the relationship of the process data conflicts with the example schema .

Upon creating a descriptor file the example editor transmits the descriptor file to a compiler . The example compiler of processes compiles checks and or translates the descriptor file for storage within the descriptor file database and or for use by the example display interface . The example compiler includes a scanner that uses any number and or type s of algorithm s logic and or methods to scan and or parse descriptor files to identify syntax errors protocol errors and or lexemes. The scanner provides the lexemes to a tokenizer to convert the descriptor file to a compressed binary format. Any errors detected by the scanner may be communicated to a field device designer via the editor . The example scanner may also validate the descriptor file using the example schema . Based on a type of error detected by the scanner the example editor provides tools for a field device designer to test and or debug the detected errors. The editor enables the field device designer and or other process control personnel to edit descriptor files to correct any detected errors. In this manner the example scanner enables a field device designer to test and or simulate a user interaction with descriptor files which may result in improved quality of the descriptor files.

Using any number and or type s of algorithm s logic and or method s the example tokenizer of processes the lexemes identified by the scanner to identify particular tokens e.g. classifiable strings of input characters . For example the scanner may identify a string of letters lexeme representing for example a sentence which the example tokenizer parses and or separates into one or more compressed binary words. Each token identified by the tokenizer has a value e.g. the actual name of a variable and a type e.g. a variable an operator a number etc. thereby enabling the tokenizer to compress a descriptor file into a binary format. The compressed format may prevent tampering and or subsequent processing issues by process control personnel. Because the tokenized descriptor file is relatively small tokenized files for many field devices can be stored in a limited flash memory of a handheld device and or the workstation .

The example file generator of also includes an interpreter to translate a descriptor file into a vendor and or system specific form. For example interpreter may be used to translate a descriptor file to a proprietary process control standard and or any other standard requested by a process control manager. The file generator may utilize the interpreter to convert a descriptor file to a format compatible with the process control system and or applications within the workstation . For example the interpreter may convert a descriptor file to an HTML format that may be accessed by a web browser. In some examples the interpreter may translate a descriptor file prior to the tokenizer compressing the descriptor file. In other examples the interpreter may translate a compressed binary descriptor file. The example interpreter may use any number and or type s of algorithm s logic and or method s to translate descriptor files into a corresponding specified format. While the example interpreter may translate a descriptor file the underlying process data stored to the descriptor file conforms to the example common file format specified by the schema .

Upon scanning tokenizing and or translating descriptor files the example compiler of the illustrated example stores a descriptor file to the descriptor file database . In some examples the compiler may store multiple translated versions of the same descriptor file thereby enabling different applications associated with different formats and or operating systems to access a compatible descriptor file. In other examples the compiler may store a compressed binary version and an uncompressed version of a descriptor file thereby enabling a user to select a descriptor file based on memory constraints of a device.

To store process data to a descriptor file the example file generator includes a database interface . The database interface is communicatively coupled to the controller and the descriptor file database via the LAN . The example database interface is shown as being implemented within the file generator . In other examples the database interface may be included within the descriptor file database a processor associated with the descriptor file database the display interface and or as a separate processor and or server within the process control system .

The example database interface receives process data from the controller . The example database interface may also receive process data from other sources e.g. process control personnel field device specification etc. . The example database interface uses identification information within the process data to identify a descriptor file. For example process data from a pump field device with an identifier of PUMP023 may be used by the database interface for search for a descriptor file with a header that includes the PUMP023 identifier.

After locating a descriptor file the example database interface may access the schema to determine a structure of the descriptor file. The database interface may use this defined structure for locating objects within the descriptor file to store the process data. Alternatively the database interface may scan the descriptor file for sections open file descriptions file entries objects and or variable types that match the process data. For example the database interface may use the process data to locate a corresponding open file description within a file body of a descriptor file. The database interface may then scan sections within the open file description for file entries that include objects that match the process data. The database interface may match process data to an object by matching an identifier of the process data to a variable type and or variable name. For example a pump output may be generated as process data by tagging the value of the output e.g. 3.2 gallons second to a parameter e.g. PUMPOUT02 . The example database interface searches file entries for an object with a corresponding PUMPOUT02 identifier and or name.

The example database interface stores process data to the identified matching object within a file body of a descriptor file. To store the process data the example database interface stores a value of the process data to a value field of a variable object that may be nested within an array collection and or list object. In examples where the value field includes a previously stored value of process data the database interface overwrites the previous value. In other examples the database interface may store the new process data value in an array object that includes the previous process data value. The example database interface may then close and or terminate access to the descriptor file with the newly stored process data.

The example of also shows the example display interface which accesses the descriptor file database for descriptor files to access process data. In some examples the display interface may periodically access the descriptor file database to store descriptor files locally to a handheld device and or the workstation . In this manner a user may view and or access process data without having a device communicatively coupled to the LAN . In other examples the display interface accesses the descriptor file database for descriptor files any time a request to view process data is received.

The example display interface may concurrently process multiple requests to access process data from workstations e.g. the workstation . Alternatively the example display interface may process a single request to access process data. In these alternative examples multiple display interfaces may be utilized to process multiple requests. While the example display interface is described in connection with the workstation the display interface may operate with other workstations and or devices that are associated with the process control environment of .

To receive a request to view process data the example display interface includes a receiver . The example receiver is communicatively coupled to the user interface within the workstation . The receiver receives requests from a user to access and or retrieve process data via the workstation and or the user interface . A user selects to access process data by entering an identifier associated with the desired data into a request and or search field. For example a user may enter an identifier of a field device. In another example a user may enter an area and or a collection of field devices within the process control system . In yet another example a user may specify an identifier e.g. a variable name of a parameter to view process data associated with the parameter.

A user may also specify process data by browsing to a desired process control object e.g. a listing of a field device component area etc. within a data directory. For example a user may utilize an open function and navigate a directory to a desired field device. In yet other examples a user may access process data by selecting a graphical representation and or an identifier associated with the information via the user interface . Alternatively a user may enter a website address that includes and or lists process data. A user may then select a desired process control object listed within the displayed webpage.

Upon receiving a request to view process data the example receiver transmits the request to a file processor . The example file processor parses the request into information to identify descriptor files. The file processor uses the information to access the descriptor file database to search for descriptor files that match the requested process data. For example a request for process data may include a Rosemount field device pressure sensor type and a PRS02 identifier of the pressure sensor. The file processor searches for descriptor files that define functionality for a Rosemount field device pressure sensor. The file processor also searches descriptor files that include a header with the PRS02 identifier. In some instances a title and or a file name of the descriptor file may include the type and or the identifier. In other instances metadata stored in a header of the descriptor file may include the type and or the identifier. In yet other instances the file processor may have to search file entries and or names of objects within the descriptor files for a matching type and or identifier.

To retrieve the requested process data the example display interface of includes a process data reader . The example process data reader uses identifiers associated with the request to search a descriptor file for process data. The process data reader receives the descriptor file from the file processor . The example process data reader may also access the schema to determine how the descriptor file is structured and or arranged. The process data reader may then use the arrangement information to relatively quickly access the process data from the description file without having to search irrelevant sections and or physical files.

The example process data reader retrieves process data by opening a descriptor file and scanning the descriptor file for a file entry with an object that matches a request. The process data reader may use information within an open file description to select a physical file that corresponds to the requested process data. The process data reader may then examine the sections within the open file description to identify which sections correspond to the request. For each section the process data reader may determine which file entries include objects with a name a type and or an identifier that matches the request. The example process data reader then retrieves the process data from the object. To retrieve the process data the process data reader copies the stored process data. The process data reader continues to retrieve process data from the descriptor file until all of the requested process data is retrieved. In examples where a file entry object includes an expression the example process data reader executes and or performs the operations specified by the expression. For example the process data reader may perform mathematical operations on a value of a variable specified by an expression object.

In examples where a request for process data causes the file processor to locate two or more descriptor files the example process data reader retrieves process data from the respective descriptor files and aggregates and or compiles the retrieved process data. The process data reader may label and or mark which process data was retrieved from which descriptor file. The process data reader may then transmit the compiled process data to a renderer for display.

The example renderer generates a display for the requested process data. The example renderer also accesses the database for the requested process data that is not included within a descriptor file. To determine how the process data is to be displayed the example renderer may locate a corresponding EDDL file. The renderer may match the process data to parameters and or references within the EDDL file. The example renderer generates graphics to display via the user interface by executing instructions within the EDDL file. The renderer may execute instructions to determine any menu display and or format information.

The example renderer also reads EDDL files for references to process data. In some examples portions of an EDDL file may include a link and or a file directory location that corresponds to process data stored in a descriptor file. For example an EDDL file may include a pump speed data field. The EDDL file may also include a link to a pump speed variable object within a descriptor file. The example renderer uses the link to insert the pump speed value e.g. process data from the descriptor file into a corresponding EDDL file to generate a graphical representation of the pump speed value.

The renderer may also match types of process data to templates. In these examples the renderer may embed and or insert process data into corresponding data fields. Each of the data fields may include a specification list describing the types of compatible process data. The renderer may then generate a display file by compiling the process data within the data fields of the template. The display file specifies for example locations of process data graphical representations of requested process data and or data fields.

Further the example renderer executes display transformation file entry objects specifying how process data is to be displayed. The renderer may construct the display file based on the display transformation file entry objects. The example renderer executes the display file to generate the described graphic with the corresponding process data. While the example renderer is shown within the display interface of in other examples where the display interface may be separate from a device to display process control information the renderer may be located within the device. In these examples the renderer transmits the display file e.g. via the Internet and or the LAN to the device.

The example renderer processes e.g. renders the display file into a format that is viewable by a user via for example the user interface . The example renderer may generate a display based on a display size of a device e.g. the workstation that will display graphic s of the process control information. After rendering the display file the example renderer transmits the rendered display to the application within the workstation to display graphically the requested process control information.

While the example display interface and the file generator have been illustrated in one or more of the servers platforms interfaces data structures elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any way. Further the example editor the example schema the example compiler the example scanner the example tokenizer the example interpreter the example database interface the example receiver the example file processor the example process data reader the example renderer and or more generally the example display interface and or the file generator may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example editor the example schema the example compiler the example scanner the example tokenizer the example interpreter the example database interface the example receiver the example file processor the example process data reader the example renderer and or more generally the example display interface and or the file generator could be implemented by one or more circuit s programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s etc.

When any apparatus claim of this patent is read to cover a purely software and or firmware implementation at least one of the example editor the example schema the example compiler the example scanner the example tokenizer the example interpreter the example database interface the example receiver the example file processor the example process data reader and or the example renderer are hereby expressly defined to include a computer readable medium such as a memory DVD CD etc. storing the software and or firmware. Further still the example display interface and or the file generator may include one or more elements processes and or devices in addition to or instead of those illustrated in and or may include more than one of any or all of the illustrated elements processes and devices.

The example schema includes a descriptor file instance that is referred to as a common file format. The common file format refers to a universality of process data within a descriptor file that may be accessed by any type of process control application. The descriptor file instance includes a header . The example header is located at a relatively high level of the descriptor file instance so that the display interface only needs to access the descriptor file instance to match a request for process data to information within the header . In this example the header includes fields for a manufacturer type of a field device associated with the descriptor file instance and a type of the field device. The example header also includes a major version a minor version a maintenance version and a build version of the descriptor file instance . In other examples the header may include an identifier e.g. a serial number of the field device.

The descriptor file instance also includes a file body . The file body stores process data arranged in a hierarchical format. In many examples one or more physical files of process data are stored to the file body . The example file body includes an open file description for each physical file. In the illustrated example the open file description includes a symbol name and a symbol number that may be used to reference the open file description to the file body . The open file description may also include fields for describing and or generalizing stored corresponding process data.

The open file description includes a section . While the example schema shows the section the open file description may include additional sections. The section may include process data that is substantially similar from a common component of a field device and or relatively related. The example section includes a section name field and a section index field that may be referenced and or indexed by the open file description . Alternatively the section index may reference a number of file entries included within the section .

The example section includes a file entry . While shows the file entry other examples may include multiple file entries included within the section . The example file entry includes an entry name field an entry type field and a count field. The entry name field may identify the file entry and be referenced by the section index. The entry type specifies an object type that is associated with the file entry . For example the file entry may be associated with a variable object which includes a variable type field a value field and a quality field. The variable object stores process data e.g. statuses values events parameter information etc. within the value field. The variable type field specifies a type of the variable object . An example of variable types is shown that may be associated with the variable object .

Further the file entry may also include an expression object and or a display transformation object now shown . For example an expression object may include a formula field and a value field. The formula field specifies a mathematical calculation to be performed on process data stored at a value field. In another example the display transformation object may include an instruction field and a value field. The instruction field may include for example XSLT instructions for displaying process data stored within the value field.

The example file entry may also include a value array object a list object a collection object a reference array object and an entry array object . The example objects are configured to store a set and or a group of process data values. To store the set and or group the objects include nested sections that include file entries that store the process data as nested variable objects. In this manner the objects use nested sections to store a group and or array of process data. The nested sections include a format and hierarchy similar to the section of the schema . Thus the nested sections may include nested file entries that are associated with nested variable objects and or nested arrays collections and or lists. For example the list object may contain a nested section of file entries associated with variable objects. In another example the value array object may contain a nested section of file entries indexed into an array of variable objects.

By using the example schema of the display interface may locate process data relatively quickly by using the header to match the descriptor file instance to a request for process data. The display interface may then scan the open file description for the corresponding section and scan the section for the associated file entry that includes one of the objects and that stores the requested process data. Because process data is stored in descriptor files that conform to the example schema different applications e.g. the application may access process data via the display interface regardless of the application type. In other words the example schema enables process data to be universally accessed without an interface and or adaptor to convert the process data to a format readable by an application.

The example instructions representative of the schema may be executed by the scanner of to validate a descriptor file. For example the instructions may be used to ensure object types specified within a descriptor file are specified and or defined within the schema e.g. . Additionally the instructions may be used to ensure types of values within a variable object are specified and or defined within the schema e.g. . This validation ensures that process data is stored in a format that accessible to most applications. Further the instructions may be used to ensure a structure of the descriptor file matches a structure and or relationship between open file descriptions sections file entries and or objects specified within the schema e.g. .

In the illustrated example the descriptor file includes a descriptor file instance . The descriptor file instance includes a header and a file body . The file body includes a first open file description corresponding to a first physical file storing process data generated by a Component 1 of a field device e.g. Component 1 and a second open file description corresponding to a second physical file storing process data generated by a Component 2 of a field device e.g. Component 2 . The first open file description is partitioned into sections and and the second open file description is partitioned into sections and . The sections may correspond to respective groups of related process data associated with the Components.

The section is assigned a Section 1 section name and includes a file entry e.g. Entry A that is associated with a collection object . The section also includes a file entry e.g. Entry B that is associated with an entry array object . The example instructions listed above do not include instructions for a section with file entries for the objects and . However in other examples the example collection object and or the entry array object may include one or more nested sections with nested file entries including variable objects that store process data. Each of the nested sections and or file entries may be indexed by the Array field within the respective file entries and .

The section is assigned a Section 2 section name and includes a file entry e.g. Entry C that is associated with a list object . The section also includes a file entry e.g. Entry D that is associated with a reference array object . Similarly the section is assigned a Section 3 section name and includes a file entry e.g. Entry E that is associated with a value array object . The section also includes a file entry e.g. Entry F that is associated with a variable object . The variable object is associated with a variable type of Float and includes a stored numerical value 32.5 e.g. process data .

Further the section is assigned a Section 4 section name and includes a file entry e.g. Entry G that is associated with a collection object . The section also includes a file entry e.g. Entry H that is associated with an entry array object . In this example the collection object stores a different group and or set of process data than the collection object . Likewise the entry array object stores a different array of process data than the entry array object .

The Level parameter may specify how much liquid as a percentage is in the Tank field device. The Temp parameter may specify a temperature of the liquid. The Lower Range parameter may specify a minimum threshold of fluid within the Tank field device before an alarm is triggered. Similarly the Upper Range parameter may specify a maximum threshold of fluid within the Tank field device before an alarm is triggered. The example in shows that a descriptor file may store process data measured by sensors within the Tank field device e.g. Level and Temp . The descriptor file also stores parameterization process data that defines characteristics of the Tank field device e.g. Lower Range and Upper Range . The process data may be stored within a value field of respective variable objects included within file entries of the descriptor file.

The example display interface may also access an EDDL file associated with the Tank field device to determine how the process data is to be displayed. For example the EDDL file may specify that the process data is to be displayed numerically within a first panel and graphically within a second panel . The EDDL file may also specify a location of data fields within the panels and . The second panel includes a tank graphic that shows a fluid level of the Tank field device. Because the process data is stored as a common and or universal file format to the descriptor file the application may display the process data within the panels and without having to convert the process data into a format specific to the application .

Flowcharts representative of example processes and for implementing the display interface and or the file generator of are shown in A B and . In this example the processes and may be implemented using machine readable instructions in the form of a program for execution by a processor such as the processor P shown in the example processor system P discussed below in connection with . The program may be embodied in software stored on a computer readable medium such as a CD ROM a floppy disk a hard drive a digital versatile disk DVD or a memory associated with the processor P but the entire program and or parts thereof could alternatively be executed by a device other than the processor P and or embodied in firmware or dedicated hardware. Further although the example program is described with reference to the flowcharts illustrated in A B and many other methods of implementing the example display interface and or the file generator may alternatively be used. For example the order of execution of the blocks may be changed and or some of the blocks described may be changed eliminated or combined.

As mentioned above the example processes of A B and may be implemented using coded instructions e.g. computer readable instructions stored on a tangible computer readable medium such as a hard disk drive a flash memory a read only memory ROM a compact disk CD a digital versatile disk DVD a cache a random access memory RAM and or any other storage media in which information is stored for any duration e.g. for extended time periods permanently brief instances for temporarily buffering and or for caching of the information . As used herein the term tangible computer readable medium is expressly defined to include any type of computer readable storage and to exclude propagating signals. Additionally or alternatively the example processes of A B and may be implemented using coded instructions e.g. computer readable instructions stored on a non transitory computer readable medium such as a hard disk drive a flash memory a read only memory a compact disk a digital versatile disk a cache a random access memory and or any other storage media in which information is stored for any duration e.g. for extended time periods permanently brief instances for temporary buffering and or for caching of the information . As used herein the term non transitory computer readable medium is expressly defined to include any type of computer readable medium and to exclude propagating signals.

The example process of retrieves process data stored in a descriptor file to display within an application. The example process begins by receiving a request to access process data from a user e.g. via the receiver block . The example process searches for a descriptor file that includes a header that matches information included within the request e.g. via the file processor block . The example process then accesses a schema e.g. the schema to determine a structure of the retrieved descriptor file e.g. via the process data reader block .

The example process scans the descriptor file for an object within a file body that matches the request e.g. via the process data reader block . The process may locate an object by determining an open file description associated with the process data. Within the open file description the process then searches for a section that corresponds to the process data. The example process may then search the section for a file entry with a variable object that includes a value field storing the requested process data. In some examples the process may scan the object for nested sections file entries and or objects until a variable object with the matching process data is located. The object may include any array list collection etc. that may store and or index process data.

The example process continues by determining if the process data is located within the descriptor file e.g. via the process data reader block . If the example process is unable to locate the process data within the descriptor file the process accesses the requested process data from a controller database e.g. the database of block . The controller database may store an aggregation of process data for the entire process control system . In some examples searching the controller database may be inefficient and or time consuming. Alternatively the example process may search other descriptor files. However if the example process is able to locate the requested process data block the process retrieves and compiles the process data e.g. via the process data reader block .

The example process of then determines if there is additional process data to retrieve e.g. via the process data reader block . If there is additional process data the example process searches the descriptor file for a variable object that matches the requested process data block . However if there is no additional process data to retrieve the example process executes expression objects by performing calculations on process data specified by a formula within the object e.g. via the process data reader block . If there are no expression objects the example process may skip block . Additionally if the retrieved process data corresponds to a display transformation object the example process executes instructions specified by the object to display corresponding process data e.g. via the process data reader and or the renderer block . The example process then renders the process data for display within an application e.g. via the renderer block . The example process may render the process data for display by using an EDDL file that specifies how the process data is to be displayed within a template. The process may compile the template with the process data to generate a display file that can be rendered or transmitted to an application to be rendered. Upon displaying the process data the example process terminates.

The example process of create a descriptor file. The example process may create the descriptor file in response to a request to store process data or alternatively in response by process control personnel to create the descriptor file. The example process of begins by for example receiving a request to store process data to a descriptor file e.g. via the editor block . The example process then determines a relationship between the process data e.g. via the editor block . Determining the relationship may include identifying types of the process data identifying process data associated within the same component of a field device and or identifying relatively similar process data.

The example process then creates the descriptor file based on the relationships of the process data by creating an instance of the descriptor file within for example the descriptor file database of e.g. via the editor block . The example process may create the instance based on a schema e.g. the example schema of . The example process then creates a header for the descriptor file based on identification information included within the process data and or the request to create the descriptor file e.g. via the editor block . The example process may then create a file body e.g. via the editor block .

The example process uses the schema to create an open file description for each physical file to be created based on the relationship of the process data e.g. via the editor block . The example process may also reference the open file description s to the file body. For each open file description the example process creates one or more sections based on the schema and or the relationship of the process data e.g. via the editor block . For each section the example process creates at least one file entry based on the schema and or the relationship of the process data e.g. via the editor block .

The example process of continues by determining a type of an object to associate to each of the file entries e.g. via the editor block . For process data that is to be stored in a collection and or list object of a file entry the example process creates the respective collection and or list object within the file entry e.g. via the editor block . The example process then indexes the collection and or the list object to the file entry and or the corresponding section e.g. via the editor block . The example process may then store the process data to variable objects of nested file entries included within the collection and or list object e.g. via the editor and or the database interface block .

For process data that is to be stored in association with an expression and or a display transformation object e.g. E DT the example process creates the respective expression object and or the display transformation object based on the process data and or information included within the request e.g. via the editor block . The example process may create the expression object by generating a mathematical formula provided by process control personnel and or an EDDL file. Similarly the example process may create the display transformation object based on display information specified by an EDDL file and or process control personnel. The example process may then store the process data to the expression and or display transformation object as a variable object store the expression and or display transformation object to the respective file entry and index the file entry to the appropriate section e.g. via the editor block .

For process data that is to be stored in an array e.g. a reference array a value array and or an entry array the example process generates a value for a count field for the object based on a number of file entries to store the process data e.g. via the editor block . The example process may then create nested sections and or file entries to store the process data to variable objects included within the array object e.g. via the editor and or the database interface block . The example process may then index the nested file entries to the array object e.g. via the editor block .

While the example process describes creating relatively higher level sections file entries and or objects the example process via blocks may also create nested structures e.g. sections file entries objects etc. based on the schema and or the relationship of the process data. After creating the descriptor file the example process validates the descriptor file using the schema e.g. via the scanner block . The example process may also scan the descriptor file for errors tokenize the descriptor file and or translate the descriptor file. If the validation detects any errors the example process may correct the errors and or prompt process control personnel to correct the errors. After the descriptor file passes the validation the example process then stores the descriptor file to the descriptor file database e.g. via the editor and or the compiler block . The example process may then terminate.

The example process of stores process data to an already created descriptor file. The example process begins by receiving process data from a controller e.g. via the database interface block . In other examples the process may receive process data from the database of and or any other processor and or server associated with the process control system . The example process then locates a descriptor file in the descriptor file database that corresponds to the received process data e.g. via the database interface block . The example process may use a header and or names of variable objects to locate the matching descriptor file.

After locating a matching descriptor file the example process locates a file body and an open file description that corresponds to the process data to be stored e.g. via the database interface block . The example process then locates a section and an object within a file entry of the section that matches the process data to be stored e.g. via the database interface blocks and . In examples where the object includes nested sections and or file entries the example process may locate the nested objects that correspond to the process data. The example process may then store the process data to a value field of a variable object that matches the process data e.g. via the database interface block .

The example process of continues by determining if there is additional process data to store. If there is additional process data the example process returns to block and locates a corresponding descriptor file. However if there is no additional process data to store the example process ends an access session with the descriptor file and or stores the descriptor file with the newly added process data to the descriptor file database . The example process may then terminate.

As shown in the processor system P includes a processor P that is coupled to an interconnection bus P. The processor P includes a register set or register space P which is depicted in as being entirely on chip but which could alternatively be located entirely or partially off chip and directly coupled to the processor P via dedicated electrical connections and or via the interconnection bus P. The processor P may be any suitable processor processing unit or microprocessor. Although not shown in the system P may be a multi processor system and thus may include one or more additional processors that are identical or similar to the processor P and that are communicatively coupled to the interconnection bus P.

The processor P of is coupled to a chipset P which includes a memory controller P and a peripheral input output I O controller P. As is well known a chipset typically provides I O and memory management functions as well as a plurality of general purpose and or special purpose registers timers etc. that are accessible or used by one or more processors coupled to the chipset P. The memory controller P performs functions that enable the processor P or processors if there are multiple processors to access a system memory P and a mass storage memory P.

The system memory P may include any desired type of volatile and or non volatile memory such as for example static random access memory SRAM dynamic random access memory DRAM flash memory read only memory ROM etc. The mass storage memory P may include any desired type of mass storage device. For example if the example processor system P is used to implement the example descriptor file database the mass storage memory P may include a hard disk drive an optical drive a tape storage device etc. Alternatively if the example processor system P is used to implement the example descriptor file database the mass storage memory P may include a solid state memory e.g. a flash memory a RAM memory etc. a magnetic memory e.g. a hard drive or any other memory suitable for mass storage in the example descriptor file database .

The peripheral I O controller P performs functions that enable the processor P to communicate with peripheral input output I O devices P and P and a network interface P via a peripheral I O bus P. The I O devices P and P may be any desired type of I O device such as for example a keyboard a display e.g. a liquid crystal display LCD a cathode ray tube CRT display etc. a navigation device e.g. a mouse a trackball a capacitive touch pad a joystick etc. etc. The network interface P may be for example an Ethernet device an asynchronous transfer mode ATM device an 802.11 device a DSL modem a cable modem a cellular modem etc. that enables the processor system P to communicate with another processor system.

While the memory controller P and the I O controller P are depicted in as separate functional blocks within the chipset P the functions performed by these blocks may be integrated within a single semiconductor circuit or may be implemented using two or more separate integrated circuits.

At least some of the above described example methods and or apparatus are implemented by one or more software and or firmware programs running on a computer processor. However dedicated hardware implementations including but not limited to application specific integrated circuits programmable logic arrays and other hardware devices can likewise be constructed to implement some or all of the example methods and or apparatus described herein either in whole or in part. Furthermore alternative software implementations including but not limited to distributed processing or component object distributed processing parallel processing or virtual machine processing can also be constructed to implement the example methods and or systems described herein.

It should also be noted that the example software and or firmware implementations described herein are stored on a tangible storage medium such as a magnetic medium e.g. a magnetic disk or tape a magneto optical or optical medium such as an optical disk or a solid state medium such as a memory card or other package that houses one or more read only non volatile memories random access memories or other re writable volatile memories. Accordingly the example software and or firmware described herein can be stored on a tangible storage medium such as those described above or successor storage media. To the extent the above specification describes example components and functions with reference to particular standards and protocols it is understood that the scope of this patent is not limited to such standards and protocols.

Additionally although this patent discloses example methods and apparatus including software or firmware executed on hardware it should be noted that such systems are merely illustrative and should not be considered as limiting. For example it is contemplated that any or all of these hardware and software components could be embodied exclusively in hardware exclusively in software exclusively in firmware or in some combination of hardware firmware and or software. Accordingly while the above specification described example methods systems and machine accessible medium the examples are not the only way to implement such systems methods and machine accessible medium. Therefore although certain example methods systems and machine accessible medium have been described herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods systems and machine accessible medium fairly falling within the scope of the appended claims either literally or under the doctrine of equivalents.

