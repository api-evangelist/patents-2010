---

title: Shared resource discovery, configuration, and consumption for networked solutions
abstract: A networked solution offering a software-based service via a networked architecture having a system landscape can discover a shared resource within the system landscape, for example by accessing a landscape directory comprising information about a plurality of shared resources available in the system landscape. The information about the discovered shared resource can include a second networked solution within the system landscape that has previously configured the discovered shared resource. Configuration settings can be retrieved for the discovered shared resource from the second networked solution. Using the retrieved configuration settings, a shared resource-specific communication channel can be determined for the networked solution to access the discovered shared resource in a peer-to-peer manner. A resource type-specific application programming interface can be provided to the software-based service to enable consumption of the discovered shared resource by the software-based service. Related methods, systems, and articles of manufacture are described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08375130&OS=08375130&RS=08375130
owner: SAP AG
number: 08375130
owner_city: Walldorf
owner_country: DE
publication_date: 20101216
---
The subject matter described herein relates to discovery configuration and consumption of shared resources in networked solutions.

Networked solutions can be offered for on premise installation or consumption as on demand services e.g. via cloud computing . Customers are generally more willing to buy or rent new products e.g. software products if those new products can be combined with existing products to operate as an integrated solution. Consequently it is important to offer customers the ability to integrate networked solution products in the customers system landscapes.

In one aspect a computer implemented method includes discovering by a networked solution offering a software based service via a networked architecture having a system landscape a discovered shared resource within the system landscape. The discovering includes accessing a landscape directory that includes information about a plurality of shared resources available in the system landscape. The information about the discovered shared resource includes a second networked solution within the system landscape that has previously configured the discovered shared resource. Configuration settings for the discovered shared resource are retrieved from the second networked solution and a shared resource specific communication channel for the networked solution to access the discovered shared resource in a peer to peer manner is determined using the retrieved configuration settings. A resource type specific application programming interface is provided to the software based service to enable consumption of the discovered shared resource by the software based service.

In some variations one or more of the following can optionally be included. The discovered shared resource can be added to a locally stored list of available shared resources that are available to the networked solution. The networked solution can announce an availability of a new shared resource upon addition and configuration by the networked solution of the new shared resource by sending information about the new shared resource collected from an administrator when the new shared resource is configured in the networked solution to at least one other networked solution. The retrieving of the configuration settings can occur at a time selected from immediately after the discovering of the discovered shared resource when the discovered shared resource is first needed by the networked solution and when previously retrieved configuration settings for the discovered shared resource are determined to no longer be valid. The networked solution can deliver to a second networked resource in the system landscape in response to a peer to peer request from the second networked resource at least one of the discovered shared resource and another shared resource that the networked solution has previously configured. The networked architecture can include a multi tenant software architecture that includes an application server and a data repository. The application server can provide access for each of a plurality of organizations to one of a plurality of client tenants each of which includes a customizable organization specific version of a core software platform. The networked solution can include an externally provided application that requires one or more local shared resources of a client machine accessing one of the plurality of tenants.

Articles are also described that comprise a tangibly embodied machine readable medium operable to cause one or more machines e.g. computers etc. to result in operations described herein. Similarly computer systems are also described that may include a processor and a memory coupled to the processor. The memory may include one or more programs that cause the processor to perform one or more of the operations described herein.

The details of one or more variations of the subject matter described herein are set forth in the accompanying drawings and the description below. Other features and advantages of the subject matter described herein will be apparent from the description and drawings and from the claims.

A customer using a networked architecture that includes multiple networked solutions can typically be interested in adding another networked solution to the system landscape of the networked architecture. Doing so without significant requirements for configuration for example by allowing the new networked solution to embed itself in the existing landscape and to derive most of its own configuration from the existing configuration of already deployed networked solutions can be advantageous. For the purposes of this disclosure the term networked solution applies to any software system application component or the like offering software based services e.g. one or more business applications that is accessible over a networked computing architecture such as for example in a cloud based computing system a software as a service configuration etc.

Aspects relating to configuration of communication channels between networked solutions can be addressed by existing approaches such as for example a cloud solutions landscape directory as described in co pending and co owned patent application Ser. No. 12 953 300. However automated discovery configuration and consumption of shared resources such as for example printers mail servers fax services directory services e.g. for contact information etc. and the like are not yet available.

To address these and potentially other issues with currently available approaches one or more implementations of the current subject matter provide methods systems articles or manufacture and the like that can among other possible advantages provide a shared resource discovery configuration and consumption module referred to herein as a DCCM that can be integrated into each component of a networked solution to enable that component to more efficiently utilize available shared resources within an existing networked solution landscape.

A landscape directory of the organization can store and track information characterizing the system landscape of networked solutions both local and external available to users within the organization and shared resources that can be called by the various networked solutions . Advantageously all networked solutions in the system landscape can be configured to use all available shared resources . However with various networked solutions and shared resources developed and supported by different vendors and administered by different entities providing access to all of the shared resources can be very time consuming. The current subject matter provides an automated approach to provisioning the various shared resources in the system landscape so that any appropriate and available shared resource can be readily discovered configured and consumed by any networked solution in the system landscape that has a need to use it.

As shown in the diagram of a system landscape in implementations of the current subject matter can provide each networked solution with a discovery configuration and consumption module DCCM that includes a discovery component a configuration component and a consumption component . It should be noted that while the following descriptions refer to these three components within a DCC module the current subject matter can also be implemented in other ways for example as one or more modules that each perform at least some of the functions described below.

At one or more points in the life cycle of a networked solution a networked solution can invoke its DCCM to optimize efficient use of available shared resources in the system landscape . For example when a new networked solution is connected to an existing system landscape it can perform an initial discovery of available shared resources that can be used in the context of the business application provided by the new networked solution . For example a networked solution for lead generation can leverage a shared fax service to send out letters via fax to potential customers.

Whenever a new shared resource is added and configured in a networked architecture the discovery component of a DCCM of a networked solution announces the new shared resource to other networked solutions connected to the architecture. To do so a networked solution invokes the DCCM with information about the shared resource that was collected from the administrator when the shared resource was configured in this networked solution .

A networked solution can refresh a list of shared resources available to the networked solution that the needs of its business application s . The refreshing of the list can be performed at a regular interval on occurrence of a triggering event e.g. when a previously available shared resource becomes unavailable or the like. Thus the networked solution locally stores information about those shared resources that it is likely to utilize once the DCCM of the networked solution has discovered them. If this locally stored information becomes outdated or if a demand for an additional shared resources arises or is otherwise is created e.g. by a change in business scope configuration the networked solution can discover additional shared resources . Re discovery occurring on a regular interval can be advantageous because the locally stored information at the networked solution can be updated prior to the first time a shared resource is needed by a business function offered by the networked resource.

A new networked solution added to an existing system landscape can retrieve configuration settings for a discovered shared resource from an existing networked solution that has been previously configured for the existing system landscape . Retrieval of the configuration settings can occur immediately after discovery by the DCCM of the new networked solution of the shared resource on first use or need by the new networked solution of the shared resource etc. and can be repeated when a shared resource becomes unavailable for example because the configuration settings are no longer valid.

A networked solution can provide configuration settings about a shared resource that has been configured in that networked solution to other networked solutions that have a need for use of the shared resource . Such configuration settings can include URLs authentication credentials configuration parameters e.g. a POP3 or SMTP URL for a shared mail server the technical username and password to authenticate mail sending and receiving settings like POP3 or IMAP SSL or unencrypted communication etc. and the like.

A networked solution can directly access shared resources of other networked solutions in a peer to peer manner without need for central hubs. To do so a shared resource specific communication channel can be determined by the discovery component . The configuration settings retrieved by the configuration component can be used.

The discovery component of the DCCM can facilitate discovery of shared resources by providing services for both announcing registering shared resources in a landscape directory and by discovering available shared resources in the landscape directory both initially and whenever new shared resources are announced. Each shared resource can receive a resource type specific identifier. A set of capabilities available from the shared resource can be announced in the landscape directory . Shared resource types can include printers mail servers fax services directory services and so on. Capabilities can include technical properties e.g. one sided printing and duplex printing location information etc. of a printer as well as business relevant criteria such as access restrictions to certain user groups e.g. restricted mass mailing capabilities of a mail server .

Whenever a new shared resource is connected to a networked solution that is to be made available to other networked solutions the discovery component can send an announcement message to the landscape directory with the shared resource type and capabilities to register the shared resource there. This set of information can define the relevance of a shared resource to other networked solutions . When a new networked solution is added to a customer system landscape the discovery component can connect to the landscape directory to request a list of available shared resources that are required for needs of a business application of the networked solution . In this request the relevant shared resource types and capabilities can be passed to filter the available list of shared resources to find those shared resources that match the business requirements.

If no matching shared resource is discovered the administrator of the new networked solution can be prompted to add a new shared resource to the networked solution that matches the requirements. Otherwise no user interaction is required. The discovery component can repeat the request for a list of available shared resources that needs of business applications of the networked solution . The repetition can be performed at specific intervals and or on certain triggering events e.g. first logon by a user each day etc. to discover shared resources as they are added to the customer s system landscape . A new interval can also be triggered when a previously available shared resource becomes unavailable.

The discovery component can handle all of these interactions transparently. Neither business users nor administrators need to be confronted with or even made aware of the discovery component and its functions. Not even a business application built on top of this technology need be aware of the underlying communication that occurs to prepare the consumption of the shared resources discovered and configured by the DCCM .

The configuration component can be activated for each shared resource discovered by the discovery component . This activation can occur initially right after discovery and again when a configuration update becomes necessary because a previously configured shared resource no longer works as expected. The configuration component can determine the primary networked solution where the original configuration settings are stored. The primary networked solution can be the networked solution in which the shared resource was originally added to the customer s system landscape . The information about the primary networked solution can be retrieved from the landscape directory by the discovery component. The configuration component of the requesting networked solution can request the configuration settings from the primary networked solution and the requesting networked solution can set its own internal configuration according to the settings retrieved from the primary networked solution . The just configured networked solution can then directly peer to peer consume the shared resource and can also act as a secondary provider of configuration settings for this shared resource if the primary networked solution becomes unavailable. If such a replacement were to occur the landscape directory can replace the primary networked solution for a shared resource with one of the secondary networked solutions .

When a primary networked solution receives a direct peer to peer request for configuration settings of one of its managed shared resources it can deliver its current local configuration settings to that networked solution . Whenever the local configuration changes in the primary networked solution the primary networked solution can announce the change to the landscape directory for other networked solutions to become aware of this change.

Again the DCCM can hide all interactions with the landscape directory and other networked solutions from users administrators and even the business application . A new shared resource added to the customer system landscape needs to be configured once in any of the connected networked solutions to be made available to all networked solutions in the system landscape without further configuration.

The consumption component can include an interface to the business application to encapsulate external shared resources and offer resource type specific APIs to the business application to consume the services provided by these shared resources . When a service request is made by the business application the DCCM can act as a proxy accepting the request from the business application determining the communication channel to the shared resource determined by the discovery component activating the configuration settings retrieved by the configuration component and forwarding the request in a peer to peer manner directly to the shared resource .

If a request to the shared resource were to fail the DCCM can apply a multi level fallback strategy to recover from the error and provide the requested service from the shared resource without need for user interaction. As part of such a fallback strategy the consumption component can trigger the configuration component to retrieve the most up to date configuration settings from the current primary networked solution for the failed shared resource . If new configuration settings were retrieved the consumption component can retry the request to the shared resource with the new settings. If the problem remains unresolved the consumption component can trigger the discovery component to obtain an updated list of available shared resources that can process the current request from the business application . If an appropriate shared resource other than the failed shared resource is available the consumption component can invoke the configuration component to retrieve the configuration settings for this other shared resource and can retry the request with the alternative shared resource . If such a change might impact the business user such as for example if a print request is sent to a different but close by printer the consumption component can provide information about the different shared resource to the business application to inform the business user. Otherwise the business user need not be notified regarding a successful retry with an alternative shared resource .

In an implementation the system landscape can include a multi tenant software delivery architecture such as that illustrated in . A multi tenant software delivery architecture can include an application server which can in some variations include multiple server systems that are accessible over a network from client machines operated by users at each of multiple organizations A C referred to herein as tenants of a multi tenant system supported by a single software delivery architecture . For a system in which the application server includes multiple server systems the application server can include a load balancer to distribute requests and actions from users at the one or more organizations A C to the one or more server systems . A user can access the software delivery architecture across the network using a thin client such as for example a web browser or the like or other portal software running on a client machine. The application server can access data and data objects stored in one or more data repositories . The application server can also serve as a middleware component via which access is provided to one or more external software components that can be provided by third party developers. In an implementation an external software component can be a networked solution as discussed above. One or more shared resources for example of the application server or a client machine accessing one of the tenants can be discovered configured and consumed by the external software component in a manner similar to that discussed above.

To provide for customization of the core software platform for each of multiple organizations supported by a single software delivery architecture the data and data objects stored in the repository or repositories that are accessed by the application server can include three types of content as shown in core software platform content system content and tenant content . Core software platform content includes content that represents core functionality and is not modifiable by a tenant. System content can in some examples be created by the runtime of the core software platform and can include core data objects that are modifiable with data provided by each tenant. For example if the core software platform is an ERP system that includes inventory tracking functionality the system content A N can include data objects for labeling and quantifying inventory. The data retained in these data objects are tenant specific for example each tenant A N stores information about its own inventory. Tenant content A N includes data objects or extensions to other data objects that are customized for one specific tenant A N to reflect business processes and data that are specific to that specific tenant and are accessible only to authorized users at the corresponding tenant. Such data objects can include a key field for example client in the case of inventory tracking as well as one or more of master data business configuration information transaction data or the like. For example tenant content can include condition records in generated condition tables access sequences price calculation results or any other tenant specific values. A combination of the software platform content and system content and tenant content of a specific tenant are presented to users from that tenant such that each tenant is provided access to a customized solution whose data are available only to users from that tenant.

A multi tenant system such as that described herein can include one or more of support for multiple versions of the core software and backwards compatibility with older versions stateless operation in which no user data or business data are retained at the thin client and no need for tenant configuration on the central system. As noted above in some implementations support for multiple tenants can be provided using an application server that includes multiple server systems that handle processing loads distributed by a load balancer . Potential benefits from such an arrangement can include but are not limited to high and reliably continuous application server availability and minimization of unplanned downtime phased updating of the multiple server systems to permit continuous availability one server system can be taken offline while the other systems continue to provide services via the load balancer scalability via addition or removal of a server system that is accessed via the load balancer and de coupled lifecycle processes such as for example system maintenance software upgrades etc. that enable updating of the core software independently of tenant specific customizations implemented by individual tenants.

Aspects of the subject matter described herein can be embodied in systems apparatus methods and or articles depending on the desired configuration. In particular various implementations of the subject matter described herein can be realized in digital electronic circuitry integrated circuitry specially designed application specific integrated circuits ASICs computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which can be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs which can also be referred to programs software software applications applications components or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the term machine readable medium refers to any computer program product apparatus and or device such as for example magnetic discs optical disks memory and Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor. The machine readable medium can store such machine instructions non transitorily such as for example as would a non transient solid state memory or a magnetic hard drive or any equivalent storage medium. The machine readable medium can alternatively or additionally store such machine instructions in a transient manner such as for example as would a processor cache or other random access memory associated with one or more physical processor cores.

To provide for interaction with a user the subject matter described herein can be implemented on a computer having a display device such as for example a cathode ray tube CRT or a liquid crystal display LCD monitor for displaying information to the user and a keyboard and a pointing device such as for example a mouse or a trackball by which the user may provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well. For example feedback provided to the user can be any form of sensory feedback such as for example visual feedback auditory feedback or tactile feedback and input from the user may be received in any form including but not limited to acoustic speech or tactile input. Other possible input devices include but are not limited to touch screens or other touch sensitive devices such as single or multi point resistive or capacitive trackpads voice recognition hardware and software optical scanners optical pointers digital image capture devices and associated interpretation software and the like.

The subject matter described herein can be implemented in a computing system that includes a back end component such as for example one or more data servers or that includes a middleware component such as for example one or more application servers or that includes a front end component such as for example one or more client computers having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described herein or any combination of such back end middleware or front end components. A client and server are generally but not exclusively remote from each other and typically interact through a communication network although the components of the system can be interconnected by any form or medium of digital data communication. Examples of communication networks include but are not limited to a local area network LAN a wide area network WAN and the Internet. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

The implementations set forth in the foregoing description do not represent all implementations consistent with the subject matter described herein. Instead they are merely some examples consistent with aspects related to the described subject matter. Although a few variations have been described in detail herein other modifications or additions are possible. In particular further features and or variations can be provided in addition to those set forth herein. For example the implementations described above can be directed to various combinations and sub combinations of the disclosed features and or combinations and sub combinations of one or more features further to those disclosed herein. In addition the logic flows depicted in the accompanying figures and or described herein do not necessarily require the particular order shown or sequential order to achieve desirable results. The scope of the following claims may include other implementations or embodiments.

