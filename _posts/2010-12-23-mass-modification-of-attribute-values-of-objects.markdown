---

title: Mass modification of attribute values of objects
abstract: Various embodiments of systems and methods for mass modification of attribute values of objects are described. The methods include systematically analyzing attributes assigned to multiple objects, displaying the results to the user, enabling mass modification functionality in the user interface, and providing the user a comprehensive variety of options on how to proceed with mass editing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08589453&OS=08589453&RS=08589453
owner: SAP AG
number: 08589453
owner_city: Walldorf
owner_country: DE
publication_date: 20101223
---
The field generally relates to the software arts and more specifically to methods and systems for mass modification of attribute values of objects.

In the computer world an attribute defines an object an element or file. It generally represents a property of a property. Attributes can be considered as metadata. An attribute of an object usually consists of a name and a value of an element a type or class name of a file a name and extension. Each named attribute may have an associated set of rules called operations. An object definition can be extended by imposing data typing a representation format a default value and legal operations rules and restrictions are all potentially involved in defining an attribute. For example in computer graphics line objects can have attributes such as thickness with real values color with descriptive values such as brown or green or values defined in a certain color model such as RGB etc. Markup languages such as HyperText Markup Language HTML and eXtensible Markup Language XML use attributes to describe data and the formatting of data. In the C programming language attributes are metadata attached to a field or a block of code equivalent to annotations in Java. Attributes are accessible through reflection. In many relational or multi valued database systems relative to SQL tables are files rows are items and columns are attributes. In both the database and code the attribute is synonymous with a property and variable although attributes can be further defined to contain values and sub values.

Editing a large number of objects that have a plurality of attributes is a time consuming task and may lead to decrease in the system s performance and response time. Some groups of these objects may have identical attributes which one might want to remain identical throughout the given group even when some changes have to be performed on the these attributes. Without a solution for editing a plurality of attributes at the same time it can be a very cumbersome task to first identify the members of group of objects with identical attributes and then change them possibly even one by one.

Various embodiments of systems and methods for mass modification of attribute values of objects are described herein. In an embodiment the method includes receiving a selection of a set of objects from a plurality of objects the plurality of objects displayed in a user interface and receiving a selection of at least one setting to be edited for the set of objects wherein the setting includes a plurality of attribute values for the set of objects. The method also includes determining statistical distribution on the plurality of attribute values of the set of objects according to the received setting and identifying one or more subsets of objects with equal attribute values from the set of objects in response to the determined statistical distribution. Finally the method includes enabling a mass modification functionality for the one or more subsets of objects in the user interface upon identifying the one or more subsets of objects.

In an embodiment the system includes a database storage unit for storing a plurality of objects. The system includes a modification engine including a set of user interfaces to display the plurality of objects for selection of a set of objects from the plurality of objects the set of objects to be edited based on a selected setting from the set of user interfaces the setting including a plurality of attribute values. In addition the system includes an analysis engine to determine statistical distribution on the plurality of attribute values of the set of objects according to the selected setting and to identify one or more subsets of objects with equal attribute values from the set of objects in response to the determined statistical distribution. Finally the system includes an analysis customizing component to store a threshold based on which a mass modification functionality is enabled for the one or more subsets of objects in the set of user interfaces upon identifying the one or more subsets of objects.

These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof presented in connection with the following drawings.

Embodiments of techniques for mass modification of attribute values of objects are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiment.

A system and a method are proposed by which groups of attributes that have a high probability of having a number of values that is much lower than the number of objects are identified and suitably presented to the user. Then the user is given a number of options on how to proceed with editing these groups. For example leaving the groups of attributes intact and just homogeneously modifying a given attribute creating new groups from the old ones separating individual members from a group into one or more new groups of attributes and so on. In various embodiments the attributes assigned to multiple objects are analyzed the result is displayed to the user and the user is given the opportunity of mass editing the attributes of these objects.

In various embodiments the mass modification of attributes feature is enabled when the number of objects is high and the statistical analysis results in distributions that are relatively sharp. For example if there are 200 objects and all of them are different i.e. a flat rather than sharp statistical distribution is provided meaning that they have different attributes then the mass modification feature is not enabled as there would be 200 different groups each group having just one object. In that case no mass modification will be available and the user has to edit each object individually and take 200 decisions. Therefore the mass modification of attributes is best usable when there are a large number of objects with common attributes. In various embodiments the initial stage of administration begins with uniform data e.g. personnel data where each object has the same data e.g. attributes but during the course of administration some of the attributes get modified. In the end the number of objects with attributes still similar to the original state is likely to remain very high thus making the statistical distribution quite sharp.

In various embodiments the mass modification of attributes may be provided as an abstract implementation of the attribute mass modifier . The abstract implementation can be used via adaptor by application only if there is a large number of objects with a small number of attributes with relatively sharp statistical distribution then the mass modification of attributes will be active enabled on the user interface editor for effective and rapid modification of groups of attributes. Object persistency may be a database that stores the plurality of objects used by application . Analysis engine performs the statistical analysis based on the objects stored in the object persistency including but not limited to how many objects there are how many different groups with equal attribute values there are and so on.

At block a plurality of objects needed for performing a task in an application is obtained from object persistency . In various embodiments the task may be in the area including but not limited to administration and configuration. The objects are stored in a database table inside the object persistency with a set of attributes each attribute having a value. The obtained plurality of objects is displayed in a user interface UI of the application allowing a user e.g. a system administrator to administer and configure the plurality of objects. At block a selection of a set of the plurality of objects is received in response to a user interaction with the UI of the application. At block a selection of at least one setting to be edited is received in response to a user interaction with the UI of the application. The settings represent some administrative or configuration settings that the user wants to edit for the set of objects for example notification schedule and planned absences .

At block mass modification functionality is activated for a certain type of object and at least a subset of its attributes. At block the statistical distribution of attribute values according to the selected settings is determined by the analysis engine . This means that the analysis engine determines how many objects of the set of objects have equal attribute values of the selected settings. It may be the case that some objects from the set have equal some attribute values and other objects may have equal other attribute values. At block at least one subset of objects from the set of objects is identified to have equal attribute values. At block the identified subset of objects is organized in a group and displayed to the user. If the number of values of at least one attribute N AV is significantly smaller than the number of objects N Obj i.e. N AV

At block the mass modification functionality becomes enabled for the user in the UI based on a threshold. The threshold represents a proportion of the number of organized groups N Gr to the number of objects in the set of objects according to the selected setting. In various embodiments if N Gr

In various embodiments the user may modify attribute values of different or same groups multiple times. Each time the mass modification functionality becomes active the analysis engine will determine which objects have equal attributes and based on that the groups will be formed. There may be the case where the attribute values of the objects are different for all or most of the objects in that case the mass modification of attributes functionality will not be available to the user as there will be no need for mass modification. The user will still be able to edit a particular attribute value for a given object. The availability of the mass modification functionality depends on the threshold which the user can configure.

Some embodiments of the invention may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment of the invention may be implemented using Java C or other object oriented programming language and development tools. Another embodiment of the invention may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather the scope of the invention is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

