---

title: Identifying bots
abstract: A method of identifying if a web client has browser capabilities. An originating machine receives a web page request from the web client. The originating machine generates a page request id (PRID) and a script which, when executed by a web client with a browser, regenerates a PRID, and embeds the script in a response. The originating machine sends the response to the web client for the web client to process and, if the web client is capable, to execute the embedded script, thereby to regenerate a PRID, and to return the regenerated PRID to the originating machine. The originating machine compares the returned regenerated PRID with the generated PRID, a match indicating that the web client has browser capabilities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09300683&OS=09300683&RS=09300683
owner: FIREBLADE LTD.
number: 09300683
owner_city: Tel Aviv
owner_country: IL
publication_date: 20100610
---
The present invention relates to robotic internet surfing done by so called bots and in particular to detecting suspicious behavior of bots and barring or restricting such behavior.

Bots also known as web robots spiders or web crawlers are software applications that run automated tasks over the Internet. Typically bots perform tasks that are both simple and structurally repetitive at a much higher rate than would be possible for a human being. The largest usage of bots is web crawling in which an automated script fetches analyses and files information from web servers. Bots are used for many purposes mainly for browsing mapping and indexing data monitoring the behavior of sites advertising purposes and for commercial or academic research. In addition to their uses outlined above bots may also be implemented where a response speed faster than that of human s is required for example gaming bots and auction site robots or less commonly in situations where the emulation of human activity is required for example chat bots . Unfortunately there are also malicious bots such as spam bots that harvest email addresses from contact forms or guestbook pages downloader programs that suck bandwidth by downloading entire web sites web site scrapers that grab the content of web sites and re use it without permission on automatically generated doorway pages and custom crawlers tailored for specific websites to steal information typically regarding index sites classifieds and large database sites or spam typically regarding forums web mail and social networks and the like.

From a technical aspect bots can be divided into three main types The first type is protocol based bots. These bots continuously generate a request using a certain protocol such as for example HTTP or FTP and receive a response which is typically sent to a parser for analysis. These bots are simple and usually operate fast. They do not render the content they receive and hence have no browser capabilities. The second type is application bots which are based on protocol based bots but have more sophisticated parsing tools that render and interpret portions of the response typically by having JavaScript capabilities . The third type is browser bots which are browsers such as for example Internet Explorer Firefox etc. or browser platforms such as for example Webkit being controlled by an automation script. Browser bots are mechanically operated rather than being controlled by a human user.

There have been many attempts to identify and filter out malicious bots such as for example by analyzing log files and or by analyzing the frequency of HTTP requests per IP or by using a CAPTCHA. A CAPTCHA Completely Automated Public Turing test to tell Computers and Humans Apart is a type of challenge response test used in computing to ensure that the response is not generated by a computer. The process usually involves one computer a server asking a user to complete a simple test which the computer is able to generate and grade. Because other computers are unable to solve the CAPTCHA any user entering a correct solution is presumed to be human. Thus it is sometimes described as a reverse Turing test because it is administered by a machine and targeted to a human in contrast to the standard Turing test that is typically administered by a human and targeted to a machine. A common type of CAPTCHA requires that the user types letters or digits from a distorted image that appears on the screen.

CAPTCHAs are vulnerable to hackers both by sophisticated custom made OCR systems which recognize the distorted text or by simple relay hack A bot displays the CAPTCHA to a human user who fills it in in order to let the bot carry on its crawling activity . CAPTCHAs are typically presented to users only in the event of form filling in order to avoid interruption to web application flow thus any activity done before or after filling the form can be easily driven by a bot. Another attempt to identify bots is honey pots or spider traps which are normally web pages accessible only from transparent links e.g. white text on white background . Such honey pots assume those who browse these hidden pages are bots. Honey pots are only useful for identifying generic bots such as email harvesters.

Unfortunately known bot identification methods can identify a suspicious activity by the user IP level or by the Session ID level. If a session is blocked the bot can easily restart another session typically by deleting a cookie file while if an IP is blocked legitimate users who may try to access the site from the same IP are blocked as well. Further more these methods tend to yield too many false positives false identification of bots or if applied too carefully too many false negatives.

There is thus a need in the art for more efficient and reliable method for identifying bots and blocking them with less interruption to genuine human users.

This need is met by the method according to claim . Other features of the invention are set out in the subsequent claims.

According to one embodiment of the present invention there is provided a method which differentiates an HTTP request from a client having browser capabilities from any other machine s request or software driven HTTP requests. A client having browser capabilities means any client having script interpreter or runtime environment and also having capabilities of accessing page and browser objects and rendering them into a document and a document object model DOM .

According to another embodiment of the present invention there is provided a mode for monitoring requests while continuing to serve the requested content by the web server. This mode is termed hereinafter the passive mode . According to this embodiment the requests are monitored for distinguishing between requests generated by clients having browser capabilities and any other client requests. Monitoring means capturing and analyzing traffic in a non intrusive manner as opposed to blocking which takes place on the active mode . The passive mode optionally enables decision making rules before taking any active step. Such decision making rules can be for example and without wishing to be limited allowing the handling of specific requests from a client not having browser capabilities which are classified as being legitimate clients. Such legitimate users can be for example and without wishing to be limited a search engine indexing spider. Such decision making rules can optionally and without wishing to be limited classify the user according to level of suspiciousness for assigning one or more restrictions according to the level of suspiciousness and by the identity of the originator of the requests.

According to another embodiment of the present invention there is provided a mode restricting requests that are detected as non browser requests from receiving any web site page contents. This mode is termed hereinafter the active mode . The active mode filters out any HTTP page request not generated by a browser by not serving the desired contents to that request.

According to some embodiments of the invention non browser clients which are considered as protocol bots or application bots are detected by generating a unique page request id hereinafter PRID per each client HTTP page request embedding a client side script within the response that is capable of regenerating and returning the same PRID only on a client having browser capabilities. Page request id means a unique identification of the page request which is optionally composed of a random and or unique combination of numbers and or characters letters and is dynamically generated per each page request received from a client. PRID generation is optionally performed by the web server to which the request was sent via for example and without wishing to be limited a server side code such as PHP .Net framework languages Python and the like or a server filter such as ISAPI . Alternatively a PRID can also be generated by a logical or physical third party server or by any logical or physical network machine positioned in the network of the web server to monitor incoming traffic such as a firewall a web application firewall and the like. The machine in which PRID is generated is termed hereinafter the originating machine . The generated PRID string is optionally stored on the originating machine optionally in a session scope variable. The originating machine either generates or outputs a pre generated client side script optionally but not limited to JavaScript which is embedded into the page returned to the client. The client side script is intended when interpreted and ran by a client having browser capabilities to regenerate and return on a separate request optionally HTTP get post Ajax or on a cookie sent with the next request the same PRID to the originating machine. The script sent to the client optionally comprises a sequence of functions or small sub scripts which will generate the sequence of characters that comprise altogether the PRID. The client side code which regenerates the PRID on a client that has browser capabilities is termed herein after regeneration challenge . The set of client side functions or sub scripts that are used to compose PRIDs for the regeneration challenge can optionally be changed from time to time either generated by dedicated software which resides on the originating machine or by a third party machine also referred to hereinafter as controller machine serving client side code templates to the originating machine. When the client that receives the embedded regeneration challenge returns the PRID to the originating machine the machine compares between the PRID it generated for the same page request and the PRID returned by the client. In case a match is found it is determined that the original request was made by a client having browser capabilities since only such a client would have run the embedded code regenerated the PRID correctly and returned it on a separate request. The generated PRIDs and the returned regenerated PRIDs can be sent to the controller machine which inspects them and constantly checks match ratios and decides if a certain client is a bot based on configurable match ratio rules. Match ratios may need to be set and calculated since it is possible that even on browser clients certain requests will not return a regenerated PRID if for example the request was quickly followed by another request before the client side regeneration challenge was run.

According to some embodiments a controller machine produces banks of functions or sub scripts each capable when run on a browser of generating a unique character or a certain string which can serve as a part of a PRID. The controller machine once in a while updates the functions or sub scripts bank that it generates on the originating machine. For example only a service machine may produce a bank of ten different client side functions or sub scripts that yield when run on a browser the ten digits 0 9. This bank of functions will be copied to the originating machine typically a web server though a network appliance may serve as both the originating machine and controller machine which may for a certain page request generate a random PRID such as 194726 . For this specific PRID the originating machine will collect from its functions bank the six functions that generate the six digits 1 9 4 7 2 6 and create a single script which comprises all of them in a sequence. This script generates the string 194726 when ran on a browser. This script is the regeneration challenge. The originating machine will embed the regeneration challenge into the response sent to the client. The originating machine stores the string 194726 locally and expects to get it on a separate request during the same user session. The PRIDs received during a session may be sent back to the controller machine where match ratios can be calculated and sophisticated rules can be applied to decide if a certain session is generated by a bot or if a certain IP contains sessions generated by a bot and whether to take action against this bot.

According to another embodiment of the present invention the regeneration challenge script is comprised both of small document portions typically and without wishing to be limited HTML or XML and a script which runs certain queries on the document object model DOM which is supposed to be generated on a browser which renders the document. The query can inspect certain objects attributes and values in the DOM and return characters or strings which will altogether serve to regenerate the PRID. In this manner clients having a script runtime environment but not having document rendering capabilities will not be able to create the DOM and return the strings that will comprise the PRID. Typically a set of small documents will be generated on the controller machine each having document objects such as but without wishing to be limited layers tables style sheets each having IDs attributes and values generated by the controller machine with script functions that each yield a known character or string when run on a browser which rendered the document. For example only a document portion can be a DIV tag containing text styles tables and other HTML elements with attributes and values which can be read through the document or the DOM by a script. Furthermore since different web browser versions may generate slightly different DOMs from the same document for example certain object attributes may have capital letters on one browser and non capital on another browser this approach can serve to identify and verify the web browser type and version according to minor differences in the regenerated and returned PRID.

According to another embodiment of the present invention originating machine or controller machine receives and stores on a database a memory collection or array or any other means of storage a list of the generated PRIDs. Per each PRID originating machine or controller machine also stores an indication whether a regenerated PRID was returned on a separate request to the originating machine. If a certain user session or a certain IP address has more than a predetermined number and or ratio of PRIDs not followed by client side PRID submissions this session or IP is optionally suspected one in which a client not having browser capabilities is engaged and therefore optionally as having protocol or application bot. Human decision or state machine rules can optionally be further applied to decide what measures if at all should be taken against this session or IP.

According to some embodiments the active mode can optionally restrict a client not having browser capabilities from receiving contents from web application by presenting the PRID regeneration challenge to the client before serving the requested content as opposed to the passive mode in which the PRID regeneration challenge is served with the contents. When it is decided to filter out clients without browser capabilities from a certain IP or session or from specific sections of a website the originating machine first searches any request received from that IP or session for an embedded PRID for example within query string within any HTTP header value or any other collection of values normally sent as part of a request . In case the request does not have a PRID the originating machine or web server collects all request information such as and without wishing to be limited the requested URL URI the HTTP header values and query string values which are required to duplicate the request. The originating machine generates a PRID and then in response to the request instead of running the server side code which resides at the requested URL and releasing the requested content to the client the originating machine releases a page with client side code that is intended if interpreted and run correctly by a client having browser capabilities to reproduce the same request sent before with the regenerated PRID embedded to it either as an additional HTTP header or query string value or with any collection of values typically sent as part of a request . This response serves as a gateway validating the presence of browser capabilities before rendering and serving the requested contents. Typically but without wishing to be limited the gateway response will include the PRID regeneration challenge and a form which includes all the HTTP get post keys and values from the previous requests and another field into which the PRID will be inserted. The form will auto submit itself via client side script to the web server hence the original request is duplicated with a regenerated PRID embedded to it as a get or post value or as a cookie . The gateway response may include additional functions to check the validity of the request and the client requesting it. For instance a script which checks if the page is positioned at top of the browsers documents hierarchy or as a child such as iFrame and whether the top documents belongs to the same site domain. The script may be set not to submit the form if some conditions are found dissatisfying such as if the document is not a top document or blurred not focused and thus block unaware automation such as Cross Site Request Forgery and non human operated browsers and browser objects.

Any request on that specific IP or session which arrives at the originating machine with a recognized PRID embedded in it will be responded to with the requested content while if there is no PRID or unrecognized one the PRID regeneration challenge will be served instead. Recognized PRID means a PRID which was generated by originating machine for a HTTP request received recently from that same IP or session.

In some scenarios a client may enter a request loop if it does not have full browser and or session capabilities since if it generates a wrong PRID it gets a new gateway with a new PRID and so forth. In order to avoid this situation optionally if a request is received with a PRID not recognized as one generated before for that IP or session the next generated PRID may contain a flag optionally an extra character which signals the originating server not to send another gateway response regeneration challenge when another consecutive request with an unrecognized PRID is made from the same client. To such a second response the web server can optionally reply with a message asking the user to turn sessions cookies on.

According to some embodiments a state machine rule engine may score the suspicious internet users and instantly restrict the internet behavior of such users according to the scores. Such state machine can be set to recognize harmless bots and keep their activity uninterrupted while restricting suspicious users. Such a restriction can be for example and without wishing to be limited by raising a gateway challenge a CAPTCHA or even blocking entirely bad IPs and sessions according to the parameters gathered and according to the state machine policy rules. The state machine logic optionally resides separately from the web server on a controller machine.

According to some embodiments the present invention provides a controller machine which according to state machine rules or any rule set can trigger the web server to apply certain challenges or sanctions against certain sessions or certain IP addresses. If the controller machine concludes that a certain IP or session is suspected it sends to the web server or alternatively to a central storage unit which is accessible to all application web servers typically mem cache or to a network appliance an instruction to apply the chosen sanction or challenge on the certain IP or session such as but not limited to regeneration challenge CAPTCHA complete block or Sandbox mode . The web server central storage unit or network appliance will store the instructions telling which sanctions or challenges are applied to which IPs and or sessions. When a new request from a listed IP and or session will be made to a web server it will first lookup its instructions collection and if an instruction is applicable it will respond with the sanction or challenge that is listed for the IP or session.

Unless otherwise defined all technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this invention belongs. The materials methods and examples provided herein are illustrative only and not intended to be limiting.

Implementation of the method and system of the present invention involves performing or completing certain selected tasks or stages manually automatically or a combination thereof. Moreover according to actual instrumentation and equipment of preferred embodiments of the method and system of the present invention several selected stages could be implemented by hardware or by software on any operating system of any firmware or a combination thereof. For example as hardware selected stages of the invention could be implemented as a chip or a circuit. As software selected stages of the invention could be implemented as a plurality of software instructions being executed by a computer using any suitable operating system. In any case selected stages of the method and system of the invention could be described as being performed by a data processor such as a computing platform for executing a plurality of instructions.

Although the present invention is described with regard to a computer on a computer network it should be noted that optionally any device featuring a data processor and or the ability to execute one or more instructions may be described as a computer including but not limited to a PC personal computer a server a minicomputer a cellular telephone a smart phone a PDA personal data assistant a pager TV decoder game console digital music player ATM machine for dispensing cash POS credit card terminal point of sale electronic cash register. Any two or more of such devices in communication with each other and or any computer in communication with any other computer may optionally comprise a computer network .

The present invention is of a method for detecting bots and in particular for detecting application and protocol based bots and for restricting malicious bots. It does this by identifying whether a web page request comes from a web client with browser capabilities. The invention is also of machines that run the method.

According to another embodiment of the present invention there is provided a mode for monitoring requests while keep serving the requested contents by the web server. This mode is termed herein after as passive mode . According to this embodiment the requests are monitored for distinguishing between requests generated by clients having browser capabilities and any other client requests. By monitoring is meant capturing and analyzing traffic in a non intrusive manner. The passive mode optionally enables to apply decision making rules before taking any active step. Such decision making rules can be for example and without wishing to be limited allowing the handling of specific requests from a client not having browser capabilities which are classified as being legitimate clients. Such legitimate users can be for example and without wishing to be limited a search engine indexing spider. Such decision making rules can optionally and without wishing to be limited classify the user according to level of suspiciousness for assigning one or more restrictions according to the level of suspiciousness and by the identity of the originator of the requests.

Referring now to the drawing in stage a web client issues a request for a page from a browser. In stage the module in the web server which is responsible for detecting suspicious bots generates a page request id which is a unique identification of the request. In stage the page request id along with the requested content is sent from the web server to the controller machine as a page request event. In stage optional an Iframe is generated and calls additional client side files from the controller machine which are being embedded in the returned page. In this controller client side script file dynamic data gathering functions can be embedded to collect data that will be sent further on the process at stage . In stage page request id reconstruction functions are generated. Page request id reconstruction functions are functions which when invoked generate the page request id. In stage the code is embedded in the reply and is sent to the web client. In stage which is performed after receiving a reply from the web server the reply is processed. In stage which is performed only if the client has browser capabilities the page request id is generated out of the PRID regeneration functions. In stage the page request id is sent back to the web server with an additional request for example and without wishing to limit to Ajax HTTP get or HTTP post. Alternatively the PRID can be sent directly to the controller machine and not to the originating machine. In stage which is performed when the message sent in stage arrives in the web server an asynchronous message is sent to the controller machine with the regenerated PRID to report that PRID was regenerated and returned. In stage which is performed when the controller machine receives the message sent in stage the regenerated PRID is stored on the controller machine. If the regenerated PRID matches the originally generated PRID a pair of same PRIDs are received and stored on the controller machine. In stage which is performed by the controller machine after receiving the first event with the page request id the event is logged for performing a parity check process. The parity check is performed for all the requests comprising the same IP address as the current request. Such a parity check does not comprise the current request but only the requests prior to this request. In stage the number of page request events that are not paired with a corresponding page request event for the same IP and thus indicate a request from a client not having browser capabilities are compared to a predefined threshold. In stage which is performed when the disparity value exceeds the predefined threshold a message for restricting the IP is sent to the web server. According to one embodiment the message can be for blocking the IP. According to another embodiment the message can be for restricting the IP according to predefined rules. In such a case the message can optionally be sent to another server which can optionally apply the rules and sent the restriction command to the web server. In stage the IP is blocked if required.

If the answer to the question is there a PRID variable in the request is yes the system assumes that this is a second request and the PRID is extracted from the request and saved in stage . In stage the system checks whether that PRID is a key in the PRID session array. If so then the request variables are restored from the PRID session array in stage . The PRID key in the PRID session array is cleared in stage and in stage the requested HTTP page is sent to the client and is processed by the client in stage . If the answer to the question posted in stage is no PRID is not a key in session array then this is a specific case in which the PRID is a leftover from a previous request. In this case the system extracts the PRID flag in stage . In stage the system checks if the flag variable is true. If it is not true it sets it to true in stage in order to mark the situation in which there was a PRID request variable but it was not found in the session array. Then in stages it resends the HTTP page shell again to generate a response comprising PRID reconstruction random functions. If it comes back again with the PRID flag as true then the system checks in stage if this is a veteran session. If so then stages are performed to generate a response comprising PRID reconstruction random functions. If the session is not marked as veteran in stage it means that something is wrong as this request has been processed but there was no trace for it in the session. This situation can happen if the request was processed by a browser that has its cookies mode turned off. In this case a proper message is sent to the client. This flag is used for preventing infinite loops in the case that there are no cookies in the browser.

While the invention has been described with respect to a limited number of embodiments it will be appreciated that many variations modifications and other applications of the invention may be made.

