---

title: System and method for managing long names in an application programming interface
abstract: Software managing long names in an application programming interface receives a request to perform a requested operation on one or more fields, the application comprising a first operation operable to perform the requested operation on at least one field type. The software determines whether the field type of any of the fields is incompatible with the first operation. If the field types of the one or more fields are compatible with the first operation, then the software performs the requested operation on the one or more fields using the first operation. If the software determines that the field type of at least one of the fields is incompatible with the first operation, then it converts the request into a call for a second operation operable to perform the requested operation on the one or more fields and performs the requested operation using the second operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08286148&OS=08286148&RS=08286148
owner: CA, Inc.
number: 08286148
owner_city: Islandia
owner_country: US
publication_date: 20100202
---
The present application is a continuation of U.S. patent application Ser. No. 11 047 101 filed on Jan. 31 2005 now U.S. Pat. No. 7 676 797 the contents of which are hereby incorporated herein by reference in their entirety.

This disclosure generally relates to data processing and more specifically to as system and method for managing long names in an application programming interface.

Migration to new architectures frequently presents difficulties associated with legacy applications. For example the permitted size of fields may be expanded to allow larger values which may create difficulties in using those values in legacy applications. In a particular case an application programming interface using Extended Binary Coded Decimal Interchange Code EBCDIC may migrate to UNICODE. A Long Name Manager is typically a layer in the application programming interface that expands tokens representing longer strings in character fields which may overcome some compatibility problems in legacy applications. But incorporating the Long Name Manager into legacy applications may still require changing a large amount of source code to enable calls to the functions of the Long Name Manager.

This disclosure provides a system and method for managing long names in an application programming interface. Various embodiments reduce or eliminate drawbacks associated with conventional systems. In one embodiment software managing long names in an application programming interface receives a request to perform a requested operation on one or more fields the application comprising a first operation operable to perform the requested operation on at least one field type. The software determines whether the field type of any of the fields is incompatible with the first operation. If the field types of the one or more fields are compatible with the first operation then the software performs the requested operation on the one or more fields using the first operation. If the software determines that the field type of at least one of the fields is incompatible with the first operation then it converts the request into a call for a second operation operable to perform the requested operation on the one or more fields and performs the requested operation using the second operation. The details of one or more embodiments of the disclosure are set forth in the accompanying drawings and the description below. Particular features objects and advantages of the disclosure will be apparent from the description and drawings and from the claims.

Environment may be a distributed client server system but environment may also be a standalone computing environment or any other suitable environment such as an administrator accessing data stored on server without departing from the scope of this disclosure. Generally environment provides an API that includes an instruction emulator having functions that can be called based on requests from legacy applications . Legacy applications refer to any API in environment intended to interface with a long name manager and or other APIs that use fields incompatible with the particular legacy application . For example the fields used by other APIs may exceed a characteristic maximum size associated with a particular legacy application . In one example of such a maximum size character fields in a particular legacy application using EBCDIC may be limited to 8 or 18 bytes while other APIs may use larger character fields. In another example the field may contain an indicator such as a token representative of additional information such that the total size of the field with the additional information would exceed a maximum size for the legacy application . In another example legacy application may use one type of characters such as EBCDIC while other APIs use a different character scheme such as UNICODE. In this example environment au place tokens in these fields as well thereby shielding the complexities of character conversion from most of legacy application .

 Requests refer to any command instruction message query or similar information that includes an identifier associated with one or more functions of a long name manager . Although the term legacy applications is used it should be understood that legacy applications need not be in place in environment before other APIs are added legacy applications may also be introduced into environment concurrently or subsequently to the installation of other APIs. Emulator in turn converts request into calls used to call functions of long name manager . Thus emulator may allow functions of long name manager to be called based on requests without requiring legacy applications to handle fields incompatible with legacy application . This in turn may allow legacy applications to be used with other APIs without extensive changes to the source code. For example environment provides emulator and long name manager to allow legacy code written in assembler for a z Architecture environment to work with UNICODE data and or data fields that have expanded in length. The service provides a framework for emulating instructions using other layers of software that perform token management and character conversions. The token management service can generate a token to represent a string and return the string value for a given token. Instead of expanding a field in a data structure to accommodate a larger string a token that represents the string is put in the field. For example environment may implement or include the z architecture. In this architecture assembler language coding the instruction to compare two fields is a CLC instruction. The instruction to copy the contents from on field to another is a MVC instruction. These instructions will not typically work when one field is greater than the other. Therefore environment may implement two macros MVC and CLC that emulate the MVC and CLC z architecture instructions. In this example a macro is a z architecture assembler language feature that allows defining a group of instructions that can be generated from a single line of source code. In other words environment typically allows existing code to continue to work with fields that contain tokens by changing the CLC or MVC in an instruction to CLC or MVC . Accordingly any example CLC instruction may be changed to a CLC macro call and the operands do not need to be changed. The expansion of the macro includes the original CLC instruction however instead of the instruction being executed directly a call to an emulation routine is generated. The address of the instruction to emulate is passed as a parameter. The expansion of this example CLC macro requires only twelve additional bytes whereas a standard long name call may require over one hundred bytes.

Returning to the illustrated embodiment server includes memory and processor and comprises an electronic computing device operable to receive transmit process and store data associated with . For example server may be any computer or processing device such as a mainframe a blade server general purpose personal computer PC Macintosh workstation Unix based computer or any other suitable device. Server may be considered to provide an API for applications executing on clients to resources . Generally provides merely one example of computers that may be used with the disclosure. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. As used in this document the term computer is intended to encompass a personal computer workstation network computer or any other suitable processing device. For example although illustrates one server that may be used with the disclosure environment can be implemented using computers other than servers as well as a server pool. Server may be adapted to execute any operating system including z OS Linux Intel or Linux 390 UNIX Windows Server or any other suitable operating system. According to one embodiment server may also include or be communicably coupled with a web server and or an SMTP server.

Memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. In this embodiment illustrated memory includes emulator and long name manager . Emulator represents a set of instructions executed by processor to convert requests received from clients to long name instructions which refers to any calls for functions of long name manager . Long name manager represents any set of instructions executed by processor to make available various operations on fields that are incompatible with a type of field processed by legacy application . It may be the case that legacy application is not capable of performing the operation on fields of that size that the operation can be performed but would be performed substantially less efficiently than desired or that there is another reason that it would be unsuitable for legacy application to perform the operation on that type of field. In any case emulator allows legacy applications to call functions of long name manager to process field types that otherwise could not or would not be processed by legacy application .

Server may also include interface for communicating with other computer systems such as client over network in a client server or other distributed environment. In certain embodiments server receives requests from local or remote senders through interface for storage in memory and or processing by processor . Generally interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with network . More specifically interface may comprise software supporting one or more communications protocols associated with communications network or hardware operable to communicate physical signals.

Network facilitates wireless or wireline communication between computer server and any other local or remote computer such as clients . Indeed while illustrated as two networks internal network and external network respectively network may be a continuous network without departing from the scope of this disclosure so long as at least portion of network may facilitate communications between senders and recipients of requests and results. In other words network encompasses any internal and or external network networks sub network or combination thereof operable to facilitate communications between various computing components in environment . Network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. Network may include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the global computer network known as the Internet and or any other communication system or systems at one or more locations.

Client is any local or remote computing device operable to receive requests from the user via a user interface such as a GUI a CLI Command Line Interface or any of numerous other user interfaces. Thus where reference is made to a particular interface it should be understood that any other user interface may be substituted in its place. In various embodiments each client includes at least GUI and memory and comprises an electronic computing device operable to receive transmit process and store any appropriate data associated with environment including legacy applications and bootstrap area BSA . Generally BSA is a small block such as about 100 bytes that the user or client makes addressable for emulator calls. An initialization call on the BSA is often done before it is used. Once initialized BSA may be copied and multiple blocks can be referencing the same work area. The work area is any block that may be supplied by the caller on an initialization call. If not supplied by the user one can be obtained. Typically each work area is anchored to the BSA . It contains the save area that will be used by the initialization routine and the instruction emulation routine and working storage for the emulation routines.

It will be understood that there may be any number of clients communicably coupled to server . For example illustrated clients include one local client and one client external to the illustrated portion of enterprise . Further client and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover for ease of illustration each client is described in terms of being used by one user. But this disclosure contemplates that many users may use one computer or that one user may use multiple computers to submit or review requests via GUI . As used in this disclosure client is intended to encompass a personal computer touch screen terminal workstation network computer kiosk wireless data port wireless or wireline phone personal data assistant PDA one or more processors within these or other devices or any other suitable processing device. For example client may comprise a computer that includes an input device such as a keypad touch screen mouse or other device that can accept information and an output device that conveys information associated with the operation of server or clients including digital data visual information or GUI . Both the input device and output device may include fixed or removable storage media such as a magnetic computer disk CD ROM or other suitable volatile or non volatile media to both receive input from and provide output to users of clients through the display namely GUI .

GUI comprises a graphical user interface operable to allow the user of client to interface with at least a portion of environment for any suitable purpose. Generally GUI provides the user of client with an efficient and user friendly presentation of data provided by or communicated within environment . For example GUI may be a front end of an application executing on client that is operable to submit SQL queries to one or more data resources . GUI may comprise a plurality of customizable frames or views having interactive fields pull down lists and buttons operated by the user. In one embodiment GUI presents information associated with queries and buttons and receives commands from the user of client via one of the input devices. Moreover it should be understood that the term graphical user interface may be used in the singular or in the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore GUI contemplates any graphical user interface such as a generic web browser or touch screen that processes information in environment and efficiently presents the results to the user. Server can accept data from client via the web browser e.g. Microsoft Internet Explorer or Netscape Navigator and return the appropriate HTML or XML responses using network . For example server may receive such a request from client using the web browser and then execute an operation in response.

In operation environment allows legacy applications to function in environment with other APIs. To incorporate legacy applications into environment legacy applications are altered in order to change a base set of operation into modified operations that include one or more identifiers corresponding to functions of long name manager . For example each of the modified operations may have or accept two operands OP and OP. In this example embodiment the format of an operand is operand operand type operand ccsid operand length override where 

When an operation on a field is requested legacy application executes modified operation . In a particular embodiment modified operations check to see whether the field is compatible with legacy application by examining the field for an indicator such as a token placed in the field. If the field is compatible with legacy application legacy application may be performed in the same manner as it would have been performed per the unmodified instructions. On the other hand if the field is determined not to be compatible with legacy application modified operation communicates a request to emulator which converts request into a long name instruction. For example the instruction to emulate and its operands are passed as parameters. Before invoking register register are typically saved in illustrated BSA . This is both to preserve the callers registers and because emulating the instruction often uses the contents of the base registers for the operands when the service was invoked. If operand types or operand ccsid information were not explicitly specified default values are usually assigned. The standard instruction prefix may be calculated retrieved identified or otherwise determined based on the operand types and CCSID specifications. For example emulator may be operable to receive control in 31 bit mode with R1 containing the address of BSA and R0 containing the address of the instruction prefix followed by the instruction to be emulated. The addresses of the each operand of the instruction are typically computed by examining the machine code of the instruction to be emulated. Each operand is normally in a D B form which is two bytes with the first nibble being the base register F and the next 3 nibbles comprising the displacement. To compute the address the value of the base register at the time the instruction to be emulated was executed is multiplied by four and then used as index into a table containing the execution time registers. This table is formed using register values saved in the BSA illustrated in client . The instruction length is also obtained from the machine code. When setting the operand lengths if the override lengths in the instruction prefix are zero then the length from the machine instruction will be used. At the end of this first block of code 

The operation of environment may be better understood by reference to particular examples of the types of operations involved. Commonly an application includes operations performed on characters such as Compare Logical Characters CLC and Move Characters MVC . Legacy applications may have limits on the size of characters that can be processed. Moreover when tokens or other indicators are used to represent longer fields such functions may not work. In addition older legacy applications may use EBCDIC characters while later applications often use UNICODE character definitions which are more flexible and allow a broader range of characters. Moreover older legacy applications may use fixed length character fields while later applications may allow variable length character varchar fields. One way to solve this problem is to modify legacy applications to call functions from long name manager directly. However the function calls themselves may need to be programmed into legacy applications which may require considerable time and effort. In cases where the CLC and MVC operations may only be performed on characters of a certain type for example it may not be straightforward to modify legacy application to handle function calls for long name manager .

The alternative in various embodiments is to modify the character operations slightly to handle indicators representing functions of long name manager . This involves constructing an algorithm such as a macro that includes the original CLC or MVC functions with a modification to handle the indicator. Indicators have a smaller size than the related function call and consequently modifying the CLC or MVC operations to CLC or MVC respectively to recognize indicators is relatively less demanding than function calls. For example MVC may be considered a wrapper into emulator . It allows existing MVC instructions to easily be changed. One example implementation of MVC is 

The depicted layer structure may be embodied in a variety of ways including the server client architecture illustrated in . Numerous types of hardware firmware software and or protocols may be used in different layers so that for example layers may represent the communication of different APIs. Similarly one or more layers may be programmed as modules in a common API. The intercommunication between the layers is illustrative of a particular embodiment but it is also possible to have different forms of intercommunication as well. For example emulator may interact directly with token manager or character converter . Thus the depicted layer diagram is only one example of numerous possible embodiments.

The preceding flowchart and accompanying description illustrate an example method but numerous other similar or distinct methods could be employed or implemented as well. In short environment contemplates using or executing any suitable technique or process for performing these and other tasks. In particular any method of operation suitable for use with any of the embodiments of environment described herein is contemplated within this disclosure. Accordingly many of the steps in this flowchart may take place simultaneously and or in different orders than as shown. Moreover environment may use methods with additional steps fewer steps and or different steps so long as the methods are consistent with any of the techniques for managing field incompatible with legacy applications described or suggested by this disclosure.

Although this disclosure has been described in terms of certain embodiments and generally associated methods alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. For example operations could be performed on any number of fields and other types of compatibility issues between legacy applications and various fields could be contemplated. Accordingly the above description of example embodiments does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

