---

title: Middleware configuration processes
abstract: An improved middleware configuration process can include extracting parameters of a manually configured customized software instance to be implemented on a tenant that provides the customized software instance providing business process-specific support tailored to a specific organization. A configuration engine can perform the extracting and can receive a designation of a first part of the parameters as relating to tenant-independent content of the customized software instance and a second part of the parameters as relating to tenant-dependent content of the customized software instance. The tenant-independent content can relate to features of a core software platform, and the tenant-dependent content can relate to at least one organization-specific extension of the core software platform that provides the business process-specific support. The tenant-dependent content can have tenant-specific content formats and tenant-specific content data defined by and available to only the tenant. The tenant-independent content of the tenant can be modified according to the first part, and the tenant-specific content can be modified according to tenant-specific implementation input that implements the second part for the tenant in accordance with the customized software instance. Related systems, methods, and articles of manufacture are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08504990&OS=08504990&RS=08504990
owner: SAP AG
number: 08504990
owner_city: Walldorf
owner_country: DE
publication_date: 20100830
---
The subject matter described herein relates to improved automation of middleware configuration processes for example for customized software solutions.

Various organizations make use of enterprise resource planning ERP software architectures to provide an integrated computer based system for management of internal and external resources such as for example tangible assets financial resources materials customer relationships and human resources. In general an ERP software architecture is designed to facilitate the flow of information between business functions inside the boundaries of the organization and manage the connections to outside service providers stakeholders and the like. Such architectures often include one or more centralized databases accessible by a core software platform that consolidates business operations including but not limited to those provided by third party vendors into a uniform and organization wide system environment. The core software platform can reside on a centralized server or alternatively be distributed across modular hardware and software units that provide services and communicate on a local area network or over a network such as for example the Internet a wide area network a local area network or the like.

As part of the installation process of the core software platform on computing hardware owned or operated by the organization one or more customized features configurations business processes or the like may be added to the default preprogrammed features such that the core software platform is configured for maximum compatibility with the organization s business processes data and the like.

The core software platform of an ERP software architecture can be provided as a standalone customized software installation that runs on one or more processors that are under the control of the organization. This arrangement can be very effective for a large scale organization that has very sophisticated in house information technology IT staff and for whom a sizable capital investment in computing hardware and consulting services required to customize a commercially available ERP solution to work with organization specific business processes and functions is feasible. Smaller organizations can also benefit from use of ERP functionality. However such an organization may lack the necessary hardware resources IT support and or consulting budget necessary to make use of a standalone ERP software architecture product and can in some cases be more effectively served by a software as a service SaaS arrangement in which the ERP system architecture is hosted on computing hardware such as servers and data repositories that are maintained remotely from the organization s location and accessed by authorized users at the organization via a thin client such as for example a web browser over a network.

In a typical development process for such applications a developer might enter a desired technical configuration into a spreadsheet or other file that is then sent to content developers who create a complete version of the configuration based on the technical configuration. The desired technical configuration which describes the desired features of a new configuration of a software solution can be designed using an enterprise modeling tool such as for example the ARIS platform available from IDS Scheer AG of Saarb cken Germany . Such an enterprise modeling tool can be used to develop a business process model that represents business tasks and processes use in the conduct of the business of an organization.

The business process model is then generally converted to an executable active implementation for example using a service oriented application and integration platform such as SAP NetWeaver available from SAP AG of Walldorf Germany . A service oriented application and integration platform can provide development and runtime environments for a core software platform as well as capabilities for developing customized solutions and integrating the core software platform and or the customized solution with other applications and systems such as those provided by third party service providers.

A service oriented application and integration platform can provide built in governance features that enable a developer administrator or other information technology it professional to achieve a consistent design of services processes and events across the business processes of an organization or enterprise. With tools delivered through the ES Repository IT professionals can model metadata reuse standard data types and harmonize service signatures to ensure that services are well designed consistent of high quality fully described and available for use at runtime. IT organizations can also define and manage access rights to control who has the ability to create change view or delete service metadata. Finally as the number of published enterprise services increases IT professionals can use repository tools to combine reassemble or delete services to ensure effective and high quality reuse.

A database such as for example an enterprise services repository ESR can store the definitions and metadata of enterprise services for an organization based on the execution terms of the completed configuration generated using the service oriented application and integration platform. In this manner an integrated modeling environment can be provided for defining enterprise services data types and other design objects for service oriented architecture based business processes in a standards compliant manner. The ESR can store modeling data relating to an organization s business process including relevant interfaces data types and mappings for message exchange between different software components and applications that are used in configuring and running needed business processes in an organization specific system landscape.

Using this approach however can lead to several difficulties including but not limited to a heightened potential for transcription errors in transferring the technical configuration defined in the business process model from the enterprise modeling tool to the service oriented application and integration platform that completes the configuration to provide the integrated business process solution. The process of enterprise modeling using one tool followed by development of the interfaces associations dependencies and the like necessary to generate an integrated customized solution that is end user ready using second tool is also time consuming and highly redundant. An improved approach is desirable.

In one aspect a computer implemented method includes extracting by a configuration engine of a software development platform from a modeling engine parameters of a manually configured customized software instance to be implemented on a tenant that provides the customized software instance providing business process specific support tailored to a specific organization. The tenant is hosted on a computing system including one or more programmable processors and is accessible for use by members of the specific organization. The configuration engine receives a designation of a first part of the parameters as relating to tenant independent content of the customized software instance and a second part of the parameters as relating to tenant dependent content of the customized software instance. The tenant independent content relates to features of a core software platform and the tenant dependent content relates to at least one organization specific extension of the core software platform that provides the business process specific support. The tenant dependent content includes tenant specific content formats and tenant specific content data defined by and available to only the tenant. The tenant independent content of the tenant is modified according to the first part and the tenant specific content is modified according to tenant specific implementation input that implements the second part for the tenant in accordance with the customized software instance. The customized software solution is provided for use by end users at the organization.

In some variations one or more of the following can optionally be included. A feature of the customized software instance that is manually configured by the developer can be received via a user interface provided at a developer s machine. A consistency check can be preformed on the feature before extracting the parameters by the configuration engine. The consistency check can test suitability of the parameters with the core software platform and with existing tenant dependent content of the tenant. The tenant specific implementation input can include dependency information identifying a first item of tenant independent content upon which a second item of tenant specific content has a dependency. A refined model of modeling entities for the customized software instance can be created in an enterprise services repository and programming language proxies of the modeling entities can be created for implementation in the customized software instance. The modeling engine and configuration engine can be implemented on either a single development platform that includes one or more processors or on separate development platforms in communication over a network.

The tenant can be provided by a multi tenant software architecture providing access to a plurality of tenants that includes the tenant. The multi tenant software architecture can include an application server providing access for each of a plurality of organizations to at least one organization specific tenant of the plurality of tenants and a data repository comprising the tenant independent content that is common to all of the plurality of tenants and tenant specific content for each of the plurality of organization. The tenant specific content for each of the plurality of tenants can be accessible to and modifiable by only a corresponding organization of the plurality of organizations. The tenant independent content can include at least one of core software platform content that represents core functionality of a core software platform upon which the manually configured customized software instance is based and system content that is created by the runtime of the core software platform. The core software platform content can be not modifiable by a tenant. The system content can include a core data object that is modifiable with data provided by the tenant during runtime.

Articles are also described that comprise a tangibly embodied machine readable medium operable to cause one or more machines e.g. computers etc. to result in operations described herein. Similarly computer systems are also described that may include a processor and a memory coupled to the processor. The memory may include one or more programs that cause the processor to perform one or more of the operations described herein.

The subject matter described herein provides many potential advantages. For example configuration errors and other mistakes in development and roll out of new features for a core software platform on a multi tenant architecture can be substantially reduced. The starting point for a roll out of new features or even a new platform can be an existing fully functional configuration instead of a feature list or other unimplemented plan. Additionally the involvement of fewer parties in the configuration process can lead to improved efficiency and minimization of opportunities for errors to arise. The overall turnaround time from conceiving a configuration to having it ready for productive use can be greatly reduced as well in some cases from several months to a week or less.

It should be noted that while the descriptions of specific implementations of the current subject matter may discuss delivery of enterprise resource planning software one or more organizations in some implementations via a multi tenant system the current subject matter is applicable to other types of software and data services access as well. The scope of the subject matter claimed below therefore should not be limited except by the actual language of the claims.

The details of one or more variations of the subject matter described herein are set forth in the accompanying drawings and the description below. Other features and advantages of the subject matter described herein will be apparent from the description and drawings and from the claims.

At a central development system that includes both a central instance of the business process modeling tool and an enterprise services repository a second developer expert can at maintain a first development version of the model entities PCIMs etc. thereby duplicating one or more tasks of the first expert in maintaining global data types GDTs data structures business objects related to various business processes of an organization interfaces process component interaction models PCIMs and the like subject to process integration component PIC governance. Typically the first development version of the model includes additional metadata relative to the first version of the model .

An additional step that can be performed either by one of the experts or alternatively by a third expert can include periodic use of specific reports to load entities created in the first instance of the business process modeling tool into the central instance of the business process modeling tool . In an example the file can be read from the local file system via a file import interface . The third expert or some other trained operator can create ESI links that enable various web services and other features of the organization s business processes into a second development version of the business process model at to implement model entities and the like in accordance with the first version of the model . Because these links are typically created manually errors in entering them can lead to broken links that may not be detected until much later in the development process when they are more difficult to identify and correct.

A developer creates and implements proxies for example for business objects and agents. At these proxies as well as web links and the like can be implemented in code at a coding platform for example in a language that provides a model for describing web services such as for example the XML based web services description language WSDL . The coding can be uploaded for subsequent download at the enterprise services repository . The process of creating and implementing the proxies is generally accomplished in a pull manner in that changes to the model created in the ESR are not automatically reflected. However errors in coding these proxies and links can be quite problematic at runtime and even at system validation.

The developer or alternatively another developer can also work in parallel on a test version of the system that includes a process integration PI directory and an integrated test platform to configure an exchange infrastructure directory user interface and to create a PI configuration for a PI directory application programming interface API at . The integrated test platform can include test instances of a business process modeling tool and an enterprise services repository . At a test copy of the model entities and PCIMs of the first development version of the business process model is implemented in the test instance of the business process modeling tool and at a test copy of the implementation model entities of the first development version of the model . The copies of the first development version of the model and the second development version of the model can be exchanged between the development system and the PI directory test system by a content management system CMS on each respective system.

At a listing of the object definitions and other parameters of the PI configuration can be passed from the developer based on the PI configuration implemented on the PI directory test system to a business configuration developer who operates a development version of the core software platform upon which the modeled business processes are to be implemented. Design time definitions of the business configuration can be prepared and at business configuration sets are prepared based on the listing of the object definitions and other parameters of the PI configuration . These business configuration sets as well as the coding prepared on the coding platform can be passed via transport protocols to a test system as a test version of the coding at and a test version of the business configuration sets at . Because the test system is fully scoped the test version of the business configuration sets can be automatically deployed to business configuration tables by an auto deployer .

The developer or another developer can create any necessary communication arrangement user interface modifications in a test version of the core software platform upon which the modeled business processes are to be implemented. The communication arrangement user interface modifications deployed business configuration tables and test version of the coding can be combined into a communication arrangement business object that is accessed by the PI directory application programming interface API to provide the core user interface and functionality of the customized software platform. Once these operations are completed additional roll out can occur on a customer s productive system. Because of the large number of interactions required between model development development and test systems coders and developers the process as illustrated in and can be quite cumbersome and highly prone to errors that may not reveal themselves fully until they are implemented on the test systems or even on the customer s productive system. Aspects of the current subject matter provide an improved and streamlined process for customized software development.

The configuration engine can extract parameters characterizing a customized software instance that has been prepared for example by a developer using the modeling engine . The parameters can include a first part that relates to tenant independent content or features of a tenant via which the customized software instance is to be provided to end users at an organization and a second part that relates to tenant dependent content or features of the tenant . The term tenant as used herein refers to a software solution that is tailored for users of an organization. The tenant can in some implementations be hosted on a dedicated computing system including one or more programmable processors. Alternatively as discussed in greater detail below a tenant can be hosted by a computing system that hosts a plurality of tenants. Such a computing system can include one or more programmable processors. Tenant of the plurality of tenants can provide customized software instances of a core software platform such that each of the tenants and its customizations are accessible only to one organization of potentially multiple organizations having access to the computing system.

The configuration engine can receive tenant specific implementation input for example from a user interface via which a developer can interact with the configuration engine . The tenant specific implementation input can include instructions for implementing the second part of the parameters for the tenant in accordance with the customized software instance.

Infrastructures that might need to be updated or reconfigured or that might require an entirely new configuration as part of new versions of the roll out of new versions of the core software platform on a multi tenant software architecture can include meta data repository frameworks such as for example MDRS and xRepository. Both a meta data repository framework as well as the contents of such a framework can be fully integrated into design time. Changes can be delivered as part of a main interface software component that can in some implementations be provided in the advanced business application programming ABAP language. Such changes can be applied using one or more software deployment tools such as service provisioning and account management SPAM which can in some examples be implemented in an ABAP environment.

In further implementations the current subject matter can also be applied in a software delivery configuration in which services provided to each of multiple organizations are hosted on a dedicated system that is accessible only to that organization. The software installation at the dedicated system can be customized and configured in a manner similar to the above described example of a standalone customized software installation running locally on the organization s hardware. However to make more efficient use of computing resources of the SaaS provider and to provide important performance redundancies and better reliability it can be advantageous to host multiple tenants on a single system that includes multiple servers and that maintains data for all of the multiple tenants in a secure manner while also providing customized solutions that are tailored to each tenant s business processes.

Such an approach can introduce several challenges. Making modifications to the core software platform for example updating to a new version implementing a change to the core functionality or the like can become a complicated and unpredictable process if each tenant s customized data objects and other tenant specific configurations do not react in the same manner to the modifications. Additionally during a lifecycle management event such as for example an upgrade an update additions or modifications of features any re configuration of the core software platform or the like many application specific tasks may have to be executed in a multi tenant system. One or more of these actions have to run on every business tenant that exists in the multi tenant system. Development efforts to produce a new configuration or even to modify an existing configuration can be substantial even in an architecture without organization specific customizations that are provided via the use of extensions such as customer specific fields nodes business objects or the like. Extensions such as these can introduce large numbers of organization specific dependencies that differ for each organization whose customized business solution is hosted from an application server or other such system that supports multiple organizations. Thus roll out of a new or modified configuration of the core software platform can give rise to a myriad of potential conflicts or other problems that can thwart even the best planned development efforts.

To address these and potentially other issues one or more implementations of the current subject matter provide methods systems articles or manufacture and the like that can among other possible advantages provide an improved automated approach to development and roll out of new or modified configurations in multi tenant software delivery architectures.

To provide for customization of the core software platform for each of multiple organizations supported by a single software delivery architecture the data and data objects stored in the repository or repositories that are accessed by the application server can include three types of content as shown in core software platform content system content and tenant content . Core software platform content includes content that represents core functionality and is not modifiable by a tenant. System content can in some examples be created by the runtime of the core software platform and can include core data objects that are modifiable with data provided by each tenant. For example if the core software platform is an ERP system that includes inventory tracking functionality the system content A N can include data objects for labeling and quantifying inventory. The data retained in these data objects are tenant specific for example each tenant A N stores information about its own inventory. Tenant content A N includes data objects or extensions to other data objects that are customized for one specific tenant A N to reflect business processes and data that are specific to that specific tenant and are accessible only to authorized users at the corresponding tenant. Such data objects can include a key field for example client in the case of inventory tracking as well as one or more of master data business configuration information transaction data or the like. For example tenant content can include condition records in generated condition tables access sequences price calculation results or any other tenant specific values. A combination of the software platform content and system content and tenant content of a specific tenant are presented to users from that tenant such that each tenant is provided access to a customized solution whose data are available only to users from that tenant.

A multi tenant system such as that described herein can include one or more of support for multiple versions of the core software and backwards compatibility with older versions stateless operation in which no user data or business data are retained at the thin client and no need for tenant configuration on the central system. As noted above in some implementations support for multiple tenants can be provided using an application server that includes multiple server systems that handle processing loads distributed by a load balancer . Potential benefits from such an arrangement can include but are not limited to high and reliably continuous application server availability and minimization of unplanned downtime phased updating of the multiple server systems to permit continuous availability one server system can be taken offline while the other systems continue to provide services via the load balancer scalability via addition or removal of a server system that is accessed via the load balancer and de coupled lifecycle processes such as for example system maintenance software upgrades etc. that enable updating of the core software independently of tenant specific customizations implemented by individual tenants.

The current subject matter can streamline the development process in a multi tenant system particularly by enabling separate implementation instruction sets for modification of tenant dependent content by separating extracted parameters into a first part relating to tenant independent content and a second part relating to tenant dependent content.

The subject matter described herein can be embodied in systems apparatus methods and or articles depending on the desired configuration. In particular various implementations of the subject matter described herein can be realized in digital electronic circuitry integrated circuitry specially designed application specific integrated circuits ASICs computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which can be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs which can also be referred to programs software software applications applications components or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the term machine readable medium refers to any computer program product apparatus and or device such as for example magnetic discs optical disks memory and Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor. The machine readable medium can store such machine instructions non transitorily such as for example as would a non transient solid state memory or a magnetic hard drive or any equivalent storage medium. The machine readable medium can alternatively or additionally store such machine instructions in a transient manner such as for example as would a processor cache or other random access memory associated with one or more physical processor cores.

To provide for interaction with a user the subject matter described herein can be implemented on a computer having a display device such as for example a cathode ray tube CRT or a liquid crystal display LCD monitor for displaying information to the user and a keyboard and a pointing device such as for example a mouse or a trackball by which the user may provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well. For example feedback provided to the user can be any form of sensory feedback such as for example visual feedback auditory feedback or tactile feedback and input from the user may be received in any form including but not limited to acoustic speech or tactile input.

The subject matter described herein can be implemented in a computing system that includes a back end component such as for example one or more data servers or that includes a middleware component such as for example one or more application servers or that includes a front end component such as for example one or more client computers having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described herein or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication such as for example a communication network. Examples of communication networks include but are not limited to a local area network LAN a wide area network WAN and the Internet.

The computing system can include clients and servers. A client and server are generally but not exclusively remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

The implementations set forth in the foregoing description do not represent all implementations consistent with the subject matter described herein. Instead they are merely some examples consistent with aspects related to the described subject matter. Although a few variations have been described in detail above other modifications or additions are possible. In particular further features and or variations can be provided in addition to those set forth herein. For example the implementations described above can be directed to various combinations and subcombinations of the disclosed features and or combinations and subcombinations of several further features disclosed above. In addition the logic flows depicted in the accompanying figures and or described herein do not necessarily require the particular order shown or sequential order to achieve desirable results. Other implementations may be within the scope of the following claims.

