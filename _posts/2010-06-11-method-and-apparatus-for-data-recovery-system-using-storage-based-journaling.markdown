---

title: Method and apparatus for data recovery system using storage based journaling
abstract: A storage system maintains a journal and a snapshot of one or more data volumes. Two journal entry types are maintained, an AFTER journal entry and a BEFORE journal entry. Two modes of data recovery are provided: “fast” recovery and “undo-able” recovery. A combination of both recovery modes allows the user to quickly recover a targeted data state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07979741&OS=07979741&RS=07979741
owner: Hitachi, Ltd.
number: 07979741
owner_city: Tokyo
owner_country: JP
publication_date: 20100611
---
This application is a continuation application of U.S. patent application Ser. No. 12 143 419 filed Jun. 20 2008 which is herein incorporated by reference for all purposes.

This application is a continuation application of U.S. patent application Ser. No. 10 931 543 filed Aug. 31 2004 and is herein incorporated by reference for all purposes.

This application is a continuation in part of U.S. patent application Ser. No. 10 608 391 Filed Jun. 26 2003 and is herein incorporated by reference for all purposes.

This application is a continuation in part application of U.S. patent application Ser. No. 10 621 791 filed Jul. 16 2003 and is herein incorporated by reference for all purposes.

This application is related to the following commonly owned and co pending U.S. applications U.S. patent application Ser. No. 10 627 507 filed Jul. 25 2003 U.S. patent application Ser. No. 10 823 619 filed Apr. 14 2004 and titled all of which are herein incorporated by reference for all purposes.

Several methods are conventionally used to prevent the loss of data. Typically data is backed up in a periodic manner e.g. once a day by a system administrator. Many systems are commercially available which provide backup and recovery of data e.g. Veritas NetBackup Legato Networker and so on. Another technique is known as volume shadowing. This technique produces a mirror image of data onto a secondary storage system as it is being written to the primary storage system.

Journaling is a backup and restore technique commonly used in database systems. An image of the data to be backed up is taken. Then as changes are made to the data a journal of the changes is maintained. Recovery of data is accomplished by applying the journal to an appropriate image to recover data at any point in time. Typical database systems such as Oracle can perform journaling.

Except for database systems however there are no ways to recover data at any point in time. Even for database systems applying a journal takes time since the procedure includes 

Also if an application running on the database system interacts with another application regardless of whether it is a database system or not then there is no way to recover its data at any point in time. This is because there is no coordination mechanism to recover the data of the other application.

Recovering data at any point in time addresses the following types of administrative requirements. For example a typical request might be I deleted a file by mistake at around 10 00 am yesterday. I have to recover the file just before it was deleted. 

If the data is not in a database system this kind of request cannot be conveniently if at all serviced. A need therefore exists for processing data in a manner that facilitates recovery of lost data. A need exists for being able to provide data processing that facilitates data recovery in user environments other than in a database application or database application interacting with other applications.

The invention is directed to method and apparatus for data recovery in a storage system. Snapshots and journal entries are recorded during normal access to the production volume by applications running on a host machine. Snapshots and journal entries are created during recovery. Journal entries include BEFORE journals and AFTER journals. Snapshots can be saved during the recovery process to allow for repeated recovery attempts.

The backup and recovery system shown in includes at least one storage system . Though not shown one of ordinary skill can appreciate that the storage system includes suitable processor s memory and control circuitry to perform between a host and its storage media e.g. disks . The backup and recovery system also requires at least one host . A suitable communication path is provided between the host and the storage system e.g. a Fibre Channel FC connection. If the RM is provided in the storage system Ethernet can be used with the FC to control the RM from a web browser miming on the host .

The host typically will have one or more user applications APP executing on it. These applications will read and or write data to storage media contained in the data volumes of storage system . Thus applications and the data volumes represent the target resources to be protected. It can be appreciated that data used by the user applications can be stored in one or more data volumes.

In accordance with the invention a journal group JNLG is defined. The data volumes are organized into or otherwise associated with a journal group . In accordance with the present invention a journal group is the smallest unit of data volumes where journaling of the write operations from the host to the data volumes is guaranteed. The associated journal records the order of write operations from the host to the data volumes in proper sequence. The journal data produced by the journaling activity can be stored in a journal volume more particularly referred to as an AFTER journal volume AJVOL . Journal data can also be stored in a journal volume referred to as a BEFORE journal volume BJVOL . A third type of journal volume is also maintained referred to as a Phase 2 journal volume PH2JVOL . The Phase 2 journal volume is used for un doable recovery mode as will be discussed in further detail below and includes AFTER and BEFORE journals. These volumes typically comprise one or more physical storage devices and are not necessarily single volumes as schematically indicated in the figure. The use of these journal volumes will be discussed further below. These volumes together constitute what is referred to as a journal volume group JVOLG .

The host further includes a recovery manager RM . This component provides a high level coordination of the backup and recovery operations. Additional discussion about the recovery manager will be discussed below.

The storage system includes a snapshot group SSGRP of the data volumes that comprise the journal group . A snapshot is representative of the data volumes in the journal group at a point in time that the snapshot was taken. Conventional methods are known for producing the snapshot image. One or more snapshot volumes SVOL are provided in the storage system which contain the snapshot data. A snapshot can be contained in one or more snapshot volumes. Though the disclosed embodiment illustrates separate storage components for the journal data and the snapshot data it can be appreciated that other implementations can provide a single storage component for storing the journal data and the snapshot data.

A management table MT is provided to store the information relating to the journal group the snapshot group and the journal volume . and the accompanying discussion below reveal additional detail about the management table.

A bitmap is provided to manage the snapshot operation. Each bit corresponds to a data block e.g. 4 KB in size in the DVOL . When a block in the DVOL is copied to a snapshot the corresponding bit is cleared or set . When a data block is written by the application its corresponding bit is set or cleared . One such bitmap is associated with each DVOL .

A controller component is also provided which coordinates the journaling of write operations and snapshots of the data volumes and the corresponding movement of data among the different storage volumes. It can be appreciated that the controller component is a logical representation of a physical implementation which may comprise one or more sub components distributed within the storage system . As shown in after journals of DVOL are taken in a flow and stored to AJVOL for the purpose of backups. A snapshot of DVOL is also taken in a flow and stored to SVOL . This aspect of the system is disclosed in more detail in co pending U.S. application Ser. No. 10 621 791 filed Jul. 16 2003. As will be discussed in further detail an aspect of the present invention is a backup method that includes taking before journals of DVOL in the flow and storing them to JVOL and taking snapshots of DVOL as necessary and storing them to SVOL in a flow .

Additional storage volumes are shown. As will be discussed these volumes will be used in various recovery operations according to the present invention and thus can be viewed as a pool of volumes. Generally they constitute free storage during the recovery operations to store intermediate copies of volumes.

The Journal Header comprises an offset number JH OFS . The offset number identifies a particular data volume in the journal group . In this particular implementation the data volumes are ordered as the 0th data volume the 1st data volume the 2nd data volume and so on. The offset numbers might be 0 1 2 etc.

A starting address in the data volume identified by the offset number to which the write data is to be written is stored to a field in the Journal Header to contain an address JH ADR . For example the address can be represented as a block number LBA Logical Block Address .

A field in the Journal Header stores a data length JH LEN which represents the data length of the write data. Typically it is represented as a number of blocks.

A field in the Journal Header stores the write time JH TIME which represents the time when the write request arrives at the storage system . The write time can include the calendar date hours minutes seconds and even milliseconds. This time can be provided by the disk controller or by the host . For example in a mainframe computing environment two or more mainframe hosts share a timer called the Sysplex Timer and can provide the time in a write command when it is issued.

A sequence number JH SEQ is assigned to each write request. The sequence number is stored in a field in the Journal Header . Every sequence number within a given journal group is unique. The sequence number is assigned to a journal entry when it is created.

A journal volume identifier JH JVOL is also stored in the Journal Header . The volume identifier identifies the journal volume associated with the Journal Data . The identifier is indicative of the journal volume containing the Journal Data. It is noted that the Journal Data can be stored in a journal volume that is different from the journal volume which contains the Journal Header.

A journal data address JH JADR stored in the Journal Header contains the beginning address of the Journal Data in the associated journal volume that contains the Journal Data.

A journal type field JH TYPE identifies the type of journal entry. In accordance with the invention two types of journal entries are kept 1 an AFTER journal 2 a BEFORE journal 3 a PH2AFTER journal and 4 a PH2BEFORE journal. An AFTER journal entry contains the data that is contained in the write operation for which a journal entry is made. A BEFORE journal entry contains the original data of the area in storage that is the target of a write operation. A BEFORE journal entry therefore represents the contents before the write operation is performed. The purpose of maintaining BEFORE journal entries will be discussed below. A PH2AFTER journal is an AFTER journal entry produced during what will discussed below as phase 2 recovery. A PH2BEFORE journal is a BEFORE journal produced during phase 2 recovery.

Journal Header and Journal Data are contained in chronological order in their respective areas in the journal volume . Thus the order in which the Journal Header and the Journal Data are stored in the journal volume is the same order as the assigned sequence number. As will be discussed below an aspect of the present invention is that the journal information wrap within their respective areas .

As will be explained below recovery of the production volume s can be facilitated by allowing the user to interact with the recovery process. A fast recovery can be performed which quickly recovers the data state to a point in time prior to a target time. A more granular recovery procedure can then be performed which allows a user to hone in on the target data state. The user can perform undo able recoveries to inspect the data state in a trial and error manner by allowing the user to step forward and backward undo operation in time. This aspect of the invention allows a user to be less specific as to the time of the desired data state. The target time specified by the user need only be a time that he is certain is prior to the time of the target data state. It is understood that the target data state can refer to any desired state of the data.

The management table shown in illustrates an example management table and its contents. The management table stores a journal group ID GRID which identifies a particular journal group in a storage system . A journal group name GRNAME can also be provided to identify the journal group with a human recognizable identifier.

A journal attribute GRATTR is associated with the journal group . In accordance with this particular implementation two attributes are defined MASTER and RESTORE. The MASTER attribute indicates the journal group is being journaled. The RESTORE attribute indicates that the journal group is being restored from a journal.

A journal status GRSTS is associated with the journal group . There are two statuses ACTIVE and INACTIVE.

The management table includes a field to hold a sequence counter SEQ . This counter serves as the source of sequence numbers used in the Journal Header . When creating a new journal the sequence number is read and assigned to the new journal. Then the sequence number is incremented and written back into the management table.

The number NUM DVOL of data volumes contained in a give journal group is stored in the management table.

A data volume list DVOL LIST lists the data volumes in a journal group. In a particular implementation DVOL LIST is a pointer to the first entry of a data structure which holds the data volume information. This can be seen in . Each data volume information comprises an offset number DVOL OFFS . For example if the journal group comprises three data volumes the offset values could be 0 1 and 2. A data volume identifier DVOL ID uniquely identifies a data volume within the entire storage system . A pointer DVOL NEXT points to the data structure holding information for the next data volume in the journal group it is a NULL value otherwise.

The management table includes two sets of fields one set of fields for managing AFTER journal entries and another set of fields for managing BEFORE journal entries.

The fields related to the AFTER journal entries include a field to store the number of journal volumes NUM JVOLa that are used to contain the data journal header and journal data associated with the AFTER journal entries for a journal group .

As described in the Journal Header Area contains the Journal Headers for each journal likewise for the Journal Data components . As mentioned above an aspect of the invention is that the data areas wrap. This allows for journaling to continue despite the fact that there is limited space in each data area.

The management table includes fields to store pointers to different parts of the data areas to facilitate wrapping. Pointer type information is provided to facilitate identifying where the next journal entry is to be stored. A set of such information AFTER journal pointers is provided for the AFTER journal entries. A field JVOL PTRa in the management table identifies the location of the AFTER journal pointers to

The AFTER journal entries are stored in one or more journal volumes AJVOL 106 separate from the BEFORE journal entries. A field JI HEAD VOL identifies the journal volume that contains the Journal Header Area from which the next Journal Header will be obtained. A field JI HEAD ADR identifies where in the in Journal Header Area the next Journal Header is located. The journal volume that contains the Journal Data Area into which the journal data will be stored is identified by information in a field JI DATA VOL A field JI DATA ADR identifies the specific address in the Journal Data Area where the data will be stored. Thus the next AFTER journal entry to be written is pointed to by the information contained in the JI  fields

The AFTER journal pointers to also include fields which identify the oldest AFTER journal entry. The use of this information will be described below. A field JO HEAD VOL identifies the journal volume which stores the Journal Header Area that contains the oldest Journal Header . A field JO HEAD ADR identifies the address within the Journal Header Area of the location of the journal header of the oldest journal. A field JO DATA VOL identifies the journal volume which stores the Journal Data Area that contains the data of the oldest journal. The location of the data in the Journal Data Area is stored in a field JO DATA ADR 

The management table includes a pointer JVOL LISTa to a list of journal volumes associated with the AFTER journal entries of a journal group . In a particular implementation JVOL LISTa is a pointer to a data structure of information for journal volumes. As can be seen in each data structure comprises an offset number JVOL OFS which identifies a particular journal volume associated with a given journal group . For example if a journal group is associated with two journal volumes then each journal volume might be identified by a 0 or a 1. A journal volume identifier JVOL ID uniquely identifies the journal volume within the storage system . Finally a pointer JVOL NEXT points to the next data structure entry pertaining to the next journal volume associated with the journal group it is a NULL value otherwise.

The management table also includes a set of similar fields for managing the BEFORE journal entries. The fields related to the BEFORE journal entries include a field to store the number of journal volumes NUM JVOLb that are being used to contain the data journal header and journal data associated with the BEFORE journal entries for a journal group .

As discussed above for the AFTER journal entries an aspect of the invention is that the data areas wrap. The management table includes fields to store pointers to different parts of the data areas to facilitate wrapping. Pointer type information is provided to facilitate identifying where the next BEFORE journal entry is to be stored. A set of such information BEFORE journal pointers is provided for the BEFORE journal entries. A field JVOL PTRb in the management table identifies the location of the BEFORE journal pointers to

The BEFORE journal entries are stored in one or more journal volumes BJVOL separate from the journal volume s used to store the AFTER journal entries. A field JI HEAD VOL identifies the journal volume that contains the Journal Header Area from which the next Journal Header will be obtained. A field JI HEAD ADR identifies where in the in Journal Header Area the next Journal Header is located. The journal volume that contains the Journal Data Area into which the journal data will be stored is identified by information in a field JI DATA VOL A field JI DATA ADR identifies the specific address in the Journal Data Area where the data will be stored. Thus the next BEFORE journal entry to be written is pointed to by the information contained in the JI  fields

The BEFORE journal pointers also includes fields which identify the oldest BEFORE journal entry. The use of this information will be described below. A field JO HEAD VOL identifies the journal volume which stores the Journal Header Area that contains the oldest Journal Header . A field JO HEAD ADR identifies the address within the Journal Header Area of the location of the journal header of the oldest journal. A field JO DATA VOL identifies the journal volume which stores the Journal Data Area that contains the data of the oldest journal. The location of the data in the Journal Data Area is stored in a field JO DATA ADR 

The management table includes a list of journal volumes JVOL LISTb associated with the BEFORE journal entries of a journal group . In a particular implementation JVOL LISTb is a pointer to a data structure of information for journal volumes. As can be seen in each data structure comprises an offset number JVOL OFS which identifies a particular journal volume associated with a given journal group . A journal volume identifier JVOL ID uniquely identifies the journal volume within the storage system . Finally a pointer JVOL NEXT points to the next data structure entry pertaining to the next journal volume associated with the journal group it is a NULL value otherwise.

The management table includes a list SS LIST of snapshot images associated with a given journal group . In this particular implementation SS LIST is a pointer to snapshot information data structures as indicated in . Each snapshot information data structure includes a sequence number SS SEQ that is assigned when the snapshot is taken. As discussed above the number comes from the sequence counter . A time value SS TIME indicates the time when the snapshot was taken. A status SS STS is associated with each snapshot valid values include VALID and INVALID. A pointer SS NEXT points to the next snapshot information data structure it is a NULL value otherwise.

Each snapshot information data structure also includes a list of snapshot volumes used to store the snapshot images . As can be seen in a pointer SVOL LIST to a snapshot volume information data structure is stored in each snapshot information data structure. Each snapshot volume information data structure includes an offset number SVOL OFFS which identifies a snapshot volume that contains at least a portion of the snapshot image. It is possible that a snapshot image will be segmented or otherwise partitioned and stored in more than one snapshot volume. In this particular implementation the offset identifies the isnapshot volume which contains a portion segment partition etc of the snapshot image. In one implementation the isegment of the snapshot image might be stored in the isnapshot volume. Each snapshot volume information data structure further includes a snapshot volume identifier SVOL ID that uniquely identifies the snapshot volume in the storage system . A pointer SVOL NEXT points to the next snapshot volume information data structure for a given snapshot image.

Further in accordance with the invention a single sequence of numbers SEQ are associated with each of one or more snapshots and journal entries as they are created. The purpose of associating the same sequence of numbers to both the snapshots and the journal entries will be discussed below.

Continuing with the recovery manager might define in a step a journal group JNLG if one has not already been defined. As indicated in this may include identifying one or data volumes DVOL for which journaling is performed and identifying a journal volume group JVOLG to store the journal related information. The recovery manager performs a suitable sequence of interactions with the storage system to accomplish this.

In a step the storage system may create a management table incorporating the various information shown in the table detail illustrated in . Among other things the process includes initializing the JVOL LIST to list the journal volumes which comprise the journal group . Likewise the list of data volumes DVOL LIST is created. The fields which identify the next journal entry or in this case where the table is first created the first journal entry are initialized. Thus JI HEAD VOL might identify the first in the list of journal volumes and JI HEAD ADR might point to the first entry in the Journal Header Area located in the first journal volume. Likewise JI DATA VOL might identify the first in the list of journal volumes and JI DATA ADR might point to the beginning of the Journal Data Area in the first journal volume. Note that the header and the data areas may reside on different journal volumes so JI DATA VOL might identify a journal volume different from the first journal volume.

In a step the recovery manager will initiate the journaling process to collect BEFORE journals. Suitable communication s are made to the storage system to perform journaling. In a step the storage system will make a BEFORE journal entry for each write operation that issues from the host . A sequence number is assigned to each BEFORE journal that is taken.

With reference to making a BEFORE journal entry includes among other things identifying the location for the next journal entry. The fields JI HEAD VOL and JI HEAD ADR identify the BEFORE journal volume and the location in the Journal Header Area of the next Journal Header . The sequence counter SEQ from the management table is copied to or otherwise associated with the JH SEQ field of the next header. The sequence counter is then incremented and stored back to the management table. Of course the sequence counter can be incremented first copied to JH SEQ and then stored back to the management table.

The fields JI DATA VOL and in the management table identify the BEFORE journal volume and the beginning of the Journal Data Area for storing the data associated with the write operation. The JI DATA VOL and JI DATA ADR fields are copied to JH JVOL and to JH ADR respectively of the Journal Header thus providing the Journal Header with a pointer to its corresponding Journal Data. The data of the write operation is stored.

The JI HEAD VOL and JI HEAD ADR fields are updated to point to the next Journal Header for the next journal entry. This involves taking the next contiguous Journal Header entry in the Journal Header Area . Likewise the JI DATA ADR field and perhaps JI DATA VOL field is updated to reflect the beginning of the Journal Data Area for the next journal entry. This involves advancing to the next available location in the Journal Data Area. These fields therefore can be viewed as pointing to a list of journal entries. Journal entries in the list are linked together by virtue of the sequential organization of the Journal Headers in the Journal Header Area .

When the end of the Journal Header Area is reached the Journal Header for the next journal entry wraps to the beginning of the Journal Header Area. Similarly for the Journal Data . To prevent overwriting earlier journal entries the present invention provides for a procedure to free up entries in the journal volume . This aspect of the invention is discussed below.

For the very first journal entry the JO HEAD VOL field JO HEAD ADR field JO DATA VOL field and the JO DATA ADR field are set to contain their contents of their corresponding JI  fields. As will be explained the JO  fields point to the oldest journal entry. Thus as new journal entries are made the JO  fields do not advance while the JI  fields do advance. Update of the JO  fields is discussed below.

Continuing with the flowchart of when the journaling process has been initiated all write operations issuing from the host are journaled. Then in a step the recovery manager will initiate taking a snapshot of the data volumes DVOL if a snapshot is needed for quick data recovery. The storage system receives an indication from the recovery manager to take a snapshot. In a step the storage system performs the process of taking a snapshot of the data volumes. Among other things this includes accessing SS LIST from the management table . A suitable amount of memory is allocated for fields to represent the next snapshot. The sequence counter SEQ is copied to the field SS SEQ and incremented in the manner discussed above for JH SEQ . Thus over time a sequence of numbers is produced from SEQ each number in the sequence being assigned either to a journal entry or a snapshot entry. The snapshot is stored in one or more snapshot volumes SVOL . A suitable amount of memory is allocated for fields . The information relating to the SVOLs for storing the snapshot are then stored into the fields . If additional volumes are required to store the snapshot then additional memory is allocated for fields .

The recover manager provides the following interface to the storage system for the aspect of the invention which provides for fast and undo able recovery modes. The interface is shown in a format of an application programmer s interface API . The functionality and needed information parameters are described. It can be appreciated that any suitable programming language can be used.

Recovering data typically requires recovering the data state of at least a portion of the DVOL at a specific time. Generally this is accomplished by applying one or more AFETR journal entries to a snapshot that was taken earlier in time relative to the journal entries. In the disclosed illustrative embodiment the sequence number SEQ is incremented each time it is assigned to a journal entry or to a snapshot.

Refer now to for a discussion of how BEFORE journals are collected and saved to the BJVOL . The figure shows a production volume DVOL . This is the volume that applications execution on a host accesses. The DVOL represents an initial data state of the production volume. At some time the host will issue a write operation WR to service an I O request made by an application running on the host. The storage system containing the production volume DVOL will service the write operation with the likely result that the data state of the DVOL will change this is represented in as DVOL Prior to actually writing the primary volume the storage system e.g. the controller creates a BEFORE journal that records the data in DVOL that is about to be changed by the write operation WR. A sequence number obtained from the sequence counter is associated with the BEFORE journal When the next write operation WR is issued another BEFORE journal is created to record the portion of data in DVOL that is going to be overwritten by the write operation WR. The write operation WR is then serviced which then updates the data state of the DVOL represented by DVOL A sequence counter is associated with the journal When yet another write operation WR is received another BEFORE journal is created to record the portion of DVOL that will be overwritten by the write operation WR.

Various processing according to the present invention will now be discussed. In accordance with the illustrated embodiment of the present invention the controller is configured or otherwise operative to perform the functions and steps that will be described in the discussion that follows. It can be appreciated that logic firmware software and combinations of the foregoing can be provided to allow the controller to operate as needed. It can be further appreciated that processing components can be used to provide the following functionality other than the controller .

Referring now to a generalized process flow is shown highlighting the steps for recovering data in accordance with the present invention. One will appreciate from the following that the described technique can be used to recover or otherwise retrieve a desired data state of a production volume. The recovery methods and apparatus disclosed herein are not limited to disaster recovery scenarios. The invention has applicability for users e.g. system administrators who might have a need to look at the state of a file or a directory at an earlier point in time. Accordingly the term recovery volume is used in a generic sense to refer to one or more volumes on which the data recovery process is being performed.

It can be appreciated that the recovery manager can include a suitable interface for interaction with a user. An appropriate interface might be a graphical user interface or a command line interface. It can be appreciated that voice recognition technology and even virtual reality technology can be used as input and output components of the interface for interacting with a user. Alternatively the user can be a machine such as a data processing system rather than a human. In such a case a suitable machine machine interface can be readily devised and implemented.

The first phase of the recovery process is referred to as phase I recovery fast recovery . The idea is to quickly access the data state of the recovery volume at a point in time that is close in time to the desired data state but is still prior in time to the desired data state. Then a phase II recovery can be performed to get even closer to the desired data state. Phase II recovery is typically a much slower process than phase I recovery.

Referring to processing for an AFTER journal is shown. In a step the recovery manager obtains from the user a target time that specifies a point in time that represents the desired data state and a recovery method . It is desirable to recover the data state of the production volume to a point in time that is as close as possible to but not later than the user specified target time that data state is referred to as the desired data state. A suitable query to the user might inform the user as to the nature of the target time. For example if the user interacted with a system administrator she might tell the administrator that she was sure her files were not deleted until after 10 30 AM. The target time would then be 10 30 AM or earlier. Likewise a user interface can obtain such information from a user by presenting a suitable set of queries or prompts.

The recovery method is selected from among the methods shown in the table in . The table illustrates the user s decision making for selecting a method for recovery. An initial inquiry Q identifies which journal was used for the backup AFTER journals or BEFORE journals. The next inquiry Q is the granularity of recovery that is desired file level recovery or volume level recovery. The next inquiry Q is whether the user wants re recovery capability or not. This inquiry Q is directed to whether the user wants to be able to repeat the recovery operation this is especially useful in a situation where the storage system fails during a recovery procedure. The idea of re recovery allows a user to restart the recover process that was in progress at the time of failure of the storage system. A final inquiry Q is whether the data in the original DVOL production volume is to be retained after the recovery operation. Depending on whether the user s response is affirmative or negative for each inquiry a suitable recovery method can be determined.

Returning to step of given the user specified target time the recovery manager can then issue a RECOVER PH1 operation to the storage system e.g. system that contains the recovery volume. In response the storage system would initiate phase I recovery. Two conditions are checked to determine whether recovery is possible 

In a step phase I recovery is performed. This is discussed in more detail with reference to discussed below. Upon completion of phase I recovery the storage system can signal the recovery manager to indicate phase I has completed. The recovery manager would then issue a STOP RECOVER operation to the storage system step . In response the storage system would put the recovery volume into an online state. In the context of the present invention the online state is taken to mean that the host device is given access to the recovery volume.

Next in a step the user is given the opportunity to review the state of the data of the recovery volume to determine whether the desired data state has been recovered. For example a file system check might be performed the file system can be mounted individual files can be inspected and so on. By doing so it is likely the host will perform write operations to the volumes. Such update operations would have to be canceled in order to perform additional recovery e.g. as in step . Therefore as described in the STOP RECOVER command the storage system starts taking before journal entries of write operations from host .

Continuing with step the data state of the recovery volume in now recovered to some point in time prior to the time of the desired data state. This point in time is referred to as the recovered time of the recovery volume. It may be that additional recovery might be needed to reach the desired data state. If the desired data state has been reached then the recovery process is stopped end recovery . If the desired data state is not reached then processing proceeds to a step where the user sets an appropriate target time A to be used in conjunction with the user specified recovery method. This is discussed in further detail in .

In step if the difference between the target time A and the recovered time of the recovery volume is less than some predetermined value then phase II recovery commences. This includes taking the recovery volume to the offline state step and proceeding with a phase II recovery operation at step . If the difference is not less that the predetermined value then processing proceeds to step which will be discussed in greater detail in to perform additional phase I recovery using the user specified recovery method . Merely for purposes of explanation however a value of one hour is shown in the flowchart.

The decision step determines if additional phase I recovery is needed. If the time difference is very large e.g. one hour then it is more efficient to perform a phase I recovery fast recovery to get closer to the data state of the production volume that is closest to user specified target time but not later than the user specified target time this is the desired data state. On the other hand if the time difference is small e.g. 

The initiation of phase II recovery begins at step . This includes taking the recovery volume offline and applying one or more AFTER journal entries to the snapshot as before in order to move the state of the recovered data forward in time. However phase II processing includes the additional step of taking BEFORE journal entries. With BEFORE journaling turned on a BEFORE journal entry is taken of the snapshot prior to updating the snapshot with an AFTER journal entry one such BEFORE journal entry is taken for each AFTER journal entry. As mentioned above a BEFORE journal entry records the data that is stored in the target location of the write operation. Consequently the state of the snapshot is preserved in a BEFORE journal entry prior to updating the snapshot with an AFTER journal entry. Thus pairs of BEFORE journal and AFTER journal entries are created during phase II recovery. In accordance with the invention the sequence numbering provided by the sequence number SEQ is associated with each BEFORE entry journal. Thus the same sequence of numbers is applied to BEFORE journal entries as well as to AFTER journal entries and snapshots.

In a step a STOP RECOVER operation is issued to put the recovery volume in an online state. The user is then able to inspect the recovery volume. Based on the inspection if the user determines in a step that the desired data state of the recovery volume is achieved then the recovery process is complete end recovery . If the user determines that the desired data state is not achieved then processing proceeds to step where the user sets an appropriate target time B. This is discussed in further detail in connection with .

A determination is made in step whether the target time B is a time earlier than the phase I recovery time. The phase I recovery time is a point in time of the production volume at the end of phase I recovery which was reached at step . If the target time B is a time earlier than the phase I recovery time then processing proceeds to step to be discussed below to perform the user specified recovery method. On the other hand if the target time B in step is a time later than the phase I recovery time then a determination is made in step whether the target time B is a time earlier than the phase II recovery time which is the point in time that is reached by the phase II operation .

In step if the target time B is a time later than the phase II recovery time then processing proceeds to the determination step . The test in step is whether the difference between the target time B and the recovered time of the recovery volume exceeds the predetermined value e.g. one hour . If the time difference exceeds the predetermined value then processing proceeds to step otherwise additional phase II recovery is performed step and following .

If in step the target time B is a time that is earlier than the phase II recovery time then it means that the recovery operation proceeded to a point in time beyond the user specified target time. In that case the snapshot updates are undone step by accessing one or more BEFORE journal entries to undo or cancel some of the phase II recovery. When some number of snapshot updates have been undone then processing proceeds to step .

A determination is made in a step whether the target time B is a time later than the phase I recovery time. Recall that the phase I recovery time is a point in time of the production volume at the end of phase I recovery which was reached at step . If the target time B is a time later than the phase I recovery time then processing proceeds to step to be discussed below to perform the user specified recovery method. On the other hand if the target time B in step is a time earlier than the phase I recovery time then a determination is made in step whether the target time B is a time earlier than the phase II recovery time which is the point in time that is reached by the phase II operation .

In step if the target time B is a time earlier than the phase II recovery time then processing proceeds to the determination step . Recall that the test in step is whether the difference between the target time B and the recovered time of the recovery volume exceeds the predetermined value e.g. one hour . If the time difference exceeds the predetermined value then processing proceeds to step otherwise additional phase II recovery is performed step and following .

If in step the target time B is a time that is later than the phase II recovery time then it means that the recovery operation proceeded to a point in time beyond the user specified target time. In that case the snapshot updates are undone step by accessing one or more BEFORE journal entries to undo or cancel some of the phase II recovery. When some number of snapshot updates have been undone then processing proceeds to step .

Referring for a moment to the recording of BEFORE journals during an undo process is illustrated. The current data state of the production volume is shown as DVOL A BEFORE journal see is applied to the volume to update the volume to produce an earlier data state DVOL A BEFORE journal is recorded prior to updating the production volume at DVOL A sequence number obtained from the BEFORE journal is associated with the BEFORE journal When the next BEFORE journal is about to be applied to DVOL to produce the next earlier data state DVOL another BEFORE journal is created to record the portion of data in DVOL that is going to be overwritten by the update. A sequence counter is associated with the journal When yet another BEFORE journal is about to be applied to DVOL another BEFORE journal is created to record the portion of DVOL that will be overwritten by the update operation that will be performed to produce DVOL

Referring for a moment to the contents of the recovery table are described. The recovery table has a target time a Recovered time a Time of the oldest journal a Time of the newest journal and a phase I recovery time for each Journal Group ID . The Target Time is provided by a user. Controller gets Recovered Time from JH TIME or SS TIME when controller applies journal to recovery volume or copies snapshot to recovery volume. Controller gets Time of the oldest journal from JH TIME of first AFTER journal after taking first snapshot or first BEFOR journal. Controller gets Time of the newest journal from JH TIME of newest journal in journal header area when recovery is started. Controller gets phase I recovery time from JH TIME of last journal or SS TIME of last snapshot when phase I recovery is done. Controller gets Journal Group ID from GRID .

Refer now to for a discussion of phase I recovery invoked from step . A determination is made as to the user specified recovery method in step . Step is performed for methods and . As can be seen in these methods call for saving an image of the DVOL. Hence in step a snapshot of the DVOL is made and stored to a temporary volume selected from the volume pool . If a snapshot of the DVOL cannot be made step then a suitable error recovery process is performed step otherwise processing proceeds to the decision step .

If the user specified method is or no snapshot is taken and processing proceeds to the decision step .

If the user specified method is then a snapshot of the SVOL is taken and stored to an available volume in the volume pool step . The volume SVOL represents the volume from which recovery will be performed as called for by recovery method . If a snapshot of the SVOL cannot be made step then a suitable error recovery process is performed step otherwise processing proceeds to the decision step .

If the user specified method is then in a step a snapshot of the DVOL is made and stored to a temporary volume selected from the volume pool . If a snapshot of the DVOL cannot be made step then a suitable error recovery process is performed step otherwise processing proceeds to a step In step a snapshot of the SVOL is taken and stored to an available volume in the volume pool . If a snapshot of the SVOL cannot be made step then a suitable error recovery process is performed step otherwise processing proceeds to the decision step .

In decision step if the user specified recovery method is or then the content of SVOL is copied to the DVOL in step . In a step the recovery volume s whether SVOL or DVOL or both depending on the recovery method is are set to the offline state. A decision tree comprising steps will invoke the appropriate recovery procedure. Note that it is understood that the recovery method includes the variant method . Thus the module is understood to include both recovery method and method .

Refer now to for a description of a process for setting the target time A for an AFTER journal. The entry point is step in . In step if the user specified recovery method is or then the user sets a desired target time for the recovery operation that is to be performed by the selected recovery method step . If in step the desired target time is later in time than the recovered time of the recovery volume and the desired target time falls between the time of the oldest journal and the newest journal then the desired target time is set as the target time A and the process completes. Referring to processing then continues to the decision step . If the decision step is a negative outcome then recovery methods and cannot be used. The user is returned to step to re enter another desired time value.

Returning to the decision step if the user specified recovery method is or then the user sets a desired target time for the recovery operation that is to be performed by the selected recovery method step . If in step the desired target time falls between the time of the oldest journal and the newest journal then the desired target time is set as the target time A and the process completes. If the decision step is a negative outcome then the user is returned to step to re enter another desired time value.

Returning to the decision step if the user specified recovery method is or then the user sets a desired target time for the recovery operation that is to be performed by the selected recovery method step . If in step the desired target time falls between the time of the oldest journal and the newest journal then the desired target time is set as the target time A and the process completes. If the decision step is a negative outcome then the user is returned to step to re enter another desired time value.

Refer now to for a description of a process for setting the target time B for an AFTER journal. The entry point is step in . In step if the user specified recovery method is then the user sets a desired target time for the recovery operation that is to be performed by the selected recovery method step . If in step the desired target time is later in time than the phase I recovered time and the desired target time falls between the time of the oldest journal and the newest journal then the desired target time is set as the target time B and the process completes. Referring to processing then continues to the decision step . If the decision step is a negative outcome then the user is returned to step to re enter another desired time value.

Returning to the decision step if the user specified recovery method is or then the user sets a desired target time for the recovery operation that is to be performed by the selected recovery method step . If in step the desired target time falls between the time of the oldest journal and the newest journal then the desired target time is set as the target time B and the process completes. If the decision step is a negative outcome then the user is returned to step to re enter another desired time value.

Refer now to for a description of a process for setting the target time B for a BEFORE journal. The entry point is step in . In step if the user specified recovery method is then the user sets a desired target time for the recovery operation that is to be performed by the selected recovery method step . If in step the desired target time is earlier in time than the phase I recovered time and the desired target time falls between the time of the oldest journal and the newest journal then the desired target time is set as the target time B and the process completes. Referring to processing then continues to the decision step . If the decision step is a negative outcome then the user is returned to step to re enter another desired time value.

Returning to the decision step if the user specified recovery method is or then the user sets a desired target time for the recovery operation that is to be performed by the selected recovery method step . If in step the desired target time falls between the time of the oldest journal and the newest journal then the desired target time is set as the target time B and the process completes. If the decision step is a negative outcome then the user is returned to step to re enter another desired time value.

The discussion will now turn to a description of the various recovery methods. As can be seen from the process flow of the recovery methods to be discussed can be invoked either from step or step phase I recovery or from step which occurs during phase II recovery. In some of the recovery methods that will be discussed a decision point may be needed to perform different processing depending on whether the particular recovery method was invoked in phase I recovery step or step or in phase II recovery step .

This recovery method is capable of re recovery because the original snapshot on SVOL can be copied to the DVOL if a failure occurred thus allowing the user to retry the recovery operation. This recovery method can recover the entire volume. This recovery method provides volume protection which refers to the preservation of the data state of the recovery volume in this case the DVOL at a time prior to the commencement of the recovery operation. The volume pool contains the data state of the production volume.

This recovery method is not capable of re recovery because the recovery operation is performed directly on the original snapshot that was stored in the SVOL a copy of the snapshot was not taken before commencing with the recovery operation. This recovery method can recover the entire DVOL or specified fields. There is volume protection for DVOL by virtue of its original data state having been preserved by the snapshot that is stored in the volume pool .

This recovery method is capable of re recovery because journals are applied to a copy of the snapshot in the volume pool not to the original snapshot in the SVOL . This recovery method can recover the entire volume or specified files. This recovery method does not provide volume protection of the DVOL since it is overwritten by the updated snapshot from the volume pool step .

This recovery method is capable of re recovery because journals are applied to a copy of the snapshot in the DVOL not to the original snapshot in the SVOL . This recovery method can recover the entire volume. This recovery method does not provide volume protection of the DVOL since it is overwritten by the snapshot from the SVOL step .

This recovery method is not capable of re recovery because the recovery operation is performed directly on the original snapshot that was stored in the SVOL a copy of the snapshot was not taken before commencing with the recovery operation. This recovery method can recover the entire DVOL or specified files. There is no volume protection for DVOL by virtue of its original data having been overwritten by the updated snapshot step without first storing the original data.

This recovery method is capable of re recovery because a snapshot of the DVOL is taken before applying the BEFORE journals. The current data state is thus preserved in the snapshot that is stored in the volume pool . This recovery method can recover the entire volume. This recovery method provides volume protection of the DVOL because of the snapshot that is saved in the volume pool .

This recovery method is capable of re recovery because the updates are performed on a snapshot of the DVOL and not on the DVOL itself. The current data state is thus preserved on the DVOL. This recovery method can recover the entire volume or specified files. This recovery method does not provide volume protection of the DVOL because it is copied over by the updated snapshot without first taking a snapshot of the DVOL that is not updated by the recovery method.

This recovery method is not capable of re recovery because the recovery operation is performed directly to the DVOL without first taking a snapshot of the DVOL before commencing with the recovery operation the current data state was not preserved. This recovery method can recover the entire DVOL to an earlier data state. There is no volume protection for DVOL because its original data state was not saved. It is noted that this recovery method consumes the least amount of storage since no snapshots are taken that would permit re recovery or provide volume protection.

This recovery method is capable of re recovery because the original data state of the DVOL is preserved in the first snapshot thus allowing the user to retry the recovery operation. This recovery method can recover the entire volume or specified files. This recovery method provides volume protection because the volume pool contains the data state of the production volume in the first snapshot.

This recovery method is capable of re recovery because the updates with the AFTER journal entries are not applied to the original snapshot on SVOL but rather to a snapshot of the snapshot namely snapshot . This recovery method can recover the entire volume or specified files. This recovery method provides volume protection because the original state of the DVOL is preserved by snapshot .

The discussion will now turn to detection and handling of overflow conditions in a journal volume. In co pending U.S. application Ser. No. 10 621 791 handling for overflow in the journal volume for storing AFTER journals is described. illustrates similar processing to detect and handle overflow conditions in the BEFORE journal volume. An overflow is deemed to exist when the available space in the BJVOL falls below some predetermined threshold. It can be appreciated that many criteria can be used to determine if an overflow condition exists. A straightforward threshold is based on the total storage capacity of the journal volume s assigned for a journal group. When the free space becomes some percentage say 10 of the total storage capacity then an overflow condition exists. Another threshold might be used for each journal volume. In an aspect of the invention the free space capacity in the journal volume s is periodically monitored. Alternatively the free space can be monitored in an aperiodic manner. For example the intervals between monitoring can be randomly spaced. As another example the monitoring intervals can be spaced apart depending on the level of free space i.e. the monitoring interval can vary as a function of the free space level.

If the free space falls below a predetermined threshold then in a step some of the BEFORE journal entries are simply deleted beginning with the oldest journal entries. shows a series of BEFORE journal entries BJNL that are created for each write operation WR made to the production volume DVOL . The journal entries are stored on BJVOL . The oldest journal entry shown in is the entry at time T. That journal entry is deleted.

In step after deleting the journal entry a check is made of the increase in the journal volume free space in BJVOL . The free space can be compared against the threshold criterion used in step . Alternatively a different threshold can be used. For example here a higher amount of free space may be required to terminate this process than was used to initiate the process. This avoids invoking the process too frequently but once invoked the second higher threshold encourages recovering as much free space as is reasonable. It can be appreciated that these thresholds can be determined empirically over time by an administrator.

If the threshold for stopping the process is met i.e. free space exceeds threshold then the process stops. Otherwise step is repeated for the next oldest journal entry. Steps and are repeated until the free space level meets the threshold criterion used in step .

