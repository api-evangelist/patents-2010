---

title: Visual test automation tool for message-based applications, web applications and SOA systems
abstract: In one embodiment, a graphical user interface (“GUI”) enables the efficient composition and execution of a test of a message-based application, Web application, or SOA systems' capacity to receive, process and respond to message traffic. The GUI may be used to generate a test composition by dragging and dropping message clips onto one or more tracks. Each clip includes one or more message, with each track being organized into one or more bands. Each track and each band may run contemporaneously to send messages to a target device or application. It is emphasized that this abstract is provided to comply with the rules requiring an abstract that will allow a searcher or other reader to quickly ascertain the subject matter of the technical disclosure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08306195&OS=08306195&RS=08306195
owner: SOASTA, Inc.
number: 08306195
owner_city: Mountain View
owner_country: US
publication_date: 20101115
---
This application is a continuation of application Ser. No. 11 503 580 filed Aug. 14 2006 now U.S. Pat. No. 7 844 036 entitled VTATM BA WASOA S which is assigned to the assignee of the present application.

The present invention relates generally to electronic communication technology more particularly to automated systems and methods for testing and or demonstrating aspects or features of message based intranet Internet or browser based applications.

Information technology is now routinely used by many enterprises to receive process and provide information via widely accessible electronic communications networks such as the Internet. Yet most information technology systems will begin to deny service or fail to process message traffic efficiently when communications traffic exceeds a processing capacity of the system. Such failures in communication can significantly impair the operations of an enterprise in many ways.

Enterprises increasingly deploy Service Oriented Architecture SOA systems to expand their capabilities increase their responsiveness to internal and external requests and improve operational productivity. SOA is now being widely used to efficiently implement new Internet based business processes Web Services and other information processing protocols. SOA applications are often easily generated using commercially available Web Service orchestration tools in which message flow pathways are defined in accordance with intentional business logic.

Most SOA based information technology systems and networks can integrate capabilities from an expanding and increasingly rich selection of available public services. Unfortunately the communications burden placed on SOA systems that provide services via the Internet can be difficult to forecast. Almost any SOA system connected to the Internet will receive unpredictable levels of message traffic. The communications traffic capability of many SOA applications even on a private network such as the Intranet can be difficult and expensive to test measure or estimate. These difficulties in testing SOA applications are becoming increasingly problematic. The functionality and quality of web services is important especially given that these services are often used for critical business applications. A consumer ordering a book from an on line retailer for example needs to feel assured that the service will respond promptly and accurately to a specific request.

Prior art systems often require building a single use or disposable end to end system for testing the capacity of a website. For example a web services provider such as a bank an on line retailer or an electronic dating service may need to know how many simultaneous user requests can come to their website given their website s configuration i.e. its hardware software and connection to the Internet . Thousands of messages may be received by a particular website in any given moment and software developers need to control the sequence the timing and the tempo of these messages to adequately performance test the website s capacity. Similarly there is a need for correctness testing of SOA based applications.

Traditionally developers have executed this type of test by building a long series of messages typically using Extensible Mark Up Language XML messages which are messages in a human readable language format for tagging documents that are used by web services to simulate real world traffic. These XML messages are typically assembled by hand using a programming language such as Perl or JAVA. Unfortunately the testing process is highly prone to errors because even the smallest error such as a difference in letter case can invalidate the entire test. It is also an arduous and expensive process to write these scripts. Maintaining the scripts and updating them to reflect system changes is also a difficult process.

In the following description specific details are set forth such as device types system configurations protocols methods etc. in order to provide a thorough understanding of the present invention. However persons having ordinary skill in the relevant arts will appreciate that these specific details may not be needed to practice the present invention.

According to one embodiment of the present invention a visual or graphical user interface GUI is provided to allow business analysts sales engineers programmers and other users including non programmers to quickly build and maintain complex testing and demonstration scenarios for composite message based applications such as Web Services and SOA systems. The GUI is based on building blocks that allow a user to compose a test scenario by dragging and dropping various messages in the form of icons or visual metaphors onto different locations of the user interface screen. To facilitate understanding the process of editing or assembling a procedure to generate complex parallel message streams targeted at a message based application may be considered analogous to the cut and paste process of editing or assembling a song movie or multi media presentation in digital media presentation tools.

In accordance with a specific embodiment messages may be combined into clips that can be reused. Clips are placed into tracks within compositions with a set of rules to govern sequence timing and dependencies utilizing a GUI with drag and drop capabilities. A user may also access the underlying message complexity. In this manner a user may create sophisticated compositions that generate complex parallel message streams for testing and demonstration purposes.

Although shows network as comprising an IP network in other embodiments network may comprise any type of network including but not limited to a wide area network WAN a local area network LAN an ISDN network a virtual private network VPN or a corporate Intranet. Network may also be implemented using a wireless network or any kind of physical network implementation. also shows a computer readable medium that may be used to store information or which may be accessed by servers or to fetch information programs algorithms or instructions stored therein.

As used herein selecting a graphical element includes placing a cursor on the graphical element i.e. screen icon and pressing a key on a selecting device e.g. a mouse when cursor is visually positioned by display screen on graphical elements. Dragging and dropping a graphical element includes placing a cursor on graphical element and pressing the select key on a selecting device e.g. a select key of mouse when the cursor is visually positioned by display screen on the graphical element and then manipulating mouse to position the cursor on another graphical element and then releasing select key . Mouse may include a tracking module to sense movement of mouse along a substantially planar surface. Mouse is also typically configured to enable a user of device to drag and drop icons visually presented on display screen . Display screen is coupled with the display screen interface . Processor subsystem directs an image presented on display screen by sending imaging information to display screen interface .

Media reader is configured to read computer readable instructions stored by a computer readable media. According to one embodiment of the invention a series of test electronic messages are provided by device in response to processor subsystem executing one or more sequences of instructions contained in memory . Such instructions may be read into memory from another computer readable medium such as media see . Execution of the sequences of instructions causes processor subsystem to perform the steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term computer readable medium as used herein refers to any medium that participates in providing instructions to processor subsystem for execution. Such medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as media . Volatile media includes dynamic memory such as system memory . Transmission media includes coaxial cable copper wire and fiber optic lines including the wires that comprise internal communications bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to network device can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on internal communications bus . Internal communications bus carries the data to system memory from which processor retrieves and executes the instructions. The instructions received by system memory may optionally be stored on media either before or after execution by processor .

A user may utilize GUI to create complex message streams along a timeline and or in sequence to test and or demonstrate web services such as a website. Thousands of messages may be put together into a composition which can be played out according to a particular sequence timing and tempo that a user creates using various components of GUI . A composition in the context of the present application is simply a test or demonstration which may comprise multiple messages organized in message clips that may be played out to a particular target such as a website.

For example an online banking service may want to know its service capacity limits i.e. how many simultaneous user service requests are possible until the website no longer functions or performs adequately. To test this capability a user can utilize GUI to create thousands of messages i.e. user requests for online banking and place them in a drag and drop fashion on a play composition screen of GUI . A user may then play the composition to test the capacity of the online banking service by pressing a single command button. By way of specific example the composition may cause one request in the form of a message to the on line banking service to be sent to the website in a first second of test operation two requests the next second three requests the third second and so on until performance begins to suffer appreciably the service completely crashes or some other problem caused by timing is discovered.

Login screen is the first screen of GUI seen by the user when the application is first invoked. Screen is used to log onto the application by entering appropriate user identification ID and password information. After the user enters his user identification and password information into the login screen the user may then access file manager .

File manager enables the user to create select examine modify and execute a particular composition for execution on a target. In the course of so doing the user may proceed from file manager to any of the other editors viewers including transition editor composition editor clip editor target editor and results viewer . Results viewer visually presents information values and measurements obtained generated or associated with one or more sessions of a composition. Basically results viewer is the module that informs the user by a visual display of information on screen of the performance and behavior of a server and or other addressees of electronic test message clips sent in the execution of one or more compositions.

The file manager user interface component provides a user with the ability to perform any one of a plurality of operations associated with the creation and execution of the composition comprising a plurality of parallel message streams. As described in more detail below each message stream is organized in a track that includes a sequence of message clips. In one embodiment the file manager user interface component has an administratively configured set of user privileges that control access to the operations by a given user.

In one embodiment composition editor comprises a module that allows a user to generate or edit a particular composition. In one embodiment a composition consists of one or more parallel tracks. In the context of the present application a track is an individual timeline or sequence of message clips that contains messages to be sent. Message clips may be placed in tracks to define their sequencing timing and dependencies. Parallel tracks in a composition may thus be divided into bands . The types of different bands include sequenced bands and time based bands. A sequenced band contains sequenced message clips that are arranged to show the start dependencies of the clips that is which clips must complete before another clip may be started. In contrast a time based band contains time based message clips. These clips may be arranged on a time scale to show when they are to be started based upon the elapsed time from the start of the band. In one embodiment a composition may contain any mixture or combination of sequenced and or time based bands in any order. Typically each band is completed before the next band starts.

An example of a composition layout that utilizes a combination of sequenced and time based bands is an initial sequenced band that sends messages required to set up the test environment followed by a time based or sequenced band that performs the actual test then followed by a final sequenced band that sends the messages required to terminate the test or clean up after the test. For instance if a user wanted to test a customer relations management system setting up the test environment might first involve inserting all the customers needed to run the test. The test may then perform some operation on the customers such as testing to see if their addresses could be changed. Finally a clean up operation after the test may involve removing all of the customers from the database.

In one embodiment composition editor enables a user to set the length of time of an execution of a composition and to link a composition to other compositions thereby permitting sequential repetitive and or simultaneous executions of one or more compositions also referred to as playlists . Composition editor thus allows a user to structure a composition to have one or more tracks and to structure one or more tracks to have one or more bands.

A specific implementation of composition editor provides a user with the ability to add a new track and delete an existing track to set a track s name description or tip text to disable enable a track to define a new band and delete an existing band to add a new message clip linked embedded or created on the fly to delete an existing message clip to move an existing message clip to a different location within a track or to a different track to adjust the size of an existing message clip to randomize or otherwise modify the timing of an existing clip to edit an existing message clip drills into the clip editor to change the displayed name tip text description or thumbnail image of an existing message clip and to cut copy paste tracks and message clips.

Compositions may be stored in whole or in part in the system memory and or the computer readable media . The user may add message clips to bands using computer mouse by dragging and dropping icons onto band icons as described below in reference to . A given composition may be executed by the user from the composition editor at any time. While a composition is playing composition editor may be invoked to show the composition s progress e.g. as a function of time. When time based bands are playing a playhead shows the advance of time. For both sequenced and time based bands there may also be a visual indication of the progress of the playing clips in each track. In certain embodiments control buttons in the form of icons are provided to pause resume restart or stop the playing of the composition. In addition certain specific embodiments may include a control to increase or decrease the rate of play for time based bands and or to keep repeating the play of a composition.

The user may move from composition editor to message clip editor or message editor utilizing the GUI described herein. Message editor is utilized by a user to generate or edit modify messages. In the context of the present application a message generally refers to a unit of data that can be sent via an electronics communications network e.g. network to another computational or communications system or device e.g. to server or . By way of example a message could represent a communication sent to a queuing system a REST call or a HTTP request. A message could also be instantiated entirely or partially as a single operation such as a web service call in any one of a variety of forms e.g. XML JMS HTML JSON etc.

Message clips comprise a set of one or more messages that includes a specification of the timing and or dependencies within that set of messages. In one embodiment message clips may be shared by multiple compositions. Time based execution delays may be built into a message clip wherein two messages may be instantiated at different start times as gauged from a start time of the message clip. It is also possible to create a dependent group of messages within the time based clips that specifies that the first message in the group is to be sent at a specified time but the remaining messages in the group are then to be sent one at a time only after a prior message has completed. The instantiation of messages within a message clip may be sequentially organized with dependencies wherein one or more messages are not instantiated until one or more other messages within message clip have been executed.

A transition may optionally be inserted between each message. In the context of the present application a transition generally refers to a set of specified actions to be taken between the prior and the next message. Transitions may also be specified to execute upon certain events such as start of Track start of Clip failure of Message send and so forth. A transition can be associated with a specific message. In one implementation transition editor allows a user to encode transitions that specify conditional actions to be taken between two message clips that is the actions are taken or executed between two message clips only when certain events or conditions occur. Transition editor may also be used to edit properties values or qualities of a message or a message clip. Transition editor may also be used to write to log files run JAVA code etc.

Target editor may be utilized to provide message clips with addresses to which message clips will attempt to communicate and also to provide information about the allowable formatting of the data to be sent. A target is an item in the repository that represents the identity of a type of external application or system to which messages can be sent such as a web service a network address a SOA service a message queue one or more servers e.g. a Web Server or any other type of computational or communications system or device that a user desires to test and or demonstrate. A target may be defined as having multiple instances. A target location is the definition of a particular instance of a target such as a specific individual implementation of a Web Service. The target location contains a complete specification of the physical location of an implementation of a target so that message streams can be sent to that target. The various locations of a particular target may be defined and edited using a target editor GUI. Note that in one embodiment target locations are defined for each target that is the location is part of the target target locations are not independent items in the repository.

Message clip editor is a portion or page of the GUI that allows a user to create and edit message clips. Messages may be presented in multiple ways. In addition a user may switch among different views of a clip while viewing or editing it. For example one view of a message clip may show messages within a clip according to the order in which they are to be sent. For time based clips the start time of each message may be displayed with numbers above the message. For sequenced clips no times are shown and the display illustrates dependencies which messages must be sent before the next message may be sent . When nested clips are shown within the clip the size of the nested clip may be the same size as the size of an individual message.

In one implementation message clip views provide a way to create and edit the name of a clip an optional description text which may contain any text the user desires an optional tip text line a single line of text that is shown when the user is choosing from lists of clips elsewhere in the system and an optional thumbnail image i.e. an image used for display purposes when the clip is shown in other displays such as the composition editor . Message clip editor also allows user to add a new target location pair i.e. the destination of the message delete an existing target location pair pick a different location for an existing target location pair change the local name for an existing target location pair and replace an existing target location pair with a different target location pair.

Workspace also contains a left hand side navigator menu area with menu items such as Preferences Repository Compositions etc. Clicking on an item in the list shows some sort of summary display on the right hand side of the window appropriate to the item type. Operations on items may be performed through the summary display on the right hand side of workspace . Thus a user may select from individual menu items in menu area to open a new page in the GUI. Note that in the described embodiment the repository items seen by a user depends upon their administratively assigned privileges permissions.

The example of illustrates the case of a user who has selected Recently Played compositions. The result shown to the right of the navigator menu area in workplace is a detailed depiction of recently played compositions. This example further illustrates a user having selected Composition thereby resulting in a listing of the details of each event played in Composition . Note that these details include start and end times for each message and whether each message has completed or failed. Start and end times for non selected recently played compositions are also shown in workplace including whether these compositions have completed or failed.

A Composition Summary area for Composition is also provided. Summary area indicates the state of a selected composition state i.e. failed and may include specifics such as start time a total time it took to play the composition the number of messages and transitions within the composition and other information.

Messages may be any type of electronic message. For example message may comprise instructions to log into a particular web service. Message might comprise an instruction such as add a customer whose name is Benjamin and whose email address is benjamin3124 yahoo.com. Message might comprise an instruction such as fetch me the customer name Benjamin to test whether the user gets the name back as he should if the system is working properly and so forth. Messages are visually defined using the GUI in the order the user specifies them to be sent. Once defined messages may be saved as a reproducible composition which may be played and replayed. In the above example the web service being tested by the composition either succeeds or fails accordingly.

In addition message clips placed in a composition may be linked. When a user places a message clip within a composition he may simply refer to it by name i.e. if a particular message clip has already been created and a user would like to use the same message clip . If this message clip is changed by user then anyone who subsequently uses this same message clip by name in a composition sees that change. Such a message clip is called a linked message clip. The composition may point to or select a message clip by name in order to have it played. An icon may be used to let a user know of a particular message clip within a composition is linked or embedded.

A user may also utilize message clips within other message clips in a nested fashion such as message clip which is another message clip being included within message clip . Nested message clips allow a user to reuse message clips within other message clips. Clips can also be used multiple times by placing a clip icon in a track multiple times. Nested Clips may be used to build up re usable units of work based on smaller units.

Message clip editor may be used to edit message clips such as those illustrated in . In one implementation the message clip GUI page provides a user with the ability to drag messages and transitions around to rearrange the ordering to cut copy and paste messages and transitions to insert a new message and or transitions and edit an existing message and or transition to delete existing message and transition and to create a dependent group of messages.

Although illustrates two bands and it is appreciated that there may be many more bands in a given composition. Each message in a band is played in sequence before the next band begins.

In the time based message clips of the height and number of the vertical columns of dots represents the message density of each message clip that is how many messages are in each message clip and how they are distributed . Although the time based message clips shown in are evenly distributed it is possible to have a time based message clip with a cluster of messages in the beginning and then a gap for example or multiple clusters of messages with gaps between the clusters or any other type of cluster arrangement.

Control panel area contains a set of arrows that allow a user to play a composition to backtrack to an earlier portion of composition and or fast forward to a part of the composition that has not yet been played. A user may browse and edit a composition using Resource and Clip Editor buttons respectively shown at the right hand side of control panel area . A continuous play button in control panel area allows a user to play the composition over and over again. A digital clock shown just to the right of button may optionally be included in control panel field to track elapsed time since the beginning of the composition. In this example 31 minutes and 15 seconds have elapsed since the start of play. A portion of control panel area also indicates how many messages have been sent since the start of play and at what speed messages are being played. According to the example illustrated by 1 060 251 messages have been sent at 1 speed.

In one implementation one or more control buttons may be included that allow a user to change the speed at which messages are applied in other words to send messages to various destinations faster or slower than 1 speed. In addition a special goal seeking command icon or button may be included to run a composition over and over each time at a progressively faster pace and or volume until the target device e.g. a server or application fails or crashes. The point in the test where the target fails may be stored and visually displayed via the GUI in a report that includes statistics on the response time of the target under test. Such a feature is useful in determining the capacity or robustness of a particular target or target location pair.

In the example of the message clip editor is open as indicated by the string of message icons displayed at the bottom of control panel area . A user may edit any message clip at any time. In the example shown the T timed message clip is being edited by the user. Icons with Google and Yahoo names represent the individual messages in the T timed clip . A message represented by Google icon for instance is shown sent at the start of time based message band at time t 00 00 00. Icon comprises a message to create Account that is sent to a Google server. At time t 00 00 15 a message to update Account is sent to the Google server as represented by icon . Similarly at time t 00 00 40 a delete Account message is sent to the Google server as represented by icon .

Note that transitions may occur at various points in a message clip. For example a transition is shown occurring between icons a transition occurs between icons and and a transition occurs between icons . A user may scroll to the left and right to see additional messages not shown in this view in T timed message clip . Although messages are illustrated being sent to Google and Yahoo servers in a user may send messages to any number of different servers or other network nodes devices. A user may also send messages in a composition to multiple servers within a given enterprise or entity such as Google.

A scroll button in control panel area allows a user to scroll the visual field of the user interface left or right. A view pull down button allows a user to view message clips in a variety of different ways. The view in shows messages as boxes with the time the message starts indicated at the top of each box. However messages in a different view may be placed on a timeline e.g. so that the message illustrated by icon is further to the right than it is shown in view of . A slider arrow button at the bottom of control panel area may be used to zoom in and out i.e. to visually display more or fewer images on the GUI screen. Clicking on button entitled Open in Clip Editor opens the full clip editor as described in conjunction with .

A user may edit message clips by clicking on various options provided in the navigator menu area. In this example user has clicked on Clip Builder to make changes and or create new messages and transitions within the T timed clip . A user who wants to create a new message in the T timed clip may click on the musical note icon under the New heading in control panel field . A user may click on the gear wheel icon under the musical note icon to create a new transition. User may also click on Targets to change and or edit the message targets i.e. the Google and or Yahoo servers defined in T timed clip .

A user may also click on the Properties selection to change edit or create message properties which are name value pairs. The user may specify that when a composition is played property values are to be substituted into messages before they are sent and are to be extracted from message responses when they are received. For example when the message represented by icon to create Account is played this message may take a data item that was returned from the operation and put it into a property for reuse later. For instance the Google server may return an account number after receiving the message represented by icon to create Account that may be placed in a property. Thereafter the message represented by icon to update Account reads that property and uses that data to determine which account to update. This property setting and retrieval can also involve simple value modification such as MyInt 1 or CurrentDate.year or MyString.last 5 or even pulling in values from environment variables or other external sources. Through control panel the user may also specify that a script or macro may be executed before the message is sent and after the response is received. These scripts may also set and or fetch these property values. In addition transitions placed between messages in the clip may include scripts that fetch and set these property values.

In the example of control panel area also displays a tree structure under the Name heading that lists saved reusable objects in a user s repository. These folders may have a variety of objects in them such as pre defined compositions messages clips etc. Pre defined transitions in this particular user s repository include Security Token Global and Control Character Expr. Any of these transitions may be dragged and dropped over to the message clip for insertion therein.

In the example of a user has clicked on Targets to show the targets that are defined i.e. Google and Yahoo servers under the Name heading in control panel area . Highlighting the Google entry as shown by the rectangular box results in a display of detailed information about the target. The name target and location of the Google Acct Mgmt Asia Dev Server are displayed in the lower right hand side of control panel area . A user may also click on Browse button to see other targets displayed in the Target area.

In the embodiment illustrated by the target is a Google account service that has a particular structure which requires a user to enter a name and address for the new account holder in designated areas within workplace . The word string for example prompts the user to enter the data in text format. Under first Name the user enters John in text format in the designated area. When data is to be entered in numeric form the prompt int is utilized such as when user is prompted to enter the new account holder s zip code. In addition rather than user having to enter the hard coded state e.g. entering CA all the time for State under the Shipping Address portion of a user can create a property or use a property that has already been created to get the value out of the property to be sent in the message to the server.

The outputs section of the message editor is information that is expected to be received back from the server after the server receives the create Account message. A user could select the account ID of the outputs section and specify that it is to be placed into a property when the message response is received. For instance after a user sends the create Account message to the Google server the server may send an account ID for the new account holder back to the system where it is stored in the outputs section of the message editor. The next sequenced message clip update Account may then extract the value in this property e.g. account ID number and send that value or data item in its message.

 Grid button and XML button provide two different ways of viewing a particular message e.g. create Account . A user may click on XML button to view raw data. Alternatively in the example of Grid button has been selected. It is appreciated that the names of the buttons may change depending upon the particular target of the message. For example some targets may have raw underlying data that is in a different format than XML so the button may be labeled something other than XML . A play button allows a user to play out just this one message. The digital clock shown to the right of button indicates the amount of time that it took to play the message in this case time t 00 00 15.

In a control panel area of the user has highlighted Target and Operation to view the target that this message will be sent to i.e. Google Acct Mgmt Asia Dev Server and also to view the message type i.e. create Account . Highlighting Properties in control panel area allows a user to view a list of all properties found in this particular message.

Transitions may comprise special logic between two messages in a message clip. For example if a first message sent to a server requests an account ID from the server and the account ID received back from the server is encrypted in a secret form that needs to be decrypted or transformed in some way in order to send in the next message then a transition between these two message may include a script to decrypt or transform the account ID.

In the embodiment shown a user may set values into properties e.g. arithmetic computations in a set properties field . A conditional splitter allows a user to express if then else logical conditions. For instance a script processor field on the left side of the screen shot could be the then portion of the statement with script processor fields and on the right side of the screen shot specifying the else portion. Nested transition field may be used to execute a subroutine i.e. a transition that calls another transition .

The example of also shows a do Get Cached Page icon to indicate where in a composition the particular transition being edited by the transition editor may be used. In other words do Get Cached Page icon is the message to be played before this particular transition is executed and do Get Cached Page Resp icon is the message to be played after this transition is executed.

Practitioners in the art will appreciate that there are numerous events that may occur during the play out of a composition e.g. composition starting ending a track starting a clip starting a clip failing etc. . For each of these events a user may use transition editor to specify a conditional transition to be executed when a specified event occurs. For instance user may create a transition to be executed every time a particular message clip begins playing. Or user may create a transition to be executed every time a particular message send fails.

If the composition is to be halted then the test is stopped i.e. the execution of the composition is ended block . Alternatively the composition may continue to be played block repeating the above steps of receiving results and monitoring for a failure. Additionally in block performance statistics may be archived before continuing with the test. Eventually the composition ends one way or another block after which time the results are archived in a report block and returned to user block .

It should be understood that elements of the present invention may also be provided as a computer program product which may include a machine readable medium having stored thereon instructions which may be used to program a computer e.g. a processor or other electronic device to perform a sequence of operations. Alternatively the operations may be performed by a combination of hardware and software. The machine readable medium may include but is not limited to floppy diskettes optical disks CD ROMs and magneto optical disks ROMs RAMs EPROMs EEPROMs magnet or optical cards or other type of machine readable medium suitable for storing electronic instructions.

Additionally although the present invention has been described in conjunction with specific embodiments numerous modifications and alterations are well within the scope of the present invention. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

