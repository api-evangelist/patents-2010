---

title: Systems and methods for creating snapshots
abstract: A computer-implemented method for creating snapshots may include identifying a request to take a snapshot of a primary volume of data. The computer-implemented method may also include identifying a write-once block device configured to receive data for the snapshot. The computer-implemented method may further include identifying an attempt to write to a block of the primary device. The computer-implemented method may additionally include copying the block to the write-once block device before allowing the write attempt to write to the block of the primary volume. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08281096&OS=08281096&RS=08281096
owner: Symantec Corporation
number: 08281096
owner_city: Mountain View
owner_country: US
publication_date: 20100602
---
Organizations increasingly generate and use large amounts of data. In the course of managing its data an organization may wish to back up this data while maintaining uninterrupted access to the same.

Creating a consistent backup may involve backing up all data within a backup reflect the state of the backed up data at a given point in time. In order to provide a consistent backup of a volume of data as well as uninterrupted access to write to the volume a backup system may utilize a space saving snapshot. Traditional technologies may create a space saving snapshot of a volume by making a copy of a block of data on the volume whenever that block of data is about to be overwritten. Attempts to read from the snapshot may then be either directly fulfilled from the volume if the corresponding block on the volume has not changed since the snapshot or fulfilled from a copied block of data created for the snapshot.

In order to locate copied blocks of data when fulfilling read requests for a snapshot traditional technologies may maintain a map that identifies the location where each copied block of data is stored. Furthermore traditional technologies may maintain a map of which blocks of data have been copied for the snapshot. Unfortunately maintaining such maps may degrade system performance particularly in the context of a cluster. For example if a cluster of systems have access to write to a volume of the snapshot and or need access to the snapshot then synchronizing the maps across various nodes within the cluster may increase I O latency and network traffic. Accordingly the instant disclosure addresses a need for efficiently creating snapshots.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for creating snapshots. Embodiments of the instant disclosure may create a snapshot by performing copy on write operations to a write once block device. The write once block device may have various properties e.g. allowing only one write per block address sparseness invalid read handling etc. to ensure that the snapshot is created accurately and can be read from without requiring other systems such as nodes in a cluster to track detailed information about the snapshot. For example a method may include identifying a request to take a snapshot of a primary volume of data identifying a write once block device configured to receive data for the snapshot identifying an attempt to write to a block of the primary volume and then copying the block to the write once block device before allowing the write attempt to write to the block of the primary volume.

The write once block device may have a variety of properties. For example the write once block device may be configured to signal an error on an attempt to read from an unwritten block. Accordingly in some examples the method may also include identifying an attempt to read an additional block from the snapshot receiving a message from the write once block device indicating that the additional block has not been written to the write once block device and then fulfilling the read attempt from the primary volume. In some examples the method may also include identifying an attempt to read the block from the snapshot and then retrieving the block from the write once block device.

In some examples the write once block device may include a sparse device. In various examples the method may also include initializing the write once block device to an empty state. The write once block device may include a variety of components and be realized in a variety of ways. For example the write once block device may include a virtual device a virtual hard disk and or a thin provisioned array device.

The write attempt may occur in a variety of contexts. For example the write attempt may be performed by a node in a cluster of computing systems with access to the primary volume. In this context the method may also include recording in a tracking structure on the node an indication that the block has changed since the snapshot. The method may also include identifying an additional attempt to write to the block determining from the tracking structure that the block has changed since the snapshot and then allowing the additional write attempt without copying the block to the write once block again. In some examples the method may also include identifying an internode communication between the node and an additional node in the cluster and then including information from the tracking structure with the internode communication. Additionally or alternatively the method may include asynchronously transmitting information from the tracking structure to an additional node in the cluster.

In some examples a system for creating snapshots may include an identification module an interception module and a copying module. The identification module may be programmed to identify a request to take a snapshot of a primary volume of data and to identify a write once block device configured to receive data for the snapshot. The interception module may be programmed to identify an attempt to write to a block of the primary volume. The copying module may be programmed to copy the block to the write once block device before allowing the write attempt to write to the block of the primary volume.

The write once block device may have a variety of properties. For example the write once block device may be configured to signal an error on an attempt to read from an unwritten block. Accordingly in some examples the system may also include a reading module programmed to identify an attempt to read an additional block from the snapshot receive a message from the write once block device indicating that the additional block has not been written to the write once block device and then fulfill the read attempt from the primary volume. In some examples the reading module may also be programmed to identify an attempt to read the block from the snapshot and then retrieve the block from the write once block device.

In some examples the write once block device may include a sparse device. In various examples the system may also include a module to initialize the write once block device to an empty state. The write once block device may include a variety of components and be realized in a variety of ways. For example the write once block device may include a virtual device a virtual hard disk and or a thin provisioned array device.

The write attempt may occur in a variety of contexts. For example the write attempt may be performed by a node in a cluster of computing systems with access to the primary volume. In this context the system may also include a tracking module programmed to record in a tracking structure on the node an indication that the block has changed since the snapshot. The tracking module may also be programmed to identify an additional attempt to write to the block determine from the tracking structure that the block has changed since the snapshot and then allow the additional write attempt without copying the block to the write once block again. In some examples the tracking module may also be programmed to identify an internode communication between the node and an additional node in the cluster and then include information from the tracking structure with the internode communication. Additionally or alternatively the tracking module may be programmed to asynchronously transmit information from the tracking structure to an additional node in the cluster.

In some embodiments a computer readable storage medium may include one or more computer executable instructions that when executed by at least one processor of a computing device cause the computing device to identify a request to take a snapshot of a primary volume of data identify a write once block device configured to receive data for the snapshot identify an attempt to write to a block of the primary volume and then copy the block to the write once block device before allowing the write attempt to write to the block of the primary volume.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for creating snapshots. Systems and methods described herein may create a snapshot by performing copy on write operations to a write once block device. The write once block device may have various properties e.g. allowing only one write per block address sparseness invalid read handling etc. to ensure that the snapshot is created accurately and can be read from without requiring other systems such as nodes in a cluster to track detailed information about the snapshot. By writing to and reading from the write once block device for snapshot operations systems and methods described herein may create a snapshot for a volume accessible by a cluster without requiring that nodes of the cluster keep track of and synchronize information about the snapshot such as which blocks of the volume have changed since the snapshot and or the locations of blocks in the snapshot. Eliminating these requirements may reduce I O latency network traffic and or other computing resources for the cluster.

The following will provide with reference to and detailed descriptions of exemplary systems for creating snapshots. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In addition and as will be described in greater detail below exemplary system may include a copying module programmed to copy the block to the write once block device before allowing the write attempt to write to the block of the primary volume. Although illustrated as separate elements one or more of modules in may represent portions of a single module or application.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. cluster and or write once block device computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

As illustrated in exemplary system may also include a write once block device . Write once block device may represent portions of a computing device or a plurality of computing devices. For example write once block device may represent a portion of computing system in and or portions of exemplary network architecture in . Alternatively write once block device in may represent one or more physically separate devices capable of being accessed by a computing device such as computing system in and or portions of exemplary network architecture in .

Additionally exemplary system may include a primary volume . Primary volume may represent portions of a storage device or a plurality of storage devices. For example primary volume may represent at least a portion of primary storage device in and or portions of exemplary network architecture in .

Exemplary system in may be deployed in a variety of ways. For example all or a portion of exemplary system may represent portions of a cloud computing or network based environment such as exemplary system illustrated in . Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

As shown in system may include a cluster with access to write once block device and primary volume via a network . Cluster may include nodes n . Primary volume may include data blocks n . In one embodiment and as will be described in greater detail below one or more of nodes n may include identification module interception module and copying module .

Identification module may be programmed to identify a request to take a snapshot of primary volume . Identification module may also be programmed to identify write once block device . Interception module may be programmed to identify an attempt to write to a block of primary volume and copying module may be programmed to copy block to write once block device before allowing the write attempt to write to block . A copy of the original block may accordingly constitute at least a portion of changed blocks on write once block device .

Cluster generally represents any group of computing devices that are capable of accessing a common volume of data. Examples of nodes n in cluster include without limitation laptops desktops servers cellular phones personal digital assistants PDAs multimedia players embedded systems combinations of one or more of the same exemplary computing system in or any other suitable computing device.

Network generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network include without limitation an intranet a wide area network WAN a local area network LAN a personal area network PAN a storage area network SAN the Internet power line communications PLC a cellular network e.g. a GSM Network exemplary network architecture in or the like. Network may facilitate communication or data transfer using wireless or wired connections. In one embodiment network may facilitate communication between nodes through . In another embodiment network may facilitate communication between nodes n and primary volume .

As illustrated in at step one or more of the systems described herein may identify a request to take a snapshot of a primary volume of data. For example at step identification module may as part of node in identify a request to take a snapshot of primary volume .

As used herein the term volume may refer to any collection of data and or logical unit of data and or storage. Additionally the term snapshot may refer to any representation of a volume and or a portion of a volume in a certain state and or point in time. In some examples a snapshot may refer to a space saving snapshot e.g. a snapshot that references a primary volume for unchanged data .

Identification module may identify the request to take the snapshot in any suitable manner. For example identification module may receive a message from an application e.g. via an application programming interface API with an instruction to take the snapshot. Additionally or alternatively identification module may identify the request by reading a configuration file with a direction to take the snapshot. In some examples identification module may receive the request simply by being executed e.g. instructions to take the snapshot may be included within identification module .

At step one or more of the systems described herein may identify a write once block device configured to receive data for the snapshot. For example at step identification module may as part of node in identify write once block device .

As used herein the term block may refer to any suitable unit of data. Furthermore the term block device may refer to any storage device capable of storing blocks of data. In various examples a block device may refer to a physical storage device an appliance a storage array a virtual device a device node enabling software such as a driver and or combinations of one or more of the same. Additionally the term write once block device may refer to any block device that will accept only one write per target address e.g. a block device that will not allow overwriting .

Identification module may identify the write once block device in any suitable manner. For example identification module may receive a message that identifies the write once block device. Additionally or alternatively identification module may identify the write once block device by reading a configuration file that identifies the write once block device. In some examples identification module may identify the write once block device via a connection to the write once block device.

In some examples the write once block device may be configured to signal an error on an attempt to read from an unwritten block. The error may include any message communication and or behavioral pattern indicating that the unwritten block is unwritten and or unreadable. As will be described in greater detail below systems and methods described herein may read from the snapshot by reading from an address of the write once block device and failing over to reading from a corresponding address of the primary device if the write once block device indicates that the address is unwritten.

Systems and methods described herein may also initialize the write once block device to an empty state e.g. as part of configuring the write once block device to receive data for the snapshot . For example identification module may mark each block in the write once block device as empty. By initializing the write once block device to an empty state every block of the primary volume unwritten since the snapshot may reflect an unwritten state in the snapshot. Additionally or alternatively identification module may reallocate a block of the write once block device.

The write once block device may also include a sparse device. As used herein the term sparse device may refer to any device volume logical disk and or logical storage unit for which storage space e.g. from a physical storage device or array of devices is allocated on an as needed or just in time basis. In some embodiments a sparse device may represent more storage space than is allocated for the sparse device e.g. the sparse device may represent storage space equal to the size of the primary volume . In various embodiments the sparse device may use an addressing scheme isomorphic to an addressing scheme of the primary volume. In this way the write once block device may accept addresses equivalent to addresses on the primary volume. Thus the write once block device may automatically map a correspondence between snapshot blocks and primary volume blocks.

The write once block device may include a variety of components and may be implemented in a variety of ways. In some examples the write once block device may include a virtual device. For example the write once block device may be implemented on an appliance and or a storage array with a target mode driver deployed for a file system. The virtual device may be represented by a sparse file in the file system. The driver may block any write to a block after the first write e.g. via a block mapping API and or by inspecting the sparse file to determine whether the block has already been written .

In some additional examples the write once block device may include a virtual hard disk. For example the write once block device may be implemented on an appliance and or a storage array with a target mode driver deployed for the virtual hard disk on a block device or volume. The virtual hard disk may include a map for translating virtual addresses to physical addresses. Various systems described herein may consult the map to enforce the write once property e.g. by inspecting the map to determine if a previous write attempt wrote to a given virtual address . In addition to or as an alternative to a virtual hard disk driver the write once block device may be implemented with a log structured volume driver e.g. on a UNIX system .

In some further examples the write once block device may include a thin provisioned array. As used herein the term thin provisioned may refer to allocating storage space e.g. from a physical storage device or array of devices on an as needed or just in time basis. In these examples the write once block device may be implemented with a change tracking map e.g. stored in non volatile memory . Systems described herein may use the change tracking map to enforce the write once property of the write once block device. In some examples the chunk size of the thin provisioned array may be small in order to conserve space.

At step one or more of the systems described herein may identify an attempt to write to a block of the primary volume. For example at step interception module may as part of node in identify an attempt to write to block of primary volume e.g. a write attempt by node .

Interception module may perform step in any suitable manner. For example interception module may identify the attempt to write to the block by intercepting the write attempt. In some embodiments interception module may intercept a communication over a network for writing to the primary volume. Additionally or alternatively interception module may include at least a portion of a file system driver. In this example interception module may intercept the write attempt as the write attempt is processed by the file system driver.

The write attempt may be performed in a variety of contexts. For example the write attempt may be performed by a stand alone computing system with access to the primary volume. In some examples the write attempt may be performed by a node in a cluster of computing systems with access to the primary volume. For example shows an exemplary system for creating snapshots. Node in may attempt to write to primary volume . In this example node may also have access to primary volume .

In some examples a tracking module may also record in a tracking structure on the node an indication that the block has changed since the snapshot. As used herein the phrase tracking structure may refer to any map list index bitmap and or other data structure suitable for tracking whether a block of a volume has changed since a snapshot. Using as an example nodes n may include corresponding tracking structures n . Each node in cluster may also include a tracking module . Node may attempt to write to block . Tracking module on node may then indicate in tracking structure that block has changed.

As will be described in greater detail below systems and methods described herein may copy the block to the write once block device before allowing the write attempt to write to the block of the primary volume. However a subsequent attempt to write to the block may result in a harmless but wasteful failed attempt to copy the block to the write once block device again. Accordingly the tracking module may also use the tracking structure to determine whether to copy blocks to the write once block device before allowing corresponding write attempts. For example the tracking module may identify an additional attempt to write to the block determine from the tracking structure that the block has changed since the snapshot and then allow the additional write attempt without copying the block to the write once block device again. Continuing the example using above tracking module on node may identify an additional attempt to write to block . Tracking module may then look up an address of block in tracking structure and determine that block has changed since the snapshot e.g. that block has already been copied to write once block device . Tracking module may then allow the additional write attempt without copying block to write once block device . For example tracking module may prevent and or block node from copying block to write once block device again.

By preventing some futile attempts by the same node to perform multiple copy on write operations at the same location on the write once block device systems and methods described herein may avoid wasteful network traffic and or other wastes of computing resources. In order to further save computing resources tracking module may also share information from the tracking structure with other nodes.

For example tracking module may identify an internode communication between the node and an additional node in the cluster. The internode communication may include any communication between nodes in a cluster. For example the internode communication may include a communication by a distributed lock manager on the node. After identifying the internode communication tracking module may include information from the tracking structure with the internode communication. For example tracking module may include information indicating which blocks have changed on the primary volume since the last internode communication. Additionally or alternatively tracking module may simply include the tracking structure. By sharing the information from the tracking structure as a part of an already existing internode communication tracking module may help the additional node prevent wasteful copy on write attempts while minimizing the cost of synchronizing information between nodes.

Using the earlier example with tracking module on node may identify an internode communication from node to node . Tracking module may then include information from tracking structure e.g. information indicating that block has been changed since the snapshot was taken in the internode communication. Tracking module on node may then incorporate the information into tracking structure . If node subsequently attempts to write to block tracking module may refer to tracking structure and prevent a copy on write attempt.

In another example tracking module may asynchronously transmit information from the tracking structure to an additional node in the cluster. In this manner the nodes may share tracking information and prevent some useless copy on write attempts without creating unwanted latency by requiring fully synchronized tracking information.

At step one or more of the systems described herein may copy the block to the write once block device before allowing the write attempt to write to the block of the primary volume. For example at step copying module may as part of node in copy block to write once block device before allowing the write attempt to write to block of primary volume .

Copying module may perform step in any suitable manner. For example copying module may copy the block to the write once block device by copying the block to an address on the write once block device equivalent to the address of the block on the primary volume. For example the write once block device may use relative addresses identical to the addresses of the primary volume. In this example copying module may merely copy the block to the write once block device at the same address as the block is found on the primary volume. After step method may terminate.

In some examples the systems and methods described herein may also handle attempts to read from the snapshot. For example a reading module may identify an attempt to read the block from the snapshot. The reading module may then retrieve the block from the write once block device. Using as an example node may include a reading module . Block may have previously been copied by copying module from primary volume to write once block device . Reading module may identify an attempt to read a block at the address of block from the snapshot. Reading module may then retrieve block from write once block device .

In various examples reading module may refer to the primary volume in order to fulfill a request to read from the snapshot. For example reading module may identify an attempt to read an additional block from the snapshot. Reading module may then receive a message from the write once block device indicating that the additional block has not been written to the write once block device. As mentioned earlier in some examples the write once block device may be configured to signal an error on an attempt to read from an unwritten block. After receiving the message reading module may use data read from the primary volume e.g. from a corresponding address of the primary volume . For example reading module may read the block from the primary volume and then attempt to read the block from the write once block device. In this example reading module may use the block read from the write once block device in the absence of an error from the write once block device and use the block read from the primary volume in the presence of an error. In this manner the snapshot may function as a space saving snapshot.

Using as an example reading module may identify an attempt to read a block at the address of block from the snapshot. Reading module may then attempt to retrieve a corresponding block from write once block device but may receive instead a message indicating that block has not been written to write once block device since the snapshot was taken. Reading module may accordingly fulfill the read attempt with block .

By writing to and reading from the write once block device for snapshot operations systems and methods described herein may create a snapshot for a volume accessible by a cluster without requiring that nodes of the cluster keep track of and synchronize information about the snapshot such as which blocks of the volume have changed since the snapshot and or the locations of blocks in the snapshot . Eliminating these requirements may reduce I O latency network traffic and or other computing resources for the cluster.

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein. For example processor may perform and or be a means for performing either alone or in combination with other elements one or more of the identifying initializing recording copying determining allowing including transmitting retrieving receiving and or fulfilling steps described herein. Processor may also perform and or be a means for performing any other steps methods or processes described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation random access memory RAM read only memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an input output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an ISA PCI PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure . In certain embodiments memory controller may perform and or be a means for performing either alone or in combination with other elements one or more of the steps or features described and or illustrated herein such as identifying initializing recording copying determining allowing including transmitting retrieving receiving and or fulfilling.

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface . I O controller may be used for example to perform and or be a means for performing either alone or in combination with other elements one or more of the identifying initializing recording copying determining allowing including transmitting retrieving receiving and or fulfilling steps described herein. I O controller may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation SCSI host adapters USB host adapters IEEE 1394 host adapters SATA and eSATA host adapters ATA and PATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution. In certain embodiments communication interface may perform and or be a means for performing either alone or in combination with other elements one or more of the identifying initializing recording copying determining allowing including transmitting retrieving receiving and or fulfilling steps disclosed herein. Communication interface may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device. In at least one embodiment input device may perform and or be a means for performing either alone or in combination with other elements one or more of the identifying initializing recording copying determining allowing including transmitting retrieving receiving and or fulfilling steps disclosed herein. Input device may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

In certain embodiments storage devices and may be used for example to perform and or be a means for performing either alone or in combination with other elements one or more of the identifying initializing recording copying determining allowing including transmitting retrieving receiving and or fulfilling steps disclosed herein. Storage devices and may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium. The phrase computer readable medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable media include without limitation transmission type media such as carrier waves and physical media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. CD or DVD ROMs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an application specific integrated circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a wide area network WAN a local area network LAN a personal area network PAN or the Internet.

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent network attached storage NAS devices configured to communicate with servers and using various protocols such as NFS SMB or CIFS.

Servers and may also be connected to a storage area network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network . Accordingly network architecture may perform and or be a means for performing either alone or in combination with other elements one or more of the identifying initializing recording copying determining allowing including transmitting retrieving receiving and or fulfilling steps disclosed herein. Network architecture may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for creating snapshots.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules described herein may transform a computing device into a device for efficient snapshots in a cluster context. As another example one or more of the modules described herein may transform a primary volume and write attempts into a snapshot.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

