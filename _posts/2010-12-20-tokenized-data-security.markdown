---

title: Tokenized data security
abstract: Provided are devices, methods, systems, computer readable storage media and other means for tokenizing data. In some examples, credit card numbers are tokenized using a pre-generated token map and absent the use of a networked database that stores a relatively large quantity of credit card numbers in a central location. The token map may be generated by a token map generator such that the token map can be used by a tokenizer to replace a portion of an account number with a token, and by a detokenizer to replace the token with the original portion of the account number. A pre-parser and parser may also be used to locate an account number and/or token in a message received over a network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08739262&OS=08739262&RS=08739262
owner: Sabre GLBL Inc.
number: 08739262
owner_city: Southlake
owner_country: US
publication_date: 20101220
---
This patent application claims priority to U.S. Provisional Patent Application No. 61 288 102 filed Dec. 18 2009 titled TOKENIZED DATA SECURITY which is hereby incorporated by reference in its entirety.

Every day millions of people use debit cards credit cards and other types of devices collectively referred to herein as credit cards to purchase goods and services. Credit cards usually include a payment account number PAN that includes the credit cards 12 19 digit number. The PAN is often embossed into and printed onto the credit card. Most credit cards also include a magnetic strip or RFID circuit that stores data representing the credit card s PAN.

Once a credit card is used to purchase goods networked devices may store the PAN maintaining security at the networked devices and availability of the information stored thereon is essential to the credit industry commerce in general and even modern society as a whole.

The Payment Card Industry PCI compliance currently requires that steps be taken to protect the PAN from potential cyber attackers. Some embodiments of the present invention include tokenization at the edge systems of a distributed network which may reduce the scope of applications that would governed by PCI compliance requirements.

As referred to herein tokenization includes the process of replacing at least a portion of a PAN with a token to render a representation of the PAN useless to unauthorized observers. In some embodiments the tokenization process can produce a tokenized PAN that has a field length as determined by the number of characters in the PAN that is the same as the untokenized PAN s field length. When implementing tokenization in accordance with some embodiments discussed herein legacy system components such as e.g. applications schemas switches servers and or databases that are currently configured to pass and or store non tokenized PANs may continue to operate as they are currently configured even if they happen to receive tokenized PANs provided by systems and apparatuses in accordance with embodiments discussed herein.

Some embodiments discussed herein can be implemented using one or more of the following components a token map generator a pre parser a parser a tokenizer and a detokenizer. In some embodiments the above listed components and or processes preformed thereby may be combined and or divided among various components and or systems.

A token map generator can comprise a machine configured to generate a token map that associates a portion of a PAN to a token. In some embodiments there may be one hundred million tokens included in each token map and any one of the tokens may be associated with any one of the PANs and or other type of code . The generated token map may be written to an encrypted file and used as an input in the tokenizing and or detokenizing processes.

A tokenizer can comprise a machine configured to tokenize a PAN. For example the tokenizer can be configured to receive a PAN and or other type of code and a token map as inputs and output a token with the same number of alphanumeric characters or any other type of characters as the inputted PAN. Alternatively or additionally the tokenizer may output a token that has a different number of characters than the inputted PAN. The outputted token may be substituted in between characters of the original PAN and used for application communications and storage such as those related to purchasing goods and services. The token can be subsequently used as input to a detokenizer. Access to the token map the tokenizer and or its process can be protected for use by only trusted applications and or secured hardware.

In some of the exemplary embodiments discussed herein a tokenized PAN can comprise three parts a prefix six to nine middle digits including a token map version identifier and a token and a suffix. Alternatively or additionally the tokenized PAN can comprise more or less parts and or each of the parts may comprise more or less digits.

The suffix of a tokenized PAN may include the same value as the last digits of the original PAN that is received. The middle digits of the tokenized PAN may comprise for example a randomly generated token that is based on the PAN s original middle digits as opposed to only being based on when the credit card is used . Systems in accordance with some embodiments may be configured to dynamically generate the token such that the total length of the token depends on or is otherwise associated with the total length of the untokenized PAN. For example in response to determining the untokenized PAN length is twelve digits the system may be configured to generate a token that consists of six characters. As another example in response to determining the PAN length is thirteen digits the system may be configured to generate a token that has a length of seven characters. As yet another example in response to determining the PAN length is fourteen to eighteen digits the system may be configured to generate a token that has a token length of eight characters. As a final example in response to determining the PAN is nineteen digits the system may be configured to generate a token that is nine characters in length.

A detokenizer can comprise a machine configured to for example convert a token generated by the tokenizer into the original PAN or other type of code . Access to this process can be protected for use by only trusted endpoints. The detokenizer may be configured to only be called from applications that need to process the PAN.

Although much of the disclosure is focused on tokenizing middle digits values and not tokenizing prefix values and suffix values any segment or segments of a PAN or other type of code may be tokenized while one or more other segments remain untokenized. In some embodiments rather than tokenize a middle digits value comprised of digits in the middle of a PAN a tokenizer may tokenize a targeted segment that may be comprised of one or more characters positioned throughout the PAN. The targeted segment may include for example two or more characters or portions of characters that are located next to each other characters dispersed individually throughout the PAN and or any combination thereof. Like the middle digits values discussed above some embodiments may or may not define the targeted segment based on character s predetermined location s within a given PAN. Similarly rather than not tokenizing a prefix value located before a targeted segment of characters and or suffix value located after a targeted segment of characters some embodiments may have one or more non targeted values that like the prefix and suffix values discussed above remain untokenized in a tokenized PAN. Likewise rather than replace a token with a middle digits value during detokenization the token may be replaced with the targeted segment. In this regard a token map may be generated to associate token values with targeted values and targeted values with token values. Non targeted values may also remain the same when a tokenized PAN is being detokenized. Therefore it is to be understood that the inventions are not to be limited to the specific embodiments disclosed and that modifications and other embodiments are intended to be included within the scope of the appended claims. Although specific terms are employed herein they are used in a generic and descriptive sense only and not for purposes of limitation.

Exemplary embodiments of the present invention are described in more detail hereinafter with reference to the accompanying drawings in which some but not all embodiments of the invention are shown. Indeed various embodiments of the invention may be embodied in many different forms and should not be construed as limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will satisfy applicable legal requirements. Like reference numerals refer to like elements throughout.

As defined herein a computer readable storage medium which refers to a physical storage medium e.g. volatile or non volatile memory device can be differentiated from a computer readable transmission medium which refers to an electromagnetic signal. Additionally as used herein the term circuitry refers to not only hardware only circuit implementations including analog and or digital circuitry but at least also to combinations of circuits with corresponding software and or instructions stored on a computer readable storage medium.

Example embodiments of the present invention may be configured to support various security and other functionalities in for example an online sales environment credit card sales application any other type of system or combination thereof. Embodiments discussed herein can be implemented using hardware and other machine components implemented by one or more servers source devices any other type of machine and or any combination thereof.

Embodiments discussed herein solve a number of problems such as those related to data storage requirements speed and security risks associated with existing centralized token databases. To overcome these problems one of ordinary skill in the art may be tempted to focus on innovation that leverages the current systems and methods. For example one skilled in the art may focus on ways to better encrypt data stored in large centralized databases. Some of the embodiments discussed herein however may be used on their own and or built on top of existing systems such as those that used large centralized databases. Among other things the following disclosure includes exemplary embodiments for protecting information by using a completely new approach.

Many of the examples discussed herein are related to PANs included in credit card numbers. One skilled in the art would appreciate that embodiments discussed herein may be configured for any type of code including those other than or in addition to credit card numbers PANs. For example methods systems computer readable media and or other means similar to or the same as those discussed herein can be used to protect any type of information including social security numbers bank account numbers healthcare information travel itineraries any other information or any combination thereof.

Credit cards often have between 12 and 19 digit PANs depending on the credit card provider. Tokenization of a targeted segment comprising at least some of the PAN such as the middle digits may allow applications to transmit and store the tokenized PANs without risking untokenized PANs being stolen while still allowing a detokenization process in accordance with some embodiments to obtain the original PAN and or other type of number if different from the PAN .

Server A can be a machine configured to operate as among other things a pre parser parser token map generator tokenizer and or detokenizer. For example server A may comprise one or more apparatuses that are configured to generate and maintain one or more token maps in accordance with some embodiments discussed herein. In some embodiments the security of the system is at least partially founded in the randomness of the token generation and security of a token map. The token map as referred to herein is a table multi dimensional array or other means for associating a token with a PAN or portion thereof such as the middle eight digits of a PAN . Exemplary components of server A are discussed further below in connection with e.g. and exemplary embodiments of token maps are discussed in connection with e.g. .

Additionally or alternatively server may be configured to tokenize a PAN before transmitting the PAN to an unsecured system over a public network or to any other device that may be at risk or a relatively high risk of cyber attack. Server A can be configured to implement and or be coupled to firewall A which can also be coupled to internet . Firewall perimeter A which shown around source devices A server A intranet A and firewall A is included in to show which devices may have access to an untokenized PAN received by source devices A. For example server A can be configured to tokenize any data it receives after determining the received data represents a credit card s untokenized PAN. shows an exemplary method for determining that server A and or any other device or devices has received an untokenized PAN. The received data may have been generated by source devices A one or more other machines inside firewall perimeter A not shown and or one or more other machines outside firewall perimeter A. As such firewall perimeter A can represent for example an electronic boundary including a group of machines that has access to untokenized PANs or a group of machines that has access only to tokenized PANs where server A acts as a tokenizer that tokenizes or detokenizes the PANs that it receives before serving the PANs to the other machines within firewall perimeter A.

For example the machines within firewall A may be consumer and retail system devices that are used to facilitate electronic payment including capturing credit card numbers from magnetic strips. Server A may be configured to tokenize all the credit card PANs before sending the PANs to a machine outside firewall perimeter A.

As another example the machines within firewall A could be machines used by an online vendor such as an online travel agency. The online travel agent may make reservations and schedule trips for customers. To help protect its customers financial and or other personal data the online travel agency may tokenize every PAN it receives from internet before the personal data is delivered to any travel agent s networked device such as source device A . As the tokenized data passes back through server A e.g. after being processed by the travel agent s computer the data can be detokenized so that external devices that may not be configured to implement features of the present invention are able interpret and correctly process the PAN or other data. As such server A may also or instead be configured as a detokenizer.

In some embodiments two or more servers of system can be configured to collaborate and implement features of the present invention. For example system can be configured to utilize a decentralized or distributed tokenization architecture as opposed to or in addition to a central tokenization system . To help show an example of the decentralized embodiments includes source devices B server B intranet B firewall B and firewall perimeter B which can each function the same as or similar to source devices A server A intranet A firewall A and firewall perimeter A respectively.

In some embodiments server B can be configured to archive server A s token map s . For example after establishing a secured connection using e.g. the SSL protocol or any other suitable protocol server A can electronically transfer its token map s to server B. Similarly updates can be made to server B s backup copy of server A s token map s . The updates can occur periodically e.g. hourly daily weekly etc. or in response to a trigger event such as e.g. server A generating and or updating a token map a network administrator of server A or server B initiating the backup transfer procedures etc. .

Similar to or the same as intranet A and B internet is an example of a network and can be comprised of any number of publicly and or privately accessible devices including routers servers databases antennas switches cellular towers satellite systems and or any other machine that facilitates wired and or wireless network communications.

Mainframe represents a central tokenization system that includes an internal server and database. While some embodiments may sufficiently protect numeric and other information absent a central tokenization system other embodiments can enhance or add another layer of security to centralized tokenization systems. For example mainframe can be configured to store in their entireties every PAN mainframe has every received. Additionally mainframe may be configured to store its own independently generated token associated with each PAN as well as the algorithm and instructions for generating a token from a PAN. While the other machines shown in may appear to function the same as electronic payment processing systems from the perspective of mainframe the other machines shown in may be backwards compatible with existing mainframes while also being configured to implement additional data security protections some examples of which are described herein on top of at least some of the traditional approaches that may be implemented by mainframe .

For example the credit card industry and or other business organizations may rely on one or more central databases such as PAN mainframe to persistently store and maintain the entire PAN for each credit card ever processed by system . In addition to the PANs mainframe can generate and or store tokens that represent the complete PANs instead of a portion thereof . The central database can also or instead be configured to tokenize a PAN by e.g. mapping each token to a corresponding complete PAN. The tokens can then be used instead of or in addition to the PANs when transmitting credit card information over unsecured lines using public and or private networks. As such the tokens can act as an additional layer of network security when performing credit card transactions using mainframe .

In addition to or instead of utilizing a pre generated token map that is in accordance with some embodiments discussed herein each token can be generated by a centralized tokenization system in real or near real time. For example server A server B and or mainframe may be configured to assign a token based on when a credit card is first used to purchase a good or service relative to when other credit cards are first used with the system and instead of or in addition to e.g. assigning a token based on the content of a portion of the PAN and a randomly generated token map .

When implementing a temporal based token assignment approach system can be configured to search a central database such as that included in mainframe to see if the received PAN has been previously tokenized. If the compete PAN is not found in the central database a random token can be generated based on when the PAN was received relative to other PANs. The temporal based token assignment system then has to determine new token that is available which can require another search of the database. The searching can be costly in terms of time money processing power and bandwidth. If the randomly selected token is determined to have been used previously the process can be repeated until a unique token has been successfully generated for the PAN by system . Once the token is generated the token can be stored with the entire PAN in the central database. For the temporal based token assignment system to work properly system and its central database must be persistently available to tokenize and detokenize PANs for every transaction. Scaling availability and locality can therefore be limited by the temporal based token assignment database.

As a result a temporal based token assignment database often requires costly security and storage. Much innovation has thus far been focused on how to block hackers from accessing the large central databases while still storing millions of complete credit card numbers that source devices can efficiently access. Additionally there has been much research into development of how to decrease database access time.

Despite the layers of security and risk of potential jail time the large amount of credit card numbers together in a central database attracts hackers. Large organizations have experienced major financial legal and publicity problems after its temporal based token assignment databases were hacked and tens of millions of complete credit card PANs were stolen. In addition to credit card databases other types of large central databases such as those that store personal information financial information social security numbers etc. are also at risk.

Data availability is almost if not just as important as data security to business operations. In many instances credit card purchases may not be authorized if the temporal based token assignment database is offline. To keep the token and PAN data available data redundancy among other things can be implemented by systems implementing a temporal based token assignment approach. Accordingly in some embodiments system may not implement the temporal based token assignment approach and instead only utilize a pre generated token map that randomly associates token values with portions of PAN values.

In some embodiments mainframe firewall A firewall B some types of the source devices and or any other device discussed herein may be omitted from system . The particular types of devices included in system and their functionality are intended to be exemplary only.

The data generated by user interface can be sent to processor . Processor can be any suitable circuitry configured to among other things process data representing untokenized PANs tokenized PANs detokenized PANs any other type of data or any combination thereof. For example one or more of various processing means or devices such as a coprocessor a microprocessor a controller a digital signal processor DSP a processing element with or without an accompanying DSP or various other types of processing hardware including integrated circuits such as for example an ASIC application specific integrated circuit an FPGA field programmable gate array a microcontroller unit MCU a special purpose computer chip or any combination thereof. In some exemplary embodiments processor may be configured to execute instructions stored in memory device or otherwise accessible to processor . The instructions may be permanent e.g. firmware or modifiable e.g. software instructions can be organized in any manner. Alternatively or additionally processor may be configured to execute hard coded functionality. As such whether configured by hardware or software methods or by a combination thereof processor may represent an entity e.g. physically embodied in a machine capable of performing operations according to embodiments of the present invention while configured accordingly. Thus for example when processor is embodied as an ASIC FPGA or the like processor may be specifically configured hardware for conducting the operations described herein including those associated with pre parsing parsing token map generation tokenization and detokenization. Alternatively as another example when processor is embodied as an executor of software or firmware instructions the instructions may specifically configure processor to perform the algorithms and or operations described herein when the instructions are executed. Processor may include among other things a clock an arithmetic logic unit ALU and logic gates configured to support operation of processor .

Memory device may include for example one or more nontransitory computer readable storage media that can comprise volatile and or non volatile memories. For example memory device may be an electronic storage device e.g. a computer readable storage medium comprising gates e.g. logic gates configured to store data e.g. bits that may be retrievable by a machine e.g. a computing device including a processor such as processor . Memory device may be configured to store information data applications instructions or the like for enabling processor to carry out various functions in accordance with exemplary embodiments of the present invention. For example memory device may be configured to buffer input data for processing by processor . Additionally or alternatively memory device could be configured to store instructions for execution by processor .

Communications interface can be configured to facilitate any type of wired and or wireless communications. For example communications interface can facilitate communications through direct or dial up telephone infrastructure cable modems fiber optic cables satellite systems cellular networks WANs LANs and or through an additional network component which may be used to form network . Network can be the same as or similar to intranet A or B or internet of .

Network is shown as a source of incoming data that is received by communications interface . Network can be comprised of anything discussed in connection with e.g. network intranet A intranet B and or internet . Communications interface can be comprised of anything discussed in connection with e.g. communications interface . Similarly processor can be comprised of one or more of the components discussed in connection with e.g. processor though processor may be configured to be optimized primarily for server functionality while processor may be configured to be optimized primarily for client functionality. Memory can be comprised of one or more of the components discussed in connection with e.g. memory though memory may be configured to be optimized primarily for server functionality e.g. including RAID or other server grade storage while memory may be configured to be optimized primarily for client and or user device functionality. In some embodiments memory can be configured to store the token map which may be received by communications interface and or input output interface or which may be generated by token map generator .

Tokenizer can be dedicated circuitry responsible for tokenizing and detokenizing data such as PANs in accordance with embodiments of the invention some of which are discussed below. In some embodiments tokenizer can be a module software firmware hardware and or anything else implemented by and or able to communicate with processor via an internal bus or other type of communications path. In some embodiments tokenizer may be included in server as shown in .

Alternatively or additionally tokenizer may be its own device and or at least partially included in a device other than server . In such embodiments tokenizer may include its own hardware including e.g. processor memory etc. software firmware and or any other component that may be needed or useful for tokenizing data.

In some embodiments tokenizer can be configured to execute four or any other number of applications. Each application can be implemented using e.g. an application layer interface. One application is a tokenize application which enables the tokenizer to take an untokenized PAN and return a tokenized PAN as discussed in connection with . Another application is the detokenize application as discussed in connection with which includes receiving and analyzing a tokenized PAN and outputting a detokenized PAN. In some embodiments the detokenized PAN may be the same as the untokenized and or original PAN. A third application is the Luhn check application which can be used to receive and analyze the tokenized PAN and output a signal such as a true or false logic 1 or 0 signal. A fourth application includes configuring the tokenizer to determine the issuer e.g. bank credit institution etc. based on for example a bank identification number BIN of the PAN which can include receiving and analyzing a tokenized PAN and returning the issuing identifier of the PAN.

In some embodiments one or more of the applications included in tokenizer may be implemented in a stand alone device in separate component and or at least partially included in a device component other than server and or tokenizer . For example the detokenize application may be implemented in a separate detokenizer that may be configured to communicate directly with server s processor and or other components. As another example the detokenizer may include its own hardware including e.g. processor memory etc. software firmware and or any other component that may be needed or useful for detokenizing data.

Similarly functionality of other components of server and or any other apparatus discussed herein may be implemented as a stand alone device and or be at least partially implemented by a device component other than server . For example token map generator may be configured to generate token map which is discussed further in reference to . Token map generator may be implemented as a component of server as shown in including processing circuitry memory and or any other nontransitory hardware some examples of which are discussed above in connection with processor and or memory .

Alternatively or additionally the functionality of token map generator may be implemented by processor any other component of server and or any other component external to server . For example token map may be received from a networked device using communications interface and or from a peripheral device using input output interface among other things. Input output interface may include for example one or more ports such as a universal serial bus USB port and or any other data port s including wireless ports that can receive transitory data from an external source such as from an external nontransitory storage medium by which token map may be generated modified including encrypted and or stored. Additionally or alternatively input output interface may include for example one or more ports and or other physical components enabling a keypad touch display screen and or other input output components to be coupled to server .

Although the discussion herein generally focuses on the components shown in as well as the tokenizing detokenizing parsing and pre parsing being implemented in a server the same and or similar components may also be implemented in a source device such as source device A a central mainframe such as mainframe and or any other device. For example a smart telephone peripheral device such as card reader that is coupled to a portable device and or other computing device may have an application loaded thereon that enables the hardware of the computing device to function as a token map generator tokenizer detokenizer parser and or pre parser. In some embodiments every electrical device may have one or more of its own token maps assigned by a central system and or generated locally by the electrical device. For example a central system such as server and or mainframe may assign source device a token map version identifier and provision source device to generate its own token map. Source device may then function as discussed in connection with e.g. and tokenize detokenize PANs based upon its locally generated token map.

The program code instructions stored on the programmable apparatus may also be stored in a computer readable storage medium that can direct a computer a processor such as processor token map generator tokenizer etc. and or other programmable apparatus to function in a particular manner to thereby generate a particular article of manufacture. The article of manufacture becomes a means for implementing the functions of the actions discussed in connection with e.g. and the other flow charts included herein. The program code instructions may be retrieved from a computer readable storage medium and loaded into a computer processor or other programmable apparatus to configure the computer processor or other programmable apparatus to execute actions to be performed on or by the computer processor or other programmable apparatus. Retrieval loading and execution of the program code instructions may be performed sequentially such that one instruction is retrieved loaded and executed at a time. In some example embodiments retrieval loading and or execution may be performed in parallel such that multiple instructions are retrieved loaded and or executed together. Execution of the program code instructions may produce a computer implemented process such that the instructions executed by the computer processor other programmable apparatus or network thereof provides actions for implementing the functions specified in the actions discussed in connection with e.g. process of .

Process starts at . At the processor which may be comprised of more than one can physical component can be configured to generate an array of a predetermined size. The array may be considered an unsigned token map. For example an unassigned token map may have 100 000 000 rows with one or more columns comprised of empty elements. Each row of the array may be associated with an array location value e.g. sequential integers 1 through 100 000 000 and a token value e.g. sequential integers 0 through 99 999 999 .

Returning to at the processor can be configured to sequentially select array location values that are each associated with a row. Any algorithm may be used to select an unassigned row s array location value at . For example the processor may select the row having the smallest array location value that has not yet been reassigned a random token value as discussed below .

At the processor can be configured to generate a random number. For example the processor may generate a random integer ranging from 1 to 100 000 000 inclusive. Any other bounds may be used which may or may not be the same as the bounds used for the original array location values. The random number generator may be seeded at the start with the current time to obtain a unique random number that would be hard to duplicate. In some embodiments a new seed may be introduced to the random number generator every predetermined number of iterations to further obscure the randomness.

At the processor locates the row having the array value that matches the random number generated at . For example if the random number is 5 the processor will go to the row of token map that has 5 as its array location value. In some embodiments the random number may act as a pointer to a memory location.

At a determination is made as to whether or not the randomly selected row s token value is the same as the sequentially selected row s array value. If the randomly selected row s token value is the same as the sequentially selected row a new random number is generated at .

In response to determining the randomly selected row s token value is the same as the sequentially selected row s array value a determination is made at as to whether or not the randomly selected row s array location value is the same as the sequentially selected row s token value.

In response to determining the randomly selected row s array location value is the same as the sequentially selected row s token value a new random number is generated at . In response to determining the randomly selected row s array location value is different than the sequentially selected row s token value process proceeds to .

Executing and may help assure that the tokenized PAN is different than the untokenized PAN. In other embodiments this functionality and or any other functionality may be omitted and the tokenized PAN may have the potential to be the same as the untokenized PAN. Additionally or alternatively other functionality may be employed to help assure that the tokenized PAN is different than the untokenized PAN. For example the randomization criteria may also or instead include logic that may be used to generate token values having a length of 6 or 7 instead of 8.

At the token value of the randomly selected row is swapped with the token value of the sequentially selected row. In this regard the randomly selected row will now have a token value that was previously associated with the sequentially selected row and the sequentially selected row will now have a token value that was previously associated with the randomly selected row. As such the token map can be generated by randomly iterating through the rows and swapping values at the iterator location with a value at a random location.

At the sequentially selected row s array location value can be assigned as the middle digits value or any other type of targeted segment associated with the randomly selected row. This may enable the token map to be used for detokenization.

In some embodiments rather than or in addition to assigning each middle digits value after assigning each token value the processor may be configured to assign all the middle digits values after assigning all of the token values. In yet other embodiments the processor may be configured to assign the middle digits values before assigning the token values either individually or collectively.

Process may proceed to where a determination is made as to whether or not all of the rows have been involved in a token value swap and or used by the processor as the sequentially selected row. In response to determining at that one or more rows have not process may return to and repeat the steps discussed above until has been satisfied.

In response to determining at that all the rows have been involved in a token value swap and or used as the sequentially selected row process may proceed to and encrypt save transmit and or otherwise output the completed token map. In some embodiments token map can be encrypted using any suitable approach such as e.g. RSA key manager or RKM and may only be stored or otherwise exist within the PCI Vault of the server as mentioned above . For example token map can be loaded into the server s or other type of tokenizer s dedicated memory at startup and in some embodiments token map need not change thereafter. The encrypted token map may be stored such that both an authorized tokenizer and detokenizer can access and read the token map.

In some embodiments the token map can be given a file name at that includes a unique two character identifier that identifies the token rendering version. In order to maintain the original PAN length and include a two character token map version identifier the token can be converted into a base36 number e.g. A Z and 0 9 . This may make two character positions available to store the token map version identifier. As discussed further below the original PAN length can be used to determine the length of both the prefix and middle digits value used as a basis for the Base36 token. The tokenized PAN can assume the following format Prefix Version ID Base36 Suffix. As noted elsewhere herein the middle digits value is but one type of exemplary targeted segment that can be tokenized. In some embodiments the tokenized PAN may assume a different format such as e.g. non targeted value targeted segment non targeted value Version ID targeted segment non targeted value.

The two character token map version identifier can also be a base36 number a letter and a number and or formatted any other way. The token map version identifier may be used by e.g. the tokenizer and detokenizer to identify the token map that was used to tokenize the PAN and can be used for detokenizing the PAN. In addition to being encrypted the token map may also be protected by limiting the devices that are allowed to access the token map. At process ends.

In some embodiments rather than or in addition to executing after or otherwise after each swap is executed all values can be checked collectively after determining that all the rows have been swapped. The collective check can be used to make sure each token value is not in its original position and or is not equal to its associated location array value. If it is determined that a token value is in its original position then the token value can be swapped with a random location as discussed above. The collective position check can be repeatedly performed until all tokens are in a new position in the token map. Once this is complete the build of the token map may be ready for use as discussed elsewhere herein.

Further to the discussion above in connection with e.g. operation in process the token map generator and or other processor s may be configured to create a token map that can tokenize various sized PANs or portions thereof. For example because token map is shown as being configured to tokenize eight digits of a PAN token map is approximately 1 000 000 000 bytes in size four bytes for each set of middle digits in middle digits column four bytes for each token in token value column and two bytes for the check digit value in check digits column . That is a total of ten bytes per row of token map . Ten bytes per row 100 000 000 possible middle digits would require less than one GB which is typically 2or 1 073 741 824 bytes of memory per token map as shown in . In other words the middle digits may include 100 000 000 values when comprised of eight digits . After converting each middle digit value and token value to a long e.g. four byte number 100M 4 bytes 100M 4 bytes results in approximately an 800 MB of memory requirement. Adding a two byte check digit as shown in check digits column of token map can still enable a token map to be stored on less than approximately 1 GB of memory. The relatively low memory requirement e.g. approximately 1 GB for a credit card security database allows token map to be kept in faster memory which may in turn facilitate faster processing e.g. tokenizing and or detokenizing by for example server .

Token map can also be generated to enable a detokenizer to execute a token to middle digits algorithm. For example one at a time for each row the token map generator or other machine can convert each token value to a corresponding array pointer. The token map generator can be configured to store the middle digits value in the resulting array location. Once complete the token to middle digits mapping portion of token map may also be complete and token map may be ready for use without the check digits portion.

The check digits column may be populated by going through the resulting token to middle digits portion of token map and middle digits to token portion of token map one row at a time and using as inputs the token value and middle digits value of the same row. For example check digit column may be populated based upon the values in token value column and middle digits column that are associated with the same array location value. The check digit value can then be calculated by adding each digit to the next for all numbers in the token and middle digits. When eight digits are used in the middle digits this will result in a number between 0 and 198 9 16 digits which can be stored in the corresponding array location row in the check digit portion of token map .

As mentioned above in some embodiments it is critical to protect the security of the final token map. For recoverability multiple copies of the token map can exist since the token map cannot be recreated due to its inherent randomness. Creating multiple copies can be accomplished in a number of ways. For example the token map s can be replicated via a secure connection to one or more additional servers and or other machines. This can keep the token map only in memory. As another example the token map can be stored on removable memory such as a disk flash drive DVD etc. . The token map can be encrypted when copying the token map onto a disk that has adequate space and or places the token map at a higher risk for theft and unauthorized access.

Once the token server is operational and the token map is loaded into the tokenizer s and or the server s memory looking up the token or middle digits can be executed using a direct memory access. For example to convert middle digits to a token the tokenizer can be configured to use the middle digits as a pointer to an array position and directly access a long integer four bytes which contains the corresponding token. To revert back to the initial middle digits a token can be converted to the middle digits by using the token as the pointer for a direct memory access. Using the token as an array pointer and using the long integer at that location as the corresponding middle digits can allow some embodiments to implement direct memory access procedures. As such access to the token and middle digits can be a direct memory access. No indexes such as array location values need to be created or read to find the corresponding item.

In embodiments where the token contains non numeric characters those tokens can be calculated at after retrieving a token or converting a token to a number prior to looking up the middle digits.

The check digit can also be based on a direct lookup using the same multiplier and a different memory offset. For example the check digit can be calculated and checked before any return to the calling application.

Because the creation of the token map can be separate from and or prior to the operation of the tokenizer there can be a division of responsibilities. For example only the creator of the token map may know how the token map s creation was achieved. As such the token map creation logic can be operationally separate from any of its server s other processing equipment and even be implemented on its own dedicated server and or other device.

Because token map is created by e.g. token map generator and or can otherwise be received by tokenizer in its complete form prior to executing tokenization or detokenization as opposed to being retrieved and or added to each time a new credit card is initially used with a system and because token map can be configured to be stored in the server s faster access memory albeit often much smaller than slower access memory at least one type of legacy database may be omitted when implementing some embodiments of the present invention. Eliminating the dependency on the relatively large legacy databases such as mainframe and or other persistent storage devices during normal credit card processing operations can increase performance and stability of server and or the entire credit card processing system.

The security provided by some embodiments may depend upon and or be enhanced by the randomness of the token generation and security of token map . As mentioned above the tokenizer token generator and or any other processor s can be configured to create random tokens and map the tokens to numbers prior to actually tokenizing a PAN. This differs from some traditional tokenization systems that use the randomness of credit card usage to assign tokens in a relatively large central database. However unlike such temporal based token assignment systems because token maps in accordance with some embodiments discussed herein are matrices of the middle digits values and the token values complete PANs do not need to be although they could be stored anywhere in systems in accordance with some embodiment. Furthermore there is no need for some embodiments to although some could transmit complete PANs tokenized encrypted and or otherwise anywhere within the system at least for the tokenization process . Similarly there is no need to transmit a complete untokenized PAN over public networks. PANs can be tokenized by the server that maintains the firewall for an intranet as discussed above. Some token map embodiments discussed herein can be used in combination with legacy systems including temporal based token assignment systems. Some token map embodiments may also be used to tokenize an encrypted PAN and or other code.

At the processor can be configured to sequentially select an index to an array element. For example the processor may be configured to loop through the array elements from smallest to largest.

At the processor can be configured to generate a random number. For example the processor may generate a random integer ranging from 1 to 100 000 000 inclusive. Any other bounds may be used which may or may not be the same as the bounds used for the original array location values. The random number generator may be seeded at the start with the current time to obtain a unique random number that would be hard to duplicate. In some embodiments a new seed may be introduced to the random number generator every predetermined number of iterations to further obscure the randomness.

At the processor can be configured to determine whether the value assigned to the element located at the array element having an index equal to the random number is the same as the value of the sequentially selected index value. If the determination at has affirmative result process returns to . If the determination has a negative result process proceeds to .

At a determination is made as to whether or not the random number is equal to the value of the array at sequentially selected index. If the determination at has affirmative result process returns to . If the determination has a negative result process proceeds to .

At the value of the array at randomly element is swapped with value of the array at the sequentially selected element.

At a determination is made as to whether or not all of the array elements have been involved in a swap. In response to determining at that one or more elements have not been swapped e.g. the processor has not looped through all 100 million elements process may return to and repeat the steps discussed above until has been satisfied.

In response to determining at that all the elements have been involved in a swap e.g. the loop is completed process may proceed to and encrypt save transmit and or otherwise output the completed the array.

At a token map can be created by first generating a second array e.g. the middle digits value array initializing the array created using the previous steps of process and then initializing second array using the following logic 

Token Map may then contain the first and second arrays. In this example the token array e.g. first array with token values is generated first and middle digits array is constructed using the token array values as its subscript values. Then the two arrays can be combined to create the token map.

Before the token map is used to tokenize a PAN some embodiments may include one or more pre parser processors and or other types of processor s that execute a pre parser process which can include locating extracting validating and outputting a PAN from data signals received by the server and or other machine. In some embodiments the pre parser process may be performed by a physical component included in a server or other type of machine a stand alone machine that processes data independent from other devices software firmware and or combination thereof. shows an exemplary pre parcer process process which starts at .

At the processor may receive a message that may or may not include at least one PAN. The message may be received from for example known message oriented middleware such as IBM s MQSeries . As another example the message may be received in accordance with known protocols such as hypertext transmission protocol HTTP .

At the processor can be configured to determine whether the message received at has a length that is at least a predetermined number of characters. For example the processor may be configured to determine whether the message is at least ten characters in length.

In response to determining at that the message length is the predetermined number of characters or less e.g. ten characters or shorter process proceeds to and ends.

In response to determining at that the message length is more than the predetermined number of characters e.g. more than ten characters the processor can be configured to search the message at for a string of numeric digits having a length that is within a predetermined range e.g. at least ten numeric digits and less than twenty numeric digits . Additional and or different criteria may also be used at by the processor.

At the processor can be configured to determine whether a string of numeric digits of the appropriate length and or otherwise meeting the criteria of has been found in the message received at . In response to determining no such string of digits is included in the message process returns to . In response to determining that such a string of numeric digits is included in the message the processor can be configured to extract the vendor code from the string of numeric digits at . The vendor code may be for example the first two three or four numeric digits in the string. The vendor code may be a universal bank identifying number BIN .

At the processor can be configured to determine the length of the string of numeric digits which may include removing spaces dashes dots and other non numeric characters that may have otherwise been included in the message s numeric string.

At the processor can determine whether the length of the numeric digits corresponds with the length of a PAN associated with the vendor code. For example an American Express BIN should be associated with a 15 digit numeric PAN while a MasterCard BIN should be associated with a 16 digit numeric PAN. The test executed at may be based on for example a finite list of BIN codes.

In response to determining at that the length of the numeric digits does not correspond with the predetermined length of PAN associated with the vendor code the processor may be configured to remove digits from the PAN. For example the processor may remove digits representing the expiration date from the string of numeric digits.

At a determination is made after the digits have been removed as to whether the length of the string of digits is still at least ten. In response to determining the string length is less than ten process returns to . In response to determining the string length is at least ten process returns to .

After a determination is made at that the string s length matches the length of a PAN associated with the vendor code one or more confirmatory tests may be executed at . For example the Luhn test can be executed at . A determination is then made at as to whether or not the confirmatory test s passed or failed. In response to determining the confirmatory test s failed process returns to . In response to determining the confirmatory test s passed process proceeds to and the processor masks the string of digits and logs the event. Process then ends at and in some embodiments the string of digits may be subsequently tokenized and or otherwise processed by an electronic device.

The tokenization process can receive a PAN as an input and output a token. The tokenization process may be performed by one or more processors configured to function as a parser and a tokenizer. In some embodiments the token can be generated using a token map such as token map discussed above. The token may uniquely represent the original PAN and be the same length as the original PAN. In some embodiments the processor that executes the tokenization process may be parser hardware running a tokenizer application programming interface API .

A tokenizer API may receive for example a twelve to nineteen string of numeric digits from a pre parser. If the tokenizer API receives non numeric digits the tokenizer API may be configured to generate an error. Other exemplary error conditions may include the string of digits having a length less than twelve or any other minimum value and a length greater than nineteen or any other maximum value . In some embodiments a tokenizer API may be a web API and or be configured to accept one or more PANs in a single tokenization request. Below is an example of an XML payload that shows how multiple PANs can be passed to the tokenizer to create tokens.

Part of the original untokeinzed PAN received by the tokenizer may remain in the tokenized PAN. For example a suffix value e.g. the last four characters of the untokenized PAN and a prefix value e.g. the first two to six characters depending on the total size of the PAN may remain the same in the tokenized PAN. The middle digits of untokenized PAN can be used as an index pointer and or basis for another type of linking mechanism to find a token in the token map. The token map may associate the value of the middle digits sometimes referred to herein as the middle digits value with a token the token being a unique randomized number. In addition the value of the last four digits of the untokenized PAN can be summed with the token value retrieved from in the token map before outputting the token e.g. before converting the token into a base36 representation to make the token more unique to the original PAN as opposed to all middle digits value being associated with the same token value by the same token map .

At the processor can be configured to record in its log stored in a memory that the communications channel was successfully or unsuccessfully established. In some embodiments the processor can be configured to log all tokenizing events a subset thereof or no tokenizing events.

After determining at that a secure connection exists between the processor and the source system or after the PAN or a portion thereof is transmitted at from the source device to the processor over the secure connection. For example a client device such as a credit card reader may transmit the entire PAN and or portion thereof. As another example a server source device may be configured to pre parse the message to locate a PAN discussed in reference to parse the PAN discussed below and or transmit only the middle digits of the PAN at .

The processor can include and or otherwise be communicatively coupled to a pre parser that is configured to locate and extract PANs from data signals and or other messages received from source devices and or any other device. The pre parser may be implemented as a dedicated physical component of the processor as a separate machine and or as hardware software and or firmware. An exemplary pre parsing process which may be performed at is discussed further in reference to e.g. . Successful receipt and extraction of the sent PAN can also be recorded in the processor s log at .

At a parser and or other processor may parse the PAN into one or more substrings of characters. The parser may be implemented as a dedicated physical component of the processor as separate machine and or as hardware software and or firmware. Additional examples relating to parsing which may be performed at are discussed further in reference to e.g. . For example the PAN may be parsed into a prefix string middle string sometimes referred to herein as the middle digits and an end string sometimes referred to herein as the suffix and may comprise the last four characters of the PAN . The number of characters in each string may be predetermined or dynamically determined based on e.g. the number of characters in the PAN received by the parser. This is discussed further in connection with .

The middle digits of the PAN can be used at to lookup a token value using token map . In some embodiments such as when a parser is implementing process a tokenizer may be called to execute . Additional examples relating to using the token map for tokenizing operations that are performed at are discussed further in reference to e.g. . Upon determining the tokenization lookup is complete the event is recorded at in the processor s log.

If the entire PAN was provided to the tokenizer the middle digits value of the PAN can be replaced at with the token and or the resulting tokenized PAN can be transmitted back to the source system at . If only a portion of the PAN such as the middle digits was provided to the tokenizer the tokenizer can be configured to transmit the token by itself back to the source system and the source system and or any other device can be configured to create the resulting tokenized PAN. After the source system and or other machine receives the tokenized PAN the source system and or other machine may transmit the tokenized PAN over unsecured networks as shown by some of source devices A and B communicating directing with internet in with less risk that the PAN will be stolen during transmission. The tokenizer can be configured to log whichever instructions it executes successfully or unsuccessfully at . Process ends at .

In some embodiments the PAN including e.g. a PAN signal or other type of message representing and or including the PAN of card can be parsed by a parser and or tokenizer such as tokenizer into three separate groups e.g. prefix digits value middle digits value and suffix value . Suffix value is shown in as comprising the right most four digits of the PAN. Middle digits value is shown in as comprising the eight digits preceding the last four digits. In some embodiments the middle digits value may comprise more or less than eight digits. For example the number of characters that are parsed out as a prefix value middle digits value and or suffix value may be based on the untokenized PAN length. shows an exemplary table that correlates the untokenized PAN length to the length of the middle digits that are to be tokenized.

Prefix digits value may include any digits preceding middle digits value and can be a variable length depending on the length of the PAN. Additionally or alternatively the length of prefix digits value can be correlated to the length of middle digits value suffix value and or any other character string received or created by the parser. This type of parsing can be used when for example the PAN number is determined to include at least a predetermined number of digits as discussed above.

In other embodiments rather than use the middle eight digits middle digits value can be configured to include more or less digits. For example when the PAN received from the source device consists of only six digits middle digits value which may be used to as the basis for generating a token may include some or all of the six digits. As such prefix digits value and the suffix value may be omitted without departing from the spirit of the invention. As another example when the PAN received from the source device includes nineteen digits the PAN can be parsed such that middle digits value includes more than eight digits while remaining consistent with embodiments of the present invention. Examples of a process that may be used to select the proper sized token based on the PAN s size are discussed further in connection with B and C.

After middle digits value has been populated the tokenizer and or any other processor configured to perform tokenization can be configured to replace the digits included in middle digits value with a randomly created tokenized number. The tokenized PAN can then be saved in a payment card industry PCI vault which is configured to prevent unauthorized access of credit card data. The PCI vault can be implemented in the server s mainframe s and or other device s memory e.g. memory in a removable memory device and or at a remote location from the tokenizer. In some embodiments to increase security the PCI vault s functionality can be separated from the other functionality that may be provided by the server. The tokenized PAN can be the same number of digits as the original untokenized PAN. As shown in after the tokenizing has been completed the tokenized PAN may have the form aaaaVVTTTTTTbbbb wherein prefix value of the tokenized PAN can be the same i.e. aaaa will still be 1234 as the original PAN s untokenized prefix value middle digits value of the tokenized PAN can be replaced with a token map version identifier and token as represented by VVTTTTTT and suffix value of the tokenized PAN can be the same i.e. bbbb will still be 3456 as the untokenized PAN s suffix value.

In other exemplary embodiments more or less of the PAN or other code can be replaced by a tokenizer in accordance with some embodiments discussed herein. In credit and debit card applications for example there are relatively few disadvantages but unique advantages to only tokenizing some of the middle digits such as eight or nine of the middle digits . For example as noted above the first four digits of a credit card number can be a vendor identifier used to identify the issuing banking or lending institution. The vendor s identity may also be apparent by the card s logo s and can be considered less important to a cyber criminal who is trying to identify a particular account number. Additionally as discussed in greater detail elsewhere herein tokenizing eight digits for example even with a checksum bit will only require about one GB of memory space to implement.

In VV of middle digits value can represent for example the version identifier of the token map used by tokenizer to tokenize the digits of middle digits value . The administrator of the tokenizing server such as server can automatically or manually initiate the generation of new or otherwise updated token maps as frequently as it is deemed necessary. In some embodiments tokenizer token map generator and or any other circuit can be configured to update token maps periodically e.g. monthly every so many months yearly every so many tokenizations based on any other variable etc. randomly in response to a triggering event such as e.g. detecting a suspected probable or attempted cyber attack or any combination thereof.

In some embodiments tokenizer token map generator and or any other circuit may be configured to always make the first digit of VV be a predetermined type of symbol such as a letter number and or anything else . The symbol may be predetermined by e.g. token map generator and or any other circuit based on the type and or particular untokenized PAN. For example if the PAN is determined to be a credit card number or other string of at least nine numbers the tokenizer may choose a token map having an identifier that starts with a letter and include the token map identifier in the tokenized PAN. This may aid in avoiding inadvertent errors by allowing a machine to quickly determine whether or not a received PAN is tokenized by examining the first two digits of middle digits value . For example the Luhn test can be used to easily determine whether or not the PAN is tokenized e.g. includes a token .

Using a single letter token map identifier can provide the system the ability to have 26 unique token maps. As another example when a letter used for the first V of the token map identifier and an alphanumeric digit is used for the second V of the toke map identifier the system may be provided the potential for 936 maps 26 36 . Even when using a two digit token map identifier at least six digits may be available to create a unique token.

When middle digits value consist of eight digits there would be 100 000 000 possible middle digits values. The 100 000 000 possible middle digits values require only six digits when using a base36 representation such as alphanumeric representation namely A through Z and 0 through 9 . In other embodiments rather than use the base36 representation for the middle digits another type of numerical system can be used. For example a base64 or other larger representation could be used which would allow for example more token map versions to be used in accordance with some embodiments discussed herein. A four character base64 or larger token map identifier may be used thereby allowing for tens of millions if not more token maps to be in existence and used among millions of electrical devices. In some embodiments every electrical device may have one or more of its own token maps assigned by a central system and or generated locally by the electrical device. For example a central system such as server and or mainframe may assign source device a token map version identifier and provision source device to generate its own token map. Source device may then function as discussed in connection with e.g. and tokenize detokenize PANs based upon its locally generated token map. Additionally or alternatively tokenizer token map generator and or any other circuit may be configured to always make the token map version identifiers have the same format. For example the first character of VV may be a base64 character while the second digit of VV may be a base10 character.

In the token is represented by TTTTTT of middle digits . The token may be or otherwise comprise an eight byte number that has been randomly created to represent the middle digits originally populating middle digits .

As another example some embodiments may generate the following data for an exemplary 12 digit PAN using a different unique version of a table map 

In some embodiments an additional check digit process can be executed by the tokenizer and or any other processor and used to ensure valid data in token map . Although the values associated with the check digit process are shown in they have been omitted from to avoid unnecessarily overcomplicating the discussion.

Multiple token maps can be kept in a server. Among other things multiple token maps residing on the same server can allow versioning of the token map and token rotation. By pre creating the token map as discussed above and storing each in memory the server can be located in multiple locations facilitating disaster recovery availability and global scalability for geographically diverse peripheral component interconnect PCI operations.

In some embodiments the operational server can also have a minimum amount of code to review and manage. Because no database is required in such embodiments and the full PAN is not stored at the server the tokenization vault will need not contain any PCI data. Database to backup restore replicate or harden may not be required either. Additionally a lock contention or duplicate key issues can be avoided when generating tokens or during operation.

The token map can be kept in hardware security module HSM or secure universal serial bus USB storage device. This is often more secure than a database as is traditionally done. If the token map needs to be expanded to allow for the middle digits to include for example nine digits instead of eight then the size of the token map will increase to less than 10 GB which is still small enough to fit into physical memory on most modern servers.

At a determination is made as to whether or not the PAN comprises a string of numeric characters. In response to determining that the PAN is not numeric the processor may determine at that an error has occurred and process ends at .

At a determination is made as to whether or not the PAN has at least fourteen numeric digits and less than twenty numeric digits. In response to determining at that the PAN does have at least fourteen numeric digits and less than twenty numeric digits the processor can access e.g. retrieve decrypt etc. the token map configured for tokenizing middle digits values having a length of eight digits.

In response to determining at that the PAN does not have at least fourteen numeric digits and less than twenty numeric digits the processor can be configured to determine at whether the PAN has thirteen digits. In response to determining at that the PAN does have thirteen numeric digits the processor can access at the token map configured for tokenizing middle digits values having a length of seven digits.

In response to determining at that the PAN does not have thirteen numeric digits the processor can be configured to determine at whether the PAN has twelve digits. In response to determining at that the PAN does not have twelve numeric digits process may proceed to and determine an error has occurred. In response to determining at that the PAN does have twelve numeric digits the processor can access at the token map configured for tokenizing middle digits values having a length of six digits.

In some embodiments rather than or in addition to determining the length of the PAN the processor may be configured to determine the length of the middle digits value received from a source device pre parser and or any other device. The length of a received middle digits value may be used to select a token map.

After or process may proceed to and parse the PAN into a prefix e.g. first four digits middle digits value and suffix value e.g. last four digits . The length of the prefix value middle digits value and or suffix value may be dependent on the total length of the PAN.

At the processor can be configured to retrieve the tokenized PAN based upon the parsed out middle digits value as discussed above in connection with e.g. and convert the tokenized middle digits value to a base36 numerical system representation. In some embodiments another numerical system can be used which represents the middle digits value with less characters than a base10 numerical system.

Process continues in . At a determination is made as to whether or not the PAN had nineteen numerical digits before at least a portion of it e.g. the middle digits was converted to base36. In response to determining the PAN consisted of nineteen numerical digits the processor may be configured to compute the modulus of the middle nine digits value and use the solution as the ninth digit in the middle digits value. As such this will satisfy the current PCI guideline that requires no more than ten of the original digits remain the same e.g. untokenized unencrypted etc. when obscuring an original credit card PAN. At the processor can be configured to truncate the last character of the prefix.

In response to determining at that the PAN does not consist of nineteen numerical digits the processor may be configured to obtain a token map version ID at . The token map version ID may comprise any number of characters. For example two characters may be used as a token map version ID. The token map version ID may be obtained at any time including after .

The token may then be constructed at by combining the original prefix value the token map version ID the base36 representation of the middle digits value and the suffix value. This is discussed further in connection with e.g. B and C. Additionally the tokenized PAN may be constructed in accordance with the table shown in . shows a table that correlates the size of the various components of tokenized PAN to the original PAN. The size of the middle digits value may be the sum of the length of the token map version identifier and the length of the tokenized Base36 value.

A tokenized PAN may be transmitted among computing devices and across networks by legacy systems without risking the entire account number being stolen. Similarly token maps that include only a portion of an account number may be transmitted across networks without risking entire PAN s being stolen. When token maps are transmitted they may also be transmitted using known security algorithms. The token maps such as token map may be used to detokenize a tokenized PAN. Detokenziation may be required to enable a merchant and or other entity to be able to provide the actual PAN to a credit card company such that the merchant and or other entity is able to receive payment from the credit card company.

The detokenization process may be performed by one or more processors configured to function as a parser and detokenizer. In some embodiments the one or more processors that execute the detokenization process may be hardware running a detokenizer application programming interface API in an enterprise s secure vault. Any access to the detokenizer may be made over a secure network connection.

A detokenizer API may receive for example a string including a sequence of twelve to nineteen character tokenized PAN. The detokenizer API will be passed a 12 to 19 digit number by reference and change it to its token value. Two or more versions of the detokenize call may be implemented. For example one call may be implemented for ASCII data and another call for EBCDIC data. The detokenizer web service interface can be configured to accept one or more tokens in a single request. Below is an example XML Payload that shows how multiple tokens can be passed to the detokenizer in single request.

At a determination is made as to whether or not a mutually authenticated communications channel such as e.g. a SSL session is currently established between the detokenizer and the source system e.g. source device server and or any other device providing a tokenized PAN for decryption . The detokenizer may include PCI vault. If such a communications channel does not exists is about to expire and or needs to be revalidated the source system and the detokenizer can be configured to establish a mutually authenticated communications channel.

At the detokenizer can be configured to record in its log that the secure communications channel was successfully or unsuccessfully established. The detokenizer can be configured to log all detokenizing events or a subset thereof.

After determining that a secure connection exists between the detokenizer and the source system the token or the entire tokenized PAN is transmitted at from the source system to the detokenizer over the secure connection. For example a source device such as a laptop computer may be configured to send the whole tokenized PAN e.g. after determining the communications will take place behind a firewall or are otherwise secured whereas a server or other publicly available apparatus may be configured to send only the token.

Upon receiving data that may or may not include the token or tokenized PAN the detokenizer may be configured to locate the token in the stream of data. An exemplary token locating process which may be performed at is discussed further in reference to e.g. . Successful receipt of the sent token can be recorded in the detokenizer s log at .

The token is used at to lookup the middle digits an example of which is discussed below in connection with . Upon determining the lookup is complete the event is recorded in the detokenizer s log at .

If the entire resulting token was provided to the detokenizer the token is replaced at with the middle digits and the entire detokenized PAN is returned to the source system at . An exemplary process for replacing the token with the original middle digits value is discussed in connection with e.g. . If only the token was provided to the detokenizer the detokenizer can be configured to send at the middle digits to the source system and the source system e.g. its processor and or other circuitry can be configured to reassemble the PAN. Regardless the detokenizer can be configured to log whichever instructions it executes successfully or unsuccessfully at . Process ends at .

Further to the discussion of the detokenizer may include and or other was be connected to a detokenizer pre parser. The detokenizer pre parser may be configured to extract a token from a message identify a token map identifier and or confirm the token map identifier is valid among other things. In some embodiments the detokenizer pre parser may be a physical component included in a server or other type of machine a stand alone machine that processes data independent from other devices and or any other software firmware and or combination thereof. The detokenizer pre parser may be configured to execute process shown in which starts at

At the detokenizer pre parser may receive a message that may or may not include at least one token and or tokenized PAN. The message may be received from for example known message oriented middleware such as IBM s MQSeries . As another example the message may be received in accordance with known protocols such as hypertext transmission protocol HTTP .

At the processor can be configured to determine whether the message received at has a length that is at least a predetermined number of characters. For example the processor may be configured to determine whether the message is at least ten characters in length.

In response to determining at that the message length is the predetermined number of characters or less e.g. ten characters or shorter process proceeds to and ends.

In response to determining at that the message length is more than the predetermined number of characters e.g. more than ten characters the processor can be configured to search at for a pattern consistent with a token and or tokenized PAN. For example a token may have the following pattern P 2 6N V CN B36 4 7A S 4N . In other words the pattern may include a prefix P that is two to six base10 numeric characters N in length a token map version identifier V that is one character C and one numeric character a base36 B36 token that is four to seven alphanumeric characters A in length and a suffix S that is four numeric characters in length.

At the processor can be configured to determine whether a string of characters of the appropriate length and or otherwise meeting the criteria of has been found in the message received at . In response to determining no such string of characters is included in the message process returns to . In response to determining that such a string of numeric characters is included in the message the processor can be configured to extract the token map version identifier from the token at . Examples of the token map version identifier are discussed above and an exemplary process for extracting a token map identifier is discussed in reference to e.g. .

At the processor can be configured to validate the token map version identifier. At in response to determining the token map version identifier is invalid process proceeds to and records a log event that indicates there is no valid token in the message and process ends at . Any token with an error may not be replaced in the string but an error code may be returned.

In response to determining the token map version identifier is valid process proceeds to and converts the base36 or other numerical system portion s to base10. After the conversion the base10 version of the token can be used to locate a middle digits value in the token map some examples of which are discussed in reference to . In some embodiments the token map may store a base36 number and the conversion from base36 to base10 and or any other type of conversion may be performed after retrieving the middle digits value from the token map.

At the Luhn test is executed. A determination is then made at as to whether or not the Luhn test was passed or failed. In response to determining the Luhn test failed process returns to . In response to determining the Luhn test passed process proceeds to and the processor outputs the detokenized middle digits value and or the entire detokenized PAN for transmission to the source device and or any other electrical device. Process then ends at .

Further to the discussion of shows an exemplary process process that may be used to extract a token map identifier from the token. Process starts at .

At the processor which may be detokenizer parser s processor and or any other type s of processor s parses the tokenized PAN into a prefix token map version identifier token and suffix.

At the processor can be configured to locate and load the correct version of the token map. An exemplary process that may be used to locate and load a token map for detokenizing is discussed in reference to .

At the token map can be configured to replace the token with the detokenized base10 middle digits value. And at the processor can be configured to insert the detokenized middle digits value in between the prefix and suffix portions of the tokenized PAN to construct the detokenized PAN. Process ends at .

Further to the discussion of and shows an exemplary process process that may be used to build a token map for detokenization. Process may be used when for example the detokenizer may need to load multiple versions of the previously rendered token map. The location of the token maps can be identified though e.g. an application configuration system environment variables and or a default location. It may be necessary to have the ability to dynamically load token maps without having to restart the process so that a new version can be deployed without service interruption.

As mentioned above to protect the contents of the token map the token map should be encrypted. The detokenizer and or other system component s can be configured to decrypt the token map and read it into memory. For example 400 MB may be required for a token map that accommodates 10integers. By convention the token map file name may contain two bytes that correspond with the token map version identifier used to create the token being detokenized. Process starts at .

At the processor which may be detokenizer s processor and or any other type s of processor s can allocate memory space for the token map. At the token map can be found based upon the token version identifier that was previously parsed from the token. The identified token map may then be retrieved from memory and or a remote device and decrypted if necessary. The identified token map may not need to be retrieved if already present in the systems active memory. The token values of the retrieved token map may then be loaded into the space that was allocated at . At the processor can be configured to associate a detokenized middle digits value with each token value retrieved at .

A determination may be made at as to whether all of the token values. Process repeats until the token map has been populated enough to complete a detokenization process. Process then ends at .

Embodiments of the present invention may be implemented by various means such as hardware firmware processor circuitry and or other devices associated with execution of software including one or more computer program instructions. For example one or more of the procedures or activities described above may be embodied by computer program instructions. In this regard the computer program instructions which embody the procedures or activities described above may be stored by a memory device of an apparatus employing an embodiment of the present invention and executed by a processor in the apparatus. As will be appreciated any such computer program instructions may be loaded onto a computer or other programmable apparatus e.g. hardware to produce a machine such that the resulting computer or other programmable apparatus embody means for implementing the functions specified in the corresponding procedure or activity. These computer program instructions may also be stored in a computer readable storage memory as opposed to a computer readable transmission medium such as a carrier wave or electromagnetic signal that may direct a computer or other programmable apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture the execution of which implements the function specified in the corresponding procedure or activity. The computer program instructions may also be loaded onto a computer or other programmable apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions specified in the corresponding procedure or activity described above.

Also the terms substantially about approximately or the like as used herein are intended to reflect variances in a value or relationship that may be due to various factors such as the effects of environmental conditions common error tolerances or the like. It should further be understood that although some values or other relationships may be expressed herein without a modifier these values or other relationships may also be exact or may include a degree of variation due to various factors such as the effects of environmental conditions common error tolerances or the like.

Many modifications and other embodiments of the inventions set forth herein will come to mind to one skilled in the art to which these inventions pertain having the benefit of the teachings presented in the foregoing descriptions and the associated drawings. For example although much of the foregoing discussion is focused on tokenizing middle digits values and not tokenizing prefix values and suffix values any segment or segments of a PAN or other type of code may be tokenized while one or more other segments remain untokenized. In some embodiments rather than tokenize a middle digits value comprised of digits in the middle of a PAN a tokenizer may tokenize a targeted value that may be comprised of one or more characters throughout the PAN. The targeted value may include for example two or more characters or segments of characters that are located next to each other characters dispersed individually throughout the PAN and or any combination thereof. Like the middle digits values discussed above some embodiments may or may not define the targeted value based on character s predetermined location s within a given PAN. Similarly rather than not tokenizing a prefix value located before a targeted value segment of characters and or suffix value located after a targeted value segment of characters some embodiments may have one or more non targeted values that like the prefix and suffix values discussed above remain untokenized in a tokenized PAN. Likewise rather than replace a token with a middle digits value during detokenization the token may be replaced with targeted value. In this regard a token map may be generated to associate token values with targeted values and targeted values with token values. Non targeted values may also remain the same when a tokenized PAN is being detokenized. Therefore it is to be understood that the inventions are not to be limited to the specific embodiments disclosed and that modifications and other embodiments are intended to be included within the scope of the appended claims. Although specific terms are employed herein they are used in a generic and descriptive sense only and not for purposes of limitation.

