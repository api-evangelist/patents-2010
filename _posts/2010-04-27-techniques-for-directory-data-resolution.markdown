---

title: Techniques for directory data resolution
abstract: Techniques for directory data resolution are disclosed. In one particular exemplary embodiment, the techniques may be realized as a method for directory data resolution comprising receiving data identifying one or more groups of interest of a directory server, traversing, using a processor, one or more directory entries contained in hierarchical directory data, the traversal starting at a directory entry corresponding to a current group of interest, reading a first directory entry to identify a member contained in the first directory entry, adding, in the event a member is contained in the first directory entry, the current group of interest to a mapping for the member. The method may also include use of caching and recursion.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08793355&OS=08793355&RS=08793355
owner: Symantec Corporation
number: 08793355
owner_city: Mountain View
owner_country: US
publication_date: 20100427
---
The present disclosure relates generally to directory data services and more particularly to techniques for directory data resolution.

Directory data services may provide directory data for a variety of clients and applications including user authentication message delivery and the application of group policies. Directory data services may serve a plurality of applications in which high throughput is important such as for example enterprise class messaging security. Applications and or directory data services may use cached directory data to improve performance and to reduce a load on a directory server. Directory data may contain groups and distribution lists for the purposes of this disclosure a distribution list differs from a group only in that it has at least one email address to which messages can be delivered. A group may have multiple members each of which could be another group nested relationship or leaf entry such as an entry to represent a user. Groups may be nested many levels deep. Application policies may be set at or bound to one or more groups within the directory server we term a group bound to an application policy as a group of interest . To determine what policies apply to a user an application may have to traverse multiple levels of groups to identify members. During traversal groups and users which are not required to identify members of a group of interest may be loaded into memory. These extra groups and users may add additional processing time and overhead when attempting to resolve group membership identities for a particular group. Additionally refreshing group membership and related data structures in cache may add a significant burden to directory servers.

In view of the foregoing it may be understood that there may be significant problems and shortcomings associated with current directory technologies when used to determine of which groups a user or sub group is a member.

Techniques for directory data resolution are disclosed. In one particular exemplary embodiment the techniques may be realized as a method for directory data resolution comprising receiving data identifying one or more groups of interest of a directory server traversing using a processor one or more directory entries contained in hierarchical directory data the traversal starting at a directory entry corresponding to a current group of interest reading a first directory entry to identify a member contained in the first directory entry adding in the event a member is contained in the first directory entry the current group of interest to a mapping for the member determining whether the first directory entry contains a further directory entry and reading in the event a further directory entry is contained in the first directory entry the further directory entry to determine whether the current group of interest is to be added to a mapping for another member and whether additional hierarchical directory data levels are to be traversed for the current group of interest.

In accordance with other aspects of this particular exemplary embodiment the one or more directory entries may comprise at least one of a user a group and a distribution list.

In accordance with further aspects of this particular exemplary embodiment the techniques may further comprise repeating a traversal of one or more directory entries contained in hierarchical directory data for a second group of interest.

In accordance with additional aspects of this particular exemplary embodiment the techniques may further comprise caching a list of identified users associated with a group membership map.

In accordance with additional aspects of this particular exemplary embodiment the techniques may further comprise caching a list of identified distribution lists associated with a group membership map.

In accordance with additional aspects of this particular exemplary embodiment the techniques may further comprise caching a list of identified groups associated with a group membership map.

In accordance with additional aspects of this particular exemplary embodiment policies may be applied to groups of interest and a mapping of one or more members to a group of interest may improve performance associated with applying a policy.

In accordance with additional aspects of this particular exemplary embodiment in the event a directory entry is available in cache analysis is performed using the cache and wherein in the event a directory entry is unavailable in cache a query is made to the directory server.

In accordance with additional aspects of this particular exemplary embodiment a directory entry is unavailable in cache if the directory entry is expired.

In accordance with additional aspects of this particular exemplary embodiment directory entries in cache are expired based on an expiration time determined by a separate random value assigned to each directory entry the random value distributing expiration times for the cached directory entries to reduce a load required to refresh expired directory entries in cache at a point in time.

In accordance with additional aspects of this particular exemplary embodiment the data identifying one or more groups of interest of a directory server is received from an application and wherein at least one mapping of a member to a group of interest is provided to the application for application of a policy.

In accordance with additional aspects of this particular exemplary embodiment the techniques may further comprise identifying a circular group relationship in the one or more directory entries contained in hierarchical directory data during traversal and providing an alert containing data integrity error information associated with the circular group relationship to the administrator.

In accordance with additional aspects of this particular exemplary embodiment the techniques may further comprise determining that the directory server is unavailable and using the expired corresponding directory entry for directory data resolution.

In accordance with additional aspects of this particular exemplary embodiment the directory server may be a LDAP compliant directory server.

In accordance with additional aspects of this particular exemplary embodiment cached directory entries may be used concurrently by a process traversing hierarchical directory data to generate a mapping of one or more users to a group and by a directory data service client.

In accordance with additional aspects of this particular exemplary embodiment the techniques may be realized as at least one processor readable storage medium for storing a computer program of instructions configured to be readable by at least one processor for instructing the at least one processor to execute a computer process for performing the method.

In another particular exemplary embodiment the techniques may be realized as an article of manufacture for directory data resolution the article of manufacture comprising at least one processor readable medium and instructions stored on the at least one medium wherein the instructions are configured to be readable from the at least one medium by at least one processor and thereby cause the at least one processor to operate so as to receive data identifying one or more groups of interest of a directory server traverse one or more directory entries contained in hierarchical directory data the traversal starting at a directory entry corresponding to a current group of interest read a first directory entry to identify a member contained in the first directory entry add in the event a member is contained in the first directory entry the current group of interest to a mapping for the member determine whether the first directory entry contains a further directory entry and read in the event a further directory entry is contained in the first directory entry the further directory entry to determine whether the current group of interest is to be added to a mapping for another member and whether additional hierarchical directory data levels are to be traversed for the current group of interest.

In yet another particular exemplary embodiment the techniques may be realized as a system for directory data resolution comprising one or more processors communicatively coupled to a network wherein the one or more processors are configured to receive data identifying one or more groups of interest of a directory server traverse one or more directory entries contained in hierarchical directory data the traversal starting at a directory entry corresponding to a current group of interest read a first directory entry to identify a member contained in the first directory entry add in the event a member is contained in the first directory entry the current group of interest to a mapping for the member determine whether the first directory entry contains a further directory entry and read in the event a further directory entry is contained in the first directory entry the further directory entry to determine whether the current group of interest is to be added to a mapping for another member and whether additional hierarchical directory data levels are to be traversed for the current group of interest.

In accordance with additional aspects of this particular exemplary embodiment the one or more directory entries may comprise at least one of a member a group and a distribution list.

In accordance with additional aspects of this particular exemplary embodiment the one or more processors may further be configured to repeat a traversal of one or more directory entries contained in hierarchical directory data for a second group of interest.

In accordance with additional aspects of this particular exemplary embodiment in the event a directory entry is available in cache analysis is performed using the cache and in the event a directory entry is unavailable in cache a query is made to the directory server.

In accordance with additional aspects of this particular exemplary embodiment directory entries are expired based on an expiration time determined by a separate random value assigned to each directory entry the random value distributing expiration times for the directory entries to reduce a load required to refresh expired directory entries at a point in time.

In accordance with additional aspects of this particular exemplary embodiment the data identifying one or more groups of interest of a directory server is received from an application and wherein at least one mapping of a member to a group of interest is provided to the application to apply a policy.

In accordance with additional aspects of this particular exemplary embodiment a directory entry available in cache is identified by a cache index using query filter token allowing directory entry matching using a full name derived from a local part of an email address.

In still another particular exemplary embodiment the techniques may be realized as a method for directory data resolution comprising receiving a directory data query containing an email address the directory data query directed to a directory server supporting a plurality of email aliases for en email address querying the directory server using a query filter token allowing matching on a full name wherein the query filter token replaces periods or underscores in a local part of an email address with a space to derive a fullname for querying retrieving a directory entry corresponding to the fullname and providing the directory entry to a requester.

The present disclosure will now be described in more detail with reference to exemplary embodiments thereof as shown in the accompanying drawings. While the present disclosure is described below with reference to exemplary embodiments it should be understood that the present disclosure is not limited thereto. Those of ordinary skill in the art having access to the teachings herein will recognize additional implementations modifications and embodiments as well as other fields of use which are within the scope of the present disclosure as described herein and with respect to which the present disclosure may be of significant utility.

With reference to computer system of modem network interface or some other method may be used to provide connectivity from one or more of client systems and to network . Client systems and may be able to access information on directory servers N using for example a Lightweight Directory Access Protocol LDAP client or other client software. Such a client may allow client systems and to access data hosted by directory servers N or one of storage devices N .

Networks and or may be a local area network LAN a wide area network WAN the Internet a cellular network a satellite network or another network that permits communication between clients directory servers N and other devices communicatively coupled to networks and or . Networks and or may further include one or any number of the exemplary types of networks mentioned above operating as a stand alone network or in cooperation with each other. Networks and or may utilize one or more protocols of one or more clients or servers to which it is communicatively coupled. Networks and or may translate to or from other protocols to one or more protocols of network devices. Although networks and are each depicted as a single network it should be appreciated that according to one or more embodiments networks and or may comprise a plurality of interconnected networks.

Storage devices N may be network accessible storage and may be local remote or a combination thereof to directory servers N . Storage devices N may utilize a redundant array of inexpensive disks RAID magnetic tape disk a storage area network SAN an internet small computer systems interface iSCSI SAN a Fibre Channel SAN a common Internet File System CIFS network attached storage NAS a network file system NFS optical based storage or other computer accessible storage. Storage devices N may be used for backup or archival purposes.

According to some embodiments clients and may be smartphones PDAs desktop computers laptop computers servers other computers or other devices coupled via a wireless or wired connection to network . Clients and may receive data from user input a database a file a web service and or an application programming interface.

Directory servers N may be one or more of a host for directory data such as for example a Microsoft Active Directory Server an IBM Lotus Domino Server a Sun Directory Server a LDAP compliant directory server a database server a server containing one or more flat files or other data structures e.g. XML or other devices communicatively coupled to network . Directory servers N may utilize one or more of storage devices N for the storage of application data backup data or other data. One or more of directory servers N may be a host such as an application server which may process data requests for clients and .

According to some embodiments network may represent the Internet and network devices may be devices handling a high volume of data traffic between network which may be a corporate WAN or LAN and network . For example one or more of network devices may be a mail gateway a web gateway or another appliance or application using directory data services for user authentication and or authorization identity management recipient validation address resolution message routing access control or other application behavior. By way of non limiting example one or more of network devices may be a Symantec Brightmail Gateway a Symantec Web Gateway a Symantec Data Loss Prevention Host a Symantec Endpoint Protection Application or a Brightmail Message Filter. One or more of network devices may use directory data service to manage cached data from one or more directory servers. According to some embodiments each network device may cache its own data. According to one or more embodiments cached data may be shared among two or more of network devices . For example network device may be a control center host for a plurality of Brightmail Gateway scanners. The control center host may contain cached directory service data shared among a plurality of other network devices which may be Brightmail Gateway scanners. Cached data may be stored on a network device or in electronic storage communicatively coupled to a network device .

Directory data service may be a component of a network device a module or another combination of hardware and software integrated to manage directory data cache operations. According to some embodiments directory data service may provide a unified service oriented architecture for directory data integration with a gateway appliance or another device or application using directory data services for high throughput processing.

Directory data service may enable efficient directory data group resolution and cache management. Directory data service may traverse one or more directory entries contained in a hierarchical directory server. The traversal may start at a current group of interest. If a directory entry is available in cache analysis may be performed using the cache. If a directory entry is unavailable in cache a query may be made to the directory server. If a directory entry is retrieved from the directory server it may be written to cache. Directory data service may read a first directory entry to identify a member contained in the first directory entry. If a member is identified directory data service may add the current group of interest to a mapping for the member. A mapping for a member may be a flat data structure showing one or more groups and or distribution lists associated with a member. Directory data service may determine whether the first directory entry contains a further directory entry e.g. a further level of hierarchy below the present directory entry . Directory data service may read a further directory entry contained in the first directory entry e.g. a nested group to determine whether the current group of interest is to be added to a mapping for another member e.g. does a nested group contained in the further directory service entry contain a member to be mapped to a group of interest . Directory data service may determine whether additional hierarchical directory data service levels are to be traversed for the current group of interest e.g. there further levels of hierarchy to traverse down under the group of interest . According to some embodiments directory data service may cache a list of identified users associated with a group membership map a list of identified distribution lists associated with a group membership map and or a list of identified groups associated with a group membership map. According to some embodiments policies may be applied to groups of interest and a mapping of one or more members to a group of interest may improve performance associated with applying a policy. For example data identifying one or more groups of interest within a directory server may be received from an application. One or more mappings of members to the identified groups of interest may be provided to the application for application of a policy.

According to some embodiments cached entries may be used concurrently by a directory data service to generate a mapping of one or more users to a group and by a directory data service client.

According to some embodiments groups distribution lists and other directory entries may expire. The expiration may be based on an expiration time determined by a separate random value assigned to each directory entry. The random value may distribute expiration times for the directory entries to reduce the chance that many expired entries will need to be refreshed concurrently placing an inordinate load on the directory server.

Directory data service may allow the management of cached data from a directory server such as for example directory server . Directory data service may also manage requests for directory services data. Caching data may allow faster performance for a network device such as a mail gateway and may offload burden from one or more directory servers . Building an initial cache may however pose a significant load. According to one or more embodiments directory data service may preload cached directory data prior to use by a network device. Cached data may need to be refreshed periodically so that the cached data does not become stale e.g. omit changes to the directory data which may have occurred on a directory server. A large number of cache entries may be created at a same time or within a same narrow time period. Setting a large number of cache entries a same Time To Live TTL setting or other similar setting which determines the expiration of the cache entry may result in a large number of queries to a directory server to refresh a large number of cache entries in a short time period. This undesirable behavior may cause a spike performance problems or other undesirable behavior on a directory server and or on an application or device using a directory server.

According to one or more embodiments of the present disclosure expiration times e.g. TTL settings of cached entries may be varied so that a large number of cached entries do not burden a directory server with refresh requests e.g. LDAP queries to a LDAP compliant directory server at a same point in time. For example one or more parameters determining a range of permissible expiration times for a plurality of cached directory entries may be set by an administrator. Directory data service may provide a user interface and or accept set parameters. When a cached directory entry from a directory data service is created it may be assigned a creation directory data service . The cached directory entry may also be assigned one or more random values by directory data service . The one or more random values may determine an expiration time e.g. a Time To Live TTL for the cached directory entry within the permissible range of expiration times. Randomizing the expiration time for the cached directory entry among the range of permissible expiration times for a plurality of cached directory entries may reduce an amount of synchronization e.g. refresh requests required between the cache memory of a network device and a directory server at a point in time. Thus the cached entries may have their TTL settings distributed across a range of permissible time to live settings so that a directory server does not incur a performance spike or other degradation.

If a cache entry is expired directory data service may attempt to refresh the cache entry by querying a directory server e.g. a LDAP query to LDAP compliant directory server . The cache entry may be received and updated or created in the cache with a new creation time set and a new TTL calculated.

According to some embodiments if a directory data service is unavailable an expired corresponding directory entry may be provided in response to a request. In the event a directory server is redundant to another directory server e.g. they contain the same cache entries a query to a directory server may fail over from the first server to the second server. For example a round robin DNS Domain Name Server scheme may be used to failover to redundant directory servers. According to some embodiments load balancing and or failover may be implemented at a directory server e.g. LDAP tier. According to one or more embodiments when there is a data access failure e.g. network problem or a directory server is down directory data service may service requests with data from the cache if it is available even if the cached data TTL has expired. For this reason data may not be deleted from a data source cache unless size limits have been exceeded. For example there may be a fast failover mode which may initiate when several data access failures have been detected in a short period of time. This may cause the data source to immediately serve up the cache data if it is available or to fail immediately with an exception e.g. DataAccessUnavailableException . This may allow directory data service to maintain high throughput when directory server resources are unavailable. According to an embodiment a directory data service fast failover configuration may be implemented as follows.

If five data access failures are detected in a period of 120 seconds switch to fast failover for 300 seconds. If there is no cached data to failover to for a particular request the directory data service DDS call may fail with a transient error. For recipient validation such transient errors may result in an SMTP error directing upstream senders to retry the message. For the other functions these errors may cause messages to remain in various internal MTA Message Transfer Agent queues where they may be retried.

According to some embodiments cache data may take precedence over a redundant directory data source. Setting an order of precedence among directory data sources and caches may be configurable. For example consider the case where the system has been configured with two identical recipient validation sources SourceA and SourceB where SourceA is the first source in query order. Under normal circumstances only SourceA may be queried for valid recipients. Under normal circumstances both sources may be queried for invalid recipients. If SourceA is down cached valid recipients may be served from the SourceA cache Source B may not be consulted. If SourceA is down uncached valid recipients may be served from SourceB. Sticky refresh may cause them to be subsequently served from SourceB. If SourceA is down cached but unexpired invalid recipients may be handled the same as under normal circumstances. If SourceA is down uncached or cached but expired invalid recipients may cause an error instructing a requestor to try again later.

According to some embodiments if SourceB is down cached valid recipients may be served from the SourceA cache Source B may not be consulted. If SourceB is down uncached valid recipients may be served from SourceA. Early termination and sticky refresh may cause them to be subsequently served from SourceA. Early termination may be the termination of a search against a directory data service configured with multiple data sources without verifying the uniqueness of the search results e.g. in the case of recipient validation the search may stop at a first data source in which the requested directory entry is found . Sticky refresh may be a preference defined under which a directory entry in a cache is associated with a particular data source and the directory data service attempts to refresh the directory entry from that same data source when the directory entry expires e.g. as long as the directory entry may be refreshed from the same data source other data sources in the system will not be queried for it . If SourceB is down cached but unexpired invalid recipients may be handled the same as under normal circumstances.

If SourceB is down uncached or cached but expired invalid recipients may cause an error directing a requestor try again later.

According to some embodiments redundant sources may not be supported. When a directory data source is down it may fail over to cache data if it is available. If there is no cache data to use the source may log a data access error and directory data service may generate a data access alert. However directory data service may continue to search other data sources. If a unique entry is found in one of the healthy sources the call may succeed and sticky refresh may direct subsequent requests for that entry to that source. If more than one entry is found a uniqueness error may be logged and directory data service may generate a data integrity alert. If no matching entries are found a request may fail with a transient error code and may be retried.

According to some embodiments directory data service may detect one or more data integrity errors or other errors and may provide logging and or alerting associated with the errors. For example directory data service may encounter data errors during processing and may log the errors and or provide an alert to an administrator. Detected data errors may include by way of non limiting example email address non uniqueness username non uniqueness missing or invalid attribute data e.g. missing email address invalid email address format group membership attribute referring to a non existent entry and inconsistent values for child and parent group membership attributes and circular group relationships. Directory data service may integrate with a variety of directory data. For example directory data service may access directory servers . . . N which may be LDAP directories SQL databases and or servers containing flat files. Directory data service may access a directory server e.g. a LDAP query seeking an email address or other data. Based on received data directory data service may detect a data integrity error. A received email address may correspond to multiple directory entries in a single data source or a username may correspond to multiple directory entries in a single data source. According to some embodiments in addition to data integrity errors other errors recognized by directory data service may handle errors including directory data access errors e.g. failed to read data from a LDAP server an undersized data source cache error e.g. indicates that a data source cache or cache index is not large enough to hold all of the requested data or fetched directory entries in memory and or an end user preference replication error indicates that an end user preference replication operation has failed .

Directory data service may provide alerts for events including a service is not responding or working a service start after an improper shutdown a service shutdown and a service start. In addition to these alerts directory data service may handle directory data service DDS specific alerts. Directory data service may provide directory server data access alerts. This type of alert may be triggered when the directory data service cannot read data from an directory server e.g. a LDAP server . This may occur for a wide variety of reasons. Some examples may include a LDAP server is down network infrastructure problems DNS issues firewall rules blocking requests bad data source admin bind credentials and or a LDAP search timeout.

Other alerts handled by directory data service may include directory server data integrity alerts. This type of alert may be triggered when directory data service has detected a problem with directory data that prevents the successful execution of a request. Data integrity issues that do not result in the failure of requests may be logged by directory data service at a WARNING level and may not trigger alerts. Directory data service may log recipient validation errors. If multiple entries are returned for a search on the recipient address within a single data source or across multiple sources the event may be logged by directory data service an INFO level and no alert may be generated. Duplicate recipients may be considered valid for the purposes of the recipient validation function.

More than one entry is returned for a search on an email address within a single data source or across multiple sources .

More than one entry is returned for a search on a username within a single data source or across multiple sources .

The following data integrity issues may be logged by directory data service at WARNING level and may not trigger alerts circular group references invalid group membership attribute values missing primary email attribute value and or invalid format for email address value.

Circular group references may be recognized by directory data service when a directory server is being traversed from the top down to determine group membership. For example if group A is a member of group B and group B is a member of group A directory data service may detect this and log an error. Group relationships may be nested many levels deep so a circular group reference may occur several levels down. For example assuming groups are nested from parent through child from A E group B may be member of group E causing a circular group reference. According to some embodiments a recursive tree traversal algorithm may be used that may determine that a particular node of a tree i.e. a group has been visited before. This may indicate a circular group reference. Circular group references may be detected with in a data source e.g. a single directory server or across data sources.

Directory data service may also provide directory data service DDS Cache Size Alerts. This type of alert may be triggered when directory data service evicts a cache entry before it is expired to make room for a new entry that has been fetched from the data access layer. The alerts and log statements may steer the administrator to take the appropriate action. Exemplary alerts include 

Alert files may communicate the host the specific type of alert condition and the time of the triggering incident. The alert text may direct administrators to the system log files for additional diagnostic information. This may allow change extension of functionality of the alerts with less impact.

The status codes may be coarse grained and there may be many possible error conditions that could result in a particular code. The alert mechanism may simply communicate that the directory data service instance on a particular host was unable to process requests at a particular time and may refer the administrator to the logs for detailed information about a root cause.

There may be user interface elements e.g. checkboxes to enable or disable one or more subtypes of directory data access alerts directory data integrity alerts directory data service cache size alerts user preference replication alerts or other types of alerts.

Directory data service may log one or more data integrity errors or other errors and alerts may be generated by a separate mechanism. For example directory data service create an alert file on disk or in other electronic storage. The alert file may contain a timestamp and an identifier indicating a type of alert condition. A process or agent running on network device may periodically poll for alert files process alert metadata and send an alert email to one or more users e.g. registered system administrators . Other communication channels may be used to notify a user including but not limited to SMS text messages voicemail and or a webpage posting. According to some embodiments directory data service may send an alert directly without the use of an additional process or agent. According to one or more embodiments directory data service or another process may send an alert using an interface e.g. via SNMP a Windows System Event or a custom IPC inter process communication .

Detection of data integrity errors by directory data service and prompt alerting of a system administrator may enable a system administrator to address issues prior to system degradation or failure.

According to some embodiments directory data service group resolution may be performed to aid one or more application functions. For example a mail gateway may wish to determine membership of one or more groups of interest to determine which policy to apply to a user. Resolving all groups may put an unnecessary and heavy burden on a directory server. For example according an exemplary embodiment a mail gateway may only need to resolve group memberships that intersect with policy group memberships e.g. policy group memberships stored in a configurable list such as bmiconfig.xml . Run time group membership expansion may be limited to child memberships of distribution lists when distribution expansion is enabled according to some embodiments. Downward expansion of distribution lists and groups included as members of policy groups in a configurable list e.g. bmiconfig.xml may be performed ahead of accepting address resolution calls from directory data service clients. No upward expansion of parent memberships may be performed. This may provide several benefits 

Speeding up address resolution tremendously for all directory types not just the ones lacking a member of attribute 

Lowering memory overhead significantly by dropping the number of dlists and groups cached to only those referenced in policies and or receiving messages.

Resolving policy group memberships may take several seconds to a few minutes while the downward only expansion model may speed up distribution list expansion by several orders of magnitude it may still take a non negligible about of time to resolve all dlists and groups to populate the cache. During this time address resolution calls may be queued.

Cache expiration of resolved dlists and groups may be refreshed by a thread based on a minimum TTL. Any add or edit to bmiconfig.xml policy group memberships or directory data source configuration change may trigger re resolution of groups.

Downward membership expansion algorithm may start with a list of email addresses and LDAP group distinguished names DNs as obtained from the policy memberships listed in data scanner etc bmiconfig.xml. Each LDAP group DN may be added to the list of groups to be. For each fully formed email address localpart domain.com EntryDAO may be used to determine if the email address corresponds to a dlist and if so add it to the list of groups to be expanded. Other policy membership forms e.g. domain only file globbing patterns may be skipped.

Whether a directory entry is a distribution list or email less LDAP group the next steps may be the same 

Then at the completion of the downward membership resolution task we would have the following entries in the directory data service cache 

The parent membership information for one or more Entry types user DistributionList Group may be separated into a separate map backed cache where the key is the uniqueId of the Entry and the value is a List of the uniqueId s of the group s and dlist s of which that Entry is a member.

Resolving an Entry from the cache may now incur a new step if the uniqueId is found to exist in the main cache a second lookup may be performed on the map backed membership cache. If there is no key for the uniqueId there may be no parent group membership to report for that entry.

Note that Entries with parent membership of interest to directory data service clients may be cached after the downward membership expansion task has completed. While each Entry in the main cache may have its own time to live TTL the entire membership map may be considered to have a single TTL which may be set to the minimum range TTL for the data source. Consequently the following use cases may be encountered when an address resolution entry is fetched when servicing a directory data service client address resolution request 

The Entry was not yet cached. Therefore the Entry may have no parent membership and the LDAP server may be queried for the email addresses and child membership only.

The Entry is cached but the TTL for the Entry is expired therefore the LDAP server may be queried for the email addresses and child membership only and the cached Entry may be replaced. If the Entry has parent membership it may be re linked by virtue of the uniqueId DN .

When the directory data service server is started for the first time or when the server is restarted the entire membership map may be rebuilt for a given source if cache persistence is not enabled.

When the directory data service server receives a kick command and the bmiconfig.xml file contains a change to policy membership lists the entire membership map may be rebuilt for a given source.

When the directory data service server receives a kick command and the ddsconfig.xml file contains a change to a data source that requires the cache for that source to be rebuilt the entire membership map may be rebuilt for a given source.

When the TTL for the membership map has expired in order to capture addition and removal of group members in the LDAP server directory tree the entire membership map may be rebuilt for a given source.

The directory data service server may block address resolution calls and while the membership map is being rebuilt. If a kick or clear cache command is received while a membership map build task is in progress for a relevant source the task may be abandoned and the kick command may be processed.

The rebuild task may build a new membership map while retaining the old copy so that address resolution calls may continue to be serviced while the map is rebuilt and so that in failure cases it may revert to the old copy. This means that during rebuild the membership map may peak at 2 memory consumption of the single map and that the actual time during which address resolution calls are queued when there is an old map available may be negligibly longer than for an ordinary directory data service kick.

To address rebuild when the TTL for the membership map expires there may be a scheduled task for each address resolution source operating on an interval set to the lower TTL range value for the source. When the membership map s TTL has expired the rebuild task may be invoked. If an Entry referred to by the downward expansion is already cached the TTL of that entry may be examined. If expired the Entry and its child membership data may be fetched from the Data Access Layer and cached anew. If not expired the old Entry may be retained and the Entry s child membership data represented in the new map. Membership map data may persist longer than the maximum TTL range. For example if the minimum TTL range is set to 1 hour and the maximum to 5.5 hours then the membership map may be rebuilt up to six times before a particular Entry expires thus that Entry child membership data may remain cached for 6 hours.

The rebuild task may employ a pool of threads to process tile list groups and dlists from the bmiconfig.xml in parallel. Cache statistics may be updated in response to additions replacements and evictions.

During the membership map rebuild for any address resolution source the directory data service server may be prevented from servicing any client address resolution calls or invoking an overlapping kick. Note that other directory data service calls e.g. recipient validation may be executed while the address resolution membership cache is being rebuilt.

When a new membership cache is being built and a previous maps exists address resolution calls may still be serviced by the directory data service. When no previous membership map exists address resolution calls may be queued and the time needed to build the initial map may result in address resolution calls being queued e.g. many large groups in bmiconfig.xml and or slow responding LDAP server .

When a kick or clear cache command is received during membership map building the building may be abandoned the kick or clear cache command serviced and then the membership map build restarted if necessary. The older bmiconfig.xml and ddsconfig.xml may be kept to determine if membership needs to be rebuilt and TTL of old map may be examined to determine if it has expired. Clear cache on a source may result in a membership map rebuild for that source. This handles the cases where membership map rebuild is in progress either initial build or with a previously existing map and 

change to ddsconfig.xml source add edit delete cache persistence change directory data service log level change 

In order to be included in a data source s membership map a policy member email address may be resolvable by the data source address resolution query thus it may be within the scope of the base DN and findable using the query filter.

When a distribution list is listed in a policy using the distinguished name DN of its LDAP entry the membership may be evaluated even if the entry is outside the scope of the data source e.g. the base DN of the source is ou Americas dc company dc com and the DN of the distribution list is cn all sales dlist ou groups dc company dc com . This is because when an entry is retrieved using its DN the entry DN replaces the base DN in the LDAP query for a scope base search with objectclass as the search filter.

When a source s cache is undersized and full and an attempt to cache a new Entry occurs an Entry may be evicted based on a least recently used LRU algorithm. The membership cache map may be unlimited in size but it may be possible to hit the cache limit during the downward expansion task e.g. cache limit is 10 000 and the total number of entries referenced by groups in bmiconfig.xml is 12 000 . We may allow the regular com.symantec.sms.dds.cache.LRUHashMap eviction to occur but since the membership map is separate and unlimited the functionality of the downward expansion may be preserved.

The membership cache may be populated and minimum TTL setting may continue to govern the scheduled membership cache rebuild even when the main cache for the source is disabled or set to a size of zero .

If the LDAP source is inaccessible at any time during downward membership cache rebuild we may fail back to the previous membership map issue a data access alert and retry at an interval of 30 seconds. If there is no previous map to fall back on i.e. the map is being built on the initial source save as a result of change to the source configuration or as a result of a cache clear command then the address resolution calls may be queued.

Failover to a previous map may not occur if a dlist or group listed in bmiconfig.xml is no longer visible in the LDAP server e.g. query successful but null result due to entry being deleted or moved or access control changing but we may log at INFO level listing the source name and group not found.

The membership map hacked cache may be persisted to disk along with other cache data in accordance with the cache persistence Boolean setting.

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM may be the main memory into which the operating system and application programs may be loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system may be stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit or other storage medium. For example directory data service may be resident in system memory .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an Internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . Code to implement the present disclosure may be stored in computer readable storage media such as one or more of system memory fixed disk optical disk or floppy disk . Code to implement the present disclosure may also be received via one or more interfaces and stored in memory. The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 OS X UNIX Linux or another known operating system.

Power manager may monitor a power level of battery . Power manager may provide one or more APIs Application Programming Interfaces to allow determination of a power level of a time window remaining prior to shutdown of computer system a power consumption rate an indicator of whether computer system is on mains e.g. AC Power or battery power and other power related information. According to some embodiments APIs of power manager may be accessible remotely e.g. accessible to a remote backup management module via a network connection . According to some embodiments battery may be an Uninterruptable Power Supply UPS located either local to or remote from computer system . In such embodiments power manager may provide information about a power level of an UPS.

Referring to there is shown a directory data service in accordance with an embodiment of the present disclosure. As illustrated the directory data service may contain one or more components including directory data service DDS cache management module directory data service integrity management module directory data service group membership module directory data service query generalization module and error logging and reporting module .

The description below describes network elements computers and or components of a system and method for directory data resolution that may include one or more modules. As used herein the term module may be understood to refer to computing software firmware hardware and or various combinations thereof. Modules however are not to be interpreted as software which is not implemented on hardware firmware or recorded on a processor readable recordable storage medium i.e. modules are not software per se . It is noted that the modules are exemplary. The modules may be combined integrated separated and or duplicated to support various applications. Also a function described herein as being performed at a particular module may be performed at one or more other modules and or by one or more other devices instead of or in addition to the function performed at the particular module. Further the modules may be implemented across multiple devices and or other components local or remote to one another. Additionally the modules may be moved from one device and added to another device and or may be included in both devices.

Directory data service DDS cache management module may handle one or more aspects of cache management. For example DDS cache management module may receive calculate and or set TTL settings TTL ranges or other cache expiration parameters. DDS cache management module may determine when to expire a cache entry based on one or more TTL parameters a creation time of the cache entry elapsed time since a creation time and or other factors.

DDS cache management module may determine failover behavior based on one or more settings and or detected conditions. DDS cache management module may receive set and or enforce settings for an order of precedence between data sources and or cache.

Directory data service integrity management module may detect one or more data integrity errors or other errors and may provide logging and or alerting associated with the errors. For example directory data service integrity management module may encounter data errors during processing and may log the errors and or provide an alert to an administrator. Detected data errors may include by way of non limiting example email address non uniqueness username non uniqueness missing or invalid attribute data e.g. missing email address invalid email address format group membership attribute referring to a non existent entry and inconsistent values for child and parent group membership attributes and circular group relationships. Directory data service integrity management module may integrate with a variety of directory data. For example directory data service integrity management module may access directory servers . . . N which may be LDAP directories SQL databases and or servers containing flat files. Directory data service integrity management module may access a directory server e.g. a LDAP query seeking an email address or other data. Based on received data directory data service integrity management module may detect a data integrity error. A received email address may correspond to multiple directory entries in a single data source or a username may correspond to multiple directory entries in a single data source or multiple data sources. According to some embodiments in addition to data integrity errors other errors recognized by directory data service integrity management module may include directory data access errors e.g. failed to read data from a LDAP server that was offline an undersized data source cache error e.g. indicates that a data source cache or cache index is not large enough to hold all of the requested data in memory and or an end user preference replication error indicates that an end user preference replica on operation has failed .

Circular group references may be recognized by directory data service integrity management module when a directory server is being traversed from the top down to determine group membership. For example if group A is a member of group B and group B is a member of group A directory data service integrity management module may detect this and log an error. Group relationships may be nested many levels deep so a circular group reference may occur several levels down. For example assuming groups are nested from parent through child from A E group B may be member of group B causing a circular group reference. According to some embodiments a recursive tree traversal algorithm may be used that may determine that a particular node a tree i.e. a group has been visited before. This may indicate a circular group reference. Circular group references may be detected with in a data source e.g. a single directory server or across data sources. During group resolution circular group references may be identified and or logged. One more alerts may be generated.

Directory data service integrity management module may log one or more data integrity errors or other errors and alerts may be generated by a separate mechanism. For example directory data service integrity management module may create an alert file on disk or in other electronic storage. The alert file may contain a timestamp and an identifier indicating a type of alert condition. A process or agent running on network device may periodically poll for alert files process alert metadata and send an alert email to one or more users e.g. registered system administrators . Other communication channels may be used to notify a user including but not limited to SMS text messages voicemail and or a webpage posting. According to some embodiments directory data service may send an alert directly. According to one or more embodiments directory data service integrity management module or another process component or module may send an alert using an interface e.g. via SNMP a Windows System Event or a custom IPC inter process communication .

Detection of data integrity errors by directory data service integrity management module and prompt alerting of a system administrator may enable a system administrator to address issues prior to system degradation or failure.

Directory data service group membership module may traverse a directory server to identify members of a group. Directory data service group membership module may resolve parent group memberships child group memberships or both.

Directory data service group membership module may enable efficient directory data group resolution and cache management. Directory data service group membership module may traverse one or more directory entries contained in hierarchical directory data. The traversal may start at a current group of interest. If a directory entry is available in cache analysis may be performed using the cache. If a directory entry is unavailable in cache a query may be made to the directory server. If a directory entry is retrieved from the directory server may be written to cache. Directory data service group membership module may read a first directory entry to identify a member contained in the first directory entry. If a member is identified directory data service group membership module may add the current group of interest to a mapping for the member. A mapping for a member may be a flat data structure showing one or more groups and or distribution lists associated with a member. Directory data service group membership module may determine whether the first directory entry contains a further directory entry e.g. further levels of hierarchy below the present directory entry . Directory data service group membership module may read a further directory entry contained in the first directory entry e.g. a nested group to determine whether the current group of interest is to be added to a mapping for another member e.g. does a nested group contained in the further directory service entry contain a member to be mapped to a group of interest . Directory data service group membership module may determine whether additional hierarchical directory data service levels are to be traversed for the current group of interest e.g. a there further levels of hierarchy to traverse down under the current group of interest . According to some embodiments directory data service group membership module may cache a list of identified users associated with a group membership map a list of identified distribution lists associated with a group membership map and or a list of identified groups associated with a group membership map. According to some embodiments application policies may be applied to groups of interest and a mapping of one or more members to groups of interest may improve performance associated with applying a policy. For example data identifying one or more groups of interest of a directory server may be received from an application. One or more mappings of members to the identified groups of interest may be provided to the application for application of a policy.

According to some embodiments cached directory entries may be used concurrently by a directory data service to generate a mapping of one or more users to a group and by a directory data service client.

According to some embodiments groups distribution lists and other cached directory entries may expire. The expiration may be based on an expiration time determined by a separate random value assigned to each directory entry. The random value may distribute expiration times for the directory entries to reduce the chance that many expired entries will need to be refreshed concurrently placing an inordinate load on the directory server.

Directory data service query generalization module may allow a query e.g. a LDAP query to a directory server to use query filter tokens or other mechanisms to match a variety of directory data aliases. Query filter tokens and alias matching are discussed in greater detail below in reference to .

Error logging and reporting module may produce logs reports or other information associated with directory data resolution.

Referring to there is depicted a method for directory data resolution in accordance with an embodiment of the present disclosure. At block a list of top groups may be read. A top group may be a group of interest as previously defined in this disclosure.

At block it may be determined if there are one or more top groups to be processed. If one or more top groups on the list remain to be processed the method may continue at block . If no top groups remain to be processed the method may end at block .

At block it may be determined whether a top group is represented by an email address or another type of unique identifier in the list. If a top group is represented by an email address the method may continue at block . If a top group is not represented by an email address the method may continue at block .

At block it may be determined whether a top group is a distribution list. If a top group is a distribution list the method may continue at block . If a top group is not a distribution list the method may return to block .

At block the method may determine whether there are more groups to be resolved. If more groups remain to be resolved the method may continue at block . If no more groups remain in a list of groups to be resolved the method may return to block .

At block a group may be resolved to determine if there are any group members. If there are group members the method may continue at block . If there are no more group members the method may return to block .

At block the identified group member may be analyzed to determine whether the member is a group e.g. a further level of nesting . If the member is a group the method may continue at block . If a member is not a group the method may continue at block .

At block the method may determine whether the group member is a distribution list or a group. If the group member is a distribution list the method may continue at block . If the member is a group the method may continue at block .

At block the group member i.e. either a distribution list or a group may be added to a list of groups to resolve e.g. perform another iteration to resolve the nested distribution list or group . The method may continue at block . The group resolution process may end when no more top groups remain to be resolved at block .

Referring to there is depicted a block diagram illustrating components for directory data resolution module in accordance with an embodiment of the present disclosure. As illustrated host e.g. a gateway appliance may contain a directory data module which may contain cache data access layer membership map build task build task scheduler and API webservice . API webservice and membership map build task may concurrently access cache and data access layer . Data access layer may provide access to directory server . Membership map build task may provide one or more interfaces to cache and data access layer for build task scheduler . API webservice may provide one or more interfaces to cache and data access layer for directory data services client .

Referring to B and C there is depicted directory data structures in accordance with an embodiment of the present disclosure. According to an exemplary embodiment a group of interest may be provided to a directory data service group resolution module. As illustrated in the exemplary groups of interest may include group and dlist . Starting at the top level of the domain hierarchy illustrated in and working down element is identified as containing group and element is identified as containing dlist . Group is added to the group cache as depicted by element of . Dlist is added to the distribution list cache as depicted by element of . These top level groups are further resolved to identify members groups and distribution lists. Resolving group of element identifies members user and user . These users are added the user cache shown in element of . These users are part of the group of interest group and thus they are mapped to group in membership map . Resolving dlist of element identifies member dlist and member user . Dlist is added to the distribution list cache as depicted by element of . User is added to the user cache shown in element of . Dlist and member user are part of group of interest dlist and they are mapped to dlist in membership map . Dlist is further resolved to identify members user and user which are already present in the group cache. As is shown several other groups and distribution lists are present which are not relevant to the groups of crest list in and thus are not traversed cached or added to membership map as part of the process for building the membership map cache.

In addition to a mail attribute value an administrator of one or more types of mail servers may configure their server to accept email for a user based on their first name and or last name or a number of combinations of the thereof.

A mail server configured to receive mail for eng.symantec.com and aliasdomain.com may be configured to recognize one or more of the following as valid recipients 

Because a mail server administrator may configure their server not to support these aliases for instance considering the mail attribute values as the only deliverable addresses for a user the administrator may also be able to configure their directory server query to be inclusive or exclusive of these different address forms. Large mail server deployments may use only the uid and mail attribute values as deliverable addresses. Such a configuration continuing the example above would support the following addresses 

According to some embodiments a query filter may be used to capture one or more of these mail uid uid 

If an administrator chooses to allow aliasing to a user s full name the query can be changed to mail uid uid cn Note here the use of the n token which may substitute a white space character for a period or underscore in the local part of an email address such that john.bigboote eng.symantec.com or john bigboote eng.symantec.com becomes cn john bigboote .

If the administrator also allows aliasing to a user s first and last name the query may be changed to mail uid uid cn givenName sn 

When aliasing on first and last name is allowed it may be far more likely that a namespace collision may occur between two or more user entries having the same first and or last name. For instance if our hypothetical directory server also contained an entry like

An SMTP server itself may handle an attempted delivery to john aliasdomain.com by returning a 5xx error to the SMTP client with a text message that the recipient can t be uniquely identified. Since the directory data service LDAP query may return two entries for which givenName john the condition may be handled as a data integrity error as described above.

As illustrated in exemplary full addresses local portions of email addresses corresponding full names and exemplary queries are illustrated in element . An exemplary directory entry is illustrated in element . Some directory servers e.g. IBM Lotus Domino may support a plurality of email aliases for a directory entry. As illustrated in element multiple email aliases may be supported for the directory entry listed in element . As illustrated in elements and if a query is received to validate an email address of john smith domain.com a directory server query using tokens s and u may not find the directory entry. However as depicted in elements and if a on token is used to query on a fullname a match may be found. A an token may replace periods or underscores in a local part of an email address with a space to derive a fullname for querying.

At this point should be noted that directory server integration in accordance with the present disclosure as described above typically involves the processing of input data and the generation of output data to some extent. This input data processing and output data generation may be implemented in hardware or software. For example specific electronic components may be employed in a directory data service or similar or related circuitry for implementing the functions associated with directory server integration in accordance with the present disclosure as described above. Alternatively one or more processors operating in accordance with instructions may implement the functions associated with directory server integration in accordance with the present disclosure as described above. If such is the case it is within the scope of the present disclosure that such instructions may be stored on one or more processor readable storage media e.g. a magnetic disk or other storage medium or transmitted to one or more processors via one or more signals embodied in one or more carrier waves.

The present disclosure is not to be limited in scope by the specific embodiments described herein. Indeed other various embodiments of and modifications to the present disclosure in addition to those described herein will be apparent to those of ordinary skill in the art from the foregoing description and accompanying drawings. Thus such other embodiments and modifications are intended to fall within the scope of the present disclosure. Further although the present disclosure has been described herein in the context of a particular implementation in a particular environment for a particular purpose those of ordinary skill in the art will recognize that its usefulness is not limited thereto and that the present disclosure may be beneficially implemented in any number of environments for any number of purposes. Accordingly the claims set forth below should be construed in view of the full breadth and spirit of the present disclosure as described herein.

