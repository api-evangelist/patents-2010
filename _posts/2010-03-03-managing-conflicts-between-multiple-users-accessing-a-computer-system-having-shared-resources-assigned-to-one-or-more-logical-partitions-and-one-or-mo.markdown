---

title: Managing conflicts between multiple users accessing a computer system having shared resources assigned to one or more logical partitions and one or more appliance partitions
abstract: A management system for managing computer resources assigned by a hypervisor to one or more logical partitions and/or one or more appliance partitions in a multi-user computer system receives login information from a new user logging into the computer system through a service interface (e.g. a hardware management console) or a non-service interface, builds a conflict list, and sends the conflict list for presentation to the new user. The new user is notified of any users that are logged into any part of the computer system that could conflict with the new user's actions. Such users may be logged into the computer system through service and/or non-service interfaces. In one embodiment, the new user can choose to continue logging in irrespective of any conflicts shown. After choosing to continue, the new user is preferably requested to input an end-time. This end-time may be displayed, in turn, to all subsequent users that log into any part of the computer system that could cause conflict. The management system is preferably a component of the hypervisor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08572611&OS=08572611&RS=08572611
owner: International Business Machines Corporation
number: 08572611
owner_city: Armonk
owner_country: US
publication_date: 20100303
---
The present invention relates in general to the data processing field. More particularly the present invention relates to a method apparatus and computer program product for managing resources assigned to one or more logical partitions and or one or more appliance partitions in a multi user computer system.

Computer systems typically include a combination of hardware and software. The combination of hardware and software on a particular computer system defines a computing environment. Different hardware platforms and different operating systems thus provide different computing environments. In recent years engineers have recognized that it is possible to provide different computing environments on the same physical computer system by logically partitioning the computer system resources into different computing environments. Such a computer system is often referred to as a multipartitioned computer system. The IBM Power Systems formerly IBM System i and System p computer system developed by International Business Machines Corporation is an example of a computer system that supports logical partitioning. If logical partitioning on such a computer system is desired partition manager code referred to herein as a hypervisor is installed that allows defining different computing environments on the same platform. Once the hypervisor is installed logical partitions may be created that define different computing environments. The hypervisor manages the logical partitions to assure that they can share needed resources in the computer system while maintaining the separate computing environments defined by the logical partitions.

A computer system that includes multiple logical partitions typically shares resources e.g. processors memory persistent storage and other physical hardware amongst the logical partitions. For example a computer system with a single CPU could have two logical partitions defined with 50 of the CPU assigned to each logical partition with 33 of the memory assigned to the first logical partition and 67 of the memory assigned to the second logical partition and with two different I O slots assigned to the two logical partitions one per partition. Once logical partitions are defined and shared resources are assigned to the logical partitions each logical partition acts as a separate computer system. Thus in the example above that has a single computer system with two logical partitions the two logical partitions will appear for all practical purposes to be two separate and distinct computer systems.

Input Output I O adapters can be exclusively assigned to also referred to herein as being owned by logical partitions LPARs or shared by LPARs through an appliance partition known as a virtual I O server VIOS partition. For example a VIOS partition allows Ethernet and storage devices to be virtualized and served out to LPARS on a server. The actual physical hardware is owned by the VIOS partition while the LPARs own virtual devices associated with the physical hardware. As a result the VIOS partition is considered a service partition with authority to make any changes to the hardware which in turn could affect the virtual devices being used by the LPARs. The LPARs do not have any direct access to the physical hardware owned by the VIOS partition.

Operations of the different partitions in one or more computer systems may be controlled through a hardware management console HMC which is a form of a service partition. In one embodiment a hardware management console is a separate computer system from which a system administrator for example may perform various functions including assignment of hardware resources to each logical partition as well as reassignment of resources to different logical partitions. In other embodiments a hardware management console may be installed directly on the system being managed e.g. IBM s Integrated Virtualization Manager VMWare Server .

Servers and other computer systems generally support multiple methods for access to partitions both through service interfaces such as hardware management consoles and non service interfaces. As a result there is always the potential for a user of a computer system to step on another user of the computer system unknowingly.

In a multi user server environment for example there are typically multiple operating systems a system management utility and a hypervisor with all these areas owning using different pieces of hardware. So no one area has full knowledge of what actions are taking place elsewhere on the computer system. Therefore determining that one action will cause a conflict with another is not always very straight forward but could be in some situations .

Conventional management systems for managing the partitions are based on calendar entries. Unfortunately the users of computer systems having such conventional management systems must be regimented about their use. Forgetting to make an entry check entries or making a mistake in the calendar can result in two different users logging on to different parts of the same computer system and causing issues for each other.

For example there may be a server administrator using a hardware management console HMC to work on a serviceability action for hardware owned by a partition while another user is trying to run tasks on the partition that requires that same hardware. Today there exists no way for these users to realize that they could cause issues for one another unless both users are regular with the conventional management system s calendars and both users remember to verify the calendar entries. With the complexity of computer systems such as servers there are often multiple administrators and they too could cause conflicts of the computer system if the conventional management system s calendar is not adhered to regularly.

Thus while conventional management systems attempt to prevent these issues from occurring they occur nonetheless because such systems depend on the users awareness and regularity with respect to calendar updates and verification. The safeguards that are provided through such conventional management systems are no longer sufficient especially given the size and complexity of computer systems such as servers and the number of partitions the users may be dealing with.

Therefore a need exists for an enhanced mechanism for managing resources assigned to one or more logical partitions and or one or more appliance partitions in a multi user computer system.

According to the preferred embodiments of the present invention a management system for managing computer resources assigned by a hypervisor to one or more logical partitions and or one or more appliance partitions in a multi user computer system receives login information from a new user logging into the computer system through a service interface e.g. a hardware management console or a non service interface builds a conflict list and sends the conflict list for presentation to the new user. The new user is notified of any users that are logged into any part of the computer system that could conflict with the new user s actions. Such users may be logged into the computer system through service and or non service interfaces. In one embodiment the new user can choose to continue logging in irrespective of any conflicts shown. After choosing to continue the new user is preferably requested to input an end time. This end time may be displayed in turn to all subsequent users that log into any part of the computer system that could cause conflict. The management system is preferably a component of the hypervisor.

In accordance with the preferred embodiments of the present invention a management system for managing computer resources assigned by a hypervisor to one or more logical partitions and or one or more appliance partitions in a multi user computer system receives login information from a new user logging into the computer system through a service interface e.g. a hardware management console or a non service interface builds a conflict list and sends the conflict list for presentation to the new user. The new user is notified of any users that are logged into any part of the computer system that could conflict with the new user s actions. Such users may be logged into the computer system through service and or non service interfaces. In one embodiment the new user can choose to continue logging in irrespective of any conflicts shown. After choosing to continue the new user is preferably requested to input an end time. This end time may be displayed in turn to all subsequent users that log into any part of the computer system that could cause conflict. The management system is preferably a component of the hypervisor.

In the embodiment shown in described further below the computer system is a logically partitioned platform. For those not familiar with the concepts of logical partitions background information is provided below with reference to that will help to understand the present invention.

As stated in the Background Art section above a computer system may be logically partitioned to create multiple virtual machines on a single computer platform. Referring to an exemplary computer system is shown to include four processors 16 GB of main memory six I O slots two Ethernet adapters and two storage adapters . Note that there may be many other components inside a prior art computer system that are not shown in for the purpose of simplifying the discussion herein.

We now assume that the computer system is configured with three logical partitions as shown in . The first logical partition A is defined to have one processor A GB of memory A and one I O slot A. The second logical partition B is defined to have one processor B 4 GB of memory B and two I O slots B. The third logical partition C is defined to have two processors C GB of memory C and three I O slots C. Note that the total number of processors A B C equals the four processors in the computer system . Likewise for the memory and the I O slots. This is a simplified example. There can be unassigned free resources e.g. not all CPUs need to belong to some partition at some point in time .

Input Output I O adapters such as the two Ethernet adapters and the two storage adapters can be exclusively assigned to also referred to herein as being owned by logical partitions LPARs or shared by LPARs through an appliance partition known as a virtual I O server VIOS partition. A VIOS partition allows Ethernet and storage devices for example to be virtualized and served out to LPARS also referred to herein as client partitions on a server. The actual physical hardware is owned by the VIOS partition while the LPARs own virtual devices associated with the physical hardware. As a result the VIOS partition is considered a service partition with authority to make any changes to the hardware which in turn could affect the virtual devices being used by the LPARs. The LPARs do not have any direct access to the physical hardware owned by the VIOS partition.

Now that hardware resources have been assigned to the logical partitions and the VIOS partition software may be installed as shown in . First an operating system is typically installed in each partition followed by utilities or applications as the specific performance needs of each partition require. Thus for example in the first logical partition A includes an operating system A a utility A and an application A. The second logical partition B includes an operating system B and two applications B and B. The third logical partition C includes an operating system C a utility C and an application C. Once the software is installed in the logical partitions as shown in the logically partitioned computer system is ready for use.

In a multi user server environment such as the logically partitioned computer system there are typically multiple operating systems a system management utility and a hypervisor with all these areas owning using different pieces of hardware. So no one area has full knowledge of what actions are taking place elsewhere on the computer system. Therefore determining that one action will cause a conflict with another is not very straight forward. An objective of a management system in accordance with the preferred embodiments of the present invention is to help alleviate this lack of knowledge by centralizing user information and providing a means of communication with all of the various areas e.g. operating system OS hardware management console HMC and hypervisor to inform users of potential problems. Also in accordance with the preferred embodiments of the present invention this communication is secure and will not cause any exposures.

According to the preferred embodiments of the present invention the management system is utilized to help prevent various users from stepping on each other while using the same server or other computer system. The management system which is preferably a component of the hypervisor is login based. Login information obtained during a login procedure e.g. the exemplary login algorithm shown in discussed below is utilized by the management system to manage computer resources assigned by the hypervisor to one or more logical partitions and or one or more appliance partitions in the server or other computer system. The management system receives this login information from a new user logging into the computer system through either a service interface e.g. a hardware management console or a non service interface builds a conflict list and sends the conflict list for presentation to the new user.

While logging in i.e. once the management system has received the new user s login information the new user will be shown any users that are logged into any part of the server or other computer system that could conflict with the new user s actions. Such users may be logged into the server or other computer system through one or more service interfaces and or one or more non service interfaces.

One skilled in the art will appreciate that subsequent actions made available to the new user by the management system are embodiment dependent. For example in the exemplary login algorithm shown in discussed below the new user can choose to continue logging in irrespective of any conflicts presented. In an alternative embodiment the new user is prohibited from continuing to log in if any conflict is presented or a predetermined type or number of conflicts is are presented . The new user may also be presented with an option of deferring login until a conflict free time that is suggested by the management system e.g. the management system may allow the new user to reserve a login time that is conflict free from among one or more such times suggested by the management system .

If the new user chooses to continue to log in she he is preferably requested to input an end time. Entry of this end time is preferably optional for the new user. If the new user chooses to input an end time it is displayed in turn to all subsequent users that log into any part of the computer system that could cause conflict. This allows for better planning.

In accordance with the preferred embodiments of the present invention the management system only flags users that can have actual conflicts. If there are users on the computer system that cannot have conflicts with the new user their presence on the computer system will not be flagged.

One significant advantage of the present invention is its ease of use. A management system in accordance with the preferred embodiments of the present invention will have an easy to use login algorithm to determine if a user logging into a computer system through a certain interface has the potential to have a conflict with another user already logged into the computer system. This will reduce complexity for the user. The user does not need to worry about understanding the details of what another user may be doing on the computer system and can instead rely on the login algorithm of the management system.

A computer system implementation of the preferred embodiments of the present invention will now be described with reference to in the context of a particular multi user computer system i.e. an IBM Power System computer system. However those skilled in the art will appreciate that the method apparatus and computer program product of the present invention apply equally to any computer system regardless of whether the computer system is a complicated multi user computing apparatus e.g. an IBM POWER6 processor based server system or an IBM POWER6 processor based blade system residing in an IBM BladeCenter chassis a PC or an embedded control system. As shown in computer system comprises one or more processors A B C and D a main memory a mass storage interface a display interface a network interface and an I O device interface . These system components are interconnected through the use of a system bus .

A hypervisor described further below is shown in residing in the main memory and performs a number of multipartitioning functions and services for a plurality of partitions in the computer system . Typically the hypervisor comprises computer executable instructions maintained for example as a computer program product stored on a hard disk e.g. on a DASD device or system firmware. Firmware is software stored in a memory chip that holds its content without electrical power such as for example read only memory ROM programmable ROM PROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM and nonvolatile random access memory nonvolatile RAM .

In accordance with the preferred embodiments of the present invention a management system described further below resides in the main memory at least in the embodiment shown in and is a component of or operates in conjunction with the hypervisor for managing resources assigned to one or more logical partitions and or one or more appliance partitions in the computer system . One skilled in the art will appreciate however that the management system need not reside in the main memory of the computer system . For example the management system may comprise computer executable instructions maintained for example as a computer program product stored on a hard disk e.g. on a DASD device or system firmware.

Most complex computer systems such as servers have some form of a hypervisor that virtualizes physical hardware for the various partitions and can control access to various parts of the computer system based on the configuration specified during system setup. This configuration can be modified later through different methods interfaces. The different interfaces such as hardware management consoles communicate with the hypervisor in order to perform any actions. Applications running on a partition will be granted authentication to the hardware by the hypervisor via the partition. As a result the hypervisor is the perfect layer to use for a management system in accordance with the preferred embodiments of the present invention.

A service interface is one that has service authority and can access manipulate all the hardware on the computer system. An example would be a hardware management console. A non service interface on the other hand is one that has some level of control with respect to certain parts of the hardware controlled through the hypervisor. An example of a non service interface would be a client partition that owns an Ethernet card. The hypervisor has the configuration information to figure out which client partitions and or VIOS partitions if any own which hardware in part or completely and thus can be used in an algorithm to figure out if a given client when logged in has the potential for a conflict with another client already logged in through a different interface.

Processors A B C and D also collectively referred to herein as processors process instructions and data from main memory . Processors temporarily hold instructions and data in a cache structure for more rapid access. In the embodiment shown in the cache structure comprises caches A B C and D also collectively referred to herein as caches each associated with a respective one of processors A B C and D. For example each of the caches may include a separate internal level one instruction cache L1 I cache and level one data cache L1 D cache and level two cache L2 cache closely coupled to a respective one of processors . However it should be understood that the cache structure may be different that the number of levels and division of function in the cache may vary and that the system might in fact have no cache at all.

Main memory in accordance with the preferred embodiments contains data an operating system and application software e.g. one or more application programs such as a web server application utilities and other types of software. In addition main memory includes the hypervisor and the management system each of which may in various embodiments exist in any number. One skilled in the art will appreciate that the hypervisor and or the management system need not reside in the main memory of the computer system . Each of these entities in memory is described further below.

Although the hypervisor and the management system are illustrated as being contained within the main memory in other embodiments some or all of them may be on different electronic devices and may be accessed remotely e.g. via a network . Thus for example the management system may be at least partially located or implemented on a networked device e.g. a computer system such as a workstation and or a client system while the hypervisor resides on the computer system .

The preferred embodiments expressly extend to the management system being at least partially implemented in a hardware management console e.g. the hardware management console shown in within the scope of the preferred embodiments. As described further below a hardware management console is typically coupled to one or more servers over a service network.

In accordance with the preferred embodiments of the present invention the computer system may be a server system connected to a client system across a network . The client system if present includes one or more processors and a memory . The memory has stored therein at least at various times an internet browser application providing the client system the ability to remotely access data applications and other types of software e.g. the hypervisor and or the management system located on the server . For example the internet browser application e.g. HTTP based HTTPS based etc. may transfer files and data via the web server application of the server . The user once the hypervisor and or the management system is are accessed can remotely input the login information. The internet browser application of the client system may then transfer the remotely input login information to the server . One skilled in the art will appreciate however that utilization of an internet browser application is merely exemplary. Suitable alternatives include green screen VNC virtual network computing etc.

The web server application may include any suitable web server programming that enables access and data exchange with the client system . For example the web server application may supply software code associated with the hypervisor and or the management system to the client system in the form of an applet plug in or the like for viewing and or interaction by the user at the client system . Additionally while the above exemplary embodiment of the present invention describes the client system as including the internet browser application and the server as including the web server application one skilled in the art would recognize that any type of monolithic application could be employed using suitable protocols at both the server and the client system that would enable the user to remotely input login information.

The hypervisor represents any partition management code that is responsible for performing multipartitioning functions and services for partitions in the computer system . The hypervisor may be for example a PowerHypervisor which is available from International Business Machines Corporation.

While the hypervisor is shown in as a separate entity in memory the preferred embodiments expressly extend to the hypervisor being implemented within the operating system application software utilities or other types of software within the scope of the preferred embodiments. For example the hypervisor may be a layer of the operating system responsible for performing multipartitioning functions.

The hypervisor may comprise system firmware or computer executable instructions maintained for example as a computer program product stored on a hard disk e.g. on a DASD device .

In another embodiment the hypervisor may be implemented in hardware via logic gates and or other appropriate hardware techniques in lieu of or in addition to a processor based system.

In the preferred embodiments of the present invention the management system includes instructions capable of executing on the processors or statements capable of being interpreted by instructions executing on the processors to perform the functions as further described below with reference to . Also in accordance with the preferred embodiments of the present invention the management system may include instructions capable of executing on processor s of a networked device or statements capable of being interpreted by instructions executing on such processor s of the networked device to perform the functions as further described below with reference to . For example the management system may include instructions that execute on the processor s of the client system shown in or the processor s of the hardware management console shown in .

While the management system is shown in as a separate entity in memory the preferred embodiments expressly extend to the management system being implemented within the hypervisor application software utilities or other types of software within the scope of the preferred embodiments. For example the management system may be a component of the hypervisor .

The management system may comprise system firmware or computer executable instructions maintained for example as a computer program product stored on a hard disk e.g. on a DASD device .

In another embodiment the management system may be implemented in hardware via logic gates and or other appropriate hardware techniques in lieu of or in addition to a processor based system.

Computer system utilizes well known virtual addressing mechanisms that allow the programs of computer system to behave as if they have access to a large single storage entity instead of access to multiple smaller storage entities such as main memory and DASD device . Therefore while data operating system application program s hypervisor management system and web server application are shown to reside in main memory those skilled in the art will recognize that these items are not necessarily all completely contained in main memory at the same time. It should also be noted that the term memory is used herein to generically refer to the entire virtual memory of the computer system .

Operating system is a multitasking operating system known in the industry as IBM i formerly IBM i5 OS however those skilled in the art will appreciate that the spirit and scope of the present invention is not limited to any one operating system. There are many suitable multitasking operating systems such as AIX Linux etc. The operating system which is located in a single partition is preferably designed to interface with open firmware such as partition management firmware e.g. the hypervisor .

Processors may be constructed from one or more microprocessors and or integrated circuits. Processors execute program instructions stored in main memory . Main memory stores programs and data that may be accessed by processors . When computer system starts up processors initially execute the program instructions that make up operating system . Operating system is a sophisticated program that manages the resources of computer system . Some of these resources are processors main memory mass storage interface display interface network interface I O device interface and system bus .

Although computer system is shown to contain four processors and a single system bus those skilled in the art will appreciate that the present invention may be practiced using a computer system that has a different number of processors and or multiple buses. In addition the interfaces that are used in the preferred embodiments each include separate fully programmed microprocessors that are used to off load I O related processing from processors . However those skilled in the art will appreciate that the present invention applies equally to computer systems that simply use I O adapters to perform similar functions.

Mass storage interface is used to connect one or more mass storage devices such as a direct access storage device DASD CD ROM drive DVD ROM drive CD RW drive and the like to computer system . One specific type of mass storage device is a CD ROM drive which may read data from a CD ROM . Another specific type of mass storage device is a readable and writable CD RW drive which may write data to and read data from a CD RW.

Display interface is used to directly connect one or more displays to computer system . These displays which may be non intelligent i.e. dumb terminals or fully programmable workstations are used to allow system administrators and other users to communicate with computer system . Note however that while display interface is provided to support communication with one or more displays computer system does not necessarily require a display because all needed interaction with users and processes may occur via network interface .

Network interface is used to connect other computer systems such as the workstations and or the client systems to computer system across a network . In accordance with the preferred embodiments of the present invention these networked computer systems like the client system may include a computer system on which a web browser program resides by which the hypervisor and or the management system may be accessed.

Also in accordance with the preferred embodiments of the present invention these networked computer systems may include a computer system on which a hardware management console HMC resides. In such HMC managed systems as shown in the management system may be at least partially integrated into or operate in conjunction with the hardware management console.

The present invention applies equally no matter how computer system may be connected to other computer systems such as the workstations and or the client systems regardless of whether the network connection is made using present day analog and or digital techniques or via some networking mechanism of the future. In addition many different network protocols can be used to implement network . These protocols are specialized computer programs that allow computers to communicate across network . TCP IP Transmission Control Protocol Internet Protocol is an example of a suitable network protocol.

At this point it is important to note that while the description above is in the context of a fully functional computer system those skilled in the art will appreciate that the management system as well as the other software type entities described herein may be distributed as an article of manufacture also referred to herein as a computer program product in a variety of forms and the claims extend to all suitable types of computer readable media used to actually carry out the distribution including recordable type media such as floppy disks and CD RWs CD ROMs e.g. CD ROM and DVD ROMs.

Embodiments herein may also be delivered as part of a service engagement with a client corporation nonprofit organization government entity internal organizational structure or the like. These embodiments may include configuring a computer system to perform some or all of the methods described herein and deploying software hardware and web services that implement some or all of the methods described herein.

Operations of the different partitions in the computer system may be controlled through a hardware management console HMC such as the hardware management console shown in . In the embodiment shown in the hardware management console is a separate computer system from which a system administrator for example may perform various functions including creating one or more logical partitions assignment of hardware resources to each logical partition as well as reassignment of resources to different partitions. IBM POWER6 processor based systems for example can be managed by an HMC. Note that the term hardware management console HMC is used herein in a very broad sense to include any system and logical partition management utility that may be used to manage a logically partitioned computer system. Thus as used herein the term HMC refers to any administrative console that communicates with firmware via APIs application programming interfaces . In other embodiments a hardware management console may be installed directly on the system being managed e.g. IBM s Integrated Virtualization Manager VMWare Server .

As noted above in addition to the management system residing in the main memory of the computer system as shown in the management system may reside at least partially in a memory and be executed by one or more processors of the HMC as described further below with reference to .

For example in the HMC managed embodiment shown in the management system resides at least partially in a memory and is executed by one or more processors of a computer system that comprises the hardware management console . The HMC is connected to the multi user computer system and to the other multi user computer systems by a service network .

In a modification of the above described HMC managed embodiment the management system may reside at least partially in memory and be executed by processor s of one or more additional computer systems not shown connected indirectly to the multi user computer system and to the other multi user computer systems through the HMC or other administrative console . For example the management system may run within IBM Systems Director which typically resides on a computer system networked to the HMC . IBM Systems Director is an integrated suite of tools that provides a platform management foundation for managing physical and virtual systems across a multi system environment.

Method begins when a new user initiates logging into a server or other computer system through a client interface by entering a User ID and a password step . For example temporarily referring to the new user may be logging into the computer system through the client system . One skilled in the art will appreciate however that the new user may initiate logging into the server or other computer system though any type of interface. For example the new user may initiate logging into the server though a service interface such as a hardware management console. Also one skilled in the art will appreciate that other types of user information e.g. biometric information may be used by the user to initiate logging into the server in lieu of or in addition to entering a User ID and a password.

An event is created on the client interface and sent to the hypervisor including interface information about the client interface being logged into and user information such as the User ID step . The interface user information sent to the hypervisor is referred to herein as login information . The management system which is running in the hypervisor at least in this example receives this event and then checks to see if there are any other users currently logged into any of the possible client interfaces on the server step . Information about users currently logged into the various client interfaces available on the server both service interfaces and non service interfaces is preferably stored in a list called a surveillance list . The surveillance list may be built and maintained by the hypervisor and or the management system. An illustrative example of such a surveillance list in is described below in Example 1.

If the management system determines that there is no one else logged in i.e. the surveillance list is empty step No the client interface being logged into is informed that there are no conflicts that exist at that point step . The new user is then requested to enter an end time to indicate when she he will be finished using the client interface step . Input of this end time by the new user is optional but the new user is informed that entry of the end time will help subsequent users logging into client interfaces plan system time accordingly if conflicts are detected. The end time if the new user chooses to enter one is added to the surveillance list along with the new user s login information step . Login is now complete step .

One skilled in the art will appreciate that the new user s login information i.e. the interface user information may be added to the surveillance list any time after this information is received in step .

If the management system detects that the surveillance list is not empty step Yes the management system goes through the surveillance list to determine if there are any users logged into service interfaces step . Preferably any service interface in the surveillance list is identified as such directly within the surveillance list. For example in the exemplary surveillance list shown in the Interface ID column identifies the first interface as a service interface i.e. a hardware management console HMC . In an alternative embodiment the management system may additionally check the configuration information stored in the hypervisor to determine whether or not each interface listed in the surveillance list is a service interface. If there are any users logged into service interfaces step Yes the management system will add those users into a list of users that could cause potential conflicts with the new user step . This list which is built by the management system either in step or step discussed below is called a conflict list .

After completing step or if the management system determines there are no users logged into service interfaces step No the management system then checks the surveillance list for any non service interfaces that are logged into and checks the configuration information stored in the hypervisor this configuration information is typically stored in a table known as a LPAR configuration table such as in to see if the client interfaces currently logged into share ownership of any hardware with the client interface being logged into by the new user step . If there are any users currently logged into client interfaces that share ownership with the client interface being logged into by the new user step Yes the management system will add those users to the conflict list step .

On the other hand if there are no users currently logged into client interfaces that share ownership with the client interface being logged into by the new user step No the management system determines if the conflict list is empty step . If the management system determines that the conflict list is empty step Yes the method goes to step described above .

After completing step or if the management system determines that the conflict list is not empty step No the management system sends the conflict list to the client interface logged into by the new user step . The conflict list is then presented to the new user step . For example temporarily referring to the conflict list may be displayed to the new user on a screen of the client system .

In accordance with the preferred embodiments of the present invention the new user can decide to continue logging in despite the conflicts or decide to log in at a later time. To accomplish this the method continues with the management system determining whether the new user decides to continue logging in step . If the new user decides to continue logging in step Yes the method goes to step described above . On the other hand if the new user decides not to log in the login may then be cancelled step . Preferably step cancels the login after giving the new user a chance to make a future calendar entry i.e. a reservation based on available conflict free times during which no conflict exists.

One skilled in the art will appreciate that the method may be tweaked based on the desired outcomes. For example the new user login could simply be rejected if a conflict exists.

In addition the management system may implement various processes to handle various other situations that may arise such as when the new user is tardy in logging off. These processes may be tweaked based on the desired behavior. For example the new user could be automatically kicked off from the client interface when the management system detects that the end time entered while logging in has been reached. Alternatively the management system could provide a warning i.e. that the end time entered while logging in has been reached to the new user along with the most up to date conflict list and let the new user continue to remain logged in irrespective of whether other users are logged in. At the same time the other users could get a notification warning them of this change in the conflict list. If there are no conflicts the new user could be allowed to extend the end time. This in turn would cause the management system to update the surveillance list with the new end time.

There are certain interfaces such as the hardware management console HMC through which multiple computer systems can be managed. Such interfaces usually have a single user name and password that allow access to all the computer systems being managed by the interface. Such interfaces would require special handling by the management system. In one embodiment the HMC would send login information to the hypervisor of each computer system being managed by the HMC as the new user logs into the interface. This would happen in steps and described above of the method . In some cases this may be disadvantageous because the HMC would be added to each system s surveillance list perhaps unnecessarily . In another embodiment a portion of the management system residing in the HMC would query the hypervisor of a particular one of the computer systems being managed by the HMC each time a disruptive system specific action is requested of that computer system from the interface. That system s hypervisor would then return its conflict list if any to the HMC. The user at the HMC could then proceed with the request or choose to create an entry i.e. reservation for a later time to attempt the request then.

Examples 1 and 2 are provided below for the purpose of helping the reader to understand of the present invention. These examples are illustrative and not intended to limit the scope of the present invention.

In accordance with the preferred embodiments of the present invention a management system runs in the hypervisor . As is conventional the hypervisor maintains a LPAR configuration table . In accordance with the preferred embodiments of the present invention the management system maintains a surveillance list and a conflict list . The information stored by the firmware in the LPAR configuration table the surveillance list and the conflict list may reside anywhere in the computer system .

Initially in this first example a user with the User ID Hscroot logs on to a hardware management console HMC which manages computer system at 5 00 am on Nov. 13 2009. As is conventional an Ethernet communication channel is provided between the HMC and the hypervisor on the computer system . The HMC informs the hypervisor that a user Hscroot has logged in. The management system which is running in the hypervisor then checks its surveillance table to see if anyone else is logged in. Assume for purposes of this example that the management system finds the surveillance table is empty. Accordingly the management system notifies the HMC that no one else is currently scheduled on the computer system . The management system then prompts the user Hscroot to specify if she he will be working on the computer system and if so to enter an estimated end time for when she he will be done working on the computer system . In response the user Hscroot enters information into the HMC indicating that she he will be done working on the computer system seven hours from now i.e. 12 00 pm on Nov. 13 2009 and provides a description of the work she he will be performing along with a phone number for who to contact with any questions. The HMC then notifies the management system of the user Hscroot s planned end time description of the work and contact information. The management system then enters a reservation for the user Hscroot into the surveillance list .

Subsequently in this first example at 8 00 am that same day Nov. 13 2009 a different user with the User ID Janedoe logs onto the logical partition Partition  of the computer system through a client system . As is conventional an Ethernet communication channel or other communication network is provided between the client system and the logical partition Partition  on the computer system . The partition Partition  informs the hypervisor that a user Janedoe has logged in. The management system which is running in the hypervisor then checks its surveillance table to see if anyone else is currently logged in to any partitions on the system or management utilities connected to the system and sees the reservation for the user Hscroot three hours ago. Then the management system determines this reservation due to it being made for the HMC which can be used to disrupt the partition s activities could conflict with the new user Janedoe. Consequently the management system builds a conflict list containing an entry corresponding to the user Hscroot. This is the state of the conflict list shown in .

The management system also sends the conflict list to the partition Partition  via the hypervisor using the communication channel . Then the partition Partition  sends the conflict list to the client system for display to the user Janedoe. The user Janedoe reads the description of the conflicting schedule realizes the work being performed on the HMC will not affect the partition Partition  at all and chooses to ignore the conflict. The management system then prompts the user Janedoe to enter an estimated end time for when she will be done working on the computer system . In response the user Janedoe enters information into the client system indicating that she will be done working on the computer system nine hours from now i.e. 5 00 pm on Nov. 13 2009 and provides a description of the work she will be performing. The client system then notifies the partition Partition  which in turn notifies the management system via the hypervisor using communication channel of the user Janedoe s planned end time and description of the work. The management system then enters a reservation for the user Janedoe into the surveillance list . This is the state of the surveillance list shown in

In this example multiple VIOS partitions are being used to virtualize Ethernet storage adapters for client partitions on a server. A System Administrator is performing an upgrade on a VIOS partition VIOS partition id2 which has ten 10 Ethernet cards virtualized across forty 40 client partitions. One of the Ethernet cards Ethernet card C in the VIOS partition id2 needs to be upgraded as a result of the performance improvements that the new card will provide to the client partitions. This Ethernet card is serving seven 7 client partitions partition id5 partition id15 partition id28 partition id69 partition id81 partition id84 and partition id85 .

This is a fairly involved example as there are seven 7 client partitions each with potentially multiple users all of whom need to be involved with the coordination of the upgrade. One mistake could cause a lot of issues for a single or multiple users if the upgrade is performed when critical partition workloads are running on the hardware. It is common practice for partition users to plan for different kinds of outages that occur when normal maintenance is performed for partitions. While such an outage is probably documented for the partition users it is hard for the System Administrator to know about all of these users and to free timing windows on a system that can have upwards of one hundred 100 partitions.

Initially in this second example a partition administrator logs into partion id5 and signs up to have the partition booked for the next three months serving the payroll needs for her his company. At the end of the three months all payroll services will start being handled by a different partition so that this partition can be disruptively upgraded. The partition id5 has no subsequent entries for after the upgrade such entries will be created after the upgrade is completed .

Subsequently in this second example the System Administrator logs into the VIOS partition id2 two months later i.e. two months after the partition administrator logs into partition id5 and signs up to have the partition booked for the next three months . The management system queries the firmware for conflicting calendar information for this VIOS partition. That is the management system checks the surveillance list for conflicting calendar entries i.e. Start time End time of client partitions that use virtual devices associated with the hardware owned by this VIOS partition. The management system checks the firmware s partition configuration tables to determine which pieces of the hardware are owned by this VIOS partition. For all client partitions that show ownership of this hardware as a result of using a virtual device associated with this hardware managed by this VIOS partition in the firmware s partition configuration tables conflicting calendar entries that exist in the surveillance list are collected in a conflict list and returned to the System Administrator logging into this VIOS partition. Parition id5 is one such partition the management system finds.

The System Administrator now knows that partition id5 is being utilized for another month and has similar information about all other partitions affected by the upgrade along with contact information for users who have booked the partitions. Using this data the System Administrator knows if there is a timeframe when the Ethernet card is not being utilized by any of the seven partitions the Ethernet card serves. If there is no timeframe available the System Administrator can contact all the users of the partitions whose contact information were provided by the management system and coordinate a timeframe that works for them. If there is a timeframe available the System Administrator may sign up for reserve the VIOS partition for that timeframe. If anyone tries to log in to one of the client partitions during this reserved timeframe the management system will detect that a service partition owning that hardware used by the client partition has a reservation entry and warn the user that she he may suffer outages during that timeframe.

In accordance with the preferred embodiments of the present invention anyone using any partition on the system is automatically prompted for calendaring information e.g. end time description of the work and or contact info upon login. Hence the calendaring information in the management system is likely to be accurate. Problems arise in the prior art when the user has to go to a separate calendar system and sign up for partition system time. In the prior art if the user chooses not to use the calendar in conventional management systems data may be inaccurate. In conventional management systems the users may even have different calendar systems for different parts of the server instead of a unified calendar system . The System Administrator may not know about or forget to look at these disparate calendar systems.

One skilled in the art will appreciate that many variations are possible within the scope of the present invention. Thus while the present invention has been particularly shown and described with reference to preferred embodiments thereof it will be understood by those skilled in the art that these and other changes in form and details may be made therein without departing from the spirit and scope of the present invention.

