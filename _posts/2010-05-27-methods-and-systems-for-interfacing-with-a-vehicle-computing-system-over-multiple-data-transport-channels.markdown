---

title: Methods and systems for interfacing with a vehicle computing system over multiple data transport channels
abstract: In one or more embodiments, two or more devices may interface with a computing system over multiple communication channels. A connection may be established between a computing system and two or more devices communicating data using different communication protocols. The communication protocol of the two or more devices may be determined and a general transport protocol for communicating data with the two or more devices based on the respective communication protocols may be imposed on the communication protocol of the two or more devices. Data may be communicated with the two or more devices based on the general transport protocol. An event may be performed at the vehicle computing system or the two or more devices based on the data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09094436&OS=09094436&RS=09094436
owner: Ford Global Technologies, LLC
number: 09094436
owner_city: Dearborn
owner_country: US
publication_date: 20100527
---
One or more embodiments relate to an interface for communicating data between a number of devices and a vehicle computing system. The number of devices may communicate data over different communication protocols. In some embodiments the number of devices may be wired or wireless devices.

Various examples of tools exist in the art for facilitating communication between multiple terminals over a communication network.

U.S. Pat. No. 7 602 782 issued to Doviak et al. discloses an apparatus and method for intelligent routing of data between a remote device and a host system. More specifically Doviak et al. provides for transparent communication between a remote or mobile device and a fixed communication host network. A remote network controller that logically resides between the host network and the existing infrastructure s are used to provide communications network contact with one or more remote devices. The remote network controller is connected to the host communication network as a protocol appropriate communications controller so that remote devices are indistinguishable to the host network from the locally attached devices. Each remote device may be provided with an asynchronous serial data interface to communicate with a mobile data controller. The mobile data controller in combination with the remote network controller provides end to end data communication such that incompatible protocols are transparent to the remote device and host communication network. A router may be provided which selects a communications network in accordance with user configured parameters. The router communicates over a plurality of incompatible networks and is capable of using a variety of different protocols. Switching between the plurality of incompatible networks is transparent to the remote device and host communication network.

U.S. Patent Application Publication No. 2006 0150197 to Werner discloses a connection of clients for management of system. Werner discloses generating an instance of a program object for a client system the client system being of a computer platform type the program object being compatible with a plurality of different computer platform types. Werner further discloses connecting the instance of the program object with an interface of a server and managing an application on the server using the instance of the program object.

U.S. Patent Application Publication No. 2006 0156315 to Wood et al. discloses a method computer readable medium and apparatus for providing a graphical user interface in a client server environment. Wood et al. specifically discloses a client program in a client server relationship that receives commands creating a specific implementation of graphical user interface components and receives any data to be displayed in the interface components from the server program. As the end user interacts with the client the client returns events and data to the server for processing. The commands and events constitute a protocol published via an API. The transmission of commands events between the client and server is accomplished without linking the programs. The specific GUI implementation is specified by the server application and revealed to the client only at run time.

One aspect includes a method for interfacing two or more devices and a vehicle computing system. A request to connect with a vehicle computing system may be received from the two or more devices which communicate data using different communication protocols. The communication protocols may include but are not limited to Internet protocols BLUETOOTH protocols proprietary protocols 802.11 protocols and mass storage device protocols.

The connection which may or may not be a simultaneous connection may be established with the two or more devices based on the connection request. The method may further include determining the communication protocol of the two or more devices. A general transport protocol may be imposed on the communication protocol of the two or more devices for communicating data with the two or more devices based on the respective communication protocols. A data exchange may accomplished with the two or more devices based on the general transport protocol. The data may include but is not limited to instructions to operate one or more application programs installed on the two or more devices or instructions for performing the event based on one or more service types. Service types may include but are not limited to a remote procedure call bulk transport or media streaming.

The method may further include performing an event at the vehicle computing system or the two or more devices based on the data.

Another aspect may include a system comprising a data processor which may be configured to connect with two or more devices. The two or more devices may communicate using different communication protocols. The data processor may be further configured to determine the protocol s of the two or more devices. A general protocol for communicating data with the two or more devices may be imposed based on their respective communication protocols. Data may be communicated with the device s for performing an event.

In some embodiments the two or more devices may be configured to listen for a connection request from the data processor. Further the two or more devices may be simultaneously connected with the data processor.

Another aspect includes a computer program product embodied in a computer readable medium for interfacing two or more devices and a vehicle computing system. The computer program product may include instructions for establishing a connection which may or may not be a simultaneous connection with two or more devices which communicate data using different communication protocols. The communication protocol of the two or more devices may be determined and a general transport protocol for communicating data with the two or more devices based on the respective communication protocols may be imposed on the communication protocol of the two or more devices.

The computer program product may further include instructions for communicating the data based on the general transport protocol for performing an event based on the data. An event may include but is not limited to playing media files performing vehicle diagnostics audibly outputting one or more messages confirming an existence of an application session and performing location based services.

In one embodiment the computer program product may include instructions for receiving from the two or more devices a request to connect with the vehicle computing system.

In some embodiments the data may include instructions for performing the event based on one or more service types which have a predefined priority. The computer program product may further instructions for transporting the event instructions based on the service type priority. A service type may include but is not limited to a remote procedure call bulk transport service or a heartbeat.

These and other aspects will be better understood in view of the attached drawings and following detailed description of the invention.

Detailed embodiments of the invention are disclosed herein. However it is to be understood that the disclosed embodiments are merely exemplary of an invention that may be embodied in various and alternative forms. Therefore specific functional details disclosed herein are not to be interpreted as limiting but merely as a representative basis for the claims and or as a representative basis for teaching one skilled in the art to variously employ the present invention.

Devices such as personal computers handheld diagnostic tools cellular phones smartphones personal digital assistants PDA and the like may each include different communication channels for communicating data. Non limiting examples include cellular BLUETOOTH WiFi WiMax infrared IF RF and the like. Some devices such as the iPhone manufactured by THE APPLE CORPORATION may communicate data using proprietary protocols.

Furthermore these devices may have installed on them applications or programs hereinafter referred to as applications for use by a user of the device. These applications may serve a variety of purposes for the user such as correspondence entertainment diagnostics and social networking. A user usually operates these applications locally on the nomadic device. These applications accordingly may be programmed with instructions for receiving inputs and operation commands from the local nomadic device in order to operate the application s .

In some instances however a user can operate these applications remotely. As one example a user may operate these applications from a vehicle infotainment system. One example of such a vehicle infotainment system is SYNC from THE FORD MOTOR COMPANY. In such scenarios the application s may be installed on the nomadic device but the operation of the application s is performed through the vehicle computing system. However the application s generally are not programmed to operate through the remote terminal such as the vehicle computing system. Thus a user may not be able to obtain functionality of these applications without an ability to interface with the functionality and controls of the remote terminal.

A vehicle enabled with a vehicle based computing system may contain a visual front end interface located in the vehicle. The user may also be able to interact with the interface if it is provided for example with a touch sensitive screen. In another illustrative embodiment the interaction occurs through button presses audible speech and speech synthesis.

In the illustrative embodiment 1 shown in a processor controls at least some portion of the operation of the vehicle based computing system. Provided within the vehicle the processor allows onboard processing of commands and routines. Further the processor is connected to both non persistent and persistent storage . In this illustrative embodiment the non persistent storage is random access memory RAM and the persistent storage is a hard disk drive HDD or flash memory.

The processor is also provided with a number of different inputs allowing the user to interface with the processor. In this illustrative embodiment a microphone an auxiliary input for input a USB input a GPS input and a BLUETOOTH input are all provided. An input selector is also provided to allow a user to swap between various inputs. Input to both the microphone and the auxiliary connector is converted from analog to digital by a converter before being passed to the processor.

Outputs to the system can include but are not limited to a visual display and a speaker or stereo system output. The speaker is connected to an amplifier and receives its signal from the processor through a digital to analog converter . Output can also be made to a remote BLUETOOTH device such as PND or a USB device such as vehicle navigation device along the bi directional data streams shown at and respectively.

In one illustrative embodiment the system uses the BLUETOOTH transceiver to communicate with a user s nomadic device e.g. cell phone smart phone PDA etc. . The nomadic device can then be used to communicate with a network outside the vehicle through for example communication with a cellular tower . In some embodiments tower may be a WiFi access point.

Exemplary communication between the nomadic device and the BLUETOOTH Trasceiver is represented by signal .

Pairing a nomadic device and the BLUETOOTH transceiver can be instructed through a button or similar input. Accordingly the CPU is instructed that the onboard BLUETOOTH transceiver will be paired with a BLUETOOTH transceiver in a nomadic device.

Data may be communicated between CPU and network utilizing for example a data plan data over voice or DTMF tones associated with nomadic device . Alternatively it may be desirable to include an onboard modem having antenna in order to communicate data between CPU and network over the voice band. The nomadic device can then be used to communicate with a network outside the vehicle through for example communication with a cellular tower . In some embodiments the modem may establish communication with the tower for communicating with network . As a non limiting example modem may be a USB cellular modem and communication may be cellular communication.

In one illustrative embodiment the processor is provided with an operating system including an API to communicate with modem application software. The modem application software may access an embedded module or firmware on the BLUETOOTH transceiver to complete wireless communication with a remote BLUETOOTH transceiver such as that found in a nomadic device .

In another embodiment nomadic device includes a modem for voice band or broadband data communication. In the data over voice embodiment a technique known as frequency division multiplexing may be implemented when the owner of the nomadic device can talk over the device while data is being transferred. At other times when the owner is not using the device the data transfer can use the whole bandwidth 300 Hz to 3.4 kHz in one example .

If the user has a data plan associated with the nomadic device it is possible that the data plan allows for broad band transmission and the system could use a much wider bandwidth speeding up data transfer . In still another embodiment nomadic device is replaced with a cellular communication device e.g. and without limitation modem that is installed to vehicle . In yet another embodiment the ND may be a wireless local area network LAN device capable of communication over for example and without limitation an 802.11 network including but not limited to WiFi and WiMax and Long Term Evolution LTE networks.

In one embodiment incoming data can be passed through the nomadic device via a data over voice or data plan through the onboard BLUETOOTH transceiver and into the vehicle s internal processor . In the case of certain temporary data for example the data can be stored on the HDD or other storage media until such time as the data is no longer needed.

Additional sources that may interface with the vehicle include a personal navigation device having for example a USB connection and or an antenna or a vehicle navigation device having a USB or other connection an onboard GPS device or remote navigation system not shown having connectivity to network .

Further the CPU could be in communication with a variety of other auxiliary devices . These devices can be connected through a wireless or wired connection. Also or alternatively the CPU could be connected to a vehicle based wireless router using for example a WiFi transceiver. This could allow the CPU to connect to remote networks in range of the local router .

It will be appreciated however that the architecture of and associated description is non limiting. For example and without limitation operation of the applications may additionally or alternatively occur through the devices . For example and without limitation the inputs outputs and commands may occur at the device 

It will be further appreciated the various embodiments described with respect to may be used additionally or alternatively for telematics support. As a non limiting example the various embodiments can be used when exchanging vehicle health report data. As another non limiting example the various embodiments can be used when exchanging licensing data for an application . As another non limiting example the various embodiments may be used for remote door unlock.

Referring now to there may be one or more devices that may interface with the VCS . However for purposes of illustration and clarity is shown with multiple devices . Non limiting examples of such devices may include cellular phones handheld diagnostic tools personal computers smartphones personal digital assistants PDA media devices e.g. and without limitation Mp3 players portable memory devices e.g. and without limitation USB thumbdrives memory cards sticks SLOTMUSIC cards and other suitable memory devices and or adapters for receiving these memory devices and other devices that may be now or hereafter known.

The applications installed on the devices may be factory installed on the device or installed by a user after purchase of the device . For example and without limitation the user may install the application from a computer readable medium e.g. a CD or thumdrive or download the application over the Internet e.g. from a third party site . A user may include but is not limited to a consumer a vehicle dealership and individuals employed by the dealership or a service shop and individuals employed by the serve shop . Non limiting examples of applications that may be installed to the devices may include vehicle diagnostic applications communication applications e.g. and without limitation electronic mail VOIP and text messages entertainment applications e.g. and without limitation multi media streaming videos music games etc. social networking applications location based applications personal advertisement based applications and others.

Each device may communicate data through one or more communication channels using one or more communication protocols . Non limiting examples of such communication protocols may include BLUETOOTH protocols 802.11 protocols TCP IP proprietary protocols such as without limitation APPLE CORPORATION s iAP protocol mass storage protocols e.g. USB protocols USB based networking protocols e.g. and without limitation USE Serial or USB RNDIS and other protocols now and hereafter known. It will be appreciated that devices may be capable of communicating data using multiple communication protocols e.g. and without limitation BLUETOOTH and 802.11 . This relationship between the VCS and the devices may be referred to as a network. In some embodiments the relationship between the devices and the VCS may create an ad hoc network.

It will be appreciated that while the various embodiments are described with respect to communication with a computing system in an automobile there may be other environments in which the network may be implemented. Non limiting examples of such environments include a home an office a school an airplane a train a bus and other like environments.

Referring back to with respect to BLUETOOTH ready devices each device may also include one or more BLUETOOTH profiles that define with which devices the BLUETOOTH ready device may communicate. Profile may be standard profiles such as A2DP HFP SDAP and HSP or customized profiles. As a non limiting example the BLUETOOTH capable device may include the SDAP profile to discover which services may be available on the VCS . In some embodiments the discovery process may be based on an SDAP record having a universally unique identifier UUID registered for the SDAP profile.

Devices may establish a connection with the VCS using a communication channel described above. In one embodiment the devices may listen for a connection request from the VCS . In other embodiments the VCS may listen for connection requests from the devices . When a connection is established a data transport manager which may or may not be implemented to CPU of the VCS as software may receive the messages data communicated from the one or more applications via device and process the messages data for further transmission.

In some embodiments the devices may be simultaneously connected to the VCS . In other embodiments the device may establish individual and separate i.e. not simultaneous connections.

In one embodiment the transport manager may transmit this data to the security manager . Accordingly the transport manager may facilitate the communication between the device and the security manager . Further details of the security manager will be described below. In some embodiments the transport manager may also communicate with a data manager not shown which may communicate the data to the security manager. The data manager may store system data available between applications in a database structure.

Non limiting examples of the duties of the transport manager may include abstracting i.e. standardizing the communication protocols and passing the following non limiting information data transportation state changes discovered applications and start requests. The transport manager may accomplish these duties as the interface for connecting to a device with a given name over a given communication channel . More specifically transport manager may send and or receive data over an existing session. A session may be a logical connection between an application on device and the VCS . The transport manager may also provide notifications to the protocol module e.g. and without limitation a connection to device . In one embodiment notifications may be identifying information defining an occurrence triggering the notification. Further the transport manager may maintain various connection mappings including a mapping between connections and all active sessions over a given connection and a mapping between connections and corresponding communication channels . A connection may be a connection between the transport layers of the devices and the VCS . Thus the transport manager may wrap transport specific details from the communication channels with the data transport protocol described below . The transport manager may also maintain information about the connected device e.g. the device name and information about the communication channels e.g. the transport name . Accordingly transport manager may facilitate the exchange of user instructions between the applications and the VCS over any one of the communication protocols used to communicate data to from the device 

As described above the transport manager may facilitate the discovery of applications and or devices . As a non limiting example discovery may be accomplished using zero configuration networking. In some embodiments however discovery may be specific to each communication protocol e.g. and without limitation using service discovery protocol SDP for BLUETOOTH devices .

In one embodiment the data transport manager may include a data transport plug in that is implemented on the CPU . The data transport plug in may determined and manage the connection for each communication protocol . For example and without limitation a plug in may exist for proprietary protocols BLUETOOTH protocols 802.11 protocols and the like. In some embodiments the plug in may be implemented as a dynamic link library DLL . Accordingly capabilities for current and new communication channels may be provided. The plug in may be implemented by an OEM or by third party developers such as Wipro Technologies .

The data transport plug in may provide an interface for connecting to a device . In one embodiment the plug in may wait for the incoming connections from the device . The connection established by the plug in may permit data to be sent and or received over an existing connection as defined above . The interface may be independent of the underlying communication transport protocol . In some embodiments the plug in may provide notify the transport manager of occurrences e.g. and without limitation a connection based on information it receives. In one embodiment notifications may be identifying information defining the occurrence. In further embodiments the plug in may buffer data received over a transport connection.

As described above the transport manager may send and or receive data that is transmitted over an existing session as defined above . In one embodiment the messages may be received sent by a protocol module which may be in communication with the transport manager . The protocol module may perform a number of tasks in facilitating a user s operation of the applications from the VCS . Some non limiting tasks include 1 protocol module initialization un initialization 2 starting ending a session defined above over a given connection defined above 3 adding removing new and existing services defined below and 4 sending receiving data over an existing session defined above . In one embodiment the protocol module may also provide notifications. These notifications may be triggered when a data packet is received by the protocol module e.g. from the transport manager .

The protocol module may determine the type of service that is requested from the applications . A service may be a heartbeat HB a remote procedure call RPC or a bulk service. Other non limiting services may include media streaming use of application specific transport protocols e.g. applications may have specific domain protocols use of other protocols such as HTTP FTP IRC SOAP and IMAP and other suitable service types. More generally a service may indicate the type of action an application may be requesting. In one embodiment each service type may be maintained in a queue at the protocol module and transmitted according to a transmission pattern. In one non limiting example this transmission pattern may be a first in first out FIFO transmission pattern.

Additionally or alternatively the protocol module may assign each service type a priority. Thus a service type with a higher priority may be transmitted before a service type with a lower priority. As a non limiting example a heartbeat service may have the lowest priority an RPC may have an intermediate priority and a bulk transfer may have the highest priority. It will be appreciated that other priority schemes may be used without departing from the scope and spirit of the various embodiments.

In one embodiment the protocol module may alternatively or additionally periodically send and or listen for heartbeat messages for each active session. When listening for heartbeat messages e.g. from devices the protocol module may listen for a heartbeat for a predetermined time period and or for a predetermined number of times. If a heartbeat is not received the protocol module may close the session and may transmit a status notification to the application . Furthermore each heartbeat may span a predetermined time period e.g. and without limitation 5 seconds .

The protocol module may also segment messages that exceed a particular payload threshold. The transport plug in may have a limit to the amount of payload it can receive. This may be referred to as a maximum transmission unit MTU . Accordingly the protocol may segment the incoming message and transmit the messages in segmented form in order to comply with the transport plug in s MTU rules. On return the protocol module may also re assemble the segmented messages prior to transmitting a message to the application . In one embodiment the application may only receive reassembled messages. Segmentation may also provide for increased performance of the system by providing for interleaving of the data. In some embodiments there may be a limit on the number of interleaved interactions. illustrate non limiting examples of an un segmented data exchange and a segmented data exchange 

The protocol may be divided into two layers e.g. a higher layer and a lower layer . A higher layer may contain the function calls required to accomplish device communication and system control flow. A lower layer may provide the basic communication functions. This lower layer may be agnostic of the hardware and system details.

Further details of the interaction between the various components of the system will be described with respect to . As described above the one or more messages or data packets received from the application as illustrated by arrow may be transmitted according to a data transport protocol. This data transport protocol may be transport agnostic. In this way the data transport protocol may be a dynamic protocol such that it may support expandability without significant or any changes to its architecture. Thus instructions i.e. data from the applications may be transported via the data transport protocol regardless of which of the communications protocols i.e. both present and future communication protocols the device uses for transporting data.

For example and without limitation one device may operate application using BLUETOOTH e.g. using the Radio Frequency Communication RFComm and Logical Link Control and Adaptation L2CAP protocols while another device may operate applications using a propriety protocol such as APPLE S iAP . The data transport protocol facilitates operation of the applications on the respective devices from VCS without regard to the data communication channel used by each device. From the perspective of a user the application on a device may be used seamlessly. From the perspective of a developer of the application the application does not need to be individually developed based on the differing communication protocols 

Furthermore the data transport protocol may be bandwidth and latency neutral. Thus in this embodiment the protocol does not make assumptions regarding the speed of the data connection or latency delays from the applications . In some embodiments a lowest common denominator of the communication channels may govern the interaction. The lowest common denominator may be relative. For example BLUETOOTH is limited to approximately 700 kbs throughput compared with WiFi which can get approximately 10 20 mbs throughput.

In one embodiment the data transport protocol may incorporate generic commands. In such an embodiment specific functionality for interacting with the VCS such as commands specific to the VCS may not be programmed to the protocol. Rather general data transport abstractions may be provided between the VCS and the application 

As illustrated in some aspects of the data exchange may be unidirectional e.g. as represented by data flow arrow . Additionally or alternatively some aspects may be bidirectional e.g. as represented by data flow arrow . However it will be appreciated that the disclosure and arrangement of may be modified or re arranged to best fit a particular implementation of the various embodiments of the invention.

An application identifier AppID session information Session a service type ServType and application data may be transmitted from application arrow . Application data may include but is not limited to the user instructions requests e.g. and without limitation correlation ID to tie a request to a response commands to be executed events to be fired and status return codes and application scripts e.g. and without limitation which may include the boundaries defining what resources of the VCS the application may use . The application data may also include icons sound files and graphics. From the vehicle the application data may include but is not limited to sound captures and vehicle diagnostic captures. It should be understood that the make up of the application data is open ended and non limiting such that it may be added to and otherwise modified.

The AppID may be a unique ID that is associated with an application . In some embodiments it may be a numeric ID a user friendly description an icon and the like. The AppID may define that the applications are operable with the VCS . Furthermore once a session is established the AppID may be used to identify the applications to the user in the vehicle e.g. at display .

Some of this data may be included in the data transport protocol. For example and without limitation the service type e.g. and without limitation RPC or bulk may comprise at least one byte of the data protocol.

Additionally a session ID identifying the session may comprise one or more bytes of the data protocol. The data from the applications may be transmitted upon activation or during operation of the applications . Table 1 below provides definitions for this data.

Additional content of the data transport protocol may include a frame type e.g. and without limitation a control frame single frame first frame or consecutive frame frame data which may be based on the frame type a version number of the protocol a compression flag i.e. the presence of compressed data an algorithm used for compression and the data size which may be based on the frame type . This data may each comprise one or more bytes of the data transport protocol.

As further illustrated in other data may be exchanged between the applications and the transport plug in . Various commands may be transmitted from the applications to the transport manager . Non limiting examples of some of these commands are provided in Table 1. The AppID which may or may not be contained within a separate data packet a protocol header for the data transport protocol and application data e.g. user instructions requests application scripts etc. may also be transmitted to the transport manager data flow arrow . The same information may be returned e.g. when the operation has been performed at the VCS to the data transport protocol module data flow arrow .

The transport manager may also submit to the protocol module transport properties data flow arrow . Optionally a transport status may be received from the transport plug in data flow arrow and transmitted to the protocol module data flow arrow . The transport properties and transport status are described in Table 1. The transport manager may also transmit to and receive from the transport plug in the protocol header PH and application data data flow arrow . The transport plug in may generate a transport header TH and transmit it with the PH and the application data data flow arrow . In one embodiment the TH may be an optional header that holds surplus data which the data transport protocol cannot hold. Data may be considered surplus based on data size requirements dictated by the underlying communication protocol . This data may be transmitted to the security manager .

Referring back to the security manager may receive data from the transport manager to ensure that application specific policies and or default security policies are being enforced. In this way applications may not obtain greater access to the resources of VCS than is required by the applications . Further based on the security policies of the security manager each application may be confined to operate within its allowance parameters. In one embodiment the security policy enforcement may be viewed as a sandbox environment.

By way of example if a user requests to operate a music program e.g. PANDORA from a device the security manager may determine the use constraints i.e. boundaries with respect to VCS resources of the music program based on the computer readable instructions e.g. application scripts from the application . More specifically the constraints may state that the music program may have access to graphics and audio but not vehicle diagnostics. Accordingly the constraints may be based on the particular function of the application.

Accordingly the security manager may determine which resources are being requested by an application and block out access to other resources. Further it may assess the policies defined for each incoming request from an application to further restrict its access for the resource to which it has access.

In one embodiment access to the VCS resources e.g. vehicle controls and vehicle modules may be accomplished through application programming interfaces APIs installed on the VCS . These APIs may be developed by the vehicle OEM. In one embodiment the API s may be programmed as DLL s and programmed in the C or C programming languages. Furthermore each API may include its own set of security parameters so that each can enforce unique policy restrictions.

Non limiting examples of vehicle controls may include text to speech TTS functionality speech to text STT functionality voice controls button controls e.g. steering wheel button controls and or center stack button controls and touchscreen button controls. Operation on one or more vehicle modules may be accomplished in response to the use of the one or more vehicle controls . Data may be transmitted between the vehicle controls and the vehicle modules over communication link . In one embodiment communication link may be a vehicle network . Non limiting examples of vehicle modules include powertrain control modules PCM body control modules BCM ABS control modules and the like. In additional or alternative embodiments data may be transmitted to other vehicle modules for audible textual and or graphical output. These may include but are not limited to one or more displays including but not limited to display cluster screen displays not shown or rear entertainment displays not shown speakers or other like output modules in vehicle .

The APIs may be OEM developed APIs third party developed APIs and or open APIs. As is known in the art open APIs are APIs that permit interconnectivity between websites e.g. social networking websites . Non limiting examples of APIs and their non limiting functions that may be installed on the VCS are listed in Table 2 below.

As described above in one embodiment this interaction may occur in an ad hoc network environment. The devices may search for devices with which to connect block . In this case the device may the VCS . The search may be specific to the device s communication channel . For example and without limitation a BLUETOOTH device may search for the name of the VCS e.g. SYNC on the BLUETOOTH network. This may be performed at the pairing process. As another example a WiFi enabled device may search for a predefined Internet Protocol IP address. The device may transmit a connection request block to the VCS . VCS may wait for the connection request from the device block .

Alternatively the VCS may search for devices to generate a connection. In this embodiment the devices may listen for a connection request from the VCS .

Data may be exchanged over the established connection. The channel over which the connection request is transmitted may depend on the communication channel utilized by the device . As a non limiting example a BLUETOOTH device may publish a SDP record for a SPP channel over to which to communicate data. As another non limiting example a WiFi device may transmit the connection request block to a specific port from which the VCS may listen for the incoming connection request and once connected over which the data may be communicated.

After a connection is made a session i.e. application level connection may commence at the device block . The VCS may wait for the session request block and accept the session block . A session may then be generated. Furthermore the VCS may begin a new service type for interacting with the application over the session. In one embodiment multiple sessions may be multiplexed over the same device level connection.

As illustrated in blocks and respectively the application and the VCS may exchange capabilities. These capabilities may define the resources that the VCS may permit the application to use. From the application perspective the capabilities may define the general capabilities of the application . As a non limiting example the capabilities that may be exchanged from the VCS may include language support display type and GPS support. Other non limiting examples may include capabilities for certain functionality and a version level of the VCS . Non limiting examples of capabilities that may be exchanged by the application may include the capability to support GPS vehicle data and media applications. Application capabilities may also include the VCS version that it supports. In one embodiment the VCS may also publish its capabilities to other device that may be in the network block .

The device and the VCS may send and receive data block and block . The data may be exchanged between the device and the VCS as RPCs or bulk data. It should be understood that manner of data exchange is an example and other methods of data exchange may be utilized without departing from the spirit and scope of the various embodiments.

As illustrated in blocks and respectively the device and the VCS may complete or terminate a session. The session s may terminate at any time during the data exchange process.

In block the message may be added to a queue corresponding to the service type identified from the message transmitted from the application . In one embodiment a session heartbeat timer may be triggered or activated to test that an active session is present block . As illustrated in block the status of the session based on the heartbeat may be returned.

As other non limiting example the priority value may only define a single priority value or a group of the possible priority values e.g. which service is given maximum priority and which service is given lowest priority .

As illustrated in block a determination may be made whether a queue exists for any of the services. Each service may have its own queue. In other embodiments the different services may be arranged together in a queue e.g. RPC and bulk service may be in one queue . If the queue is empty a further determination may be made whether any services are present block . If so the service having the next priority is examined to determine the status of its queue block . The status of the service queue may be determined block . If another service does not exist the process may be suspended block .

If a service is included in the queue the message from the queue may be retrieved block . In one embodiment the retrieval may be on a FIFO basis. Once the message is retrieved the message may be sent block . As a non limiting example of this priority scheme several HB and or RPC message may be sent while a bulk transport file is running.

While exemplary embodiments are illustrated and described above it is not intended that these embodiments illustrate and describe all possibilities. Rather the words used in the specification are words of description rather than limitation and it is understood that various changes may be made without departing from the spirit and scope of the invention.

