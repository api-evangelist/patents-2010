---

title: Erasure coding and redundant replication
abstract: Disclosed are various embodiments for employing an erasure coding storage scheme and a redundant replication storage scheme in a data storage system. Data objects that are greater than a size threshold and accessed less frequently than an access threshold are stored in an erasure coding scheme, while data objects that are sized less than a size threshold or accessed more often than an access threshold are stored in a redundant replication storage scheme.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08504535&OS=08504535&RS=08504535
owner: Amazon Technologies, Inc.
number: 08504535
owner_city: Reno
owner_country: US
publication_date: 20101220
---
Various methods are employed to increase data durability of data in a relational database management system a non relational data storage system or other distributed data storage system or distributed database. In large scale distributed data storage systems redundant replication where multiple copies of a data object are stored in multiple nodes of a distributed data storage system which can also be disparately located across multiple data centers can be employed to increase data durability. The storage costs of employing a redundant replication scheme as the amount and number of data objects in the distributed data storage system grows can be quite high.

Embodiments of the present disclosure provide a data storage system in which data objects can be stored according to various storage schemes that increase data durability. As can be appreciated a redundant replication storage scheme involves the storage of multiple copies of a data object across various nodes to improve reliability of the data storage system. In such a scenario in the event of the failure of one of the nodes in a data storage system a copy of the data object can be retrieved from another node. In a data storage system housing large amounts of data exclusive use of such a storage scheme can result in high physical storage costs as the capacity of nodes must be such that each can house the entirety of the data objects in the data storage scheme.

An erasure coding storage scheme can reduce storage costs as such a scheme involves splitting data objects into multiple shards or fragments that are each sized less than the size of a data object encoded in the erasure coding scheme and storing a subset of the shards in each of the nodes of the data storage system. In some embodiments a total size of the multiple shards or fragments is greater than or equal to the size of a data object that is encoded in an erasure coding scheme. As one example each node can store one of the shards. Accordingly as can be appreciated in an erasure coding scheme the data object then can be reconstructed from less than all of these shards. However in order to retrieve the data object from the data storage system the CPU and I O operations needed to reconstruct a data object in this fashion can be higher relative to retrieval of a data object stored in a redundant replication storage scheme. Therefore embodiments of the disclosure can store various data objects in varying storage schemes according to various factors that balance storage costs as well as computational costs of retrieval of the data objects.

With reference to shown is a data storage system comprising a plurality of data store nodes and at least one computing device according to an embodiment of the present disclosure. In one example of a data storage system according to an embodiment of the disclosure there can be any number N of data store nodes that house data objects that are accessible via a computing device executing a data storage application . It is understood that data store nodes in a data storage system may be disparately located across various data centers and or networks to increase reliability disaster recovery capability latency and or other considerations as can be appreciated. In one embodiment the data store nodes are in data communication with one or more computing devices as well as each other over an appropriate network. The computing device can in turn be in communication with one or more clients over the network. Such a network may comprise for example the Internet intranets wide area networks WANs local area networks LANs wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing device may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience the computing device is referred to herein in the singular. Even though the computing device is referred to in the singular it is understood that a plurality of computing devices may be employed in the various arrangements as described above. Additionally the data store nodes can also be implemented in a computing device as described above.

Various applications and or other functionality may be executed in the computing device according to various embodiments. The components executed on the computing device for example include a data storage application and other applications services processes systems engines or functionality not discussed in detail herein. The data storage application is executed to manage access and storage to data objects stored in a data storage system that also includes the various data store nodes . The data storage application can receive requests from clients to store modify and or retrieve data objects from the data storage systems. As will be described in further detail herein these data objects can be stored across the various data store nodes in various encoding schemes.

The computing device can maintain a data object index that can maintain information about regarding data objects stored in the data storage system across the various data store nodes . The index can include for example a location in the data store nodes of data objects a size an encoding scheme of the data object as it is stored in the data storage system and other information. In some embodiments the index can also include other information regarding data objects depending upon the implementation of a data storage system. For example the index can include a timestamp that reveals when a data object was created accessed modified etc. In other words the index can include any information about data objects and or fragments or shards of a data object stored in the data storage system that facilitate storage and retrieval of data objects in the data storage system.

The computing device can also maintain a log that can record a history of activity regarding data objects stored in the data storage system. In some embodiments the log can an access log that records a history of accesses of the data objects. In other words the data storage application can record each time a data object is accessed by a client in the log . The data storage application can record other information in the log as can be appreciated such as information about when an object is created modified or other historical data about data objects as can be appreciated.

Depending upon an implementation of a data storage system according to an embodiment of this disclosure information about data objects in the data storage system can be stored in either the index the log or both. As one example the data storage application can store a most recent access of a data object in the index in an entry associated with the data object while the log can store a record of each time a data object is accessed. Additionally in one embodiment the computing device can maintain the index in memory so that the index can be quickly retrieved and or manipulated and data objects can be quickly retrieved from the various data store nodes . In other words the index can be maintained in memory to improve performance of the data storage system. Alternatively the log can be stored and or maintained in a data store solid state storage system hard disk drive or other storage system as the data storage application may not need to quickly access the log for performance reasons and the amount of data stored in the log may render maintaining the log in memory prohibitively impractical.

However other variations of an implementation of the computing device as it pertains to the arrangement of data in an index and or log should be appreciated by a person of ordinary skill in the art. As one example in one embodiment of a data storage system the index may only maintain a storage location among the data store nodes of a data object while other data regarding the object such as an encoding scheme and timestamp can be stored in the log . In other embodiments a data storage system may store all relevant information about data objects in a log and forego the use of an index altogether. Other variations should be appreciated and the implementation discussed above is but one example given for illustrative purposes only.

The components executed on the data store nodes for example include a data store server and other applications services processes systems engines or functionality not discussed in detail herein. The data store server can be in communication with the data storage application and facilitate storage and or retrieval of data to data objects stored in a data store node . The data store server can receive requests from the data storage application to store modify and or retrieve data objects in a data store node that is a part of a data storage system. A data store node can also include a data store in which data objects can be stored. As will be discussed herein in some embodiments a copy of a data object can be stored in the data store as can fragments or shards of a data object.

The client is representative of a plurality of client devices that may be in communication with the computing device over a network. The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer a server computer a cloud computing resource a grid computing resource or other devices or systems with like capability. The client may be configured to execute various applications such as a data store client application and or other applications. The data store client application may be executed in a client to facilitate interaction with the data storage application . In one embodiment the data store client application may be configured for example to access and render network pages such as web pages or other network content served up by the computing device and or other servers for the purpose of interfacing with the data storage application .

In various embodiments the data store client application may comprise a thin client application a thick client application or another type of client application. Some embodiments may include a graphical user interface and or a command line interface. In some embodiments the client can be configured to interact with a data storage system provided by the computing devices as well as the data store nodes . . . N via an application programming interface API provided by the data storage application executed in a computing device .

Although the data store client application is described as executed in a client it is understood that the client may correspond to a server computer that processes business logic generates network pages and or performs other tasks. Thus although requests to store modify and or retrieve a data object in the data storage system can be initiated by a user through a user interface provided by a data store client application and or the data storage application such a request may also be generated automatically by business logic applications workflow engines content servers application servers and or other applications.

The data store client application may correspond to a portion of another application such as for example a module a library etc. in various embodiments. A request to access the data storage system may be sent over a network to the data storage application using hypertext transfer protocol HTTP simple object access protocol SOAP remote procedure call RPC remote method invocation RMI a proprietary protocol and or other protocols.

Next a general description of the operation of the various components of a data storage system according to an embodiment of the disclosure is provided. illustrates an example of a data object being stored in a data storage system facilitated by the computing device and the data store nodes . . . N. In the depicted example the data object is stored in the data storage system in a redundant replication storage scheme across the various data store nodes . Accordingly in one example a data object can be submitted by a client to the data storage application for storage in the data storage system. The data storage application can then facilitate storage of a data object copy . . . N in the various data store nodes . . . N.

As described above such a redundant scheme can provide increased data durability as the data store nodes can be disparately located among multiple server power supplies server cabinets data centers geographic locations and the like. However exclusive use of a redundant replication storage scheme results in the need a storage capacity in each of the data store nodes that is at least a factor of N greater than the total size of the data objects stored in the data storage system.

Upon storage of the data object in the data store nodes . . . N of the data storage system the data storage application can index the location of the data object copy . . . N in the various data store nodes . . . N in the index . In one embodiment the data storage application can generate a unique identifier associated with the data object that is stored in the index in an entry associated with the data object in the index . Accordingly a data store server associated with a data store node can retrieve a data object copy from the data store using this unique identifier. In one example the data store server can maintain a location in the data store associated with a unique identifier associated with the data object and the data store server can retrieve a data object copy from its location in the data store when requested by the data storage application . Additionally the data storage application can record any requests to access the data object in the log .

Reference is now made to which illustrates how the data object can be retrieved from or accessed in the data storage system. Assuming the data store node has failed in some way because the data object was stored in a redundant replication storage scheme among the data store nodes . . . N the data storage application can respond to a request from a client to retrieve the data object by retrieving a data object copy from any of the other data store nodes . . . N. In the depicted example the data storage application can retrieve a data object copy from the data store node

Reference is now made to which depicts an example of storage of a data object using an erasure encoding storage scheme. In the depicted example the data storage application can receive a data object from a client for storage in the data storage system. Accordingly to implement an erasure coding algorithm on the data object the data storage application can split the data object into a first plurality of shards or fragments. The data storage application can then generate additional shards or fragments from the first plurality of shards or fragments as a part of an erasure coding algorithm. The data storage application can then store a subset of these data object shards . . . N which are sized less than the size of the original data object in the data store nodes . In one example the data storage application can store one shard in each of the data store nodes . . . N.

Stated another way in one example the data storage application can split the data object into k shards which are sized to the extent possible proportionally to the size of the data object . In other words the size of each of the k shards can be expressed as approximately 1 k of the size of the data object . Accordingly from these k shards the data storage application can generate an additional n k shards of a size that is similar to the first k shards resulting in a total of n data object shards . . . N associated with the data object . Accordingly one of the n data object shards can be stored in each of the data store nodes . . . N. Therefore the amount of data storage needed in the data storage system to store the n data object shards can be expressed as approximately n k S where S is the size of the data object . Additionally by employing an erasure coding algorithm the data storage application can recover the original data object using any k of the n shards meaning the data object is durably stored until more than n k data store nodes experience a failure.

In one example an erasure coding scheme where n is twelve and k is six which means that in order to store in the data object among the data store nodes a total storage space required in the data storage system is twice the original size of the data object. Additionally the data is durably stored in the data storage system until seven of the data store nodes experience failure. In contrast to store the same data object in a redundant replication storage scheme across only three data store nodes the total storage space required in the data storage system is three times the original size of the data object .

The data storage application can index a location in the data store nodes . . . N in the index so that the data object can be reconstructed and retrieved on behalf of a requesting client as well as log any requests to access the data object in the log .

Reference is now made to which illustrates retrieval of a data object from the data storage application . Assuming a failure of one or more data stores nodes upon receiving a request from a client to retrieve a data object the data storage application can reconstruct the data object from a subset of the data object shards stored in the remaining data store nodes . As can be appreciated reconstructing a data object by employing an erasure coding algorithm can be computationally intensive relative to the a redundant replication storage scheme. Additionally reconstructing a data object can also require more I O operations as a plurality of shards must be retrieved from the data store nodes in a data storage system in order to reconstruct the data object . Therefore in some embodiments although employing an erasure coding scheme can reduce the overall storage requirements to achieve a desired data durability retrieving a data object stored in an erasure coding storage scheme can result in higher relative latency due to the need to reconstruct the data object from a plurality of data object shards .

Accordingly embodiments of the present disclosure can store data objects using a mix of redundant replication and erasure coding to achieve a desired balance between these storage and performance considerations. In some data storage systems a large percentage of the overall storage capacity of the data storage system is consumed by relatively few large objects. Additionally in some data storage systems a large percentage of the most frequently accessed data storage systems comprise data objects that are relatively small in size. Accordingly one way to achieve a balance between is to employ an erasure coding storage scheme for those data objects that are relatively large and are rarely accessed. In this way the total amount of storage space within the data storage system that is devoted to storage of these data objects can be reduced and the performance degradation of the data storage system due to the need to reconstruct the data object using an erasure coding algorithm when the data object is retrieved is acceptable because the data object is rarely accessed.

Additionally it can be determined that the performance penalty of accessing a small data object stored in an erasure coding storage scheme that is also rarely accessed may be undesirable as storing a small object in a redundant replication scheme consumes relatively little storage capacity even though the data object is rarely accessed. Because in many data storage systems there can be a large number of small data objects stored therein storing small data objects in an erasure coding scheme can result in an unacceptably large index as each of the data object shards associated with the small data object is indexed in the index so that the data storage application can retrieve a shard to reconstruct the data object.

As one illustrative non limiting example in some data storage systems data objects that are sized less than 128 kilobytes kb can represent 90 of the total number of data objects stored in the data storage system whereas these same objects can represent less than 10 of the total storage capacity consumed in the data storage system. Additionally as another illustrative non limiting example these objects that are sized less than 128 kb can represent more than 90 of the data objects that are accessed by clients . In other words these objects can represent more than 90 of traffic. 

Therefore a data object size distribution of the data objects stored in the data storage system can be generated that can be analyzed to determine a size threshold that represents a relatively small number of data objects that also represents a relatively large amount of the total storage capacity consumed in the data storage system. Additionally an access pattern distribution can be generated to determine an access threshold that can be related to a size of data objects in the data storage system that are relatively rarely accessed. Accordingly in one embodiment of the present disclosure the data storage application can store those objects that are greater than a particular size threshold in an erasure coding storage scheme. Additionally in another embodiment the data storage application can store those objects that are rarely accessed in an erasure coding scheme. For example the data storage application can determine those objects that are rarely accessed over a particular period of time e.g. the previous twenty four hours the previous seven days the previous thirty days etc. . As another example the data storage application can store those objects that are sized greater than or equal to the size threshold and accessed less often during a period of time than the access threshold in an erasure coding scheme.

In some embodiments the data storage application can continually adapt these thresholds to maintain a balance between data objects stored in a redundant replication scheme and an erasure coding storage scheme. For example the data storage application can periodically generate an object size distribution and identify a size threshold that represents the largest ten percent of data objects in the data storage system. Continuing this non limiting example the data storage application can periodically generate an access pattern distribution and identify an access threshold that represents the ten percent of data objects that are accessed least frequently.

Upon identifying these thresholds the data storage application can convert a storage scheme of data objects stored in the data storage system in a redundant replication scheme that are greater than the size threshold and or accessed less often than the access threshold into an erasure coding storage scheme. Additionally generating an access pattern distribution can also involve identifying those objects that are most frequently accessed in the data storage system. Accordingly upon identifying these most frequently accessed data objects in the data storage system the data storage application can also convert a storage scheme of these data objects to a redundant replication storage scheme if they are presently stored in an erasure coding storage scheme. The data storage application can perform this conversion even if the data object is sized greater than the size threshold to reduce the latency associated with retrieval of such a data object. In other words the data storage application can identify those objects that are hot meaning they are frequently accessed and ensure that they stored in a redundant replication storage scheme.

In one embodiment the data storage application can generate an object size distribution by scanning the index which can include a data object size entry associated with at least one data object in the data storage system. In another embodiment the data storage application can scan log entries in the log that may include size information associated with the data objects in the data storages system. In another embodiment the data storage application can generate an access pattern distribution by scanning an access log associated with the log .

In some embodiments the data storage application can generate an object size distribution and or an access pattern distribution by sampling the index and or log as examining each entry in the index and or log may computationally and or resource intensive. In the case of generating an access pattern distribution by sampling an access log for example such an access pattern distribution may not identify those data objects that are less frequently accessed as these objects may be associated with few or no entries in such an access log. However sampling an index and or log in order to generate an access pattern distribution is likely to identify data objects that are frequently accessed and the data storage application can identify a data object size associated with these data objects. The data storage application can then ensure that these hot data objects are stored in a redundant replication storage scheme as frequent retrieval of hot objects that are large and stored in an erasure coding storage scheme can result in a significant performance penalty because of the computational and I O resources that may be needed to reconstruct an erasure coded data object.

The various parameters regarding the specific erasure coding storage scheme as well as the redundant replication storages scheme can vary depending on the implementation of an embodiment of the disclosure. Additionally a data storage system according to the disclosure can employ a varying number of data store nodes depending on cost performance and other factors. As one non limiting example a data storage system according to the disclosure can mirror a data object copy among three data store nodes when a redundant replication storage scheme is employed for a particular data object. The data storage system in this example can also employ an erasure coding scheme where n 6 and k 3 meaning there can be six data object shards stored among six data store nodes. Other variations should be appreciated by a person of ordinary skill in the art.

If the data object size is greater than the size threshold the data storage application can determine whether the data object is accessed less often than an access threshold in box . If the data object is accessed more often than an access threshold then the data storage application can proceed to boxes and as described above. If the data object is accessed less than an access threshold the data storage application can determine whether the data object is stored in an erasure coding replication scheme in box . If the data object is not stored in an erasure coding replication scheme the data object can be stored in the erasure coding replication scheme in box .

Accordingly represent methods in which the data storage application can on an object by object basis assess whether a particular data object that is the subject of a request to retrieve create and or modify the object is stored in the data storage system using the appropriate storage scheme. In contrast represents a method in which the data storage application can analyze the data objects in a data storage system on a periodic basis and calculate thresholds to determine whether data objects should be stored in a redundant replication storage scheme or an erasure coding storage scheme.

In in box the data storage application can generate an object size distribution. As described above an object size distribution can be generated by scanning and or sampling an index and or log to determine a distribution of data objects in the data storage system according to their size. A size threshold can be identified based at least upon this distribution. For example a data object size representing the data object size above which represents ten percent of data objects in the data storages system.

In box the data storage application can generate an access pattern distribution. As described above an access threshold can be identified that identifies data objects accessed less than an access threshold. In box the data storage application can identify objects sized greater than the size threshold and in box the data storage application can identify from these data objects those that are accessed less than the access threshold. In box these data objects that are greater than the size threshold and accessed less than the access threshold can be stored in an erasure coding scheme.

With reference to shown is a schematic block diagram of the computing device according to an embodiment of the present disclosure. The computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the data storage application and potentially other applications. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java Javascript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the data storage application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the data storage application . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in show may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein such as the data storage application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

