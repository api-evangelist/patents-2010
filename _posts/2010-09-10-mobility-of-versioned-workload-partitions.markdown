---

title: Mobility of versioned workload partitions
abstract: A versioned workload partition (WPAR) can be migrated from a source machine to a destination machine. Each thread associated with a process executing within the versioned WPAR is frozen. For each thread associated with the process, an error number associated with the thread is received in response to freezing execution of the thread and at least a current state of the thread is determined as checkpoint information associated with the thread based, at least in part, on the error number associated with the thread. The checkpoint information associated with the one or more threads is provided to the destination machine. The checkpoint information is used at the destination machine to reconstruct the process within a destination versioned WPAR on the destination machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08464104&OS=08464104&RS=08464104
owner: International Business Machines Corporation
number: 08464104
owner_city: Armonk
owner_country: US
publication_date: 20100910
---
Embodiments of the inventive subject matter generally relate to the field of memory management and more particularly to mobility of versioned workload partitions.

Workload partition WPAR mobility involves planned migration of WPAR workloads e.g. data applications processes etc. executing within the WPAR from one hardware resource e.g. a source server to another hardware resource e.g. a destination server without disrupting services provided by the WPAR to be migrated. The WPAR may be migrated to ensure seamless operation of the WPAR for balancing workloads between servers. The WPAR may also be migrated in the event that the source server will be shut down for servicing e.g. upgrades repairs installations etc. .

Various embodiments for mobility of versioned workload partitions are disclosed. In one embodiment it is determined at a source machine associated with a global operating system that a workload partition associated with a first version of an operating system is to be migrated from the source machine to a destination machine. The first version of the operating system is an earlier version than the global operating system. Execution of one or more threads associated with a process executing within the workload partition to be migrated from the source machine to the destination machine is halted. For each of the one or more threads associated with the process executing within the workload partition an error number associated with the thread is received in response to halting the execution of the thread. For each of the one or more threads associated with the process executing within the workload partition a current state of the thread is determined as checkpoint information associated with the thread based at least in part on the error number associated with the thread. The checkpoint information associated with each of the one or more threads associated with the process executing within the workload partition is provided to the destination machine to migrate the workload partition from the source machine to the destination machine.

The description that follows includes exemplary systems methods techniques instruction sequences and computer program products that embody techniques of the present inventive subject matter. However it is understood that the described embodiments may be practiced without these specific details. For instance although examples refer to migrating a versioned workload partition WPAR from a source physical machine to a destination physical machine embodiments are not so limited. In other embodiments the versioned WPAR can be migrated from a source LPAR on a source machine to a destination LPAR on a destination machine from a source logical partition LPAR to a destination LPAR on the same physical machine etc. Additionally although examples refer to migrating WPARs in an IBM Advanced Interactive Executive AIX operating system in other embodiments operations described herein can also be implemented in other suitable operating systems and or across other implementations of operating system level virtualization e.g. across containers zones virtual environments virtual partitions virtual machines virtual private servers VPS etc. . In other instances well known instruction instances protocols structures and techniques have not been shown in detail in order not to obfuscate the description.

Organizations employ operating system virtualization or workload partitions WPARs also known as virtual operating systems or virtualized operating systems to organize and to isolate workloads in accordance with business requirements organizational guidelines etc. while efficiently utilizing available equipment. For instance an administrator can create different WPARs for a marketing department database and associated applications marketing database workload an accounting department database and associated applications accounting database workload and a legal department electronic mail server legal e mail workload . Instead of using three different servers the resources of a single physical server can be used to satisfy the needs of the three workloads. Each WPAR presents to the respective hosted workload i.e. processes application s of the workload as an instance of an operating system with its own namespace and process environment. The WPARs are isolated by ensuring that no WPARs access the same memory space or manage the same resource thus precluding the need for running three different servers. Versioned WPARs also known as compatibility runtime environment CRE WPARs support an earlier version e.g. version 5.2 of an IBM AIX operating system of operating system libraries scripts and other content that execute on a later version of the operating system e.g. a 7.1 version of the IBM AIX operating system of a source machine that hosts the versioned WPAR.

Existing techniques for WPAR mobility can be implemented when the WPAR to be migrated the source machine that hosts the WPAR and the destination machine where the WPAR will be migrated are associated with a common version of the operating system. Migrating the WPAR from the source machine to the destination machine typically involves recording a snapshot of also known as checkpointing a current state of the WPAR including applications processes workloads data etc. on the source machine and using the recorded snapshot or checkpoint information to recreate the WPAR and to resume operation of the WPAR on the destination machine. However interoperability issues can arise in migrating a versioned WPAR that supports an earlier version of an operating system to a destination machine that supports a later version of the operating system. For example a checkpoint program that checkpoints processes executing in the versioned WPAR may be statically linked to the later version of the operating system and therefore the checkpoint program may not be configured to checkpoint processes compiled on and linked to the earlier version of the operating system supported by the versioned WPAR. This is because libraries process architecture etc. can vary from one version of the operating system to another. For example process specific data e.g. location of error numbers or errno may be stored at a first memory offset in version 5.2 of the AIX operating system while the process specific data may be stored at a second memory offset in version 7.1 of the AIX operating system. Thus the checkpoint program compiled on the later version of the operating system may be configured to access data at a particular memory location. However if the checkpoint program is executed on the earlier version of the operating system the checkpoint program might be unable to access the appropriate memory location or might access an incorrect memory location to retrieve the data resulting in incompatibility erroneous symbol resolution etc. It might be impractical and cost prohibitive to maintain different versions of the checkpoint program e.g. a checkpoint program compiled on and linked to different earlier versions of the operating system and to load a different version of the checkpoint program depending on the version of the operating system supported by the versioned WPAR.

A modified checkpoint program can be implemented to checkpoint processes irrespective of the version of the operating system to which the processes are linked. In other words the checkpoint program can be configured to be independent of the version of the operating system to which the process being checkpointed is linked. Prior to checkpointing the process the checkpoint program can issue a system call to a kernel of the base or global operating system of the source machine i.e. the later version of the operating system associated with the source machine that implements the versioned WPAR to determine a memory address that references process specific data associated with the process to be checkpointed. The received memory address can vary depending on the process and depending on the version of the operating system associated with the versioned WPAR within which the process executes. The memory address can enable the checkpoint program to correctly access and identify requisite process specific data associated with the process that is compiled on and is linked to the earlier version of the operating system. To checkpoint and consequently to migrate the process an interrupt can be issued to halt execution of the process. The kernel of the global operating system can also be configured to issue an error if execution of a system call generated by the process was interrupted. The checkpoint program can analyze the errors identify system calls that were interrupted and store checkpoint information that represents a current state of the process. On the destination machine a skeleton process of the process to be migrated can be populated with the checkpoint information to recreate the process on the destination machine. The recreated process can be started on the destination machine so that execution of the recreated process resumes from the point at which it was interrupted on the source machine. Additionally any system calls that were interrupted aborted on the source machine because of the checkpoint operations can be reissued to an operating system kernel of the destination machine. Such a version independent checkpoint program enables processes of a versioned WPAR to be checkpointed irrespective of the version of the operating system associated with the versioned WPAR. By using such a version independent checkpoint program efficiency associated with migrating the versioned WPAR from the source machine to the destination machine can be improved and maintenance associated with migrating the versioned WPAR with can be minimized.

The WPAR management unit can create the versioned WPAR and other WPARs as software partitions within the operating system . The WPARs are contained environments that are created from and that share resources e.g. memory kernel processors network cards hard drives and or other software firmware and or hardware of a single managing instance of the operating system . The managing instance of the operating system is also referred to as a global operating system . For example the WPARs may share a common AIX kernel and may comprise their own file systems users administrators network space applications processes etc. Each of the WPARs within the global operating system can comprise applications and other workloads that execute independently within the contained environment of the WPAR.

In some implementations the versioned WPAR may be created on the source machine . The global operating system that manages all the physical resources e.g. memory processor drives adapters etc. of the source machine may allocate a subset of the physical resources to the versioned WPAR . The global operating system may also allocate virtual resources to the versioned WPAR . In other implementations the versioned WPAR may be implemented within a logical partition LPAR of the source machine . An LPAR is generally a subset of the physical resources of the source machine where the subset is virtualized and where the LPAR can operate as a separate computing device and can manage the subset of the physical resources. An operating system can be installed on the LPAR and one or more WPARs can be created in the operating system of the LPAR. The operating system of the LPAR can allocate resources to the WPAR from the subset of the physical resources allocated to the LPAR. Also the source machine could comprise multiple LPARs each LPAR could support a different operating system and each LPAR could support multiple WPARs.

Although traditionally the WPARs and the global operating system share an identical operating system e.g. identical version identical patches identical tuning options etc. the versioned WPAR is created to support a different version typically an earlier version of the operating system than the global operating system . The versioned WPAR supports an earlier version of operating system libraries that execute on top of a later version of the global operating system . As depicted in the global operating system may be a version 7.1 IBM AIX operating system while the versioned WPAR might support operating system libraries that are specific to version 5.2 of the IBM AIX operating system. Thus scripts the process and other content within the versioned WPAR are compiled on version 5.2 of the operating system and are linked to version 5.2 of the WPAR OS libraries . Although compiled on version 5.2 of the operating system the process the libraries the scripts and other content communicate with the version 7.1 global operating system kernel . It is noted that although the refer to versions 7.1 and 5.2 of the AIX operating system in other embodiments the global operating system can be any suitable later version of any suitable operating system while the versioned WPAR can be associated with any suitable earlier version of the operating system. It is also noted that although depicts the source machine comprising one versioned WPAR the source machine can comprise any suitable number of WPARs.

Mobility of the versioned WPAR enables the versioned WPAR to be migrated from the source machine to a destination machine not shown . Typically the source machine and the destination machine support the same version of the global operating system. For example if the source machine is associated with version 7.1 global operating system the destination machine is typically also associated with a separate instance of the version 7.1 global operating system. On receiving a request to migrate the versioned WPAR from the source machine to the destination machine the global operating system identifies one or more processes e.g. the process executing with the versioned WPAR to be migrated. Each process executing within the versioned WPAR comprises its own execution environment stack working area shared memory network communication etc.

At stage A in response to the request to migrate the versioned WPAR to the destination machine the WPAR management unit transmits a checkpoint signal to the process executing within the versioned WPAR . For example the WPAR management unit can comprise a master checkpoint process not shown that issues a per thread checkpoint signal to the process . In one implementation the checkpoint signal may be in the form of an interrupt to the process to be migrated. In another implementation the checkpoint signal can cause each of the threads associated with the process to sleep for a configurable time interval e.g. by executing a thread.sleep function .

Also each process of the versioned WPAR is also allocated a segment of memory within which a set of executable instructions that comprise the process also known as a text segment or a code segment is stored. The set of instructions that constitute the process is typically static and therefore may not be migrated as part of the process . After execution of the threads that are associated with the process is halted the global operating system loads the checkpoint unit by designating the text memory segment associated with the process as a working area for the checkpoint unit . The set of instructions that constitute the process in the text memory segment can be replaced by a set of instructions executed by the checkpoint unit for checkpointing the process . The checkpoint unit communicates with the global operating system and checkpoints the process by recording a current state of process specific data. The checkpoint unit enables migration of the process to the destination machine as will be further described with reference to stages B E in and stages F H in .

At stage B the checkpoint unit generates a system call to the global operating system kernel to determine a memory address that references process specific data of the process executing within the versioned WPAR . Because the versioned WPAR to be migrated supports an earlier version of the operating system as compared to the global operating system software and memory architecture for the two versions of the operating systems may be different. In other words the process is linked to the earlier version of the operating system libraries . Therefore the process specific data associated with the process may be stored at a memory location or a memory offset that is different from the memory location or memory offset at which the process specific data would have been stored if the process were linked to the global operating system . Because the checkpoint unit is linked to the global operating system and is unaware that the process is linked to the earlier version of the operating system libraries the checkpoint unit may access an incorrect memory location may not encounter the requisite process specific data may retrieve incorrect data and or may interpret retrieved data incorrectly. For example a uthread structure that comprises thread specific information e.g. system call parameters results system call state information per thread signal information etc. for the later version of the operating system may be different from a uthread structure for the earlier version of the operating system. Another example of the process specific data is an error number. If a system call issued by the process to the global operating system kernel fails the global operating system kernel provides an error number that is indicative of the error encountered by the global operating system kernel . Error definitions for the error number are stored at a fixed offset relative to the uthread structure which as described above could result in errors because the checkpoint unit and the versioned WPAR are associated with different versions of the operating system. To enable accurate checkpointing of the process the checkpoint unit issues a system call to the global operating system kernel to request the memory address that references the process specific data for the version of the operating system associated with the versioned WPAR . For example prior to determining the checkpoint information associated with the process the checkpoint unit can issue the system call to the global operating system kernel and can request the memory address at which the error numbers and error definitions errno offset are stored in the earlier version of the operating system associated with the versioned WPAR . The checkpoint unit can use the errno offset to interpret error codes received as a result of system calls function calls issued by the checkpoint unit .

At stage C the checkpoint unit receives the memory address that references the process specific data. For example the checkpoint unit receives from the global operating system kernel the memory address at which error definitions that correspond to the error numbers can be retrieved for the process that is linked to the earlier version of the operating system libraries . Because the versioned WPAR is created within the global operating system the global operating system kernel is aware of the earlier version of the operating system supported by the versioned WPAR and also of the memory address that references the process specific data for the earlier version of the operating system. At stage C the checkpoint unit is aware of the memory address that references the process specific data e.g. the error numbers and the corresponding error definitions . Therefore the checkpoint unit can execute operations for checkpointing the process as will be described below irrespective of the version of the operating system supported by the versioned WPAR i.e. the earlier version of the operating system to which the process is linked .

At stage D the checkpoint unit registers the memory address that references the process specific data with a linked static runtime library. For example the checkpoint unit may be linked to a standard C library e.g. libc.a and the checkpoint unit may register the received memory address with the libc.a static runtime library. Based on knowledge of the memory address that references the process specific data the checkpoint unit can access appropriate memory locations to read the process specific data identify error numbers etc.

At stage E the checkpoint unit initiates operations for checkpointing the process that executes within the versioned WPAR . As described above the process may be associated with multiple threads and each thread can execute a subset of instructions that constitute the process . depicts the process comprising thread and thread . Typically to checkpoint the process the threads and associated with the process may not execute in kernel space e.g. execute system calls because the global operating system kernel may not be checkpointed and migrated to the destination machine. Thus to checkpoint the process the system calls are made restartable and execution of the system calls is aborted to minimize dependency of the process on the global operating system kernel . Operations of the checkpoint unit for determining checkpoint information that indicates a current state of the process will further be described in and .

As described above with reference to stage A the threads and associated with the process to be migrated to the destination machine are halted in response to the checkpoint signal The checkpoint signal causes execution of the threads and to be suspended or aborted consequently pausing execution of the process . Also any system calls issued by the thread to the global operating system kernel are aborted. In the thread issues a system call to the global operating system kernel . On receiving the interrupt execution of the system call is aborted by the global operating system kernel . Once execution of the process is paused any data that has not been written to a data storage unit e.g. a hard disk can be flushed to the data storage unit. Such data is typically generated as a result of write requests that are not immediately mirrored to the data storage unit. The data is typically stored in a cache associated with the process and is also referred to as dirty data. The process can write the dirty data to the data storage unit and can notify the checkpoint unit when the state of the data storage unit is current e.g. once all the data from the cache has been flushed to the data storage unit . The checkpoint unit can then begin checkpointing each segment of the data storage unit allocated to the process .

At stage F for each thread associated with the process the checkpoint unit receives an error number in response to interrupting execution of the thread. As depicted in the checkpoint unit receives an error number depicted as ERRNO  in response to interrupting execution of the thread . The checkpoint unit receives an error number depicted as ERRNO N in response to interrupting execution of the thread . In one implementation the global operating system kernel generates an error with the error number that indicates that execution of a system call generated by the thread was aborted in response to the interrupt . For example the global operating system kernel in an IBM AIX operating system can return an ERESTART error number to indicate that the system call issued by the thread to the global operating system kernel was aborted. The ERESTART error number can also indicate that after the process is migrated to the destination machine the system call should be reissued with the same parameters to the global operating system kernel of the destination machine. It is noted that depending on the implementation of the global operating system the global operating system kernel can return any suitable error number to indicate that the system call issued by the thread to the global operating system kernel was aborted. In some implementations the error number may be generated to indicate that execution of the thread was interrupted irrespective of whether the thread was executing user space code or whether the thread was executing kernel space code. For example a first error number may be generated to indicate that execution of the thread in kernel space e.g. a system call generated by the thread was interrupted and a second error number may be generated to indicate that execution of the thread in user space was interrupted.

At stage G based on the memory address that references the process specific data the checkpoint unit identifies threads with error number equal to ERESTART. The ERESTART error number can indicate that execution of a system call generated by the thread was interrupted while the system call was being executed by the global operating system kernel . As depicted in the thread generates the system call prior to receiving the checkpoint signal at stage A to the global operating system kernel . On receiving the checkpoint signal execution of the thread is halted and the system call is aborted. Accordingly the global operating system kernel generates the error number that indicates that the system call was aborted. In one implementation the checkpoint unit can use the memory address received at stage D that references the process specific data to identify a memory location at which to look up error numbers received from the threads and associated with the process . For example the checkpoint unit may receive the memory address at stage D that references a location in memory of an error number resolution table. Based on knowledge of the memory address that references the process specific data and based on knowledge of the error number received from the thread the checkpoint unit may identify an error definition that corresponds to the received error number. For example the checkpoint unit can use the error number to calculate an offset or an index for identifying from the memory associated with the process the error definition that corresponds to the error number. In another implementation the checkpoint unit can compare the error number against a predetermined error number to determine whether the system call issued by the thread was aborted and whether the system call is to be reissued at the destination machine. For example the checkpoint unit can compare the error number against a predetermined error number e.g. the ERESTART error number and determine whether the error number is the ERESTART error. At stage G the checkpoint unit determines the error number received from the thread indicates the ERESTART error . The checkpoint unit also determines that the error number received from the thread does not indicate the ERESTART error .

At stage H the checkpoint unit records a current state of the threads and associated with the process to yield checkpoint information associated with the thread and checkpoint information associated with the thread . The checkpoint information associated with the thread and checkpoint information associated with the thread together constitute checkpoint information associated with the process . As depicted in the checkpoint unit records the current state of the thread represented as foo arg and data  as the checkpoint information associated with the thread . Additionally on determining that the error number received from the thread is the ERESTART error the checkpoint unit also records the error number as part of the checkpoint information associated with the thread. foo arg represents a function in the instructions executed by the thread that generated the system call . data  can represent data generated during execution of the thread e.g. variables data structures and other data that represents the current state of the thread . As depicted in the checkpoint unit records the current state of the thread represented as foo  and data  as the checkpoint information associated with the thread . data  can represent data generated during execution of the thread e.g. variables data structures and other data that represents the current state of the thread . Because the error number received from the thread is not the ERESTART error the checkpoint unit may not record the error number as part of the checkpoint information associated with the thread . It is noted that in some implementations the checkpoint unit may record the error number received from the thread as checkpoint information associated with the thread irrespective of whether the error number indicates the ERESTART error . In short the checkpoint unit captures a snapshot of the current state of the process and provides to the destination machine the captured snapshot of the process as the checkpoint information associated with the process . The checkpoint information can be used to recreate the process and to resume the execution of the process on the destination machine.

The checkpoint unit can provide the checkpoint information associated with the process to the global operating system of the source machine . The global operating system in turn can provide the checkpoint information associated with the process to a global operating system of the destination machine. In one implementation the checkpoint unit can save the checkpoint information associated with the process in a file and can transmit the file from the source machine to the destination machine. In another implementation the checkpoint unit can transmit the checkpoint information on the fly to the destination machine using any suitable communication protocol such as transmission control protocol internet protocol TCP IP .

Although not depicted in a process restoration unit implemented on the destination machine can execute operations for recreating the process within a destination versioned WPAR on the destination machine. The process restoration unit can create a skeleton of the process skeleton process within the destination versioned WPAR and can create threads associated with the skeleton process. The process restoration unit can based on the checkpoint information received from the source machine populate the skeleton process to recreate the process reconstructed process within the destination versioned WPAR so that the reconstructed process is at the same state as the process on the source machine . After all the processes within the versioned WPAR on the source machine are recreated within the destination versioned WPAR on the destination machine the reconstructed processes within the destination versioned WPAR can be restarted. The reconstructed processes can continue executing within the destination versioned WPAR from the point at which they were paused on the source machine . Operations for recreating checkpointed processes on the destination machine are further described in .

A request to migrate a versioned WPAR from a source machine to a destination machine is detected . For example with reference to a global operating system of the source machine detects the request to migrate the versioned WPAR from the source machine to the destination machine. As described with reference to the versioned WPAR is associated with an earlier version of the operating system as compared to the global operating system . The source machine and the destination machine typically implement same version of the global operating system. The flow continues at block .

One or more threads that constitute the process are halted . For example a master checkpoint process in the global operating system can issue a per thread checkpoint signal to the process of the versioned WPAR to be migrated from the source machine to the destination machine. For example with reference to the threads and constitute the process executing in the versioned WPAR . The process typically comprises one or more threads that execute subsets of the instructions that constitute the process or that execute as different instances of the same process . For example a search engine process may comprise multiple threads each of which may service different search requests. The thread may execute user space code or kernel space code. The kernel space code comprises instructions that constitute the global operating system kernel kernel extensions device drivers etc. The user space code comprises instructions and data associated with applications software libraries with which the applications software interact etc. The checkpoint signal can indicate that the interrupt is being issued to facilitate checkpointing of the threads associated with the process . In one implementation the checkpoint signal may be in the form of an interrupt to the process to be migrated. In another implementation the checkpoint signal can cause the thread to sleep for a configurable time interval e.g. by executing a thread.sleep function . On receiving the checkpoint signal the process can cause the one or more threads that constitute the process to be blocked. In other words execution of the one or more threads is halted and the state of the threads is frozen. The flow continues at block .

A checkpoint program is loaded in a text memory segment associated with a process executing in the versioned WPAR . For example the global operating system causes the checkpoint unit to be loaded in the text memory segment associated with the process to be checkpointed. The text memory segment associated with the process may be a pre defined segment of memory that comprises executable instructions that constitute the process . For example in an AIX operating system the global operating system may designate segment one of a subset of memory allocated to the process as the text memory segment associated with the process . The text memory segment associated with the process is static i.e. the executable instructions that constitute the process do not change with time or with execution of the process . Therefore the text memory segment associated with the process need not be checkpointed or migrated to the destination machine. To checkpoint the process the global operating system replaces the executable instructions that constitute the process from the text memory segment and loads the checkpoint unit . The checkpoint unit may comprise a compact self contained program that is statically linked to the global operating system . This is because if the checkpoint unit is dynamically linked to global operating system the checkpoint unit may unload the earlier version of the operating system libraries and other content associated with the process and may load the later version of the operating system libraries and other content associated with the checkpoint unit . This can corrupt the current state of the process to be checkpointed. As will be described below in blocks to the checkpoint unit can access all the memory segments allocated to the process identify information that represents the current state of the process and checkpoint or record the information that represents the current state of the process . The flow continues at block .

A system call is generated to a global operating system kernel to determine a memory address that references process specific data for the process executing in the versioned WPAR . For example the checkpoint unit generates and issues the system call to the global operating system kernel . The checkpoint unit can request the memory address that references the process specific data for the process to avoid errors that may be encountered because the checkpoint unit is linked to the global operating system i.e. a later version of the operating system while the process to be checkpointed is linked to the earlier version of the operating system. The process specific data can comprise error numbers and corresponding error definitions for the earlier version of the operating system supported by the versioned WPAR. The flow continues at block .

The memory address that references the process specific data for the process executing in the versioned WPAR is received . For example the checkpoint unit receives from the global operating system kernel the memory address that references the process specific data for the process executing in the versioned WPAR . The memory address received by the checkpoint unit can indicate a location in memory from which error numbers and their corresponding error definitions can be identified. The received memory address may be specific to the process and to the version of the operating system libraries with which the process is linked. The flow continues at block .

The memory address that references the process specific data is registered with a static runtime library linked to the checkpoint program . For example the checkpoint unit registers the memory address that references the process specific data received at block from the global operating system kernel with the static runtime library e.g. a standard C library libc to which the checkpoint unit is linked. On subsequently receiving an error number from the global operating system kernel the checkpoint program can access the appropriate memory address to locate an error definition that corresponds to the error number via the static runtime library. The flow continues at block in .

A loop begins for each thread that is associated with the process executing within the versioned WPAR . For example the checkpoint unit performs a set of operations described in blocks for each of the threads and that are associated with the process . The flow continues at block .

An error number is received in response to halting execution of the thread . For example the checkpoint unit receives the error number in response to halting the execution of the thread . The checkpoint unit receives the error number in response to halting the execution of the thread . On receiving the interrupt execution of the thread is paused. Any system calls issued by the thread to the global operating system kernel are aborted. The global operating system kernel can generate an error with a predetermined error number if a system call issued by the thread to the global operating system kernel is aborted in response to the interrupt. As an example the global operating system kernel in an IBM AIX operating system can return an ERESTART error number to indicate that the system call issued by the thread to the global operating system kernel was aborted. However depending on the global operating system associated with the source machine the global operating system kernel can return any suitable predetermined error number to indicate that the system call issued by the thread was aborted. For example a thread may execute a function foo. Execution of the function foo can cause a system call bar to be issued to the global operating system kernel . Control passes from user space e.g. instructions of the process including the function foo to kernel space where the global operating system kernel processes the system call bar. The thread may receive the interrupt while the global operating system kernel is processing the system call bar. Consequently the global operating system kernel can abort execution of the system call bar the global operating system kernel can issue the ERESTART error number and control can pass back to the user space. The flow continues at block .

A current state of the thread is determined . For example the checkpoint unit determines the current state of the threads and in the user space. The checkpoint unit can determine the state of the thread at the instant when the interrupt was issued. The checkpoint unit can record the content of memory segments allocated to the thread an instruction that was last executed by the thread and other information associated with the thread that is necessary to reconstruct the thread and consequently the process on the destination machine. If execution of an instruction or a function caused a system call to be issued and to subsequently be aborted the checkpoint unit may also record the instruction function and indicate that the instruction function is to be re executed. With reference to the example of block where the function foo generated the system call bar and execution of the system call bar was aborted the checkpoint unit checkpoints the thread at the point where control passes back to the user space. For example the current state of the thread may be identified as the function foo. As will be described below at the destination machine the function foo can be restarted and the system call bar can be reissued to the global operating system kernel . The flow continues at block .

It is determined whether the error number indicates that a system call issued by the thread was aborted and is to be restarted . For example the checkpoint unit determines whether the error number indicates that a system call issued generated by the thread returned to user space with error ERESTART. In one implementation the memory address can indicate where in memory error definitions for the error numbers can be identified. In one implementation the checkpoint unit can calculate an index based on the error number and can search a subset of memory locations e.g. beginning at the memory address received at block to identify the error definition that corresponds to the received error number. Based on knowledge of the memory address that references the process specific data and based on knowledge of the error number received from the thread the checkpoint unit may identify an error definition that corresponds to the received error number. In another implementation the checkpoint unit can compare the received error number with a predetermined error number and determine whether the received error number is equal to the predetermined error number. For example the checkpoint unit can determine whether the received error number is equal to ERESTART. The error number associated with the thread being equal to ERESTART can indicate that the system call issued by the thread was aborted and that the system call is to be reissued after the process is migrated to the destination machine. Alternately if the error number associated with the thread is not equal to ERESTART it may be determined that a system call was not issued by the thread that the system call issued by the thread was not aborted and or that the system call is not to be reissued at the destination machine. In some implementations an error number may not be generated unless a system call issued to the operating system kernel was aborted. Thus in determining whether the error number indicates that a system call issued by the thread was interrupted it may also be determined whether the error number associated with the thread was received. In another implementation an error number may be generated in response to interrupting the thread. The checkpoint unit may receive a different error number depending on whether or not the system call issued to the operating system kernel was aborted. Furthermore it is noted that depending on the global operating system implemented on the source machine any suitable predetermined error number can be issued by the global operating system kernel . If it is determined that the error number received from the thread indicates that execution of a system call generated by the thread was interrupted the flow continues at block . Otherwise the flow continues at block .

The current state of the thread in the user space is stored as checkpoint information associated with the thread . For example the checkpoint unit stores the current state of the thread as the checkpoint information associated with the thread . The flow moves from block to block on determining that the error number received from the thread does not indicate that execution of a system call generated by the thread was interrupted. The checkpoint information associated with the thread can comprise data generated during execution of the thread a last executed instruction function etc. In some implementations the checkpoint information associated with the thread may also include an error number associated with the thread. The flow continues at block .

The current state of the thread in the user space and the error number received from the thread are stored as checkpoint information associated with the thread . For example the checkpoint unit stores the current state of the thread and the error number received from the thread as the checkpoint information associated with the thread . The flow moves from block to block on determining that the error number received from the thread indicates that execution of a system call generated by the thread was interrupted. The checkpoint information associated with the thread can comprise data generated during execution of the thread a last executed instruction function and the error number associated with the thread. The error number associated with the thread can be a predetermined error number that indicates that a system call issued by the thread to the global operating system kernel was aborted. The flow continues at block .

It is determined whether additional threads that constitute the process executing within the versioned WPAR remain to be analyzed . For example the checkpoint unit determines whether additional threads that constitute the process executing within the versioned WPAR on the source machine remain to be analyzed for migration purposes. If it is determined that additional threads that constitute the process remain to be analyzed the flow loops back to block where a next thread that constitutes the process is identified and operations described with reference to blocks are executed for the next thread. Otherwise the flow continues at block .

The checkpoint information associated with all the threads that constitute the process checkpoint information associated with the process are provided to the destination machine for migrating the versioned WPAR and the process . For example the checkpoint unit provides the checkpoint information associated with the process to the global operating system of the source machine e.g. to the master checkpoint process . The global operating system in turn can provide the checkpoint information associated with the process to an operating system of the destination machine. In one implementation the checkpoint information can be stored before being provided to the destination machine. In another implementation the checkpoint information can be dynamically provided to the destination machine. A process restoration unit implemented on the destination machine can execute operations described in for reconstructing the process within a destination versioned WPAR of the destination machine. From block the flow ends.

Although not depicted in the operations described in for checkpointing a process is executed for each process executing within the versioned WPAR to be migrated. For example if the versioned WPAR comprises ten processes ten different instances of the checkpoint unit are loaded in respective text memory segments associated with each of the ten processes executing in the versioned WPAR . The global operating system or the master checkpoint process receives the checkpoint information associated with each of the ten processes and provides the checkpoint information associated with each of the ten processes to the destination machine. As will be described in at the destination machine the state at which the process was paused can be recreated from the checkpoint information. The system calls that were aborted can be identified and can be reissued to a global operating system kernel of the destination machine.

A destination versioned WPAR is created on a destination machine . For example to recreate the versioned WPAR of that is to be migrated from the source machine to the destination machine a global operating system of the destination machine can create the destination versioned WPAR on the destination machine. As described above the global operating system is an underlying operating system of the machine on which it executes in this case the destination machine . The flow continues at block .

A skeleton of a process that is to be migrated from the source machine is created within the destination versioned WPAR on the destination machine . For example the global operating system of the destination machine can create the skeleton of the process that is to be migrated from the versioned WPAR of the source machine to the destination versioned WPAR of the destination machine. The skeleton of the process may be a partially functional or a template version of the process and can comprise abstract methods method stubs empty function declarations etc. The skeleton of the process can then be progressively expanded based on checkpoint information associated with the process to reconstruct the process as will be described below. Additionally the operating system of the destination machine can also load a process restoration unit in a text memory segment associated with the skeleton of the process in the destination versioned WPAR. As described above the text memory segment is allocated for storing executable instructions that constitute the process. The global operating system of the destination machine can read checkpoint information received from the source machine and can determine the number of processes that are to be migrated. Each process to be migrated from the versioned WPAR to the destination versioned WPAR is allocated a unique text memory segment. Thus the global operating system of the destination machine can load a new instance of the process restoration unit in each text memory segment allocated to each of the processes to be migrated. The process restoration unit can execute operations described in blocks to recreate and restore in the destination versioned WPAR of the destination machine a current state of one or more processes that were previously executing within the versioned WPAR on the source machine . The flow continues at block .

Based on received checkpoint information associated with the process one or more threads that are associated with the process are determined . For example the process restoration unit can analyze the checkpoint information associated with the process and can determine a number of threads that were executing as part of the process when the process was checkpointed on the source machine . The flow continues at block .

A loop begins for each thread associated with the process . For example the process restoration unit can execute operations described in blocks for each thread that is associated with the process. Based on the checkpoint information the process restoration unit can restore the state of the threads that constitute the process as described in blocks . The flow continues at block .

It is determined whether the checkpoint information associated with the thread comprises an error number associated with the thread . For example the process restoration unit can determine whether the checkpoint information associated with the thread comprises an error number associated with the thread . Likewise the process restoration unit can determine whether the checkpoint information associated with the thread comprises an error number associated with the thread . The error number can be used to determine whether instructions are to be re executed functions are to be restarted and system calls are to be reissued to the global operating system of the destination machine. If it is determined that checkpoint information associated with the thread comprises an error number associated with the thread the flow continues at block . Otherwise the flow continues at block .

It is determined whether the error number associated with the thread indicates that a system call issued by the thread is to be restarted . For example the process restoration unit can determine whether the error number associated with the thread indicates that a system call generated by the thread to the global operating system kernel of the source machine was interrupted and is to be restarted. Likewise the process restoration unit can determine whether the error number associated with the thread indicates that a system call generated by the thread to the global operating system kernel of the source machine was interrupted and is to be restarted. In one implementation the process restoration unit can determine whether the error number indicates an ERESTART error. The ERESTART error can indicate that a system call issued by the thread was aborted at the source machine and that the system call is to be reissued at the destination machine. If the system call to the global operating system kernel of the source machine was aborted as a result of migrating the process from the versioned WPAR to the destination versioned WPAR the process restoration unit can cause functions instructions to be reexecuted and the system call to be reissued e.g. with the same parameters to the global operating system kernel of the destination machine. If it is determined that the error number associated with the thread indicates that execution of a system call previously issued by the thread is to be reissued the flow continues at block . Otherwise the flow continues at block .

Based on the checkpoint information associated with the thread a current state of the thread in user space is restored . For example the process restoration unit can restore the current state of the thread based on the checkpoint information associated with the thread . The flow moves from block to block on determining that the error number for the thread does not indicate that a system call issued by the thread is to be reissued to the global operating system kernel of the destination machine. The flow also moves from block to block on determining that the checkpoint information associated with the thread does not comprise an error number associated with the thread . Based on the checkpoint information associated with the thread the process restoration unit can populate memory segments allocated to the thread to recreate the state of the memory and the thread at which the thread was paused on the source machine . For example the process restoration unit can receive an indication that memory location on the source machine was associated with the process and comprised data data  associated with the thread . Accordingly in restoring the state of the thread within the skeleton of the process on the destination machine the process restoration unit can store the data data  at the memory location on the destination machine. The process restoration unit can also populate based on the checkpoint information various other memory segments e.g. libraries working area heap stack etc. associated with the process . It is noted however that the process restoration unit need not populate the same memory locations on the destination machine as those on the source machine. For example the process restoration unit may not store the data data  at the memory location on the destination machine. Instead the process restoration unit can identify e.g. based on memory allocated by the global operating system of the destination machine for the processes being migrated an appropriate memory location of the destination machine at which to store the data data . The flow continues at block .

Based on the checkpoint information associated with the thread a current state of the thread is restored and the interrupted system call generated by the thread is reissued to the global operating system kernel of the destination machine . The flow moves from block to block on determining that the error number associated with the thread indicates that execution of the system call issued by the thread to the global operating system kernel of the source machine was interrupted and that the system call is to be reissued. For example the process restoration unit can restore the current state of the thread based on the checkpoint information associated with the thread . Based on the checkpoint information associated with the thread the process restoration unit can populate memory segments allocated to the thread to recreate the state including libraries working area heap stack etc. at which the thread was paused on the source machine . The process restoration unit can also determine whether which instructions are to be executed whether which functions are to be re executed to issue the system call that was previously aborted etc. The process restoration unit can cause the system call to be issued to the global operating system kernel of the destination machine. The flow continues at block .

It is determined whether additional threads associated with the process are to be recreated within the skeleton of the process . For example the process restoration unit determines whether additional threads associated with the process to be migrated from the versioned WPAR of the source machine are to be created to reconstruct the process within the destination versioned WPAR of the destination machine. If it is determined that additional threads are to be recreated the flow loops back to block where a next thread that is associated with the process is identified from the checkpoint information and operations described with reference to blocks are executed for the next thread. Otherwise the process of the versioned WPAR is deemed to be re created reconstructed process in the destination versioned WPAR and the flow continues at block .

Execution of the reconstructed process is resumed within the destination versioned WPAR of the destination machine . After the process restoration unit restores the state of all the threads associated with the process and when the current state of the reconstructed process is equivalent to the state of the process on the source machine the global operating system of the destination machine can unload the process restoration unit from the text memory segment associated with the reconstructed process. The global operating system of the destination machine can load the executable instructions that constitute the process and the reconstructed process in the text memory segment associated with the reconstructed process. It is noted that the global operating system of the source machine and the global operating system of the destination machine can access a common file system that comprises executable instructions that constitute various processes being executed on one or more machines. In one implementation the checkpoint information received from the source machine can identify a memory address within the file system from which the executable instructions that constitute the process can be retrieved. In another implementation based on an identifier of the process the global operating system of the destination machine can identify the executable instructions that constitute the process from the file system. After the process restoration unit is replaced by the executable instructions that constitute the process the global operating system of the destination machine can cause the reconstructed process within the destination versioned WPAR of the destination machine to resume execution. From block the flow ends.

It should be understood that the depicted diagrams are examples meant to aid in understanding embodiments and should not be used to limit embodiments or limit scope of the claims. Embodiments may perform additional operations fewer operations operations in a different order operations in parallel and some operations differently. For example although examples refer to an earlier version and a later version of an IBM AIX operating system embodiments are not so limited. In other implementations operations described herein with reference to can be implemented on any suitable operating systems. Also although describe operations for migrating a versioned WPAR that comprises a single process it is noted that the versioned WPAR to be migrated can comprise any suitable number of processes applications and workloads that may be checkpointed to migrated the versioned WPAR . In some implementations each process may be reconstructed sequentially within the destination versioned WPAR while in other implementations the processes may be reconstructed in parallel. In some implementations execution of the reconstructed process may be resumed as soon as operations for reconstructing the process in the destination versioned WPAR e.g. the current execution state of the process is restored are complete. In other implementations execution of the reconstructed process may be resumed only after all the processes of the versioned WPAR have been reconstructed within the destination versioned WPAR i.e. the destination versioned WPAR is at the same state as the versioned WPAR of the source machine .

It is also noted that in some implementations the memory address that references the process specific data e.g. an address of thread specific error numbers can be determined after execution of each of the threads is frozen. In other words the one or more threads associated with the process may be identified and a loop can be executed to freeze execution of the thread determine a memory address of the thread specific error number associated with the thread and to accordingly determine whether a system call issued by the thread was aborted and is to be restarted at the destination machine.

However because the function foo is modified to enable proper migration of the versioned WPAR compilation errors may be generated in trying to compile the modified version of the function foo on the earlier version of the operating system supported by the versioned WPAR because the earlier version of the operating system kernel may not recognize the function  foo restart and because the earlier version of the operating system libraries may not support the function  foo restart. However the earlier version of the operating system libraries cannot be drastically modified to preserve integrity of the earlier version of the operating system libraries and to ensure that the earlier version of the operating system libraries execute without hindrance on the corresponding version of the operating system. Furthermore the modified version of the function foo should be capable of executing on the earlier version of the operating system and also on the later version of the operating system. For this the new functions e.g.  foo restart are stubbed in the earlier version of the operating system kernel. When this modified function foo executes via the stubbed earlier version of the operating system kernel interrupting the system call bar will not cause the stubbed earlier version of the operating system kernel to return the ERESTART error number e.g. because the stubbed earlier version of the operating system kernel is unaware of the ERESTART error number . Therefore operations for executing  foo restart will not be invoked. In other words operation of the modified function foo will not be impaired modified when executing via the earlier version of the operating system. When this modified function foo executes via the later version of the operating system kernel interrupting the system call bar will cause the later version of the operating system kernel to return the ERESTART error number. Therefore operations for executing  foo restart will be invoked.

As will be appreciated by one skilled in the art aspects of the present inventive subject matter may be embodied as a system method or computer program product. Accordingly aspects of the present inventive subject matter may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present inventive subject matter may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present inventive subject matter may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present inventive subject matter are described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the inventive subject matter. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The computer system also includes a WPAR migration unit . The WPAR migration unit comprises a checkpoint unit and a process restoration unit . On determining that a versioned WPAR is to be migrated from the computer system to a destination system a global operating system of the computer system can load the checkpoint unit . The checkpoint unit can execute operations for checkpointing one or more processes associated with the versioned WPAR of the computer system as described with reference to . If a versioned WPAR is to be migrated to the computer system from a source system the global operating system of the computer system can load the process restoration unit . The process restoration unit can execute operations for reconstructing from checkpoint information one or more processes associated with the versioned WPAR of the source machine on a destination versioned WPAR of the computer system as described with reference to .

It is noted that any one or more of the components of the WPAR migration unit can be implemented in hardware and or software on a common chip or integrated circuit on separate chips and then coupled together etc. Any one of these functionalities may be partially or entirely implemented in hardware and or on the processor unit . For example the functionality may be implemented with an application specific integrated circuit in logic implemented in the processor unit in a co processor on a peripheral device or card etc. Further realizations may include fewer or additional components not illustrated in e.g. video cards audio cards additional network interfaces peripheral devices etc. . The processor unit the memory unit and the network interfaces are coupled to the bus . Although illustrated as being coupled to the bus the memory unit may be coupled to the processor unit .

While the embodiments are described with reference to various implementations and exploitations it will be understood that these embodiments are illustrative and that the scope of the inventive subject matter is not limited to them. In general techniques for migrating versioned WPARs as described herein may be implemented with facilities consistent with any hardware system or hardware systems. Many variations modifications additions and improvements are possible.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the inventive subject matter. In general structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the inventive subject matter.

