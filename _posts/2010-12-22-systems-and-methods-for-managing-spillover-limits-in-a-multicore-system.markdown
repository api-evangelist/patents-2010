---

title: Systems and methods for managing spillover limits in a multi-core system
abstract: The present disclosure is directed to a system for managing spillover via a plurality of cores of a multi-core device intermediary to a plurality of clients and one or more services. The system may include a device intermediary to a plurality of clients and one or more services. The system may include a spillover limit of a resource. The device may also include a plurality of packet engines operating on a corresponding core of a plurality of cores of the device. The system may include a pool manager allocating to each of the plurality of packet engines a number of resource uses from an exclusive quota pool and shared quota pool based on the spillover limit. The device may also include a virtual server of a packet engine of the plurality of packet engines. The virtual server manages client requests to one or more services. The device determines that the number of resources used by a packet engine of the plurality of packet engine has reached the allocated number of resource uses of the packet engine, and responsive to the determination, forwards to a backup virtual server a request of a client of the plurality of clients received by the device for the virtual server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09098335&OS=09098335&RS=09098335
owner: CITRIX SYSTEMS, INC.
number: 09098335
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20101222
---
The present application claims the benefit of and priority to U.S. Provisional Application No. 61 289 536 entitled Systems and Methods For Managing Spillover Limits In A Multi Core System and filed on Dec. 23 2009 which is incorporated herein by reference in its entirety.

The present application generally relates to data communication networks. In particular the present application relates to systems and methods for handling spillover in conjunction with limit parameters across cores in a multi core system.

As any resource possesses finite capacity use of a resource over a network will be subject to inherent or imposed limits. In a single processor system the processor may field all of these requests to use a resource. The processor may process multiple uses of the resource in parallel according to the processor s own capacity. In a multi core system requests to use the resource may be handled by different cores at different times. Each of the cores may be running at different capacity. It is challenging to manage the use of the resource across the different cores.

The present application is directed towards handling limit parameters for spillover conditions of virtual servers across multiple cores in a multi core system. In general overview a limit parameter for a resource may indicate the maximum number of uses for the resource. A pool manager may manage this number of uses for the resource. The pool manager may determine an exclusive quota pool and a shared quota pool from the limit. The pool manager may allocate to each packet processing engine operating on a core of the multi core system an exclusive number of uses from the exclusive quota pool. Each packet processing engine may use the resource up to the exclusive number of uses without further restrictions. If a packet processing engine wishes to use the resource beyond its exclusive number the packet processing engine may borrow uses from the shared quota pool. When the packet processing engine completes uses of the resource the packet processing engine may return uses to the shared quota pool. However if the packet processing engine may not borrow uses from the shared quota pool the engine may spillover into another engine that is not using all of its exclusive uses.

In some aspects the present disclosure is related to a method of managing spillover via a plurality of cores of a multi core device intermediary to a plurality of clients and one or more services. The method includes identifying for a device intermediary to a plurality of clients and one or more services a spillover limit of a resource. The device may includes a plurality of virtual servers operating on a corresponding core of a plurality of cores of the device. The method further includes allocating by a pool manager of the device to each of the plurality of virtual servers a number of resource uses from an exclusive quota pool and shared quota pool based on the spillover limit The device may determine that the number of resources used by a virtual server of the plurality of virtual servers has reached the allocated number of resource uses of the virtual server and responsive to the determination forwarding o a backup virtual server a request of a client of the plurality of clients received by the device for the virtual server.

In some embodiments the method includes identifying for the device the spillover limit as a maximum number of connections to a service of the one or more services. In the embodiments the method includes identifying for the device the spillover limit as a dynamic connection threshold the dynamic connection threshold determined from a sum of a connection capacity of each of the plurality of virtual servers. In some embodiments the method includes identifying for the device the spillover limit as a bandwidth threshold.

In some embodiments the method includes allocating by the pool manager the number of resource uses comprising a number of exclusive uses from the exclusive quota pool and a number of non exclusive uses from the shared quota pool. In some embodiments the method includes requesting by the virtual server a resource use from the pool manager upon reaching the virtual server s allocation of resource uses. In some embodiments the method includes determining by the device that the number of resource uses available from the pool manager for the virtual server has been exhausted. In some embodiments the method includes changing the spillover limit to a lower number of resource uses and responsive to the change the one or more of the plurality of virtual servers returning a portion of the allocated number of resource uses to the pool manager. In some embodiments the method includes changing the spillover limit to a higher number of resource uses and responsive to the change one or more the plurality of virtual servers requesting from the pool manager an additional the number of resource uses. In some embodiments the method includes designating a first core of the plurality of cores as spillover master for monitoring the service and changing the spillover limit based on monitoring.

In some aspects the present disclosure is directed to a system for managing spillover via a plurality of cores of a multi core device intermediary to a plurality of clients and one or more services. The system may include a device intermediary to a plurality of clients and one or more services. The system may include a spillover limit of a resource. The device may also include a plurality of packet engines operating on a corresponding core of a plurality of cores of the device. The system may include a pool manager allocating to each of the plurality of packet engines a number of resource uses from an exclusive quota pool and shared quota pool based on the spillover limit. The device may also include a virtual server of a packet engine of the plurality of packet engines. The virtual server manages client requests to one or more services. The device determines that the number of resources used by a packet engine of the plurality of packet engine has reached the allocated number of resource uses of the packet engine and responsive to the determination forwards to a backup virtual server a request of a client of the plurality of clients received by the device for the virtual server.

In some embodiments the device identifies the spillover limit as a maximum number of connections to a service of the one or more services. In some embodiments the device identifies the spillover limit as a dynamic connection threshold the dynamic connection threshold determined from a sum of a connection capacity of each of the plurality of virtual servers. In some embodiments the device identifies the spillover limit as a bandwidth threshold.

In some embodiments the pool manager allocates the number of resource uses comprising a number of exclusive uses from the exclusive quota pool and a number of non exclusive uses from the shared quota pool. In some embodiments the packet engine requests a resource use from the pool manager upon reaching the packet engine s allocation of resource uses. In some embodiments the device determines that the number of resource uses available from the pool manager has been exhausted. In some embodiments the device changes the spillover limit to a lower number of resource uses and responsive to the change one or more of the plurality of packet engines returning a portion of the allocated number of resource uses to the pool manager. In some embodiments the device changes the spillover limit to a higher number of resource uses and responsive to the change one or more the plurality of packet engines requesting from the pool manager an additional the number of resource uses. In some embodiments the device designates a first packet engine of the plurality of packet engines as spillover master for monitoring the service and changing the spillover limit based on monitoring.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

For purposes of reading the description of the various embodiments below the following descriptions of the sections of the specification and their respective contents may be helpful 

Prior to discussing the specifics of embodiments of the systems and methods of an appliance and or client it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks generally referred to as network . In some embodiments a client communicates with a server via an appliance .

Although shows a network and a network between the clients and the servers the clients and the servers may be on the same network . The networks and can be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In one embodiment network may be a private network and network may be a public network. In some embodiments network may be a private network and network a public network. In another embodiment networks and may both be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located at a corporate data center.

The network and or be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network and or may be a bus star or ring network topology. The network and or and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

As shown in the appliance which also may be referred to as an interface unit or gateway is shown between the networks and . In some embodiments the appliance may be located on network . For example a branch office of a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . For example an appliance may be located at a corporate data center. In yet another embodiment a plurality of appliances may be deployed on network . In some embodiments a plurality of appliances may be deployed on network . In one embodiment a first appliance communicates with a second appliance . In other embodiments the appliance could be a part of any client or server on the same or different network as the client . One or more appliances may be located at any point in the network or network communications path between a client and a server .

In some embodiments the appliance comprises any of the network devices manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. referred to as Citrix NetScaler devices. In other embodiments the appliance includes any of the product embodiments referred to as WebAccelerator and BigIP manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the DX acceleration device platforms and or the SSL VPN series of devices such as SA 700 SA 2000 SA 4000 and SA 6000 devices manufactured by Juniper Networks Inc. of Sunnyvale Calif. In yet another embodiment the appliance includes any application acceleration and or security related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco ACE Application Control Engine Module service software and network modules and Cisco AVS Series Application Velocity System.

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the serves may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . The servers of each farm do not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or medium area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications available to the client and address information associated with a server hosting an application identified by the enumeration of applications. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Referring now to an embodiment of a network environment deploying multiple appliances is depicted. A first appliance may be deployed on a first network and a second appliance on a second network . For example a corporate enterprise may deploy a first appliance at a branch office and a second appliance at a data center. In another embodiment the first appliance and second appliance are deployed on the same network or network . For example a first appliance may be deployed for a first server farm and a second appliance may be deployed for a second server farm . In another example a first appliance may be deployed at a first branch office while the second appliance is deployed at a second branch office . In some embodiments the first appliance and second appliance work in cooperation or in conjunction with each other to accelerate network traffic or the delivery of application and data between a client and a server

Referring now to another embodiment of a network environment deploying the appliance with one or more other types of appliances such as between one or more WAN optimization appliance is depicted. For example a first WAN optimization appliance is shown between networks and and s second WAN optimization appliance may be deployed between the appliance and one or more servers . By way of example a corporate enterprise may deploy a first WAN optimization appliance at a branch office and a second WAN optimization appliance at a data center. In some embodiments the appliance may be located on network . In other embodiments the appliance may be located on network . In some embodiments the appliance may be located on network or network . In one embodiment the appliance and are on the same network. In another embodiment the appliance and are on different networks. In another example a first WAN optimization appliance may be deployed for a first server farm and a second WAN optimization appliance for a second server farm 

In one embodiment the appliance is a device for accelerating optimizing or otherwise improving the performance operation or quality of service of any type and form of network traffic such as traffic to and or from a WAN connection. In some embodiments the appliance is a performance enhancing proxy. In other embodiments the appliance is any type and form of WAN optimization or acceleration device sometimes also referred to as a WAN optimization controller. In one embodiment the appliance is any of the product embodiments referred to as WANScaler manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In other embodiments the appliance includes any of the product embodiments referred to as BIG IP link controller and WANjet manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the WX and WXC WAN acceleration device platforms manufactured by Juniper Networks Inc. of Sunnyvale Calif. In some embodiments the appliance includes any of the steelhead line of WAN optimization appliances manufactured by Riverbed Technology of San Francisco Calif. In other embodiments the appliance includes any of the WAN related devices manufactured by Expand Networks Inc. of Roseland N.J. In one embodiment the appliance includes any of the WAN related appliances manufactured by Packeteer Inc. of Cupertino Calif. such as the PacketShaper iShared and SkyX product embodiments provided by Packeteer. In yet another embodiment the appliance includes any WAN related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco Wide Area Network Application Services software and network modules and Wide Area Network engine appliances.

In one embodiment the appliance provides application and data acceleration services for branch office or remote offices. In one embodiment the appliance includes optimization of Wide Area File Services WAFS . In another embodiment the appliance accelerates the delivery of files such as via the Common Internet File System CIFS protocol. In other embodiments the appliance provides caching in memory and or storage to accelerate delivery of applications and data. In one embodiment the appliance provides compression of network traffic at any level of the network stack or at any protocol or network layer. In another embodiment the appliance provides transport layer protocol optimizations flow control performance enhancements or modifications and or management to accelerate delivery of applications and data over a WAN connection. For example in one embodiment the appliance provides Transport Control Protocol TCP optimizations. In other embodiments the appliance provides optimizations flow control performance enhancements or modifications and or management for any session or application layer protocol.

In another embodiment the appliance encoded any type and form of data or information into custom or standard TCP and or IP header fields or option fields of network packet to announce presence functionality or capability to another appliance . In another embodiment an appliance may communicate with another appliance using data encoded in both TCP and or IP header fields or options. For example the appliance may use TCP option s or IP header fields or options to communicate one or more parameters to be used by the appliances in performing functionality such as WAN acceleration or for working in conjunction with each other.

In some embodiments the appliance preserves any of the information encoded in TCP and or IP header and or option fields communicated between appliances and . For example the appliance may terminate a transport layer connection traversing the appliance such as a transport layer connection from between a client and a server traversing appliances and . In one embodiment the appliance identifies and preserves any encoded information in a transport layer packet transmitted by a first appliance via a first transport layer connection and communicates a transport layer packet with the encoded information to a second appliance via a second transport layer connection.

Referring now to a network environment for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliance . For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client comprises a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The computing environment application and or data file may be delivered via the appliance and or the server .

In some embodiments the appliance accelerates delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of the company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . The appliance may provide acceleration techniques for accelerating any transport layer payload from a server to a client such as 1 transport layer connection pooling 2 transport layer connection multiplexing 3 transport control protocol buffering 4 compression and 5 caching. In some embodiments the appliance provides load balancing of servers in responding to requests from clients . In other embodiments the appliance acts as a proxy or access server to provide access to the one or more servers . In another embodiment the appliance provides a secure virtual private network connection from a first network of the client to the second network of the server such as an SSL VPN connection. It yet other embodiments the appliance provides application firewall security control and management of the connection and communications between a client and a server .

In some embodiments the application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. In another embodiment the application delivery system may deliver one or more applications to clients or users via steaming of the application.

In one embodiment the application delivery system includes a policy engine for controlling and managing the access to selection of application execution methods and the delivery of applications. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the local machine to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiments the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEx provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

Still referring to an embodiment of the network environment may include a monitoring server A. The monitoring server A may include any type and form performance monitoring service . The performance monitoring service may include monitoring measurement and or management software and or hardware including data collection aggregation analysis management and reporting. In one embodiment the performance monitoring service includes one or more monitoring agents . The monitoring agent includes any software hardware or combination thereof for performing monitoring measurement and data collection activities on a device such as a client server or an appliance . In some embodiments the monitoring agent includes any type and form of script such as Visual Basic script or Javascript. In one embodiment the monitoring agent executes transparently to any application and or user of the device. In some embodiments the monitoring agent is installed and operated unobtrusively to the application or client. In yet another embodiment the monitoring agent is installed and operated without any instrumentation for the application or device.

In some embodiments the monitoring agent monitors measures and collects data on a predetermined frequency. In other embodiments the monitoring agent monitors measures and collects data based upon detection of any type and form of event. For example the monitoring agent may collect data upon detection of a request for a web page or receipt of an HTTP response. In another example the monitoring agent may collect data upon detection of any user input events such as a mouse click. The monitoring agent may report or provide any monitored measured or collected data to the monitoring service . In one embodiment the monitoring agent transmits information to the monitoring service according to a schedule or a predetermined frequency. In another embodiment the monitoring agent transmits information to the monitoring service upon detection of an event.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of any network resource or network infrastructure element such as a client server server farm appliance appliance or network connection. In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any transport layer connection such as a TCP or UDP connection. In another embodiment the monitoring service and or monitoring agent monitors and measures network latency. In yet one embodiment the monitoring service and or monitoring agent monitors and measures bandwidth utilization.

In other embodiments the monitoring service and or monitoring agent monitors and measures end user response times. In some embodiments the monitoring service performs monitoring and performance measurement of an application. In another embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any session or connection to the application. In one embodiment the monitoring service and or monitoring agent monitors and measures performance of a browser. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of HTTP based transactions. In some embodiments the monitoring service and or monitoring agent monitors and measures performance of a Voice over IP VoIP application or session. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of a remote display protocol application such as an ICA client or RDP client. In yet another embodiment the monitoring service and or monitoring agent monitors and measures performance of any type and form of streaming media. In still a further embodiment the monitoring service and or monitoring agent monitors and measures performance of a hosted application or a Software As A Service SaaS delivery model.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of one or more transactions requests or responses related to application. In other embodiments the monitoring service and or monitoring agent monitors and measures any portion of an application layer stack such as any .NET or J2EE calls. In one embodiment the monitoring service and or monitoring agent monitors and measures database or SQL transactions. In yet another embodiment the monitoring service and or monitoring agent monitors and measures any method function or application programming interface API call.

In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of a delivery of application and or data from a server to a client via one or more appliances such as appliance and or appliance . In some embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a virtualized application. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a streaming application. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of delivery of a desktop application to a client and or the execution of the desktop application on the client. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of a client server application.

In one embodiment the monitoring service and or monitoring agent is designed and constructed to provide application performance management for the application delivery system . For example the monitoring service and or monitoring agent may monitor measure and manage the performance of the delivery of applications via the Citrix Presentation Server. In this example the monitoring service and or monitoring agent monitors individual ICA sessions. The monitoring service and or monitoring agent may measure the total and per session system resource usage as well as application and networking performance. The monitoring service and or monitoring agent may identify the active servers for a given user and or user session. In some embodiments the monitoring service and or monitoring agent monitors back end connections between the application delivery system and an application and or database server. The monitoring service and or monitoring agent may measure network latency delay and volume per user session or ICA session.

In some embodiments the monitoring service and or monitoring agent measures and monitors memory usage for the application delivery system such as total memory usage per user session and or per process. In other embodiments the monitoring service and or monitoring agent measures and monitors CPU usage the application delivery system such as total CPU usage per user session and or per process. In another embodiments the monitoring service and or monitoring agent measures and monitors the time required to log in to an application a server or the application delivery system such as Citrix Presentation Server. In one embodiment the monitoring service and or monitoring agent measures and monitors the duration a user is logged into an application a server or the application delivery system . In some embodiments the monitoring service and or monitoring agent measures and monitors active and inactive session counts for an application server or application delivery system session. In yet another embodiment the monitoring service and or monitoring agent measures and monitors user session latency.

In yet further embodiments the monitoring service and or monitoring agent measures and monitors measures and monitors any type and form of server metrics. In one embodiment the monitoring service and or monitoring agent measures and monitors metrics related to system memory CPU usage and disk storage. In another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to page faults such as page faults per second. In other embodiments the monitoring service and or monitoring agent measures and monitors round trip time metrics. In yet another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to application crashes errors and or hangs.

In some embodiments the monitoring service and monitoring agent includes any of the product embodiments referred to as EdgeSight manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In another embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TrueView product suite manufactured by the Symphoniq Corporation of Palo Alto Calif. In one embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TeaLeaf CX product suite manufactured by the TeaLeaf Technology Inc. of San Francisco Calif. In other embodiments the performance monitoring service and or monitoring agent includes any portion of the business service management products such as the BMC Performance Manager and Patrol products manufactured by BMC Software Inc. of Houston Tex.

The client server and appliance may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC 100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

As shown in the computing device may comprise multiple processors and may provide functionality for simultaneous execution of instructions or for simultaneous execution of one instruction on more than one piece of data. In some embodiments the computing device may comprise a parallel processor with one or more cores. In one of these embodiments the computing device is a shared memory parallel device with multiple processors and or multiple processor cores accessing all available memory as a single global address space. In another of these embodiments the computing device is a distributed memory parallel device with multiple processors each accessing local memory only. In still another of these embodiments the computing device has both some memory which is shared and some memory which can only be accessed by particular processors or subsets of processors. In still even another of these embodiments the computing device such as a multi core microprocessor combines two or more independent processors into a single package often a single integrated circuit IC . In yet another of these embodiments the computing device includes a chip having a CELL BROADBAND ENGINE architecture and including a Power processor element and a plurality of synergistic processing elements the Power processor element and the plurality of synergistic processing elements linked together by an internal high speed bus which may be referred to as an element interconnect bus.

In some embodiments the processors provide functionality for execution of a single instruction simultaneously on multiple pieces of data SIMD . In other embodiments the processors provide functionality for execution of multiple instructions simultaneously on multiple pieces of data MIMD . In still other embodiments the processor may use any combination of SIMD and MIMD cores in a single device.

In some embodiments the computing device may comprise a graphics processing unit. In one of these embodiments depicted in the computing device includes at least one central processing unit and at least one graphics processing unit. In another of these embodiments the computing device includes at least one parallel processing unit and at least one graphics processing unit. In still another of these embodiments the computing device includes a plurality of processing units of any type one of the plurality of processing units comprising a graphics processing unit.

In some embodiments a first computing device executes an application on behalf of a user of a client computing device . In other embodiments a computing device executes a virtual machine which provides an execution session within which applications execute on behalf of a user or a client computing devices . In one of these embodiments the execution session is a hosted desktop session. In another of these embodiments the computing device executes a terminal services session. The terminal services session may provide a hosted desktop environment. In still another of these embodiments the execution session provides access to a computing environment which may comprise one or more of an application a plurality of applications a desktop application and a desktop session in which one or more applications may execute.

Hardware layer provides the hardware elements upon which programs and services within kernel space and user space are executed. Hardware layer also provides the structures and elements which allow programs and services within kernel space and user space to communicate data both internally and externally with respect to appliance . As shown in the hardware layer includes a processing unit for executing software programs and services a memory for storing software and data network ports for transmitting and receiving data over a network and an encryption processor for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . The processor may include any of the processors described above in connection with . For example in one embodiment the appliance comprises a first processor and a second processor . In other embodiments the processor or comprises a multi core processor.

Although the hardware layer of appliance is generally illustrated with an encryption processor processor may be a processor for performing functions related to any encryption protocol such as the Secure Socket Layer SSL or Transport Layer Security TLS protocol. In some embodiments the processor may be a general purpose processor GPP and in further embodiments may have executable instructions for performing processing of any security related protocol.

Although the hardware layer of appliance is illustrated with certain elements in the hardware portions or components of appliance may comprise any type and form of elements hardware or software of a computing device such as the computing device illustrated and discussed herein in conjunction with . In some embodiments the appliance may comprise a server gateway router switch bridge or other type of computing or network device and have any hardware and or software elements associated therewith.

The operating system of appliance allocates manages or otherwise segregates the available system memory into kernel space and user space . In example software architecture the operating system may be any type and or form of Unix operating system although the invention is not so limited. As such the appliance can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any network operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or network devices or any other operating system capable of running on the appliance and performing the operations described herein.

The kernel space is reserved for running the kernel including any device drivers kernel extensions or other kernel related software. As known to those skilled in the art the kernel is the core of the operating system and provides access control and management of resources and hardware related elements of the application . In accordance with an embodiment of the appliance the kernel space also includes a number of network services or processes working in conjunction with a cache manager sometimes also referred to as the integrated cache the benefits of which are described in detail further herein. Additionally the embodiment of the kernel will depend on the embodiment of the operating system installed configured or otherwise used by the device .

In one embodiment the device comprises one network stack such as a TCP IP based stack for communicating with the client and or the server . In one embodiment the network stack is used to communicate with a first network such as network and a second network . In some embodiments the device terminates a first transport layer connection such as a TCP connection of a client and establishes a second transport layer connection to a server for use by the client e.g. the second transport layer connection is terminated at the appliance and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments the device may comprise multiple network stacks for example and and the first transport layer connection may be established or terminated at one network stack and the second transport layer connection on the second network stack . For example one network stack may be for receiving and transmitting network packet on a first network and another network stack for receiving and transmitting network packets on a second network. In one embodiment the network stack comprises a buffer for queuing one or more network packets for transmission by the appliance .

As shown in the kernel space includes the cache manager a high speed layer 2 7 integrated packet engine an encryption engine a policy engine and multi protocol compression logic . Running these components or processes and in kernel space or kernel mode instead of the user space improves the performance of each of these components alone and in combination. Kernel operation means that these components or processes and run in the core address space of the operating system of the device . For example running the encryption engine in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode such as from a kernel level data structure to a user level data structure. In another aspect the number of context switches between kernel mode and user mode are also reduced. Additionally synchronization of and communications between any of the components or processes and can be performed more efficiently in the kernel space .

In some embodiments any portion of the components and may run or operate in the kernel space while other portions of these components and may run or operate in user space . In one embodiment the appliance uses a kernel level data structure providing access to any portion of one or more network packets for example a network packet comprising a request from a client or a response from a server . In some embodiments the kernel level data structure may be obtained by the packet engine via a transport layer driver interface or filter to the network stack . The kernel level data structure may comprise any interface and or data accessible via the kernel space related to the network stack network traffic or packets received or transmitted by the network stack . In other embodiments the kernel level data structure may be used by any of the components or processes and to perform the desired operation of the component or process. In one embodiment a component and is running in kernel mode when using the kernel level data structure while in another embodiment the component and is running in user mode when using the kernel level data structure. In some embodiments the kernel level data structure may be copied or passed to a second kernel level data structure or any desired user level data structure.

The cache manager may comprise software hardware or any combination of software and hardware to provide cache access control and management of any type and form of content such as objects or dynamically generated objects served by the originating servers . The data objects or content processed and stored by the cache manager may comprise data in any format such as a markup language or communicated via any protocol. In some embodiments the cache manager duplicates original data stored elsewhere or data previously computed generated or transmitted in which the original data may require longer access time to fetch compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element future use can be made by accessing the cached copy rather than refetching or recomputing the original data thereby reducing the access time. In some embodiments the cache memory element may comprise a data object in memory of device . In other embodiments the cache memory element may comprise memory having a faster access time than memory . In another embodiment the cache memory element may comprise any type and form of storage element of the device such as a portion of a hard disk. In some embodiments the processing unit may provide cache memory for use by the cache manager . In yet further embodiments the cache manager may use any portion and combination of memory storage or the processing unit for caching data objects and other content.

Furthermore the cache manager includes any logic functions rules or operations to perform any embodiments of the techniques of the appliance described herein. For example the cache manager includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client or server . In some embodiments the cache manager may operate as a program service process or task executing in the kernel space and in other embodiments in the user space . In one embodiment a first portion of the cache manager executes in the user space while a second portion executes in the kernel space . In some embodiments the cache manager can comprise any type of general purpose processor GPP or any other type of integrated circuit such as a Field Programmable Gate Array FPGA Programmable Logic Device PLD or Application Specific Integrated Circuit ASIC .

The policy engine may include for example an intelligent statistical engine or other programmable application s . In one embodiment the policy engine provides a configuration mechanism to allow a user to identify specify define or configure a caching policy. Policy engine in some embodiments also has access to memory to support data structures such as lookup tables or hash tables to enable user selected caching policy decisions. In other embodiments the policy engine may comprise any logic rules functions or operations to determine and provide access control and management of objects data or content being cached by the appliance in addition to access control and management of security network traffic network access compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.

The encryption engine comprises any logic business rules functions or operations for handling the processing of any security related protocol such as SSL or TLS or any function related thereto. For example the encryption engine encrypts and decrypts network packets or any portion thereof communicated via the appliance . The encryption engine may also setup or establish SSL or TLS connections on behalf of the client server or appliance . As such the encryption engine provides offloading and acceleration of SSL processing. In one embodiment the encryption engine uses a tunneling protocol to provide a virtual private network between a client and a server . In some embodiments the encryption engine is in communication with the Encryption processor . In other embodiments the encryption engine comprises executable instructions running on the Encryption processor .

The multi protocol compression engine comprises any logic business rules function or operations for compressing one or more protocols of a network packet such as any of the protocols used by the network stack of the device . In one embodiment multi protocol compression engine compresses bi directionally between clients and servers any TCP IP based protocol including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In other embodiments multi protocol compression engine provides compression of Hypertext Markup Language HTML based protocols and in some embodiments provides compression of any markup languages such as the Extensible Markup Language XML . In one embodiment the multi protocol compression engine provides compression of any high performance protocol such as any protocol designed for appliance to appliance communications. In another embodiment the multi protocol compression engine compresses any payload of or any communication using a modified transport control protocol such as Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol.

As such the multi protocol compression engine accelerates performance for users accessing applications via desktop clients e.g. Microsoft Outlook and non Web thin clients such as any client launched by popular enterprise applications like Oracle SAP and Siebel and even mobile clients such as the Pocket PC. In some embodiments the multi protocol compression engine by executing in the kernel mode and integrating with packet processing engine accessing the network stack is able to compress any of the protocols carried by the TCP IP protocol such as any application layer protocol.

High speed layer 2 7 integrated packet engine also generally referred to as a packet processing engine or packet engine is responsible for managing the kernel level processing of packets received and transmitted by appliance via network ports . The high speed layer 2 7 integrated packet engine may comprise a buffer for queuing one or more network packets during processing such as for receipt of a network packet or transmission of a network packet. Additionally the high speed layer 2 7 integrated packet engine is in communication with one or more network stacks to send and receive network packets via network ports . The high speed layer 2 7 integrated packet engine works in conjunction with encryption engine cache manager policy engine and multi protocol compression logic . In particular encryption engine is configured to perform SSL processing of packets policy engine is configured to perform functions related to traffic management such as request level content switching and request level cache redirection and multi protocol compression logic is configured to perform functions related to compression and decompression of data.

The high speed layer 2 7 integrated packet engine includes a packet processing timer . In one embodiment the packet processing timer provides one or more time intervals to trigger the processing of incoming i.e. received or outgoing i.e. transmitted network packets. In some embodiments the high speed layer 2 7 integrated packet engine processes network packets responsive to the timer . The packet processing timer provides any type and form of signal to the packet engine to notify trigger or communicate a time related event interval or occurrence. In many embodiments the packet processing timer operates in the order of milliseconds such as for example 100 ms 50 ms or 25 ms. For example in some embodiments the packet processing timer provides time intervals or otherwise causes a network packet to be processed by the high speed layer 2 7 integrated packet engine at a 10 ms time interval while in other embodiments at a 5 ms time interval and still yet in further embodiments as short as a 3 2 or 1 ms time interval. The high speed layer 2 7 integrated packet engine may be interfaced integrated or in communication with the encryption engine cache manager policy engine and multi protocol compression engine during operation. As such any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed responsive to the packet processing timer and or the packet engine . Therefore any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed at the granularity of time intervals provided via the packet processing timer for example at a time interval of less than or equal to 10 ms. For example in one embodiment the cache manager may perform invalidation of any cached objects responsive to the high speed layer 2 7 integrated packet engine and or the packet processing timer . In another embodiment the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer such as at every 10 ms.

In contrast to kernel space user space is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space directly and uses service calls in order to access kernel services. As shown in user space of appliance includes a graphical user interface GUI a command line interface CLI shell services health monitoring program and daemon services . GUI and CLI provide a means by which a system administrator or other user can interact with and control the operation of appliance such as via the operating system of the appliance . The GUI or CLI can comprise code running in user space or kernel space . The GUI may be any type and form of graphical user interface and may be presented via text graphical or otherwise by any type of program or application such as a browser. The CLI may be any type and form of command line or text based interface such as a command line provided by the operating system. For example the CLI may comprise a shell which is a tool to enable users to interact with the operating system. In some embodiments the CLI may be provided via a bash csh tcsh or ksh type shell. The shell services comprises the programs services tasks processes or executable instructions to support interaction with the appliance or operating system by a user via the GUI and or CLI .

Health monitoring program is used to monitor check report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program comprises one or more programs services tasks processes or executable instructions to provide logic rules functions or operations for monitoring any activity of the appliance . In some embodiments the health monitoring program intercepts and inspects any network traffic passed via the appliance . In other embodiments the health monitoring program interfaces by any suitable means and or mechanisms with one or more of the following the encryption engine cache manager policy engine multi protocol compression logic packet engine daemon services and shell services . As such the health monitoring program may call any application programming interface API to determine a state status or health of any portion of the appliance . For example the health monitoring program may ping or send a status inquiry on a periodic basis to check if a program process service or task is active and currently running. In another example the health monitoring program may check any status error or history logs provided by any program process service or task to determine any condition status or error with any portion of the appliance .

Daemon services are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments a daemon service may forward the requests to other programs or processes such as another daemon service as appropriate. As known to those skilled in the art a daemon service may run unattended to perform continuous or periodic system wide functions such as network control or to perform any desired task. In some embodiments one or more daemon services run in the user space while in other embodiments one or more daemon services run in the kernel space.

Referring now to another embodiment of the appliance is depicted. In brief overview the appliance provides one or more of the following services functionality or operations SSL VPN connectivity switching load balancing Domain Name Service resolution acceleration and an application firewall for communications between one or more clients and one or more servers . Each of the servers may provide one or more network related services referred to as services . For example a server may provide an http service . The appliance comprises one or more virtual servers or virtual internet protocol servers referred to as a vServer VIP server or just VIP also referred herein as vServer . The vServer receives intercepts or otherwise processes communications between a client and a server in accordance with the configuration and operations of the appliance .

The vServer may comprise software hardware or any combination of software and hardware. The vServer may comprise any type and form of program service task process or executable instructions operating in user mode kernel mode or any combination thereof in the appliance . The vServer includes any logic functions rules or operations to perform any embodiments of the techniques described herein such as SSL VPN switching load balancing Domain Name Service resolution acceleration and an application firewall . In some embodiments the vServer establishes a connection to a service of a server . The service may comprise any program application process task or set of executable instructions capable of connecting to and communicating to the appliance client or vServer . For example the service may comprise a web server http server ftp email or database server. In some embodiments the service is a daemon process or network driver for listening receiving and or sending communications for an application such as email database or an enterprise application. In some embodiments the service may communicate on a specific IP address or IP address and port.

In some embodiments the vServer applies one or more policies of the policy engine to network communications between the client and server . In one embodiment the policies are associated with a VServer . In another embodiment the policies are based on a user or a group of users. In yet another embodiment a policy is global and applies to one or more vServers and any user or group of users communicating via the appliance . In some embodiments the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication such as internet protocol address port protocol type header or fields in a packet or the context of the communication such as user group of the user vServer transport layer connection and or identification or attributes of the client or server .

In other embodiments the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to access the computing environment application and or data file from a server . In another embodiment the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to have the application delivery system deliver one or more of the computing environment application and or data file. In yet another embodiment the appliance establishes a VPN or SSL VPN connection based on the policy engine s authentication and or authorization of a remote user or a remote client In one embodiment the appliance controls the flow of network traffic and communication sessions based on policies of the policy engine . For example the appliance may control the access to a computing environment application or data file based on the policy engine .

In some embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client via the client agent . In one embodiment the vServer listens for and receives communications from the client . In other embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client server . In one embodiment the vServer establishes the transport layer connection to an internet protocol address and port of a server running on the server . In another embodiment the vServer associates a first transport layer connection to a client with a second transport layer connection to the server . In some embodiments a vServer establishes a pool of transport layer connections to a server and multiplexes client requests via the pooled transport layer connections.

In some embodiments the appliance provides a SSL VPN connection between a client and a server . For example a client on a first network requests to establish a connection to a server on a second network . In some embodiments the second network is not routable from the first network . In other embodiments the client is on a public network and the server is on a private network such as a corporate network. In one embodiment the client agent intercepts communications of the client on the first network encrypts the communications and transmits the communications via a first transport layer connection to the appliance . The appliance associates the first transport layer connection on the first network to a second transport layer connection to the server on the second network . The appliance receives the intercepted communication from the client agent decrypts the communications and transmits the communication to the server on the second network via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such the appliance provides an end to end secure transport layer connection for the client between the two networks .

In one embodiment the appliance hosts an intranet internet protocol or intranetIP address of the client on the virtual private network . The client has a local network identifier such as an internet protocol IP address and or host name on the first network . When connected to the second network via the appliance the appliance establishes assigns or otherwise provides an IntranetIP which is network identifier such as IP address and or host name for the client on the second network . The appliance listens for and receives on the second or private network for any communications directed towards the client using the client s established IntranetIP . In one embodiment the appliance acts as or on behalf of the client on the second private network . For example in another embodiment a vServer listens for and responds to communications to the IntranetIP of the client . In some embodiments if a computing device on the second network transmits a request the appliance processes the request as if it were the client . For example the appliance may respond to a ping to the client s IntranetIP . In another example the appliance may establish a connection such as a TCP or UDP connection with computing device on the second network requesting a connection with the client s IntranetIP .

In some embodiments the appliance provides one or more of the following acceleration techniques to communications between the client and server 1 compression 2 decompression 3 Transmission Control Protocol pooling 4 Transmission Control Protocol multiplexing 5 Transmission Control Protocol buffering and 6 caching. In one embodiment the appliance relieves servers of much of the processing load caused by repeatedly opening and closing transport layers connections to clients by opening one or more transport layer connections with each server and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as connection pooling .

In some embodiments in order to seamlessly splice communications from a client to a server via a pooled transport layer connection the appliance translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as connection multiplexing . In some embodiments no application layer protocol interaction is required. For example in the case of an in bound packet that is a packet received from a client the source network address of the packet is changed to that of an output port of appliance and the destination network address is changed to that of the intended server. In the case of an outbound packet that is one received from a server the source network address is changed from that of the server to that of an output port of appliance and the destination address is changed from that of appliance to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement expected by the client on the appliance s transport layer connection to the client . In some embodiments the packet checksum of the transport layer protocol is recalculated to account for these translations.

In another embodiment the appliance provides switching or load balancing functionality for communications between the client and server . In some embodiments the appliance distributes traffic and directs client requests to a server based on layer 4 or application layer request data. In one embodiment although the network layer or layer 2 of the network packet identifies a destination server the appliance determines the server to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment the health monitoring programs of the appliance monitor the health of servers to determine the server for which to distribute a client s request. In some embodiments if the appliance detects a server is not available or has a load over a predetermined threshold the appliance can direct or distribute client requests to another server .

In some embodiments the appliance acts as a Domain Name Service DNS resolver or otherwise provides resolution of a DNS request from clients . In some embodiments the appliance intercepts a DNS request transmitted by the client . In one embodiment the appliance responds to a client s DNS request with an IP address of or hosted by the appliance . In this embodiment the client transmits network communication for the domain name to the appliance . In another embodiment the appliance responds to a client s DNS request with an IP address of or hosted by a second appliance . In some embodiments the appliance responds to a client s DNS request with an IP address of a server determined by the appliance .

In yet another embodiment the appliance provides application firewall functionality for communications between the client and server . In one embodiment the policy engine provides rules for detecting and blocking illegitimate requests. In some embodiments the application firewall protects against denial of service DoS attacks. In other embodiments the appliance inspects the content of intercepted requests to identify and block application based attacks. In some embodiments the rules policy engine comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities such as one or more of the following 1 buffer overflow 2 CGI BIN parameter manipulation 3 form hidden field manipulation 4 forceful browsing 5 cookie or session poisoning 6 broken access control list ACLs or weak passwords 7 cross site scripting XSS 8 command injection 9 SQL injection 10 error triggering sensitive information leak 11 insecure use of cryptography 12 server misconfiguration 13 back doors and debug options 14 website defacement 15 platform or operating systems vulnerabilities and 16 zero day exploits. In an embodiment the application firewall provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following 1 required fields are returned 2 no added field allowed 3 read only and hidden field enforcement 4 drop down list and radio button field conformance and 5 form field max length enforcement. In some embodiments the application firewall ensures cookies are not modified. In other embodiments the application firewall protects against forceful browsing by enforcing legal URLs.

In still yet other embodiments the application firewall protects any confidential information contained in the network communication. The application firewall may inspect or analyze any network communication in accordance with the rules or polices of the engine to identify any confidential information in any field of the network packet. In some embodiments the application firewall identifies in the network communication one or more occurrences of a credit card number password social security number name patient code contact information and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences in one embodiment the application firewall may take a policy action on the network communication such as prevent transmission of the network communication. In another embodiment the application firewall may rewrite remove or otherwise mask such identified occurrence or confidential information.

Still referring to the appliance may include a performance monitoring agent as discussed above in conjunction with . In one embodiment the appliance receives the monitoring agent from the monitoring service or monitoring server as depicted in . In some embodiments the appliance stores the monitoring agent in storage such as disk for delivery to any client or server in communication with the appliance . For example in one embodiment the appliance transmits the monitoring agent to a client upon receiving a request to establish a transport layer connection. In other embodiments the appliance transmits the monitoring agent upon establishing the transport layer connection with the client . In another embodiment the appliance transmits the monitoring agent to the client upon intercepting or detecting a request for a web page. In yet another embodiment the appliance transmits the monitoring agent to a client or a server in response to a request from the monitoring server . In one embodiment the appliance transmits the monitoring agent to a second appliance or appliance .

In other embodiments the appliance executes the monitoring agent . In one embodiment the monitoring agent measures and monitors the performance of any application program process service task or thread executing on the appliance . For example the monitoring agent may monitor and measure performance and operation of vServers A N. In another embodiment the monitoring agent measures and monitors the performance of any transport layer connections of the appliance . In some embodiments the monitoring agent measures and monitors the performance of any user sessions traversing the appliance . In one embodiment the monitoring agent measures and monitors the performance of any virtual private network connections and or sessions traversing the appliance such an SSL VPN session. In still further embodiments the monitoring agent measures and monitors the memory CPU and disk usage and performance of the appliance . In yet another embodiment the monitoring agent measures and monitors the performance of any acceleration technique performed by the appliance such as SSL offloading connection pooling and multiplexing caching and compression. In some embodiments the monitoring agent measures and monitors the performance of any load balancing and or content switching performed by the appliance . In other embodiments the monitoring agent measures and monitors the performance of application firewall protection and processing performed by the appliance .

Referring now to an embodiment of the client agent is depicted. The client includes a client agent for establishing and exchanging communications with the appliance and or server via a network . In brief overview the client operates on computing device having an operating system with a kernel mode and a user mode and a network stack with one or more layers . The client may have installed and or execute one or more applications. In some embodiments one or more applications may communicate via the network stack to a network . One of the applications such as a web browser may also include a first program . For example the first program may be used in some embodiments to install and or execute the client agent or any portion thereof. The client agent includes an interception mechanism or interceptor for intercepting network communications from the network stack from the one or more applications.

The network stack of the client may comprise any type and form of software or hardware or any combinations thereof for providing connectivity to and communications with a network. In one embodiment the network stack comprises a software implementation for a network protocol suite. The network stack may comprise one or more network layers such as any networks layers of the Open Systems Interconnection OSI communications model as those skilled in the art recognize and appreciate. As such the network stack may comprise any type and form of protocols for any of the following layers of the OSI model 1 physical link layer 2 data link layer 3 network layer 4 transport layer 5 session layer 6 presentation layer and 7 application layer. In one embodiment the network stack may comprise a transport control protocol TCP over the network layer protocol of the internet protocol IP generally referred to as TCP IP. In some embodiments the TCP IP protocol may be carried over the Ethernet protocol which may comprise any of the family of IEEE wide area network WAN or local area network LAN protocols such as those protocols covered by the IEEE 802.3. In some embodiments the network stack comprises any type and form of a wireless protocol such as IEEE 802.11 and or mobile internet protocol.

In view of a TCP IP based network any TCP IP based protocol may be used including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In another embodiment the network stack comprises any type and form of transport control protocol such as a modified transport control protocol for example a Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol. In other embodiments any type and form of user datagram protocol UDP such as UDP over IP may be used by the network stack such as for voice communications or real time data communications.

Furthermore the network stack may include one or more network drivers supporting the one or more layers such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device or as part of any network interface cards or other network access components of the computing device . In some embodiments any of the network drivers of the network stack may be customized modified or adapted to provide a custom or modified portion of the network stack in support of any of the techniques described herein. In other embodiments the acceleration program is designed and constructed to operate with or work in conjunction with the network stack installed or otherwise provided by the operating system of the client .

The network stack comprises any type and form of interfaces for receiving obtaining providing or otherwise accessing any information and data related to network communications of the client . In one embodiment an interface to the network stack comprises an application programming interface API . The interface may also comprise any function call hooking or filtering mechanism event or call back mechanism or any type of interfacing technique. The network stack via the interface may receive or provide any type and form of data structure such as an object related to functionality or operation of the network stack . For example the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments the data structure comprises a portion of the network packet processed at a protocol layer of the network stack such as a network packet of the transport layer. In some embodiments the data structure comprises a kernel level data structure while in other embodiments the data structure comprises a user mode data structure. A kernel level data structure may comprise a data structure obtained or related to a portion of the network stack operating in kernel mode or a network driver or other software running in kernel mode or any data structure obtained or received by a service process task thread or other executable instructions running or operating in kernel mode of the operating system.

Additionally some portions of the network stack may execute or operate in kernel mode for example the data link or network layer while other portions execute or operate in user mode such as an application layer of the network stack . For example a first portion of the network stack may provide user mode access to the network stack to an application while a second portion of the network stack provides access to a network. In some embodiments a first portion of the network stack may comprise one or more upper layers of the network stack such as any of layers . In other embodiments a second portion of the network stack comprises one or more lower layers such as any of layers . Each of the first portion and second portion of the network stack may comprise any portion of the network stack at any one or more network layers in user mode kernel mode or combinations thereof or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user mode and kernel mode .

The interceptor may comprise software hardware or any combination of software and hardware. In one embodiment the interceptor intercept a network communication at any point in the network stack and redirects or transmits the network communication to a destination desired managed or controlled by the interceptor or client agent . For example the interceptor may intercept a network communication of a network stack of a first network and transmit the network communication to the appliance for transmission on a second network . In some embodiments the interceptor comprises any type interceptor comprises a driver such as a network driver constructed and designed to interface and work with the network stack . In some embodiments the client agent and or interceptor operates at one or more layers of the network stack such as at the transport layer. In one embodiment the interceptor comprises a filter driver hooking mechanism or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack such as via the transport driver interface TDI . In some embodiments the interceptor interfaces to a first protocol layer such as the transport layer and another protocol layer such as any layer above the transport protocol layer for example an application protocol layer. In one embodiment the interceptor may comprise a driver complying with the Network Driver Interface Specification NDIS or a NDIS driver. In another embodiment the interceptor may comprise a min filter or a mini port driver. In one embodiment the interceptor or portion thereof operates in kernel mode . In another embodiment the interceptor or portion thereof operates in user mode . In some embodiments a portion of the interceptor operates in kernel mode while another portion of the interceptor operates in user mode . In other embodiments the client agent operates in user mode but interfaces via the interceptor to a kernel mode driver process service task or portion of the operating system such as to obtain a kernel level data structure . In further embodiments the interceptor is a user mode application or program such as application.

In one embodiment the interceptor intercepts any transport layer connection requests. In these embodiments the interceptor execute transport layer application programming interface API calls to set the destination information such as destination IP address and or port to a desired location for the location. In this manner the interceptor intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor or client agent . In one embodiment the interceptor sets the destination information for the connection to a local IP address and port of the client on which the client agent is listening. For example the client agent may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments the client agent then communicates the redirected transport layer communication to the appliance .

In some embodiments the interceptor intercepts a Domain Name Service DNS request. In one embodiment the client agent and or interceptor resolves the DNS request. In another embodiment the interceptor transmits the intercepted DNS request to the appliance for DNS resolution. In one embodiment the appliance resolves the DNS request and communicates the DNS response to the client agent . In some embodiments the appliance resolves the DNS request via another appliance or a DNS server .

In yet another embodiment the client agent may comprise two agents and . In one embodiment a first agent may comprise an interceptor operating at the network layer of the network stack . In some embodiments the first agent intercepts network layer requests such as Internet Control Message Protocol ICMP requests e.g. ping and traceroute . In other embodiments the second agent may operate at the transport layer and intercept transport layer communications. In some embodiments the first agent intercepts communications at one layer of the network stack and interfaces with or communicates the intercepted communication to the second agent .

The client agent and or interceptor may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example in one embodiment the interceptor operates or interfaces with the transport layer of the network stack transparently to any protocol layer below the transport layer such as the network layer and any protocol layer above the transport layer such as the session presentation or application layer protocols. This allows the other protocol layers of the network stack to operate as desired and without modification for using the interceptor . As such the client agent and or interceptor can interface with the transport layer to secure optimize accelerate route or load balance any communications provided via any protocol carried by the transport layer such as any application layer protocol over TCP IP.

Furthermore the client agent and or interceptor may operate at or interface with the network stack in a manner transparent to any application a user of the client and any other computing device such as a server in communications with the client . The client agent and or interceptor may be installed and or executed on the client in a manner without modification of an application. In some embodiments the user of the client or a computing device in communications with the client are not aware of the existence execution or operation of the client agent and or interceptor . As such in some embodiments the client agent and or interceptor is installed executed and or operated transparently to an application user of the client another computing device such as a server or any of the protocol layers above and or below the protocol layer interfaced to by the interceptor .

The client agent includes an acceleration program a streaming client a collection agent and or monitoring agent . In one embodiment the client agent comprises an Independent Computing Architecture ICA client or any portion thereof developed by Citrix Systems Inc. of Fort Lauderdale Fla. and is also referred to as an ICA client. In some embodiments the client comprises an application streaming client for streaming an application from a server to a client . In some embodiments the client agent comprises an acceleration program for accelerating communications between client and server . In another embodiment the client agent includes a collection agent for performing end point detection scanning and collecting end point information for the appliance and or server .

In some embodiments the acceleration program comprises a client side acceleration program for performing one or more acceleration techniques to accelerate enhance or otherwise improve a client s communications with and or access to a server such as accessing an application provided by a server . The logic functions and or operations of the executable instructions of the acceleration program may perform one or more of the following acceleration techniques 1 multi protocol compression 2 transport control protocol pooling 3 transport control protocol multiplexing 4 transport control protocol buffering and 5 caching via a cache manager. Additionally the acceleration program may perform encryption and or decryption of any communications received and or transmitted by the client . In some embodiments the acceleration program performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally the acceleration program can perform compression on any of the protocols or multiple protocols carried as a payload of a network packet of the transport layer protocol.

The streaming client comprises an application program process service task or executable instructions for receiving and executing a streamed application from a server . A server may stream one or more application data files to the streaming client for playing executing or otherwise causing to be executed the application on the client . In some embodiments the server transmits a set of compressed or packaged application data files to the streaming client . In some embodiments the plurality of application files are compressed and stored on a file server within an archive file such as a CAB ZIP SIT TAR JAR or other archive. In one embodiment the server decompresses unpackages or unarchives the application files and transmits the files to the client . In another embodiment the client decompresses unpackages or unarchives the application files. The streaming client dynamically installs the application or portion thereof and executes the application. In one embodiment the streaming client may be an executable program. In some embodiments the streaming client may be able to launch another executable program.

The collection agent comprises an application program process service task or executable instructions for identifying obtaining and or collecting information about the client . In some embodiments the appliance transmits the collection agent to the client or client agent . The collection agent may be configured according to one or more policies of the policy engine of the appliance. In other embodiments the collection agent transmits collected information on the client to the appliance . In one embodiment the policy engine of the appliance uses the collected information to determine and provide access authentication and authorization control of the client s connection to a network .

In one embodiment the collection agent comprises an end point detection and scanning mechanism which identifies and determines one or more attributes or characteristics of the client. For example the collection agent may identify and determine any one or more of the following client side attributes 1 the operating system an or a version of an operating system 2 a service pack of the operating system 3 a running service 4 a running process and 5 a file. The collection agent may also identify and determine the presence or versions of any one or more of the following on the client 1 antivirus software 2 personal firewall software 3 anti spam software and 4 internet security software. The policy engine may have one or more policies based on any one or more of the attributes or characteristics of the client or client side attributes.

In some embodiments the client agent includes a monitoring agent as discussed in conjunction with . The monitoring agent may be any type and form of script such as Visual Basic or Java script. In one embodiment the monitoring agent monitors and measures performance of any portion of the client agent . For example in some embodiments the monitoring agent monitors and measures performance of the acceleration program . In another embodiment the monitoring agent monitors and measures performance of the streaming client . In other embodiments the monitoring agent monitors and measures performance of the collection agent . In still another embodiment the monitoring agent monitors and measures performance of the interceptor . In some embodiments the monitoring agent monitors and measures any resource of the client such as memory CPU and disk.

The monitoring agent may monitor and measure performance of any application of the client. In one embodiment the monitoring agent monitors and measures performance of a browser on the client . In some embodiments the monitoring agent monitors and measures performance of any application delivered via the client agent . In other embodiments the monitoring agent measures and monitors end user response times for an application such as web based or HTTP response times. The monitoring agent may monitor and measure performance of an ICA or RDP client. In another embodiment the monitoring agent measures and monitors metrics for a user session or application session. In some embodiments monitoring agent measures and monitors an ICA or RDP session. In one embodiment the monitoring agent measures and monitors the performance of the appliance in accelerating delivery of an application and or data to the client .

In some embodiments and still referring to a first program may be used to install and or execute the client agent or portion thereof such as the interceptor automatically silently transparently or otherwise. In one embodiment the first program comprises a plugin component such an ActiveX control or Java control or script that is loaded into and executed by an application. For example the first program comprises an ActiveX control loaded and run by a web browser application such as in the memory space or context of the application. In another embodiment the first program comprises a set of executable instructions loaded into and run by the application such as a browser. In one embodiment the first program comprises a designed and constructed program to install the client agent . In some embodiments the first program obtains downloads or receives the client agent via the network from another computing device. In another embodiment the first program is an installer program or a plug and play manager for installing programs such as network drivers on the operating system of the client .

Referring now to a block diagram depicts one embodiment of a virtualization environment . In brief overview a computing device includes a hypervisor layer a virtualization layer and a hardware layer. The hypervisor layer includes a hypervisor also referred to as a virtualization manager that allocates and manages access to a number of physical resources in the hardware layer e.g. the processor s and disk s by at least one virtual machine executing in the virtualization layer. The virtualization layer includes at least one operating system and a plurality of virtual resources allocated to the at least one operating system . Virtual resources may include without limitation a plurality of virtual processors generally and virtual disks generally as well as virtual resources such as virtual memory and virtual network interfaces. The plurality of virtual resources and the operating system may be referred to as a virtual machine . A virtual machine may include a control operating system in communication with the hypervisor and used to execute applications for managing and configuring other virtual machines on the computing device .

In greater detail a hypervisor may provide virtual resources to an operating system in any manner which simulates the operating system having access to a physical device. A hypervisor may provide virtual resources to any number of guest operating systems generally . In some embodiments a computing device executes one or more types of hypervisors. In these embodiments hypervisors may be used to emulate virtual hardware partition physical hardware virtualize physical hardware and execute virtual machines that provide access to computing environments. Hypervisors may include those manufactured by VMWare Inc. of Palo Alto Calif. the XEN hypervisor an open source product whose development is overseen by the open source Xen.org community HyperV VirtualServer or virtual PC hypervisors provided by Microsoft or others. In some embodiments a computing device executing a hypervisor that creates a virtual machine platform on which guest operating systems may execute is referred to as a host server. In one of these embodiments for example the computing device is a XEN SERVER provided by Citrix Systems Inc. of Fort Lauderdale Fla.

In some embodiments a hypervisor executes within an operating system executing on a computing device. In one of these embodiments a computing device executing an operating system and a hypervisor may be said to have a host operating system the operating system executing on the computing device and a guest operating system an operating system executing within a computing resource partition provided by the hypervisor . In other embodiments a hypervisor interacts directly with hardware on a computing device instead of executing on a host operating system. In one of these embodiments the hypervisor may be said to be executing on bare metal referring to the hardware comprising the computing device.

In some embodiments a hypervisor may create a virtual machine generally in which an operating system executes. In one of these embodiments for example the hypervisor loads a virtual machine image to create a virtual machine . In another of these embodiments the hypervisor executes an operating system within the virtual machine . In still another of these embodiments the virtual machine executes an operating system .

In some embodiments the hypervisor controls processor scheduling and memory partitioning for a virtual machine executing on the computing device . In one of these embodiments the hypervisor controls the execution of at least one virtual machine . In another of these embodiments the hypervisor presents at least one virtual machine with an abstraction of at least one hardware resource provided by the computing device . In other embodiments the hypervisor controls whether and how physical processor capabilities are presented to the virtual machine .

A control operating system may execute at least one application for managing and configuring the guest operating systems. In one embodiment the control operating system may execute an administrative application such as an application including a user interface providing administrators with access to functionality for managing the execution of a virtual machine including functionality for executing a virtual machine terminating an execution of a virtual machine or identifying a type of physical resource for allocation to the virtual machine. In another embodiment the hypervisor executes the control operating system within a virtual machine created by the hypervisor . In still another embodiment the control operating system executes in a virtual machine that is authorized to directly access physical resources on the computing device . In some embodiments a control operating system on a computing device may exchange data with a control operating system on a computing device via communications between a hypervisor and a hypervisor . In this way one or more computing devices may exchange data with one or more of the other computing devices regarding processors and other physical resources available in a pool of resources. In one of these embodiments this functionality allows a hypervisor to manage a pool of resources distributed across a plurality of physical computing devices. In another of these embodiments multiple hypervisors manage one or more of the guest operating systems executed on one of the computing devices .

In one embodiment the control operating system executes in a virtual machine that is authorized to interact with at least one guest operating system . In another embodiment a guest operating system communicates with the control operating system via the hypervisor in order to request access to a disk or a network. In still another embodiment the guest operating system and the control operating system may communicate via a communication channel established by the hypervisor such as for example via a plurality of shared memory pages made available by the hypervisor .

In some embodiments the control operating system includes a network back end driver for communicating directly with networking hardware provided by the computing device . In one of these embodiments the network back end driver processes at least one virtual machine request from at least one guest operating system . In other embodiments the control operating system includes a block back end driver for communicating with a storage element on the computing device . In one of these embodiments the block back end driver reads and writes data from the storage element based upon at least one request received from a guest operating system .

In one embodiment the control operating system includes a tools stack . In another embodiment a tools stack provides functionality for interacting with the hypervisor communicating with other control operating systems for example on a second computing device or managing virtual machines on the computing device . In another embodiment the tools stack includes customized applications for providing improved management functionality to an administrator of a virtual machine farm. In some embodiments at least one of the tools stack and the control operating system include a management API that provides an interface for remotely configuring and controlling virtual machines running on a computing device . In other embodiments the control operating system communicates with the hypervisor through the tools stack .

In one embodiment the hypervisor executes a guest operating system within a virtual machine created by the hypervisor . In another embodiment the guest operating system provides a user of the computing device with access to resources within a computing environment. In still another embodiment a resource includes a program an application a document a file a plurality of applications a plurality of files an executable program file a desktop environment a computing environment or other resource made available to a user of the computing device . In yet another embodiment the resource may be delivered to the computing device via a plurality of access methods including but not limited to conventional installation directly on the computing device delivery to the computing device via a method for application streaming delivery to the computing device of output data generated by an execution of the resource on a second computing device and communicated to the computing device via a presentation layer protocol delivery to the computing device of output data generated by an execution of the resource via a virtual machine executing on a second computing device or execution from a removable storage device connected to the computing device such as a USB device or via a virtual machine executing on the computing device and generating output data. In some embodiments the computing device transmits output data generated by the execution of the resource to another computing device .

In one embodiment the guest operating system in conjunction with the virtual machine on which it executes forms a fully virtualized virtual machine which is not aware that it is a virtual machine such a machine may be referred to as a Domain U HVM Hardware Virtual Machine virtual machine . In another embodiment a fully virtualized machine includes software emulating a Basic Input Output System BIOS in order to execute an operating system within the fully virtualized machine. In still another embodiment a fully virtualized machine may include a driver that provides functionality by communicating with the hypervisor . In such an embodiment the driver may be aware that it executes within a virtualized environment. In another embodiment the guest operating system in conjunction with the virtual machine on which it executes forms a paravirtualized virtual machine which is aware that it is a virtual machine such a machine may be referred to as a Domain U PV virtual machine . In another embodiment a paravirtualized machine includes additional drivers that a fully virtualized machine does not include. In still another embodiment the paravirtualized machine includes the network back end driver and the block back end driver included in a control operating system as described above.

Referring now to a block diagram depicts one embodiment of a plurality of networked computing devices in a system in which at least one physical host executes a virtual machine. In brief overview the system includes a management component and a hypervisor . The system includes a plurality of computing devices a plurality of virtual machines a plurality of hypervisors a plurality of management components referred to as tools stacks and a physical resource . The plurality of physical machines may each be provided as computing devices described above in connection with and A.

In greater detail a physical disk is provided by a computing device and stores at least a portion of a virtual disk . In some embodiments a virtual disk is associated with a plurality of physical disks . In one of these embodiments one or more computing devices may exchange data with one or more of the other computing devices regarding processors and other physical resources available in a pool of resources allowing a hypervisor to manage a pool of resources distributed across a plurality of physical computing devices. In some embodiments a computing device on which a virtual machine executes is referred to as a physical host or as a host machine .

The hypervisor executes on a processor on the computing device . The hypervisor allocates to a virtual disk an amount of access to the physical disk. In one embodiment the hypervisor allocates an amount of space on the physical disk. In another embodiment the hypervisor allocates a plurality of pages on the physical disk. In some embodiments the hypervisor provisions the virtual disk as part of a process of initializing and executing a virtual machine .

In one embodiment the management component is referred to as a pool management component . In another embodiment a management operating system which may be referred to as a control operating system includes the management component. In some embodiments the management component is referred to as a tools stack. In one of these embodiments the management component is the tools stack described above in connection with . In other embodiments the management component provides a user interface for receiving from a user such as an administrator an identification of a virtual machine to provision and or execute. In still other embodiments the management component provides a user interface for receiving from a user such as an administrator the request for migration of a virtual machine from one physical machine to another. In further embodiments the management component identifies a computing device on which to execute a requested virtual machine and instructs the hypervisor on the identified computing device to execute the identified virtual machine such a management component may be referred to as a pool management component.

Referring now to embodiments of a virtual application delivery controller or virtual appliance are depicted. In brief overview any of the functionality and or embodiments of the appliance e.g. an application delivery controller described above in connection with may be deployed in any embodiment of the virtualized environment described above in connection with . Instead of the functionality of the application delivery controller being deployed in the form of an appliance such functionality may be deployed in a virtualized environment on any computing device such as a client server or appliance .

Referring now to a diagram of an embodiment of a virtual appliance operating on a hypervisor of a server is depicted. As with the appliance of the virtual appliance may provide functionality for availability performance offload and security. For availability the virtual appliance may perform load balancing between layers and of the network and may also perform intelligent service health monitoring. For performance increases via network traffic acceleration the virtual appliance may perform caching and compression. To offload processing of any servers the virtual appliance may perform connection multiplexing and pooling and or SSL processing. For security the virtual appliance may perform any of the application firewall functionality and SSL VPN function of appliance .

Any of the modules of the appliance as described in connection with may be packaged combined designed or constructed in a form of the virtualized appliance delivery controller deployable as one or more software modules or components executable in a virtualized environment or non virtualized environment on any server such as an off the shelf server. For example the virtual appliance may be provided in the form of an installation package to install on a computing device. With reference to any of the cache manager policy engine compression encryption engine packet engine GUI CLI shell services and health monitoring programs may be designed and constructed as a software component or module to run on any operating system of a computing device and or of a virtualized environment . Instead of using the encryption processor processor memory and network stack of the appliance the virtualized appliance may use any of these resources as provided by the virtualized environment or as otherwise available on the server .

Still referring to and in brief overview any one or more vServers A N may be in operation or executed in a virtualized environment of any type of computing device such as any server . Any of the modules or functionality of the appliance described in connection with may be designed and constructed to operate in either a virtualized or non virtualized environment of a server. Any of the vServer SSL VPN Intranet UP Switching DNS acceleration App FW and monitoring agent may be packaged combined designed or constructed in a form of application delivery controller deployable as one or more software modules or components executable on a device and or virtualized environment .

In some embodiments a server may execute multiple virtual machines in the virtualization environment with each virtual machine running the same or different embodiments of the virtual application delivery controller . In some embodiments the server may execute one or more virtual appliances on one or more virtual machines on a core of a multi core processing system. In some embodiments the server may execute one or more virtual appliances on one or more virtual machines on each processor of a multiple processor device.

In accordance with Moore s Law the number of transistors that may be placed on an integrated circuit may double approximately every two years. However CPU speed increases may reach plateaus for example CPU speed has been around 3.5 4 GHz range since 2005. In some cases CPU manufacturers may not rely on CPU speed increases to gain additional performance. Some CPU manufacturers may add additional cores to their processors to provide additional performance. Products such as those of software and networking vendors that rely on CPUs for performance gains may improve their performance by leveraging these multi core CPUs. The software designed and constructed for a single CPU may be redesigned and or rewritten to take advantage of a multi threaded parallel architecture or otherwise a multi core architecture.

A multi core architecture of the appliance referred to as nCore or multi core technology allows the appliance in some embodiments to break the single core performance barrier and to leverage the power of multi core CPUs. In the previous architecture described in connection with a single network or packet engine is run. The multiple cores of the nCore technology and architecture allow multiple packet engines to run concurrently and or in parallel. With a packet engine running on each core the appliance architecture leverages the processing capacity of additional cores. In some embodiments this provides up to a 7 increase in performance and scalability.

Illustrated in are some embodiments of work task load or network traffic distribution across one or more processor cores according to a type of parallelism or parallel computing scheme such as functional parallelism data parallelism or flow based data parallelism. In brief overview illustrates embodiments of a multi core system such as an appliance with n cores a total of cores numbers 1 through N. In one embodiment work load or network traffic can be distributed among a first core A a second core B a third core C a fourth core D a fifth core E a sixth core F a seventh core G and so on such that distribution is across all or two or more of the n cores N hereinafter referred to collectively as cores . There may be multiple VIPs each running on a respective core of the plurality of cores. There may be multiple packet engines each running on a respective core of the plurality of cores. Any of the approaches used may lead to different varying or similar work load or performance level across any of the cores. For a functional parallelism approach each core may run a different function of the functionalities provided by the packet engine a VIP or appliance . In a data parallelism approach data may be paralleled or distributed across the cores based on the Network Interface Card NIC or VIP receiving the data. In another data parallelism approach processing may be distributed across the cores by distributing data flows to each core.

In further detail to in some embodiments load work or network traffic can be distributed among cores according to functional parallelism . Functional parallelism may be based on each core performing one or more respective functions. In some embodiments a first core may perform a first function while a second core performs a second function. In functional parallelism approach the functions to be performed by the multi core system are divided and distributed to each core according to functionality. In some embodiments functional parallelism may be referred to as task parallelism and may be achieved when each processor or core executes a different process or function on the same or different data. The core or processor may execute the same or different code. In some cases different execution threads or code may communicate with one another as they work. Communication may take place to pass data from one thread to the next as part of a workflow.

In some embodiments distributing work across the cores according to functional parallelism can comprise distributing network traffic according to a particular function such as network input output management NW I O A secure sockets layer SSL encryption and decryption B and transmission control protocol TCP functions C. This may lead to a work performance or computing load based on a volume or level of functionality being used. In some embodiments distributing work across the cores according to data parallelism can comprise distributing an amount of work based on distributing data associated with a particular hardware or software component. In some embodiments distributing work across the cores according to flow based data parallelism can comprise distributing data based on a context or flow such that the amount of work A N on each core may be similar substantially equal or relatively evenly distributed.

In the case of the functional parallelism approach each core may be configured to run one or more functionalities of the plurality of functionalities provided by the packet engine or VIP of the appliance. For example core may perform network I O processing for the appliance while core performs TCP connection management for the appliance. Likewise core may perform SSL offloading while core may perform layer 7 or application layer processing and traffic management. Each of the cores may perform the same function or different functions. Each of the cores may perform more than one function. Any of the cores may run any of the functionality or portions thereof identified and or described in conjunction with . In this the approach the work across the cores may be divided by function in either a coarse grained or fine grained manner. In some cases as illustrated in division by function may lead to different cores running at different levels of performance or load .

In the case of the functional parallelism approach each core may be configured to run one or more functionalities of the plurality of functionalities provided by the packet engine of the appliance. For example core may perform network I O processing for the appliance while core performs TCP connection management for the appliance. Likewise core may perform SSL offloading while core may perform layer 7 or application layer processing and traffic management. Each of the cores may perform the same function or different functions. Each of the cores may perform more than one function. Any of the cores may run any of the functionality or portions thereof identified and or described in conjunction with . In this the approach the work across the cores may be divided by function in either a coarse grained or fine grained manner. In some cases as illustrated in division by function may lead to different cores running at different levels of load or performance.

The functionality or tasks may be distributed in any arrangement and scheme. For example illustrates a first core Core A processing applications and processes associated with network I O functionality A. Network traffic associated with network I O in some embodiments can be associated with a particular port number. Thus outgoing and incoming packets having a port destination associated with NW I O A will be directed towards Core A which is dedicated to handling all network traffic associated with the NW I O port. Similarly Core B is dedicated to handling functionality associated with SSL processing and Core D may be dedicated handling all TCP level processing and functionality.

While illustrates functions such as network I O SSL and TCP other functions can be assigned to cores. These other functions can include any one or more of the functions or operations described herein. For example any of the functions described in conjunction with may be distributed across the cores on a functionality basis. In some cases a first VIP A may run on a first core while a second VIP B with a different configuration may run on a second core. In some embodiments each core can handle a particular functionality such that each core can handle the processing associated with that particular function. For example Core B may handle SSL offloading while Core D may handle application layer processing and traffic management.

In other embodiments work load or network traffic may be distributed among cores according to any type and form of data parallelism . In some embodiments data parallelism may be achieved in a multi core system by each core performing the same task or functionally on different pieces of distributed data. In some embodiments a single execution thread or code controls operations on all pieces of data. In other embodiments different threads or instructions control the operation but may execute the same code. In some embodiments data parallelism is achieved from the perspective of a packet engine vServers VIPs A C network interface cards NIC D E and or any other networking hardware or software included on or associated with an appliance . For example each core may run the same packet engine or VIP code or configuration but operate on different sets of distributed data. Each networking hardware or software construct can receive different varying or substantially the same amount of data and as a result may have varying different or relatively the same amount of load

In the case of a data parallelism approach the work may be divided up and distributed based on VIPs NICs and or data flows of the VIPs or NICs. In one of these approaches the work of the multi core system may be divided or distributed among the VIPs by having each VIP work on a distributed set of data. For example each core may be configured to run one or more VIPs. Network traffic may be distributed to the core for each VIP handling that traffic. In another of these approaches the work of the appliance may be divided or distributed among the cores based on which NIC receives the network traffic. For example network traffic of a first NIC may be distributed to a first core while network traffic of a second NIC may be distributed to a second core. In some cases a core may process data from multiple NICs.

While illustrates a single vServer associated with a single core as is the case for VIP A VIP B and VIP C. In some embodiments a single vServer can be associated with one or more cores . In contrast one or more vServers can be associated with a single core . Associating a vServer with a core may include that core to process all functions associated with that particular vServer. In some embodiments each core executes a VIP having the same code and configuration. In other embodiments each core executes a VIP having the same code but different configuration. In some embodiments each core executes a VIP having different code and the same or different configuration.

Like vServers NICs can also be associated with particular cores . In many embodiments NICs can be connected to one or more cores such that when a NIC receives or transmits data packets a particular core handles the processing involved with receiving and transmitting the data packets. In one embodiment a single NIC can be associated with a single core as is the case with NIC D and NIC E. In other embodiments one or more NICs can be associated with a single core . In other embodiments a single NIC can be associated with one or more cores . In these embodiments load could be distributed amongst the one or more cores such that each core processes a substantially similar amount of load. A core associated with a NIC may process all functions and or data associated with that particular NIC.

While distributing work across cores based on data of VIPs or NICs may have a level of independency in some embodiments this may lead to unbalanced use of cores as illustrated by the varying loads of .

In some embodiments load work or network traffic can be distributed among cores based on any type and form of data flow. In another of these approaches the work may be divided or distributed among cores based on data flows. For example network traffic between a client and a server traversing the appliance may be distributed to and processed by one core of the plurality of cores. In some cases the core initially establishing the session or connection may be the core for which network traffic for that session or connection is distributed. In some embodiments the data flow is based on any unit or portion of network traffic such as a transaction a request response communication or traffic originating from an application on a client. In this manner and in some embodiments data flows between clients and servers traversing the appliance may be distributed in a more balanced manner than the other approaches.

In flow based data parallelism distribution of data is related to any type of flow of data such as request response pairings transactions sessions connections or application communications. For example network traffic between a client and a server traversing the appliance may be distributed to and processed by one core of the plurality of cores. In some cases the core initially establishing the session or connection may be the core for which network traffic for that session or connection is distributed. The distribution of data flow may be such that each core carries a substantially equal or relatively evenly distributed amount of load data or network traffic.

In some embodiments the data flow is based on any unit or portion of network traffic such as a transaction a request response communication or traffic originating from an application on a client. In this manner and in some embodiments data flows between clients and servers traversing the appliance may be distributed in a more balanced manner than the other approached. In one embodiment data flow can be distributed based on a transaction or a series of transactions. This transaction in some embodiments can be between a client and a server and can be characterized by an IP address or other packet identifier. For example Core A can be dedicated to transactions between a particular client and a particular server therefore the load A on Core A may be comprised of the network traffic associated with the transactions between the particular client and server. Allocating the network traffic to Core A can be accomplished by routing all data packets originating from either the particular client or server to Core A.

While work or load can be distributed to the cores based in part on transactions in other embodiments load or work can be allocated on a per packet basis. In these embodiments the appliance can intercept data packets and allocate them to a core having the least amount of load. For example the appliance could allocate a first incoming data packet to Core A because the load A on Core is less than the load B N on the rest of the cores B N. Once the first data packet is allocated to Core A the amount of load A on Core A is increased proportional to the amount of processing resources needed to process the first data packet. When the appliance intercepts a second data packet the appliance will allocate the load to Core D because Core D has the second least amount of load. Allocating data packets to the core with the least amount of load can in some embodiments ensure that the load A N distributed to each core remains substantially equal.

In other embodiments load can be allocated on a per unit basis where a section of network traffic is allocated to a particular core . The above mentioned example illustrates load balancing on a per packet basis. In other embodiments load can be allocated based on a number of packets such that every 10 100 or 1000 packets are allocated to the core having the least amount of load. The number of packets allocated to a core can be a number determined by an application user or administrator and can be any number greater than zero. In still other embodiments load can be allocated based on a time metric such that packets are distributed to a particular core for a predetermined amount of time. In these embodiments packets can be distributed to a particular core for five milliseconds or for any period of time determined by a user program system administrator or otherwise. After the predetermined time period elapses data packets are transmitted to a different core for the predetermined period of time.

Flow based data parallelism methods for distributing work load or network traffic among the one or more cores can comprise any combination of the above mentioned embodiments. These methods can be carried out by any part of the appliance by an application or set of executable instructions executing on one of the cores such as the packet engine or by any application program or agent executing on a computing device in communication with the appliance .

The functional and data parallelism computing schemes illustrated in can be combined in any manner to generate a hybrid parallelism or distributed processing scheme that encompasses function parallelism data parallelism flow based data parallelism or any portions thereof. In some cases the multi core system may use any type and form of load balancing schemes to distribute load among the one or more cores . The load balancing scheme may be used in any combination with any of the functional and data parallelism schemes or combinations thereof.

Illustrated in is an embodiment of a multi core system which may be any type and form of one or more systems appliances devices or components. This system in some embodiments can be included within an appliance having one or more processing cores A N. The system can further include one or more packet engines PE or packet processing engines PPE A N communicating with a memory bus . The memory bus may be used to communicate with the one or more processing cores A N. Also included within the system can be one or more network interface cards NIC and a flow distributor which can further communicate with the one or more processing cores A N. The flow distributor can comprise a Receive Side Scaler RSS or Receive Side Scaling RSS module .

Further referring to and in more detail in one embodiment the packet engine s A N can comprise any portion of the appliance described herein such as any portion of the appliance described in . The packet engine s A N can in some embodiments comprise any of the following elements the packet engine a network stack a cache manager a policy engine a compression engine an encryption engine a GUI a CLI shell services monitoring programs and any other software or hardware element able to receive data packets from one of either the memory bus or the one of more cores A N. In some embodiments the packet engine s A N can comprise one or more vServers A N or any portion thereof. In other embodiments the packet engine s A N can provide any combination of the following functionalities SSL VPN Intranet UP switching DNS packet acceleration App FW monitoring such as the monitoring provided by a monitoring agent functionalities associated with functioning as a TCP stack load balancing SSL offloading and processing content switching policy evaluation caching compression encoding decompression decoding application firewall functionalities XML processing and acceleration and SSL VPN connectivity.

The packet engine s A N can in some embodiments be associated with a particular server user client or network. When a packet engine becomes associated with a particular entity that packet engine can process data packets associated with that entity. For example should a packet engine be associated with a first user that packet engine will process and operate on packets generated by the first user or packets having a destination address associated with the first user. Similarly the packet engine may choose not to be associated with a particular entity such that the packet engine can process and otherwise operate on any data packets not generated by that entity or destined for that entity.

In some instances the packet engine s A N can be configured to carry out the any of the functional and or data parallelism schemes illustrated in . In these instances the packet engine s A N can distribute functions or data among the processing cores A N so that the distribution is according to the parallelism or distribution scheme. In some embodiments a single packet engine s A N carries out a load balancing scheme while in other embodiments one or more packet engine s A N carry out a load balancing scheme. Each core A N in one embodiment can be associated with a particular packet engine such that load balancing can be carried out by the packet engine . Load balancing may in this embodiment require that each packet engine associated with a core communicate with the other packet engines associated with cores so that the packet engines can collectively determine where to distribute load. One embodiment of this process can include an arbiter that receives votes from each packet engine for load. The arbiter can distribute load to each packet engine based in part on the age of the engine s vote and in some cases a priority value associated with the current amount of load on an engine s associated core .

Any of the packet engines running on the cores may run in user mode kernel or any combination thereof. In some embodiments the packet engine operates as an application or program running is user or application space. In these embodiments the packet engine may use any type and form of interface to access any functionality provided by the kernel. In some embodiments the packet engine operates in kernel mode or as part of the kernel. In some embodiments a first portion of the packet engine operates in user mode while a second portion of the packet engine operates in kernel mode. In some embodiments a first packet engine on a first core executes in kernel mode while a second packet engine on a second core executes in user mode. In some embodiments the packet engine or any portions thereof operates on or in conjunction with the NIC or any drivers thereof.

In some embodiments the memory bus can be any type and form of memory or computer bus. While a single memory bus is depicted in the system can comprise any number of memory buses . In one embodiment each packet engine can be associated with one or more individual memory buses .

The NIC can in some embodiments be any of the network interface cards or mechanisms described herein. The NIC can have any number of ports. The NIC can be designed and constructed to connect to any type and form of network . While a single NIC is illustrated the system can comprise any number of NICs . In some embodiments each core A N can be associated with one or more single NICs . Thus each core can be associated with a single NIC dedicated to a particular core . The cores A N can comprise any of the processors described herein. Further the cores A N can be configured according to any of the core configurations described herein. Still further the cores A N can have any of the core functionalities described herein. While illustrates seven cores A G any number of cores can be included within the system . In particular the system can comprise N cores where N is a whole number greater than zero.

A core may have or use memory that is allocated or assigned for use to that core. The memory may be considered private or local memory of that core and only accessible by that core. A core may have or use memory that is shared or assigned to multiple cores. The memory may be considered public or shared memory that is accessible by more than one core. A core may use any combination of private and public memory. With separate address spaces for each core some level of coordination is eliminated from the case of using the same address space. With a separate address space a core can perform work on information and data in the core s own address space without worrying about conflicts with other cores. Each packet engine may have a separate memory pool for TCP and or SSL connections.

Further referring to any of the functionality and or embodiments of the cores described above in connection with can be deployed in any embodiment of the virtualized environment described above in connection with . Instead of the functionality of the cores being deployed in the form of a physical processor such functionality may be deployed in a virtualized environment on any computing device such as a client server or appliance . In other embodiments instead of the functionality of the cores being deployed in the form of an appliance or a single device the functionality may be deployed across multiple devices in any arrangement. For example one device may comprise two or more cores and another device may comprise two or more cores. For example a multi core system may include a cluster of computing devices a server farm or network of computing devices. In some embodiments instead of the functionality of the cores being deployed in the form of cores the functionality may be deployed on a plurality of processors such as a plurality of single core processors.

In one embodiment the cores may be any type and form of processor. In some embodiments a core can function substantially similar to any processor or central processing unit described herein. In some embodiment the cores may comprise any portion of any processor described herein. While illustrates seven cores there can exist any N number of cores within an appliance where N is any whole number greater than one. In some embodiments the cores can be installed within a common appliance while in other embodiments the cores can be installed within one or more appliance s communicatively connected to one another. The cores can in some embodiments comprise graphics processing software while in other embodiments the cores provide general processing capabilities. The cores can be installed physically near each other and or can be communicatively connected to each other. The cores may be connected by any type and form of bus or subsystem physically and or communicatively coupled to the cores for transferring data between to from and or between the cores.

While each core can comprise software for communicating with other cores in some embodiments a core manager Not Shown can facilitate communication between each core . In some embodiments the kernel may provide core management. The cores may interface or communicate with each other using a variety of interface mechanisms. In some embodiments core to core messaging may be used to communicate between cores such as a first core sending a message or data to a second core via a bus or subsystem connecting the cores. In some embodiments cores may communicate via any type and form of shared memory interface. In one embodiment there may be one or more memory locations shared among all the cores. In some embodiments each core may have separate memory locations shared with each other core. For example a first core may have a first shared memory with a second core and a second share memory with a third core. In some embodiments cores may communicate via any type of programming or API such as function calls via the kernel. In some embodiments the operating system may recognize and support multiple core devices and provide interfaces and API for inter core communications.

The flow distributor can be any application program library script task service process or any type and form of executable instructions executing on any type and form of hardware. In some embodiments the flow distributor may any design and construction of circuitry to perform any of the operations and functions described herein. In some embodiments the flow distributor distribute forwards routes controls and ors manage the distribution of data packets among the cores and or packet engine or VIPs running on the cores. The flow distributor in some embodiments can be referred to as an interface master. In one embodiment the flow distributor comprises a set of executable instructions executing on a core or processor of the appliance . In another embodiment the flow distributor comprises a set of executable instructions executing on a computing machine in communication with the appliance . In some embodiments the flow distributor comprises a set of executable instructions executing on a NIC such as firmware. In still other embodiments the flow distributor comprises any combination of software and hardware to distribute data packets among cores or processors. In one embodiment the flow distributor executes on at least one of the cores A N while in other embodiments a separate flow distributor assigned to each core A N executes on an associated core A N. The flow distributor may use any type and form of statistical or probabilistic algorithms or decision making to balance the flows across the cores. The hardware of the appliance such as a NIC or the kernel may be designed and constructed to support sequential operations across the NICs and or cores.

In embodiments where the system comprises one or more flow distributors each flow distributor can be associated with a processor or a packet engine . The flow distributors can comprise an interface mechanism that allows each flow distributor to communicate with the other flow distributors executing within the system . In one instance the one or more flow distributors can determine how to balance load by communicating with each other. This process can operate substantially similarly to the process described above for submitting votes to an arbiter which then determines which flow distributor should receive the load. In other embodiments a first flow distributor can identify the load on an associated core and determine whether to forward a first data packet to the associated core based on any of the following criteria the load on the associated core is above a predetermined threshold the load on the associated core is below a predetermined threshold the load on the associated core is less than the load on the other cores or any other metric that can be used to determine where to forward data packets based in part on the amount of load on a processor.

The flow distributor can distribute network traffic among the cores according to a distribution computing or load balancing scheme such as those described herein. In one embodiment the flow distributor can distribute network traffic or pad according to any one of a functional parallelism distribution scheme a data parallelism load distribution scheme a flow based data parallelism distribution scheme or any combination of these distribution scheme or any load balancing scheme for distributing load among multiple processors. The flow distributor can therefore act as a load distributor by taking in data packets and distributing them across the processors according to an operative load balancing or distribution scheme. In one embodiment the flow distributor can comprise one or more operations functions or logic to determine how to distribute packers work or load accordingly. In still other embodiments the flow distributor can comprise one or more sub operations functions or logic that can identify a source address and a destination address associated with a data packet and distribute packets accordingly.

In some embodiments the flow distributor can comprise a receive side scaling RSS network driver module or any type and form of executable instructions which distribute data packets among the one or more cores . The RSS module can comprise any combination of hardware and software In some embodiments the RSS module works in conjunction with the flow distributor to distribute data packets across the cores A N or among multiple processors in a multi processor network. The RSS module can execute within the NIC in some embodiments and in other embodiments can execute on any one of the cores .

In some embodiments the RSS module uses the MICROSOFT receive side scaling RSS scheme. In one embodiment RSS is a Microsoft Scalable Networking initiative technology that enables receive processing to be balanced across multiple processors in the system while maintaining in order delivery of the data. The RSS may use any type and form of hashing scheme to determine a core or processor for processing a network packet.

The RSS module can apply any type and form hash function such as the Toeplitz hash function. The hash function may be applied to the hash type or any the sequence of values. The hash function may be a secure hash of any security level or is otherwise cryptographically secure. The has function may use a hash key. The size of the key is dependent upon the hash function. For the Toeplitz hash the size may be 40 bytes for IPv6 and 16 bytes for IPv4.

The hash function may be designed and constructed based on any one or more criteria or design goals. In some embodiments a hash function may be used that provides an even distribution of hash result for different hash inputs and different hash types including TCP IPv4 TCP IPv6 IPv4 and IPv6 headers. In some embodiments a hash function may be used that provides a hash result that is evenly distributed when a small number of buckets are present for example two or four . In some embodiments hash function may be used that provides a hash result that is randomly distributed when a large number of buckets were present for example 64 buckets . In some embodiments the hash function is determined based on a level of computational or resource usage. In some embodiments the hash function is determined based on ease or difficulty of implementing the hash in hardware. In some embodiments the hash function is determined bases on the ease or difficulty of a malicious remote host to send packets that would all hash to the same bucket.

The RSS may generate hashes from any type and form of input such as a sequence of values. This sequence of values can include any portion of the network packet such as any header field or payload of network packet or portions thereof. In some embodiments the input to the hash may be referred to as a hash type and include any tuples of information associated with a network packet or data flow such as any of the following a four tuple comprising at least two IP addresses and two ports a four tuple comprising any four sets of values a six tuple a two tuple and or any other sequence of numbers or values. The following are example of hash types that may be used by RSS 

The hash result or any portion thereof may used to identify a core or entity such as a packet engine or VIP for distributing a network packet. In some embodiments one or more hash bits or mask are applied to the hash result. The hash bit or mask may be any number of bits or bytes. A NIC may support any number of bits such as seven bits. The network stack may set the actual number of bits to be used during initialization. The number will be between 1 and 7 inclusive.

The hash result may be used to identify the core or entity via any type and form of table such as a bucket table or indirection table. In some embodiments the number of hash result bits are used to index into the table. The range of the hash mask may effectively define the size of the indirection table. Any portion of the hash result or the hash result itself may be used to index the indirection table. The values in the table may identify any of the cores or processor such as by a core or processor identifier. In some embodiments all of the cores of the multi core system are identified in the table. In other embodiments a port of the cores of the multi core system are identified in the table. The indirection table may comprise any number of buckets for example 2 to 128 buckets that may be indexed by a hash mask. Each bucket may comprise a range of index values that identify a core or processor. In some embodiments the flow controller and or RSS module may rebalance the network rebalance the network load by changing the indirection table.

In some embodiments the multi core system does not include a RSS driver or RSS module . In some of these embodiments a software steering module Not Shown or a software embodiment of the RSS module within the system can operate in conjunction with or as part of the flow distributor to steer packets to cores within the multi core system .

The flow distributor in some embodiments executes within any module or program on the appliance on any one of the cores and on any one of the devices or components included within the multi core system . In some embodiments the flow distributor can execute on the first core A while in other embodiments the flow distributor can execute on the NIC . In still other embodiments an instance of the flow distributor can execute on each core included in the multi core system . In this embodiment each instance of the flow distributor can communicate with other instances of the flow distributor to forward packets back and forth across the cores . There exist situations where a response to a request packet may not be processed by the same core i.e. the first core processes the request while the second core processes the response. In these situations the instances of the flow distributor can intercept the packet and forward it to the desired or correct core i.e. a flow distributor instance can forward the response to the first core. Multiple instances of the flow distributor can execute on any number of cores and any combination of cores .

The flow distributor may operate responsive to any one or more rules or policies. The rules may identify a core or packet processing engine to receive a network packet data or data flow. The rules may identify any type and form of tuple information related to a network packet such as a 4 tuple of source and destination IP address and source and destination ports. Based on a received packet matching the tuple specified by the rule the flow distributor may forward the packet to a core or packet engine. In some embodiments the packet is forwarded to a core via shared memory and or core to core messaging.

Although illustrates the flow distributor as executing within the multi core system in some embodiments the flow distributor can execute on a computing device or appliance remotely located from the multi core system . In such an embodiment the flow distributor can communicate with the multi core system to take in data packets and distribute the packets across the one or more cores . The flow distributor can in one embodiment receive data packets destined for the appliance apply a distribution scheme to the received data packets and distribute the data packets to the one or more cores of the multi core system . In one embodiment the flow distributor can be included in a router or other appliance such that the router can target particular cores by altering meta data associated with each packet so that each packet is targeted towards a sub node of the multi core system . In such an embodiment CISCO s vn tag mechanism can be used to alter or tag each packet with the appropriate meta data.

Illustrated in is an embodiment of a multi core system comprising one or more processing cores A N. In brief overview one of the cores can be designated as a control core A and can be used as a control plane for the other cores . The other cores may be secondary cores which operate in a data plane while the control core provides the control plane. The cores A N may share a global cache . While the control core provides a control plane the other cores in the multi core system form or provide a data plane. These cores perform data processing functionality on network traffic while the control provides initialization configuration and control of the multi core system. Further referring to and in more detail the cores A N as well as the control core A can be any processor described herein. Furthermore the cores A N and the control core A can be any processor able to function within the system described in . Still further the cores A N and the control core A can be any core or group of cores described herein. The control core may be a different type of core or processor than the other cores. In some embodiments the control may operate a different packet engine or have a packet engine configured differently than the packet engines of the other cores.

Any portion of the memory of each of the cores may be allocated to or used for a global cache that is shared by the cores. In brief overview a predetermined percentage or predetermined amount of each of the memory of each core may be used for the global cache. For example 50 of each memory of each code may be dedicated or allocated to the shared global cache. That is in the illustrated embodiment 2 GB of each core excluding the control plane core or core may be used to form a 28 GB shared global cache. The configuration of the control plane such as via the configuration services may determine the amount of memory used for the shared global cache. In some embodiments each core may provide a different amount of memory for use by the global cache. In other embodiments any one core may not provide any memory or use the global cache. In some embodiments any of the cores may also have a local cache in memory not allocated to the global shared memory. Each of the cores may store any portion of network traffic to the global shared cache. Each of the cores may check the cache for any content to use in a request or response. Any of the cores may obtain content from the global shared cache to use in a data flow request or response.

The global cache can be any type and form of memory or storage element such as any memory or storage element described herein. In some embodiments the cores may have access to a predetermined amount of memory i.e. 32 GB or any other memory amount commensurate with the system . The global cache can be allocated from that predetermined amount of memory while the rest of the available memory can be allocated among the cores . In other embodiments each core can have a predetermined amount of memory. The global cache can comprise an amount of the memory allocated to each core . This memory amount can be measured in bytes or can be measured as a percentage of the memory allocated to each core . Thus the global cache can comprise 1 GB of memory from the memory associated with each core or can comprise 20 percent or one half of the memory associated with each core . In some embodiments only a portion of the cores provide memory to the global cache while in other embodiments the global cache can comprise memory not allocated to the cores .

Each core can use the global cache to store network traffic or cache data. In some embodiments the packet engines of the core use the global cache to cache and use data stored by the plurality of packet engines. For example the cache manager of and cache functionality of may use the global cache to share data for acceleration. For example each of the packet engines may store responses such as HTML data to the global cache. Any of the cache managers operating on a core may access the global cache to server caches responses to client requests.

In some embodiments the cores can use the global cache to store a port allocation table which can be used to determine data flow based in part on ports. In other embodiments the cores can use the global cache to store an address lookup table or any other table or list that can be used by the flow distributor to determine where to direct incoming and outgoing data packets. The cores can in some embodiments read from and write to cache while in other embodiments the cores can only read from or write to cache . The cores may use the global cache to perform core to core communications.

The global cache may be sectioned into individual memory sections where each section can be dedicated to a particular core . In one embodiment the control core A can receive a greater amount of available cache while the other cores can receiving varying amounts or access to the global cache .

In some embodiments the system can comprise a control core A. While illustrates core A as the control core the control core can be any core within the appliance or multi core system. Further while only a single control core is depicted the system can comprise one or more control cores each having a level of control over the system. In some embodiments one or more control cores can each control a particular aspect of the system . For example one core can control deciding which distribution scheme to use while another core can determine the size of the global cache .

The control plane of the multi core system may be the designation and configuration of a core as the dedicated management core or as a master core. This control plane core may provide control management and coordination of operation and functionality the plurality of cores in the multi core system. This control plane core may provide control management and coordination of allocation and use of memory of the system among the plurality of cores in the multi core system including initialization and configuration of the same. In some embodiments the control plane includes the flow distributor for controlling the assignment of data flows to cores and the distribution of network packets to cores based on data flows. In some embodiments the control plane core runs a packet engine and in other embodiments the control plane core is dedicated to management and control of the other cores of the system.

The control core A can exercise a level of control over the other cores such as determining how much memory should be allocated to each core or determining which core should be assigned to handle a particular function or hardware software entity. The control core A in some embodiments can exercise control over those cores within the control plan . Thus there can exist processors outside of the control plane which are not controlled by the control core A. Determining the boundaries of the control plane can include maintaining by the control core A or agent executing within the system a list of those cores controlled by the control core A. The control core A can control any of the following initialization of a core determining when a core is unavailable re distributing load to other cores when one core fails determining which distribution scheme to implement determining which core should receive network traffic determining how much cache should be allocated to each core determining whether to assign a particular function or element to a particular core determining whether to permit cores to communicate with one another determining the size of the global cache and any other determination of a function configuration or operation of the cores within the system .

Referring now to an embodiment of a system for providing management of transport layer connections via an appliance using a dynamic maximum connection threshold is depicted. In brief overview the appliance establishes a first vServer A to load balance a plurality of clients access to one or more services A N of a first set of servers A N. The appliance includes a connection management mechanism for managing and balancing transport layer connection requests from clients to one or more set of services A N. The appliance establishes for the first vServer A a maximum dynamic connection threshold A based on the sum of the connection capacity A N each of the services A N are targeted or configured to handle. Via monitoring agents A N the appliance monitors the operational status of each of the services A N. If any of the services A N have a change in status from available to not available or not available to available the appliance adjusts the dynamic maximum connection threshold A by including or not including the corresponding connection capacity A B of the service in the summation of the threshold. For example if the appliance detects a first service A has a status of not available the appliance subtracts the connection capacity A of the first service A from the maximum dynamic connection threshold A. As such the appliance dynamically adjusts the maximum connection threshold for a vServer in real time in accordance with the monitored status of the services A N and each service s corresponding connection capacity A N.

In further detail the connection management mechanism comprises software hardware or any combination of software and hardware having logic functions or operations for receiving and managing connection requests and communications from one or more clients A N. In one embodiment the connection management mechanism receives or intercepts transport layer connection requests and communications between the clients A N and one or more services A N. The connection management mechanism may include an application program service process task thread or any type and form of executable instructions. In another embodiment the connection management mechanism identifies determines or selects a vServer for processing a received communication from a client .

In some embodiments the connection management mechanism determines if the dynamic maximum connection threshold has been reached or exceeded. The connection management mechanism determines if the dynamic maximum connection threshold is exceeded and whether or not to establish a backup or second vServer N e.g. a spillover vServer. Upon detecting the number of active transport layer connections of the first vServer A exceeds the dynamically adjusted maximum connection threshold the connection management mechanism may direct transfer or otherwise provide a received transport layer connection request of a client to the second vServer N for handling. By using the dynamically adjusted maximum connection threshold the connection management mechanism dynamically and automatically spillovers connection requests from clients from a first vServer A to a backup or second vServer N.

In other embodiments the connection management mechanism may maintain connection or session persistence between a client and the vServer A N handling requests for the client . In some embodiments the connection management mechanism selects the spillover vServer N for handling a client request even though the number of active connections of the first vServer A does not exceed the maximum connection threshold . In other embodiments the connection management mechanism selects the first vServer A for handling a client request event though requests from other clients are directed to the spillover vServer N. In one embodiment the connection management mechanism may select the first vServer A or second vServer N based on which vServer most recently handled a request from the client .

Upon detecting the dynamically adjusted maximum connection threshold has been exceeded for the first vServer A and or the second vServer N the connection management mechanism in one embodiment may determine not to establish another spillover vServer N but instead redirects the client directly to a server or otherwise to bypass the appliance . For example the connection management mechanism may determine the dynamically adjusted maximum connection threshold B for the spillover vServer N has been reached and may redirect the client to bypass the appliance instead of establishing a third vServer N for spillover. In these embodiments the connection management mechanism may transmit a redirect Uniform Resource Locator URL to the client for the client to connect to in response to the client s connection request. The URL may identify any one of the servers or services .

In yet another embodiment the appliance and or connection management mechanism manages the number of active connections and performs dynamic spillover techniques for a plurality of vServers A N. In one embodiment the second vServer B may be managing connections from a plurality of clients A N to a second set of services A N . In some embodiments the appliance monitors a second dynamic maximum connection threshold B for a second vServer B. In one embodiment the second vServer B may be acting as a spillover vServer for the first vServer N or a third vServer.

The connection capacity for a service comprises a predetermined number of clients transport layer connections or users a service is designed configured or intended to handle or process. In some embodiments the connection capacity comprises a maximum number of clients connections or users a service is configured targeted or intended to handle or process. In one embodiment a user such as the administrator of the appliance configures the connection capacity for the service . In another embodiment the appliance determines the connection capacity from the service or server providing the service . For example the appliance may transmit a request to the server or service for its connection capacity and in response the server transmits to the appliance a predetermined number of active connections it may handle.

Each of the connection capacities A N may comprise any combination of a same or different connection capacity as another capacity. In one embodiment the connection capacity A for a first server A is different than the connection capacity B of a second server B. In some embodiments the connection capacity A for a first service A is the same as the connection capacity B for a second service B. In another embodiment the connection capacity A of a service A may be set to a value below the service s actual connection capacity. In other embodiments the connection capacity A of a service A may be set to a value above the service s actual connection capacity. In some embodiments the connection capacities may represent a connection based weighting of each of the services A N in a first set or second set of a plurality of services.

The dynamic maximum connection threshold A N generally comprises a predetermined number identifying a maximum number of active transport layer connections the vServer is configured designed or otherwise intended to process handle or have active. In one embodiment a user such as an administrator of the appliance configures the dynamic maximum connection threshold . In another embodiment the appliance sets the dynamic maximum connection threshold to a default value of the sum of the configured connection capacity for each of the services A N managed by the vServer .

The appliance may adjust the dynamic maximum connection threshold in response to events corresponding to a vServer and to one or more services . The appliance may monitor the services using one or more monitoring agents . In one embodiment the appliance may adjust the dynamic maximum connection threshold in response to a monitoring agent reporting a service as unavailable. If a service with a given connection capacity is reported as unavailable the appliance may subtract the service s connection capacity from the dynamic maximum connection threshold of the vServer providing access to that service . Further if the service previously reported as unavailable is then reported as available the appliance may then add back the connection capacity for that service to the dynamic maximum connection threshold .

The monitoring agents may monitor any aspect of a service and may use any technique to determine whether a given service is available. In one embodiment a monitor may measure the response time of a service and report the service as unavailable if the response time exceeds a given threshold. In another embodiment a monitor may measure the response time of a service and report the service as unavailable if the response time exceeds a determined average response time for the service . In still another embodiment a monitor may measure the response time of a service and report the service as unavailable if the response time exceeds a given deviation from a determined average response time for the service.

Although the technique of dynamically adjusted maximum connection threshold is generally discussed in view of transport layer connections and connection requests the appliance may perform this technique for any type and form of transport layer protocol or application layer protocol carried via the transport layer. In one embodiment the appliance may perform dynamic connection spillover among vServers A N using a dynamically adjusted maximum connection threshold for Secure Socket Layer SSL or Transport Layer Security TLS connections and connection requests.

Referring now to steps of an embodiment of a method for practicing a technique of dynamical spillover management is depicted. In brief overview the method comprises establishing on an appliance a first virtual server which directs transport layer connection requests from a plurality of clients to a first plurality of services step establishing via the appliance a predetermined threshold identifying a maximum active transport layer connection capacity for the first virtual server the predetermined threshold comprising a sum of a predetermined connection capacity for each of the plurality of services step monitoring by the appliance a status for each of the plurality of services step and adjusting by the appliance the predetermined threshold to comprise the sum of the predetermined connection capacity for each of the plurality of services having a status of available step . The appliance may then receive a transport layer connection request step determine that a number of active connections to the first virtual server exceeds the predetermined threshold step . The appliance may then determine to provide the request to a second virtual server step .

Still referring to now in greater detail an appliance establishes a first virtual server which directs transport layer connection requests from a plurality of clients to a first plurality of services step . This virtual server may comprise any virtual server capable of providing access to one or more services . In one embodiment the virtual server may comprise a vServer . In one embodiment the appliance may establish the virtual server upon startup of the appliance. In another embodiment the appliance may establish the virtual server in response to a previously established virtual server exceeding maximum connection threshold. In one embodiment the appliance may establish a plurality of virtual servers.

In the embodiment shown the appliance may then establish a dynamic maximum connection threshold for the first virtual server step . In some embodiments the threshold comprises a sum of a predetermined connection capacity for each of the plurality of services. In one embodiment the threshold may be initially configured by a user or administrator of the appliance. In another embodiment the threshold may be initially determined by the appliance by polling one or more services .

In the embodiment shown the appliance may then monitor a status for each of the plurality of services step . The appliance may monitor a status for each of the services using any means. In one embodiment the appliance may use a monitoring agent . In another embodiment the appliance may use a plurality of monitoring agents . In one embodiment the appliance may monitor the status for each of the services at predetermined time intervals for example once every 0.01 0.1 0.2 0.5 or 1 seconds. In another embodiment the appliance may monitor the status for each of the services asynchronously.

In the embodiment shown the appliance may then adjust the predetermined threshold to comprise the sum of the predetermined connection capacity for each of the plurality of services having a status of available step . For example if a service with a given connection capacity is reported as unavailable the appliance may subtract the service s connection capacity from the dynamic maximum connection threshold of the vServer providing access to that service . Further if a service previously reported as unavailable is then reported as available the appliance may then add back the connection capacity for that service to the dynamic maximum connection threshold .

In the embodiment shown the appliance may then receive a transport layer connection request step . The transport layer request may comprise any request to connect to a service . The transport layer request may be received from any computing device including a client server or a second appliance . In one embodiment the request may identify a type of service . For example the transport layer request may comprise a request for HTTP service. Or for example the transport layer request may comprise a request for UDP service.

In the embodiment shown the appliance may then determine whether the dynamic maximum connection threshold of the first virtual server has been exceeded. The appliance may compare the current connection load for the first virtual server with the current value of the dynamic maximum connection threshold for the first virtual server. In one embodiment the first virtual server may comprise a primary or default virtual server. In another embodiment the first virtual server may comprise a primary or default virtual server for a particular type of service. If the dynamic maximum connection threshold of the first virtual server has not been exceeded the appliance may provide the connection request to the first virtual server step .

If the dynamic maximum connection threshold of the first virtual server has been exceeded the appliance may establish in response to the threshold being exceeded a second virtual server step . In other embodiments a second virtual server may already have been established prior to some or any of the steps shown. The second virtual server may provide access to a second plurality of services . In one embodiment one or more of the second plurality of services may comprise the same type of service as one or more of the first plurality of services. The appliance may then establish and subsequently adjust a dynamic maximum connection threshold corresponding to the second virtual server. The appliance may then provide the connection request to the second virtual server step .

In other embodiments a second virtual server may already have been established prior to some or any of the steps shown. The second virtual server may provide access to a second plurality of services . In one embodiment one or more of the second plurality of services may comprise the same type of service as one or more of the first plurality of services. The appliance may then provide the connection request to the second virtual server step . The appliance may then establish and subsequently adjust a dynamic maximum connection threshold corresponding to the second virtual server.

In still other embodiments if the dynamic maximum connection threshold of the first virtual server has been exceeded the appliance may in response to the threshold being exceeded redirect the client making the request to another resource. In one embodiment the appliance may transmit a URL to the client comprising the address of a server or service such that the client may bypass the appliance and access the server or service directly. In one embodiment the appliance may transmit a URL to the client comprising the address of a second appliance . In still another embodiment the appliance may redirect the client request to a second appliance based on a dynamically determined connection capacity for the second appliance.

The appliance may then determine whether the client making the connection request has a previously existing connection with either the first or a second virtual server step . In some embodiments an appliance may assign a priority to providing connection requests from a client to virtual servers that have previously serviced or are currently servicing connections from the client. For example if a connection request is received from a client and the client has a currently existing connection with a first virtual server the appliance may provide the connection request to the first virtual server even if the first virtual server is above its dynamic maximum connection threshold. Or for example if a client has a previous connection via a backup virtual server and the primary virtual server subsequently becomes available again the appliance may still provide a subsequent connection request from the client to the backup virtual server. In one embodiment a connection management mechanism or other appliance component may track previously established or current connections so that incoming connection requests from a client can be provided to a virtual server having previously serviced connections from the client.

Referring now to systems and methods for dynamically managing connection spillover from a first virtual server to a second virtual server based on bandwidth are depicted. The appliance may establish or a user may configure a bandwidth threshold for one or more virtual servers managing one or more services. The appliance monitors the bandwidth used by a virtual server. In response to detecting the bandwidth reaching or exceeding the bandwidth threshold the appliance dynamically directs client requests to another virtual server. The bandwidth threshold may be adjusted to take into account bandwidth capacity response times virtual server performance or performance of the server. The appliance manages virtual servers based on the bandwidth usage to maintain performance of the virtual servers and the services managed by the virtual servers at a desired level or within a predetermined performance range.

Referring now to an embodiment of an appliance for providing dynamic virtual server spillover management based on bandwidth is depicted. In brief overview the appliance establishes a first vServer A to manage access by a plurality of clients to one or more services A N of a first set of servers A N. The appliance includes a connection management mechanism for managing and balancing requests from clients to one or more set of services A N via one or more vServers A N. The appliance establishes for a first vServer A a bandwidth threshold A which may be specified by a user. The appliance may establish a second vServer N with a second bandwidth threshold B.

Via monitoring agents A N the appliance monitors the operational status of each of the services A N. The monitoring agents may include a bandwidth detector for measuring the bandwidth used by a virtual server . The bandwidth detector may at predetermined frequencies or time frames determine a measured bandwidth A for a first vServer A. The bandwidth detector may also determine a measured bandwidth B for the second vServer N.

If the measured bandwidth for the first vServer A is determined to have reached or exceeded the bandwidth threshold A the connection manager of the appliance may determine to direct client requests to the second vServer N. For example a user may configure a bandwidth threshold of 5 Mbytes per second. If the bandwidth detector determines the measured bandwidth of the vServer exceeds 5 Mbytes a second the appliance via the connection management mechanism may switch client requests to the second vServer N.

The bandwidth detector includes or provides logic business rules functions or operations for determining an availability idleness throughput or utilization of network bandwidth for one or more virtual servers . The bandwidth detector may include software hardware or any combination of software and hardware. The bandwidth detector may comprise an application program script library process service driver task thread or any type and form of executable instructions.

In some embodiments the bandwidth detector determines a number of bytes transferred by the vServer for the measured bandwidth . The bandwidth detector determines the number of transferred bytes over a time period such as every second or bytes transferred per second. In one embodiment the bandwidth detector determines an average number of bytes transferred per the time period such as per second. In some embodiments the bandwidth detector measures the number of bytes transmitted by the vServer . In other embodiments the bandwidth detector measures the number of bytes received by the vServer . In one embodiment the bandwidth detector measures the number of bytes received and transmitted by the vServer . In yet another embodiment the bandwidth detector measures the number of bytes transmitted by the one or more services to the vServer . In other embodiments the bandwidth detector measures the number of bytes transmitted by one or more clients to the vServer . In other embodiments the bandwidth detector measures the bandwidth for a vServer based on the number of packets on a queue waiting to be transmitted. In some embodiments the bandwidth detector determines bandwidth usage via the transition of a queue of network packets from empty to non empty and vice versa.

In one embodiment the bandwidth detector determines the measured bandwidth in relation to round trip times between a virtual server and a service or server . In one embodiment the bandwidth detector measures round trip times between a virtual server and a client . In another embodiment the bandwidth detector measures round trip times between a client and server via the virtual server . The bandwidth detector may use any type and form of round trip time computation or calculation to measure bandwidth . For example the bandwidth detector may use the following type of bandwidth measurement Bandwidth Factor MTU Round Trip Times sqrt Packet Loss where the factor may be for example 1.3 As illustrated by the above equation bandwidth may be determined based on packet loss round trip times and or packet size adjusted by a predetermined factor. Although a measurement of bandwidth using the above equation is described other derivatives of this request using any combination of factors maximum transmission unit MTU round trip times and packet loss may be used.

The bandwidth threshold for a vServer may be specified as a number such as a real or integer. In one embodiment the bandwidth threshold may be expressed in units of number of bytes per a unit of time. In some embodiments the bandwidth threshold may be specified as a percentage. For example the bandwidth threshold may represent a percentage of bandwidth used by the vServer . In another example the bandwidth threshold may represent a percentage of bandwidth available to the vServer .

In some embodiments the bandwidth threshold may indicate a direction for measuring the bandwidth of a vServer . In one embodiment the bandwidth threshold identified the measurement is bi directional. For example the bandwidth threshold may indicate to measure bandwidth of bytes transmitted by the vServer to the service and received from the service. In another example the bandwidth threshold may indicate to measure bandwidth of the number of bytes sent from a client to the service via the vServer and sent from the server to the client via the vServer . In other embodiments the bandwidth threshold may indicate to measure bandwidth in one direction such as any of the following directions from the vServer to the service from the service to the vServer from the vServer to the client.

As discussed above in connection with the connection management mechanism also referred to as a connection manager or a virtual server switch comprises software hardware or any combination of software and hardware having logic functions or operations for receiving and managing connection requests and communications from one or more clients A N. In one embodiment the connection management mechanism receives or intercepts transport layer connection requests and communications between the clients A N and one or more services A N. The connection management mechanism may include an application program service process task thread or any type and form of executable instructions. In response to receiving a client communication the connection management mechanism identifies determines or selects a vServer for processing a received communication from a client .

The connection manager may operate responsive to the load monitor and or the bandwidth detector . The load monitor may monitor the measured bandwidth . In some embodiments the load monitor and or bandwidth detector measures the bandwidth on a predetermined frequency. In one embodiment the load monitor and or bandwidth detector measures the bandwidth responsive to any events such as receipt of a network packet. In other embodiments the load monitor and or bandwidth detector may determine whether or not if the measured bandwidth is greater than the bandwidth threshold .

If the connection manager determines from the load monitor and or bandwidth detector that the measured bandwidth of a first vServer A exceeds the bandwidth threshold the connection manager directs client requests for the services managed by the first vServer A to a second vServer . The second vServer may be configured or established as backup server to the first vServer A. For example the first vServer A may be designated a primary vServer A and the second vServer N as backup vServer N. In another embodiment the second vServer N may be another virtual server primary redundant or otherwise for managing the services A N. In yet another embodiment the second vServer N is configures or designated as the spillover virtual server for the first vServer A. In some cases the second vServer N is established upon determining the first vServer A exceeds the bandwidth threshold . In other cases the vServer N is already operating or executing on the appliance .

In some embodiments the connection manager directs new client connection requests to the second vServer . In one embodiment if the request is from a connection already established with the first vServer A the connection manager may direct the request to the first vServer A even if the bandwidth threshold is exceeded. This may be referred to as connection or session persistence. In another embodiment the connection manager directs any client requests to the second vServer for example even a request of a previously established connection.

In one embodiment the connection manager directs client requests to the second vServer N while the first vServer has a measured bandwidth greater than the bandwidth threshold . In another embodiment the connection manager directs clients requests back to the first vServer upon determining that the measured bandwidth of the first vServer has fallen within the bandwidth threshold . In some embodiment the connection manager determines which of the first vServer A and the second vServer N has the lowest bandwidth usage or is the least nearest to the corresponding bandwidth threshold and directs the client requests to the determined vServer. In other embodiments and in the case of multiple vServers A N exceeding a bandwidth threshold the connection manager determines which vServer A N exceeds its corresponding threshold the least and directs the client requests to the determined vServer.

In some embodiments the appliance via a load monitor and or bandwidth detector measures and monitors the bandwidth of the second virtual server N. The second vServer N may have the same bandwidth threshold or a different bandwidth threshold as the first vServer A. If the connection manager determines from the load monitor and or bandwidth detector that the measured bandwidth N of the second vServer N exceeds the bandwidth threshold the connection manager directs client requests for the services managed by the second vServer A to another vServer N such as the first vServer A or a third vServer B. The second vServer N may have a third vServer B designated as backup virtual server or a spillover virtual server. The bandwidth threshold management techniques described herein may be used for a chain or plurality of virtual servers and spillover virtual servers each with a bandwidth threshold and designated backup or spillover virtual server.

The appliance via the connection manager directs client requests to the primary vServer or any backup or spillover vServer based on measured bandwidth in view of the established bandwidth thresholds . The appliance may dynamically adjust any bandwidth threshold for any vServer based on any performance or operational characteristics of the appliance vServer bandwidth network connection client or server. For example the load monitor and or bandwidth detector may measure the bandwidth of the vServer or the network connection based on round trip times packet loss and or MTU. In one embodiment the appliance may determine that the established bandwidth threshold is set relatively low in comparison to the measured bandwidth and determines to dynamically increase the bandwidth threshold . For example the appliance may adjust to the bandwidth threshold within a certain percentage or threshold of the measured bandwidth. In another embodiment the appliance may determine that the established bandwidth threshold is set relatively high in comparison to the measured bandwidth and determines to dynamically decrease the bandwidth threshold .

In one case the appliance dynamically sets or establishes a bandwidth threshold by measuring bandwidth of a vServer for a predetermined time period. For example upon startup of a vServer the bandwidth detector may measure bandwidth for a predetermined or configured time period and then based on an average peak or range of bandwidth measurements set the bandwidth threshold . In yet other examples the appliance may dynamically adjust a bandwidth threshold based on running additional vServers or stopping shutting down or other removing a vServer . In another case the appliance may dynamically adjust a bandwidth threshold based on adding or removing services A managed by a vServer . In still other embodiments the appliance may dynamically adjust the bandwidth threshold of a vServer based on information and feedback from a monitoring agent and or monitoring service . In still other embodiments the appliance may dynamically adjust bandwidth thresholds based on one or more policies of a policy engine .

In some embodiment the appliance excludes a vServer from a load computation or determination or otherwise a load balancing decision if the bandwidth used by the vServer exceeds the bandwidth threshold . In these embodiments this may be done so that the other vServer A N which carry the load for the excluded vServer do not also become overloaded. In other embodiments the appliance adjusts a weight used for the vServer upon detecting the vServer s bandwidth exceeds the bandwidth threshold . For example the weight of the vServer may be adjusted to minimize the impact to the other vServer A N for not having the vServer available to also service requests.

Referring now to an embodiment of steps of a method for practicing dynamic virtual server spillover management based on bandwidth is depicted. In brief overview at step the appliance establishes a first virtual server A which directs requests from a plurality of clients to a plurality of services. At step the appliance establishes a bandwidth threshold for the first virtual server. At step the appliance monitors a status for each of the plurality of services. At step the appliance measures and monitors the bandwidth used by the first vServer . At step the appliance receives a client request. At step the appliance determines whether or not the bandwidth threshold for the first vServer A has been exceeded. If not at step the appliance directs the client request to the first vServer A. If the threshold has been exceeded the appliance at step determines whether or not to establish or use a second vServer N or provide a redirect URL to the client . In one case at step the client is redirected to the service and bypasses the first vServer A. At step the appliance may determine if the client is persistent with the first vServer A or the second vServer N. If the client is sticky to the first vServer A the appliance may direct the request to the first vServer A at step . Otherwise the appliance spills over to an established second vServer N at step . The method may continue at step to monitor and perform spillover management for the second vServer N.

In further detail at step an appliance establishes a first virtual server which manages connections and direct requests from a plurality of clients to a first plurality of services . In one embodiment the appliance may establish the virtual server upon startup of the appliance. In another embodiment the appliance may establish the virtual server in response to a previously established virtual server exceeding maximum connection threshold. In one embodiment the appliance may establish a plurality of virtual servers. In some embodiments a user configures and starts the first vServer . In other embodiments the first vServer is configured established or designed by the appliance or a user as a primary virtual server.

At step the appliance may establish or otherwise provide a bandwidth threshold for the first vServer . In one embodiment the bandwidth threshold may be initially configured by a user or administrator of the appliance. In another embodiment the bandwidth threshold may be initially determined by the appliance by monitoring the bandwidth used by the vServer or by polling one or more services . In some embodiments the appliance may use a default or predetermined bandwidth threshold . For example the appliance may use a predetermined bandwidth threshold associated with or based on the type of service .

At step the appliance may monitor a status for each of the services using any means. In one embodiment the appliance may use a monitoring agent . In another embodiment the appliance may use a plurality of monitoring agents . In one embodiment the appliance may monitor the status for each of the services at predetermined time intervals for example once every 0.01 0.1 0.2 0.5 or 1 seconds. In another embodiment the appliance may monitor the status for each of the services asynchronously or based on any events.

At step the appliance measures and monitors the bandwidth used in association with the first vServer A. The load monitor and or bandwidth detector may compute determine or otherwise make bandwidth measurements . In one embodiment the appliance determines the measured bandwidth of a vServer on a predetermined frequency. In another embodiment the appliance determines the measured bandwidth of a vServer triggered by an event. In one case the appliance determines the measured bandwidth of a vServer at the request of a user. In some embodiments the appliance measures bandwidth based on a number of bytes transferred to and or from a vServer . In other embodiments the appliance measures bandwidth based on round trip times of communication to and or from a vServer . In some embodiments the appliance may dynamically adjust the bandwidth threshold based on bandwidth measurements. In other embodiments the appliance may dynamically adjust the bandwidth threshold based on performance and or operational characteristics of the appliance the vServer the network connection and or the service .

At step the appliance may receive a client request. In one embodiment the appliance intercepts the client request as a transparent interception device. In another embodiment the client transmits the request to the appliance as a proxy. In some embodiments the appliance receives a client request to open or establish a transport layer connection. In other embodiments the appliances receive a client request to access a service via a previously established transport layer connection. The transport layer request may be received from any computing device including a client server or a second appliance . In one embodiment the request may identify a type of service . For example the transport layer request may comprise a request for HTTP service. Or for example the transport layer request may comprise a request for UDP service.

At step the appliance may determine whether the measured bandwidth for a vServer has reached or exceeded the bandwidth threshold . The appliance may compare the current measured bandwidth for the first virtual server with the current value of the bandwidth threshold for the first virtual server. In other embodiments the load monitor and or bandwidth detector may have already determined the bandwidth threshold for the vServer has been reached or exceeded. In another embodiment the appliance may determine if the bandwidth threshold has been reached or exceeded responsive to receiving the client request. If the bandwidth threshold of the first virtual server has not been exceeded the appliance may provide the client request to the first virtual server at step .

If the appliance determines the bandwidth threshold of the first virtual server has been exceeded the appliance may establish use or otherwise spillover to a second virtual server N at step . In other embodiments a second virtual server N may already have been established prior to some or any of the steps shown. In another embodiment the second virtual server N may be established responsive to determining the bandwidth threshold has been exceeded. The second virtual server may provide access to a second plurality of services . In one embodiment one or more of the second plurality of services may comprise the same type of service as one or more of the first plurality of services. The appliance may then establish and or adjust a bandwidth threshold for the second virtual server. The appliance may provide the client request to the second virtual server at step .

In other embodiments if the bandwidth threshold of the first virtual server has been exceeded the appliance may redirect the client making the request to another resource. In one embodiment the appliance may transmit a URL to the client comprising the address of a server or service such that the client may bypass the appliance and access the server or service directly. In one embodiment the appliance may transmit a URL to the client comprising the address of a second appliance . In still another embodiment the appliance may redirect the client request to a second appliance.

At step the appliance may determine whether the client making the request has a previously existing connection or session with either the first or a second virtual server. In some embodiments an appliance may assign a priority to providing requests from a client to virtual servers that have previously serviced or are currently servicing connections or session from the client. For example if a request is received from a client and the client has a currently existing connection with a first virtual server the appliance may provide the request to the first virtual server even if the first virtual server has reached or exceeded the bandwidth threshold. Or for example if a client has a previous connection via a backup virtual server and the primary virtual server subsequently falls below the bandwidth threshold the appliance may still provide a subsequent request from the client to the backup virtual server. In one embodiment a connection management mechanism or other appliance component may track previously established or current connections or session so that incoming requests from a client can be provided to a virtual server having previously serviced the connection or session from the client.

At step the appliance may dynamically manage virtual spillover based on bandwidth by directing or providing the client request to the spillover or second vServer N. In some embodiments the appliance determines the second vServer is busy unavailable or has exceeded its bandwidth threshold or another threshold. In response the appliance may redirect the client at step or provide the client request to a third vServer B or another appliance . In some embodiments the appliance has a plurality of vServers A N managing the services and determines which vServer to direct the client request based on comparison of each vServer s measured bandwidth and or bandwidth threshold. In one case the appliance provides the client request to one of a plurality of backup or spillover vServers based on the least measured bandwidth. In another case the appliance provides the client request to the vServer with the greatest difference between the measured bandwidth and the bandwidth threshold.

Although an embodiment of method is generally described above in regards to measuring and monitoring bandwidth of a first vServer and spilling over to a second vServer any steps of the method may be performed for the second vServer and a spillover server for the second vServer and for a third vServer and so on. An embodiment of method or any steps thereof may be practiced for a plurality of virtual servers such as a set of primary vServer managing the same or different services. Another embodiment of method or any steps thereof may be practiced for a chain of spillover virtual servers so that a second vServer spills over into a third vServer based on bandwidth and so on.

Furthermore any of the systems and method discussed herein may be practiced in combination. For example the techniques of dynamic connection spillover management described in conjunction with may be practiced with the bandwidth based spillover management described in conjunction with . In some embodiment the appliance may establish monitor and manage spillover of virtual servers based on multiple thresholds. For example the appliance may use both connection based thresholds and bandwidth based thresholds to determine to spillover a client request from one virtual server to another. In one embodiment the appliance may spillover from one virtual server to another virtual server when both thresholds are reached or exceeded. In another embodiment the appliance may spillover from one virtual server to another virtual server when either of the thresholds are reached or exceeded.

In some embodiments the techniques of bandwidth based virtual server switching and spillover management described above may be combined with the content switching functionality and policies of the appliance to provide bandwidth management of a virtual server on an object basis. The appliance may be configured to have a set of one or more virtual servers to manage requests and response of predetermined object types. A first virtual server may be configured to provide requests to a second virtual server if the request identifies an object matching a pattern such as a pattern of URL or file extension. For example the first virtual server may direct the second virtual server to handle all image file requests with the extension of .jpg or .gif. For these object types the second virtual server manages requests and response of a plurality of services. The second virtual server may also be under bandwidth management by the appliance and have a bandwidth threshold. The appliance via one or more monitoring agents monitor the second virtual server to determine if the bandwidth used by the second virtual server in handling the requests for these object types is exceeded. If the threshold is exceeded the appliance or first virtual server may spillover handling of the requests of these object types to another virtual server. Or in some cases the appliance may provide a redirect URL to the client or redirect the client s request to another appliance a server or to the service.

Referring now to an embodiment of an appliance for practicing a technique of object based bandwidth switching and spillover management is depicted. In brief overview the appliance establishes a first vServer A to manage access by a plurality of clients to one or more virtual servers A N which in turn manager access to one or more services A N of a first set of servers A N. The appliance includes a connection management mechanism for managing and balancing requests from clients to the vServers. A first vServer A may be configured via a policy engine and or via content switching to direct requests from clients to one or more vServer A N based on the type of object A or objects identified via the request. In some cases a policy of a policy engine provides logic or rules to determine which requests are forwarded by the first vServer to one of the plurality of vServer A N . For example the first vServer may direct all requests matching a pattern for a URL may be transmitted to a second vServer A. Another vServer N may be configured to direct client request matching another policy or object type N to a second set of one or more vServers A N .

The appliance establishes for any of the object handling vServers A N a bandwidth threshold A. This bandwidth threshold may be established by the appliance or specified by the user. Via monitoring agents A N the appliance monitors the operational status of each of the object handling vServers A N and corresponding services A N. For example as previously discussed above the monitoring agents may use a bandwidth detector to determine or measure bandwidth usage by a virtual server. If the measured bandwidth for a second vServer A is determined to have reached or exceeded the bandwidth threshold A the first virtual server A and or connection manager of the appliance may determine to direct client requests to a spillover vServer B which may handle requests for the same object type as the second vServer A. For example a user may configure a bandwidth threshold of 5 Mbytes per second for graphic image object types such as files with a .jpg extension. If the bandwidth detector determines the measured bandwidth of the vServer A exceeds 5 Mbytes a second the appliance may switch or spillover client requests to another vServer N .

In some embodiments a virtual server may be designed constructed or configured to manage other virtual servers. In one embodiment a virtual server A N may be designed constructed or configured to direct requests to other virtual servers based on any type and form of object type. In some embodiments a vServer A N comprises any of the functionality and capabilities of the content switching functionality as described above in . In one embodiment the vServer A N includes logic functions rules or operations to identify an object or objects from any content of a request or network packet s thereof. In some embodiments the vServer A N identifies type of objects from URLs or portions thereof. For example the vServer A N may identify an object type from a URL of request by matching a predetermined URL pattern to the request s URL. In other embodiments the vServer A N identifies types of objects from any file references file names file types or file extensions in the content of the request. In another embodiment the vServer A N identifies types of objects from a request via any headers of any protocol layer of the requests such as HTTP headers in an application layer protocol portion of the request.

In still other embodiments the vServer A N identifies types of objects from any portion of any network packet s for a request. In one embodiment the vServer A N associates an internet protocol address and or port with an object type. In these embodiments the vServer A N identifies the object type from the source and or destination of the network packet. In some embodiments the vServer A N identifies or associates an object type from any header fields of any protocol layer of a network packet. In other embodiments the vServer A N identifies or associates an object type from any option field of a header such as TCP or IP option field. In another embodiment the vServer A N identifies an object type from any information encoded in a header or payload of a packet. In one embodiment the vServer A N identifies an object type by a type of protocol used for the request.

In other embodiments a vServer A is designed to determine which requests to forward or provide to other virtual servers responsive to a policy engine . In some embodiments the policy engine includes one or more policies which identify rules for which the vServer A N may direct client requests to one of the other vServers A N . In one embodiment the policy identifies to a vServer A N any portion of content of a network packet or of a request to associate with an object type or otherwise direct to a vServer A N. In another embodiment the policy identifies to a vServer A N any portion of content of a network packet or of a request to direct to a predetermined set of one or more services . In other embodiments the policy provides rules for matching any patterns of the rule to requests to associate with or identify an object type. For example the policy may identify a string pattern for a portion of a URL. In another example the policy may specify a pattern or rule for name of a file or portion thereof. In further examples the policy may specify a pattern or rule for a file extensions. In still other cases the policy may specify a web page name with an object type. In another case the policy may specify a source and or destination IP address and or port with an object type. In one case the policy may specify a type of protocol to associate or identify an object type. The policy engine and or polices may specify any portion of a network packet such as any data element of a header or payload to use to identify an object type or otherwise indicate to a vServer A N to provide requests to other vServer A N or services .

In view of the various ways to identify types of objects an object type may comprise any type and form of categorization classification grouping or identification. An object type may be an identification of an object as a certain type or belong to a group or classification. Any data or information included in referenced by or associated with a client request may used to identify an object or type thereof. An object type may also be referred to or considered an object identifier. In one embodiment an object type A N may be based on groups of one or more object types. In other embodiments an object type A N may be granular and based on a specific name reference or instance of an object. In some embodiments the object type comprises types of files by name content or extension. For example a first object type A may includes objects having a first file name extension and a second object type N may include objects having a second file name extension. In another example an object type A may include a group of objects such as any object having one of a plurality of file name extensions. In yet further examples the object type may identify any type and form of media such as voice audio data or any combination.

In other embodiments an object type is based on a pattern for a URL. In another embodiment an object type is based on a destination portion of a URL. In some embodiments the object type may be based on a domain or server identified by a URL. In one embodiment the object type may include URLs that identify a specified web page. In some embodiments an object type may include a set or group of one or more URL patterns or portions of URLs. In yet other embodiments an object type is based on a source and or destination of the request. In one embodiment the object type is based on the type of protocol used by the request. In other embodiments the object type is based on any information of a header or payload of a packet s for the request.

In still other embodiments a user may configure or identify object types A N in any desired combination arrangement or manner. In one embodiment a user may specify an object type to be any URL pattern. In another embodiment a user may specify an object type to be any pattern for a resource or file identified in the request. In some embodiments the user may specify any IP address and or port to be used to identify an object type. In other embodiments the user may specify any portion of a network packet such as any header field or data in a payload as identifying an object type . In still further embodiments a user may specify any matching portion of a request to be associated with an object type.

As illustrated in multiple vServers A N may be configured designed or constructed to direct client requests based on a multiple object types A N to a plurality of vServers A N and A N . A first vServer A may be configured to forward requests corresponding to a first object type to one or more vServers A N which manage one or more services A N. A second vServer N may be configured to forward requests corresponding to a second object type N to a second set of one or more vServers A N which manage one or more services A N . For example the first vServer A may direct requests corresponding to graphical image related object types to a second vServer A . The second vServer N may direct requests corresponding to predetermined URL patterns to a third vServer A . In some cases the second vServer N may direct request corresponding to the object types handled by the first vServer A to the second set of vServers A N .

The appliance may have a plurality of a first set of vServers A N directing requests to a plurality of other vServers A N and A N based on a multitude of object types A N. Object types A N or policies thereof may be configured by a user to have a wide range of different types from broad groupings to very granular object identifiers. For example a first vServer A may directs requests corresponding to a more broad classification of object types that are identifies as an HTTP object. In another example a second vServer N may directs requests corresponding to a more narrow identification of an object type such a file by a specific name or a specific URL or portion of a URL.

Referring now to an embodiment of steps of a method for practicing an object and bandwidth based virtual spillover management and switching technique is depicted. In brief overview at step the appliance establishes a first virtual server A which directs requests from a plurality of clients corresponding to an object type to one or more virtual servers A N such as a second virtual server A . At step the appliance establishes a bandwidth threshold for the second virtual server. At step the appliance monitors a status for each of the plurality of virtual servers and corresponding to services. At step the appliance measures and monitors the bandwidth used by the second vServer A . At step the appliance receives a client request. At step the appliance determines whether or not the bandwidth threshold for the second vServer A has been exceeded. If not at step the appliance directs the client request to the second vServer A . If the threshold has been exceeded the appliance at step determines whether or not to establish or use a third vServer N or provide a redirect URL to the client . In one case at step the client is redirected to the service and bypasses the second vServer A . At step the appliance may determine if the client is persistent with the second vServer A . If the client is sticky or persistent to the second vServer A the appliance may direct the request to the second vServer A at step . Otherwise the appliance spills over to an established third vServer N at step . The method may continue at step to monitor and perform object based spillover management for the third vServer N.

In further detail at step an appliance establishes a first virtual server A which manages connections and direct requests from a plurality of clients to a first set of one or more vServers A N . The first set of one or more vServers A N may manage such as load balance one or more services . The first vServer A may be configured to direct request identifying a first object type A to a first set of one or more vServers A N such as a second vServer A . In some embodiments the first vServer A determines or identifies object types from a request responsive to one or more policies of a policy engine . In another embodiment the first vServer N determines which vServer A N to direct the request responsive to a policy and or the policy engine . In one embodiment the appliance may establish a plurality of virtual servers A N each vServer A N direct client requests based on a different object type or the same object type.

At step the appliance may establish or otherwise provide a bandwidth threshold for any of the object handling vServers such as the second vServer A . In one embodiment the bandwidth threshold may be initially configured by a user or administrator of the appliance. In another embodiment the bandwidth threshold may be initially determined by the appliance by monitoring the bandwidth used by the vServer or by polling one or more services . In some embodiments the appliance may use a default or predetermined bandwidth threshold . For example the appliance may use a predetermined bandwidth threshold associated with or based on the type of service . In other embodiments the bandwidth thresholds may be established by the appliance or user based on the object type. In one case a vServer A may be configured to have a bandwidth threshold A for a first object type and another vServer N may be configured with a bandwidth threshold N having a different threshold value than bandwidth threshold A. For example a vServer A processing requests for media content such as video audio may be designated with a larger bandwidth threshold A than a vServer B handlings requests for smaller files or web pages.

At step the appliance may monitor a status of any of the vServers and any vServers or services under management. In one embodiment the appliance may use a monitoring agent . In another embodiment the appliance may use a plurality of monitoring agents A N. In one embodiment the appliance may monitor the status for each or any of the vServers A N at predetermined time intervals for example once every 0.01 0.1 0.2 0.5 or 1 seconds. In another embodiment the appliance may monitor the status for each or any of the vServers A N asynchronously or based on any events.

At step the appliance measures and monitors the bandwidth used by any of the vServers A N receiving client communications directed from the first vServer A. The load monitor and or bandwidth detector may compute determine or otherwise make bandwidth measurements . In one embodiment the appliance determines the measured bandwidth of a vServer on a predetermined frequency. In another embodiment the appliance determines the measured bandwidth of a vServer triggered by an event. In one case the appliance determines the measured bandwidth of a vServer at the request of a user. In some embodiments the appliance measures bandwidth based on a number of bytes transferred to and or from a vServer . In other embodiments the appliance measures bandwidth based on round trip times of communication to and or from a vServer . In some embodiments the appliance may dynamically adjust the bandwidth threshold based on bandwidth measurements. In other embodiments the appliance may dynamically adjust the bandwidth threshold based on performance and or operational characteristics of the appliance the vServer the network connection and or the service .

At step the appliance may receive a client request. In some embodiments the client request is for one or more objects having an object type . In one embodiment the client request includes a URL matching identifying associated with or corresponding to an object type . In another embodiment the client request includes a file name reference type or extension identifying or associated with an object type . In one embodiment the appliance intercepts the client request as a transparent interception device. In another embodiment the client transmits the request to the appliance as a proxy. In other embodiments the appliances receives a client request to access a service via a previously established transport layer connection. The transport layer request may be received from any computing device including a client server or a second appliance . In one embodiment the request may identify a type of service which may be associated with or other identify an object type . In yet another embodiment the appliance applies a policy to any portion or content the client request to identify or determine the object type .

In other embodiments the client request identifies a plurality of object types A N. In these embodiments the first vServer A directing traffic to the other vServers A N may split the request up according to each of the plurality of object types A N. For example the first vServer A may directs a first portion of the request corresponding to a first object type to a second vServer A and a second portion of the request corresponding to a second object type to a third vServer N . In another example the first vServer A directs a first portion of the request identifying a first object type A to vServer A while a second vServer B directs a second portion of the request identifying a second object type N to another vServer N . In some embodiments the first vServer A may direct a client request having a plurality of object types A N to a single second vServer A . The handling of multiple object types A N may be specified by a policy of which object type A N has priority in switching decisions for virtual servers.

At step the appliance may determine whether the measured bandwidth for an object handling vServer A N has reached or exceeded the corresponding bandwidth threshold A N. For example the appliance may compare the current measured bandwidth A for the second first virtual server A handling a first object type with the current value of the bandwidth threshold A for the second virtual server. In other embodiments the load monitor and or bandwidth detector may have already determined the bandwidth threshold for the second vServer A has been reached or exceeded. In another embodiment the appliance may determine if the bandwidth threshold has been reached or exceeded responsive to receiving the client request. If the bandwidth threshold of the second vServer A the appliance may provide the client request to the second virtual server at step .

If the appliance determines the bandwidth threshold of the second virtual server A has been exceeded the appliance may establish use or otherwise spillover to a third virtual server N at step . The third virtual server N may handle client requests corresponding to the object type of the second virtual server A . In other embodiments a third virtual server N may already have been established prior to some or any of the steps shown. In another embodiment the third virtual server N may be established responsive to determining the bandwidth threshold has been exceeded. The second virtual server may provide access to the object type via a second plurality of services . In one embodiment one or more of the second plurality of services may comprise the same type of service as one or more of the first plurality of services. The appliance may then establish and or adjust a bandwidth threshold for the third virtual server. The appliance may provide the client request to the second virtual server N at step .

In other embodiments if the bandwidth threshold of the second virtual server A has been exceeded the appliance may redirect the client making the request to another resource. In one embodiment the appliance may transmit a URL to the client comprising the address of a server or service such that the client may bypass the appliance and access the server or service directly. In one embodiment the appliance may transmit a URL to the client comprising the address of a second appliance . In still another embodiment the appliance may redirect the client request to a second appliance.

At step the appliance may determine whether the client making the request has a previously existing connection or session with either the first or a second virtual server. In some embodiments an appliance may assign a priority to providing requests from a client to virtual servers that have previously serviced or are currently servicing connections or session from the client. For example if a request is received from a client and the client has a currently existing connection with a third virtual server N the appliance may provide the request to the third virtual server even if the second virtual server A has reached or exceeded the bandwidth threshold. Or for example if a client has a previous connection via a backup virtual server and the primary virtual server subsequently falls below the bandwidth threshold the appliance may still provide a subsequent request from the client to the backup virtual server. In one embodiment a connection management mechanism or other appliance component may track previously established or current connections or session so that incoming requests from a client can be provided to a virtual server having previously serviced the connection or session from the client.

At step the appliance may dynamically manage virtual spillover based on bandwidth and object types by directing or providing the client request to the spillover or third vServer N . In some embodiments the appliance determines the third vServer N handling a first object type is busy unavailable or has exceeded its bandwidth threshold or another threshold. In response the appliance may redirect the client at step or provide the client request to a fourth vServer B handling the first object type or another appliance . In some embodiments the appliance has a plurality of vServers A N handling objects corresponding to an object type and determines which vServer to direct the client request based on comparison of each vServer s measured bandwidth and or bandwidth threshold. In one case the appliance provides the client request to one of a plurality of backup or spillover vServers configured to handle the object type based on the least measured bandwidth. In another case the appliance provides the client request to the vServer handling the object type with the greatest difference between the measured bandwidth and the bandwidth threshold.

Although an embodiment of method is generally described above in regards to measuring and monitoring bandwidth of a second vServer managed by a first vServer and spilling over to a third or fourth vServer any steps of the method may be performed for the third spillover vServer fourth spillover vServer and so on. An embodiment of method or any steps thereof may be practiced for a plurality of virtual servers managing a plurality of other virtual servers each handling a plurality of object types. Another embodiment of the method or any steps thereof may be practiced for a chain of spillover virtual servers so that a second vServer spills over into a third vServer based on bandwidth and object types and the third vServer into a fourth vServer and so on.

Furthermore any of the systems and method discussed herein may be practiced in combination. For example the techniques of dynamic connection spillover management described in conjunction with may be practiced with the object based bandwidth based spillover management described in conjunction with . In some embodiment the appliance may establish monitor and manage spillover of virtual servers based on multiple thresholds. For example the appliance may use both connection based thresholds and bandwidth based thresholds to determine to spillover from one virtual server to another for handling a client request identifying an object type. In one embodiment the appliance may spillover from one virtual server to another virtual server when both thresholds are reached or exceeded and for a certain object type. For example for processing client requests of a first object type the second vServer managed by the first vServer may have a connection capacity threshold and a bandwidth threshold. Another object handling vServer may have different connection capacity threshold and or bandwidth threshold. In another embodiment the appliance may spillover from one virtual server to another virtual server for handling objects of a certain type when either of the thresholds are reached or exceeded.

Referring now to systems and methods for managing spillover from a first virtual server to a second virtual server based on health are depicted. The appliance may establish or user configure a health threshold for one or more virtual servers managing one or more services. The health threshold may be established or identified as a percentage. The appliance monitors the health of the services used by a virtual server. In response to detecting the health falling below the established health threshold the appliance dynamically directs client requests to another virtual server. The health threshold may be adjusted to take into account capacity response times virtual server performance or performance of the server. The appliance manages virtual servers based on health to maintain performance of the virtual servers and the services managed by the virtual servers at a desired level or within a predetermined performance range.

Referring now to an embodiment of an appliance or intermediary for providing virtual server spillover management based on health is depicted. In brief overview the appliance establishes a first vServer A to manage access by a plurality of clients to one or more services A N of a first set of servers A N. The appliance includes a connection management mechanism or connection manager for managing and balancing requests from clients to one or more set of services A N via one or more vServers A N. The appliance establishes for a first vServer A a health threshold A which may be specified by a user. The appliance may establish a second vServer N with a second health threshold B. Via monitoring agents A N the appliance monitors the operational status of each of the services A N. The monitoring agents may include a health monitor for measuring the health used by a virtual server . The health monitor may at predetermined frequencies or time frames determine a measured health A for a first vServer A. The health monitor may also determine a measured health B for the second vServer N.

If the measured health for the first vServer A is determined to have reached or fallen below the health threshold A the connection manager of the appliance may determine to direct client requests to the second vServer N. For example a user may configure a health threshold at 50 . If the health detector determines the measured health of the vServer falls below 50 the appliance via the connection management mechanism may switch client requests to the second vServer N.

Each of the vServers A may identify or be configured to identify the one or more services the vServer is managing. In some embodiments services may be organized or configured into a group referred to as a service group or group of services. In some of these embodiments a command instruction policy or configuration may be applied to each service in a service group by referencing the service group via the command instruction policy or configuration. In some embodiments a service or a service group may be enabled or disabled by an administrator of the appliance. In other embodiments a service or service group may be enabled or disabled by any component of the appliance such as connection manager or a monitoring agent . In some embodiments a service or service group may be referred to or considered a member of the vServer. In some embodiments to have a service or service group be managed by a vServer the service or service group may be bound to the vServer via any type and form of bind command or instruction. In some of these embodiments a service may be referred to as bound to a vServer. In some embodiments a service may be enabled or disabled but not bound to the vServer. In other embodiments a service may be bound to a vServer but disabled.

Any of the services A N and or service groups may be assigned any type and form of weight such as any of the weights described in conjunction with and or B. The weight may be any type and form of numerical factor identifying a relative degree of importance influence consideration or value. In some embodiments each service may be assigned the same weight. In other embodiments each service may be assigned a different weight. In some embodiments some services are assigned the same weight while other services are assigned different weights. In one embodiment a same or different weight may be assigned to any service group. In some embodiments the weight assigned to a service group is assigned at the group level. For example the service group may be considered a single entity with the assigned eight. In other embodiments the weight assigned to a service group is assigned to each of the services of the service group. For example the services in the service group may be treated as separate entities each with the same weight assigned to the service group. In some embodiments a sum of the weights assigned to a service and or service group may be equal to 100. In other embodiments a sum of the weights assigned to a service and or service group may be any predetermined number greater than or less than 100.

In some embodiments a service and or service group may be assigned a different weight based on state up down active inactive enabled disabled etc. In one embodiment a service may have a first weight for an up state. In some embodiments the service may have a second weight for a down state. In some embodiments a service and or service group may be assigned a different weight based on load. In another embodiment the a service and or service group may be assigned a progressively changing weight based on changes in state and or load.

The health A B generally referred to as health may be defined as a percentage of weights of services that are currently in an up state sometimes referred to as active to the sum total of the weights of all enabled services such as those services that are either in an up or down state. The down state is sometimes referred to as inactive. From a computational perspective the health may be expressed or represented in logic or executable form as Health of a virtualServer activeWeight of virtualServer totalWeight of virtualServer 100 where 

The activeWeight parameter input or value to the health determination may comprise the addition or summation of each of the weights assigned to each service and or service group that is identified as in a predetermined state. In one embodiment the predetermined state is up or active. The activeWeight value may be set to a resulting total of the addition or summation. In some embodiments the service and or service group must be enabled and in the predetermined state to be included in the addition or summation. In some embodiments the service and or service group must be bound and in the predetermined sate to be included in the addition or summation.

The totalWeight parameter input or value to the health determination may comprise the addition or summation of each of the weights assigned to each service and or service group that is assigned to the vServer. In some embodiments those service and or service groups that are enabled are included in the totalWeight computation. In some embodiments those service and or service groups that are bound to the vServer are included in the totalWeight computation. in some embodiments those service and or service groups that either have an up or down state are included in the totalWeight computation The sum of weights of services and or service groups that are enabled may include all services that are either identified as UP or DOWN . In some embodiments the sum of weights of services and or service groups that are enabled may not includes those services which are marked disabled or otherwise configured to be disabled.

In some embodiments the health is expressed numerically. In other embodiments the health is expressed as text or string format. In some embodiments health is expressed as a percentage in the form X XX XXX In some embodiments the range of health is from 0 to 100 . In some embodiments health may be expressed as a percentage with any number of decimal places such as X.X XX.XX or XXX.XXX . In other embodiments health is expressed without multiplying by a 100 in the above equation. In these embodiments health may be expressed as a percentage greater than 100 . In other embodiments the health may be a number. In some embodiments health may be a ratio. In one embodiment health may be a fraction. In some embodiments health may be a decimal.

The health monitor sometimes referred to as a health detector or detector includes or provides logic business rules functions or operations for determining the health of one or more virtual servers . The health detector may include software hardware or any combination of software and hardware. The health detector may comprise an application program script library process service driver task thread or any type and form of executable instructions. In some embodiments the health monitor is a monitoring agent. In another embodiment the health monitor is part of a monitoring agent. In still another embodiment the health monitor may be part of the vServer. In yet another embodiment the health monitor may be a separate component of the appliance in communication with any one or more of the monitoring agent vServer and or connection manager.

In some embodiments the health detector determines or computes the health . The health detector may determine the health on a predetermined frequency. In some embodiments the health detector determines an average health over any period of time In other embodiments the health detector measures the health for a vServer based on the number of packets on a queue waiting to be transmitted. In some embodiments the health detector determines health upon the transition of a queue of network packets from empty to non empty and vice versa. In some embodiments the health detector determines health upon receipt of a client request. In some embodiments the health detector determines health upon receipt of a server response.

The health detector may determine the health of a vServer responsive to any one or more monitoring agents. For example in some embodiments the health detector may compute recompute the health upon return of a status of a service from a monitoring agent. In another embodiment the health detector may compute recompute the health upon a change in status of a service from a monitoring agent. In some embodiments the health detector may determine the health at a configured or configurable predetermined frequency. In some embodiments the health detector may determine the health at different times or different frequencies for each vServer. In yet another embodiment the health detector may use different health computations among a plurality of vServers. For example in some embodiments the type and form of the health computation may be configurable or specified by policy.

In some embodiments the health detector determines computes or establishes the totalWeight of health a first time and updates the totalWeight of services upon a change in the enabled or disabled state of a service or service group. In some embodiments the health detector determines computes or establishes the totalWeight of health a first time and updates the totalWeight of services upon a change in the weight of any of a service or service group. In other embodiments the health detector determines computes or establishes the totalWeight any type a health determination or computation is made.

The health threshold for a vServer may be specified as a number such as a real or integer. In some embodiments the health threshold may be expressed as a percentage. In other embodiments the health threshold may be expressed as a ratio or a decimal. For example the health threshold may represent a percentage of enabled services active and used by the vServer . In another example the health threshold may represent a percentage of health available to the vServer . In some embodiments the health threshold may be expressed logically using any type and form of expression such as for example health

In some embodiments the health threshold may indicate a relative percentage from a predetermined point. In one embodiment the health threshold identifies an amount of change of the measured health. For example the health threshold may represent an amount of decrease in percentage of health to be considered triggering the threshold. In another embodiment the health threshold may indicate an average health value to maintain. In some embodiments the health threshold may indicate an average health value over a period of time. In other embodiments the health threshold may indicate a relative percentage of services that change from an active to inactive state or from an up to a down state.

The connection management mechanism also referred to as a connection manager or a virtual server switch comprises software hardware or any combination of software and hardware having logic functions or operations for receiving and managing requests connections and communications from one or more clients A N. In one embodiment the connection manager receives or intercepts transport layer connection requests and or communications between the clients A N and one or more services A N. The connection manager may include an application program service process task thread or any type and form of executable instructions. In response to receiving a client communication the connection manager identifies determines or selects a vServer for processing a received communication from a client .

The connection manager may operate responsive to the load monitor and or the health detector . The load monitor may monitor the measured health . In some embodiments the load monitor and or health detector measures the health on a predetermined frequency. In one embodiment the load monitor and or health detector measures the health responsive to any events such as receipt of a network packet. In other embodiments the load monitor and or health detector may determine whether or not the measured health is less than the health threshold .

If the connection manager determines from the load monitor and or health detector that the measured health of a first vServer A falls below the health threshold the connection manager directs client requests for the services managed by the first vServer A to a second vServer . The second vServer may be configured or established as backup server to the first vServer A. For example the first vServer A may be designated a primary vServer A and the second vServer N as backup vServer N. In another embodiment the second vServer N may be another virtual server primary redundant or otherwise for managing the services A N. In yet another embodiment the second vServer N is configures or designated as the spillover virtual server for the first vServer A. In some cases the second vServer N is established upon determining the first vServer A fall below the health threshold . In other cases the vServer N is already operating or executing on the appliance .

In some embodiments the connection manager directs new client request requests to the second vServer . In one embodiment if the request is from a connection already established with the first vServer A the connection manager may direct the request to the first vServer A even if the health threshold is exceeded or fallen below. This may be referred to as connection or session persistence. In another embodiment the connection manager directs any client requests to the second vServer for example even a request of a previously established connection.

In one embodiment the connection manager directs client requests to the second vServer N while the first vServer has a measured health greater than the health threshold . In another embodiment the connection manager directs clients requests back to the first vServer upon determining that the measured health of the first vServer has increased above the health threshold . In some embodiment the connection manager determines which of the first vServer A and the second vServer N has the highest health or is the least nearest to the corresponding health threshold and directs the client requests to the determined vServer. In other embodiments and in the case of multiple vServers A N falling below a health threshold the connection manager determines which vServer A N falls below its corresponding threshold the least and directs the client requests to the determined vServer.

Upon detecting the health threshold has been reached for the first vServer A and or the second vServer N the connection management mechanism in one embodiment may determine not to establish another spillover vServer N but instead redirects the client directly to a server or otherwise to bypass the appliance . For example the connection management mechanism may determine the health threshold B for the spillover vServer N has been reached and may redirect the client to bypass the appliance instead of establishing a third vServer N for spillover. In these embodiments the connection management mechanism may transmit a redirect Uniform Resource Locator URL to the client for the client to connect to in response to the client s connection request. The URL may identify any one of the servers or services .

In some embodiments the appliance via a load monitor and or health detector measures and monitors the health of the second virtual server N. The second vServer N may have the same health threshold or a different health threshold as the first vServer A. If the connection manager determines from the load monitor and or health detector that the measured health N of the second vServer N falls below the health threshold the connection manager directs client requests for the services managed by the second vServer A to another vServer N such as the first vServer A or a third vServer B. The second vServer N may have a third vServer B designated as backup virtual server or a spillover virtual server. The health threshold management techniques described herein may be used for a chain or plurality of virtual servers and spillover virtual servers each with a health threshold and designated backup or spillover virtual server.

The appliance via the connection manager directs client requests to the primary vServer or any backup or spillover vServer based on measured health in view of the established health threshold . The appliance may dynamically adjust any health threshold for any vServer based on any performance or operational characteristics of the appliance vServer bandwidth network connection client or server. In one embodiment the appliance may determine that the established health threshold is set relatively low in comparison to the measured health and determines to dynamically increase the health threshold . For example the appliance may adjust to the health threshold within a certain percentage or threshold of the measured health. In another embodiment the appliance may determine that the established health threshold is set relatively high in comparison to the measured health and determines to dynamically decrease the health threshold .

In one case the appliance dynamically sets or establishes a health threshold by measuring health of a vServer for a predetermined time period. For example upon startup of a vServer the health detector may measure health for a predetermined or configured time period and then based on an average peak or range of health measurements set the health threshold . In another case the appliance may dynamically adjust a health threshold based on adding or removing services A managed by a vServer . In still other embodiments the appliance may dynamically adjust the health threshold of a vServer based on information and feedback from a monitoring agent and or monitoring service . In still other embodiments the appliance may dynamically adjust health thresholds based on one or more policies of a policy engine .

In some embodiment the appliance excludes a vServer from a load computation or determination or otherwise a load balancing decision if the health of the vServer falls below the health threshold . In these embodiments this may be done so that the other vServer A N which carry the load for the excluded vServer do not also become overloaded. In other embodiments the appliance adjusts a weight used for the vServer upon detecting the vServer s bandwidth exceeds the health threshold . For example the weight of the vServer may be adjusted to minimize the impact to the other vServer A N for not having the vServer available to also service requests.

In some embodiments the appliance or any component thereof may adjust any one or more weight of any one of the services or service groups and then recompute the health. The appliance may dynamically adjust any weight any service or service group based on any performance or operational characteristics of the appliance vServer bandwidth network connection client or server.

Referring now to an embodiment of steps of a method for practicing dynamic virtual server spillover management based on health is depicted. In brief overview at step the appliance establishes a first virtual server A which directs requests from a plurality of clients to a plurality of services. At step the appliance establishes a health threshold for the first virtual server. At step the appliance monitors a status for each of the plurality of services. At step the appliance measures and monitors the health of the first vServer . At step the appliance receives a client request. At step the appliance determines whether or not the health threshold for the first vServer A has been exceeded. If not at step the appliance directs the client request to the first vServer A. If the threshold has been exceeded the appliance at step determines whether or not to establish or use a second vServer N or provide a redirect URL to the client . In one case at step the client is redirected to the service and bypasses the first vServer A. At step the appliance may determine if the client is persistent referred to as being sticky with the first vServer A or the second vServer N. If the client is sticky to the first vServer A the appliance may direct the request to the first vServer A at step . Otherwise the appliance spills over to an established second vServer N at step . The method may continue at step to monitor and perform health based spillover management for the second vServer N.

In further detail at step an appliance establishes a first virtual server which manages connections and direct requests from a plurality of clients to a first plurality of services . In one embodiment the appliance may establish the virtual server upon startup of the appliance. In another embodiment the appliance may establish the virtual server in response to a previously established virtual server exceeding maximum connection threshold. In one embodiment the appliance may establish a plurality of virtual servers. In some embodiments a user configures and starts the first vServer . In other embodiments the first vServer is configured established or designed by the appliance or a user as a primary virtual server.

At step the appliance may establish or otherwise provide a health threshold for the first vServer . In one embodiment the health threshold may be initially configured by a user or administrator of the appliance. In another embodiment the health threshold may be initially determined by the appliance by monitoring the health of the vServer or by polling one or more services . In some embodiments the appliance may use a default or predetermined health threshold . For example the appliance may use a predetermined health threshold associated with or based on the type of service .

At step the appliance may monitor a status for each of the services using any means. In one embodiment the appliance may use a monitoring agent . In another embodiment the appliance may use a plurality of monitoring agents . In one embodiment the appliance may monitor the status for each of the services at predetermined time intervals for example once every 0.01 0.1 0.2 0.5 or 1 seconds. In another embodiment the appliance may monitor the status for each of the services asynchronously or based on any events.

At step the appliance measures and monitors the health of the first vServer A. The load monitor and or health detector may compute determine or otherwise make health measurements . In one embodiment the appliance determines the measured health of a vServer on a predetermined frequency. In another embodiment the appliance determines the measured health of a vServer triggered by an event. In one case the appliance determines the measured health of a vServer at the request of a user. In some embodiments the appliance measures health as a percentage using any of the health computations described in connection with . In some embodiments the appliance may dynamically adjust the health threshold based on health measurements. In other embodiments the appliance may dynamically adjust the health threshold based on performance and or operational characteristics of the appliance the vServer the network connection and or the service .

At step the appliance may receive a client request. In one embodiment the appliance intercepts the client request as a transparent interception device. In another embodiment the client transmits the request to the appliance as a proxy. In some embodiments the appliance receives a client request to open or establish a transport layer connection. In other embodiments the appliances receive a client request to access a service via a previously established transport layer connection. The transport layer request may be received from any computing device including a client server or a second appliance . In one embodiment the request may identify a type of service . For example the request may comprise a request for HTTP service. Or for example the request may comprise a request for UDP service.

At step the appliance may determine whether the measured health for a vServer has reached or fallen below the health threshold . The appliance may compare the current measured health for the first virtual server with the current value of the health threshold for the first virtual server. In other embodiments the load monitor and or health detector may have already determined the health threshold for the vServer has been reached or exceeded. In another embodiment the appliance may determine if the health threshold has been reached responsive to receiving the client request. If the health threshold of the first virtual server has not been reached the appliance may provide the client request to the first virtual server at step .

If the appliance determines the health threshold of the first virtual server has been reached the appliance may establish use or otherwise spillover to a second virtual server N at step . In other embodiments a second virtual server N may already have been established prior to some or any of the steps shown. In another embodiment the second virtual server N may be established responsive to determining the health threshold has been reached. The second virtual server may provide access to a second plurality of services . In one embodiment one or more of the second plurality of services may comprise the same type of service as one or more of the first plurality of services. The appliance may then establish and or adjust a health threshold for the second virtual server. The appliance may provide the client request to the second virtual server at step .

In other embodiments if the health threshold of the first virtual server has been reached the appliance may redirect the client making the request to another resource. In one embodiment the appliance may transmit a URL to the client comprising the address of a server or service such that the client may bypass the appliance and access the server or service directly. In one embodiment the appliance may transmit a URL to the client comprising the address of a second appliance . In still another embodiment the appliance may redirect the client request to a second appliance.

In another embodiment the appliance identifies that the measured health exceeds the health threshold and directs client requests to the first vServer. In some embodiments the appliance identifies that one or more services that were previously down and the measure health now exceeds the health threshold. In response to the health reaching or being above the health threshold the appliance may direct client request to the first vServer instead of the second vServer.

At step the appliance may determine whether the client making the request has a previously existing connection or session with either the first or a second virtual server. In some embodiments an appliance may assign a priority to providing requests from a client to virtual servers that have previously serviced or are currently servicing connections or session from the client. For example if a request is received from a client and the client has a currently existing connection with a first virtual server the appliance may provide the request to the first virtual server even if the first virtual server has reached or exceeded the bandwidth threshold. Or for example if a client has a previous connection via a backup virtual server and the primary virtual server subsequently falls below the health threshold the appliance may still provide a subsequent request from the client to the backup virtual server. In one embodiment a connection management mechanism or other appliance component may track previously established or current connections or session so that incoming requests from a client can be provided to a virtual server having previously serviced the connection or session from the client.

At step the appliance may dynamically manage virtual spillover based on health by directing or providing the client request to the spillover or second vServer N. In some embodiments the appliance determines the second vServer is busy unavailable or has exceeded its health threshold or another threshold. In response the appliance may redirect the client at step or provide the client request to a third vServer B or another appliance . In some embodiments the appliance has a plurality of vServers A N managing the services and determines which vServer to direct the client request based on comparison of each vServer s measured health and or health threshold. In one case the appliance provides the client request to one of a plurality of backup or spillover vServers based on the best measured health. In another case the appliance provides the client request to the vServer with the greatest difference between the measured health and the health threshold.

Although an embodiment of method is generally described above in regards to measuring and monitoring health of a first vServer and spilling over to a second vServer any steps of the method may be performed for the second vServer and a spillover server for the second vServer and for a third vServer and so on. An embodiment of method or any steps thereof may be practiced for a plurality of virtual servers such as a set of primary vServer managing the same or different services. Another embodiment of method or any steps thereof may be practiced for a chain of spillover virtual servers so that a second vServer spills over into a third vServer based on health and so on.

H. Systems and Methods for Handling Spillover in Conjunction with Limit Parameters in a Multi Core System

The systems and methods of the solution described herein are directed towards handling spillover in conjunction with limit parameters for resources used by a plurality of cores in a multi core system. In general overview a pool manager allocates a limited number of uses of a resource across a plurality of packet processing engines operating on a plurality of cores of a multi core system. The pool manager divides the limited number of uses into an exclusive quota pool and a shared quota pool. The pool manager allocates to each packet processing engine an exclusive number of uses of a resource wherein each exclusive number may be taken from the exclusive quota pool. Each packet processing engine may use the resource up to its exclusive number of uses without further restrictions.

If a packet processing engine wishes to increase its use of the resource beyond the exclusive number of uses the packet processing engine may request to the pool manager to borrow uses from the shared quota pool. The pool manager may grant the packet processing engine a batch number of uses from the shared quota pool. When the packet processing engine completes one or more uses of the resources the packet processing engine may return borrowed uses also referred to herein as quota to the shared quota pool.

At times the pool manager may have already granted all the uses from the shared quota pool to one or more packet processing engines. In these situations the pool manager may evaluate the packet processing engines to determine if one of the engines have available exclusive uses of the resource. The pool manager may select an engine as the spillover engine for the packet processing engine seeking another use of the resource. Thus the request to use the resource is redirected to and serviced by the spillover packet processing engine. As a result while a limited number of uses for a resource is being distributed across a plurality of cores on a multi core system a core receiving heavy traffic may nevertheless spillover into another core that services the requests.

Referring now to a block diagram of an embodiment of a multi core system that handles a limit parameter for one or more resources is depicted. The multi core system may comprise any of the embodiments of the multi core system of . The multi core system may include a pool manager operating on any portion of the multi core system such as any core packet engine or the flow distributor. One of the cores may be designated a master core for which the pool manager operates. The other cores may also run a pool manager for communicating with the master core regarding the use of the resource. The pool manager may manage the use of a resource and limits thereof via an exclusive quota pool and or a shared quota pool .

The pool manager may comprise any program application process task or set of executable instructions for managing allocating distributing and or controlling the use of a resource via quota pools. The pool manager may determine the limit for the number of uses of the resource the exclusive quota pool and the shared quota pool . The pool manager may allocate batch numbers of uses to packet processing engines from the shared quota pool .

In some embodiments the pool manager executes on a master core. In other embodiments the pool manager executes as part of the flow distributors . In some embodiments the pool manager executes as part of a packet processing engine . In various embodiments the pool manager may include a plurality of pool managers each of which may execute on a respective core of the plurality of cores. The pool manager on the master core may control and allocate the use of resources via the quota pools. Any pool manager on any secondary core may request and receive an allocation of the use of resources from the pool manager of the master core. In some embodiments a pool manager on any secondary core may request uses from the exclusive quota pool allocated to the secondary core. In other embodiments a pool manager on any secondary core may request a batch number of uses from the shared quota pool .

The pool manager on any secondary core may determine when the secondary core has reached its exclusive number of uses of the resource. In some embodiments the pool manager may communicate with the pool manager on the master core to determine the availability of uses in the shared quota pool . In some embodiments the pool manager on any secondary core may detect when the secondary core has completed a use of a resource and whether the secondary core has borrowed from the shared quota pool . In these embodiments the pool manager may determine if the secondary core should return quota to the shared quota pool .

The exclusive quota pool may include a predetermined number of uses that may be assigned or allocated to a core or packet engine exclusively and or without restrictions. In one aspect the exclusive quota pool provides a number of exclusive uses to a resource. In some embodiments an allocation of an exclusive use from the exclusive quote pool to a specific core or packet engine may not be shared or used by another core or packet engine. Exclusive uses from the exclusive quota pool may be divided or allocated across the plurality of cores in any manner. In some embodiments each core may be assigned an exclusive number of uses of the resource. In some embodiments the exclusive quota pool may include a plurality of exclusive quota pools. Each exclusive pool including an exclusive number of uses for a respective core or packet engine of that core.

The shared quota pool may include a predetermined number of uses that may be shared and or allocated to any core or packet engine in a non exclusive manner. In one aspect the shared quota pool provides a number of non exclusive uses to a resource. In some embodiments an allocation of a shared use from the shared quote pool to a specific core or packet engine may be returned to the shared quota pool to be used by another core or packet engine. In some embodiments a core may access the shared quota pool after the core has reached its exclusive number of uses of the resource. The shared quota pool may be accessed by any core in the plurality of cores . A core that has reached its exclusive number of uses may borrow from the shared quota pool . The core may request to borrow uses from the shared quota pool by sending a request to the pool manager . The pool manager may determine if the shared quota pool has available uses of the resource. If uses of the resource are available the pool manager may allocate a batch number of uses to the core . The pool manager may decrement the available number of uses of the resource by the batch number of uses. In some embodiments the core may implement a lock upon borrowing uses from the shared quota pool . When the core completes its use of a resource the core may determine if it has borrowed from the shared quota pool and return quota.

The pool manager may allocate the limited uses of the resource among the exclusive quota pool and the shared quota pool in any manner by any algorithm or decision making process. In some embodiments the pool manager may make the allocation according to user input that configures the quota pools. For example a user may input a percentage to designate the percentage of the limit to be exclusive or shared. The user may input a number to designate the number of exclusive uses for each core. The user may input a number to designate the number of uses for the shared quota pool such that the remaining uses may be placed in the exclusive quota pool . In other embodiments the pool manager may make the allocation according to a predetermined number coded into the pool manager . In some embodiments the pool manager may make the allocation according to the performance of the multi core system. In these embodiments the pool manager may evaluate a metric associated with the performance of the multi core system and adjust the allocation of uses between the exclusive quota pool and the shared quota pool .

The pool manager may manage the uses of any type or kind of resource. In some embodiments the pool manager may manage the number of connections running in parallel to a service. In some embodiments the pool manager may manage the connection capacity each core may access. In other embodiments the pool manager may manage the bandwidth of the multi core system. In additional embodiments the pool manager may manage the number of bytes per second being processed by the cores . In various embodiments the pool manager may manage the number of packets per second being processed by the cores . In various embodiments the pool manager may manage any type or form of resource use as described in reference to .

Referring now to a flow diagram depicting steps of an embodiment of a method for allocating limited numbers of uses of resources to a plurality of packet processing engines operating on a plurality of cores is shown and described. In brief overview the method includes identifying step a limit for a number of uses of a resource across a plurality of packet processing engines. The method further includes establishing step an exclusive quota pool for the resource based on the limit. The method further includes establishing step a shared quota pool for the resource based on the limit. The method further includes establishing step a batch number of uses to be provided from the shared quota pool. The method further includes allocating step an exclusive number of uses from the exclusive quota pool to a packet processing engine operating on a core.

The pool manager may identify the limit for the number of uses of a resource. This limit may be for the use of the resource across the multi core system the plurality of cores and or packet engines or any portion thereof. In some embodiments a user inputs the limit to the appliance . The user may input the limit through the graphical user interface GUI or the command line interface CLI as described in . The limit may be any type and form of threshold on a number of uses of the resource. In some embodiments the pool manager identifies the limit according to a parameter of the data communication network. In many embodiments the pool manager identifies the limit as the maximum dynamic connection threshold bandwidth threshold and or health threshold described in reference to .

In various embodiments the limit may represent a maximum capacity of the resource. In some embodiments the limit may represent a physical capacity of the resource. In other embodiments the limit may represent a processing capacity of the resource. For example the limit may be a maximum number of connections that may run in parallel to a service. In many embodiments the limit for a number of uses for a resource may be absolute. Also the limit may simply be a desired limit. The limit may represent a percent of or a predetermined threshold of a capacity of the resource. When the total number of uses of the resource reaches the limit the resource may deny further requests to use the resource.

The pool manager may establish the exclusive quota pool for the resource based on the limit. In various embodiments the pool manager establishes the exclusive quota pool by applying a function to the limit. In many embodiments the exclusive quota pool may be a predetermined percentage of the limit. In one example the exclusive quota pool may be established as 80 of the limit. If the number of connections that may run in parallel to a service has a limit of 100 the exclusive quota pool may be 80 connections. In various embodiments the exclusive quota pool may be established as the largest multiple of the number of cores less than a predetermined percentage of the limit. In one example the limit is 100 connections to a service the predetermined percentage is 80 and the multi core system has 7 cores. As 80 connections cannot be evenly distributed among 7 cores the exclusive quota pool is established as 77 connections the largest multiple of 7 that is less than 80.

The pool manager may establish the shared quota pool for the resource based on the limit. The shared quota pool may be established by subtracting the exclusive quota pool from the limit. The pool manager may implement the shared quota pool in a memory shared among the cores. In some embodiments the pool manager may implement the shared quota pool using a data structure. The data structure may include variables associated with the limit and the function applied to the limit that establishes the exclusive quota pool. The data structure may include a variable associated with the number of uses in the shared quota pool. The data structure may include a variable associated with the available number of uses in the shared quota pool. The data structure may include variables associated with the identity of one or more packet processing engines borrowing uses from the shared quota pool. The data structure may include variables associated with the number of uses being used by each of the identified packet processing engines.

The pool manager may establish the batch number of uses to be provided from the shared quota pool. The batch number of uses may be the number of uses a packet processing engine borrows whenever the packet processing engine accesses the shared quota pool. The pool manager may establish the batch number by applying a formula to the shared quota pool. In one embodiment the batch number of uses may be 10 of the shared quota pool. If the shared quota pool is for example 20 connections to a service the batch number is 2 connections. In another embodiment the batch number of uses may be 20 of the shared quota pool thereby resulting in a batch number of 4 for a shared quota pool of 20 connections. In various embodiments if the application of the formula to the size of the shared quota pool results in a batch number less than 1 the batch number defaults to 1.

The pool manager may allocate an exclusive number of uses from the exclusive quota pool to each packet processing engine . The exclusive number of uses may be the number of times a packet processing engine may use the resource without further restrictions. If the packet processing engine wishes to use the resource beyond its exclusive number the packet processing engine must borrow a batch number of uses if available from the shared quota pool. The pool manager may establish the exclusive number of uses based on the exclusive quota pool. The exclusive number of uses may be established by dividing the exclusive quota pool by the number of cores. If the exclusive quota pool divided by the number of cores is less than 1 then the exclusive number of uses becomes 0. In these embodiments all the uses of the resource will belong to the shared quota pool and each packet processing engine must borrow from the shared quota pool whenever the packet processing engine wishes to use the resource.

Referring now to a flow diagram depicting steps of an embodiment of a method for borrowing from a shared quota pool is shown and described. In brief overview the method includes receiving step a request to use a resource. The method also includes determining step if the packet processing engine will exceed its exclusive number of uses by fulfilling the request. If the packet processing engine will not exceed its exclusive number of uses the method also includes fulfilling step the request to use the resource. If the packet processing engine will exceed its exclusive number of uses the method also includes requesting step a batch number of uses from the shared quota pool. If the packet processing engine receives the batch number of uses the engine fulfills the request . If the pool manager determines the shared quota pool has been exhausted the pool manager selects a packet processing engine with available exclusive uses as a spillover engine step . The spillover engine fulfills the request step .

The multi core system may receive the request to use the resource. The multi core system may assign the request to any core of the plurality of cores. The multi core system may assign the request to a core based on the type of request the number of requests each core is processing or any other basis. The request to use the resource may include a request to open a connection to a service. In any of these embodiments the packet processing engine operating on a core may process the request.

The packet processing engine may determine if the packet processing engine will exceed its exclusive number of uses by fulfilling the request. In various embodiments the packet processing engine makes the determination by comparing its exclusive number of uses to its current number of uses. If the current number of uses 1 is less than or equal to the exclusive number of uses the determination is negative. Otherwise the determination is positive. In many embodiments the packet processing engine may maintain the number of its current uses in a non shared memory. In some embodiments the packet processing engine may include a counter with the number of its current uses of the resource.

If the determination is negative the packet processing engine may fulfill the request to use the resource. If the determination is positive the packet processing engine may request a batch number of uses from the shared quota pool before fulfilling the request. In various embodiments the packet processing engine may send a request for a batch number of uses to the pool manager . The pool manager may determine if the shared quota pool has an available batch number of uses. The pool manager may allocate a batch number of uses from the shared quota pool to the requesting packet processing engine . The pool manager may subtract a batch number of uses from the number of available uses in the shared quota pool. The pool manager may send a message to the packet processing engine indicating that the request for a batch number of uses has been granted. In some embodiments the packet processing engine may acquire a lock before fulfilling the request with one of the batch number of uses borrowed from the shared quota pool. In various embodiments the packet processing engine sets a variable indicating that the packet processing engine has borrowed uses from the shared quota pool.

In other embodiments the pool manager may determine that the shared quota pool does not have a batch number of uses available. In some embodiments the pool manager may send a message to the packet processing engine indicating that the request for a batch number of uses cannot be fulfilled. In some embodiments the pool manager may place the request for a batch number of uses and the identity of the requesting packet processing engine in a queue. In some embodiments the request for a batch number of uses in the queue may time out after a predetermined period of time.

In various embodiments the packet processing engine may resend the request for a batch number of uses after a predetermined period of time. In some embodiments the packet processing engine may place the request to use the resource in a queue. In some embodiments the request in the queue may time out after a predetermined period of time. In various embodiments the packet processing engine may send a message to the source of the request to use the resource indicating that the request cannot be fulfilled at that time.

If the pool manager determines the shared quota pool has been exhausted the pool manager selects a packet processing engine with available exclusive uses as a spillover engine step . In some embodiments the pool manager may ping each packet processing engine to determine if the engine has available exclusive uses. In other embodiments the pool manager may retrieve from a memory the number of exclusive uses each packet processing engine is using. The pool manager may select as the spillover engine the engine using the fewest number of exclusive uses. The pool manager may select engines to serve as spillover engines in a round robin method. In some embodiments the pool manager selects the first detected engine using less than its exclusive number of uses to be the spillover engine.

Once the spillover engine is selected the pool manager may store the identities of the spillover engine and the engine being supported by the spillover engine. The pool manager may also store identifying information about the request to use the resource such as a source IP address of the client and or session identifier. Then the pool manager forwards the request to the spillover engine for fulfillment step .

In various embodiments the multi core system may maintain connection or session persistence between a client and the spillover packet processing engine handling requests for the client . In some embodiments the multi core system selects the spillover packet processing engine for handling a client request even though the packet processing engine that needed spillover support no longer exceeds its exclusive number of uses and or the shared quota pool has uses to be allocated. In other embodiments the multi core system selects the original packet processing engine for handling a client request even though requests from other clients are directed to the spillover packet processing engine. In one embodiment the multi core system may select the original or spillover packet processing engine based on which engine most recently handled a request from the client .

Referring now to a flow diagram depicting steps of an embodiment of a method for returning quota to a shared quota pool is shown and described. In brief overview the method includes detecting step that use of a resource has been completed. The method also includes determining step if the packet processing engine borrowed from the shared quota pool. The method also includes if the determination is negative completing step the use of the resource. The method also includes if the determination is positive determining step if the number of completed uses of the resource is greater than or equal to the batch number. If the number of completed uses is not greater than or equal to the batch number the packet processing engine completes the use of the resource. If the number of completed uses is greater than or equal to the batch number the method includes returning step a batch number of uses to the shared quota pool in conjunction with completing step the use of the resource.

In further detail the packet processing engine may detect that use of a resource has been completed. In some embodiments the resource sends a message to the packet processing engine indicating that the use has been completed. In other embodiments the packet processing engine determines that a use has been completed after a predetermined amount of time. In these embodiments the packet processing engine determines a use has been completed because the use has timed out. In some embodiments the packet processing engine may receive a message from the source of the request to use the resource indicating that the request has been aborted.

The packet processing engine may determine if the packet processing engine borrowed from the shared quota pool in one of many ways. In some embodiments the packet processing engine may compare the number of its current uses of the resource to its exclusive number of uses. If the number of current uses exceeds the exclusive number of uses the packet processing engine may determine that borrowing occurred. In additional embodiments the packet processing engine may evaluate a variable that the packet processing engine sets upon borrowing from the shared quota pool. The packet processing engine may determine that borrowing occurred based upon the value of the variable.

If the packet processing engine determines that the packet processing engine did not borrow from the shared quota pool the packet processing engine may complete a use of the resource. In some embodiments the packet processing engine may place the connection to the resource in a reuse pool. The reuse pool may be exclusive to the packet processing engine . In these embodiments when the packet processing engine receives another request to use the resource the packet processing engine may access one of the connections to the resource in the reuse pool instead of opening a new connection to access the resource. In various embodiments the packet processing engine may close the connection to the resource.

If the packet processing engine determines that the packet processing engine borrowed from the shared quota pool the packet processing engine may determine if the number of completed uses of the resource is greater than or equal to the batch number. The packet processing engine may make this determination by subtracting the exclusive number of uses from the current number of uses and comparing the result to the batch number. If the difference is less than the batch number the packet processing engine may complete a use of the resource and closes the connection to the resource. If the difference is equal to or greater than the batch number the packet processing engine may send a message to the pool manager indicating the return of a batch number of uses to the shared quota pool before completing the use and closing the connection. In these embodiments the packet processing engine may relinquish the lock acquired when the packet processing engine borrowed from the shared quota pool. In various embodiments upon receiving a message indicating that a batch number of uses is being returned to the shared quota pool the pool manager may process requests for use of a resource in a queue of requests.

Although the methods of may be generally discussed in reference to a packet engine and a spillover packet engine the systems and methods of embodiments of the present solution may be used for virtual servers running on each core as part of the packet engine or separate from a packet engine to determine spillover thresholds and spillover persistence for virtual servers such as any of the embodiments of spillover management and spillover persistence discussed in conjunction with .

Referring to is another embodiment of steps of a method for managing spillover limits using the quota based allocation techniques described herein. In brief overview at step a spillover limit is identified for a multi core device intermediary to a plurality of clients and one or more servers. The multi code device may establish a virtual server on each of the cores or packet processing engines to manage the services provided by the one or more servers. One or more of the virtual servers may have a backup virtual server for handling client requests when the virtual server reaches its spillover threshold. At step based on the spillover limit the pool manager of the device allocates a number of resources uses to each of the virtual managers. The number of resources may be allocated from an exclusive quota pool and or a shared quota pool. At step the device determines that one of the plurality of virtual servers has reached or exhausted its allocated number of resource uses. At step responsive to the determination the device forwards a received client request to a backup virtual server. At step the device monitors the service the spillover limits and allocation of resource uses.

In further details at step the multi core device may be configured for any type of spillover limit including but not limited to connection based spillover dynamic connection based spillover health based spillover and bandwidth bases spillover. The spillover limit or threshold may be configured as a maximum number of connections to a service of the one or more services. The spillover limit may be configured a dynamic connection threshold determined from a sum of a connection capacity of each of the plurality of virtual servers. The spillover limit may be configured as a bandwidth threshold.

Although the device has multiple cores and multiple virtual servers and or packet engines operating on each core a spillover limit may be configured or specified for the device itself. The spillover limit may identify or specify the type of resource connection health bandwidth etc. Using the pool management techniques herein the multi core device may allocate and manage the number of resource uses across the cores packet engines and or virtual servers. In some aspects the multi core device allocates and manages the numbers of resource uses for the spillover limit to appear as a single core device configured with a single spillover limit.

The multi core device may be configured to operate or execute one or more virtual servers on each core of the device. Each of the virtual servers may manage one or more services executing on one or more servers. For each virtual server one or more backup virtual servers may be configured established or otherwise provided to handle client requests for the virtual server when the virtual server has reached its resource allocation corresponding to the spillover limit.

At step using any embodiments of the resource management techniques described herein the pool manager allocates a number of resource uses corresponding to the spillover limit across each of the cores or virtual servers operating on each core. The pool manager may establish an exclusive quota pool and or shared quota pool for a total number of resources uses for the resource such as connections health or bandwidth of the spillover limit. In some embodiments the pool manager allocates a number of exclusive resources to each core or virtual server from an exclusive quota pool. In some embodiments the pool manager allocates a number of non exclusive resource uses to each core or virtual server from a shared quota pool. In some embodiments the pool manager allocates a number of resource uses to each core or virtual server from both an exclusive quota pool and a shared quota pool. In some embodiments the pool manager may allocate an equal number of resources uses across each core or virtual server. In some embodiments the pool manager may allocate an unequal number of resources uses across each core or virtual server. In some embodiments the pool manager may allocate number of resources uses across each core or virtual server based on some weight assigned to the core or virtual server.

At step the device determines that the number of resources used by a virtual server of the plurality of virtual servers has reached an allocated number of resource uses of the virtual server. In some embodiments the virtual server determines that it has exhausted its allocated number of resource uses. In some embodiments the virtual server requests additional resource uses from the pool manager. In some embodiments the pool manager does not have resource uses to allocate to the virtual server. In some embodiments the pool manager determines not to allocate any more resource uses to the virtual server. In some embodiments the virtual server reaches its corresponding portion of the spillover limit when the virtual server has reached its allocated number of exclusive resource uses. In some embodiments the virtual server reaches its corresponding portion of the spillover limit when the virtual server has reached its allocated number of non exclusive resource uses. In some embodiments the virtual server reaches its corresponding portion of the spillover limit when the virtual server has reached its allocated number of exclusive and non exclusive resource uses. In some embodiments the device reaches the spillover limit when each of the virtual servers has reaches its allocated number of exclusive and or non exclusive resources. In some embodiments the device reaches the spillover limit when each of the virtual servers has reaches its corresponding portion of the spillover limit.

At step the device forwards responsive to the determination of step to a backup virtual server a request of a client received by the device for the virtual server. In some embodiments when any one virtual server of the plurality of virtual servers reaches its corresponding portion of the spillover limit or its corresponding allocation of resource users the device redirects request to the virtual server to a corresponding backup virtual server. In some embodiments when any all of the plurality of virtual servers reaches its corresponding portion of the spillover limit or its corresponding allocation of resource users the device redirects requests to any of the virtual servers to a backup virtual server. In some embodiments the connection manager determines when a spillover conditions exists and determines to forwards requests to a backup virtual server.

At step the device monitors the services and may adjust the corresponding spillover limit. In some embodiments one core or packet engine may be designated as the master core or packet engine for monitoring the service. In some embodiments one core or packet engine may be designated as the master core or packet engine for monitoring the spillover limit. In some embodiments one core or packet engine may be designated as the spillover master. The master core or packet engine may monitor one or more services bound to or managed by the plurality of virtual servers. For the case of spillover limits that change responsive to a state or status of the service the master core or packet engine may adjust the spillover limit responsive to monitoring. For example in some embodiments of dynamic connection spillover the master core or packet engine may increase or decrease the dynamic connection spillover limit responsive to a change in the capacity of connections. In some embodiments of bandwidth spillover the master core or packet engine may increase or decrease the bandwidth spillover limit responsive to a change in bandwidth capacity. In some embodiments of health spillover the master core or packet engine may increase or decrease the health spillover limit responsive to a change in health status of a service s .

The spillover master core or packet engine may propagate the change in spillover limits to each of the other cores or packet engines. In some embodiments the spillover master may use any type and form of inter core communications such as core to core messaging or shared memory.

In some embodiments each of the cores packet engines or virtual servers may adapt or changes its allocation of a number of resource uses responsive to a change to the spillover limit. Responsive to a lower spillover limit or a decrease in the spillover limit a virtual server or packet engine may return a number of resource uses to the pool manager. In some embodiments a virtual server or packet engine may return a number of exclusive resource uses to the exclusive quota pool. In some embodiments a virtual server or packet engine may return a number of non exclusive resource uses to the shared quota pool. In some embodiments a virtual server or packet engine may return both a number of exclusive uses to the exclusive quote pool and a number of non exclusive resource uses to the shared quota pool. Responsive to a higher spillover limit or an increase in the spillover limit a virtual server or packet engine may request an additional number of resource uses from the pool manager. In some embodiments a virtual server or packet engine may request an additional number of exclusive resource uses to the exclusive quota pool. In some embodiments a virtual server or packet engine may request an additional number of non exclusive resource uses to the shared quota pool. In some embodiments a virtual server or packet engine may request an additional number of exclusive uses for the exclusive quote pool and an additional number of non exclusive resource uses from the shared quota pool. In some embodiments responsive to changes in the spillover limit one packet engine or virtual server may return a number of resource uses exclusive non exclusive or otherwise while another packet engine or virtual server may request an additional number of resource uses exclusive non exclusive or otherwise .

In some embodiments the pool manager responsive to changes in the spillover limit changes the allocations of resource uses across the plurality of cores packet engines or virtual servers. In some embodiments the pool manager may request a virtual server or packet engine to return a number of resource uses exclusive non exclusive or otherwise. In some embodiments the pool manager may increase for a virtual server or packet engine a number of resource uses exclusive non exclusive or otherwise. In some embodiments responsive to changes in the spillover limit or responsive to monitoring the pool manager may request one virtual server or packet engine to return a number of resource uses exclusive non exclusive or otherwise while providing an increasing the number of resource uses exclusive non exclusive or otherwise for another virtual server or packet engine.

In view of changes to the spillover limit the device may perform spillover management to backup virtual servers based on the changed spillover limits and or reallocation of number of resource uses across the virtual servers. In some embodiments if requests for a virtual spillover were directed to a backup virtual server and the spillover limit increased or the virtual server s allocation of number of resource uses increases request may be sent back to the virtual server instead of the backup virtual server. In some embodiments if requests for a virtual spillover were not directed to a backup virtual server and the spillover limit decreased or the virtual server s allocation of number of resource uses decreases spillover management may be triggers and request directed to the virtual server are redirected to the backup virtual server.

