---

title: Virtual machine morphing for heterogeneous migration environments
abstract: Virtual machines may migrate between heterogeneous sets of implementation resources in a manner that allows the virtual machines to efficiently and effectively adapt to new implementation resources. Furthermore, virtual machines may change types during migration without terminating the virtual machines. Migration templates may be established to manage migration of sets of virtual machines between sets of implementation resources and/or virtual machine types. Migration templates may be established based at least in part on information provided by migration agents added to the virtual machines under consideration for migration. The migration agents may detect and augment relevant virtual machine capabilities, as well as trigger reconfiguration of virtual machine components in accordance with migration templates.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09329886&OS=09329886&RS=09329886
owner: Amazon Technologies, Inc.
number: 09329886
owner_city: Reno
owner_country: US
publication_date: 20101210
---
It has become common for individuals and organizations to use networked computers to perform and assist with a wide variety of tasks. Rather than own and maintain physical computer hardware and a suitable data networking environment it is becoming more and more common to provision virtual computer systems at a specialized provider of such virtual systems. Use of virtual computer systems can provide a number of advantages including cost advantages and or ability to adapt rapidly to changing computing resource needs. However conventional virtual computer system provisioning has a number of shortcomings.

Virtual computer systems are ultimately implemented with physical computing hardware and other implementation resources. Nevertheless a virtual computer system may have an existence and a configuration that is independent of the underlying implementation resources. It is not uncommon for particular implementation resources and even entire implementation resource sets to be replaced without terminating the virtual computer systems they implement. In this way virtual computer systems can have relatively long lifetimes. However as such lifetimes grow longer various issues can arise with respect to the underlying implementation resources.

The implementation resources used by a particular virtual computer system provider can be changed for a variety of reasons including to enhance technical and or cost performance. For example technical advances by a hardware manufacturer may enable more efficient implementation of virtual computer systems. However implementation resource changes may be incompatible with unchanged virtual computer systems or virtual computer systems may require reconfiguration to take full advantage of new implementation resources. Insufficiently powerful and or flexible mechanisms for adapting relatively long lived virtual computer systems to changed implementation resources can leave the virtual computer systems unusable or operating at an unacceptable level of efficiency.

Same numbers are used throughout the disclosure and figures to reference like components and features but such repetition of number is for purposes of simplicity of explanation and understanding and should not be viewed as a limitation on the various embodiments.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

A virtual resource provider may provision various virtual resources i.e. emulated computing resources such as virtual computing machines virtual machines of various types with various sets of physical computing hardware and other implementation resources. For example physical virtual machine VM servers may maintain multiple virtual machines with different types of virtual machine requiring different portions of VM server resources. Virtual machines may migrate between i.e. be consecutively implemented by different e.g. heterogeneous sets of implementation resources in a manner that allows the virtual machines to efficiently and effectively adapt to new implementation resources. For example a virtual machine may migrate from an aging VM server to a new VM server while optimally adapting to changes in processing unit e.g. central processing unit type or number memory module type or number and or hard drive type or number. Furthermore virtual machines may change type morph without terminating. For example a new VM server may not support the current type of a particular virtual machine and the virtual machine may morph to a supported type as part of migrating to the new VM server. In at least one embodiment virtual machine morphing is independent of virtual machine migration. For example a set of virtual machines may morph from a first type of virtual machine to a second type of virtual machine without changing the set of implementation resources used to implement the set of virtual machines.

The migration of a first type of virtual machine to a second type of virtual machine may be performed in accordance with a migration template for the two types. The migration template may specify one or more virtual machine virtualization layer and or implementation resource reconfigurations to be performed prior to during and or following migration of the virtual machine. An administrator and or other authorized user collectively administrator of the virtual machine may utilize a user interface e.g. a Web based programmatic and or graphical user interface to establish the migration template. The migration template may be specified at least in part by user selection of a set of presented migration options. Alternatively or in addition the migration template may be specified based at least in part on a configuration of the virtual machine to be migrated.

When authorized a migration agent may be added to virtual machines selected for migration. The migration agent may be adapted to a particular type of virtual machine and or components thereof. For example migration agent types may correspond to types of operating system maintained by virtual machines. The migration agent may be configured to detect the presence of any suitable virtual machine capability. In addition the migration agent may be configured to augment the capabilities of particular virtual machines for the purposes of migration. Detected and or augmented capabilities of virtual machines may be reported to a migration template editor and corresponding migration templates based at least in part on such reports. In addition to capability detection a migration manager may interact with the migration agent to trigger virtual machine reconfigurations of various types including custom reconfigurations specified by the administrator.

Various approaches may be implemented in various environments for various applications. For example illustrates aspects of an example environment for implementing aspects in accordance with various embodiments. As will be appreciated although a Web based environment may be utilized for purposes of explanation different environments may be utilized as appropriate to implement various embodiments. The environment shown includes both a testing or a development portion or side and a production portion. The production portion includes an electronic client device which may include any appropriate device operable to send and receive requests messages or information over an appropriate network and convey information back to a user of the device . Examples of such client devices include personal computers cell phones handheld messaging devices laptop computers tablet computers set top boxes personal data assistants electronic book readers and the like.

The network may include any appropriate network including an intranet the Internet a cellular network a local area network a wide area network a wireless data network or any other such network or combination thereof. Components utilized for such a system may depend at least in part upon the type of network and or environment selected. Protocols and components for communicating via such a network are well known and will not be discussed herein in detail. Communication over the network may be enabled by wired or wireless connections and combinations thereof. In this example the network includes the Internet as the environment includes a Web server for receiving requests and serving content in response thereto although for other networks an alternative device serving a similar purpose could be utilized as would be apparent to one of ordinary skill in the art.

The illustrative environment includes at least one application server and a data store . It should be understood that there may be several application servers layers or other elements processes or components which may be chained or otherwise configured which may interact to perform tasks such as obtaining data from an appropriate data store. As used herein the term data store refers to any device or combination of devices capable of storing accessing and or retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed or clustered environment.

The application server may include any appropriate hardware and software for integrating with the data store as needed to execute aspects of one or more applications for the client device and may even handle a majority of the data access and business logic for an application. The application server provides access control services in cooperation with the data store and is able to generate content such as text graphics audio and or video to be transferred to the user which may be served to the user by the Web server in the form of HTML XML or another appropriate structured language in this example.

The handling of all requests and responses as well as the delivery of content between the client device and the application server may be handled by the Web server . It should be understood that the Web and application servers are not required and are merely example components as structured code discussed herein may be executed on any appropriate device or host machine as discussed elsewhere herein. Further the environment may be architected in such a way that a test automation framework may be provided as a service to which a user or application may subscribe. A test automation framework may be provided as an implementation of any of the various testing patterns discussed herein although various other implementations may be utilized as well as discussed or suggested herein.

The environment may also include a development and or testing side which includes a user device allowing a user such as a developer data administrator or tester to access the system. The user device may be any appropriate device or machine such as is described above with respect to the client device . The environment may also include a development server which functions similar to the application server but typically runs code during development and testing before the code is deployed and executed on the production side and becomes accessible to outside users for example. In some embodiments an application server may function as a development server and separate production and testing storage may not be utilized.

The data store may include several separate data tables databases or other data storage mechanisms and media for storing data relating to a particular aspect. For example the data store illustrated includes mechanisms for storing production data and user information which may be utilized to serve content for the production side. The data store also is shown to include a mechanism for storing testing data which may be utilized with the user information for the testing side. It should be understood that there may be many other aspects that are stored in the data store such as for page image information and access right information which may be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store .

The data store is operable through logic associated therewith to receive instructions from the application server or development server and obtain update or otherwise process data in response thereto. In one example a user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and may access the catalog detail information to obtain information about items of that type. The information then may be returned to the user such as in a results listing on a Web page that the user is able to view via a browser on the user device . Information for a particular item of interest may be viewed in a dedicated page or window of the browser.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable medium storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

In at least one embodiment one or more aspects of the environment may incorporate and or be incorporated into a virtual resource provisioning architecture. depicts aspects of an example virtual resource provisioning architecture in accordance with at least one embodiment. The example virtual resource provisioning architecture includes multiple clients communicatively connected to a virtual resource provider over a network . For example the clients may corresponding to computing devices such as the computing device of and or client programs incorporated into such computing devices. The ellipsis between the client and the client indicates that the virtual resource provisioning architecture may include any suitable number of clients although for clarity only two are shown in . Ellipses are used similarly throughout the drawings.

One or more of the clients may be utilized by one or more customers of the virtual resource provider to interact with a control plane of the virtual resource provider and thereby provision one or more virtual resources . Alternatively or in addition one or more of the clients may be utilized not necessarily by virtual resource provider customers to interact with provisioned virtual resources . The provisioned virtual resources may include any suitable type and or number of virtual resources . Examples of suitable virtual resources include virtual machines such as virtual computer systems virtual network connections virtual data stores specialized data processing agents media streaming agents including audio and video streaming agents message queues publish subscribe topics configured to notify subscribers having subscriptions that match events published to the publish subscribe topics monitoring agents load balancing agents and suitable combinations thereof.

The virtual resource provider may include any suitable type and or number of implementation resources . Each of the virtual resources may be implemented by a set of the implementation resources . In at least one embodiment various implementation resources of the implementation resources may be configured to participate in implementing at least in part multiple virtual resources of the virtual resources . Examples of suitable implementation resources include VM servers data store servers computers server racks networking hardware including switches routers gateways bridges hubs repeaters firewalls and wireless transceivers power supplies generators data centers rooms in data centers mobile data centers as well as non volatile storage devices including hard drives processing units such as central processing units CPUs caches in processing units processing cores in multi core processing units volatile storage devices such as memory modules including random access memory RAM modules and RAM chips of multi chip memory modules network interface hardware and suitable combinations thereof. The control plane may process virtual resource provisioning requests manage allocation of virtual resources to implementation resources and or manage allocation of implementation resources to virtual resources . An example virtual resource provider control plane in accordance with at least one embodiment is described below in more detail with reference to .

Virtual machines may provide some or all of the functionality of a physical computer system particular with respect to remotely accessible computer system functionality. depicts aspects of example virtual machines provisioned at a virtual resource provider in accordance with at least one embodiment. The virtual resource provider is an example of the virtual resource provider of and has corresponding implementation resources and virtual resources including the virtual machines . In a virtualization layer is explicitly shown lying between the implementation resources and the virtual resource . The virtualization layer may decouple the virtual machines from the underlying implementation resources and or partition the virtual machines from one another even when they share particular implementation resources. For example the virtualization layer may incorporate a so called hypervisor executed by a VM server of the implementation resources . Such hypervisors and virtualization layers are known in the art so only some of their details are described herein.

Each virtual machine is shown as including an operating system and multiple applications respectively. The virtual machines may include any suitable computer operating system e.g. a UNIX operating system and different virtual machines may include different operating systems and or different operating system versions and configurations. Each virtual machine may include multiple operating systems although this is not shown in for clarity. The applications may be any suitable computer application including any suitable computer executable instructions. The applications may provide any suitable service to a user of the virtual machine including a service corresponding to those provided by the Web server the application server the development server and or the data store of . Virtual machines need not have applications separate from the operating systems .

Provisioning configuration re configuration and or de provisioning collectively provisioning of the virtual resources including the virtual machines may be controlled by the control plane of the virtual resource provider . depicts aspects of an example control plane in accordance with at least one embodiment. The control plane of is an example of the control plane of . The control plane may include a provisioning interface configured at least to receive virtual resource provisioning requests from one or more of the clients a workflow component configured at least to guide responses to provisioning requests in accordance with one or more provisioning workflows and a resource allocation component configured at least to manage allocation of implementation resources to virtual resources .

The provisioning interface may include any suitable provisioning interface elements. Examples of suitable provisioning interface elements include interface elements that correspond to requests to provision the virtual resources interface elements that provide access to virtual resource configuration information and one or more interface elements enabling authentication to establish authority for such provisioning related operations. The provisioning interface may incorporate and or be incorporated in a user interface UI such as a graphical user interface GUI a Web based interface a programmatic interface such as an application programming interface API and or a set of remote procedure calls RPCs corresponding to provisioning interface elements a messaging interface such as a messaging interface in which the interface elements of the provisioning interface correspond to messages of a communication protocol and or any suitable combination thereof.

In at least one embodiment the provisioning interface and the resource allocation component may create and or cause the workflow component to create one or more workflows that are then maintained by the workflow component . Workflows such as provisioning workflows and policy enforcement workflows may include one or more sequences of tasks to be executed to perform a job such as provisioning or policy enforcement. A workflow as the term is used herein is not the tasks themselves but a task control structure that may control flow of information to and from tasks as well as the order of execution of the tasks it controls. For example a workflow may be considered a state machine that can manage and return the state of a process at any time during execution. Workflows may be created from workflow templates. For example a provisioning workflow may be created from a provisioning workflow template configured with parameters by the resource allocation component .

The workflow component may modify further specify and or further configure established workflows. For example the workflow component may select particular implementation resources of the virtual resource provider to execute and or be assigned to particular tasks. Such selection may be based at least in part on the computing resource needs of the particular task as assessed by the workflow component . As another example the workflow component may add additional and or duplicate tasks to an established workflow and or reconfigure information flow between tasks in the established workflow. Such modification of established workflows may be based at least in part on an execution efficiency analysis by the workflow component . For example some tasks may be efficiently performed in parallel while other tasks depend on the successful completion of previous tasks.

As part of provisioning a virtual resource the provisioning interface and or the workflow component may request that the resource allocation component determine the appropriate set of the implementation resources required to implement the virtual resource determine whether the required implementation resources are available and or in accordance with virtual resource provider allocation policies and or allocate the required implementation resources. The resource allocation component may incorporate any suitable resource allocation and or resource scheduling algorithm. Various aspects of such algorithms are well known to those of skill in art so only some details are described herein.

The control plane may further include a virtual machine migration component configured at least to migrate virtual machines between different sets of implementation resources . The virtual machine migration component may include a user interface with which clients may interact to specify and request virtual machine migrations. The user interface may provide access to a migration template editor configured at least to enable users to create read update and delete collectively edit one or more migration templates . For example the user interface may include a graphical user interface GUI configured at least to enable authorize users to edit the migration template s . An example of a migration template in accordance with at least one embodiment is described below in more detail with reference to .

The user interface may further enable users to request a set of migration options for a specified set of virtual machines . For example the specified set of virtual machines may include one or more particular types and or configurations of virtual machine and the migration options may be constrained by the particular types and or configurations. Responsive to the request and or to an explicit authorization the virtual machine migration component may add one or more migration agents to one or more of the specified set of virtual machines and the added migration agent s may determine and or provide information characterizing the particular types and or configurations of the virtual machines to which they have been added. An example of a migration agent in accordance with at least one embodiment is described below in more detail with reference to .

The migration agent s added to the virtual machine may provide information characterizing the virtual machine back to the virtual machine migration component through a migration agent interface . Alternatively or in addition any suitable agent e.g. a customer user agent may provide the characterizing information through the migration agent interface . The information characterizing the virtual machine may be any information suitable for determining necessary and or desirable actions to transform and or reconfigure the virtual machine to effectively and or efficiently migrate the virtual machine Examples of such characterizing information include a number of physical processing units allocated to the virtual machine a number of processing cores allocated to the virtual machine one or more types of physical processing unit allocated to the virtual machine a size and or type of volatile data storage allocated to the virtual machine a size and or type of non volatile data storage allocated to the virtual machine and a number and or type of networking resources including networking devices such as network interface devices that are allocated to the virtual machine. Further examples of such characterizing information include characteristics of one or more components of the operating system of the virtual machine such as whether the operating system includes hot plug functionality with respect to particular implementation resources such as physical processing units processing cores volatile storage devices such as memory modules and non volatile storage devices such as hard drives.

The virtual machine migration component may filter a set of available migration options e.g. from VM type A to VM types B Z based on the characterizing information received at the migration agent interface and or the user interface to determine a candidate set of migration options e.g. from VM type A to VM types C D and K and the candidate set of migration options may be presented to the administrator for selection. When addition of the migration agent s to virtual machines is not authorized the virtual machine migration component may use a conservative default set of charactering information as the filter possibly resulting in a smaller candidate set. The administrator may resubmit the migration options request with additional such authorizations to attempt to generate a larger candidate set if desired. The migration options may correspond to migration template s . Alternatively or in addition selecting from among the presented candidate set of migration options may filter a set of available migration templates . As a further alternative or further in addition migration option selections may configure and or specify one or more portions of the migration template s .

Once suitable migration options and or migration templates are available the administrator may assign particular migration templates to particular sets of virtual machines . A migration management component may then migrate the sets of virtual machines in accordance with the assigned migration templates . The migration template s may specify one or more virtual machine virtualization layer and or implementation resource reconfigurations to be performed prior to during and or following migration of the corresponding virtual machine . When the specified reconfiguration is internal to a virtual machine the migration management and the virtual machine has a suitable one of the migration agent s added the migration management component may trigger the internal reconfiguration by interacting with the added migration agent s through the migration agent interface .

The migration agent s may include instructions executable by the virtual machines to perform one or more migration tasks. depicts aspects of an example migration agent in accordance with at least one embodiment. The migration agent is an example of the migration agent s of . The migration agent may include a capability detection component . The capability detection component may detect one or more virtual machine capabilities. For example the capability detection component may detect whether the operating system includes hot plug functionality with respect to particular implementation resources . The capability detection component may include one or more detectors configured at least to detect a particular capability of a particular type of virtual machine. For example the capability detection component may select a particular set of detectors based at least in part on a detected type and or version of the operating system of the virtual machine to which the migration agent is added.

The capability detection component may detect that a particular virtual machine does not have a particular capability with respect to migration. In such a case a capability augmentation component may when authorized temporarily or permanently augment the capability of the virtual machine . For example the capability augmentation component may augment the operating system of the virtual machine to include hot plug functionality with respect to particular implementation resources such as physical processing units processing cores volatile storage devices such as memory modules and non volatile storage devices such as hard drives. The capability augmentation component may include one or more augmentation packages to be deployed to the virtual machine . For example the augmentation packages may correspond to particular packages of augmentation functionality and or particular virtual machine component types and or versions such as operating system type and or version.

Once added to the virtual machine the migration agent can play a role beyond that of capability detection and augmentation. The migration agent may further include a reconfiguration component configured at least to reconfigure the virtual machine as instructed by the migration management component in accordance with one or more of the migration template s . Since the migration agent is migrated to the new implementation resource set along with the virtual machine the reconfiguration component may reconfigure the virtual machine both pre and post migration. For example suppose the migration will morph the virtual machine from a first type to a second type that is allocated fewer physical processors. The reconfiguration component may reconfigure the virtual machine to access fewer physical processors in preparation for the migration. As another example suppose the migration morphs the virtual machine from the first type to a second type that has a larger non volatile data storage allocation. Following the migration the reconfiguration component may resize a file system or logical data storage volume to take advantage of the larger allocation. The reconfiguration component may include one or more configurators adapted for the virtual machine to which the migration agent is added. For example the configurators may be adapted to particular virtual machine component types and or versions such as operating system type and or version.

While many operating systems and applications are standardized virtual machines may include custom applications and operating systems and even standardized applications may be configured to manage data structures with non standard characteristics. Accordingly the migration agent may include a custom actions component configured at least to activate one or more user provided components as instructed by the migration management component in accordance with one or more of the migration template s . For example the administrator may provide one or more of the components during creation of the migration template s . The user provided components may include instructions executable by the virtual machine in any suitable programming language including interpreted programming languages and or scripting languages. For example the user provided components may perform application level reconfiguration responsive to increases and or decreases in allocated implementation resources .

The activities of the migration agent may be controlled by the migration management component in accordance with one or more of the migration template s . depicts aspects of an example migration template in accordance with at least one embodiment. The migration template may specify one or more tasks suitable for establishing a virtual machine migration workflow to be managed by the workflow component of the control plane . The tasks specified by the migration template may include pre migration reconfiguration tasks hot unplug actions one or more migration tasks hot plug actions and post migration reconfiguration tasks .

The hot unplug actions may include one or more tasks corresponding to removal of one or more of the implementation resources currently available to the virtual machine . For example the hot unplug actions may include decreasing the number of physical processing units and or processing cores available to the virtual machine decreasing the number of physical memory modules and or allocated volatile data storage size available to the virtual machine and decreasing the number of physical hard drives and or allocated non volatile data storage size available to the virtual machine . Such actions may have effects corresponding to unplugging physical components from physical computer systems. Accordingly some application level and or operating system level preparations may be desirable and or necessary. The pre migration reconfiguration tasks portion of the migration template may include one or more tasks to be performed in preparation for the hot unplug actions .

Similarly the hot plug actions may include one or more tasks corresponding to addition of one or more of the implementation resources currently unavailable to the virtual machine . For example the hot plug actions may include increasing the number of physical processing units and or processing cores available to the virtual machine increasing the number of physical memory modules and or allocated volatile data storage size available to the virtual machine and increasing the number of physical hard drives and or allocated non volatile data storage size available to the virtual machine . Such actions may have effects corresponding to plugging in physical components to physical computer systems. Accordingly some application level and or operating system level reconfiguration may be desirable and or necessary to take advantage of the additional implementation resources. The post migration reconfiguration tasks portion of the migration template may include one or more tasks to be performed to adapt to the resources added by the hot plug actions .

The migration tasks portion of the migration template may specify one or more tasks required to migrate the virtual machine from a first set of implementation resources to a second set of implementation resources and or from a first type of virtual machine to a second type of virtual machine. The migration may be live in that the operation of the virtual machine is uninterrupted or minimally interrupted e.g. for less than a second . Alternatively or in addition the migration may be a save and restore migration involving a more significant interruption to virtual machine operation and or involve a reboot of the virtual machine. Such migration and or live migration techniques for virtual machines are known to those of skill in the art so only some of the details are described herein. In at least one embodiment the migration tasks may specify one or more tasks to be performed during virtual machine migration for example to transform the type of the virtual machine . One or more of the portions of the migration template may be empty. For example the migration tasks portion of the migration template when the second set of implementation resources does not differ from the first set of implementation resources e.g. the virtual machine is to be morphed but not migrated . In such a case the migration template may be called a morphing template.

The description now turns to example steps and or procedures that may be performed in accordance with at least one embodiment. depicts example steps for migrating a set of virtual machines in accordance with at least one embodiment. At step one or more virtual machines of a first type Type A may be provisioned. For example the virtual machines may be provisioned with the provisioning interface of the control plane . At step one or more services may be provided with the virtual machine s provisioned at step . For example the virtual machine may maintain the application that provides a Web based service.

The provisioned virtual machine s may provide the service s for some time after which a migration becomes desirable and or necessary. At step in order to facilitate the migration a migration template suitable for migrating the provisioned virtual machine s may be established. For example one of the migration template s may be established with the graphical user interface . In this example the migration involves a transformation of the virtual machines from the first type of virtual machine to a second type of virtual machine Type B . At step a set of the provisioned virtual machines may be selected for migration. For example the set of virtual machines may be selected with the graphical user interface of the virtual machine migration component and associated with the migration template established at step .

At step a next e.g. a first of the specified set of virtual machines may be selected for migration. At step the selected virtual machine may be migrated in accordance with the migration template established at step . For example the migration management component may trigger and or perform the migration in accordance with the associated migration template. Alternatively or in addition the migration management component may co operate with the workflow component to accomplish the virtual machine migration. The migration workflow may be based at least in part on the associated migration template. At step it may be determined whether there are more virtual machines in the specified set to be migrated. If so a procedure incorporating step may progress to step to select the next of the set of virtual machines for migration. If not the procedure may progress to step . At step the migrated and transformed virtual machine s may continue to provide the service s of step .

Establishing the migration template can be a complex process. The virtual machine migration component may provide tools to assist the administrator in establishing the migration template . depicts example steps for processing a migration options query in accordance with at least one embodiment. At step the migration options query may be received. For example the query may be received by the graphical user interface of the virtual machine migration component . The query may be associated with a particular set of virtual machines for which the administrator is considering migration options. At step authorization to add one or more migration agents to the set of virtual machines may be requested. For example the graphical user interface may request the authorization from the administrator placing the query of step .

At step it may be determined whether the requested authorization has been received. For example the administrator may provide a set of cryptographic credentials authorizing the addition. If the authorization is received a procedure incorporating step may progress to step . Otherwise the procedure may progress to step .

At step a suitable set of migration agents may be added to the set of virtual machines. For example the virtual machine migration component may add suitable migration agent s to the virtual machine . The particular migration agent selected for addition to a particular virtual machine may be selected for compatibility with the virtual machine for example compatibility with an operating system of the virtual machine. Alternatively the migration agent s may incorporate components compatible with each available type of virtual machine and or be capable of configuring itself with such components so as to become compatible. At step the added migration agents may characterize the set of virtual machines and or the components thereof for example with the capability detection component of the migration agent . At step the characterizing information may be received. For example the added migration agents may provide the characterizing information with the migration agent interface of the virtual machine migration component .

If authorization is not received to add the migration agents to the set of virtual machines to ascertain the characterizing information of step then at step a set of failsafe defaults may be identified in place of the characterizing information. The defaults may be failsafe in the sense that they will preclude migration options that may cause migration to fail due to virtual machine type and or implementation resource incompatibility. At step a set of migration options may be determined based on the characterizing information received at step or the failsafe defaults of step . For example the virtual machine migration component may determine the set of migration options. At step the set of migration options may be presented for example to the administrator that submitted the query of step with the graphical user interface .

The set of migration options may include migration template configuration options such as which augmentation packages to deploy if any whether to emulate incompatible implementation resources potentially increasing the number of destination VM types whether to expose compatible but different implementation resources post migration or hide the new implementation resources as their pre migration types as well as the set of candidate destination VM types. depicts example steps for processing migration option selections in accordance with at least one embodiment. At step the migration option selections may be received. For example the virtual machine migration component may receive the selections from the administrator through the graphical user interface . At step one or more migration templates may be established based at least in part on the received migration option selections. For example the migration template editor may establish and or configure the migration template s based on the received migration option selections.

At step selected virtual machines may be migrated in accordance with the established migration templates for example as described above with reference to . The migration of step may itself include multiple steps. For example suppose the virtual machine of is to be migrated in accordance with the migration template of . At step pre migration reconfiguration of one or more components of the virtual machine may be performed. For example the pre migration reconfiguration tasks and hot unplug actions may be performed. At step the virtual machine may be suspended in order to complete state transfer step . Before resuming the virtual machine step in migration or mid migration reconfiguration of one or more components of the virtual machine may be performed. For example applications may be re linked to different operating system components and or a device re discovery may be triggered at the operating system level. At step post migration reconfiguration of one or more components of the virtual machine may be performed. For example the hot plug actions and the post migration reconfiguration tasks may be performed as specified by the migration template .

As described above with reference to the migration agent may include a capability augmentation component . depicts example steps for capability augmentation in accordance with at least one embodiment. At step virtual machine capability detection may be performed for example by a particular detector of the migration agent . At step it may be determined whether the capability was detected. If so a procedure incorporating step may progress to step . Otherwise the procedure may progress to step .

At step it may be determined whether the undetected capability can be added by the migration agent . For example the capability augmentation component may determine whether one of the augmentation packages provides the capability and is compatible with the virtual machine to which the migration agent has been added. If the capability can be added the procedure may progress to step . Otherwise the procedure may progress to step .

At step it may be determined whether the migration agent is authorized to add the capability. For example the administrator may have authorized the migration agent to add a particular subset of the available augmentation packages and the migration agent may check that it is authorized to add the particular augmentation package identified at step . If so the procedure may progress to step . Otherwise the procedure may progress to step .

At step the capability may be added to the virtual machine . For example the migration agent may add the augmentation package to the operating system of the virtual machine . At step the result of the capability detection process may be reported including the results of step step step and step . For example the report may be provided to the virtual machine migration component with the migration agent interface .

As described above with reference to the control plane may be facilitated by one or more workflows maintained by the workflow component . depicts example steps for workflow management in accordance with at least one embodiment. At step a request may be received by an interface of the control plane . For example one of the user interfaces of the control plane may receive the request from a user customer and or administrator of the virtual resource provider . The request may be a call to a programmatic interface such as an application programming interface API or a Web services interface e.g. utilizing a Simple Object Access Protocol SOAP call. Alternatively or in addition the request may be received through a graphical user interface GUI such as a Web based GUI. At step the request may be analyzed to determine one or more actions required to successfully complete the request. For example the provisioning interface may analyze the request and determine a set of actions required to provision a set of virtual resources . When an interface element receiving the request corresponds to a specific action to be performed the interface may extract information from the request to be utilized in determining aspects and or parameters of the action to be performed.

At step a request may be sent to create a workflow based at least in part on the one or more actions determined at step . For example provisioning interface may send the request to the workflow component . The request to create the workflow may include the action s action metadata such as type of action and or action parameters. In at least one embodiment the control plane and or the workflow component maintains a job queue for such requests and workflows are created responsive to new additions to the job queue. At step a workflow and one or more component tasks may be created. For example the workflow component may analyze the request of step to determine the appropriate workflow and component tasks to create.

At step execution of the component task s may be guided in accordance with the workflow. For example the workflow component may activate elements of interfaces of various implementation resources to provision the set of virtual resources. Alternatively or in addition the workflow component may manage bids for execution of the component task s by components of the virtual resource provider . At step it may be determined whether the workflow has finished. For example the workflow component may determine whether a final task in a sequence of tasks managed by the workflow has completed. If so a procedure incorporating step may progress to step . Otherwise the procedure may return to step for a next task and or task sequence. Workflows may guide multiple task sequences executing in parallel. In this case it may be that the workflow is not finished until each of the multiple task sequences completes and or an explicit workflow finished flag is set by one of the component tasks. At step the sender of the request of step may be informed of result s of the action s .

The various embodiments described herein may be implemented in a wide variety of operating environments which in some cases may include one or more user computers computing devices or processing devices which may be utilized to operate any of a number of applications. User or client devices may include any of a number of general purpose personal computers such as desktop or laptop computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also may include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also may include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network.

Most embodiments utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as TCP IP OSI FTP UPnP NFS CIFS and AppleTalk. Such a network may include for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network and any combination thereof. The network may furthermore incorporate any suitable network topology. Examples of suitable network topologies include but are not limited to simple point to point star topology self organizing peer to peer topologies and combinations thereof.

In embodiments utilizing a Web server the Web server may run any of a variety of server or mid tier applications including HTTP servers FTP servers CGI servers data servers Java servers and business application servers. The server s also may be capable of executing programs or scripts in response requests from user devices such as by executing one or more Web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM .

The environment may include a variety of data stores and other memory and storage media as discussed above. These may reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device may include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also may include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader may be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules including program modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or Web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be utilized and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code may include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which may be utilized to store the desired information and which may be accessed by the a system device. Program modules program components and or programmatic objects may include computer readable and or computer executable instructions of and or corresponding to any suitable computer programming language. In at least one embodiment each computer readable medium may be tangible. In at least one embodiment each computer readable medium may be non transitory in time. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

The use of the terms a and an and the and similar referents in the context of describing embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments and does not pose a limitation on the scope unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of at least one embodiment.

Preferred embodiments are described herein including the best mode known to the inventors. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments to be constructed otherwise than as specifically described herein. Accordingly suitable embodiments include all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is contemplated as being incorporated into some suitable embodiment unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

