---

title: Systems, methods and computer readable media for managing multiple virtual machines
abstract: A system according to an embodiment of the present invention includes at least two virtual machines running on a hardware platform using either a hosted or a bare metal hypervisor. The virtual machines may communicate with an agent-server resident in the host operating system or in one of the virtual machines to switch control of the hardware component, such as graphics hardware, from one virtual machine to another.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09342335&OS=09342335&RS=09342335
owner: Open Innovation Network, LLC
number: 09342335
owner_city: Durham
owner_country: US
publication_date: 20100811
---
This application claims priority to U.S. Provisional Patent Application Ser. No. 61 289 957 filed Dec. 23 2009 which is incorporated herein by this reference.

Embodiments of the invention relate to the virtualization of computer hardware and to systems methods and computer program products for controlling the use of multiple virtual computer machines.

Virtualization of computer hardware may be used to increase the functionally of a given computer system. Different virtual machines may make use of the same hardware platform while operating as separate machines running their own operating system of either the same type such as two instances of Windows or different types such as Windows and Linux.

To implement one or more virtual machines a hypervisor may be implemented to facilitate communication between the hardware and the virtual machines. A hypervisor generally provides abstraction for controls necessary to operate a given hardware platform which may include aspects like interrupts central processing unit CPU scheduling register allocation BIOS control and graphical display control. The hypervisor then facilitates communication between an operating system instance running in a virtual machine and the hardware platform. One type of hypervisor is referred to as a bare metal hypervisor. In a bare metal hypervisor the hypervisor itself may directly control the hardware platform. The bare metal hypervisor may be implemented using a basic embedded operating system run the by the hypervisor itself. Another type of hypervisor facilitates communication between one or more operating system instances running on virtual machines and a host operating system. The hypervisor may facilitate communication between the virtual machines and the host operating system which in turn controls the hardware platform.

Hardware virtualization may allow for a variety of advantages including the need to purchase only a single hardware platform while running multiple seemingly separate machines. Each virtual machine may operate a different operating system allowing one hardware platform to execute potentially incompatible applications as one runs in the operating system of one virtual machine and a second in the different operating system of another virtual machine.

While virtualization may have the potential to bring about advantages in practice in may be difficult to manage the control of hardware components by multiple different virtual machines.

Certain details are set forth below to provide a sufficient understanding of embodiments of the invention. However it will be clear to one skilled in the art that embodiments of the invention may be practiced without various of these particular details. In some instances well known computer system components circuits control signals timing protocols and software operations have not been shown in detail in order to avoid unnecessarily obscuring the described embodiments of the invention.

The memory may be encoded with computer readable instructions that allow the processor unit to implement the host operating system and virtual machines and . In this manner the hardware platform may run the host operating system as well as any operating systems running in the virtual machines and illustrated respectively as operating systems A and B in . Although illustrated as separate operating systems the host operating system and operating systems A and B may be any combination of different operating systems or different instances of a same operating system. Any operating system may be used including but not limited to any Windows or Linux operating system.

The hardware platform may include other hardware used by the host operating system and the virtual machines and . For example graphics hardware is shown in and controls a display . Other hardware may also be included for example additional processor units additional memory a USB interface any other hardware or interface for controlling a peripheral or other device and any combinations of these.

In the embodiment of the graphics hardware is controlled by the host operating system . That is the host operating system sends electronic signals such as the issuance of commands and transmission of data to the graphics hardware in accordance with the operation of the host operating system . In other embodiments the host operating system may not control hardware components directly but may utilize a third party application programming interface API to control hardware components. As was described above the virtual machine may communicate with the graphics hardware by interacting with a hypervisor . The hypervisor is generally a software layer that may also be implemented by the processor unit and memory . That is the memory may be encoded with computer readable instructions that cause the processor unit to implement the hypervisor . Examples of commercially available hypervisors include but are not limited to VMWare Xen and hyperV. The hypervisor receives input from the virtual machine which may include for example commands data or other electronic signals intended to control the graphics hardware such as commands and data to be displayed on the display . The hypervisor may then facilitate communication of the input from the virtual machine to the host operating system . For example the hypervisor may reformulate the data or commands from the virtual machine running operating system A into a format suitable for use with the host operating system .

In the embodiment of the hypervisor further receives input from the virtual machine running operating system B. The input may include data commands or both intended for the graphics hardware to control the display . The hypervisor may also facilitate communication between the virtual machine and the host operating system . To facilitate communication between the two virtual machines and and the host operating system the hypervisor may for example store graphics data from the virtual machine into one buffer not shown of the hardware platform and graphics data from the virtual machine into a different buffer not shown of the platform . The buffers may be stored in the memory or other storage of the platform . The host operating system then controls when and how data from the two buffers are rendered on the display by the graphics hardware . It can be difficult for an end user who may be working with an application hosted by the virtual machine or to easily and efficiently control the data that is ultimately displayed on the display . Access to and manipulation of the hypervisor directly can be difficult or impossible.

The computer system provides another mechanism for the virtual machines and to communicate with the host operating system . An agent is implemented in the operating system A of the virtual machine while an agent is implemented in the operating system B of the virtual machine . The agents and may each be a software program running in the respective virtual machine and the software for the agents and may be encoded along with the virtual machine in the memory and executed by the processor unit . In some embodiments some of the virtual machines may not include an agent.

An agent server is implemented in the host operating system . The agent server may be implemented as a software program which may also be encoded in the memory and executed by the processor unit . As will be described further below the agents and may present a user of the respective virtual machine or with a list of virtual machines in the system . On receipt of a selection by the user the agents and may communicate with the agent server to have the agent server issue commands in the host operating system to control the graphics hardware in accordance with the request. In this manner the agents and and agent server may provide a communication path that may be supported by but may be independent of the hypervisor . While the hypervisor may receive data and commands generated by the virtual machines and for the hardware platform the agent server may control what received data is ultimately rendered by the graphics hardware on the display .

Communication between the agent and the agent server and communication between the agent and the agent server may occur over a virtualized Ethernet or other network implemented by the hypervisor using interne protocol IP addresses of the agents and and agent server . The hypervisor may implement a shared directory containing the current IP address associated with system components including the agents and and the agent server . In this manner the agents and may poll the shared directory to ensure any messages sent to the agent server are sent to the correct IP address. Other communication mechanisms may also be used.

A system is shown in using a bare metal hypervisor . In the bare metal hypervisor directly controls the hardware platform and no host operating system may be present. The bare metal hypervisor may be implemented using an embedded operating system. The bare metal hypervisor may be implemented in software including computer readable instructions stored on the memory and executed by the processor unit . Virtual machines and each operate using a respective operating system A B and C. As with the system of the virtual machines and may run different operating systems different instances of the same operating system or combinations of such operating systems. The virtual machines and interface with the hardware platform through the bare metal hypervisor .

The virtual machine may include an agent . The agent may be implemented in software that may be included in the software for the virtual machine . The software for the agent may include computer readable instructions encoded on the memory and executed by the processor unit . The agent may be invoked by a user of the virtual machine and the agent may present a list of other virtual machines in the system to the user. On selection of a virtual machine the agent communicates with an agent server that is running on another virtual machine in the system for example virtual machine shown in . Similarly the agent may communicate with the agent server requests made in the virtual machine . The agent server may then control which virtual machine s commands control a particular hardware component such as the graphics hardware . The agent server may communicate with the graphics hardware through a hypervisor extension .

Communication between the agents and and the agent server may occur using a virtualized Ethernet implemented by the bare metal hypervisor . Other communication mechanisms may be used in addition or instead of virtualized Ethernet. To communicate via Ethernet the agents and may send commands to the IP address of the agent server . The IP address of the agent server may be stored in a shared directory implemented by the bare metal hypervisor . The agents and may poll the shared directory to ensure communications destined for the agent server are sent to the correct IP address.

Embodiments of systems according to the present invention have been described above. It is to be understood that the physical configuration of the systems may be flexible in that all or portions of the described systems may be distributed across multiple pieces of hardware. Also the descriptions provided above included graphics hardware in the hardware platform but it is to be understood that systems according to the present invention may have other or additional hardware components controlled by the agents and agent servers described herein. References to the graphics hardware are by way of example of a component that may advantageously be controlled according to embodiments of the invention. Also agents and agent servers have been described above as independent of hypervisors. This may be advantageous where software is not desired to depend on a particular hypervisor implementation. However in other examples the agent server may be implemented in the hypervisor or as a hypervisor extension.

Methods implemented by systems according to embodiments of the present invention will now be described. is a flowchart illustrating a method that may be implemented by the system of or the system of according to embodiments of the present invention. In block a user launches an agent. The user may be an actual computer system human user or may be another electronic process in communication with the system implementing the method of . The display may be controlled by the virtual machine and displaying data generated by the virtual machine see . For example although not shown in the virtual machine may run a video surveillance application and the virtual machine may be coupled to one or more video cameras. The display may display a full screen image of video surveillance data collected from one or more video cameras coupled to the virtual machine . If a user wants to view data from another virtual machine the user may launch the agent . The agent may be launched in a variety of manners and advantageously in a manner understandable by a user to launch a program. For example the agent may be launched by selecting an icon associated with the agent or selecting an icon in a system tray of the operating system. Since the agent is running in the operating system of the virtual machine it may be launched in a manner typically used to launch applications in the operating system of the virtual machine . In a similar manner a user may launch the agent in the virtual machine . With reference to the user may launch the agent in the virtual machine or the agent in the virtual machine . Alternatively the agent may always be running and a user interface associated with the agent may be minimized and accessible via an icon in the system tray or other manner.

As illustrated in block of the agent may display a list of virtual machines in the system. The agent may obtain the list by communicating with the agent server in the system. So for example referring back to the agent may obtain a list of the other virtual machines in the system. In the example of that would include just the virtual machine . The list may be obtained by communicating with the agent server . The requesting virtual machine may or may not be included on the list returned by the agent server . In the example of the agent may obtain a list of other virtual machines in the system including the virtual machines and by communicating with the agent server . The communication between the agents and the agent server may occur in any manner including over a virtualized Ethernet made available by the hypervisor. Each agent and the agent server is assigned an IP address and the IP addresses is stored and updated in a shared directory maintained by the hypervisor as described above. In this manner the agents may obtain a list of including other virtual machines in the system without communicating directly with the other virtual machines. Further in this manner the communication between the agents and the agent server while it may take advantage of infrastructure provided by the hypervisor is independent of the hypervisor implementation used.

On receipt of the list of virtual machines in the system the agent may display the list. In the example of the agent may generate display data that is communicated by the virtual machine through the hypervisor to the host operating system to the graphics hardware and rendered on the display . The agent may function in an analogous manner. In the example of the agent may generate display data that is communicated by the virtual machine through the bare metal hypervisor to the graphics hardware and rendered on the display . In this manner an end user may view a list of virtual machines in the system and may make a selection from the list to select a virtual machine to control a hardware component such as the graphics hardware in the hardware platform of the system. The agent receives the virtual machine selection in block as illustrated in .

To pass control of the hardware component to the selected virtual machine the agent communications the selection to the agent server of the system in block . In the embodiment of the agent for example may issue a command to the agent server to pass control of the graphics hardware to the virtual machine . In the embodiment of the agent for example may issue a command to the agent server to pass control of the graphics hardware to the virtual machine or . It is to be understood that control of other hardware components may also be changed in this manner. In particular when control of graphics hardware is passed from one virtual machine to another control of other components such as a keyboard and mouse or other input devices may also be passed to the virtual machine placed in control of the graphics hardware.

Once the agent server receives the selection the agent server may implement the selection as shown in block of . The implementation of the selection may vary in accordance with the system used. When the agent server is implemented in a host operating system such as in the embodiment of the agent server may issue a host operating system command to display data from the selected virtual machine for example by issuing a command to maximize a window of the operating system associated with the selected virtual machine. Other windows may be minimized. When the agent server is implemented with a bare metal hypervisor such as in the embodiment of the agent server may issue a command to the hypervisor or the hypervisor extension to issue an appropriate command to change control of the hardware component in accordance with the selection such as by maximizing a window associated with the selected virtual machine.

The method of has been described with reference to switching control of a hardware component such as graphics hardware between virtual machines in a system. However the method may also be used to switch control of the hardware component to an administrative console. Managing a system including virtual machines such as the system of or the system of may also involve a variety of administrative functions or controls including for example controls to start or stop one or more of the virtual machines change parameters for one or more of the virtual machines or monitor the states of one or more of the virtual machines. Configuring a virtual machine may be implemented by creating or modifying one or more configuration files useable by the hypervisor in the system. Starting or stopping a virtual machine may be implemented by starting or stopping one or more processes of the system s hypervisor. An administrative console may be provided for this purpose and may be implemented by the host operating system of or the bare metal hypervisor of . The agent server in the system may include the administrative console as an option along with the list of virtual machines in the system when the list is sent to an agent. A user may then select the administrative console as an option and the agent server may issue an appropriate command to transfer control of a hardware component such as graphics hardware to the administrative console. In the embodiment of the agent server may issue a command in the host operating system to minimize all windows such that the administrative console is visible.

A use of the system of in the context of video surveillance will now be described with reference to a schematic illustration of multiple video cameras coupled to the system of . Hardware virtualization in a video surveillance system may allow security practitioners to consolidate multiple video surveillance systems on a single hardware platform. Using embodiments of the present invention different virtual machines may share same physical resources work around logical limits such as a limit on a number of supported cameras and migrate cameras or storage between possibly incompatible software versions. The virtual machine may run a video surveillance application in the operating system A. The video surveillance application may receive data from cameras and . The virtual machine may run a video surveillance application in the operating system B. The video surveillance application may receive data from a camera . Note that in this manner the system may support incompatible video surveillance applications. For example the video surveillance application may be running in a Windows operating system while the video surveillance application may be running in a Linux operating system and yet the systems are implemented on the same hardware platform . Further note that hardware limitations of the application or may be exceeded by the system . For example the application may have a restriction that only two cameras are supported. The system may nonetheless support an additional camera by providing another instance of the application as the application and connecting the camera .

Video surveillance data may advantageously be displayed in full screen mode by the display . Full screen mode may be preferred in some video surveillance applications to maximize screen real estate and display as many large sized high resolution camera feeds simultaneously as possible. Accordingly embodiments of the present invention may be particularly advantageous for video surveillance applications to switch full screen control of the display between the applications and . This may represent an improvement over systems having control of an administrative console and virtual systems in a tiled window display that may limit screen real estate available for the application and over overlapped windows which also may make point and click or selection access more difficult.

The system of may also advantageously be used to transfer cameras gracefully from one system to another. For example a system operator may desire to switch from the application to the application however it may be difficult time consuming or risky to switch all cameras in a video surveillance system at once. Accordingly the system of may be used to run the legacy application and a new application simultaneously. Cameras may then be transferred from one application to another one at a time or otherwise in groups. For example the camera may be decoupled from the application and coupled to the application . Once operation is satisfactorily established the camera may be transferred to the application . After all cameras are transferred the virtual machine may optionally be stopped. This allows a system administrator to reduce downtime and continue to utilize video data from the remaining cameras as one is transferred to a new program.

Embodiments of the present invention may provide a variety of advantages. Advantages descried herein are provided for explanatory purposes and are not intended to be limiting. Not every embodiment of the present invention may exhibit all or even any of the advantages described. Embodiments of the present invention utilize agents running in the operating systems of the virtual machines and an agent server running either in a host operating system or in one of the virtual machines in the case of a bare metal hypervisor. The agent interface may appear to a user of the virtual machine in a manner the user is accustomed to in that operating system such as an icon in a system tray. This may be advantageous over systems that are provided by the hypervisor itself and that are therefore external to the operating system of the virtual machine. If external to the virtual machine s operating system the interface may be a special key sequence or mouse movement which may not be intuitive to the user and may accordingly be difficult or prohibitive to use. Any special key sequence needed to manipulate an interface provided by the hypervisor may also be mixed up with key sequences used by the operating system of a virtual machine leading to a conflict in the system and confusion by the user. Further more embodiments of agents and agent servers described above are generally independent of hypervisor implementation and extensible both to hosted and bare metal hypervisors.

Embodiments of the present invention may also find use in cloud computing systems where a number of virtual machines may be implemented on a hardware platform which may be a distributed hardware platform. Cloud computing systems may make use of a bare metal hypervisor as was depicted in . Embodiments of the agents and agent servers described herein may be used to facilitate changing control of one or more particular hardware components in a cloud computing system from one virtual machine to another. Such functionality may be used for example to administer the cloud computing system.

From the foregoing it will be appreciated that although specific embodiments of the invention have been described herein for purposes of illustration various modifications may be made without deviating from the spirit and scope of the invention.

