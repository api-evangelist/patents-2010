---

title: Method to spoof data formats from image backups
abstract: A system and method for efficiently accessing large data storage subsystems with a different file format than a format used by running applications. A backup server is coupled to a data storage medium, and is configured to store data on the data storage medium according to a first file format. A client is coupled to the backup server and is configured to convey memory access requests for data stored in the data storage medium. The client is unable to decipher the first file format. A filter driver in the backup server is coupled to intercept the requests from the client. The filter driver is configured to decipher the first file format; spoof the existence of one or more spoofed files that do not exist on the data storage medium, wherein each of the one or more spoofed files corresponds to data stored on the data storage medium; and present the spoofed files to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08566297&OS=08566297&RS=08566297
owner: Symantec Corporation
number: 08566297
owner_city: Mountain View
owner_country: US
publication_date: 20100114
---
This invention relates to the field of computing system data backup and more particularly to access and restoration of previously backed up data.

As computer memory storage and data bandwidth increase so does the amount and complexity of data that business and individuals must manage. A large portion of the data may involve content managed for a company or home workgroup by a dedicated server. This dedicated server may include or be coupled to a data storage subsystem comprising hard disks or other storage devices for the storage of a large amount of information. This dedicated server and storage subsystem may provide users the ability to search and access information including electronic documents photographic or other still images video streams audio files volume image backup files etc.

Because the various examples of stored data may frequently contain crucial information the contents of information servers may be archived or backed up to an archival or a backup storage to prevent loss of data. In such a case the dedicated server and storage subsystem may include a backup system. For example a back end database provided within the server and storage subsystem is often backed up as a single monolithic database file. This database file contains all the tables records and indexing information for the database.

For many of the uses of the image backup file a customer may desire to view and or retrieve information stored within the image backup file. Many common file formats exist that allow an easy compatible transfer of data between a backup system and a customer s software applications. An image backup file that utilizes a common file format may be supported by a variety of applications provided by a variety of vendors. Some examples of common disk image file formats include virtual hard disk VHD V2i and virtual machine disk VMDK .

However in some cases a backup system may create and store an image backup file in a proprietary file format that is particular to the backup system or is otherwise not widely supported. For example a backup system may utilize single instance storage SIS in order to reduce data storage requirements. However the format utilized by the SIS system may not be supported by other vendor s applications. Other proprietary formats may be used as well. Consequently customers may have backup images created according to a format that is not supported by other applications that the customer uses.

In view of the above methods and mechanisms for enabling applications to utilize data backed up in a format foreign to the application are desired.

Systems and methods for efficiently enabling applications to utilize data backed up in a format foreign to the application are contemplated. In one embodiment a computer system is provided including a backup system. The backup system utilizing a data storage medium stores data according to an organization specified by a first file format. A client computer that is unable to decipher the first file format conveys memory access requests for data stored in the backup system. In one embodiment a filter driver in the backup server is coupled to intercept the requests from the client. The filter driver is configured to decipher the first file format spoof the existence of one or more spoofed files that do not exist on the data storage medium wherein each of the one or more spoofed files corresponds to data stored on the data storage medium and present the spoofed files to the client.

In various embodiments each spoofed file presented to the client consumes no space in the computer system. Additionally the client may be unaware that the backup data is stored according to a non supported format. In some embodiments the user may select one or more spoofed files for access. The filter driver may intercept requests from the client and convert these requests to correspond to the first file format utilized by the backup storage medium. In a similar manner the filter driver is configured to convert retrieved data from the backup system to data utilizing an organization specified by the second file format utilized by the client. The converted retrieved data is conveyed to the client.

These and other embodiments are described and contemplated and will be appreciated upon reference to the following description and figures.

While the invention is susceptible to various modifications and alternative forms specific embodiments are shown by way of example in the drawings and are herein described in detail. It should be understood however that drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary the invention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.

In the following description numerous specific details are set forth to provide a thorough understanding of the present invention. However one having ordinary skill in the art should recognize that the invention may be practiced without these specific details. In some instances well known circuits structures signals computer program instruction and techniques have not been shown in detail to avoid obscuring the present invention.

Referring to a generalized block diagram of one embodiment of a computer system is shown. As described further below computer system may include a filter driver that is configured to detect the data storage format of shared backup storage device and present or spoof the existence of backup image files in commonly known file formats in one or more directories on the file system . A user may browse these directories via the file system . When browsing it would appear that backup server and shared backup storage device include image backup files in these common file formats although they do not. Filter driver may intercept requests such as restore requests or other requests to retrieve or otherwise access data from client computer systems and convey requests to the file system corresponding to a proprietary file format retrieve the requested data of the intercepted requests and convey the requested data to the client computer systems and in the commonly known file formats. illustrates an example of a system capable of the described features according to one embodiment. Further details are provided below.

As shown system includes client computer systems and interconnected through a network to one another to a Network Attached Storage NAS device and to a backup server . Disk storage is coupled to backup server . Network may include a variety of techniques including wireless connection direct local area network LAN connections wide area network WAN connections such as the Internet a router and others. Network may comprise one or more LANs that may also be wireless. Network may further include remote direct memory access RDMA hardware and or software transmission control protocol internet protocol TCP IP hardware and or software router repeaters switches grids and or others.

In alternative embodiments the number and type of clients servers and storage devices is not limited to those shown in . Almost any number and combination of servers desktop and mobile clients may be interconnected in system via various combinations of modem banks direct LAN connections wireless connections WAN links etc. Also at various times one or more clients may operate offline. In addition during operation individual client connection types may change as mobile users travel from place to place connecting disconnecting and reconnecting to system .

In one embodiment of computing system client computer systems and are representative of any number of stationary or mobile computers such as desktop PCs workstations laptops handheld computers blade servers etc. In some embodiments the client computer systems or clients and may include an operating environment e.g. an operating system such as OS . The operating system may interface between the system hardware and the software applications. The clients and may include a processor and a memory medium . The clients and may contain one or more applications on its memory medium such as application . Clients and may use processor to execute instructions of software application . The data that holds the information used and produced by application and stored for later use may be referred to as a computer file or file. Computer files may include photographic or other still images documents video streams audio files plain text files or any other kind of data.

Clients and may be configurable to execute one or more virtual machines that may operate within any particular virtualization platform. Virtualization platform software may be provided by Symantec Corp. VMWare Inc. Microsoft Corp. and others. Each virtual machine may maintain its own set of files similarly as a physical computer would such as operating system files application program files data files etc. Whereas the files of a physical computer are typically stored on a hard disk the files of each virtual machine may be stored in one or more virtual disk image files. A virtual disk image file may be formatted according to a particular specification. Virtual disk image file specifications in common use include at least the Virtual Hard Disk VHD format the V2I format and the Virtual Machine Disk Format VMDK format.

In addition to including software application on memory medium clients and may contain backup system agent software on the memory medium . The backup system agent may be software configured to assist a backup manager such as the backup manager on the backup server to perform one or more backup functions. In some embodiments the backup system agent may also be configured to perform one or more backup functions independently of a backup manager . A further description of the backup manager on the backup server is provided shortly below.

In various embodiments a Network Attached Storage NAS device may be any kind of device configured to store data. The NAS device may be a computer specialized for providing file storage services to clients and . The operating system and other software on the NAS device provide the functionality of file systems and access to files and the management of these functionalities. A NAS device is typically not designed to perform general purpose computing tasks other than file storage. The NAS device may not have a keyboard or display and is instead controlled and configured over the network sometimes by accessing their network address from a web browser.

Continuing with a description of the NAS device a general purpose operating system is usually not needed on the NAS device . Rather a stripped down operating system with minimal functionality may be used instead. The NAS device may include one or more hard disks often arranged into logical redundant storage containers or RAID arrays redundant arrays of inexpensive independent disks . The data may be stored on one or more of the hard disks of the NAS device .

The NAS device may provide data storage at the file system level. The NAS device may use file based protocols such as Network File System NFS popular on UNIX systems SMB CIFS Server Message Block Common Internet File System used with MS Windows systems or AFP used with Apple Macintosh Computers . In the example of files on the NAS device may be accessed through a Network File System NFS interface included in network .

Turning now to the backup server in computer system the backup server may include a backup application . This backup application or backup manager may comprise program instructions stored on the memory and executable by the processor to perform one or more backup operations. Backup operations may include creating partial or full backups e.g. on a computer system or from one computer system to another system performing restore functions e.g. partial or granular restore functions or full restore functions on a computer system or from one computer system to another computer system backup operations may also include other operations.

As noted above the backup system agent on client may assist the backup manager on backup server . The backup manager may be configured to create a volume image backup. In some embodiments the backup manager may receive user input directing the backup manager to create a volume image backup of a specific system. In some embodiments the backup manager may create a volume image backup of a specific system automatically e.g. the backup manager may be scheduled to perform regular backups of a specific system. As one example the backup manager might create a volume image backup of the client . The image created may thus include images of the application the backup system agent and the OS as well as any other software components on the client . As part of creating the volume image backup of the client the backup manager may also create catalog metadata associated with the image .

The catalog metadata created by the backup manager during a backup operation for client may include metadata for the image e.g. metadata for application and the other components of the image. Metadata may include at least one or more of the following a data name data size a fingerprint of the data a batch number as well as data type version number ownership permissions modification time error code etc. A batch number may be used to identify the particular backup operation in which an associated backup entry was created. Other forms of metadata and or identifiers will be apparent to those of ordinary skill in the art. The catalog metadata may be usable for restore browsing e.g. at a later time. For example the data layout of stored information in backup storage device may be stored in the catalog .

In one embodiment the backup server comprises a file system that operates as a special purpose database for the storage organization manipulation and retrieval of data. File system may provide access to data by operating as clients for a network protocol or file system may be virtual and exist only as an access method for virtual data. A user may browse the directories stored on backup storage device via the file system .

The file system in backup server may be coupled to one or more filter drivers. Although only a single filter driver is shown in multiple filter drivers may exist. Generally speaking a file system filter driver may be configured to intercept requests targeted at a file system or another file system filter driver. By intercepting a request before the request reaches its intended target the filter driver may extend or replace the functionality provided by the original target of the request. Examples of file system filter drivers include anti virus filters backup agents and encryption products. Filter driver may be used to eliminate file format compatibility issues as further described later.

Returning to a data backup operation in one embodiment the backup manager on backup server may create the volume image backup and store it on the backup storage device . In another embodiment the backup manager may store the volume image backup on the backup server e.g. on a memory of the backup server as shown. In yet other embodiments the backup manager may instead store the volume image backup on another device e.g. on another computer system such as another server connected over the network . In any of the embodiments a backup copy of the data may be subsequently restored to the NAS device or to another computer system in the event that it becomes necessary to do so. Recovery of the backup copy such as a volume image backup file may have a variety of uses. For example it may be used during system deployment for the setup of many computers. Another use may include data recovery. The image level backup file may allow rapid restoration of a system after data loss caused by an operating system crash a virus attack hardware failure or otherwise.

In addition to the above the backup copy may allow for a bare metal recovery wherein the backed up data is available in a form that allows for a computer system restoration from bare metal or without any requirements of a previously installed software or operating system. In such a case the backed up data typically includes the necessary operating system applications and data components to rebuild the backed up system to an entirely separate platform. During deployment recovery or other use of the backup data if only certain files are needed then it is possible to connect the image backup file as a virtual disk and then copy only the needed files from the image backup file using a file utility software program.

It is noted that the backup copy may not be formatted in a similar manner as the original copy of the data . The many available backup products may each use a commonly known file format or alternatively a proprietary file format for the storage of data. In the case of a proprietary file format a client application may not be able to decipher retrieved information corresponding to the proprietary file format. In such a case an application executing on client may not be able to proceed.

In one embodiment the volume image backup file discussed above may contain the complete contents and structure representing a storage medium such as data on NAS device . This volume image backup file may be created by performing a complete sector by sector or alternatively a byte by byte copy of the data on storage mediums within NAS device . This copy thereby replicates the structure and contents of this data. A volume image backup file may contain all files and may replicate all data. In another embodiment a backup system only backs up user files. The backup system may not backup boot information and files locked by the operating system such as those in use at the time of the backup. Such a backup may not refer to a volume image backup file since a volume image backup file replicates all data. Similarly some disk imaging utilities omit unused file space from source media or compress the disk they represent to reduce storage requirements. The resulting files are typically referred to as archive files as they are not literally disk images. Therefore data in backup storage device may not be portable or may not be easily copied to alternative locations for various purposes. Regardless of the type of backup file this file may be stored on backup storage device in an uncommon file format. Although the below description refers to a volume image backup file the below methods and systems may be used with any type of backup file or any type of data file.

In an embodiment where the backup manager creates the volume image backup and stores it on the backup storage device the backup storage device may include or be further coupled to storage consisting of one or more hard disks tape drives server blades or specialized devices and may include a variety of memory devices such as RAM Flash RAM MEMS MicroElectroMechanical Systems storage battery backed RAM and or non volatile RAM NVRAM etc. The backup manager may create and store the volume image backup in a commonly known file format such as VHD VMDK V2I or otherwise. Alternatively the backup manager may create and store the volume image backup in a proprietary file format. In this case the corresponding application such as the backup manager used to create the volume image backup may need to be used in order to both view and access the volume image backup.

As described earlier a computer file is a block s of data that holds the information used and produced by software applications such as application compilers operating systems or otherwise. A computer file may be stored for later use. As is well known a file format of data and if applicable the metadata provides the significance of the corresponding binary bit positions and values used to represent the data and corresponding metadata. The file format may also determine a particular manner of accessing the data. Data may be stored accessed and modified according to multiple file formats. A filename extension may be used to indicate the file format of a computer file. One example of an indication of the file format is a suffix added to the name of a computer file. This suffix or filename extension may be used to group process or identify computer files with a similar file format. Examples of filename extensions include .txt for plain text files .java for the Java programming language .vmdk for the Virtual Machine Disk image file format and .vhd for the Virtual Hard Disk image file format. Other filename extensions are possible and contemplated.

Both computers and file servers may include file systems used to store data in memory devices as described above wherein the file systems and memory devices utilize a separate file format from the applications executing on the computers. In addition an operating system on a file server may have a file system that stores data formatted as a single stream. Applications on computers may access this data and may interface with the file server via a predetermined interface. However in one example this interface and corresponding file format may store data with a file format that supports multiple streams in a single instance storage. These differences may lead to compatibility problems.

The various combinations of file formats for data used in a computing system including the use by multiple applications by multiple versions of applications and by multiple file systems may cause interoperability problems. These problems may lead to cases where a user is unable to perform work with an application since the application or a file system is unable to recognize a file format of the corresponding data.

Turning now to a generalized block diagram of one embodiment of file format incompatibility is shown. In the embodiment shown there is a file format difference between a client executing a software application and data storage on a backup server coupled to the client through a network. The computing system shown in illustrates one example of such a system. The various types of data such as still images documents video streams audio files plain text files volume image backup files and other each have several available file formats associated with them. Incorporating the multiple associated applications the multiple versions of applications and so forth as mentioned above causes interoperability problems to be common. The file format and the data storage file format are illustrated in a general manner. File formats specify a particular manner that information or data is encoded for storage. A file format may specify at least an arrangement an encoding algorithm and a data transfer rate for the information.

The generalized example shown in illustrates an application file format that divides files into partitions. For example file comprises the partitions A A and so forth. These partitions may or may not be of equal length. File may include a header file or table that provides offsets for other tables or sections of information. Each partition may or may not include an initial value such as a predetermined hex value that specifies a section type or an information type included in the corresponding partition. Many different formats may be used to describe file format .

In addition to file format providing several choices for arranging data the file format may be associated with a particular data transfer protocol. One such protocol may determine the partitions such as A A and so forth be transmitted in a particular order such as a sequential order. Also a protocol may determine the partitions be transmitted one at a time. Other transmission options are possible and contemplated.

Similar to file format the backup data storage file format may provide several choices for data arrangement and a transfer protocol. The file format used in the plurality of entries of a data storage medium may not be compatible with file format . File format may use one of several data storage algorithms and methods. As shown in file format may use an encoding algorithm that combines two partitions of files . This encoding and storage is indicated for partitions B and B as B B in entry . The file format may combine two partitions in a predetermined manner set by an encoding algorithm. A single entry may store partitions from separate files marked by offsets. For example the partitions C and C are stored in entry along with partitions B and B. Also it is noted the partitions are not stored in groups associated with a file or in a sequential order. A data storage manager may find such an arrangement to be optimal for storage security or other reasons. The description here for file format is a generalized description that does not indicate a particular format in industry. The description here is used to illustrate a format very different from format and reasons for such a difference. Particular examples may be numerous and are well known across multiple industries.

Similar to file format the file format may be associated with a particular data transfer protocol. One such protocol may determine the portions of an entry corresponding to a particular requested file be transmitted in groups greater than one wherein the groups may or may not be decoded beforehand and at a rate different from a rate specified by file format . Other transmission options are possible and contemplated.

As stated earlier an application may be executing on a client that processes files stored with a file format . In one embodiment the file format may be represented by the formats VHD VMDK or V2I. This application may request a particular file from a data storage medium that stores data according to file format . In one embodiment the file format may be represented by a proprietary file format associated with a particular backup and restore software application. If the file such as file is received by the client in an arrangement and transmission rate determined by file format rather than by the file format then the application may not be able to process the file. For example a portable storage device such as a compact disc CD a digital versatile disc DVD a universal serial bus USB jump drive or otherwise may store a data recovery environment application. The portable storage device may be connected to a peripheral interface such as a disk drive or a USB port on a client such as client of . This environment may allow a data recovery system to be booted from the portable storage device. An application on the portable storage device may enumerate an image backup file or other data on a data storage medium such as backup storage device in . The application may present the data to the user such as through a graphical user interface GUI and then the user may select a volume image backup file to recover. However if the data storage medium utilizes a file format such as a single instance storage or a proprietary file format then the application on the portable storage device may not be able to decipher retrieved information.

As shown in a filter driver may receive requests utilizing file format from an application executing on a client convey requests to a data storage medium utilizing the file format receive retrieved information or files from the data storage medium utilizing the file format and send the retrieved files utilizing the file format to the client. In order to simplify the illustration a backup server a file system a network and so forth are not shown. However these components are shown in one embodiment of a system in . What is appreciated here is the filter driver may perform a conversion between the file formats and .

In addition to providing file format conversion capabilities the filter driver may be configured to interface with a backup storage medium or its accompanying system and determine the data storage file format utilized by the data storage medium. After reading a catalog such as catalog metadata of the filter driver may expose the data in a network shareable manner. The filter driver may present or spoof the existence of backup image files utilizing commonly known file formats in one or more directories on a file system such as file system . A user may browse these directories via the file system . When browsing it would appear that a backup system such as backup server and backup storage device of includes image backup files in these common file formats although they do not. These spoofed image files may not consume any space of their own on the file system . The directories of file system may appear on a graphical user interface GUI . The browser output may show files in directories that actually do use the commonly known file formats. In addition the browser output may show the spoofed files.

Each of the one or more spoofed files presented to the client corresponds to one of the one or more computer files determined to be stored on the data storage medium. In addition each of the one or more spoofed files has a corresponding identifier that indicates the spoofed file contains data organized by a file format that is decipherable by the client. In one embodiment this identifier comprises both a same filename as a corresponding computer file determined to be stored on the data storage medium and a filename extension corresponding to the file format decipherable by the client. Other embodiments for the identifier are possible and contemplated.

In one example the data storage medium may store a data image file with a corresponding filename backup presentation0209.sis. A client may not be able to decipher files utilizing a single instance storage file format which may be indicated by a .sis file extension. However the client may be able to decipher files utilizing a Virtual Hard Disk file format which may be indicated by a .vhd file extension. The filter driver may present a spoofed file backup presentation0209.vhd which both consumes no space in the computer system and corresponds to the file backup presentation0209.sis. A user browsing the contents of the data storage medium with a GUI may view the spoofed file backup presentation0209.vhd since this file is presented by the filter driver as existing on the data storage medium. The user may select this spoofed file to be used in an application executing on the client.

Referring now to one embodiment of the components of a filter driver is shown. Filter driver may be interfacing to both a client and a backup server via a file system an input output I O manager or otherwise. Filter driver may receive requests from an input output I O manager or otherwise on a backup server wherein the requests may have originated from threads executing on a client . A client interface may receive these requests and route them to an appropriate module based on at least a determined file format of the received request .

Modules may be amended added or deleted based on changes in supported file formats such as commonly used image backup file formats. As used herein elements referred to by a reference numeral followed by a letter may be collectively referred to by the numeral alone. For example modules may be collectively referred to as modules . Modules may include logic for disassembling a packet of a particular file format and also for assembling received data from logic to be included in a packet to convey to a client . In one embodiment modules may convey data to logic for converting corresponding format information of the received requests to a format understood by a backup system.

Similar to modules modules may be amended added or deleted based on changes in supported file formats such as a backup system file format. Modules may include logic for disassembling a packet of a particular file format from the backup system and also for assembling received data from logic to be included in a packet to convey to a file system driver . In one embodiment modules may convey data to logic corresponding to received packets from file system driver . A scheduler may be used to coordinate the processing of requests and retrieved data both sent and received to both client applications and the backup storage device . The scheduler may determine a scheduling policy based on at least predetermined priority levels bandwidth restrictions or otherwise. Any configuration information may be stored in configuration that may be updated.

Turning now to one embodiment of an input output layering model is shown. Similar system components as described above are numbered identically. As shown model includes user mode components and kernel mode components. Applications and executing on clients and may send read and write or input output I O memory requests to an I O manager on a backup server via a network . The I O manager may receive the requests create one or more corresponding packets and route these packets to respective drivers.

Below the I O manager may be several driver layers. These several driver layers including both intermediate or device drivers and filter drivers within a driver stack may exist between an application and a piece of hardware. Although only a single driver is shown for both a device driver and a filter driver several drivers of each category may exist within driver stack . These drivers may be grouped together in stacks or stacks within stack that work together to completely process a request targeted at a particular device. A layered driver model is one manner to process I O requests. In this model each driver in a stack may be responsible for processing a part of a request. If the request cannot be completed information for the lower driver in the stack may be set up and the request is passed along to that driver. Such a layered driver model may allow functionality to be dynamically added to a driver stack . It also allows each driver to specialize in a particular type of function and decouples it from having to know about other drivers.

Generally speaking a filter driver may be used to add features to a device without modifying the underlying device driver or the programs that use the device. Filter drivers may allow modifications to some aspects of an existing driver s behavior without re writing the underlying driver. Provided routines within I O manager may be used to redirect I O requests to a device object such as file system to the filter driver instead of forwarding them to the driver managing the target device object such as file system driver . In one embodiment a filter driver may reside within a backup system such as on backup server in . However the actual location of filter driver may be in another location. The I O stack may be used to direct requests to the filter driver regardless of its actual location.

In the embodiment illustrated in the file system driver and shared storage driver stack are shown outside of driver stack to better associate the drivers with the targeted shared storage . However these drivers may still utilize I O stack and be logically grouped in a stack or sub stack within driver stack . The filter driver that receives the redirected I O requests to file system driver may then examine modify complete or pass along the requests it receives to the file system driver . For example filter driver of may intercept I O requests to a backup system wherein the requests correspond to a common image backup file format such as VHD. The filter driver may then modify the requests to correspond to a file format used by the backup system and then pass these modified requests to file system driver . The file system driver may provide a means for users to store information and retrieve it from nonvolatile media such as disks or tapes used in shared storage device . The file system driver may be an intended target to receive requests to open create read write and close files on disks. These requests typically originate in a user process such as a thread executing on client corresponding to instructions of application . These requests are dispatched to the file system driver via the I O manager .

The I O manager may follow a predetermined protocol regarding received requests. Whenever any user s I O request is received by the I O manager for a file residing on a mounted logical volume in shared storage the I O manager normally forwards the request to the file system driver managing the mounted logical volume. Before forwarding the request however the I O manager may check I O stack to determine if any other driver is layered over the files system driver . If so the I O manager may redirect the request to that driver such as filter driver which may be at the top of the layered list or at least ahead of the file system driver . Other filter drivers that add security or other features may be layered above both the filter driver and file system driver . Therefore the filter driver may intercept the I O request before it reaches the file system driver .

The filter driver may manipulate intercepted requests such as converting them to correspond to a different file format. The modified requests may be dispatched to the underlying file system driver . The file system driver may not realize that some other filter driver is layered above it and may behave as if the I O manager has sent the I O request directly to it.

Turning now to one embodiment of a graphical user interface GUI is shown. The GUI may be presented by a file system on backup server of . The GUI may be used for selecting specific lists files or items to be restored. Interface may include features such as drop down menus a navigation bar an address field and so on. Within interface are shown a Lists pane and a Restore Items pane . The interface may include panes buttons and functionalities described further below. In one embodiment the interface may show spoofed files or files that include image backup files in common file formats that do not actually exist.

Within Lists pane a hierarchy of lists and items may be seen and navigated. The illustrated hierarchy includes lists and . List includes items . List includes items . Lists and items may be selected as indicated by a highlighted background and added to Restore Items pane via an Add button. Restore Items pane includes a restore folder that includes items and to be restored. Lists and items may be selected and removed from Restore Items pane via a Remove button. Restore Items pane also includes a Restore button and a Clear button. Once a set of restore items has been selected restoration may proceed. If the Restore button is selected the items listed in Restore Items pane may be added to a file system where they may be accessed by various applications. If the Clear button is selected the items listed in the Restore Items pane are removed from the pane.

It is noted that the naming conventions depicted in e.g. List Item etc. are provided for ease of discussion. In a typical embodiment names reflective of those used in ordinary business or other environments e.g. documents spreadsheets image backup files as well as user defined list and or items names etc. may be used as desired. Once a set of items and or lists has been selected to be restored to the file system a restore function may perform retrieval and formatting operations that enable various applications to access the retrieved lists items.

Referring to one embodiment of a method for spoofing files of an uncommon file format is shown. The components embodied in the computer system described above may generally operate in accordance with method . For purposes of discussion the steps in this embodiment are shown in sequential order. However some steps may occur in a different order than shown some steps may be performed concurrently some steps may be combined with other steps and some steps may be absent in another embodiment.

In block the filter driver of may determine supported commonly known file formats for clients and in the computing system . In one embodiment the supported file formats may be read from a file or a predetermined register. Alternately the supported file formats may correspond to permanently set values within the filter driver . Regardless of the input format for the supported file format information this information may modify or set parameters within a configuration in the filter driver . This information may be used to determine which request modules to utilize.

The settings within configuration of the filter driver may be used to determine the file format of a request from an executing thread on a client . In one embodiment the request corresponds to a request for an image backup file for a recovery application executing on client . In one example the filter driver may have preset stored configuration values corresponding to commonly used image backup files such as VHD VMDK and V2I.

In block the filter driver of may determine the supported file formats for a backup server and backup storage device in the computing system . Similar to determining the supported file formats for clients the filter driver may utilize values stored in the configuration for determining the supported file formats for a backup system. These file formats for a backup system may or may not be a commonly known file format.

In block the filter driver may be able to utilize the corresponding application programming interfaces APIs of the file system in order to read a catalog stored in a memory medium of a backup server . Alternatively the filter driver may use the APIs of the file system for sending converted requests for data and interface directly with the catalog .

In order to determine and report the data layout within a backup system the filter driver may utilize the specifications used in the client and the backup system file formats. In one embodiment the filter driver may utilize the retrieve modules and backup interface of in order to both send read requests to the catalog and to understand and process the arrangement and semantics of the retrieved data from the catalog . As the retrieved data arrives from catalog the filter driver may piece together the type and arrangement of data stored in backup storage device along with appropriate status information. The filter driver may be able to convert the backup system file format including at least data arrangement semantics and transmission protocol in order to enumerate the stored data and perform this piecing together of the information. By reading the catalog the filter driver may determine the data layout of stored information in backup storage device .

As the filter driver determines the data layout of stored information in backup storage device the filter driver may use the client file formats to determine different arrangements and semantics of the same information. A conversion may be performed between the client and backup system file formats in order to piece together the type and arrangement of data read from the catalog . This conversion may be used to represent the information in a format an application can process wherein the application is executing on client .

In block the filter driver may expose the data stored in the backup system in a network shareable manner. The filter driver may present or spoof the existence of the stored files in one or more directories on the file system . In one embodiment the files correspond to image backup files. These spoofed files may not consume any space of their own on the file system . A user s application may access the file system for browsing and the filenames with filename extensions indicating the client file formats may be present through a GUI. However a file utilizing the client file format s is not actually stored on backup storage device .

Referring to one embodiment of a method for retrieving data for spoofed files is shown. The components embodied in the computer system described above may generally operate in accordance with method . Similar to method for purposes of discussion the steps in this embodiment are shown in sequential order. However some steps may occur in a different order than shown some steps may be performed concurrently some steps may be combined with other steps and some steps may be absent in another embodiment.

In block a user s application may access the file system for browsing and the filenames of spoofed files with filename extensions indicating the client file formats may be present through a GUI. However a spoofed file utilizing the client file format s is not actually stored on backup storage device . If a request is received for a spoofed file from a client application via an I O manager or otherwise conditional block then in block the filter driver intercepts the request and converts the request from the client application file format to the file format of the backup system. In one embodiment the filter driver maps spoofed files to one or more blocks of data stored in the backup system. Responsive to the request from the client for the spoofed file the filter driver may convert the request to generate one or more requests for the corresponding blocks of data. In block the filter driver conveys the converted request to the file system . The received request may be configured to open create read write and close files on a disk or other storage medium within backup storage device . For a recovery operation being performed by the client application the request may correspond to a read operation.

After the filter driver sends the converted request to the backup storage device via the file system corresponding data for the request e.g. the blocks corresponding to the spoofed file may be received from the file system in block . In block the filter driver converts the received data to form the spoofed file i.e. the spoofed file is now realized . Subsequently in block the filter driver sends the data to the I O manager or otherwise in order to convey the now realized spoofed file to the client application. Then control flow of method returns to conditional block .

It is further noted that the above described embodiments may comprise software. In such an embodiment the program instructions that implement the methods and or mechanisms may be conveyed or stored on a computer readable medium. Numerous types of media which are configured to store program instructions are available and include hard disks floppy disks CD ROM DVD flash memory Programmable ROMs PROM random access memory RAM and various other forms of volatile or non volatile storage.

In various embodiments one or more portions of the methods and mechanisms described herein may form part of a cloud computing environment. In such embodiments resources may be provided over the Internet as services according to one or more various models. Such models may include Infrastructure as a Service IaaS Platform as a Service PaaS and Software as a Service SaaS . In IaaS computer infrastructure is delivered as a service. In such a case the computing equipment is generally owned and operated by the service provider. In the PaaS model software tools and underlying equipment used by developers to develop software solutions may be provided as a service and hosted by the service provider. SaaS typically includes a service provider licensing software as a service on demand. The service provider may host the software or may deploy the software to a customer for a given period of time. Numerous combinations of the above models are possible and are contemplated.

Although the embodiments above have been described in considerable detail numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

