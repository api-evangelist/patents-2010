---

title: Methods and apparatus for collecting and displaying performance metrics from a web site
abstract: A system obtains a script containing at least one transaction to be performed with the web site, the at least one transaction defining a sequence of page requests identifying at least one web page to obtain from the web site. The system executes the script to perform the at least one transaction, performance of the at least one transaction including retrieving the sequence of the at least one web page. The system detects a capture event associated with the at least one web page, and in response to the capture event, captures content of the at least one web page. The system packages the content of the at least one web page into a container capable of being rendered, such that the container provides a plurality of components associated with the at least one captured web page, and delivers the container to a repository.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08065414&OS=08065414&RS=08065414
owner: Compuware Corporation
number: 08065414
owner_city: Detroit
owner_country: US
publication_date: 20100318
---
This patent application is a continuation of U.S. patent application Ser. No. 11 471 319 filed on Jun. 20 2006 entitled METHODS AND APPARATUS FOR COLLECTING AND DISPLAYING PERFORMANCE METRICS FROM A WEB SITE issued as U.S. Pat. No. 7 685 273 on Mar. 23 2010 which is a Continuation in Part of U.S. patent application Ser. No. 11 223 264 filed on Sep. 9 2005 entitled METHODS AND APPARATUS FOR COLLECTING PERFORMANCE METRICS FROM A WEB SITE which is a Continuation in Part of U.S. patent application Ser. No. 11 094 338 filed on Mar. 30 2005 now abandoned entitled METHOD AND APPARATUS FOR MEASURING AND REPORTING LOADING SPEED OF INFORMATION OVER COMPUTER NETWORKS which claims benefit of U.S. Provisional Application No. 60 557 994 filed on Mar. 31 2004 entitled METHOD AND APPARATUS FOR MEASURING AND REPORTING LOADING SPEED OF INFORMATION OVER COMPUTER NETWORKS and U.S. Provisional Application No. 60 592 813 filed on Jul. 30 2004 entitled SCRIPTABLE TRANSACTION AGENT . The contents and teachings of each of these are hereby incorporated by reference in their entirety.

Computer systems coupled to a data communications network such as the Internet allow for the exchange of a wide variety of information between users of such computer systems. One popular use of computer networks such as the Internet allows users to operate client communications software known as a web browser to communicate with remote computer systems known as web servers in order to browse web pages on the World Wide Web. The World Wide Web is generally a collection of web server computer systems that each operates web server software that communicates using a number of different data communications protocols and data formats to allow each user s browser to make web page requests to the web servers. In response to these web page requests web servers obtain e.g. from storage or via dynamic generation the requested web pages and serve those pages back to each user s web browser for viewing by the user.

A typical web page is written in a markup language such as the Hypertext Markup Language HTML and includes a number of embedded objects referenced by respective Uniform Resource Locators URLs within the HTML of a web page. The web page itself is generally referenced by a URL as well. When a user provides a URL to a web browser of a web page either by clicking a hyperlink identifying the URL to that web page or by typing in the URL of the web page the web browser performs a detailed sequence of processing tasks to obtain that web page. As an example if the URL of the web page identifies a domain name of a server computer system on the Internet the web browser must first perform a Domain Name Service DNS lookup of the domain name to resolve this alphanumeric name into the Internet Protocol IP address of the web server on the Internet that can serve the page referenced by the URL. Once this DNS lookup is complete the web browser establishes a connection to the web server e.g. a Transmission Control Protocol or TCP connection and uses a Hypertext Transport Protocol HTTP to transmit a web page GET request over the connection to the web server. The HTTP GET request contains the URL of the web page to be served by the server. The web server receives this HTTP GET request obtains or dynamically generates the web page and returns the web page as HTML to the web browser in an HTTP response message over the connection.

As the web browser receives the HTML for the web page the HTML of the web page may include many embedded URL s that define other objects within the web page to be obtained by web browser. As an example a graphic or image embedded within the web page is typically referenced with an embedded URL that specifies a server and location e.g. filename and directory path within the server of that graphic or image. As the web browser encounters objects such as embedded URL s within the web page the web browser repeats the sequence of processing described above the URL for the web page in order to obtain each embedded object. This can include performing a DNS lookup of the domain name specified in the URL if that domain name was not previously resolved establishing a connection to a server and initiating an HTTP GET request to obtain the content associated with the embedded URL. Modern web pages often contain many embedded objects and URLs that reference these objects often specify different server computer systems from which to obtain these objects. As a result the process of obtaining the complete content associated with a single web page including all embedded objects involves significant processing and communications activities.

Sophisticated web server software systems allow a user to visit the web site using his or her browser in order to perform transactions within the web site such as purchasing goods or services. Performance of the transaction with a web site typically involves the user operating the web browser to initially navigate to the homepage of the commercial web site. From the homepage the user is able to further navigate to other pages associated with the web site in order to perform the transaction such as for example selecting goods or services to be placed into an electronic or virtual shopping cart maintained within the web server as the user moves from page to page of the transaction. When the user has completed the selection of goods and services to be purchased the user can further navigate within the web site to one or more purchasing web pages that allow the user for example to enter credit card information for payment of the selected goods and services. The web server software is able to process the credit card payment and allow or deny the purchase of the selected goods and services to complete the transaction. A single transaction might involve visiting and providing user input to a sequence of many web pages.

Other types of transactions might involve navigating through a sequence of web pages to obtain desired content performing searches for user specified information and so forth. Depending upon the purpose of the web site a typical user transaction can involve a user visiting a number of pages and providing user input on those pages. The web server often uses input from one or more pages to produce successive web pages in a given transaction.

Many organizations such as corporations universities and web based businesses rely heavily on the ability of their web site to properly perform transactions without errors. Because of the importance of ensuring that such web sites are operating properly software developers have produced a number of conventional tools to exercise and test a web site and measure the performance of that web site s ability to process user transactions correctly and efficiently.

One conventional web site testing and performance measurement tool is a first generation web site testing tool and is also referred to herein as a single web page test tool. A first generation single web page test tool allows an operator of the tool to provide a single URL of a single web page to the tool. In response to receiving this URL the tool is able to initiate a web page request for the web page located at the URL and is able to measure and collect certain performance ratings of the web site with respect to how fast the web server returns the web page in response to initiating the request for the web page using the URL. As an example one conventional performance measurement tool is able to initiate a request for a web page and track the amount of time required to establish a connection to the web server that serves that web page. Additionally the conventional first generation single page test tool is able to determine the amount of time required to begin receiving data for the web page and the amount of time required for the entire web page to be delivered back to the test tool. Additionally the conventional test tool is able to parse hypertext markup language HTML to determine if the web page was properly returned from the web server.

More sophisticated second generation web server performance and testing tools provide the ability to specify a sequence of web pages to be obtained from a web site. Such conventional web testing tools are referred to as second generation web testing tools and operate by wrapping an actual web browser with a software program to essentially remotely control the web browser using software application programming interfaces APIs to cause the browser under control of the test tool to visit a sequence of pages to perform a transaction with web server.

Conventional technologies for measuring and testing the performance of transactions on web sites suffer from a variety of deficiencies. In particular while conventional second generation web testing tools offer the ability to remotely control browser software to perform an entire transaction associated with web site the granularity or amount of detail that can be obtained concerning the performance of the web site by such second generation tools is significantly lacking on a page by page basis in comparison to the first generation single page web testing tools. In the background above it was noted that first generation single page web testing tools are capable of collecting detailed performance ratings for a single web page. The reason the first generation single page web test tools are able to do this is because the test tool is specifically written to measure the timing metrics for that single individual page. Such conventional single page tools are not readily adaptable to collecting such metrics for entire sequences of pages involved in a complex transaction with a sophisticated web site. This is because the single page web test tools do not fully emulate a web browser and are not fully capable of maintaining web browser state information such as cookies or other data that are often required and exchanged between a browser and server when carrying out a multi page web server based transaction.

While the second generation web testing tools can control an actual browser to perform transactions the amount and granularity or detail of data that is available using available software application programming interfaces APIs that control the browser limits the amount of details concerning the performance of a web transaction on a page by page and object by object basis. This is because the APIs available to off the shelf browsers only allow a secondary application to obtain limited data concerning what processing is happening within the browser as the browser retrieves web pages and interacts with a server or other computer systems on a network such as the Internet. As an example using conventional web testing and performance measurement tools there is no way to query a conventional web browser using browser provided APIs to inquire as to the amount of time required to obtain the first byte of data from a web server for a particular web page requested with a URL. Likewise no data is available from a wrapper driven browser concerning detailed metrics for each object in that page. Accordingly though the second generation web testing tools can indicate whether or not a transaction was able to be successfully completed with a web site as a whole i.e. that all pages were obtained such tools lack the ability to provide or acquire or track detailed performance metrics concerning individual pages or objects loaded during the transaction.

Embodiments disclosed herein significantly overcome these and other deficiencies associated with conventional web site testing and performance measurement systems and provide an agent such as a software process that executes remotely from a web site and is operable to measure performance and operability of the web site. The agent obtains a script that contains transactions to perform on a web site. The script executes and requests web pages on the web site. The agent obtains the performance metrics upon occurrence of a capture event such as an error on the web page. The capture event can be a threshold specified by a user or it can be a web page error such as a page not found server error network error object error or other error. In response to the capture event the agent captures the content of the web page on which the error occurred and packages the content of the page produced in response to the capture event into a container. The container can be transferred to a remote analysis site such that the captured web page can be rendered locally i.e. locally with respect to a computer system performing analysis of the error . Copies of all remote objects referenced by the captured web page are captured locally such that all references on the web page that originally pointed to remotely located objects now point to local objects. The agent can deliver or transfer the container to a repository for later analysis.

Embodiments disclosed herein also provide a performance displaying process that receives the container from the agent. The performance displaying process stores the container and displays the content of the captured web page within a graphical user interface. The performance displaying process provides information about the captured web page such as a test within the script on which the capture event occurred the test time at which the capture event occurred a server on which the agent was executing when the capture event occurred an error code associated with the capture event and an error name associated with the capture event. Other data can be provided as well. The performance displaying process also provides details related to the transaction performed on the web site by the script. As the script executes various transactions are performed on the web site such as requesting a sequence of web pages. The performance displaying process provides a representation of the web pages requested by the script including information regarding which web page were successfully executed which web pages had errors and which web pages were not accessed during the execution of the script. The performance displaying process also provides screen shots of the web pages requested by the script including unaltered source code HTTP headers and trace route information.

Embodiments disclosed herein include a computer system executing an agent process. The agent obtains a script containing at least one transaction to be performed with the web site. The transaction defines a sequence of page requests identifying at least one web page to obtain from the web site. The agent executes the script to perform the transaction with the web site. Performance of the transaction includes retrieving the sequence of the web page. The agent detects a capture event associated with the web page. In response to the capture event the agent captures content of the web page and packages the content of the web page into a container capable of being rendered such that the container provides a plurality of components associated with the captured web page. The agent then delivers the container to a repository.

Embodiments disclosed herein also include a computer system executing a performance displaying process that receives a container from the agent. The container contains at least one captured web page associated with a web site. The captured web page contains a plurality of components and is a result of at least one transaction executed on the web site by the agent. The performance displaying process stores the container and renders the container to display the content of the captured web page.

During an example operation of one embodiment suppose an agent obtains a script to perform a series of transactions on a web site such as an online banking web site. The series of transactions include logging onto the online banking website opening a business bank account and depositing a minimum amount of money necessary to establish the business bank account. The script has been pre configured to detect a capture event when the virtual user fails to open the bank account due to an error returned by the website. The agent executes the script and the script begins to execute the sequence of transactions on the online banking website. When the script executes the transaction of attempting to open the business bank account and is denied by the server the capture event is triggered. The agent detects the capture event has occurred and in response captures the content of the web page on which the capture event occurred. The agent packages the content of the web page into a container that is capable of being fully rendered locally. The agent then delivers the container to a repository.

The performance displaying process receives the container from the agent stores the container and renders the contents of the web page on which the capture event occurred. The performance displaying process displays name of the online banking transaction script the time at which the capture event occurred the server from which the online banking transaction script was executing an error code associating with the online banking transaction and an error name associated with the online banking transaction. The performance displaying process also displays identifiers identifying each of the pages in the online banking transaction. Those pages that were successfully executed are displayed for example with green identifiers signifying a successfully executed web page. Those pages that were not successfully executed i.e. the page on which the attempt to open an online bank account with a balance below the required minimum are displayed for example with red identifiers signifying an unsuccessfully executed web page. Those pages that were not executed for example the script detected a capture event and stopped such that the remaining web pages were not executed are displayed for example with white identifiers signifying a web page that was not executed. The performance displaying process also displays a screen shot of the web page on which the capture event occurred the source code of that web page HTTP headers associated with that web page and trace route information associated with a host that hosts that web page.

Other embodiments disclosed herein include any type of computerized device workstation handheld or laptop computer or the like configured with software and or circuitry e.g. a processor to process any or all of the agent operations disclosed herein. In other words a computerized device or a processor that is programmed or configured to operate in accordance with the system as explained herein is considered an embodiment disclosed herein.

Other embodiments disclosed herein include software programs to perform the steps and operations summarized above and disclosed in detail below. One such embodiment comprises a computer program product that has a computer readable medium including computer program logic encoded thereon that when performed in a computerized device having a coupling of a memory and a processor and a communications interface programs the processor to perform the operations disclosed herein. Such arrangements are typically provided as software code and or other data e.g. data structures arranged or encoded on a computer readable medium such as an optical medium e.g. CD ROM floppy or hard disk or other a medium such as firmware or microcode in one or more ROM or RAM or PROM chips or as an Application Specific Integrated Circuit ASIC . The software or firmware or other such configurations can be installed onto a computerized device to cause the computerized device to perform the techniques explained herein.

It is to be understood that the system disclosed herein can be embodied strictly as a software program as software and hardware or as hardware alone such as within a processor or within an operating system or a within a software application and that the agent can execute in any type of computer system. Example embodiments disclosed herein may be implemented within products and or software applications manufactured by Gomez Inc. of Lexington Mass. USA.

Embodiments disclosed herein provide an agent such as a software process that executes remotely from a web site and is operable to measure performance and operability of the web site. The agent obtains a script that contains transactions to perform on a web site. The script executes and requests web pages on the web site. The agent obtains the performance metrics upon occurrence of a capture event such as an error on the web page. The capture event can be a threshold specified by a user or it can be a web page error such as a page not found server error. In response to the capture event the agent captures the content of the web page on which the error occurred and packages the content into a container such that the captured web page can be rendered locally. Copies of all remote objects referenced by the captured web page are captured locally such that all references on the web page that originally pointed to remotely located objects now point to local objects. The agent then delivers the container to a repository.

Embodiments disclosed herein provide a performance displaying process that receives the container from the agent. The performance displaying process stores the container and displays the content of the captured web page within a graphical user interface. The performance displaying process provides information about the captured web page such as a test within the script on which the capture event occurred the test time at which the capture event occurred a server on which the agent was executing when the capture event occurred an error code associated with the capture event and an error name associated with the capture event. The performance displaying process also provides details related to the transaction performed on the web site by the script. As the script executes various transactions are performed on the web site such as requesting a sequence of web pages. The performance displaying process provides a representation of the web pages requested by the script including information regarding which web pages were successfully executed which web pages had errors and which web pages were not accessed during the execution of the script. The performance displaying process also provides screen shots of the web pages requested by the script including unaltered source code HTTP headers and trace route information.

Embodiments disclosed herein include a computer system executing an agent process. The agent obtains a script containing at least one transaction to be performed with the web site. The transaction defines a sequence of page requests identifying at least one web page to obtain from the web site. The agent executes the script to perform the transaction with the web site. Performance of the transaction includes retrieving the sequence of the web page. The agent detects a capture event associated with the web page. In response to the capture event the agent captures content of the web page and packages the content of the web page into a container capable of being rendered such that the container provides a plurality of components associated with the captured web page. The agent then delivers the container to a repository.

Embodiments disclosed herein also include a computer system executing a performance displaying process that receives a container from the agent. The container contains at least one captured web page associated with a web site. The captured web page contains a plurality of components and is a result of at least one transaction executed on the web site by the agent. The performance displaying process stores the container and renders the container to display the content of the captured web page.

As noted in the summary above the agents are operable to obtain one or more scripts from the agent command and control process . Each script defines one or more transactions that may be performed with one or more of the web servers operating in the web server computer systems . As a brief example the web servers may be commercial web servers operated by business organizations that sell goods or services on the Internet. The business organizations may pay a fee to have a script developed by the operator e.g. the assignee of embodiments disclosed herein to perform various transactions with the web servers such as accessing a web page . The agent issues a request e.g. an HTTP GET request for the web page to be served from the web site using the uniform resource locator specified in a page request. Once the operator has created a script and that encapsulated information associated with performance of the transaction with the web server the agent command and control process can propagate and script to the agent computer systems for receipt by the scheduler . The scheduler receives the script and places in any script database that is local to the agent computer system . The scheduler also receives scheduling information from the agent command and control process that indicates how frequently scheduler should activate or execute the script within an agent . In one configuration scheduling information may be embedded within the script .

Upon occurrence of the time to execute the script the scheduler provides the script from the script database to the agent for execution. The agent is able to execute the transaction s defined within the script in conjunction with the web server to perform the scripted transaction on the web site of the business organization. During performance of the transaction the agent is able to collect detailed performance metrics concerning all aspects performance of the transaction with respect each web page involved in the transaction.

The traffic flow tracking process may be embodied as software code such as data and or logic instructions e.g. code stored in the memory or on another computer readable medium such as a removable disk that supports processing functionality according to different embodiments described herein.

It is noted that example configurations disclosed herein include the traffic flow tracking process itself i.e. in the form of un executed or non performing logic instructions and or data . The traffic flow tracking process may be stored as an application on a computer readable medium such as a floppy disk hard disk electronic magnetic optical or other computer readable medium. The traffic flow tracking process may also be stored in a memory system such as in firmware read only memory ROM or as in this example as executable code in for example Random Access Memory RAM . Those skilled in the art will understand that the first router the second router and a collector may include other processes and or software and hardware components such as an operating system not shown in this example.

The memory system is any type of computer readable medium and in this example is encoded with a performance displaying application . The performance displaying application may be embodied as software code such as data and or logic instructions e.g. code stored in the memory or on another computer readable medium such as a removable disk that supports processing functionality according to different embodiments described herein. During operation of the computer system the processor accesses the memory system via the interconnect in order to launch run execute interpret or otherwise perform the logic instructions of the performance displaying application . Execution of performance displaying application in this manner produces processing functionality in a performance displaying process . In other words the performance displaying process represents one or more portions of runtime instances of the performance displaying application or the entire application performing or executing within or upon the processor in the computerized device at runtime.

It is noted that example configurations disclosed herein include the performance displaying application . The performance displaying application may be stored on a computer readable medium such as a floppy disk hard disk electronic magnetic and optical or other computer readable medium. The performance displaying application may also be stored in a memory system such as in firmware read only memory ROM or as in this example as executable code in for example Random Access Memory RAM . In addition to these embodiments it should also be noted that other embodiments herein include the execution of the performance displaying application in the processor as the performance displaying process . Those skilled in the art will understand that the computer system may include other processes and or software and hardware components such as an operating system not shown in this example.

A display need not be coupled directly to computer system . For example the performance displaying application can be executed on a remotely accessible computerized device via the network interface . In this instance the graphical user interface may be displayed locally to a user of the remote computer and execution of the processing herein may be client server based.

Further details of configurations explained herein will now be provided with respect to a flow chart of processing steps that show the high level operations disclosed herein. Unless otherwise stated the steps described below are unordered meaning that when possible the steps can be performed in any convenient or desirable order.

In step the agent obtains a script containing at least one transaction to be performed with the web site. The transaction defines a sequence of page requests identifying at least one web page to obtain from the web site. In an example configuration the agent obtains one or more scripts from the agent command and control process . Each script defines one or more transactions that may be performed with one or more of the web servers operating in the web server computer systems . The agent issues a request e.g. an HTTP GET request for the web page to be served from the web site using the uniform resource locator specified in a page request.

In step the agent executes the script to perform the transaction with the web site. Performance of the transaction includes retrieving the sequence of the web page . In an example configuration the agent executes the transaction s defined within the script in conjunction with the web server to perform the scripted transaction on the web site. During performance of the transaction the agent is able to collect detailed performance metrics concerning all aspects performance of the transaction with respect to each web page involved in the transaction.

In step the agent detects a capture event associated with the web page . In an example configuration the capture event is an error on the web page . As the script executes a plurality of transactions are performed on the web site. For example a transaction could entail performing a purchasing transaction on a retail website using the online shopping cart provided by the web site. As the script executes performing the online purchasing transaction an error message appears in the online shopping cart. The agent detects that this capture event i.e. the error message appearing in the online shopping cart occurred on the web page . The capture event can be content based i.e. detecting content on a return page that is missing or that specifies content indicating an error etc. or can be a protocol error or any other type of error. In some embodiments the capture event can be user defined.

In step the agent in response to the capture event captures content of the web page s of the transaction. Capturing of the web page contents in one embodiment involves accessing a document object model to retrieve the entire page contents both visible if the page were to be displayed on a graphical user interface and behind the scenes data such as cookies page URL JavaScript protocol data and so forth.

In step the agent packages the content of the web page into a container capable of being rendered such that the container provides a plurality of components associated with the captured web page . Packaging the page can include converting references in the page to local copies of objects in the page instead of keeping those references e.g. URLs referencing remote objects. The container is capable of being rendered such that all remotely located components i.e. objects on the web page URLs etc on the web page are now locally stored. Therefore the web page that is contained within the container is capable of being fully rendered without accessing any remotely located components or objects.

In step the agent delivers the container to a repository computer system . In an example configuration the agent packages the content of the web page into a container and delivers the container to a repository computer system .

In step the agent identifies in the script a capture event definition indicating a condition that may exist during retrieval of the web page in the transaction. The capture event includes either or both of a user defined capture event or an error capture event.

In step the agent receives a request to capture the content of the web page upon an occurrence of an error on the web page . The request is provided by a switch in the script executing to monitor the web page . In an example configuration the script is configured to capture the content of the web page upon detection of an error. As the script executes a plurality of transactions are performed on the web site. When an error on the web page occurs the switch in the script triggers the capture of the content of the web page .

In step the agent captures a plurality of components including visible and non visible components associated with the web page . In an example configuration the agent captures the visible components of the web pages such as the text on the web pages and any images URLs etc on the web page . Additionally the agent captures the non visible components on the web pages for example such as the Cascading Style Sheets CSS that are used to format the web page a URL of the page cookies for the page and so forth. The agent can walk the DOM tree for the page to obtain all page data.

In step the agent traverses the web page to identify each of the components within the plurality of components on the web page . In an example configuration the agent crawls the Document Object Model DOM that represents the web page and identifies each of the components i.e. text images URLs CSS cookies etc on the web page .

In step the agent locally stores a copy of each of the components within the plurality of components. In an example configuration the agent crawls the Document Object Model DOM and stores locally a copy of each of the components i.e. text images URLs CSS etc identified on the web page during the traversal of the web page by the agent .

In step the agent traverses the web page to identify each of the components within the components on the web page . In an example configuration the agent crawls the Document Object Model DOM that represents the web page and identifies each of the components i.e. text images URLs CSS etc on the web page .

In step the agent identifies at least one component in the plurality of components as a reference to a remotely located object. In an example configuration the agent traverses the web page to identify each of the components within the plurality of components on the web page and identifies a URL pointing to an image located on a server overseas.

In step the agent stores a copy of the remotely located object locally such that the copy of the remotely located object is a locally stored object. In an example configuration the agent traverses the web page to identify each of the components within the plurality of components on the web page and identifies a URL pointing to an image located on a server overseas. The agent obtains a copy of the image located on the server overseas and stores a copy locally of that image.

In step the agent modifies the reference to the remotely located object to reference the locally stored object. In an example configuration the agent traverses the web page to identify each of the components within the plurality of components on the web page and identifies a URL pointing to an image located on a server overseas. The agent obtains a copy of the image located on the server overseas and stores a copy locally of that image. The agent modifies the source code of the web page i.e. the web pages captured by the agent in response to the capture event such that the URL pointing to the image located on a server overseas now points to the copy of the image that is now stored locally.

Alternatively in step the agent identifies at least one component in the plurality of components as a style. In an example configuration the agent while traversing the web page on which the capture event occurred identifies a reference to a Cascading Style Sheet CSS .

In step the agent identifies that a set of instructions defining the style resides separately from the plurality of components on the web page . In an example configuration the agent while traversing the web page on which the capture event occurred identifies a reference to a Cascading Style Sheet CSS . The agent traverses the web page on which the capture event occurred and identifies the file containing the CSS formatting code. The file containing the CSS formatting code is a separate file from the web page on which the capture event occurred.

In step the agent captures a copy of the set of instructions defining the style. In an example configuration the agent while traversing the web page on which the capture event occurred identifies a reference to a Cascading Style Sheet CSS . The agent traverses the web page on which the capture event occurred and identifies the file containing the CSS formatting code. The file containing the CSS formatting code is a separate file from the web page on which the capture event occurred. The agent saves a copy locally of the file containing the CSS formatting code i.e. the CSS file .

In step the agent traverses the web page to identify each of the components within the plurality of components on the web page . In an example configuration the agent crawls the Document Object Model DOM that represents the web page and identifies each of the components i.e. text images URLs CSS etc on the web page .

In step the agent identifies at least one component in the plurality of components as a data field for receiving input from a user. In an example configuration the agent identifies that the web page contains at least one form field for accepting input from a user . The agent captures the empty form field during the content capture of the web page .

In step the agent identifies the data field contains input. In an example configuration the agent identifies that the web page contains at least one form field for accepting input from a user and identifies that the form field contained user entered input at the time the content of the web page was captured by the agent .

In step the agent captures the data field containing the input. In an example configuration the agent identifies that the web page contains at least one form field for accepting input from a user and identifies that the form field contained user entered input at the time the content of the web page was captured by the agent . The agent then captures the user entered input that existed on the web page at the time the content of the web page was captured by the agent . Thus in an example configuration the agent captures the web page with both empty form fields and form fields containing input provided by a user . When a capture event such as an error occurs it is possible to obtain a copy of the web page depicting the contents of the form fields at the time of error as well as a copy of the web page with blank form fields.

In step the agent packages the content of the web page into a container capable of being rendered such that the container provides a plurality of components associated with the captured web page .

In step the agent archives a plurality of web pages N in the container. In an example configuration the archive includes converting each reference to a remote object within the web page to a reference to a local version of that object. As an example if the web page includes an embedded URL referencing a remote graphic when the page was initially obtained the URL was referenced to also obtain a local copy of this graphic. This local copy of the graphic is saved as part of the web page and the portion of the page containing the URL to that graphic is modified to include a reference to the local graphic instead of the graphic located at the original URL. Thus all references in the web page that is captured are converted to local references.

In step the agent creates a container reference to the container. In an example configuration container is a compressed archive file.

In step the agent transmits notification of the container reference. In an example configuration the agent transmits notification of the container reference to a remote analysis facility that can either pull the container from the agent when the container is complete or that notifies that analysis computer that the agent is about to transmit the container to the analysis computer.

In step the agent queues the container reference for delivery of the container. This allows the analysis computer to obtain a copy of the capture web page for further analysis.

In step the performance displaying process receives a container from an agent . The container contains at least one captured web page associated with a web site. The captured web page a result of at least one transaction executed on the web site by the agent and the captured web page containing a plurality of components.

In step the performance displaying process stores the container. In an example configuration the performance displaying process receives a container containing at least one captured web page associated with a web site from an agent and stores the container.

In step the performance displaying process renders the container to display content of the captured web page . depicts the performance displaying process displaying a screen shot of a captured web page within a web page detail region .

In step the performance displaying process renders the content of the captured web page . The rendering can include one or more of 

In step the performance displaying process renders the screen capture information region to include one of more of 

In step the performance displaying process renders the container to display content of the captured web page . depicts the performance displaying process displaying a screen shot of a captured web page within a web page detail region .

In step the performance displaying process renders at least one web page identifier identifying the captured web page contained within the container. In an example configuration the performance displaying process displays at least one web page identifier in the screen capture identification region . For example each web page requested in the sequence of transactions performed on the web site by the script is identified in the screen capture identification region . In an example configuration each web page identifier is represented by an icon representing a respective web page requested by the transactions in the script .

In step the performance displaying process renders the web page identifier to identify one or more of 

In step the performance displaying process renders the web page detail region to include one of more of 

In step the performance displaying process renders the screen shot of the least one captured web page displayed at the time an error occurred the error associated with a script invoking the transaction. In an example configuration during execution of the script an error occurs on a web page . The agent captures the content of the web page at the time at which the capture event i.e. the error occurred and packages the content of the web page into a container that is received by the performance displaying process . The performance displaying process displays the screen shot of the captured web page displayed in the web page detail region . The captured web page is rendered to display the web page at the time an error occurred.

While the system and method have been particularly shown and described with references to configurations thereof it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of embodiments disclosed herein encompassed by the appended claims. Accordingly the present embodiments disclosed herein are not intended to be limited by the example configurations provided above.

