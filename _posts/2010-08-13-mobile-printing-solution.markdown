---

title: Mobile Printing solution
abstract: A computer-implemented method and system for printing electronic documents. The method includes receiving a printing request from an application executed on the mobile device, via a socket connection conforming to a standard network communications protocol, the printing request generated from a print preview by the application. The method includes retrieving application data from the printing request. The method includes populating a print template with the retrieved application data, the print template including application data placeholders and print commands, the print commands being in a language of a printer device connected to the mobile device, wherein the retrieved application data replaces the application data placeholders. The method includes forwarding the populated print template to the printer device, the print commands instructing the printer device to print a document where the application data is presented according to the print template.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08488164&OS=08488164&RS=08488164
owner: SAP AG
number: 08488164
owner_city: Walldorf
owner_country: DE
publication_date: 20100813
---
Printer devices are implemented to work with one or more printing languages. The printing languages specify the format and structure of the commands to send for instructing the printer devices to print the electronic documents in a particular way to achieve a particular informative and or aesthetic result. Applications running on a mobile computer device can communicate with printer devices directly requiring that the applications are configured to communicate with each of the different printer devices in their respective printing languages. Printing languages are not standardized and it may become costly for an application to support all commands features and functions of each and every printing language. A solution may be to configure an application to support only the most commonly used features. Such a solution may reduce the number of printing features available to the application or otherwise reduce the printer device s printing capabilities. Another solution is to provide one or more printer drivers that communicate with the applications. However because the printer drivers produce output in graphical e.g. pixel mode such a solution is printed very slowly and may reduce mobile printer utilization.

In a first aspect computer implemented method for printing an electronic document on a printing device from a mobile device includes receiving a printing request from an application executed on the mobile device via a socket connection conforming to a standard network communications protocol the printing request generated from a print preview by the application. The method includes retrieving application data from the printing request. The method includes populating a print template with the retrieved application data the print template including application data placeholders and print commands the print commands being in a language of a printer device connected to the mobile device wherein the retrieved application data replaces the application data placeholders. The method includes forwarding the populated print template to the printer device the print commands instructing the printer device to print a document where the application data is presented according to the print template.

Implementations can include any all or none of the following features. The print preview can include at least one of an HTML preview an XHTML preview or a plain text preview. The method can further include accessing a print configuration file and the application data is retrieved based on at least one rule in the print configuration file. The rule can specify a tag including at least one character and a number of characters to be retrieved from the printing request the tag indicating the beginning of the number of characters to be retrieved when the tag is present in the printing request. The method can further include identifying the tag in the printing request and retrieving the number of characters from the printing request. The rule can specify an absolute position within the printing request and a number of characters to be retrieved from the printing request. The method can further include accessing the printing request at the absolute position and retrieving the number of characters from the printing request. The method can further include determining that a first character string specified in at least one rule is present in the printing request and replacing the first character string with an alternative character string specified by the rule. The method can further include modifying at least one script used by the application to communicate with the printer device to generate the printing request the script including print commands in a language of the printer device connected to the mobile device and modifying the script can include replacing the print commands with at least one of HTML commands or XHTML commands. The method can further include receiving at least one printer message from the printing device and performing at least i an update of internal statistics tables or ii transmission of a status message to the application the update or the transmission corresponding to the printer message.

In a second aspect a computer program product tangibly embodied in an information carrier and includes instructions that when executed by a processor perform a method for printing an electronic document on a printing device from a mobile device. The method includes receiving a printing request from an application executed on the mobile device via a socket connection conforming to a standard network communications protocol the printing request generated from a print preview by the application. The method includes retrieving application data from the printing request. The method includes populating a print template with the retrieved application data the print template including application data placeholders and print commands the print commands being in a language of a printer device connected to the mobile device wherein the retrieved application data replaces the application data placeholders. The method includes forwarding the populated print template to the printer device the print commands instructing the printer device to print a document where the application data is presented according to the print template.

In a third aspect a system includes a mobile computer device including a mobile peripherals management module and at least one application the application being configured to initiate a printing request via a socket connection conforming to a standard network communications protocol and corresponding to a print preview and the mobile peripherals management module being configured to receive the printing request retrieve application data from the printing request and populate a print template with the retrieved application data. The system includes a printer device connected to the mobile computer device and configured to print a document where the application data is presented according to the print template forwarded to the mobile printer device by the mobile peripherals management module. The print template includes application data placeholders and print commands the print commands being in a language of the printer device connected to the mobile device wherein the retrieved application data replaces the application data placeholders and the application and the mobile peripherals manager are implemented in a computer program product and are stored on a computer readable medium connected to the mobile computer device.

Implementations can include any all or none of the following features. The print preview can include at least one of an HTML preview an XHTML preview or a plain text preview. The mobile peripherals management module can access a print configuration file stored on the computer readable medium and the application data can be retrieved based on at least one rule in the print configuration file. The rule can specify a tag comprising at least one character and a number of characters to be retrieved from the printing request and the tag can indicate the beginning of the number of characters to be retrieved when the tag is present in the printing request. The mobile peripherals management module can identify the tag in the printing request and retrieve the number of characters from the printing request. The rule can specify an absolute position within the printing request and a number of characters to be retrieved from the printing request. The mobile peripherals management module can access the printing request at the absolute position and retrieve the number of characters from the printing request. The peripherals management module can determine that a first character string in at least one rule is present in the printing request and replace the first character string with an alternative character string specified by the rule. The mobile peripherals management module can receive at least one printer message from the printing device and perform at least i an update of internal statistics tables or ii transmission of a status message to the application the update or the transmission corresponding to the printer message.

Implementations can provide any all or none of the following advantages providing improved utilization of a printer device s capabilities providing a reduction in time to market for application vendors and providing a reduction in development and maintenance costs for application and enterprise system vendors.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings and from the claims.

The system includes one or more mobile computer devices a network and any number of printer devices . The mobile computer device includes one or more applications that can be executed on the mobile computer device . The mobile computer device also includes a peripherals management module .

The applications can be implemented in any of various computer program languages and stored as a computer program on computer readable medium connected to the mobile computer device. For example applications can be implemented using Microsoft .NET developed by Microsoft Corp. C language Java developed by Sun Microsystems or other programming languages. In some implementations any of the applications can be a web browser application. In such implementations the application logic can reside on the mobile computer device or a remote web server to name two examples. The applications can be used to automate one or more business workflows. For example applications can include an invoice application a sales quote application an order processing application an inventory management application other applications or combinations thereof e.g. an order processing and invoicing application .

In general a user can interact with any of the applications by providing the applications with user input. For example user input can be provided by a stylus or a touchscreen to select data fields in the application. As another example user input can be provided by a keyboard or touchscreen to input values into the selected fields. Other user input can also be provided to the any of the applications 

The peripherals management module can facilitate communication between the mobile device and any of the printers . For example the peripherals management module receives printing information from any of the applications and forwards printing instructions to any of the printer devices . In some implementations the peripherals management module forwards the information to a printer according to user selection. For example the user of an application can select any of printer devices to print from by selecting one of the printer devices in a user interface of the applications 

In some implementations the selection of the printer can be performed automatically or semi automatically. For example if only one of the printer devices is connected to the mobile computer device the connected printer device can be automatically selected by the peripherals management module . In some implementations the selection can be performed according to the properties associated with the content to be printed or other properties. For example if a document to be printed includes one or more colors the printer devices that include color printing capabilities can be prioritized in a user interface of the applications . As another example the selection of the printer device can be performed based on the proximity of the printer device to the mobile computer device whereby the nearest printer device is automatically selected. Additional examples of the peripherals management module are described below.

In some implementations the network is implemented using wireless connections such as a Bluetooth connection or a wireless Ethernet connection between the mobile computing device and any of the printer devices . The network can include any network that facilitates communications between the mobile computer device and any of the printer devices . Examples include but are not limited to local area networks LANs and wide area networks WANs such as intranets and the Internet respectively. In some implementations the network is implemented using wired connections such a universal serial bus USB connection a serial connect e.g. a RS 232 connection or a wired Ethernet connection between the mobile computer device and any of the printer devices 

The printer devices can be any type of printer device for example a commercially available printer. The printer devices receive information provided by the mobile computer device e.g. sent from the peripherals management module and print out a corresponding representation based on the information. For example any of the printer devices receives information corresponding to an invoice document that the user of the mobile computer device generates using one of the applications and prints a representation of the invoice document. In some implementations at least one printer device is a mobile printer device. For example any of printer devices can be mounted on a vehicle or worn by the user of the computer device . Other mobile implementations are also possible.

In some implementations one or more of the printer devices has its own printing language. As such the peripherals management module can bridge any differences in compatibility between the printer devices from the applications . That is the applications do not need to be configured to directly communicate with any of the printer devices and therefore do not need to be configured according to their respective printing languages. Instead the applications can be configured to communicate with the peripherals management module in a generic fashion and the peripherals management module can facilitate communications with the printer devices . For example if the applications were originally configured to generate printed documents using one or more scripts the scripts can be modified for the application to communicate with the peripherals management module . Moreover because the peripherals management module is configured to communicate with each of the printing devices in their respective printing languages the peripherals management module can better leverage the capabilities of each printer device 

The applications can communicate with the mobile peripherals management module using socket based communication utilizing at least one socket . For example the peripherals management module can listen e.g. be creating a socket listener object to the socket for any data being provided thereby. The socket can be implemented for example as any of a datagram socket e.g. using the user datagram protocol UDP a stream socket e.g. using the transmission control protocol TCP a raw socket or any other standard network communications protocol e.g. XML RPC .

In general the socket based communication corresponds to a print preview generated by the applications . That is in some implementations the socket based communication initiated by the applications that includes a printing request in a socket stream that corresponds to a print preview . For example any of the applications can generate a print preview screen to illustrate the contents and or layout of the document initiate a socket connection using socket and provide a printing requesting in a socket stream that corresponds to the generated print preview. The code used to generate the preview can then be used as a print instruction to the peripherals management module .

In some implementations the applications are developed and coded to have the functionality of generating the print preview . In other implementations the applications are formed by modifying one or more existing applications. For example if such existing applications generate a printed document using one or more scripts e.g. in a scripting language the scripts can be modified to remove any particular printer specific commands e.g. codes in a particular printing language and replaced with generic commands. In some implementations the commands may include HTML commands XHMTL commands or other commands. In such implementations the HTML commands or XHTML commands are generally referred to as HTML tags and XHTML tags respectively and can be used as commands because the tags may indicate to the peripherals management module that a certain printing behavior is requested e.g. a change in font style including a particular graphic or other printing behavior . In some implementations the mobile peripherals management module may enrich the contents of the received print preview using some combination of the print template and the print configuration file which are described in more detail below.

In addition the print preview need not be a preview in a traditional sense e.g. presented on the display device of the mobile computing device prior to printing . That is in some implementations the print preview is not previewed or otherwise presented to a user before being provided to the peripherals management module . As such when a user selects a document for printing the applications may automatically generate and provide the print preview to the peripherals management module without further user input.

In some implementations the peripherals management module may listen to the socket using a hypertext transfer protocol HTTP daemon. That is in some implementations the socket communication is performed using an HTTP socket. For example an invoice application can send a print request to the peripherals management module using an HTTP command similar to 

The peripherals management module receives the printing request e.g. the POST request via a socket based communication corresponding to the print preview and can populate one or more print templates according to the print preview . In general each of the print templates specifies how a specific document should be printed. For example each of the print templates can include printer codes in a particular printing language and data placeholders corresponding to data that should be printed. That is the print codes provide instructions to the printer devices specifying how to present the data from the socket based communication in a specific layout according to the particular printing language.

The data placeholders in the print templates represent document specific variable data. For example in an invoice the data placeholders can represent data which are usually different for each invoice unlike e.g. company address or other data that is the same for every invoice . That is when the print template is configured for an invoice the data placeholders can correspond to invoice specific information such as customer name shipping address and the purchased item s to name a few examples.

In some implementations the print templates also include predefined information portions to be included in the document. For example print templates can include a corporate logo corporate information signature blocks or other predefined information portions that should appear on each document printed using that template. In some implementations the printer templates are generated using an application that graphically represents the placement of data elements within the document and generates the appropriate printer codes data placeholders and predefined information portions.

In some implementations the peripherals management module uses rules located in at least one print configuration file to retrieve data from the print preview and associate the data with particular data placeholders. For example the rules can specify start and stop delimiters of data in the print preview absolute positions of data in the print preview and other techniques for retrieving data from the print preview based on the data content of the socket based communication. Examples of the rules are described below.

Furthermore in some implementations the peripherals management module can receive one or more printer messages from any of the printer devices . In response the peripherals management module can log any of the printer messages in one or more status logs. For example the peripherals management module can update one or more internal statistic tables that can be used to log the number of printing request e.g. per day per week per month and the like the number of successfully completed print jobs the number of failed print jobs and received printing error codes to name a few examples. In addition the peripherals management module can forward one or more status updates corresponding to any of the printer message to any of the applications . In such implementations the applications can generate a user interface that presents a user message corresponding to the contents of any of the status updates . For example any of the applications can present the user with a message if any of the printer devices fail to print a requested document successfully print the requested document experience a paper jam have a low battery level or for other reasons.

The data storage can be any type of computer readable storage including but not limited to a hard drive memory e.g. read only memory ROM random access memory RAM or other memory or any other computer readable storage. In some implementations the data storage can be used to store any number of print templates and print configuration files .

The interface can be implemented in software e.g. a communication protocol hardware e.g. an Ethernet card or combinations of these. The interface allows the mobile computer device to communicate with other devices such as any of the printer devices . That is in some implementations the interface can send one or more populated print templates generated by the peripherals management module to the printer devices and receive one or more printer messages from the printer devices 

In some implementations the peripherals management module can reference an absolute position e.g. memory address in the printing request to retrieve a number of characters from the printing request. In some implementations the collection of rules can also include rules for modifying data retrieved from the printing request e.g. the printing request . For example rule specifies a substitution rule which can be used by the peripherals management module to modify one or more values in the populated print template or the printing request.

The rule includes a rule instruction a first rule parameter and a second rule parameter . In the example rule the rule instruction is a sub instruction. The sub rule instruction can instruct the peripherals management module to apply a substitution operation to the printing request or the populated printer template according to the first rule parameter and the second rule parameter . For example the peripherals management module can identify the first rule parameter e.g. character string Quantity in either the printing request or the populated print template and replace it with the second rule parameter e.g. character string Qty . That is the peripherals management module can apply rule to replace a first character string e.g. represented by the first rule parameter with an alternative character string e.g. represented by the second rule parameter using any number of conventional character matching and replacement techniques including regular expression matching to name one example

The rule includes a rule instruction a first rule parameter a second rule parameter and a third rule parameter . In the example rule the rule instruction is a tag instruction. The tag rule instruction can instruct the peripherals management module to identify a tag specified by the rule in the printing request and retrieve a number of characters from the printing request according to rule parameters and insert the retrieved characters into the print template according to rule parameter

For example the peripherals management module can identify the first rule parameter e.g. character string in the printing request. In some implementations the first rule parameter is identified using a parsing technique. Then the peripherals management module can retrieve 3 characters from the printing request as specified by the third rule parameter . For example the peripherals management module can access the printing request at a location in memory corresponding to the location of the identified first rule parameter and retrieve 3 characters from that position in the printing request.

If for example the first rule parameter represents a start delimiter the peripherals management module can retrieve the 3 characters after the identified first rule parameter in the printing request. Conversely for example if the first rule parameter represents a stop delimiter the peripherals management module can retrieve the 3 characters before the identified first rule parameter in the printing request. Then the peripherals management module can replace portions of the print template as specified by the second rule parameter with the retrieved characters. For example the peripherals management module can use a parsing technique to identify an application data placeholder payment type in the print template and replace the application data placeholder with the 3 retrieved characters from the printing request.

In some implementations as is illustrated by a comparison between rules and the second rule parameter specifies an absolute position in the print template instead of an application data placeholder e.g. as specified by the second rule parameter . In addition in some implementations the third rule parameter can be an optional parameter. If for example the peripherals management module processes rule the number of characters retrieved can be determined according to the location of the delimiters and and or whitespace characters in the printing request. Furthermore the number of characters retrieved can be inserted in the print template at a location specified by the second rule parameter . That is if for example there are 2 characters between the first delimiter and the second delimiter or a whitespace character e.g. a space in the printing request the peripherals management module can retrieve those 2 characters and insert them in the print template at absolute position as specified by second rule parameter

Accordingly any of the rules can be used to retrieve data from the printing request. For example rule can instruct the peripherals management module to access an absolute position in the printing request e.g. the position in memory specified by the first rule parameter and retrieve 10 characters of data according to the third rule parameter and insert the retrieved characters at absolute position in the print template as specified by the second rule parameter

In some implementations the peripherals management module can apply the rules a different number of times depending on the rule applied. For example in some implementations rule can be applied any number of times the peripherals management module encounters the character string Quantity. . As another example in some implementations the peripherals management module can apply each of the rules a pre determined number of times e.g. once according to their respective ordering in the collection of rules . Also in some implementations the collection of rules can include rules conforming to regular expressions. For example a rule that replaces capital letters with corresponding lower case letters in the printing request can be defined using a rule instruction of sub a first rule parameter of A Z and a second rule parameter of a z . 

In step a printing request is received from an application executed on a mobile device via a socket connection conforming to a standard network communications protocol the printing request corresponding to a print preview by the application. For example the peripherals management module can receive a print preview corresponding to the print preview from one of the applications using socket .

In step application data from the printing request is retrieved the printing request. For example peripherals management module can retrieve data from the print preview using one or more rules . In some implementations the peripherals management module may ignore print or display instructions included therein. That is the rules can include one or more rules that retrieve data from the print preview while not including rules that cause the peripherals management module to retrieve print or display instructions from the print preview . In some implementations the peripherals management module can apply delimiter rules e.g. delimiter rule absolute position rules e.g. rule and substitution rules e.g. rule to the print preview to name a few examples.

In step a print template is populated with the retrieved application data the print template including application data placeholders and print commands the print commands being in a language of a printer device connected to the mobile device wherein the retrieved application data replaces the application data placeholders. For example the peripherals management module can populate one of the print templates that includes print commands for one of the printer devices . In addition the peripherals management module can use one or more rules to associate the retrieved data with corresponding data placeholders in the print template .

In some implementations the rules in the printing configuration file can define how application data is associated with the application data placeholders in the printing template. For example the association can be defined by absolute positions. One example of such an associated is illustrated by rule whereby 10 characters e.g. as specified by the third rule parameter are inserted from the position of the printing request e.g. as specified by the first rule parameter into the print template starting from the position in the print template e.g. as specified by the second rule parameter . As another example the association can be performed using a search and replace operation. One example of such an associated is illustrated by rule whereby the application data placeholder payment type e.g. as specified by the second rule parameter in the print template is replaced with 3 characters e.g. as specified by the third rule parameter from the printing request which immediately follows the delimiter e.g. as specified by the first rule parameter in the printing request. Another example of such an associated is where the application data placeholder QUANTITY in the printing template can be replaced with a number of characters from the printing request which immediately follow the string quantity Quantity or QUANTITY in the printing request.

In step the populated print template is forwarded to the printer device the print commands instructing the printer device to print a document where the application data is presented according to the print template. For example the peripherals management module can forward the populated print template to any of the printer devices using interface .

Computing device includes a processor memory a storage device a high speed interface connecting to memory and high speed expansion ports and a low speed interface connecting to low speed bus and storage device . Each of the components and are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as display coupled to high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In one implementation the memory is a computer readable medium. In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units.

The storage device is capable of providing mass storage for the computing device . In one implementation the storage device is a computer readable medium. In various different implementations the storage device may be a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory the storage device or memory on processor .

The high speed controller manages bandwidth intensive operations for the computing device while the low speed controller manages lower bandwidth intensive operations. Such allocation of duties is exemplary only. In one implementation the high speed controller is coupled to memory display e.g. through a graphics processor or accelerator and to high speed expansion ports which may accept various expansion cards not shown . In the implementation low speed controller is coupled to storage device and low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition it may be implemented in a personal computer such as a laptop computer . Alternatively components from computing device may be combined with other components in a mobile device not shown such as device . Each of such devices may contain one or more of computing device and an entire system may be made up of multiple computing devices communicating with each other.

Computing device includes a processor memory an input output device such as a display a communication interface and a transceiver among other components. The device may also be provided with a storage device such as a microdrive or other device to provide additional storage. Each of the components and are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can process instructions for execution within the computing device including instructions stored in the memory . The processor may also include separate analog and digital processors. The processor may provide for example for coordination of the other components of the device such as control of user interfaces applications run by device and wireless communication by device .

Processor may communicate with a user through control interface and display interface coupled to a display . The display may be for example a TFT LCD display or an OLED display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may be provide in communication with processor so as to enable near area communication of device with other devices. External interface may provide for example for wired communication e.g. via a docking procedure or for wireless communication e.g. via Bluetooth or other such technologies .

The memory stores information within the computing device . In one implementation the memory is a computer readable medium. In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units. Expansion memory may also be provided and connected to device through expansion interface which may include for example a SIMM card interface. Such expansion memory may provide extra storage space for device or may also store applications or other information for device . Specifically expansion memory may include instructions to carry out or supplement the processes described above and may include secure information also. Thus for example expansion memory may be provide as a security module for device and may be programmed with instructions that permit secure use of device . In addition secure applications may be provided via the SIMM cards along with additional information such as placing identifying information on the SIMM card in a non hackable manner.

The memory may include for example flash memory and or MRAM memory as discussed below. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory expansion memory or memory on processor .

Device may communicate wirelessly through communication interface which may include digital signal processing circuitry where necessary. Communication interface may provide for communications under various modes or protocols such as GSM voice calls SMS EMS or MMS messaging CDMA TDMA PDC WCDMA CDMA2000 or GPRS among others. Such communication may occur for example through radio frequency transceiver . In addition short range communication may occur such as using a Bluetooth WiFi or other such transceiver not shown . In addition GPS receiver module may provide additional wireless data to device which may be used as appropriate by applications running on device .

Device may also communication audibly using audio codec which may receive spoken information from a user and convert it to usable digital information. Audio codex may likewise generate audible sound for a user such as through a speaker e.g. in a handset of device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on device .

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a cellular telephone . It may also be implemented as part of a smartphone personal digital assistant or other similar mobile device.

Various implementations of the systems and techniques described here can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium computer readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

A number of embodiments of the invention have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the invention. For example various forms of the flows shown above may be used with steps re ordered added or removed. Also although several applications of the payment systems and methods have been described it should be recognized that numerous other applications are contemplated. Accordingly other embodiments are within the scope of the following claims.

