---

title: Method and system for providing applications to various devices
abstract: A method for providing applications to one or more requesting devices is provided. The method comprises a step of first receiving an application request from the one or more requesting devices. The method includes extracting details of the request. Further markup language structure for corresponding page of the application is generated. The markup language structure is generated based by invoking page handlers which includes contacting business logic layer to get information required to be embedded in the corresponding page. The output page is then provided to the requesting device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09286045&OS=09286045&RS=09286045
owner: Infosys Limited
number: 09286045
owner_city: 
owner_country: IN
publication_date: 20100614
---
This application is a continuation in part of U.S. application Ser. No. 12 542 990 filed on Aug. 18 2009 the disclosure of which is incorporated herein by reference.

The present invention relates to the field of providing applications to various devices. More particularly the present invention provides transformation of applications based on type of device requesting an application.

With the advent of technology information is now readily accessible via various resources. A significant resource that is widely used for accessing information is the Internet. The Internet was earlier accessed only using a personal computer with a good processing speed and a relatively large display size. Over the past few years technologists and business organizations have realized the need for people to stay connected with the rest of the world through various portable devices that are available with them. One of the methods for ensuring real time information access using portable devices is providing for internet access through mobile phones.

Communication Service Providers CSPs are transforming their network and service infrastructure to provide quadruple play voice video data and mobile services to subscribers of mobile services. To monetize on their investments in infrastructure CSPs today need applications to retain their subscriber base and also to attract new subscribers. Over the years applications that have transformed people s lives started out as web based applications. For example web based applications such as e commerce applications applications for hosting auctions video sharing applications and social networking applications have their roots in the Internet. Developing and deploying new applications for computers is relatively easier compared to doing the same for mobile and or television networks. The main reason is that access to Mobile and Television networks is very tightly controlled by the service provider and the technology to deliver a similar experience is not yet matured.

When an application becomes successful on the web the CSPs who own the mobile and television networks as part of their quadruple play would like to provide a similar application on their mobile and television networks as well but with few targeted features. In addition to replicating the web applications CSPs would also like to provide newer categories of applications specific to TV and Mobile. For example RSS feeds of important news from various websites storefront to purchase video social networking etc. By doing this telecom operators would be able to exploit the convergence in access technology by giving their subscribers option to access various applications from computer while at office mobile phones during transit and TV while at home and also provide differentiated user experience for each type of application.

In some scenarios an application may be requested by disparate devices having different operating platforms and user interfaces. Depending on the type of device requesting the application the application may be customized for specific platforms such as mobile and television platforms. This approach is likely to have good quality because applications are developed from scratch keeping the requirements and constraints of the platforms on which they would be deployed in mind. However such an approach is quite expensive in terms of skilled resources which are required and in terms of time it would take to reach the market.

Consequently there is a need for a method and a system that provides similar applications to various devices with minimal human intervention. Further there is a need to reduce the cost and delay in providing applications to users of devices.

The system for providing applications to one or more requesting devices includes a development framework an execution framework an application adaptor and a media transformation engine. The development framework is configured to facilitate generation of software code for rendering the application on the one or more requesting devices. The execution framework is configured to transform navigational and user interface related aspects of the requested application and the application adaptor is configured to generate a Markup Language structure for a page corresponding to the application. The media transformation engine in the system is configured to provide media content requested by the application to the one or more requesting devices. The execution framework is further configured to provide one or more output pages corresponding to the application to the one or more requesting devices. In an embodiment of the present invention the markup language used for generating the page corresponding to the application is Extensible Markup Language XML . In an embodiment of the present invention the system is deployed on a server as part of the requested application. In another embodiment of the present invention the system is deployed on a server and located external to the requested application.

In an embodiment of the preset invention the development framework is configured to facilitate generation of markup language code for rendering the application on various kinds of devices such as televisions mobile devices personal computers. The markup language code corresponding to a device comprises user interface layout data for rendering the application on to the device.

In an embodiment of the present invention the development framework includes an Application Programming Interface API for a developer to generate the software code for rendering the application on the various requesting devices.

In various embodiments of the present invention the application requested by a device is at least one of a web based application a television based application a mobile application and a gaming application.

In an embodiment of the present invention the requesting device may request the application through a data network. The data network may be at least one of the Internet an Intranet and a network of two or more electronic devices.

In an embodiment of the present invention the execution framework includes a controller configured to extract details of the application request and a request handler configured to identify the applications Adapter Class to be invoked and further configured to instantiate the Class. The execution framework further includes a device capabilities module configured to get information about capabilities of the requesting device and a device adapter configured to adapt the application to the requesting device. In an embodiment of the present invention the capabilities comprises at least one of screen size of the requesting device type of audio and video formats used multimedia container formats and screen display resolution. The execution framework further includes a data transformer configured to generate output page corresponding to the application in at least one of an HTML and an XHTML format. The output page is generated based on the XML page generated by the application adaptor. For providing the output page to the requesting device the system includes a response handler. The response handler is further configured to receive XML structure of the output page in string format along with information required to transform user interface from the controller and further configured to pass the received information to the data transformer.

In an embodiment of the present invention the media content requested by the application includes at least one of images video and audio.

In various embodiments of the present invention the media transformation engine includes a media controller configured to deliver request for media content to a media handler and the media handler is configured to check whether a transformed version of requested content is available in a media cache. The media transformation engine further includes a media transcoder configured to transform content from a shared storage in order to conform the content in accordance with requirements of the requesting device.

In an embodiment of the present invention the media transformation engine further includes a customer profile module configured to track access information and receive user preferences and usage information based on one or more requests received. The media transformation engine further includes a real time analysis module configured to receive the user preferences and usage information from the user profile module and further configured to construct content data most likely to be requested based on usage information. The engine also includes a content provider configured to store content data in accordance with one or more device specific formats.

In various embodiments of the present invention the system for providing applications to one or more requesting devices further includes a media cache configured to store frequently requested content transformed in accordance with requirements of standard devices and a shared storage configured to store standard untransformed content wherein the media transcoder utilizes data from shared storage in order to conform the content in accordance with requirements of the requesting device.

In an embodiment of the present invention the system for providing an application to one or more requesting devices comprises a software platform configured to provide an application specific to the device requesting the application. Further the system comprises an applications module configured to store one or more software applications and an adaptive application and feature configuration system configured to provide features contextually relevant to the requesting device and user profile of subscriber requesting the application. In an exemplary embodiment of the present invention the one or more software applications comprises at least one of a banking application a gaming application and an e commerce application.

In various embodiments of the present invention the system further comprises an application programming interface configured to define a set of configuration files. In an embodiment of the present invention the set of configuration files comprises one or more configuration files for storing Adapter classes of one or more software applications storing response entries for pagination details and invoking page handlers for generating XML structure of corresponding page of the requested application. In an embodiment of the present invention the one or more configuration files comprises the files application.properties context.xml RequestConfig.xml and ResponseConfig.xml files.

In an embodiment of the present invention the application.properties file is configured to store the requested applications Adapter class. In another embodiment of the present invention the context.xml file is configured to store application specific data source information. The RequestConfig.xml file may be configured to define each page entry corresponding to a requested application along with parameters to be passed along with page request to the applications Adapter class. The ResponseConfig.xml file is configured to store response entries for pagination details corresponding to the requested application.

In an embodiment of the present invention the software platform comprises a media transformation engine configured to provide media content requested by the application. The media transformation engine comprises a media request servlet configured to receive media request and process media request parameters. Further the media transformation engine comprises a media handler configured to receive details of media request from the media request servlet. Moreover the media transformation engine comprises a device capability handler configured to receive media request from the media handler and a device capability database configured to store one or more device types and data of media supported by the one or more device types.

In an embodiment of the present invention the requesting device is at least one of a mobile device a set top box a personal digital assistant Internet Protocol Television IPTV OpenCable Application Platform OCAP based cable television Enhanced TV Binary Interchange Format EBIF based cable television Digital Television DTV and any computing device.

In various embodiments of the present invention the development framework for generating software code for rendering the application on various requesting devices includes a user interface transformer configured to store markup language templates defining user interface layout data for rendering data on to the one or more requesting devices and a rules engine configured to facilitate the creation of markup language templates for the one or more requesting devices.

In an embodiment of the present invention the markup language templates are created by a developer using an application programming interface. In an example the markup language is an Extensible Markup Language XML .

The method for providing applications to one or more requesting devices includes a first step of receiving an application request from the one or more requesting devices.

In an embodiment of the present invention details of the requesting device are extracted from the request. The method further includes a step of generating Extensible Markup Language structure for corresponding page of the application. In an embodiment the output page is in at least one of a Hypertext Markup Language format and an Extensible Hypertext Markup Language format. The output page is then provided to the requesting device.

In an embodiment of the present invention the step of generating Extensible Markup Language structure for corresponding page includes obtaining information about capabilities of the requesting device from a database. The capabilities include screen size of the requesting device. Further the applications Adaptor Class to be invoked is identified and the Class is instantiated. Thereafter page handlers are invoked to generate Extensible Markup Language structure for the corresponding page. In an embodiment invoking page handlers comprises contacting business logic layer to get information required to be embedded in the corresponding page.

In an embodiment of the present invention generating an output page corresponding to the application comprises using raw XML string along with details required to transform user interface to generate the page in at least one of an HTML and XHTML format wherein the details include style sheets and transformation logic.

In an embodiment of the present invention providing media content to the requesting device comprises the steps of sending a request for media content to a media controller obtaining information about capabilities of the requesting device checking whether media content in desired format is available in media cache based on capabilities of the requesting device extracting Uniform Resource Identifier URI corresponding to the media content if the media content is available in the media cache and providing the URI to the requesting device.

In an embodiment of the present invention if the media content is not available in desired format in media cache media content is first fetched from shared storage database. Thereafter media content is transcoded in a format supported by the requesting device and the media content is stored in the media cache. Thereafter URI corresponding to the transcoded media content is provided to the requesting device.

The disclosure is provided in order to enable a person having ordinary skill in the art to practice the invention. Exemplary embodiments herein are provided only for illustrative purposes and various modifications will be readily apparent to persons skilled in the art. The general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the invention. The terminology and phraseology used herein is for the purpose of describing exemplary embodiments and should not be considered limiting. Thus the present invention is to be accorded the widest scope encompassing numerous alternatives modifications and equivalents consistent with the principles and features disclosed herein. For purpose of clarity details relating to technical material that is known in the technical fields related to the invention have been briefly described or omitted so as not to unnecessarily obscure the present invention.

The present invention would now be discussed in context of embodiments as illustrated in the accompanying drawings.

An example of the web based application may include but is not limited to a banking service a movie rental service a news update service a social networking application etc. In various embodiments of the present invention when the second device sends a request for the same application to the data network as requested by the first device the data network refrains from sending exact interface or data to the device as it won t be rendered. Suitable changes are made to the navigational aspects user interface and content of the application in order to render it on to the second device . Similarly in various embodiments of the present invention when a request is made by different devices for a television based application suitable changes may be required to be made for rendering the application on different devices. A method and system for applying changes or transformations to applications for providing them to different devices is explained in conjunction with the description of subsequent figures.

The host of applications include applications Ai to Bi developed for access from any computing or data processing device. In an embodiment of the present invention the application is a web based application. In an embodiment of the present invention a request for accessing a first application Ai may be sent from a device such as a mobile phone to the data network . The transformation engine transforms the first application to fit the requirements of the mobile phone. The transformed application is denoted as Am. In another embodiment of the present invention if a request for accessing a second application Bi is sent from a device say a television to the data network the transformation engine transforms the second application into a transformed application denoted as At. In various embodiments of the present invention the transformation performed by the transformation engine may not be 100 accurate and would require some fine tuning with manual intervention to suit specific requirements of a user of the device that sent the request. In an embodiment of the present invention the transformed applications Am and At are further transformed with manual intervention into Am and At . In various embodiments of the present invention Ai is an application developed for the Internet. Am and At are the raw transformed applications for mobile and television respectively. Am and At are the enhanced transformed applications for mobile and television respectively.

In various embodiments of the present invention the software platform provides contextually relevant user experience based on the device requesting the application and the user profile of the subscriber. It interacts with the adaptive application and feature configuration system to provide features contextually relevant to the requesting device and the subscriber requesting the application. Additionally an administrator uses the adaptive application and feature configuration system to configure which applications to show on which devices. An example of providing contextually relevant features includes adapting a particular feature only for a particular device such as in case of a banking application the bill pay feature may be activated only for users of Mobile phones and not for Set Top Box STB users. Another example of providing contextually relevant features includes activating certain social networking features such as poking only for premium customers using PCs. An example of providing contextually relevant features based on user profile of a subscriber includes providing a customized interface for a sports or a food enthusiast.

The user interface is used by an administrator to upload configuration information related to an application. In various embodiments of the present invention the configuration information is received by the administrator from the applications module . The configuration information comprises features of an application compatible with the type of requesting device and information regarding what features should be shown on what device and what screen. For example configuration information for a video store application includes unique information for displaying the application using a mobile browser an IPTV browser and the like. In an embodiment of the present invention an application sends configuration information in an Extensible Markup Language XML file to the administrator. In another embodiment of the present invention the application owner can send an Excel sheet to the administrator who can manually enter information pertaining to each feature of the application using the user interface . In various embodiments of the present invention the user interface can be used to manage the configuration information such as import and export information add view delete modify configuration and trigger fetch subscriber usage information. The feature information is then saved in the database using the business logic layer . The business logic layer contains logic to save and retrieve configuration information to and from the database. The customer profile component module is configured to populate the database with static information pertaining to subscriber profile such as subscriptions and dynamic information as provided by the software platform . The static information and dynamic information is then utilized to provide contextually relevant features to the requesting device. In an example static information includes request URL s from a browser channel viewing history SMS requests etc. The dynamic information includes information relevant to a request sent by a subscriber that is used for determining the features for rendering the application on a particular device and screen. In an embodiment of the present invention the request sent by a subscriber is received by the customer profile component module and is then stored in the database .

The ranking engine is a software module configured to provide a means for analyzing requests from a subscriber and determining the personalization level of the user interface for a subscriber. In an embodiment of the present invention the ranking engine analyzes static information pertaining to each request stored in the database . The ranking engine analyzes the request and fetches the request into different interest areas and assigns interest level of subscribers to each area wherein the interest level is defined as a rank. Based upon the ranking personalization level used when defining user interface for a subscriber is determined.

In an embodiment of the present invention personalization level used for defining user interface for a subscriber is determined as follows In an example Rank 2 corresponding to a topic such as Sports may imply that the subscriber is interested in the topic and can be targeted for buying subscription to a package containing more information on the topic. In another example Rank 3 may imply that in addition to everything that can be done for Rank 2 reorder features and applications so as to ease the subscriber s access. In yet another example Rank 4 may imply that in addition to everything that can be done for Rank 3 brand the subscriber as having passion for information relating to a certain topic and the user experience should be defined in a manner that makes the person access related information with least possible browsing.

In various embodiments of the present invention the ranking engine analyzes dynamic information related to a subscriber request and updates the rank of the request. In an example the ranking engine uses keyword based search to find requests from a subscriber corresponding to a particular interest area. Based upon the search results it adjusts the rank of the subscriber for that particular area. After ranking of a request is adjusted by the ranking engine the configuration information corresponding to the request is stored in the database and the configuration information is then retrieved by the software platform . The software platform then provides the request to the requesting device based on the configuration information.

The architecture comprises a development framework an execution framework an application components module and a media transformation engine . In an embodiment of the present invention the development framework comprises components for developing and storing markup language templates for rendering applications on to various devices. In an embodiment of the present invention the templates are defined in Extensible Markup Language XML . In various embodiments of the present invention the XML templates are defined by a developer using an application programming interface. The XML templates may be stored in a repository in a file system.

The execution framework is responsible for receiving an application request determining a type of device based on the request and selecting an XML template. Further the execution framework in conjunction with the application components module generates an XML structure of a page corresponding to the application. The application components module is responsible for invoking page handlers for generating the XML structure of the page.

In an embodiment of the present invention the page handlers not shown contacts an Application s Business Logic Layer to obtain information required to be embedded in the page.

In various embodiments of the present invention the execution framework generates an output page which is rendered on to the requesting device.

In an embodiment of the present invention a request for an application from a device may include request for media content. The execution framework passes request for media content to the media transformation engine which provides media content to the requesting device.

In various embodiments of the present invention a user accesses a web based application by entering a URL in a browser of the requesting device. In an embodiment of the present invention the requesting device may include devices such as a personal computer a television a mobile phone a personal digital assistant a blackberry and the like having standards based browser for rendering a Hypertext Markup language HTML or Extensible Hypertext Markup Language XHTML application on the requesting device. The request is received by a web application server that is front ending the application environment. In various embodiments of the present invention the controller in the system receives the request for the web based application from the web application server. Thereafter the controller extracts details of the web based application request.

Further the controller transfers the request to the device capabilities module . Information about capabilities of various standard devices is stored in a database which is accessed by the device capabilities module . In an example capabilities of a device include capabilities related to aspect ratio display resolution available media players etc. and the capabilities of the browser interpreter on the device such as support for JavaScript media types fonts etc. In an embodiment of the present invention the device capabilities module gets information about capabilities of the requesting device and sends the information back to the controller . Then the controller passes the request information to the request handler .

In various embodiments of the present invention the development framework is configured to generate XML templates of standard applications. The XML templates are generated by applying rules stored in the rules engine . In an embodiment of the present invention an HTML file of a standard application is converted to an Extensible Markup Language XML file using rules stored in the rules engine . A standard template is a layout generated for a specific category of applications. In an embodiment of the present invention typical web based applications are classified into categories and for each category a standard template is generated. Examples of categories may include but are not limited to application categories such as banking video store social networking local updates and the like. Further the user interface transformer comprises XML templates defining user interface layout data for rendering data onto devices such as television mobile device etc. The XML templates corresponding to standard application categories and device specific templates are stored in a repository in the file system.

The request handler accesses the application adaptor to identify the applications adapter class to be invoked and then instantiates the class. The application adaptor further invokes page handlers to generate Extensible Markup Language XML structure for a corresponding page of the application. In an embodiment of the present invention the page handlers are stored as configuration files. A page handler facilitates transformation of format of the web based application to suit the type of the device requesting the web based application. The page handlers utilize XML templates corresponding to standard application categories and device specific templates stored in a repository in the file system for generating Extensible Markup Language XML structure for a corresponding page of the application. In an embodiment of the present invention the page handlers contacts Business Logic Layer to get information required to be embedded in the page.

In an embodiment of the present invention a device in the device hosting module such as a television may request access to a web based application such as a gaming application that requires an input mechanism such as a QWERTY keyboard. The application adaptor therefore performs navigational transformation and facilitates a virtual keyboard to be displayed on the television screen. The virtual keyboard enables the user of the television to enter input on the web based application by using a television remote. The application adaptor modifies the XML file of the requested application with user interface layout data of the television for adapting user interface of the application to suit requirements of the television. In an embodiment of the present invention the application adaptor uses information about capabilities of the requesting device television for generating an XML file for the requested application.

In an embodiment of the present invention the application adaptor sends back the XML file to the request handler . Thereafter the request handler sends the XML string received from the application adaptor to the controller . The controller passes the raw XML string along with information required to transform the user interface to the response handler . In an example the information required to transform user interface includes style sheets and transformation logic.

Further the response handler passes information to the Data Transformer . Thereafter the data transformer generates the final output page either in HTML or XHTML format that can be rendered on a user device. In an embodiment of the present invention the data transformer returns output page to the response handler . The response handler thereby returns the output page to the controller and the controller returns the output page to the device requesting the web based application.

The controller then contacts the device capabilities module which is configured to obtain device capabilities information and render Extensible Stylesheet Language XSL plug ins and Cascading Style Sheet CSS sheets for the requesting device. Further based on the device capabilities information received the device capabilities module is responsible for setting the height and width parameters of the requesting device and sending this information to the controller .

In various embodiments of the present invention the device request handler is configured to identify the requested applications Adapter class to be invoked from the configuration file application.properties . The device request handler is further configured to obtain page entry details from the configuration file requestconfig.xml . The device request handler is further configured to call the application s Adapter class by passing the page entry details. The device response handler is configured to extract response entries for pagination details by reading the configuration file responseconfig.xml . The system further includes page handlers that are used to construct Extensible Markup Language XML structure of pages corresponding to the requested application. The system further interacts with a Media Transformation Engine MTE not shown in the figure for extracting media corresponding to a requested application. In various embodiments of the present invention a page handler corresponding to a requested application contacts the MTE by passing parameters such as user identifier userid product identifier product id type of device deviceType and entitlement identifier entitlementid .

In various embodiments of the present invention the multichannel rendering framework further comprises a data transformer and a file system . The data transformer is configured to receive final XML structured page of the requested application the XSL plug in and the CSS style sheet details along with other pagination details from the device response handler . Further the data transformer receives the Extensible Style sheet Language Transformations XSLT from the file system . The data transformer then transforms the XML from the device request handler using the previously obtained XSL into device specific human readable document in XHTML format.

As described in conjunction with the description of when a request for an application is received from a user by the system for providing applications the system transforms the navigational and user interface related aspects of the requested application. Referring now to the execution framework in conjunction with the application components module transforms the navigational and user interface related aspects of the requested web based application. In an embodiment of the present invention the execution framework uses templates developed in the development framework for the transformation. The development framework facilitates the user to write a code for a particular application only once for rendering the application on different devices. The user may be a developer or any other person using the development framework. Thus an application that is written for rendering on a mobile phone need not be re written when a request for the same application is made to render on a television This would facilitate the user to focus on implementing functionality efficiently.

In an embodiment of the present invention the execution framework includes the following components illustrated in the controller the request handler the response handler the device capabilities module and the data transformer .

The development framework comprises the user interface transformer and the rules engine . Further if the requested web based application requires provision of transformed media content to the requesting device the request to access media content is sent to the media transformation engine . Examples of content that may require transformation includes but is not limited to images audio video etc.

The request for media content is sent to the media controller . In an embodiment the request is accompanied by one or more parameters needed to identify the media. The parameters may include device type bit rate format etc.

Upon receiving the request for content the media controller contacts the device capabilities module in the execution framework in order to receive capabilities of device requesting the web based application. In an embodiment of the present invention the device capabilities module queries a device capabilities database not shown in the figure for the device type and retrieves the data of media supported by that device. Examples of capabilities of devices include but may not be limited to screensize make of the device type of browser support type of security support keyboard type bits per pixel type of operating system message size limits version of Mobile Information Device Profile MIDP .

The media controller then passes the request to the media handler . The media handler checks the media cache to see whether a transformed version of the requested content for the type of device requesting the content is available. In various embodiments of the present invention frequently requested content is transformed in advance and stored in the media cache . This is done so that a requested application is delivered in shortest possible time by accessing transformed content from the media cache instead of generating transformed content dynamically in the media transformation engine .

The steps for storing frequently requested content in the media cache comprises the initial step of tracking access information. In an embodiment of the present invention access information being tracked includes but is not limited to types of web based applications accessed types of content requested etc. Based on requests received by the media controller the customer profile module receives user preferences and usage information. The user preferences and usage information is then passed on to the real time analysis module . The real time analysis module analyses the user preferences and constructs content data that is most likely to be requested in near future based on usage pattern. In various embodiments of the present invention the content data is pre fetched from the content provider and transformed into most popular device specific formats. The transformed content elements are then stored in the media cache .

In an embodiment of the present invention if transformed content for a requested application is available in the media cache a Universal Resource Identifier URI corresponding to the media content is returned to the media controller . The media controller then returns the URI to the requesting application.

In another embodiment of the present invention if transformed content for a requested application is not available in the media cache the media handler communicates the media transcoder . The media transcoder fetches media content from the shared storage . Subsequently the obtained content is then transcoded by the media transcoder into a format requested by the requesting device. The media transcoder then stores the transcoded media content in the media cache .

In an embodiment of the present invention the media handler retrieves URI corresponding to the transcoded media content from the media cache and returns the URI to the media controller . The media controller then sends the media content to the requesting application.

As described in conjunction with the description of when a request for an application is received from a user by the system for providing applications the system provides the application to the requesting device in accordance with the specifications of the requesting device. In various embodiments of the present invention if the application requires access to media the media request is provided to the media transformation engine . The media transformation engine delivers media in required format specific to the requesting client. In an embodiment of the present invention depending on the media name and format requested by the client the media transformation engine will return appropriate media Uniform Resource Locator URL or Video On Demand asset ID which may be accessed and played by the client.

In various embodiments of the present invention the execution framework sends media request to the media request servlet . The media request servlet processes the request parameters and passes the details to the media handler . Thereafter the media handler checks the request for any missing parameters and forwards the request object to the device capability handler . The device capability handler in turn queries the device capability database for the device type and retrieves the data which can be supported by that device. Thereafter the device capability handler updates the missing parameters of the request object with the data. The updated request object is then returned to the media handler . The media database handler is configured to receive the updated request object from the media handler and for retrieving media from the media cache . The media database handler searches the requested media in the media cache and if present then it returns the URL. However if the requested media is not present in the media cache then it searches for the media in the file server and sends the response object containing Media URL or VOD Asset ID back to the Media Handler .

In an embodiment of the present invention if the media in the requested format is not available the Media Handler receives a null response object and in this case it gets media URL from Media Cache with the same media name and passes it along with the request object to the Transcoder Media Handler . The Transcoder Media Handler extracts the required parameters from the request object and triggers the transcoder operation through command line. After transcoding is completed it returns the media response object to the Media Handler . Concurrently the Transcoder Media Handler uploads the trancoded media to the Media Cache and updates the database with its properties.

In various embodiments of the present invention the media transformation engine supports the following video formats for display on a TV connected to the data network 1920 1080 ITU R BT.709 1280 720p ITU R BT.1543 720x483 ITU R BT.601 720x576 ITU R BT.1358 . In other embodiments of the present invention the media transformation engine supports the following audio formats for a TV 5.1 channel audio 2 channel audio. In yet other embodiments of the present invention the media transformation engine supports the following digital transport streaming formats for display of videos on a TV connected to a data network H.264 AVC MPEG4 part MPEG2 ISO IEC 13818 2 and VC SMPTE 421M . In yet other embodiments of the present invention following audio codec s are supported by the media transformation module for a TV AC Digital Audio Compression AC ATSC A 52 MPEG 2 AAC ISO IEC13818 7 MPEG 4 AAC ISO IEC14496 3 MPEG 2 Audio BC ISO IEC 13818 3 MP3 file.

In an embodiment of the present invention a mobile phone should be able to support at least one of the following formats to receive content from the media transformation engine MPEG 4 AAC Profile Level MPEG 4 HE AAC Profile Level .

In another embodiment of the present invention a mobile phone should be able to support the content type video . If the content type video is supported the mobile phone should support Decoding of ITU T Recommendation H.263 profile level . In an example the mobile should also be able to support decoding of at least one of the following MPEG 4 Visual Simple Profile Level 0b H.264 Baseline Profile Level b with constraint setl flag 1 and decoding of H.263 Profile Level .

At step an XML structure for corresponding page of requested application is generated. In an embodiment of the present invention the application adaptor component invokes respective page handlers to generate XML structure for corresponding page. In an embodiment of the present invention page handlers contact business logic layer to get information required to be embedded in a page.

At step an XML string required to transform user interface is provided to response handler. In an embodiment of the present invention the application adaptor component generates the XML string and sends it to the request handler component. Thereafter the request handler returns the string to the controller which passes the raw string along with details required to transform user interface to response handler component. In an embodiment the details include style sheets transformation logic etc. In an example if the request contains a request for a media component the request handler gets the media s URL from Media Transformation Engine MTE component and embeds the URL in the response XML sent to response handler.

At step a final output page is generated in HTML XHTML format. In an embodiment of the present invention the response handler passes information required to transform user interface to data transformer component. The data transformer then generates the final output page in HTML XHTML format that can be rendered on a user device.

At step the final output page is provided to the requesting device. In an embodiment of the present invention the data transformer returns output page to response handler. The response handler returns the page to the controller that provides the page to the requesting device.

At step it is checked whether the requested media content is available in the media cache. In an embodiment of the present invention the media controller passes the request for media content to the media handler. The media handler checks the media cache to see whether a transformed version of the requested content for the type of device requesting the content is available. At step if the requested media content is available in the media cache a Universal Resource Identifier URI corresponding to the media is returned to media controller. The media controller then returns the URI to the requesting application.

At step if the requested media content is not available in the media cache the media content is fetched from a shared storage database by the media transcoder. Thereafter at step the fetched media content is transcoded according to the format of the requesting device by the media transcoder.

At step the fetched media content is stored in the media cache by the media transcoder. Subsequently the media transcoder informs media handler that required media content is available in the media cache database. At step the URI corresponding to the media content is provided to the media controller and the media controller provides the URI to the requesting device.

At step a request for the application is submitted by a user. In an example a user may submit an application request by entering the Uniform Resource Locator URL into a browser. The request may be received by a web server specifically by a web container of the server. At step the server reads the web.xml file of the application and passes the request to a Controller servlet. In an embodiment of the present invention the Controller servlet is configured in the application s web.xml file. The Controller servlet reads one or more configuration files and keeps them in its cache as key value pairs for later use. In an example the configuration files comprise data required for invoking the requested application s Adapter class. In another example the application files may be at least one of application.properties file and deviceException.properties file. In an embodiment of the present invention the application.properties file is used to set properties associated with a particular application.

At step the controller extracts the user agent and other necessary parameters from the request received and it contacts the Device Capabilities component. Thereafter the Device Capabilities component queries a database accessed by the Device Capabilities component. In an embodiment of the present invention at step the Device Capabilities component gets information about capabilities of the requesting device and sends the device related information back to the controller.

At step the controller calls Request Handler component and passes request information to the component. In an embodiment of the present invention the Request Handler component identifies the application s Adapter class to be invoked by reading the application.properties file and it instantiates this application s Adapter class. Further the Request Handler component reads header footer files information from application.properties file and keeps the information in its cache. The request handler then passes the information to the controller.

In various embodiments of the present invention at step the Request Handler component reads the configuration file RequestConfig.xml and using the page name that it received from the Controller it extracts corresponding page entry details i.e URL and parameter values. At step based on the URL and parameter values received from the Request Handler component the Adapter class invokes appropriate Handler in the application. In an example if the application request submitted by the user at step includes request for playing a media file such as a video file the handler invoked by the Adapter class will contact the Media Transformation Engine MTE component by passing userid productid deviceType and entitlementid parameters. In an embodiment of the present invention if the request is from Mobile and PC users then based on the parameters it received MTE queries its database to see if the requested media is available in the specified format. However if the requested media is not available in the specified format the MTE transcodes the media to the desired format dynamically and returns the URL to Mobile and PC users. In another embodiment of the present invention if the request is from IPTV then the MTE will query the database and return the Video On Demand asset identifier.

Subsequently at step the controller calls response handler by passing raw Extensible Markup Language XML string header and footer files information from application.properties file along with Extensible Stylesheet Language XSL plug in and Cascading Style Sheets CSS details. Then the response handler extracts response entries for pagination details by reading ResponseConfig.xml file. In an embodiment of the present invention the ResponseConfig.xml is an XML file containing page details for which pagination is required. Pagination is a concept used if there is a limit on no items to be displayed in limited no of rows per page. For example say if the no of rows to be displayed in a particular page is 3 and there are 15 items in that page. In this case if pagination technique is used 3 items in 3 rows per page will be displayed and in an exemplary embodiment at the bottom of the first page page with page number hyperlinks will be activated. And in the subsequent pages 12 links will be activated.

At step the response handler sends final XML XSL plug in and CSS style sheet details along with pagination details to Data Transformer component. Thereafter at step the Data Transformer component generates final output page either in HTML or XHTML format to be displayed on user interface of the device. Finally at step the final output page is sent to the requesting device.

The method and system of the present invention can be used to provide service providers with fast and efficient ways to build applications for various devices. The system helps service providers to reduce time to market by helping service providers quickly develop and deploy applications on different channels. The system helps service providers to reduce time to market by helping service providers quickly develop and deploy applications on different channels. Also costs involved in development and deployment are reduced to a great extent. Further user characterization can be done efficiently due to a single platform for recording and analysis. Hence service providers can provide better services to the users.

The system provides users with a transformation in the user interface and navigation of the applications to suit the device used to access the application. This eases out the efforts that users had to put in earlier systems to scroll the page of the application and enter keywords strings in the application. Further the most popular content on various applications is converted to formats suitable for various devices and is stored in a media cache. This reduces the workload and time delay in providing users with content on certain popular applications.

While the exemplary embodiments of the present invention are described and illustrated herein it will be appreciated that they are merely illustrative. It will be understood by those skilled in the art that various modifications in form and detail may be made therein without departing from or offending the spirit and scope of the invention as defined by the appended claims.

